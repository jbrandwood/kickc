
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @2
  (byte*) screen#15 ← phi( @2/(byte*) screen#17 )
  (byte*) print::msg#0 ← (const byte*) msg1
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#8 ← phi( main/(byte*) screen#6 )
  (byte*) screen#0 ← (byte*) screen#8
  (byte*) print::msg#1 ← (const byte*) main::msg2
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#9 ← phi( main::@1/(byte*) screen#6 )
  (byte*) screen#1 ← (byte*) screen#9
  (byte*) print::msg#2 ← (const byte*) main::msg
  call print 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) screen#10 ← phi( main::@2/(byte*) screen#6 )
  (byte*) screen#2 ← (byte*) screen#10
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte*) screen#11 ← phi( main::@3/(byte*) screen#2 )
  (byte*) screen#3 ← (byte*) screen#11
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) screen#4 ← (byte*)(number) $400
  to:@2

(void()) print((byte*) print::msg)
print: scope:[print]  from main main::@1 main::@2
  (byte*) screen#18 ← phi( main/(byte*) screen#15 main::@1/(byte*) screen#0 main::@2/(byte*) screen#1 )
  (byte*) print::msg#6 ← phi( main/(byte*) print::msg#0 main::@1/(byte*) print::msg#1 main::@2/(byte*) print::msg#2 )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  (byte*) screen#16 ← phi( print/(byte*) screen#18 print::@2/(byte*) screen#5 )
  (byte*) print::msg#4 ← phi( print/(byte*) print::msg#6 print::@2/(byte*) print::msg#3 )
  (bool~) print::$0 ← (number) 0 != *((byte*) print::msg#4)
  if((bool~) print::$0) goto print::@2
  to:print::@return
print::@2: scope:[print]  from print::@1
  (byte*) screen#12 ← phi( print::@1/(byte*) screen#16 )
  (byte*) print::msg#5 ← phi( print::@1/(byte*) print::msg#4 )
  *((byte*) screen#12) ← *((byte*) print::msg#5)
  (byte*) screen#5 ← ++ (byte*) screen#12
  (byte*) print::msg#3 ← ++ (byte*) print::msg#5
  to:print::@1
print::@return: scope:[print]  from print::@1
  (byte*) screen#13 ← phi( print::@1/(byte*) screen#16 )
  (byte*) screen#6 ← (byte*) screen#13
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) screen#17 ← phi( @1/(byte*) screen#4 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte*) screen#14 ← phi( @2/(byte*) screen#3 )
  (byte*) screen#7 ← (byte*) screen#14
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const byte*) main::msg[(byte) $b]  = (byte*) "message 3 "
(const byte*) main::msg2[]  = (byte*) "message 2 "
(const byte*) msg1[]  = (byte*) "message 1 "
(void()) print((byte*) print::msg)
(bool~) print::$0
(label) print::@1
(label) print::@2
(label) print::@return
(byte*) print::msg
(byte*) print::msg#0
(byte*) print::msg#1
(byte*) print::msg#2
(byte*) print::msg#3
(byte*) print::msg#4
(byte*) print::msg#5
(byte*) print::msg#6
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#11
(byte*) screen#12
(byte*) screen#13
(byte*) screen#14
(byte*) screen#15
(byte*) screen#16
(byte*) screen#17
(byte*) screen#18
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

Adding number conversion cast (unumber) 0 in (bool~) print::$0 ← (number) 0 != *((byte*) print::msg#4)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias screen#0 = screen#8 
Alias screen#1 = screen#9 
Alias screen#10 = screen#2 screen#11 screen#3 
Alias print::msg#4 = print::msg#5 
Alias screen#12 = screen#16 screen#13 screen#6 
Alias screen#17 = screen#4 
Alias screen#14 = screen#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) screen#15 (byte*) screen#17
Identical Phi Values (byte*) screen#0 (byte*) screen#12
Identical Phi Values (byte*) screen#1 (byte*) screen#12
Identical Phi Values (byte*) screen#10 (byte*) screen#12
Identical Phi Values (byte*) screen#14 (byte*) screen#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print::$0 [15] if((byte) 0!=*((byte*) print::msg#4)) goto print::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print::msg#0 = msg1
Constant (const byte*) print::msg#1 = main::msg2
Constant (const byte*) print::msg#2 = main::msg
Constant (const byte*) screen#17 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) print::msg#0
Inlining constant with var siblings (const byte*) print::msg#1
Inlining constant with var siblings (const byte*) print::msg#2
Inlining constant with var siblings (const byte*) screen#17
Constant inlined print::msg#2 = (const byte*) main::msg
Constant inlined print::msg#1 = (const byte*) main::msg2
Constant inlined print::msg#0 = (const byte*) msg1
Constant inlined screen#17 = (byte*) 1024
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print:7 print:9 print:11 

Created 4 initial phi equivalence classes
Coalesced [8] screen#19 ← screen#12
Coalesced (already) [10] screen#20 ← screen#12
Coalesced [15] print::msg#7 ← print::msg#6
Coalesced (already) [16] screen#21 ← screen#18
Coalesced [23] print::msg#8 ← print::msg#3
Coalesced [24] screen#22 ← screen#5
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @1
Culled Empty Block (label) @3
Culled Empty Block (label) main::@3
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call print 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) print((byte*) print::msg)
print: scope:[print]  from main main::@1 main::@2
  [11] (byte*) screen#18 ← phi( main/(byte*) 1024 main::@1/(byte*) screen#12 main::@2/(byte*) screen#12 )
  [11] (byte*) print::msg#6 ← phi( main/(const byte*) msg1 main::@1/(const byte*) main::msg2 main::@2/(const byte*) main::msg )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [12] (byte*) screen#12 ← phi( print/(byte*) screen#18 print::@2/(byte*) screen#5 )
  [12] (byte*) print::msg#4 ← phi( print/(byte*) print::msg#6 print::@2/(byte*) print::msg#3 )
  [13] if((byte) 0!=*((byte*) print::msg#4)) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [14] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [15] *((byte*) screen#12) ← *((byte*) print::msg#4)
  [16] (byte*) screen#5 ← ++ (byte*) screen#12
  [17] (byte*) print::msg#3 ← ++ (byte*) print::msg#4
  to:print::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) print((byte*) print::msg)
(byte*) print::msg
(byte*) print::msg#3 2002.0
(byte*) print::msg#4 1026.25
(byte*) print::msg#6 101.0
(byte*) screen
(byte*) screen#12 390.75
(byte*) screen#18 123.0
(byte*) screen#5 1001.0

Initial phi equivalence classes
[ screen#18 screen#12 screen#5 ]
[ print::msg#4 print::msg#6 print::msg#3 ]
Complete equivalence classes
[ screen#18 screen#12 screen#5 ]
[ print::msg#4 print::msg#6 print::msg#3 ]
Allocated zp[2]:2 [ screen#18 screen#12 screen#5 ]
Allocated zp[2]:4 [ print::msg#4 print::msg#6 print::msg#3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Inline Strings in method calls are automatically converted to local constant variables byte st[] = "..."; - generating an ASM .text).
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    // [11] phi from main to print [phi:main->print]
  print_from_main:
    // [11] phi (byte*) screen#18 = (byte*) 1024 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi (byte*) print::msg#6 = (const byte*) msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print 
    // [11] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [11] phi (byte*) screen#18 = (byte*) screen#12 [phi:main::@1->print#0] -- register_copy 
    // [11] phi (byte*) print::msg#6 = (const byte*) main::msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.msg
    lda #>msg2
    sta.z print.msg+1
    jsr print
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call print 
    // [11] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [11] phi (byte*) screen#18 = (byte*) screen#12 [phi:main::@2->print#0] -- register_copy 
    // [11] phi (byte*) print::msg#6 = (const byte*) main::msg [phi:main::@2->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
    msg2: .text "message 2 "
    .byte 0
    msg: .text "message 3 "
    .byte 0
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [12] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [12] phi (byte*) screen#12 = (byte*) screen#18 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [12] phi (byte*) print::msg#4 = (byte*) print::msg#6 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [13] if((byte) 0!=*((byte*) print::msg#4)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [14] return 
    rts
    // print::@2
  __b2:
    // [15] *((byte*) screen#12) ← *((byte*) print::msg#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (screen),y
    // [16] (byte*) screen#5 ← ++ (byte*) screen#12 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [17] (byte*) print::msg#3 ← ++ (byte*) print::msg#4 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data
  msg1: .text "message 1 "
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] if((byte) 0!=*((byte*) print::msg#4)) goto print::@2 [ screen#12 print::msg#4 ] ( main:2::print:5 [ screen#12 print::msg#4 ] { }  main:2::print:7 [ screen#12 print::msg#4 ] { { screen#12 = screen#18 } }  main:2::print:9 [ screen#12 print::msg#4 ] { { screen#12 = screen#18 } }  ) always clobbers reg byte a reg byte y 
Statement [15] *((byte*) screen#12) ← *((byte*) print::msg#4) [ screen#12 print::msg#4 ] ( main:2::print:5 [ screen#12 print::msg#4 ] { }  main:2::print:7 [ screen#12 print::msg#4 ] { { screen#12 = screen#18 } }  main:2::print:9 [ screen#12 print::msg#4 ] { { screen#12 = screen#18 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ screen#18 screen#12 screen#5 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ print::msg#4 print::msg#6 print::msg#3 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 3,129.25: zp[2]:4 [ print::msg#4 print::msg#6 print::msg#3 ] 
Uplift Scope [] 1,514.75: zp[2]:2 [ screen#18 screen#12 screen#5 ] 
Uplift Scope [main] 

Uplifting [print] best 706 combination zp[2]:4 [ print::msg#4 print::msg#6 print::msg#3 ] 
Uplifting [] best 706 combination zp[2]:2 [ screen#18 screen#12 screen#5 ] 
Uplifting [main] best 706 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Inline Strings in method calls are automatically converted to local constant variables byte st[] = "..."; - generating an ASM .text).
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print 
    // [11] phi from main to print [phi:main->print]
  print_from_main:
    // [11] phi (byte*) screen#18 = (byte*) 1024 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi (byte*) print::msg#6 = (const byte*) msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print 
    // [11] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [11] phi (byte*) screen#18 = (byte*) screen#12 [phi:main::@1->print#0] -- register_copy 
    // [11] phi (byte*) print::msg#6 = (const byte*) main::msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.msg
    lda #>msg2
    sta.z print.msg+1
    jsr print
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call print 
    // [11] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [11] phi (byte*) screen#18 = (byte*) screen#12 [phi:main::@2->print#0] -- register_copy 
    // [11] phi (byte*) print::msg#6 = (const byte*) main::msg [phi:main::@2->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
    msg2: .text "message 2 "
    .byte 0
    msg: .text "message 3 "
    .byte 0
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [12] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [12] phi (byte*) screen#12 = (byte*) screen#18 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [12] phi (byte*) print::msg#4 = (byte*) print::msg#6 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [13] if((byte) 0!=*((byte*) print::msg#4)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [14] return 
    rts
    // print::@2
  __b2:
    // [15] *((byte*) screen#12) ← *((byte*) print::msg#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (screen),y
    // [16] (byte*) screen#5 ← ++ (byte*) screen#12 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [17] (byte*) print::msg#3 ← ++ (byte*) print::msg#4 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data
  msg1: .text "message 1 "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_from___b2:
Removing instruction __b1_from_print:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::msg[(byte) $b]  = (byte*) "message 3 "
(const byte*) main::msg2[]  = (byte*) "message 2 "
(const byte*) msg1[]  = (byte*) "message 1 "
(void()) print((byte*) print::msg)
(label) print::@1
(label) print::@2
(label) print::@return
(byte*) print::msg
(byte*) print::msg#3 msg zp[2]:4 2002.0
(byte*) print::msg#4 msg zp[2]:4 1026.25
(byte*) print::msg#6 msg zp[2]:4 101.0
(byte*) screen
(byte*) screen#12 screen zp[2]:2 390.75
(byte*) screen#18 screen zp[2]:2 123.0
(byte*) screen#5 screen zp[2]:2 1001.0

zp[2]:2 [ screen#18 screen#12 screen#5 ]
zp[2]:4 [ print::msg#4 print::msg#6 print::msg#3 ]


FINAL ASSEMBLER
Score: 605

  // File Comments
// Inline Strings in method calls are automatically converted to local constant variables byte st[] = "..."; - generating an ASM .text).
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print(msg1)
    // [5] call print 
    // [11] phi from main to print [phi:main->print]
    // [11] phi (byte*) screen#18 = (byte*) 1024 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi (byte*) print::msg#6 = (const byte*) msg1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print.msg
    lda #>msg1
    sta.z print.msg+1
    jsr print
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print(msg2)
    // [7] call print 
    // [11] phi from main::@1 to print [phi:main::@1->print]
    // [11] phi (byte*) screen#18 = (byte*) screen#12 [phi:main::@1->print#0] -- register_copy 
    // [11] phi (byte*) print::msg#6 = (const byte*) main::msg2 [phi:main::@1->print#1] -- pbuz1=pbuc1 
    lda #<msg2
    sta.z print.msg
    lda #>msg2
    sta.z print.msg+1
    jsr print
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print("message 3 ")
    // [9] call print 
    // [11] phi from main::@2 to print [phi:main::@2->print]
    // [11] phi (byte*) screen#18 = (byte*) screen#12 [phi:main::@2->print#0] -- register_copy 
    // [11] phi (byte*) print::msg#6 = (const byte*) main::msg [phi:main::@2->print#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print.msg
    lda #>msg
    sta.z print.msg+1
    jsr print
    // main::@return
    // }
    // [10] return 
    rts
    msg2: .text "message 2 "
    .byte 0
    msg: .text "message 3 "
    .byte 0
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [12] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
    // [12] phi (byte*) screen#12 = (byte*) screen#18 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [12] phi (byte*) print::msg#4 = (byte*) print::msg#6 [phi:print/print::@2->print::@1#1] -- register_copy 
    // print::@1
  __b1:
    // while(*msg)
    // [13] if((byte) 0!=*((byte*) print::msg#4)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    // print::@return
    // }
    // [14] return 
    rts
    // print::@2
  __b2:
    // *(screen++) = *(msg++)
    // [15] *((byte*) screen#12) ← *((byte*) print::msg#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    sta (screen),y
    // *(screen++) = *(msg++);
    // [16] (byte*) screen#5 ← ++ (byte*) screen#12 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [17] (byte*) print::msg#3 ← ++ (byte*) print::msg#4 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1
}
  // File Data
  msg1: .text "message 1 "
  .byte 0

