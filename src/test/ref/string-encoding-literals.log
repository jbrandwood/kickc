
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte*~) main::$0 ← (const byte*) main::SCREEN + (number) $28*(number) 0
  *((byte*~) main::$0 + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2)
  (byte*~) main::$1 ← (const byte*) main::SCREEN + (number) $28*(number) 1
  *((byte*~) main::$1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2)
  (byte*~) main::$2 ← (const byte*) main::SCREEN + (number) $28*(number) 2
  *((byte*~) main::$2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2)
  (byte*~) main::$3 ← (const byte*) main::SCREEN + (number) $28*(number) 3
  *((byte*~) main::$3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2)
  (byte*~) main::$4 ← (const byte*) main::SCREEN + (number) $28*(number) 4
  *((byte*~) main::$4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2)
  (byte*~) main::$5 ← (const byte*) main::SCREEN + (number) $28*(number) 5
  *((byte*~) main::$5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2)
  (byte*~) main::$6 ← (const byte*) main::SCREEN + (number) $28*(number) 6
  *((byte*~) main::$6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2)
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,5)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,5)
  if((bool~) main::$7) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(byte*~) main::$2
(byte*~) main::$3
(byte*~) main::$4
(byte*~) main::$5
(byte*~) main::$6
(bool~) main::$7
(label) main::@1
(label) main::@return
(const byte*) main::SCREEN = (byte*)(number) $400
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(const byte*) petscii_mixed[]  = (byte*) "abcABC1"pm
(const byte*) petscii_standard[]  = (byte*) "abcABC3"pm
(const byte*) petscii_upper[]  = (byte*) "abcABC2"pu
(const byte*) screencode_mixed[]  = (byte*) "abcABC4"
(const byte*) screencode_standard[]  = (byte*) "abcABC6"
(const byte*) screencode_upper[]  = (byte*) "abcABC5"su
(const byte*) standard[]  = (byte*) "abcABC7"

Adding number conversion cast (unumber) $28*0 in (byte*~) main::$0 ← (const byte*) main::SCREEN + (number) $28*(number) 0
Adding number conversion cast (unumber) $28*1 in (byte*~) main::$1 ← (const byte*) main::SCREEN + (number) $28*(number) 1
Adding number conversion cast (unumber) $28*2 in (byte*~) main::$2 ← (const byte*) main::SCREEN + (number) $28*(number) 2
Adding number conversion cast (unumber) $28*3 in (byte*~) main::$3 ← (const byte*) main::SCREEN + (number) $28*(number) 3
Adding number conversion cast (unumber) $28*4 in (byte*~) main::$4 ← (const byte*) main::SCREEN + (number) $28*(number) 4
Adding number conversion cast (unumber) $28*5 in (byte*~) main::$5 ← (const byte*) main::SCREEN + (number) $28*(number) 5
Adding number conversion cast (unumber) $28*6 in (byte*~) main::$6 ← (const byte*) main::SCREEN + (number) $28*(number) 6
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition (bool~) main::$7 [18] if((byte) main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [2] (byte*~) main::$0 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 0
Constant right-side identified [4] (byte*~) main::$1 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 1
Constant right-side identified [6] (byte*~) main::$2 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 2
Constant right-side identified [8] (byte*~) main::$3 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 3
Constant right-side identified [10] (byte*~) main::$4 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 4
Constant right-side identified [12] (byte*~) main::$5 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 5
Constant right-side identified [14] (byte*~) main::$6 ← (const byte*) main::SCREEN + (byte)(number) $28*(number) 6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::$0 = main::SCREEN+(byte)$28*0
Constant (const byte*) main::$1 = main::SCREEN+(byte)$28*1
Constant (const byte*) main::$2 = main::SCREEN+(byte)$28*2
Constant (const byte*) main::$3 = main::SCREEN+(byte)$28*3
Constant (const byte*) main::$4 = main::SCREEN+(byte)$28*4
Constant (const byte*) main::$5 = main::SCREEN+(byte)$28*5
Constant (const byte*) main::$6 = main::SCREEN+(byte)$28*6
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [16] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [18] if(main::i#1!=rangelast(0,5)) goto main::@1 to (number) 6
Simplifying constant evaluating to zero (byte)(number) $28*(number) 0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in 
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [9] if((byte) main::i#1!=(number) 6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::$1 = (const byte*) main::SCREEN+(byte)(number) $28*(number) 1
Constant inlined main::$2 = (const byte*) main::SCREEN+(byte)(number) $28*(number) 2
Constant inlined main::$0 = (const byte*) main::SCREEN
Constant inlined main::$5 = (const byte*) main::SCREEN+(byte)(number) $28*(number) 5
Constant inlined main::i#0 = (byte) 0
Constant inlined main::$6 = (const byte*) main::SCREEN+(byte)(number) $28*(number) 6
Constant inlined main::$3 = (const byte*) main::SCREEN+(byte)(number) $28*(number) 3
Constant inlined main::$4 = (const byte*) main::SCREEN+(byte)(number) $28*(number) 4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [12] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [2] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2)
  [3] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2)
  [4] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2)
  [5] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2)
  [6] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2)
  [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2)
  [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2)
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test string encoding via literals
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda petscii_mixed,y
    sta SCREEN,y
    // [3] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda petscii_upper,y
    sta SCREEN+$28*1,y
    // [4] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda petscii_standard,y
    sta SCREEN+$28*2,y
    // [5] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda screencode_mixed,y
    sta SCREEN+$28*3,y
    // [6] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda screencode_upper,y
    sta SCREEN+$28*4,y
    // [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda screencode_standard,y
    sta SCREEN+$28*5,y
    // [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda standard,y
    sta SCREEN+$28*6,y
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if((byte) main::i#1!=(byte) 6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
  standard: .text "abcABC7"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 846 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 846 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test string encoding via literals
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_mixed,x
    sta SCREEN,x
    // [3] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_upper,x
    sta SCREEN+$28*1,x
    // [4] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_standard,x
    sta SCREEN+$28*2,x
    // [5] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_mixed,x
    sta SCREEN+$28*3,x
    // [6] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_upper,x
    sta SCREEN+$28*4,x
    // [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_standard,x
    sta SCREEN+$28*5,x
    // [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda standard,x
    sta SCREEN+$28*6,x
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) 6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
  standard: .text "abcABC7"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 22.0
(const byte*) petscii_mixed[]  = (byte*) "abcABC1"pm
(const byte*) petscii_standard[]  = (byte*) "abcABC3"pm
(const byte*) petscii_upper[]  = (byte*) "abcABC2"pu
(const byte*) screencode_mixed[]  = (byte*) "abcABC4"
(const byte*) screencode_standard[]  = (byte*) "abcABC6"
(const byte*) screencode_upper[]  = (byte*) "abcABC5"su
(const byte*) standard[]  = (byte*) "abcABC7"

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 756

  // File Comments
// Test string encoding via literals
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (SCREEN+40*0)[i] = petscii_mixed[i]
    // [2] *((const byte*) main::SCREEN + (byte) main::i#2) ← *((const byte*) petscii_mixed + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_mixed,x
    sta SCREEN,x
    // (SCREEN+40*1)[i] = petscii_upper[i]
    // [3] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← *((const byte*) petscii_upper + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_upper,x
    sta SCREEN+$28*1,x
    // (SCREEN+40*2)[i] = petscii_standard[i]
    // [4] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← *((const byte*) petscii_standard + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_standard,x
    sta SCREEN+$28*2,x
    // (SCREEN+40*3)[i] = screencode_mixed[i]
    // [5] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← *((const byte*) screencode_mixed + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_mixed,x
    sta SCREEN+$28*3,x
    // (SCREEN+40*4)[i] = screencode_upper[i]
    // [6] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 4 + (byte) main::i#2) ← *((const byte*) screencode_upper + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_upper,x
    sta SCREEN+$28*4,x
    // (SCREEN+40*5)[i] = screencode_standard[i]
    // [7] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← *((const byte*) screencode_standard + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_standard,x
    sta SCREEN+$28*5,x
    // (SCREEN+40*6)[i] = standard[i]
    // [8] *((const byte*) main::SCREEN+(byte)(number) $28*(number) 6 + (byte) main::i#2) ← *((const byte*) standard + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda standard,x
    sta SCREEN+$28*6,x
    // for( byte i: 0..5 )
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) 6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
  standard: .text "abcABC7"
  .byte 0

