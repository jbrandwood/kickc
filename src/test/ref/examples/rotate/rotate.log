Resolved forward reference SPRITE to (byte*) SPRITE
Identified constant variable (byte*) SCREEN
Identified constant variable (byte*) SPRITE
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call mulf8s_prepare (signed byte) mulf8s::a 
Inlined call call mulf8s_prepare (signed byte) anim::cos_a 
Inlined call call mulf8s_prepare (signed byte) anim::sin_a 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) mulf8u_prepared::@1
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) mulf8s_prepared::@5
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) init::@2
Culled Empty Block (label) anim::@2
Culled Empty Block (label) anim::@15
Culled Empty Block (label) anim::@3
Culled Empty Block (label) anim::@16
Culled Empty Block (label) anim::@5
Culled Empty Block (label) anim::@7
Culled Empty Block (label) anim::@8
Culled Empty Block (label) anim::@9
Culled Empty Block (label) anim::mulf8s_prepare1_@return
Culled Empty Block (label) anim::mulf8s_prepare2_@return
Culled Empty Block (label) anim::@14

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (number) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (number) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (number) $d010
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (number) $d015
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) SPRITES_COLS#0 ← ((byte*)) (number) $d027
  (byte) GREEN#0 ← (number) 5
  (byte) LIGHT_BLUE#0 ← (number) $e
  to:@4
@4: scope:[]  from @begin
  (byte[$200]) mulf_sqr1_lo#0 ← { fill( $200, 0) }
  (byte[$200]) mulf_sqr1_hi#0 ← { fill( $200, 0) }
  (byte[$200]) mulf_sqr2_lo#0 ← { fill( $200, 0) }
  (byte[$200]) mulf_sqr2_hi#0 ← { fill( $200, 0) }
  to:@13
mulf_init: scope:[mulf_init]  from init
  (word) mulf_init::sqr#0 ← (number) 0
  (byte) mulf_init::x_2#0 ← (number) 0
  (byte) mulf_init::c#0 ← (number) 0
  (byte*~) mulf_init::$0 ← (byte[$200]) mulf_sqr1_hi#0 + (number) 1
  (byte*) mulf_init::sqr1_hi#0 ← (byte*~) mulf_init::$0
  (byte*~) mulf_init::$6 ← (byte[$200]) mulf_sqr1_lo#0 + (number) 1
  (byte*) mulf_init::sqr1_lo#0 ← (byte*~) mulf_init::$6
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@2
  (byte) mulf_init::x_2#4 ← phi( mulf_init/(byte) mulf_init::x_2#0 mulf_init::@2/(byte) mulf_init::x_2#2 )
  (byte*) mulf_init::sqr1_hi#3 ← phi( mulf_init/(byte*) mulf_init::sqr1_hi#0 mulf_init::@2/(byte*) mulf_init::sqr1_hi#1 )
  (byte*) mulf_init::sqr1_lo#3 ← phi( mulf_init/(byte*) mulf_init::sqr1_lo#0 mulf_init::@2/(byte*) mulf_init::sqr1_lo#1 )
  (word) mulf_init::sqr#5 ← phi( mulf_init/(word) mulf_init::sqr#0 mulf_init::@2/(word) mulf_init::sqr#1 )
  (byte) mulf_init::c#2 ← phi( mulf_init/(byte) mulf_init::c#0 mulf_init::@2/(byte) mulf_init::c#3 )
  (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  (number~) mulf_init::$7 ← (byte) mulf_init::c#1 & (number) 1
  (bool~) mulf_init::$8 ← (number~) mulf_init::$7 == (number) 0
  (bool~) mulf_init::$9 ← ! (bool~) mulf_init::$8
  if((bool~) mulf_init::$9) goto mulf_init::@2
  to:mulf_init::@3
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1 mulf_init::@3
  (byte) mulf_init::c#3 ← phi( mulf_init::@1/(byte) mulf_init::c#1 mulf_init::@3/(byte) mulf_init::c#4 )
  (byte) mulf_init::x_2#2 ← phi( mulf_init::@1/(byte) mulf_init::x_2#4 mulf_init::@3/(byte) mulf_init::x_2#1 )
  (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#3 mulf_init::@3/(byte*) mulf_init::sqr1_hi#4 )
  (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#3 mulf_init::@3/(byte*) mulf_init::sqr1_lo#4 )
  (word) mulf_init::sqr#3 ← phi( mulf_init::@1/(word) mulf_init::sqr#5 mulf_init::@3/(word) mulf_init::sqr#2 )
  (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10
  (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11
  (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  (word~) mulf_init::$12 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  (word) mulf_init::sqr#1 ← (word~) mulf_init::$12
  (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  (byte*~) mulf_init::$13 ← (byte[$200]) mulf_sqr1_lo#0 + (number) $200
  (bool~) mulf_init::$14 ← (byte*) mulf_init::sqr1_lo#1 != (byte*~) mulf_init::$13
  if((bool~) mulf_init::$14) goto mulf_init::@1
  to:mulf_init::@4
mulf_init::@3: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::c#4 ← phi( mulf_init::@1/(byte) mulf_init::c#1 )
  (byte*) mulf_init::sqr1_hi#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#3 )
  (byte*) mulf_init::sqr1_lo#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#3 )
  (word) mulf_init::sqr#4 ← phi( mulf_init::@1/(word) mulf_init::sqr#5 )
  (byte) mulf_init::x_2#3 ← phi( mulf_init::@1/(byte) mulf_init::x_2#4 )
  (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@2
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  (byte~) mulf_init::$1 ← ((byte)) (number) -1
  (byte) mulf_init::x_255#0 ← (byte~) mulf_init::$1
  (byte) mulf_init::dir#0 ← (number) $ff
  (byte*) mulf_init::sqr2_hi#0 ← (byte[$200]) mulf_sqr2_hi#0
  (byte*) mulf_init::sqr2_lo#0 ← (byte[$200]) mulf_sqr2_lo#0
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@4 mulf_init::@6
  (byte) mulf_init::dir#2 ← phi( mulf_init::@4/(byte) mulf_init::dir#0 mulf_init::@6/(byte) mulf_init::dir#3 )
  (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_hi#0 mulf_init::@6/(byte*) mulf_init::sqr2_hi#3 )
  (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@4/(byte*) mulf_init::sqr2_lo#0 mulf_init::@6/(byte*) mulf_init::sqr2_lo#1 )
  (byte) mulf_init::x_255#2 ← phi( mulf_init::@4/(byte) mulf_init::x_255#0 mulf_init::@6/(byte) mulf_init::x_255#3 )
  *((byte*) mulf_init::sqr2_lo#2) ← *((byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2)
  *((byte*) mulf_init::sqr2_hi#2) ← *((byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2)
  (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  (byte~) mulf_init::$15 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  (byte) mulf_init::x_255#1 ← (byte~) mulf_init::$15
  (bool~) mulf_init::$16 ← (byte) mulf_init::x_255#1 == (number) 0
  (bool~) mulf_init::$17 ← ! (bool~) mulf_init::$16
  if((bool~) mulf_init::$17) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5 mulf_init::@7
  (byte) mulf_init::dir#3 ← phi( mulf_init::@5/(byte) mulf_init::dir#2 mulf_init::@7/(byte) mulf_init::dir#1 )
  (byte*) mulf_init::sqr2_hi#3 ← phi( mulf_init::@5/(byte*) mulf_init::sqr2_hi#1 mulf_init::@7/(byte*) mulf_init::sqr2_hi#4 )
  (byte) mulf_init::x_255#3 ← phi( mulf_init::@5/(byte) mulf_init::x_255#1 mulf_init::@7/(byte) mulf_init::x_255#4 )
  (byte*) mulf_init::sqr2_lo#3 ← phi( mulf_init::@5/(byte*) mulf_init::sqr2_lo#2 mulf_init::@7/(byte*) mulf_init::sqr2_lo#4 )
  (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#3
  (byte*~) mulf_init::$18 ← (byte[$200]) mulf_sqr2_lo#0 + (number) $1ff
  (bool~) mulf_init::$19 ← (byte*) mulf_init::sqr2_lo#1 != (byte*~) mulf_init::$18
  if((bool~) mulf_init::$19) goto mulf_init::@5
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  (byte*) mulf_init::sqr2_hi#4 ← phi( mulf_init::@5/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#4 ← phi( mulf_init::@5/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#4 ← phi( mulf_init::@5/(byte*) mulf_init::sqr2_lo#2 )
  (byte) mulf_init::dir#1 ← (number) 1
  to:mulf_init::@6
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6
  (byte*~) mulf_init::$2 ← (byte[$200]) mulf_sqr2_lo#0 + (number) $1ff
  (byte*~) mulf_init::$3 ← (byte[$200]) mulf_sqr1_lo#0 + (number) $100
  *((byte*~) mulf_init::$2) ← *((byte*~) mulf_init::$3)
  (byte*~) mulf_init::$4 ← (byte[$200]) mulf_sqr2_hi#0 + (number) $1ff
  (byte*~) mulf_init::$5 ← (byte[$200]) mulf_sqr1_hi#0 + (number) $100
  *((byte*~) mulf_init::$4) ← *((byte*~) mulf_init::$5)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  (byte) mulf8u_prepare::a#2 ← phi( anim::mulf8s_prepare1/(byte) mulf8u_prepare::a#0 anim::mulf8s_prepare2/(byte) mulf8u_prepare::a#1 )
  (byte*) mulf8u_prepare::memA#0 ← ((byte*)) (number) $fd
  *((byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  return 
  to:@return
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  (byte) mulf8u_prepared::b#1 ← phi( mulf8s_prepared/(byte) mulf8u_prepared::b#0 )
  (byte*) mulf8u_prepared::resL#0 ← ((byte*)) (number) $fe
  (byte*) mulf8u_prepared::memB#0 ← ((byte*)) (number) $ff
  *((byte*) mulf8u_prepared::memB#0) ← (byte) mulf8u_prepared::b#1
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  (word) mulf8u_prepared::return#0 ← ((word)) { *((byte*) mulf8u_prepared::memB#0), *((byte*) mulf8u_prepared::resL#0) }
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  (word) mulf8u_prepared::return#3 ← phi( mulf8u_prepared/(word) mulf8u_prepared::return#0 )
  (word) mulf8u_prepared::return#1 ← (word) mulf8u_prepared::return#3
  return 
  to:@return
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@17 anim::@18 anim::@20 anim::@23
  (signed byte) mulf8s_prepared::b#4 ← phi( anim::@17/(signed byte) mulf8s_prepared::b#0 anim::@18/(signed byte) mulf8s_prepared::b#2 anim::@20/(signed byte) mulf8s_prepared::b#1 anim::@23/(signed byte) mulf8s_prepared::b#3 )
  (signed byte*) mulf8s_prepared::memA#0 ← ((signed byte*)) (number) $fd
  (byte~) mulf8s_prepared::$0 ← ((byte)) (signed byte) mulf8s_prepared::b#4
  (byte) mulf8u_prepared::b#0 ← (byte~) mulf8s_prepared::$0
  call mulf8u_prepared 
  (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#1
  to:mulf8s_prepared::@6
mulf8s_prepared::@6: scope:[mulf8s_prepared]  from mulf8s_prepared
  (signed byte) mulf8s_prepared::b#7 ← phi( mulf8s_prepared/(signed byte) mulf8s_prepared::b#4 )
  (word) mulf8u_prepared::return#4 ← phi( mulf8s_prepared/(word) mulf8u_prepared::return#2 )
  (word~) mulf8s_prepared::$1 ← (word) mulf8u_prepared::return#4
  (word) mulf8s_prepared::m#0 ← (word~) mulf8s_prepared::$1
  (bool~) mulf8s_prepared::$2 ← *((signed byte*) mulf8s_prepared::memA#0) < (number) 0
  (bool~) mulf8s_prepared::$3 ← ! (bool~) mulf8s_prepared::$2
  if((bool~) mulf8s_prepared::$3) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@6
  (word) mulf8s_prepared::m#6 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@6/(word) mulf8s_prepared::m#0 )
  (signed byte) mulf8s_prepared::b#5 ← phi( mulf8s_prepared::@3/(signed byte) mulf8s_prepared::b#6 mulf8s_prepared::@6/(signed byte) mulf8s_prepared::b#7 )
  (bool~) mulf8s_prepared::$4 ← (signed byte) mulf8s_prepared::b#5 < (number) 0
  (bool~) mulf8s_prepared::$5 ← ! (bool~) mulf8s_prepared::$4
  if((bool~) mulf8s_prepared::$5) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@6
  (signed byte) mulf8s_prepared::b#6 ← phi( mulf8s_prepared::@6/(signed byte) mulf8s_prepared::b#7 )
  (word) mulf8s_prepared::m#3 ← phi( mulf8s_prepared::@6/(word) mulf8s_prepared::m#0 )
  (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#3
  (byte~) mulf8s_prepared::$9 ← ((byte)) (signed byte) mulf8s_prepared::b#6
  (byte~) mulf8s_prepared::$10 ← (byte~) mulf8s_prepared::$8 - (byte~) mulf8s_prepared::$9
  (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$10
  (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#3 hi= (byte~) mulf8s_prepared::$15
  to:mulf8s_prepared::@1
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#6 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  (signed word~) mulf8s_prepared::$6 ← ((signed word)) (word) mulf8s_prepared::m#4
  (signed word) mulf8s_prepared::return#0 ← (signed word~) mulf8s_prepared::$6
  to:mulf8s_prepared::@return
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#6 )
  (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5
  (byte~) mulf8s_prepared::$13 ← ((byte)) *((signed byte*) mulf8s_prepared::memA#0)
  (byte~) mulf8s_prepared::$14 ← (byte~) mulf8s_prepared::$12 - (byte~) mulf8s_prepared::$13
  (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$14
  (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16
  to:mulf8s_prepared::@2
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  (signed word) mulf8s_prepared::return#6 ← phi( mulf8s_prepared::@2/(signed word) mulf8s_prepared::return#0 )
  (signed word) mulf8s_prepared::return#1 ← (signed word) mulf8s_prepared::return#6
  return 
  to:@return
@13: scope:[]  from @4
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (byte[$140]) COS#0 ← kickasm {{ {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  (byte*~) $0 ← (byte[$140]) COS#0 + (number) $40
  (byte*) SIN#0 ← (byte*~) $0
  to:@15
main: scope:[main]  from @16
  (byte*) SIN#8 ← phi( @16/(byte*) SIN#11 )
  asm { sei  }
  call init 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) SIN#6 ← phi( main/(byte*) SIN#8 )
  call anim 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
init: scope:[init]  from main
  call mulf_init 
  to:init::@3
init::@3: scope:[init]  from init
  *((byte*) SPRITES_ENABLE#0) ← (number) $ff
  (byte*~) init::$1 ← (byte*) SCREEN#0 + (number) $3f8
  (byte*) init::sprites_ptr#0 ← (byte*~) init::$1
  (byte) init::i#0 ← (byte) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@3
  (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@3/(byte) init::i#0 )
  (byte*) init::sprites_ptr#1 ← phi( init::@1/(byte*) init::sprites_ptr#1 init::@3/(byte*) init::sprites_ptr#0 )
  (byte*~) init::$2 ← (byte*) SPRITE#0 / (number) $40
  (byte~) init::$3 ← ((byte)) (byte*~) init::$2
  *((byte*) init::sprites_ptr#1 + (byte) init::i#2) ← (byte~) init::$3
  *((byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (byte) GREEN#0
  (byte) init::i#1 ← (byte) init::i#2 + rangenext(0,7)
  (bool~) init::$4 ← (byte) init::i#1 != rangelast(0,7)
  if((bool~) init::$4) goto init::@1
  to:init::@return
init::@return: scope:[init]  from init::@1
  return 
  to:@return
@15: scope:[]  from @13
  (byte*) SIN#14 ← phi( @13/(byte*) SIN#0 )
  (signed byte[8]) xs#0 ← { (number) -$46, (number) -$46, (number) -$46, (number) 0, (number) 0, (number) $46, (number) $46, (number) $46 }
  (signed byte[8]) ys#0 ← { (number) -$46, (number) 0, (number) $46, (number) -$46, (number) $46, (number) -$46, (number) 0, (number) $46 }
  to:@16
anim: scope:[anim]  from main::@1
  (byte*) SIN#4 ← phi( main::@1/(byte*) SIN#6 )
  (byte) anim::angle#0 ← (number) 0
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@13
  (byte*) SIN#3 ← phi( anim/(byte*) SIN#4 anim::@13/(byte*) SIN#5 )
  (byte) anim::angle#6 ← phi( anim/(byte) anim::angle#0 anim::@13/(byte) anim::angle#1 )
  if(true) goto anim::@4
  to:anim::@return
anim::@4: scope:[anim]  from anim::@1 anim::@4
  (byte*) SIN#2 ← phi( anim::@1/(byte*) SIN#3 anim::@4/(byte*) SIN#2 )
  (byte) anim::angle#4 ← phi( anim::@1/(byte) anim::angle#6 anim::@4/(byte) anim::angle#4 )
  (bool~) anim::$0 ← *((byte*) RASTER#0) != (number) $ff
  if((bool~) anim::$0) goto anim::@4
  to:anim::@6
anim::@6: scope:[anim]  from anim::@4
  (byte*) SIN#1 ← phi( anim::@4/(byte*) SIN#2 )
  (byte) anim::angle#2 ← phi( anim::@4/(byte) anim::angle#4 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte~) anim::$1 ← ((signed byte)) *((byte[$140]) COS#0 + (byte) anim::angle#2)
  (signed byte) anim::cos_a#0 ← (signed byte~) anim::$1
  (signed byte~) anim::$2 ← ((signed byte)) *((byte*) SIN#1 + (byte) anim::angle#2)
  (signed byte) anim::sin_a#0 ← (signed byte~) anim::$2
  (byte) anim::sprite_msb#0 ← (number) 0
  (byte) anim::i#0 ← (byte) 0
  to:anim::@10
anim::@10: scope:[anim]  from anim::@11 anim::@6
  (byte*) SIN#22 ← phi( anim::@11/(byte*) SIN#7 anim::@6/(byte*) SIN#1 )
  (byte) anim::angle#18 ← phi( anim::@11/(byte) anim::angle#5 anim::@6/(byte) anim::angle#2 )
  (byte) anim::sprite_msb#16 ← phi( anim::@11/(byte) anim::sprite_msb#7 anim::@6/(byte) anim::sprite_msb#0 )
  (signed byte) anim::sin_a#6 ← phi( anim::@11/(signed byte) anim::sin_a#7 anim::@6/(signed byte) anim::sin_a#0 )
  (signed byte) anim::cos_a#1 ← phi( anim::@11/(signed byte) anim::cos_a#2 anim::@6/(signed byte) anim::cos_a#0 )
  (byte) anim::i#2 ← phi( anim::@11/(byte) anim::i#1 anim::@6/(byte) anim::i#0 )
  (signed byte) anim::x#0 ← *((signed byte[8]) xs#0 + (byte) anim::i#2)
  (signed byte) anim::y#0 ← *((signed byte[8]) ys#0 + (byte) anim::i#2)
  (signed byte) anim::mulf8s_prepare1_a#0 ← (signed byte) anim::cos_a#1
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@10
  (byte*) SIN#21 ← phi( anim::@10/(byte*) SIN#22 )
  (byte) anim::angle#17 ← phi( anim::@10/(byte) anim::angle#18 )
  (signed byte) anim::cos_a#13 ← phi( anim::@10/(signed byte) anim::cos_a#1 )
  (byte) anim::i#14 ← phi( anim::@10/(byte) anim::i#2 )
  (byte) anim::sprite_msb#15 ← phi( anim::@10/(byte) anim::sprite_msb#16 )
  (signed byte) anim::sin_a#5 ← phi( anim::@10/(signed byte) anim::sin_a#6 )
  (signed byte) anim::y#7 ← phi( anim::@10/(signed byte) anim::y#0 )
  (signed byte) anim::x#5 ← phi( anim::@10/(signed byte) anim::x#0 )
  (signed byte) anim::mulf8s_prepare1_a#1 ← phi( anim::@10/(signed byte) anim::mulf8s_prepare1_a#0 )
  (byte~) anim::mulf8s_prepare1_$0#0 ← ((byte)) (signed byte) anim::mulf8s_prepare1_a#1
  (byte) mulf8u_prepare::a#0 ← (byte~) anim::mulf8s_prepare1_$0#0
  call mulf8u_prepare 
  to:anim::@19
anim::@19: scope:[anim]  from anim::mulf8s_prepare1
  (byte*) SIN#20 ← phi( anim::mulf8s_prepare1/(byte*) SIN#21 )
  (byte) anim::angle#16 ← phi( anim::mulf8s_prepare1/(byte) anim::angle#17 )
  (signed byte) anim::cos_a#12 ← phi( anim::mulf8s_prepare1/(signed byte) anim::cos_a#13 )
  (byte) anim::i#13 ← phi( anim::mulf8s_prepare1/(byte) anim::i#14 )
  (byte) anim::sprite_msb#14 ← phi( anim::mulf8s_prepare1/(byte) anim::sprite_msb#15 )
  (signed byte) anim::sin_a#4 ← phi( anim::mulf8s_prepare1/(signed byte) anim::sin_a#5 )
  (signed byte) anim::y#5 ← phi( anim::mulf8s_prepare1/(signed byte) anim::y#7 )
  (signed byte) anim::x#3 ← phi( anim::mulf8s_prepare1/(signed byte) anim::x#5 )
  to:anim::@17
anim::@17: scope:[anim]  from anim::@19
  (byte*) SIN#19 ← phi( anim::@19/(byte*) SIN#20 )
  (byte) anim::angle#15 ← phi( anim::@19/(byte) anim::angle#16 )
  (signed byte) anim::cos_a#11 ← phi( anim::@19/(signed byte) anim::cos_a#12 )
  (byte) anim::i#12 ← phi( anim::@19/(byte) anim::i#13 )
  (byte) anim::sprite_msb#13 ← phi( anim::@19/(byte) anim::sprite_msb#14 )
  (signed byte) anim::sin_a#3 ← phi( anim::@19/(signed byte) anim::sin_a#4 )
  (signed byte) anim::y#3 ← phi( anim::@19/(signed byte) anim::y#5 )
  (signed byte) anim::x#1 ← phi( anim::@19/(signed byte) anim::x#3 )
  (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#1
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#2 ← (signed word) mulf8s_prepared::return#1
  to:anim::@20
anim::@20: scope:[anim]  from anim::@17
  (byte*) SIN#18 ← phi( anim::@17/(byte*) SIN#19 )
  (byte) anim::angle#14 ← phi( anim::@17/(byte) anim::angle#15 )
  (signed byte) anim::cos_a#10 ← phi( anim::@17/(signed byte) anim::cos_a#11 )
  (byte) anim::i#11 ← phi( anim::@17/(byte) anim::i#12 )
  (byte) anim::sprite_msb#12 ← phi( anim::@17/(byte) anim::sprite_msb#13 )
  (signed byte) anim::x#9 ← phi( anim::@17/(signed byte) anim::x#1 )
  (signed byte) anim::sin_a#2 ← phi( anim::@17/(signed byte) anim::sin_a#3 )
  (signed byte) anim::y#1 ← phi( anim::@17/(signed byte) anim::y#3 )
  (signed word) mulf8s_prepared::return#7 ← phi( anim::@17/(signed word) mulf8s_prepared::return#2 )
  (signed word~) anim::$4 ← (signed word) mulf8s_prepared::return#7
  (number~) anim::$5 ← (signed word~) anim::$4 * (number) 2
  (signed word) anim::xr#0 ← (number~) anim::$5
  (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#1
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#3 ← (signed word) mulf8s_prepared::return#1
  to:anim::@21
anim::@21: scope:[anim]  from anim::@20
  (byte*) SIN#17 ← phi( anim::@20/(byte*) SIN#18 )
  (byte) anim::angle#13 ← phi( anim::@20/(byte) anim::angle#14 )
  (signed byte) anim::cos_a#9 ← phi( anim::@20/(signed byte) anim::cos_a#10 )
  (byte) anim::i#10 ← phi( anim::@20/(byte) anim::i#11 )
  (byte) anim::sprite_msb#11 ← phi( anim::@20/(byte) anim::sprite_msb#12 )
  (signed byte) anim::x#8 ← phi( anim::@20/(signed byte) anim::x#9 )
  (signed word) anim::xr#7 ← phi( anim::@20/(signed word) anim::xr#0 )
  (signed byte) anim::y#8 ← phi( anim::@20/(signed byte) anim::y#1 )
  (signed byte) anim::sin_a#1 ← phi( anim::@20/(signed byte) anim::sin_a#2 )
  (signed word) mulf8s_prepared::return#8 ← phi( anim::@20/(signed word) mulf8s_prepared::return#3 )
  (signed word~) anim::$6 ← (signed word) mulf8s_prepared::return#8
  (number~) anim::$7 ← (signed word~) anim::$6 * (number) 2
  (signed word) anim::yr#0 ← (number~) anim::$7
  (signed byte) anim::mulf8s_prepare2_a#0 ← (signed byte) anim::sin_a#1
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@21
  (signed byte) anim::sin_a#13 ← phi( anim::@21/(signed byte) anim::sin_a#1 )
  (byte*) SIN#16 ← phi( anim::@21/(byte*) SIN#17 )
  (byte) anim::angle#12 ← phi( anim::@21/(byte) anim::angle#13 )
  (signed byte) anim::cos_a#8 ← phi( anim::@21/(signed byte) anim::cos_a#9 )
  (byte) anim::i#9 ← phi( anim::@21/(byte) anim::i#10 )
  (byte) anim::sprite_msb#10 ← phi( anim::@21/(byte) anim::sprite_msb#11 )
  (signed word) anim::yr#8 ← phi( anim::@21/(signed word) anim::yr#0 )
  (signed byte) anim::x#7 ← phi( anim::@21/(signed byte) anim::x#8 )
  (signed word) anim::xr#6 ← phi( anim::@21/(signed word) anim::xr#7 )
  (signed byte) anim::y#6 ← phi( anim::@21/(signed byte) anim::y#8 )
  (signed byte) anim::mulf8s_prepare2_a#1 ← phi( anim::@21/(signed byte) anim::mulf8s_prepare2_a#0 )
  (byte~) anim::mulf8s_prepare2_$0#0 ← ((byte)) (signed byte) anim::mulf8s_prepare2_a#1
  (byte) mulf8u_prepare::a#1 ← (byte~) anim::mulf8s_prepare2_$0#0
  call mulf8u_prepare 
  to:anim::@22
anim::@22: scope:[anim]  from anim::mulf8s_prepare2
  (signed byte) anim::sin_a#12 ← phi( anim::mulf8s_prepare2/(signed byte) anim::sin_a#13 )
  (byte*) SIN#15 ← phi( anim::mulf8s_prepare2/(byte*) SIN#16 )
  (byte) anim::angle#11 ← phi( anim::mulf8s_prepare2/(byte) anim::angle#12 )
  (signed byte) anim::cos_a#7 ← phi( anim::mulf8s_prepare2/(signed byte) anim::cos_a#8 )
  (byte) anim::i#8 ← phi( anim::mulf8s_prepare2/(byte) anim::i#9 )
  (byte) anim::sprite_msb#9 ← phi( anim::mulf8s_prepare2/(byte) anim::sprite_msb#10 )
  (signed word) anim::yr#7 ← phi( anim::mulf8s_prepare2/(signed word) anim::yr#8 )
  (signed byte) anim::x#6 ← phi( anim::mulf8s_prepare2/(signed byte) anim::x#7 )
  (signed word) anim::xr#5 ← phi( anim::mulf8s_prepare2/(signed word) anim::xr#6 )
  (signed byte) anim::y#4 ← phi( anim::mulf8s_prepare2/(signed byte) anim::y#6 )
  to:anim::@18
anim::@18: scope:[anim]  from anim::@22
  (signed byte) anim::sin_a#11 ← phi( anim::@22/(signed byte) anim::sin_a#12 )
  (byte*) SIN#13 ← phi( anim::@22/(byte*) SIN#15 )
  (byte) anim::angle#10 ← phi( anim::@22/(byte) anim::angle#11 )
  (signed byte) anim::cos_a#6 ← phi( anim::@22/(signed byte) anim::cos_a#7 )
  (byte) anim::i#7 ← phi( anim::@22/(byte) anim::i#8 )
  (byte) anim::sprite_msb#8 ← phi( anim::@22/(byte) anim::sprite_msb#9 )
  (signed word) anim::yr#6 ← phi( anim::@22/(signed word) anim::yr#7 )
  (signed byte) anim::x#4 ← phi( anim::@22/(signed byte) anim::x#6 )
  (signed word) anim::xr#4 ← phi( anim::@22/(signed word) anim::xr#5 )
  (signed byte) anim::y#2 ← phi( anim::@22/(signed byte) anim::y#4 )
  (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#2
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#4 ← (signed word) mulf8s_prepared::return#1
  to:anim::@23
anim::@23: scope:[anim]  from anim::@18
  (signed byte) anim::sin_a#10 ← phi( anim::@18/(signed byte) anim::sin_a#11 )
  (byte*) SIN#12 ← phi( anim::@18/(byte*) SIN#13 )
  (byte) anim::angle#9 ← phi( anim::@18/(byte) anim::angle#10 )
  (signed byte) anim::cos_a#5 ← phi( anim::@18/(signed byte) anim::cos_a#6 )
  (byte) anim::i#6 ← phi( anim::@18/(byte) anim::i#7 )
  (byte) anim::sprite_msb#6 ← phi( anim::@18/(byte) anim::sprite_msb#8 )
  (signed word) anim::yr#4 ← phi( anim::@18/(signed word) anim::yr#6 )
  (signed byte) anim::x#2 ← phi( anim::@18/(signed byte) anim::x#4 )
  (signed word) anim::xr#2 ← phi( anim::@18/(signed word) anim::xr#4 )
  (signed word) mulf8s_prepared::return#9 ← phi( anim::@18/(signed word) mulf8s_prepared::return#4 )
  (signed word~) anim::$9 ← (signed word) mulf8s_prepared::return#9
  (number~) anim::$10 ← (signed word~) anim::$9 * (number) 2
  (signed word) anim::xr#1 ← (signed word) anim::xr#2 - (number~) anim::$10
  (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#2
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#5 ← (signed word) mulf8s_prepared::return#1
  to:anim::@24
anim::@24: scope:[anim]  from anim::@23
  (signed byte) anim::sin_a#9 ← phi( anim::@23/(signed byte) anim::sin_a#10 )
  (byte*) SIN#10 ← phi( anim::@23/(byte*) SIN#12 )
  (byte) anim::angle#8 ← phi( anim::@23/(byte) anim::angle#9 )
  (signed byte) anim::cos_a#4 ← phi( anim::@23/(signed byte) anim::cos_a#5 )
  (byte) anim::i#5 ← phi( anim::@23/(byte) anim::i#6 )
  (byte) anim::sprite_msb#3 ← phi( anim::@23/(byte) anim::sprite_msb#6 )
  (signed word) anim::xr#3 ← phi( anim::@23/(signed word) anim::xr#1 )
  (signed word) anim::yr#2 ← phi( anim::@23/(signed word) anim::yr#4 )
  (signed word) mulf8s_prepared::return#10 ← phi( anim::@23/(signed word) mulf8s_prepared::return#5 )
  (signed word~) anim::$11 ← (signed word) mulf8s_prepared::return#10
  (number~) anim::$12 ← (signed word~) anim::$11 * (number) 2
  (signed word) anim::yr#1 ← (signed word) anim::yr#2 + (number~) anim::$12
  (byte~) anim::$13 ← > (signed word) anim::xr#3
  (signed byte~) anim::$14 ← ((signed byte)) (byte~) anim::$13
  (number~) anim::$15 ← (signed byte~) anim::$14 + (number) $18
  (number~) anim::$16 ← (number~) anim::$15 + (number) $95
  (signed word) anim::xpos#0 ← (number~) anim::$16
  (number~) anim::$17 ← (byte) anim::sprite_msb#3 / (number) 2
  (byte) anim::sprite_msb#1 ← (number~) anim::$17
  (byte~) anim::$18 ← > (signed word) anim::xpos#0
  (bool~) anim::$19 ← (byte~) anim::$18 != (number) 0
  (bool~) anim::$20 ← ! (bool~) anim::$19
  if((bool~) anim::$20) goto anim::@11
  to:anim::@12
anim::@11: scope:[anim]  from anim::@12 anim::@24
  (signed byte) anim::sin_a#7 ← phi( anim::@12/(signed byte) anim::sin_a#8 anim::@24/(signed byte) anim::sin_a#9 )
  (byte*) SIN#7 ← phi( anim::@12/(byte*) SIN#9 anim::@24/(byte*) SIN#10 )
  (byte) anim::angle#5 ← phi( anim::@12/(byte) anim::angle#7 anim::@24/(byte) anim::angle#8 )
  (byte) anim::sprite_msb#7 ← phi( anim::@12/(byte) anim::sprite_msb#2 anim::@24/(byte) anim::sprite_msb#1 )
  (signed byte) anim::cos_a#2 ← phi( anim::@12/(signed byte) anim::cos_a#3 anim::@24/(signed byte) anim::cos_a#4 )
  (signed word) anim::xpos#1 ← phi( anim::@12/(signed word) anim::xpos#2 anim::@24/(signed word) anim::xpos#0 )
  (byte) anim::i#3 ← phi( anim::@12/(byte) anim::i#4 anim::@24/(byte) anim::i#5 )
  (signed word) anim::yr#3 ← phi( anim::@12/(signed word) anim::yr#5 anim::@24/(signed word) anim::yr#1 )
  (byte~) anim::$21 ← > (signed word) anim::yr#3
  (number~) anim::$22 ← (byte~) anim::$21 + (number) $59
  (number~) anim::$23 ← (number~) anim::$22 + (number) $33
  (byte) anim::ypos#0 ← (number~) anim::$23
  (number~) anim::$24 ← (byte) anim::i#3 * (number) 2
  (byte) anim::i2#0 ← (number~) anim::$24
  (byte~) anim::$25 ← < (signed word) anim::xpos#1
  *((byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte~) anim::$25
  *((byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0
  (byte) anim::i#1 ← (byte) anim::i#3 + rangenext(0,7)
  (bool~) anim::$26 ← (byte) anim::i#1 != rangelast(0,7)
  if((bool~) anim::$26) goto anim::@10
  to:anim::@13
anim::@12: scope:[anim]  from anim::@24
  (signed byte) anim::sin_a#8 ← phi( anim::@24/(signed byte) anim::sin_a#9 )
  (byte*) SIN#9 ← phi( anim::@24/(byte*) SIN#10 )
  (byte) anim::angle#7 ← phi( anim::@24/(byte) anim::angle#8 )
  (signed byte) anim::cos_a#3 ← phi( anim::@24/(signed byte) anim::cos_a#4 )
  (signed word) anim::xpos#2 ← phi( anim::@24/(signed word) anim::xpos#0 )
  (byte) anim::i#4 ← phi( anim::@24/(byte) anim::i#5 )
  (signed word) anim::yr#5 ← phi( anim::@24/(signed word) anim::yr#1 )
  (byte) anim::sprite_msb#4 ← phi( anim::@24/(byte) anim::sprite_msb#1 )
  (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#4 | (number) $80
  to:anim::@11
anim::@13: scope:[anim]  from anim::@11
  (byte*) SIN#5 ← phi( anim::@11/(byte*) SIN#7 )
  (byte) anim::angle#3 ← phi( anim::@11/(byte) anim::angle#5 )
  (byte) anim::sprite_msb#5 ← phi( anim::@11/(byte) anim::sprite_msb#7 )
  *((byte*) SPRITES_XMSB#0) ← (byte) anim::sprite_msb#5
  (byte) anim::angle#1 ← ++ (byte) anim::angle#3
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  to:anim::@1
anim::@return: scope:[anim]  from anim::@1
  return 
  to:@return
@16: scope:[]  from @15
  (byte*) SIN#11 ← phi( @15/(byte*) SIN#14 )
  (byte*) SPRITE#0 ← ((byte*)) (number) $3000
  kickasm(location (byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  call main 
  to:@17
@17: scope:[]  from @16
  to:@end
@end: scope:[]  from @17

SYMBOL TABLE SSA
(byte*~) $0
(label) @13
(label) @15
(label) @16
(label) @17
(label) @4
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte[$140]) COS
(byte[$140]) COS#0
(byte) GREEN
(byte) GREEN#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SIN
(byte*) SIN#0
(byte*) SIN#1
(byte*) SIN#10
(byte*) SIN#11
(byte*) SIN#12
(byte*) SIN#13
(byte*) SIN#14
(byte*) SIN#15
(byte*) SIN#16
(byte*) SIN#17
(byte*) SIN#18
(byte*) SIN#19
(byte*) SIN#2
(byte*) SIN#20
(byte*) SIN#21
(byte*) SIN#22
(byte*) SIN#3
(byte*) SIN#4
(byte*) SIN#5
(byte*) SIN#6
(byte*) SIN#7
(byte*) SIN#8
(byte*) SIN#9
(byte*) SPRITE
(byte*) SPRITE#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(void()) anim()
(bool~) anim::$0
(signed byte~) anim::$1
(number~) anim::$10
(signed word~) anim::$11
(number~) anim::$12
(byte~) anim::$13
(signed byte~) anim::$14
(number~) anim::$15
(number~) anim::$16
(number~) anim::$17
(byte~) anim::$18
(bool~) anim::$19
(signed byte~) anim::$2
(bool~) anim::$20
(byte~) anim::$21
(number~) anim::$22
(number~) anim::$23
(number~) anim::$24
(byte~) anim::$25
(bool~) anim::$26
(signed word~) anim::$4
(number~) anim::$5
(signed word~) anim::$6
(number~) anim::$7
(signed word~) anim::$9
(label) anim::@1
(label) anim::@10
(label) anim::@11
(label) anim::@12
(label) anim::@13
(label) anim::@17
(label) anim::@18
(label) anim::@19
(label) anim::@20
(label) anim::@21
(label) anim::@22
(label) anim::@23
(label) anim::@24
(label) anim::@4
(label) anim::@6
(label) anim::@return
(byte) anim::angle
(byte) anim::angle#0
(byte) anim::angle#1
(byte) anim::angle#10
(byte) anim::angle#11
(byte) anim::angle#12
(byte) anim::angle#13
(byte) anim::angle#14
(byte) anim::angle#15
(byte) anim::angle#16
(byte) anim::angle#17
(byte) anim::angle#18
(byte) anim::angle#2
(byte) anim::angle#3
(byte) anim::angle#4
(byte) anim::angle#5
(byte) anim::angle#6
(byte) anim::angle#7
(byte) anim::angle#8
(byte) anim::angle#9
(signed byte) anim::cos_a
(signed byte) anim::cos_a#0
(signed byte) anim::cos_a#1
(signed byte) anim::cos_a#10
(signed byte) anim::cos_a#11
(signed byte) anim::cos_a#12
(signed byte) anim::cos_a#13
(signed byte) anim::cos_a#2
(signed byte) anim::cos_a#3
(signed byte) anim::cos_a#4
(signed byte) anim::cos_a#5
(signed byte) anim::cos_a#6
(signed byte) anim::cos_a#7
(signed byte) anim::cos_a#8
(signed byte) anim::cos_a#9
(byte) anim::i
(byte) anim::i#0
(byte) anim::i#1
(byte) anim::i#10
(byte) anim::i#11
(byte) anim::i#12
(byte) anim::i#13
(byte) anim::i#14
(byte) anim::i#2
(byte) anim::i#3
(byte) anim::i#4
(byte) anim::i#5
(byte) anim::i#6
(byte) anim::i#7
(byte) anim::i#8
(byte) anim::i#9
(byte) anim::i2
(byte) anim::i2#0
(label) anim::mulf8s_prepare1
(byte~) anim::mulf8s_prepare1_$0
(byte~) anim::mulf8s_prepare1_$0#0
(signed byte) anim::mulf8s_prepare1_a
(signed byte) anim::mulf8s_prepare1_a#0
(signed byte) anim::mulf8s_prepare1_a#1
(label) anim::mulf8s_prepare2
(byte~) anim::mulf8s_prepare2_$0
(byte~) anim::mulf8s_prepare2_$0#0
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::mulf8s_prepare2_a#0
(signed byte) anim::mulf8s_prepare2_a#1
(signed byte) anim::sin_a
(signed byte) anim::sin_a#0
(signed byte) anim::sin_a#1
(signed byte) anim::sin_a#10
(signed byte) anim::sin_a#11
(signed byte) anim::sin_a#12
(signed byte) anim::sin_a#13
(signed byte) anim::sin_a#2
(signed byte) anim::sin_a#3
(signed byte) anim::sin_a#4
(signed byte) anim::sin_a#5
(signed byte) anim::sin_a#6
(signed byte) anim::sin_a#7
(signed byte) anim::sin_a#8
(signed byte) anim::sin_a#9
(byte) anim::sprite_msb
(byte) anim::sprite_msb#0
(byte) anim::sprite_msb#1
(byte) anim::sprite_msb#10
(byte) anim::sprite_msb#11
(byte) anim::sprite_msb#12
(byte) anim::sprite_msb#13
(byte) anim::sprite_msb#14
(byte) anim::sprite_msb#15
(byte) anim::sprite_msb#16
(byte) anim::sprite_msb#2
(byte) anim::sprite_msb#3
(byte) anim::sprite_msb#4
(byte) anim::sprite_msb#5
(byte) anim::sprite_msb#6
(byte) anim::sprite_msb#7
(byte) anim::sprite_msb#8
(byte) anim::sprite_msb#9
(signed byte) anim::x
(signed byte) anim::x#0
(signed byte) anim::x#1
(signed byte) anim::x#2
(signed byte) anim::x#3
(signed byte) anim::x#4
(signed byte) anim::x#5
(signed byte) anim::x#6
(signed byte) anim::x#7
(signed byte) anim::x#8
(signed byte) anim::x#9
(signed word) anim::xpos
(signed word) anim::xpos#0
(signed word) anim::xpos#1
(signed word) anim::xpos#2
(signed word) anim::xr
(signed word) anim::xr#0
(signed word) anim::xr#1
(signed word) anim::xr#2
(signed word) anim::xr#3
(signed word) anim::xr#4
(signed word) anim::xr#5
(signed word) anim::xr#6
(signed word) anim::xr#7
(signed byte) anim::y
(signed byte) anim::y#0
(signed byte) anim::y#1
(signed byte) anim::y#2
(signed byte) anim::y#3
(signed byte) anim::y#4
(signed byte) anim::y#5
(signed byte) anim::y#6
(signed byte) anim::y#7
(signed byte) anim::y#8
(byte) anim::ypos
(byte) anim::ypos#0
(signed word) anim::yr
(signed word) anim::yr#0
(signed word) anim::yr#1
(signed word) anim::yr#2
(signed word) anim::yr#3
(signed word) anim::yr#4
(signed word) anim::yr#5
(signed word) anim::yr#6
(signed word) anim::yr#7
(signed word) anim::yr#8
(void()) init()
(byte*~) init::$1
(byte*~) init::$2
(byte~) init::$3
(bool~) init::$4
(label) init::@1
(label) init::@3
(label) init::@return
(byte) init::i
(byte) init::i#0
(byte) init::i#1
(byte) init::i#2
(byte*) init::sprites_ptr
(byte*) init::sprites_ptr#0
(byte*) init::sprites_ptr#1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$0
(word~) mulf8s_prepared::$1
(byte~) mulf8s_prepared::$10
(byte~) mulf8s_prepared::$12
(byte~) mulf8s_prepared::$13
(byte~) mulf8s_prepared::$14
(byte~) mulf8s_prepared::$15
(byte~) mulf8s_prepared::$16
(bool~) mulf8s_prepared::$2
(bool~) mulf8s_prepared::$3
(bool~) mulf8s_prepared::$4
(bool~) mulf8s_prepared::$5
(signed word~) mulf8s_prepared::$6
(byte~) mulf8s_prepared::$8
(byte~) mulf8s_prepared::$9
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@6
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0
(signed byte) mulf8s_prepared::b#1
(signed byte) mulf8s_prepared::b#2
(signed byte) mulf8s_prepared::b#3
(signed byte) mulf8s_prepared::b#4
(signed byte) mulf8s_prepared::b#5
(signed byte) mulf8s_prepared::b#6
(signed byte) mulf8s_prepared::b#7
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0
(word) mulf8s_prepared::m#1
(word) mulf8s_prepared::m#2
(word) mulf8s_prepared::m#3
(word) mulf8s_prepared::m#4
(word) mulf8s_prepared::m#5
(word) mulf8s_prepared::m#6
(signed byte*) mulf8s_prepared::memA
(signed byte*) mulf8s_prepared::memA#0
(signed word) mulf8s_prepared::return
(signed word) mulf8s_prepared::return#0
(signed word) mulf8s_prepared::return#1
(signed word) mulf8s_prepared::return#10
(signed word) mulf8s_prepared::return#2
(signed word) mulf8s_prepared::return#3
(signed word) mulf8s_prepared::return#4
(signed word) mulf8s_prepared::return#5
(signed word) mulf8s_prepared::return#6
(signed word) mulf8s_prepared::return#7
(signed word) mulf8s_prepared::return#8
(signed word) mulf8s_prepared::return#9
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#0
(byte) mulf8u_prepare::a#1
(byte) mulf8u_prepare::a#2
(byte*) mulf8u_prepare::memA
(byte*) mulf8u_prepare::memA#0
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0
(byte) mulf8u_prepared::b#1
(byte*) mulf8u_prepared::memB
(byte*) mulf8u_prepared::memB#0
(byte*) mulf8u_prepared::resL
(byte*) mulf8u_prepared::resL#0
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0
(word) mulf8u_prepared::return#1
(word) mulf8u_prepared::return#2
(word) mulf8u_prepared::return#3
(word) mulf8u_prepared::return#4
(void()) mulf_init()
(byte*~) mulf_init::$0
(byte~) mulf_init::$1
(byte~) mulf_init::$10
(byte~) mulf_init::$11
(word~) mulf_init::$12
(byte*~) mulf_init::$13
(bool~) mulf_init::$14
(byte~) mulf_init::$15
(bool~) mulf_init::$16
(bool~) mulf_init::$17
(byte*~) mulf_init::$18
(bool~) mulf_init::$19
(byte*~) mulf_init::$2
(byte*~) mulf_init::$3
(byte*~) mulf_init::$4
(byte*~) mulf_init::$5
(byte*~) mulf_init::$6
(number~) mulf_init::$7
(bool~) mulf_init::$8
(bool~) mulf_init::$9
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#0
(byte) mulf_init::c#1
(byte) mulf_init::c#2
(byte) mulf_init::c#3
(byte) mulf_init::c#4
(byte) mulf_init::dir
(byte) mulf_init::dir#0
(byte) mulf_init::dir#1
(byte) mulf_init::dir#2
(byte) mulf_init::dir#3
(word) mulf_init::sqr
(word) mulf_init::sqr#0
(word) mulf_init::sqr#1
(word) mulf_init::sqr#2
(word) mulf_init::sqr#3
(word) mulf_init::sqr#4
(word) mulf_init::sqr#5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#0
(byte*) mulf_init::sqr1_hi#1
(byte*) mulf_init::sqr1_hi#2
(byte*) mulf_init::sqr1_hi#3
(byte*) mulf_init::sqr1_hi#4
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#0
(byte*) mulf_init::sqr1_lo#1
(byte*) mulf_init::sqr1_lo#2
(byte*) mulf_init::sqr1_lo#3
(byte*) mulf_init::sqr1_lo#4
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#0
(byte*) mulf_init::sqr2_hi#1
(byte*) mulf_init::sqr2_hi#2
(byte*) mulf_init::sqr2_hi#3
(byte*) mulf_init::sqr2_hi#4
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#0
(byte*) mulf_init::sqr2_lo#1
(byte*) mulf_init::sqr2_lo#2
(byte*) mulf_init::sqr2_lo#3
(byte*) mulf_init::sqr2_lo#4
(byte) mulf_init::x_2
(byte) mulf_init::x_2#0
(byte) mulf_init::x_2#1
(byte) mulf_init::x_2#2
(byte) mulf_init::x_2#3
(byte) mulf_init::x_2#4
(byte) mulf_init::x_255
(byte) mulf_init::x_255#0
(byte) mulf_init::x_255#1
(byte) mulf_init::x_255#2
(byte) mulf_init::x_255#3
(byte) mulf_init::x_255#4
(byte[$200]) mulf_sqr1_hi
(byte[$200]) mulf_sqr1_hi#0
(byte[$200]) mulf_sqr1_lo
(byte[$200]) mulf_sqr1_lo#0
(byte[$200]) mulf_sqr2_hi
(byte[$200]) mulf_sqr2_hi#0
(byte[$200]) mulf_sqr2_lo
(byte[$200]) mulf_sqr2_lo#0
(signed byte[8]) xs
(signed byte[8]) xs#0
(signed byte[8]) ys
(signed byte[8]) ys#0

Fixing inline constructor with mulf8u_prepared::$0 ← (byte)*(mulf8u_prepared::memB#0) w= (byte)*(mulf8u_prepared::resL#0)
Successful SSA optimization Pass2FixInlineConstructorsNew
Adding number conversion cast (unumber) 5 in (byte) GREEN#0 ← (number) 5
Adding number conversion cast (unumber) $e in (byte) LIGHT_BLUE#0 ← (number) $e
Adding number conversion cast (unumber) 0 in (word) mulf_init::sqr#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulf_init::x_2#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) mulf_init::c#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte*~) mulf_init::$0 ← (byte[$200]) mulf_sqr1_hi#0 + (number) 1
Adding number conversion cast (unumber) 1 in (byte*~) mulf_init::$6 ← (byte[$200]) mulf_sqr1_lo#0 + (number) 1
Adding number conversion cast (unumber) 1 in (number~) mulf_init::$7 ← (byte) mulf_init::c#1 & (number) 1
Adding number conversion cast (unumber) mulf_init::$7 in (number~) mulf_init::$7 ← (byte) mulf_init::c#1 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mulf_init::$8 ← (unumber~) mulf_init::$7 == (number) 0
Adding number conversion cast (unumber) $200 in (byte*~) mulf_init::$13 ← (byte[$200]) mulf_sqr1_lo#0 + (number) $200
Adding number conversion cast (unumber) $ff in (byte) mulf_init::dir#0 ← (number) $ff
Adding number conversion cast (unumber) 0 in (bool~) mulf_init::$16 ← (byte) mulf_init::x_255#1 == (number) 0
Adding number conversion cast (unumber) $1ff in (byte*~) mulf_init::$18 ← (byte[$200]) mulf_sqr2_lo#0 + (number) $1ff
Adding number conversion cast (unumber) 1 in (byte) mulf_init::dir#1 ← (number) 1
Adding number conversion cast (unumber) $1ff in (byte*~) mulf_init::$2 ← (byte[$200]) mulf_sqr2_lo#0 + (number) $1ff
Adding number conversion cast (unumber) $100 in (byte*~) mulf_init::$3 ← (byte[$200]) mulf_sqr1_lo#0 + (number) $100
Adding number conversion cast (unumber) $1ff in (byte*~) mulf_init::$4 ← (byte[$200]) mulf_sqr2_hi#0 + (number) $1ff
Adding number conversion cast (unumber) $100 in (byte*~) mulf_init::$5 ← (byte[$200]) mulf_sqr1_hi#0 + (number) $100
Adding number conversion cast (snumber) 0 in (bool~) mulf8s_prepared::$2 ← *((signed byte*) mulf8s_prepared::memA#0) < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mulf8s_prepared::$4 ← (signed byte) mulf8s_prepared::b#5 < (number) 0
Adding number conversion cast (unumber) $40 in (byte*~) $0 ← (byte[$140]) COS#0 + (number) $40
Adding number conversion cast (unumber) $ff in *((byte*) SPRITES_ENABLE#0) ← (number) $ff
Adding number conversion cast (unumber) $3f8 in (byte*~) init::$1 ← (byte*) SCREEN#0 + (number) $3f8
Adding number conversion cast (unumber) $40 in (byte*~) init::$2 ← (byte*) SPRITE#0 / (number) $40
Adding number conversion cast (unumber) 0 in (byte) anim::angle#0 ← (number) 0
Adding number conversion cast (unumber) $ff in (bool~) anim::$0 ← *((byte*) RASTER#0) != (number) $ff
Adding number conversion cast (unumber) 0 in (byte) anim::sprite_msb#0 ← (number) 0
Adding number conversion cast (snumber) 2 in (number~) anim::$5 ← (signed word~) anim::$4 * (number) 2
Adding number conversion cast (snumber) anim::$5 in (number~) anim::$5 ← (signed word~) anim::$4 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) anim::$7 ← (signed word~) anim::$6 * (number) 2
Adding number conversion cast (snumber) anim::$7 in (number~) anim::$7 ← (signed word~) anim::$6 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) anim::$10 ← (signed word~) anim::$9 * (number) 2
Adding number conversion cast (snumber) anim::$10 in (number~) anim::$10 ← (signed word~) anim::$9 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) anim::$12 ← (signed word~) anim::$11 * (number) 2
Adding number conversion cast (snumber) anim::$12 in (number~) anim::$12 ← (signed word~) anim::$11 * (snumber)(number) 2
Adding number conversion cast (snumber) $18 in (number~) anim::$15 ← (signed byte~) anim::$14 + (number) $18
Adding number conversion cast (snumber) anim::$15 in (number~) anim::$15 ← (signed byte~) anim::$14 + (snumber)(number) $18
Adding number conversion cast (snumber) $95 in (number~) anim::$16 ← (snumber~) anim::$15 + (number) $95
Adding number conversion cast (snumber) anim::$16 in (number~) anim::$16 ← (snumber~) anim::$15 + (snumber)(number) $95
Adding number conversion cast (unumber) 2 in (number~) anim::$17 ← (byte) anim::sprite_msb#3 / (number) 2
Adding number conversion cast (unumber) anim::$17 in (number~) anim::$17 ← (byte) anim::sprite_msb#3 / (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (bool~) anim::$19 ← (byte~) anim::$18 != (number) 0
Adding number conversion cast (unumber) $59 in (number~) anim::$22 ← (byte~) anim::$21 + (number) $59
Adding number conversion cast (unumber) anim::$22 in (number~) anim::$22 ← (byte~) anim::$21 + (unumber)(number) $59
Adding number conversion cast (unumber) $33 in (number~) anim::$23 ← (unumber~) anim::$22 + (number) $33
Adding number conversion cast (unumber) anim::$23 in (number~) anim::$23 ← (unumber~) anim::$22 + (unumber)(number) $33
Adding number conversion cast (unumber) 2 in (number~) anim::$24 ← (byte) anim::i#3 * (number) 2
Adding number conversion cast (unumber) anim::$24 in (number~) anim::$24 ← (byte) anim::i#3 * (unumber)(number) 2
Adding number conversion cast (unumber) $80 in (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#4 | (number) $80
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (signed byte) to elements in (signed byte[8]) xs#0 ← { (signed byte)(number) -$46, (signed byte)(number) -$46, (signed byte)(number) -$46, (signed byte)(number) 0, (signed byte)(number) 0, (signed byte)(number) $46, (signed byte)(number) $46, (signed byte)(number) $46 }
Adding number conversion cast (signed byte) to elements in (signed byte[8]) ys#0 ← { (signed byte)(number) -$46, (signed byte)(number) 0, (signed byte)(number) $46, (signed byte)(number) -$46, (signed byte)(number) $46, (signed byte)(number) -$46, (signed byte)(number) 0, (signed byte)(number) $46 }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) SPRITES_XPOS#0 ← (byte*)(number) $d000
Inlining cast (byte*) SPRITES_YPOS#0 ← (byte*)(number) $d001
Inlining cast (byte*) SPRITES_XMSB#0 ← (byte*)(number) $d010
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) SPRITES_ENABLE#0 ← (byte*)(number) $d015
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) SPRITES_COLS#0 ← (byte*)(number) $d027
Inlining cast (byte) GREEN#0 ← (unumber)(number) 5
Inlining cast (byte) LIGHT_BLUE#0 ← (unumber)(number) $e
Inlining cast (word) mulf_init::sqr#0 ← (unumber)(number) 0
Inlining cast (byte) mulf_init::x_2#0 ← (unumber)(number) 0
Inlining cast (byte) mulf_init::c#0 ← (unumber)(number) 0
Inlining cast (byte~) mulf_init::$1 ← (byte)(number) -1
Inlining cast (byte) mulf_init::dir#0 ← (unumber)(number) $ff
Inlining cast (byte) mulf_init::dir#1 ← (unumber)(number) 1
Inlining cast (byte*) mulf8u_prepare::memA#0 ← (byte*)(number) $fd
Inlining cast (byte*) mulf8u_prepared::resL#0 ← (byte*)(number) $fe
Inlining cast (byte*) mulf8u_prepared::memB#0 ← (byte*)(number) $ff
Inlining cast (signed byte*) mulf8s_prepared::memA#0 ← (signed byte*)(number) $fd
Inlining cast (byte~) mulf8s_prepared::$0 ← (byte)(signed byte) mulf8s_prepared::b#4
Inlining cast (byte~) mulf8s_prepared::$9 ← (byte)(signed byte) mulf8s_prepared::b#6
Inlining cast (signed word~) mulf8s_prepared::$6 ← (signed word)(word) mulf8s_prepared::m#4
Inlining cast (byte~) mulf8s_prepared::$13 ← (byte)*((signed byte*) mulf8s_prepared::memA#0)
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast *((byte*) SPRITES_ENABLE#0) ← (unumber)(number) $ff
Inlining cast (byte~) init::$3 ← (byte)(byte*~) init::$2
Inlining cast (byte) anim::angle#0 ← (unumber)(number) 0
Inlining cast (signed byte~) anim::$1 ← (signed byte)*((byte[$140]) COS#0 + (byte) anim::angle#2)
Inlining cast (signed byte~) anim::$2 ← (signed byte)*((byte*) SIN#1 + (byte) anim::angle#2)
Inlining cast (byte) anim::sprite_msb#0 ← (unumber)(number) 0
Inlining cast (byte~) anim::mulf8s_prepare1_$0#0 ← (byte)(signed byte) anim::mulf8s_prepare1_a#1
Inlining cast (byte~) anim::mulf8s_prepare2_$0#0 ← (byte)(signed byte) anim::mulf8s_prepare2_a#1
Inlining cast (signed byte~) anim::$14 ← (signed byte)(byte~) anim::$13
Inlining cast (byte*) SPRITE#0 ← (byte*)(number) $3000
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53264
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53287
Simplifying constant integer cast 5
Simplifying constant integer cast $e
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast -1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast $1ff
Simplifying constant integer cast 1
Simplifying constant integer cast $1ff
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast $100
Simplifying constant pointer cast (byte*) 253
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast *((byte*) mulf8u_prepared::memB#0)
Simplifying constant integer cast *((byte*) mulf8u_prepared::resL#0)
Simplifying constant pointer cast (signed byte*) 253
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $40
Simplifying constant integer cast $ff
Simplifying constant integer cast $3f8
Simplifying constant integer cast $40
Simplifying constant integer cast -$46
Simplifying constant integer cast -$46
Simplifying constant integer cast -$46
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $46
Simplifying constant integer cast $46
Simplifying constant integer cast $46
Simplifying constant integer cast -$46
Simplifying constant integer cast 0
Simplifying constant integer cast $46
Simplifying constant integer cast -$46
Simplifying constant integer cast $46
Simplifying constant integer cast -$46
Simplifying constant integer cast 0
Simplifying constant integer cast $46
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $95
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $59
Simplifying constant integer cast $33
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 12288
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (word) $100
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) $18
Finalized signed number type (signed word) $95
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $59
Finalized unsigned number type (byte) $33
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) mulf_init::$7 ← (byte) mulf_init::c#1 & (byte) 1
Inferred type updated to signed word in (snumber~) anim::$5 ← (signed word~) anim::$4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) anim::$7 ← (signed word~) anim::$6 * (signed byte) 2
Inferred type updated to signed word in (snumber~) anim::$10 ← (signed word~) anim::$9 * (signed byte) 2
Inferred type updated to signed word in (snumber~) anim::$12 ← (signed word~) anim::$11 * (signed byte) 2
Inferred type updated to signed byte in (snumber~) anim::$15 ← (signed byte~) anim::$14 + (signed byte) $18
Inferred type updated to signed word in (snumber~) anim::$16 ← (signed byte~) anim::$15 + (signed word) $95
Inferred type updated to byte in (unumber~) anim::$17 ← (byte) anim::sprite_msb#3 / (byte) 2
Inferred type updated to byte in (unumber~) anim::$22 ← (byte~) anim::$21 + (byte) $59
Inferred type updated to byte in (unumber~) anim::$23 ← (byte~) anim::$22 + (byte) $33
Inferred type updated to byte in (unumber~) anim::$24 ← (byte) anim::i#3 * (byte) 2
Inversing boolean not [24] (bool~) mulf_init::$9 ← (byte~) mulf_init::$7 != (byte) 0 from [23] (bool~) mulf_init::$8 ← (byte~) mulf_init::$7 == (byte) 0
Inversing boolean not [53] (bool~) mulf_init::$17 ← (byte) mulf_init::x_255#1 != (byte) 0 from [52] (bool~) mulf_init::$16 ← (byte) mulf_init::x_255#1 == (byte) 0
Inversing boolean not [94] (bool~) mulf8s_prepared::$3 ← *((signed byte*) mulf8s_prepared::memA#0) >= (signed byte) 0 from [93] (bool~) mulf8s_prepared::$2 ← *((signed byte*) mulf8s_prepared::memA#0) < (signed byte) 0
Inversing boolean not [98] (bool~) mulf8s_prepared::$5 ← (signed byte) mulf8s_prepared::b#5 >= (signed byte) 0 from [97] (bool~) mulf8s_prepared::$4 ← (signed byte) mulf8s_prepared::b#5 < (signed byte) 0
Inversing boolean not [214] (bool~) anim::$20 ← (byte~) anim::$18 == (byte) 0 from [213] (bool~) anim::$19 ← (byte~) anim::$18 != (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) mulf_init::sqr1_hi#0 = (byte*~) mulf_init::$0 
Alias (byte*) mulf_init::sqr1_lo#0 = (byte*~) mulf_init::$6 
Alias (word) mulf_init::sqr#1 = (word~) mulf_init::$12 
Alias (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#4 
Alias (word) mulf_init::sqr#4 = (word) mulf_init::sqr#5 
Alias (byte*) mulf_init::sqr1_lo#3 = (byte*) mulf_init::sqr1_lo#4 
Alias (byte*) mulf_init::sqr1_hi#3 = (byte*) mulf_init::sqr1_hi#4 
Alias (byte) mulf_init::c#1 = (byte) mulf_init::c#4 
Alias (byte) mulf_init::x_255#0 = (byte~) mulf_init::$1 
Alias (byte) mulf_init::x_255#1 = (byte~) mulf_init::$15 (byte) mulf_init::x_255#4 
Alias (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#4 
Alias (byte*) mulf_init::sqr2_hi#1 = (byte*) mulf_init::sqr2_hi#4 
Alias (word) mulf8u_prepared::return#0 = (word~) mulf8u_prepared::$0 (word) mulf8u_prepared::return#3 (word) mulf8u_prepared::return#1 
Alias (byte) mulf8u_prepared::b#0 = (byte~) mulf8s_prepared::$0 
Alias (word) mulf8u_prepared::return#2 = (word) mulf8u_prepared::return#4 
Alias (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#7 (signed byte) mulf8s_prepared::b#6 
Alias (word) mulf8s_prepared::m#0 = (word~) mulf8s_prepared::$1 (word) mulf8s_prepared::m#3 
Alias (byte~) mulf8s_prepared::$15 = (byte~) mulf8s_prepared::$10 
Alias (signed word) mulf8s_prepared::return#0 = (signed word~) mulf8s_prepared::$6 (signed word) mulf8s_prepared::return#6 (signed word) mulf8s_prepared::return#1 
Alias (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#6 
Alias (byte~) mulf8s_prepared::$16 = (byte~) mulf8s_prepared::$14 
Alias (byte*) SIN#0 = (byte*~) $0 (byte*) SIN#14 (byte*) SIN#11 
Alias (byte*) SIN#6 = (byte*) SIN#8 
Alias (byte*) init::sprites_ptr#0 = (byte*~) init::$1 
Alias (byte) anim::angle#2 = (byte) anim::angle#4 
Alias (byte*) SIN#1 = (byte*) SIN#2 
Alias (signed byte) anim::cos_a#0 = (signed byte~) anim::$1 
Alias (signed byte) anim::sin_a#0 = (signed byte~) anim::$2 
Alias (signed byte) anim::cos_a#1 = (signed byte) anim::mulf8s_prepare1_a#0 (signed byte) anim::mulf8s_prepare1_a#1 (signed byte) anim::cos_a#13 (signed byte) anim::cos_a#12 (signed byte) anim::cos_a#11 (signed byte) anim::cos_a#10 (signed byte) anim::cos_a#9 (signed byte) anim::cos_a#8 (signed byte) anim::cos_a#7 (signed byte) anim::cos_a#6 (signed byte) anim::cos_a#5 (signed byte) anim::cos_a#4 (signed byte) anim::cos_a#3 
Alias (signed byte) anim::x#0 = (signed byte) anim::x#5 (signed byte) anim::x#3 (signed byte) anim::x#1 (signed byte) anim::x#9 (signed byte) anim::x#8 (signed byte) anim::x#7 (signed byte) anim::x#6 (signed byte) anim::x#4 (signed byte) anim::x#2 
Alias (signed byte) anim::y#0 = (signed byte) anim::y#7 (signed byte) anim::y#5 (signed byte) anim::y#3 (signed byte) anim::y#1 (signed byte) anim::y#8 (signed byte) anim::y#6 (signed byte) anim::y#4 (signed byte) anim::y#2 
Alias (signed byte) anim::sin_a#1 = (signed byte) anim::sin_a#5 (signed byte) anim::sin_a#6 (signed byte) anim::sin_a#4 (signed byte) anim::sin_a#3 (signed byte) anim::sin_a#2 (signed byte) anim::mulf8s_prepare2_a#0 (signed byte) anim::mulf8s_prepare2_a#1 (signed byte) anim::sin_a#13 (signed byte) anim::sin_a#12 (signed byte) anim::sin_a#11 (signed byte) anim::sin_a#10 (signed byte) anim::sin_a#9 (signed byte) anim::sin_a#8 
Alias (byte) anim::sprite_msb#10 = (byte) anim::sprite_msb#15 (byte) anim::sprite_msb#16 (byte) anim::sprite_msb#14 (byte) anim::sprite_msb#13 (byte) anim::sprite_msb#12 (byte) anim::sprite_msb#11 (byte) anim::sprite_msb#9 (byte) anim::sprite_msb#8 (byte) anim::sprite_msb#6 (byte) anim::sprite_msb#3 
Alias (byte) anim::i#10 = (byte) anim::i#14 (byte) anim::i#2 (byte) anim::i#13 (byte) anim::i#12 (byte) anim::i#11 (byte) anim::i#9 (byte) anim::i#8 (byte) anim::i#7 (byte) anim::i#6 (byte) anim::i#5 (byte) anim::i#4 
Alias (byte) anim::angle#10 = (byte) anim::angle#17 (byte) anim::angle#18 (byte) anim::angle#16 (byte) anim::angle#15 (byte) anim::angle#14 (byte) anim::angle#13 (byte) anim::angle#12 (byte) anim::angle#11 (byte) anim::angle#9 (byte) anim::angle#8 (byte) anim::angle#7 
Alias (byte*) SIN#10 = (byte*) SIN#21 (byte*) SIN#22 (byte*) SIN#20 (byte*) SIN#19 (byte*) SIN#18 (byte*) SIN#17 (byte*) SIN#16 (byte*) SIN#15 (byte*) SIN#13 (byte*) SIN#12 (byte*) SIN#9 
Alias (byte) mulf8u_prepare::a#0 = (byte~) anim::mulf8s_prepare1_$0#0 
Alias (signed word) mulf8s_prepared::return#2 = (signed word) mulf8s_prepared::return#7 
Alias (signed word) anim::xr#0 = (signed word~) anim::$5 (signed word) anim::xr#7 (signed word) anim::xr#6 (signed word) anim::xr#5 (signed word) anim::xr#4 (signed word) anim::xr#2 
Alias (signed word) mulf8s_prepared::return#3 = (signed word) mulf8s_prepared::return#8 
Alias (signed word) anim::yr#0 = (signed word~) anim::$7 (signed word) anim::yr#8 (signed word) anim::yr#7 (signed word) anim::yr#6 (signed word) anim::yr#4 (signed word) anim::yr#2 
Alias (byte) mulf8u_prepare::a#1 = (byte~) anim::mulf8s_prepare2_$0#0 
Alias (signed word) mulf8s_prepared::return#4 = (signed word) mulf8s_prepared::return#9 
Alias (signed word) mulf8s_prepared::return#10 = (signed word) mulf8s_prepared::return#5 
Alias (signed word) anim::xr#1 = (signed word) anim::xr#3 
Alias (signed word) anim::xpos#0 = (signed word~) anim::$16 (signed word) anim::xpos#2 
Alias (byte) anim::sprite_msb#1 = (byte~) anim::$17 (byte) anim::sprite_msb#4 
Alias (byte) anim::ypos#0 = (byte~) anim::$23 
Alias (byte) anim::i2#0 = (byte~) anim::$24 
Alias (signed word) anim::yr#1 = (signed word) anim::yr#5 
Alias (byte) anim::sprite_msb#5 = (byte) anim::sprite_msb#7 
Alias (byte) anim::angle#3 = (byte) anim::angle#5 
Alias (byte*) SIN#5 = (byte*) SIN#7 
Successful SSA optimization Pass2AliasElimination
Alias (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#3 
Alias (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#3 
Alias (byte) mulf_init::c#1 = (byte) mulf_init::c#3 
Alias (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#3 
Alias (byte) mulf_init::x_255#1 = (byte) mulf_init::x_255#3 
Alias (byte*) mulf_init::sqr2_hi#1 = (byte*) mulf_init::sqr2_hi#3 
Alias (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#5 
Alias (signed word) anim::yr#1 = (signed word) anim::yr#3 
Alias (byte) anim::i#10 = (byte) anim::i#3 
Alias (signed word) anim::xpos#0 = (signed word) anim::xpos#1 
Alias (signed byte) anim::cos_a#1 = (signed byte) anim::cos_a#2 
Alias (byte) anim::angle#10 = (byte) anim::angle#3 
Alias (byte*) SIN#10 = (byte*) SIN#5 
Alias (signed byte) anim::sin_a#1 = (signed byte) anim::sin_a#7 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) init::sprites_ptr#1
Self Phi Eliminated (byte) anim::angle#2
Self Phi Eliminated (byte*) SIN#1
Self Phi Eliminated (signed byte) anim::cos_a#1
Self Phi Eliminated (signed byte) anim::sin_a#1
Self Phi Eliminated (byte) anim::angle#10
Self Phi Eliminated (byte*) SIN#10
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) mulf8u_prepared::b#1 (byte) mulf8u_prepared::b#0
Identical Phi Values (byte*) SIN#6 (byte*) SIN#0
Identical Phi Values (byte*) init::sprites_ptr#1 (byte*) init::sprites_ptr#0
Identical Phi Values (byte*) SIN#4 (byte*) SIN#6
Identical Phi Values (byte) anim::angle#2 (byte) anim::angle#6
Identical Phi Values (byte*) SIN#1 (byte*) SIN#3
Identical Phi Values (signed byte) anim::cos_a#1 (signed byte) anim::cos_a#0
Identical Phi Values (signed byte) anim::sin_a#1 (signed byte) anim::sin_a#0
Identical Phi Values (byte) anim::angle#10 (byte) anim::angle#2
Identical Phi Values (byte*) SIN#10 (byte*) SIN#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) mulf_init::$9 [25] if((byte~) mulf_init::$7!=(byte) 0) goto mulf_init::@2
Simple Condition (bool~) mulf_init::$14 [37] if((byte*) mulf_init::sqr1_lo#1!=(byte*~) mulf_init::$13) goto mulf_init::@1
Simple Condition (bool~) mulf_init::$17 [54] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@6
Simple Condition (bool~) mulf_init::$19 [59] if((byte*) mulf_init::sqr2_lo#1!=(byte*~) mulf_init::$18) goto mulf_init::@5
Simple Condition (bool~) mulf8s_prepared::$3 [95] if(*((signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1
Simple Condition (bool~) mulf8s_prepared::$5 [99] if((signed byte) mulf8s_prepared::b#4>=(signed byte) 0) goto mulf8s_prepared::@2
Simple Condition (bool~) init::$4 [140] if((byte) init::i#1!=rangelast(0,7)) goto init::@1
Simple Condition (bool~) anim::$0 [151] if(*((byte*) RASTER#0)!=(byte) $ff) goto anim::@4
Simple Condition (bool~) anim::$20 [215] if((byte~) anim::$18==(byte) 0) goto anim::@11
Simple Condition (bool~) anim::$26 [228] if((byte) anim::i#1!=rangelast(0,7)) goto anim::@10
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [9] (byte[$200]) mulf_sqr1_lo#0 ← { fill( $200, 0) }
Constant right-side identified [10] (byte[$200]) mulf_sqr1_hi#0 ← { fill( $200, 0) }
Constant right-side identified [11] (byte[$200]) mulf_sqr2_lo#0 ← { fill( $200, 0) }
Constant right-side identified [12] (byte[$200]) mulf_sqr2_hi#0 ← { fill( $200, 0) }
Constant right-side identified [143] (signed byte[8]) xs#0 ← { (signed byte) -$46, (signed byte) -$46, (signed byte) -$46, (signed byte) 0, (signed byte) 0, (signed byte) $46, (signed byte) $46, (signed byte) $46 }
Constant right-side identified [144] (signed byte[8]) ys#0 ← { (signed byte) -$46, (signed byte) 0, (signed byte) $46, (signed byte) -$46, (signed byte) $46, (signed byte) -$46, (signed byte) 0, (signed byte) $46 }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) SPRITES_XPOS#0 = (byte*) 53248
Constant (const byte*) SPRITES_YPOS#0 = (byte*) 53249
Constant (const byte*) SPRITES_XMSB#0 = (byte*) 53264
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) SPRITES_ENABLE#0 = (byte*) 53269
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) SPRITES_COLS#0 = (byte*) 53287
Constant (const byte) GREEN#0 = 5
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte[$200]) mulf_sqr1_lo#0 = { fill( $200, 0) }
Constant (const byte[$200]) mulf_sqr1_hi#0 = { fill( $200, 0) }
Constant (const byte[$200]) mulf_sqr2_lo#0 = { fill( $200, 0) }
Constant (const byte[$200]) mulf_sqr2_hi#0 = { fill( $200, 0) }
Constant (const word) mulf_init::sqr#0 = 0
Constant (const byte) mulf_init::x_2#0 = 0
Constant (const byte) mulf_init::c#0 = 0
Constant (const byte) mulf_init::x_255#0 = -1
Constant (const byte) mulf_init::dir#0 = $ff
Constant (const byte) mulf_init::dir#1 = 1
Constant (const byte*) mulf8u_prepare::memA#0 = (byte*) 253
Constant (const byte*) mulf8u_prepared::resL#0 = (byte*) 254
Constant (const byte*) mulf8u_prepared::memB#0 = (byte*) 255
Constant (const signed byte*) mulf8s_prepared::memA#0 = (signed byte*) 253
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte[$140]) COS#0 = kickasm {{ {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
Constant (const byte) init::i#0 = 0
Constant (const signed byte[8]) xs#0 = { -$46, -$46, -$46, 0, 0, $46, $46, $46 }
Constant (const signed byte[8]) ys#0 = { -$46, 0, $46, -$46, $46, -$46, 0, $46 }
Constant (const byte) anim::angle#0 = 0
Constant (const byte) anim::sprite_msb#0 = 0
Constant (const byte) anim::i#0 = 0
Constant (const byte*) SPRITE#0 = (byte*) 12288
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) mulf_init::sqr2_hi#0 = mulf_sqr2_hi#0
Constant (const byte*) mulf_init::sqr2_lo#0 = mulf_sqr2_lo#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [148] if(true) goto anim::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [138] init::i#1 ← ++ init::i#2 to ++
Resolved ranged comparison value [140] if(init::i#1!=rangelast(0,7)) goto init::@1 to (number) 8
Resolved ranged next value [226] anim::i#1 ← ++ anim::i#10 to ++
Resolved ranged comparison value [228] if(anim::i#1!=rangelast(0,7)) goto anim::@10 to (number) 8
Removing unused block anim::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 8 in if((byte) init::i#1!=(number) 8) goto init::@1
Adding number conversion cast (unumber) 8 in if((byte) anim::i#1!=(number) 8) goto anim::@10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (byte*) SIN#3
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) SIN#3 (byte*) SIN#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [0] (byte*) mulf_init::sqr1_hi#0 ← (const byte[$200]) mulf_sqr1_hi#0 + (byte) 1
Constant right-side identified [1] (byte*) mulf_init::sqr1_lo#0 ← (const byte[$200]) mulf_sqr1_lo#0 + (byte) 1
Constant right-side identified [14] (byte*~) mulf_init::$13 ← (const byte[$200]) mulf_sqr1_lo#0 + (word) $200
Constant right-side identified [26] (byte*~) mulf_init::$18 ← (const byte[$200]) mulf_sqr2_lo#0 + (word) $1ff
Constant right-side identified [28] (byte*~) mulf_init::$2 ← (const byte[$200]) mulf_sqr2_lo#0 + (word) $1ff
Constant right-side identified [29] (byte*~) mulf_init::$3 ← (const byte[$200]) mulf_sqr1_lo#0 + (word) $100
Constant right-side identified [31] (byte*~) mulf_init::$4 ← (const byte[$200]) mulf_sqr2_hi#0 + (word) $1ff
Constant right-side identified [32] (byte*~) mulf_init::$5 ← (const byte[$200]) mulf_sqr1_hi#0 + (word) $100
Constant right-side identified [62] (byte*) SIN#0 ← (const byte[$140]) COS#0 + (byte) $40
Constant right-side identified [69] (byte*) init::sprites_ptr#0 ← (const byte*) SCREEN#0 + (word) $3f8
Constant right-side identified [71] (byte*~) init::$2 ← (const byte*) SPRITE#0 / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) mulf_init::sqr1_hi#0 = mulf_sqr1_hi#0+1
Constant (const byte*) mulf_init::sqr1_lo#0 = mulf_sqr1_lo#0+1
Constant (const byte*) mulf_init::$13 = mulf_sqr1_lo#0+$200
Constant (const byte*) mulf_init::$18 = mulf_sqr2_lo#0+$1ff
Constant (const byte*) mulf_init::$2 = mulf_sqr2_lo#0+$1ff
Constant (const byte*) mulf_init::$3 = mulf_sqr1_lo#0+$100
Constant (const byte*) mulf_init::$4 = mulf_sqr2_hi#0+$1ff
Constant (const byte*) mulf_init::$5 = mulf_sqr1_hi#0+$100
Constant (const byte*) SIN#0 = COS#0+$40
Constant (const byte*) init::sprites_ptr#0 = SCREEN#0+$3f8
Constant (const byte*) init::$2 = SPRITE#0/$40
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)init::$2 in [72] (byte~) init::$3 ← (byte)(const byte*) init::$2
Successful SSA optimization Pass2ConstantValues
Constant (const byte) init::$3 = (byte)init::$2
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [44] (byte~) mulf8s_prepared::$9 ← (byte)(signed byte) mulf8s_prepared::b#4 keeping mulf8s_prepared::b#4
Inlining Noop Cast [48] (signed word) mulf8s_prepared::return#0 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [50] (byte~) mulf8s_prepared::$13 ← (byte)*((const signed byte*) mulf8s_prepared::memA#0) keeping *(mulf8s_prepared::memA#0)
Inlining Noop Cast [69] (signed byte) anim::cos_a#0 ← (signed byte)*((const byte[$140]) COS#0 + (byte) anim::angle#6) keeping *(COS#0 + anim::angle#6)
Inlining Noop Cast [70] (signed byte) anim::sin_a#0 ← (signed byte)*((const byte*) SIN#0 + (byte) anim::angle#6) keeping *(SIN#0 + anim::angle#6)
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [74] (byte) mulf8u_prepare::a#0 ← (byte)(signed byte)*((const byte[$140]) COS#0 + (byte) anim::angle#6) keeping (signed byte)*(COS#0 + anim::angle#6)
Inlining Noop Cast [78] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [83] (signed word) mulf8s_prepared::return#3 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [86] (byte) mulf8u_prepare::a#1 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#6) keeping (signed byte)*(SIN#0 + anim::angle#6)
Inlining Noop Cast [90] (signed word) mulf8s_prepared::return#4 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [96] (signed word) mulf8s_prepared::return#10 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [101] (signed byte~) anim::$14 ← (signed byte)(byte~) anim::$13 keeping anim::$14
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [80] (signed word) anim::xr#0 ← (signed word~) anim::$4 * (signed byte) 2
Rewriting multiplication to use shift [85] (signed word) anim::yr#0 ← (signed word~) anim::$6 * (signed byte) 2
Rewriting multiplication to use shift [92] (signed word~) anim::$10 ← (signed word~) anim::$9 * (signed byte) 2
Rewriting multiplication to use shift [98] (signed word~) anim::$12 ← (signed word~) anim::$11 * (signed byte) 2
Rewriting division to use shift [104] (byte) anim::sprite_msb#1 ← (byte) anim::sprite_msb#10 / (byte) 2
Rewriting multiplication to use shift [111] (byte) anim::i2#0 ← (byte) anim::i#10 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) mulf_init::sqr#0
Inlining constant with var siblings (const byte) mulf_init::x_2#0
Inlining constant with var siblings (const byte) mulf_init::c#0
Inlining constant with var siblings (const byte) mulf_init::x_255#0
Inlining constant with var siblings (const byte) mulf_init::dir#0
Inlining constant with var siblings (const byte) mulf_init::dir#1
Inlining constant with var siblings (const byte*) mulf_init::sqr2_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_lo#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_lo#0
Inlining constant with var siblings (const byte) init::i#0
Inlining constant with var siblings (const byte) anim::angle#0
Inlining constant with var siblings (const byte) anim::sprite_msb#0
Inlining constant with var siblings (const byte) anim::i#0
Constant inlined mulf_init::c#0 = (byte) 0
Constant inlined mulf_init::sqr2_lo#0 = (const byte[$200]) mulf_sqr2_lo#0
Constant inlined mulf_init::sqr#0 = (byte) 0
Constant inlined anim::sprite_msb#0 = (byte) 0
Constant inlined init::i#0 = (byte) 0
Constant inlined mulf_init::sqr2_hi#0 = (const byte[$200]) mulf_sqr2_hi#0
Constant inlined mulf_init::$2 = (const byte[$200]) mulf_sqr2_lo#0+(word) $1ff
Constant inlined mulf_init::$4 = (const byte[$200]) mulf_sqr2_hi#0+(word) $1ff
Constant inlined init::$3 = (byte)(const byte*) SPRITE#0/(byte) $40
Constant inlined mulf_init::$3 = (const byte[$200]) mulf_sqr1_lo#0+(word) $100
Constant inlined init::$2 = (const byte*) SPRITE#0/(byte) $40
Constant inlined anim::angle#0 = (byte) 0
Constant inlined anim::i#0 = (byte) 0
Constant inlined mulf_init::$5 = (const byte[$200]) mulf_sqr1_hi#0+(word) $100
Constant inlined mulf_init::dir#1 = (byte) 1
Constant inlined mulf_init::dir#0 = (byte) $ff
Constant inlined mulf_init::sqr1_hi#0 = (const byte[$200]) mulf_sqr1_hi#0+(byte) 1
Constant inlined mulf_init::sqr1_lo#0 = (const byte[$200]) mulf_sqr1_lo#0+(byte) 1
Constant inlined mulf_init::x_255#0 = (byte) -1
Constant inlined mulf_init::$13 = (const byte[$200]) mulf_sqr1_lo#0+(word) $200
Constant inlined mulf_init::$18 = (const byte[$200]) mulf_sqr2_lo#0+(word) $1ff
Constant inlined mulf_init::x_2#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment anim::xpos#0
Consolidated constant in assignment anim::ypos#0
Successful SSA optimization Pass2ConstantAdditionElimination
Alias (byte~) anim::$22 = (byte~) anim::$21 
Successful SSA optimization Pass2AliasElimination
Inlining Noop Cast [90] (signed byte~) anim::$15 ← (signed byte)(byte~) anim::$14 keeping anim::$15
Successful SSA optimization Pass2NopCastInlining
Added new block during phi lifting mulf_init::@9(between mulf_init::@2 and mulf_init::@1)
Added new block during phi lifting mulf_init::@10(between mulf_init::@1 and mulf_init::@2)
Added new block during phi lifting mulf_init::@11(between mulf_init::@6 and mulf_init::@5)
Added new block during phi lifting mulf_init::@12(between mulf_init::@5 and mulf_init::@6)
Added new block during phi lifting mulf8s_prepared::@7(between mulf8s_prepared::@6 and mulf8s_prepared::@1)
Added new block during phi lifting mulf8s_prepared::@8(between mulf8s_prepared::@1 and mulf8s_prepared::@2)
Added new block during phi lifting init::@4(between init::@1 and init::@1)
Added new block during phi lifting anim::@25(between anim::@11 and anim::@10)
Added new block during phi lifting anim::@26(between anim::@24 and anim::@11)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @13
Adding NOP phi() at start of @15
Adding NOP phi() at start of @17
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@19
Adding NOP phi() at start of anim::@22
Adding NOP phi() at start of init
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@4
Adding NOP phi() at start of mulf_init::@7
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to init:9 anim:11 
Calls in [anim] to mulf8u_prepare:22 mulf8s_prepared:26 mulf8s_prepared:31 mulf8u_prepare:35 mulf8s_prepared:39 mulf8s_prepared:45 
Calls in [mulf8s_prepared] to mulf8u_prepared:74 
Calls in [init] to mulf_init:101 

Created 21 initial phi equivalence classes
Coalesced [25] mulf8s_prepared::b#8 ← mulf8s_prepared::b#0
Coalesced [30] mulf8s_prepared::b#10 ← mulf8s_prepared::b#1
Coalesced [38] mulf8s_prepared::b#9 ← mulf8s_prepared::b#2
Coalesced [44] mulf8s_prepared::b#11 ← mulf8s_prepared::b#3
Coalesced [55] anim::sprite_msb#18 ← anim::sprite_msb#2
Coalesced [68] anim::angle#19 ← anim::angle#1
Coalesced [69] anim::i#15 ← anim::i#1
Coalesced [70] anim::sprite_msb#17 ← anim::sprite_msb#5
Coalesced [71] anim::sprite_msb#19 ← anim::sprite_msb#1
Coalesced [81] mulf8s_prepared::m#7 ← mulf8s_prepared::m#1
Coalesced [87] mulf8s_prepared::m#10 ← mulf8s_prepared::m#2
Coalesced [90] mulf8s_prepared::m#9 ← mulf8s_prepared::m#5
Coalesced [91] mulf8s_prepared::m#8 ← mulf8s_prepared::m#0
Coalesced [109] init::i#3 ← init::i#1
Coalesced [117] mulf_init::sqr#8 ← mulf_init::sqr#2
Coalesced [118] mulf_init::x_2#7 ← mulf_init::x_2#1
Coalesced [142] mulf_init::x_255#5 ← mulf_init::x_255#1
Coalesced [143] mulf_init::sqr2_lo#5 ← mulf_init::sqr2_lo#1
Coalesced [144] mulf_init::sqr2_hi#5 ← mulf_init::sqr2_hi#1
Coalesced [145] mulf_init::dir#4 ← mulf_init::dir#3
Coalesced (already) [146] mulf_init::dir#5 ← mulf_init::dir#2
Coalesced [147] mulf_init::c#5 ← mulf_init::c#1
Coalesced [148] mulf_init::sqr#6 ← mulf_init::sqr#1
Coalesced [149] mulf_init::sqr1_lo#5 ← mulf_init::sqr1_lo#1
Coalesced [150] mulf_init::sqr1_hi#5 ← mulf_init::sqr1_hi#1
Coalesced [151] mulf_init::x_2#5 ← mulf_init::x_2#2
Coalesced [152] mulf_init::sqr#7 ← mulf_init::sqr#4
Coalesced (already) [153] mulf_init::x_2#6 ← mulf_init::x_2#3
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @13
Culled Empty Block (label) @15
Culled Empty Block (label) @17
Culled Empty Block (label) main::@2
Culled Empty Block (label) anim::@19
Culled Empty Block (label) anim::@22
Culled Empty Block (label) anim::@25
Culled Empty Block (label) anim::@26
Culled Empty Block (label) mulf8s_prepared::@8
Culled Empty Block (label) mulf8s_prepared::@7
Culled Empty Block (label) init::@4
Culled Empty Block (label) mulf_init::@4
Culled Empty Block (label) mulf_init::@7
Culled Empty Block (label) mulf_init::@11
Culled Empty Block (label) mulf_init::@9
Culled Empty Block (label) mulf_init::@10
Renumbering block @16 to @1
Renumbering block mulf_init::@5 to mulf_init::@4
Renumbering block mulf_init::@6 to mulf_init::@5
Renumbering block mulf_init::@8 to mulf_init::@6
Renumbering block mulf_init::@12 to mulf_init::@7
Renumbering block mulf8s_prepared::@6 to mulf8s_prepared::@5
Renumbering block init::@3 to init::@2
Renumbering block anim::@4 to anim::@2
Renumbering block anim::@6 to anim::@3
Renumbering block anim::@10 to anim::@4
Renumbering block anim::@11 to anim::@5
Renumbering block anim::@12 to anim::@6
Renumbering block anim::@13 to anim::@7
Renumbering block anim::@17 to anim::@8
Renumbering block anim::@18 to anim::@9
Renumbering block anim::@20 to anim::@10
Renumbering block anim::@21 to anim::@11
Renumbering block anim::@23 to anim::@12
Renumbering block anim::@24 to anim::@13
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of anim
Adding NOP phi() at start of init
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@7

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  asm { sei  }
  [5] call init 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call anim 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
anim: scope:[anim]  from main::@1
  [9] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@7
  [10] (byte) anim::angle#6 ← phi( anim/(byte) 0 anim::@7/(byte) anim::angle#1 )
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@2
  [11] if(*((const byte*) RASTER#0)!=(byte) $ff) goto anim::@2
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2
  [12] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@5
  [13] (byte) anim::sprite_msb#10 ← phi( anim::@5/(byte) anim::sprite_msb#5 anim::@3/(byte) 0 )
  [13] (byte) anim::i#10 ← phi( anim::@5/(byte) anim::i#1 anim::@3/(byte) 0 )
  [14] (signed byte) anim::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#10)
  [15] (signed byte) anim::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#10)
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@4
  [16] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte[$140]) COS#0 + (byte) anim::angle#6)
  [17] call mulf8u_prepare 
  to:anim::@8
anim::@8: scope:[anim]  from anim::mulf8s_prepare1
  [18] (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#0
  [19] call mulf8s_prepared 
  to:anim::@10
anim::@10: scope:[anim]  from anim::@8
  [20] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4
  [21] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1
  [22] (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#0
  [23] call mulf8s_prepared 
  to:anim::@11
anim::@11: scope:[anim]  from anim::@10
  [24] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4
  [25] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@11
  [26] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#6)
  [27] call mulf8u_prepare 
  to:anim::@9
anim::@9: scope:[anim]  from anim::mulf8s_prepare2
  [28] (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#0
  [29] call mulf8s_prepared 
  to:anim::@12
anim::@12: scope:[anim]  from anim::@9
  [30] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4
  [31] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1
  [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10
  [33] (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#0
  [34] call mulf8s_prepared 
  to:anim::@13
anim::@13: scope:[anim]  from anim::@12
  [35] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4
  [36] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1
  [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12
  [38] (byte~) anim::$15 ← > (signed word) anim::xr#1
  [39] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$15 + (signed byte) $18+(signed word) $95
  [40] (byte) anim::sprite_msb#1 ← (byte) anim::sprite_msb#10 >> (byte) 1
  [41] (byte~) anim::$18 ← > (signed word) anim::xpos#0
  [42] if((byte~) anim::$18==(byte) 0) goto anim::@5
  to:anim::@6
anim::@6: scope:[anim]  from anim::@13
  [43] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80
  to:anim::@5
anim::@5: scope:[anim]  from anim::@13 anim::@6
  [44] (byte) anim::sprite_msb#5 ← phi( anim::@6/(byte) anim::sprite_msb#2 anim::@13/(byte) anim::sprite_msb#1 )
  [45] (byte~) anim::$22 ← > (signed word) anim::yr#1
  [46] (byte) anim::ypos#0 ← (byte~) anim::$22 + (byte) $59+(byte) $33
  [47] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1
  [48] (byte~) anim::$25 ← < (signed word) anim::xpos#0
  [49] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte~) anim::$25
  [50] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0
  [51] (byte) anim::i#1 ← ++ (byte) anim::i#10
  [52] if((byte) anim::i#1!=(byte) 8) goto anim::@4
  to:anim::@7
anim::@7: scope:[anim]  from anim::@5
  [53] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::sprite_msb#5
  [54] (byte) anim::angle#1 ← ++ (byte) anim::angle#6
  [55] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  to:anim::@1
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@10 anim::@12 anim::@8 anim::@9
  [56] (signed byte) mulf8s_prepared::b#4 ← phi( anim::@8/(signed byte) mulf8s_prepared::b#0 anim::@9/(signed byte) mulf8s_prepared::b#2 anim::@10/(signed byte) mulf8s_prepared::b#1 anim::@12/(signed byte) mulf8s_prepared::b#3 )
  [57] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#4
  [58] call mulf8u_prepared 
  [59] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [60] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
  [61] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [62] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0
  [63] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#4
  [64] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [65] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  [66] if((signed byte) mulf8s_prepared::b#4>=(signed byte) 0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [67] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5
  [68] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA#0)
  [69] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [70] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [71] return 
  to:@return
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [72] *((const byte*) mulf8u_prepared::memB#0) ← (byte) mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [74] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0)
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [75] return 
  to:@return
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  [76] (byte) mulf8u_prepare::a#2 ← phi( anim::mulf8s_prepare1/(byte~) mulf8u_prepare::a#3 anim::mulf8s_prepare2/(byte~) mulf8u_prepare::a#4 )
  [77] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [79] return 
  to:@return
init: scope:[init]  from main
  [80] phi()
  [81] call mulf_init 
  to:init::@2
init::@2: scope:[init]  from init
  [82] *((const byte*) SPRITES_ENABLE#0) ← (byte) $ff
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@2
  [83] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@2/(byte) 0 )
  [84] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE#0/(byte) $40
  [85] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0
  [86] (byte) init::i#1 ← ++ (byte) init::i#2
  [87] if((byte) init::i#1!=(byte) 8) goto init::@1
  to:init::@return
init::@return: scope:[init]  from init::@1
  [88] return 
  to:@return
mulf_init: scope:[mulf_init]  from init
  [89] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@2
  [90] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@2/(byte) mulf_init::x_2#2 )
  [90] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte[$200]) mulf_sqr1_hi#0+(byte) 1 mulf_init::@2/(byte*) mulf_init::sqr1_hi#1 )
  [90] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte[$200]) mulf_sqr1_lo#0+(byte) 1 mulf_init::@2/(byte*) mulf_init::sqr1_lo#1 )
  [90] (word) mulf_init::sqr#4 ← phi( mulf_init/(byte) 0 mulf_init::@2/(word) mulf_init::sqr#1 )
  [90] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@2/(byte) mulf_init::c#1 )
  [91] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [92] (byte~) mulf_init::$7 ← (byte) mulf_init::c#1 & (byte) 1
  [93] if((byte~) mulf_init::$7!=(byte) 0) goto mulf_init::@2
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@1
  [94] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [95] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@2
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1 mulf_init::@3
  [96] (byte) mulf_init::x_2#2 ← phi( mulf_init::@1/(byte) mulf_init::x_2#3 mulf_init::@3/(byte) mulf_init::x_2#1 )
  [96] (word) mulf_init::sqr#3 ← phi( mulf_init::@1/(word) mulf_init::sqr#4 mulf_init::@3/(word) mulf_init::sqr#2 )
  [97] (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3
  [98] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10
  [99] (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3
  [100] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11
  [101] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [102] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [103] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  [104] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word) $200) goto mulf_init::@1
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2 mulf_init::@5
  [105] (byte) mulf_init::dir#2 ← phi( mulf_init::@2/(byte) $ff mulf_init::@5/(byte) mulf_init::dir#3 )
  [105] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@2/(const byte[$200]) mulf_sqr2_hi#0 mulf_init::@5/(byte*) mulf_init::sqr2_hi#1 )
  [105] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@2/(const byte[$200]) mulf_sqr2_lo#0 mulf_init::@5/(byte*) mulf_init::sqr2_lo#1 )
  [105] (byte) mulf_init::x_255#2 ← phi( mulf_init::@2/(byte) -1 mulf_init::@5/(byte) mulf_init::x_255#1 )
  [106] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2)
  [107] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2)
  [108] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [109] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [110] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@7
  to:mulf_init::@5
mulf_init::@7: scope:[mulf_init]  from mulf_init::@4
  [111] phi()
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@4 mulf_init::@7
  [112] (byte) mulf_init::dir#3 ← phi( mulf_init::@7/(byte) mulf_init::dir#2 mulf_init::@4/(byte) 1 )
  [113] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  [114] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) goto mulf_init::@4
  to:mulf_init::@6
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [115] *((const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word) $100)
  [116] *((const byte[$200]) mulf_sqr2_hi#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@6
  [117] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(byte[$140]) COS
(byte) GREEN
(byte) LIGHT_BLUE
(byte*) RASTER
(byte*) SCREEN
(byte*) SIN
(byte*) SPRITE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(void()) anim()
(signed word~) anim::$10 202.0
(signed word~) anim::$11 202.0
(signed word~) anim::$12 202.0
(byte~) anim::$15 101.0
(byte~) anim::$18 202.0
(byte~) anim::$22 202.0
(byte~) anim::$25 202.0
(signed word~) anim::$4 202.0
(signed word~) anim::$6 202.0
(signed word~) anim::$9 202.0
(byte) anim::angle
(byte) anim::angle#1 11.0
(byte) anim::angle#6 0.5
(signed byte) anim::cos_a
(byte) anim::i
(byte) anim::i#1 151.5
(byte) anim::i#10 13.289473684210527
(byte) anim::i2
(byte) anim::i2#0 101.0
(byte~) anim::mulf8s_prepare1_$0
(signed byte) anim::mulf8s_prepare1_a
(byte~) anim::mulf8s_prepare2_$0
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::sin_a
(byte) anim::sprite_msb
(byte) anim::sprite_msb#1 101.0
(byte) anim::sprite_msb#10 7.481481481481482
(byte) anim::sprite_msb#2 202.0
(byte) anim::sprite_msb#5 34.888888888888886
(signed byte) anim::x
(signed byte) anim::x#0 15.947368421052632
(signed word) anim::xpos
(signed word) anim::xpos#0 33.666666666666664
(signed word) anim::xr
(signed word) anim::xr#0 18.363636363636363
(signed word) anim::xr#1 33.666666666666664
(signed byte) anim::y
(signed byte) anim::y#0 23.307692307692307
(byte) anim::ypos
(byte) anim::ypos#0 50.5
(signed word) anim::yr
(signed word) anim::yr#0 16.833333333333332
(signed word) anim::yr#1 25.25
(void()) init()
(byte) init::i
(byte) init::i#1 16.5
(byte) init::i#2 14.666666666666666
(byte*) init::sprites_ptr
(void()) main()
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$12 4.0
(byte~) mulf8s_prepared::$15 4.0
(byte~) mulf8s_prepared::$16 4.0
(byte~) mulf8s_prepared::$8 4.0
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0 202.0
(signed byte) mulf8s_prepared::b#1 202.0
(signed byte) mulf8s_prepared::b#2 202.0
(signed byte) mulf8s_prepared::b#3 202.0
(signed byte) mulf8s_prepared::b#4 40.6
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 2.0
(word) mulf8s_prepared::m#1 4.0
(word) mulf8s_prepared::m#2 4.0
(word) mulf8s_prepared::m#4 0.6666666666666666
(word) mulf8s_prepared::m#5 2.5
(signed byte*) mulf8s_prepared::memA
(signed word) mulf8s_prepared::return
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#2 204.0
(byte~) mulf8u_prepare::a#3 202.0
(byte~) mulf8u_prepare::a#4 202.0
(byte*) mulf8u_prepare::memA
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0 4.0
(byte*) mulf8u_prepared::memB
(byte*) mulf8u_prepared::resL
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 1.3333333333333333
(word) mulf8u_prepared::return#2 4.0
(void()) mulf_init()
(byte~) mulf_init::$10 22.0
(byte~) mulf_init::$11 22.0
(byte~) mulf_init::$7 22.0
(byte) mulf_init::c
(byte) mulf_init::c#1 2.357142857142857
(byte) mulf_init::c#2 22.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 4.714285714285714
(byte) mulf_init::dir#3 7.333333333333333
(word) mulf_init::sqr
(word) mulf_init::sqr#1 7.333333333333333
(word) mulf_init::sqr#2 22.0
(word) mulf_init::sqr#3 9.166666666666666
(word) mulf_init::sqr#4 6.6000000000000005
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 5.5
(byte*) mulf_init::sqr1_hi#2 3.0
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 16.5
(byte*) mulf_init::sqr1_lo#2 2.5384615384615383
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 3.142857142857143
(byte*) mulf_init::sqr2_hi#2 11.0
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 16.5
(byte*) mulf_init::sqr2_lo#2 4.125
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 11.0
(byte) mulf_init::x_2#2 4.888888888888889
(byte) mulf_init::x_2#3 8.25
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 5.5
(byte) mulf_init::x_255#2 11.0
(byte[$200]) mulf_sqr1_hi
(byte[$200]) mulf_sqr1_lo
(byte[$200]) mulf_sqr2_hi
(byte[$200]) mulf_sqr2_lo
(signed byte[8]) xs
(signed byte[8]) ys

Initial phi equivalence classes
[ anim::angle#6 anim::angle#1 ]
[ anim::i#10 anim::i#1 ]
[ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
[ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
[ init::i#2 init::i#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#3 ]
Added variable anim::x#0 to zero page equivalence class [ anim::x#0 ]
Added variable anim::y#0 to zero page equivalence class [ anim::y#0 ]
Added variable anim::$4 to zero page equivalence class [ anim::$4 ]
Added variable anim::xr#0 to zero page equivalence class [ anim::xr#0 ]
Added variable anim::$6 to zero page equivalence class [ anim::$6 ]
Added variable anim::yr#0 to zero page equivalence class [ anim::yr#0 ]
Added variable anim::$9 to zero page equivalence class [ anim::$9 ]
Added variable anim::$10 to zero page equivalence class [ anim::$10 ]
Added variable anim::xr#1 to zero page equivalence class [ anim::xr#1 ]
Added variable anim::$11 to zero page equivalence class [ anim::$11 ]
Added variable anim::$12 to zero page equivalence class [ anim::$12 ]
Added variable anim::yr#1 to zero page equivalence class [ anim::yr#1 ]
Added variable anim::$15 to zero page equivalence class [ anim::$15 ]
Added variable anim::xpos#0 to zero page equivalence class [ anim::xpos#0 ]
Added variable anim::$18 to zero page equivalence class [ anim::$18 ]
Added variable anim::$22 to zero page equivalence class [ anim::$22 ]
Added variable anim::ypos#0 to zero page equivalence class [ anim::ypos#0 ]
Added variable anim::i2#0 to zero page equivalence class [ anim::i2#0 ]
Added variable anim::$25 to zero page equivalence class [ anim::$25 ]
Added variable mulf8u_prepared::b#0 to zero page equivalence class [ mulf8u_prepared::b#0 ]
Added variable mulf8u_prepared::return#2 to zero page equivalence class [ mulf8u_prepared::return#2 ]
Added variable mulf8s_prepared::$8 to zero page equivalence class [ mulf8s_prepared::$8 ]
Added variable mulf8s_prepared::$15 to zero page equivalence class [ mulf8s_prepared::$15 ]
Added variable mulf8s_prepared::$12 to zero page equivalence class [ mulf8s_prepared::$12 ]
Added variable mulf8s_prepared::$16 to zero page equivalence class [ mulf8s_prepared::$16 ]
Added variable mulf8u_prepared::return#0 to zero page equivalence class [ mulf8u_prepared::return#0 ]
Added variable mulf_init::$7 to zero page equivalence class [ mulf_init::$7 ]
Added variable mulf_init::$10 to zero page equivalence class [ mulf_init::$10 ]
Added variable mulf_init::$11 to zero page equivalence class [ mulf_init::$11 ]
Complete equivalence classes
[ anim::angle#6 anim::angle#1 ]
[ anim::i#10 anim::i#1 ]
[ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
[ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
[ init::i#2 init::i#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#3 ]
[ anim::x#0 ]
[ anim::y#0 ]
[ anim::$4 ]
[ anim::xr#0 ]
[ anim::$6 ]
[ anim::yr#0 ]
[ anim::$9 ]
[ anim::$10 ]
[ anim::xr#1 ]
[ anim::$11 ]
[ anim::$12 ]
[ anim::yr#1 ]
[ anim::$15 ]
[ anim::xpos#0 ]
[ anim::$18 ]
[ anim::$22 ]
[ anim::ypos#0 ]
[ anim::i2#0 ]
[ anim::$25 ]
[ mulf8u_prepared::b#0 ]
[ mulf8u_prepared::return#2 ]
[ mulf8s_prepared::$8 ]
[ mulf8s_prepared::$15 ]
[ mulf8s_prepared::$12 ]
[ mulf8s_prepared::$16 ]
[ mulf8u_prepared::return#0 ]
[ mulf_init::$7 ]
[ mulf_init::$10 ]
[ mulf_init::$11 ]
Allocated zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ]
Allocated zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ]
Allocated zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
Allocated zp ZP_BYTE:5 [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ]
Allocated zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
Allocated zp ZP_BYTE:8 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
Allocated zp ZP_BYTE:9 [ init::i#2 init::i#1 ]
Allocated zp ZP_BYTE:10 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp ZP_WORD:11 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp ZP_WORD:13 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp ZP_WORD:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp ZP_WORD:19 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp ZP_WORD:21 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ]
Allocated zp ZP_BYTE:24 [ anim::x#0 ]
Allocated zp ZP_BYTE:25 [ anim::y#0 ]
Allocated zp ZP_WORD:26 [ anim::$4 ]
Allocated zp ZP_WORD:28 [ anim::xr#0 ]
Allocated zp ZP_WORD:30 [ anim::$6 ]
Allocated zp ZP_WORD:32 [ anim::yr#0 ]
Allocated zp ZP_WORD:34 [ anim::$9 ]
Allocated zp ZP_WORD:36 [ anim::$10 ]
Allocated zp ZP_WORD:38 [ anim::xr#1 ]
Allocated zp ZP_WORD:40 [ anim::$11 ]
Allocated zp ZP_WORD:42 [ anim::$12 ]
Allocated zp ZP_WORD:44 [ anim::yr#1 ]
Allocated zp ZP_BYTE:46 [ anim::$15 ]
Allocated zp ZP_WORD:47 [ anim::xpos#0 ]
Allocated zp ZP_BYTE:49 [ anim::$18 ]
Allocated zp ZP_BYTE:50 [ anim::$22 ]
Allocated zp ZP_BYTE:51 [ anim::ypos#0 ]
Allocated zp ZP_BYTE:52 [ anim::i2#0 ]
Allocated zp ZP_BYTE:53 [ anim::$25 ]
Allocated zp ZP_BYTE:54 [ mulf8u_prepared::b#0 ]
Allocated zp ZP_WORD:55 [ mulf8u_prepared::return#2 ]
Allocated zp ZP_BYTE:57 [ mulf8s_prepared::$8 ]
Allocated zp ZP_BYTE:58 [ mulf8s_prepared::$15 ]
Allocated zp ZP_BYTE:59 [ mulf8s_prepared::$12 ]
Allocated zp ZP_BYTE:60 [ mulf8s_prepared::$16 ]
Allocated zp ZP_WORD:61 [ mulf8u_prepared::return#0 ]
Allocated zp ZP_BYTE:63 [ mulf_init::$7 ]
Allocated zp ZP_BYTE:64 [ mulf_init::$10 ]
Allocated zp ZP_BYTE:65 [ mulf_init::$11 ]

INITIAL ASM
  // File Comments
// 2D rotattion of 8 sprites 
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .label SCREEN = $400
  // A single sprite
  .label SPRITE = $3000
  .label SIN = COS+$40
  // @begin
bbegin:
  jmp b1
  // @1
b1:
  // kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
// sin(x) = cos(x+PI/2)
main: {
    // asm { sei  }
    sei
    // [5] call init 
    // [80] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
    // main::@1
  b1:
    // [7] call anim 
    // [9] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from_b1:
    jsr anim
    jmp breturn
    // main::@return
  breturn:
    // [8] return 
    rts
}
  // anim
anim: {
    .label _4 = $1a
    .label _6 = $1e
    .label _9 = $22
    .label _10 = $24
    .label _11 = $28
    .label _12 = $2a
    .label _15 = $2e
    .label _18 = $31
    .label _22 = $32
    .label _25 = $35
    .label x = $18
    .label y = $19
    .label xr = $1c
    .label yr = $20
    .label xr_1 = $26
    .label yr_1 = $2c
    .label xpos = $2f
    .label sprite_msb = 4
    .label ypos = $33
    .label i2 = $34
    .label i = 3
    .label angle = 2
    // [10] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
    // [10] phi (byte) anim::angle#6 = (byte) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta angle
    jmp b1
    // anim::@1
  b1:
    jmp b2
    // anim::@2
  b2:
    // [11] if(*((const byte*) RASTER#0)!=(byte) $ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    jmp b3
    // anim::@3
  b3:
    // [12] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [13] phi from anim::@3 to anim::@4 [phi:anim::@3->anim::@4]
  b4_from_b3:
    // [13] phi (byte) anim::sprite_msb#10 = (byte) 0 [phi:anim::@3->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta sprite_msb
    // [13] phi (byte) anim::i#10 = (byte) 0 [phi:anim::@3->anim::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b4
    // [13] phi from anim::@5 to anim::@4 [phi:anim::@5->anim::@4]
  b4_from_b5:
    // [13] phi (byte) anim::sprite_msb#10 = (byte) anim::sprite_msb#5 [phi:anim::@5->anim::@4#0] -- register_copy 
    // [13] phi (byte) anim::i#10 = (byte) anim::i#1 [phi:anim::@5->anim::@4#1] -- register_copy 
    jmp b4
    // anim::@4
  b4:
    // [14] (signed byte) anim::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta x
    // [15] (signed byte) anim::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    // signed fixed[7.0]
    ldy i
    lda ys,y
    sta y
    jmp mulf8s_prepare1
    // anim::mulf8s_prepare1
  mulf8s_prepare1:
    // [16] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte[$140]) COS#0 + (byte) anim::angle#6) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy angle
    lda COS,y
    sta mulf8u_prepare.a
    // [17] call mulf8u_prepare 
    // [76] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
    // [76] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp b8
    // anim::@8
  b8:
    // [18] (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#0 -- vbsz1=vbsz2 
    lda x
    sta mulf8s_prepared.b
    // [19] call mulf8s_prepared 
    // [56] phi from anim::@8 to mulf8s_prepared [phi:anim::@8->mulf8s_prepared]
  mulf8s_prepared_from_b8:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#0 [phi:anim::@8->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b10
    // anim::@10
  b10:
    // [20] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4 -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta _4
    lda mulf8s_prepared.m+1
    sta _4+1
    // [21] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _4
    asl
    sta xr
    lda _4+1
    rol
    sta xr+1
    // [22] (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#0 -- vbsz1=vbsz2 
    lda y
    sta mulf8s_prepared.b
    // [23] call mulf8s_prepared 
    // [56] phi from anim::@10 to mulf8s_prepared [phi:anim::@10->mulf8s_prepared]
  mulf8s_prepared_from_b10:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#1 [phi:anim::@10->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b11
    // anim::@11
  b11:
    // [24] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4 -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta _6
    lda mulf8s_prepared.m+1
    sta _6+1
    // [25] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _6
    asl
    sta yr
    lda _6+1
    rol
    sta yr+1
    jmp mulf8s_prepare2
    // anim::mulf8s_prepare2
  mulf8s_prepare2:
    // [26] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#6) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy angle
    lda SIN,y
    sta mulf8u_prepare.a
    // [27] call mulf8u_prepare 
    // [76] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare2:
    // [76] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp b9
    // anim::@9
  b9:
    // [28] (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#0 -- vbsz1=vbsz2 
    lda y
    sta mulf8s_prepared.b
    // [29] call mulf8s_prepared 
    // [56] phi from anim::@9 to mulf8s_prepared [phi:anim::@9->mulf8s_prepared]
  mulf8s_prepared_from_b9:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#2 [phi:anim::@9->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b12
    // anim::@12
  b12:
    // [30] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4 -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta _9
    lda mulf8s_prepared.m+1
    sta _9+1
    // [31] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _9
    asl
    sta _10
    lda _9+1
    rol
    sta _10+1
    // [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10 -- vwsz1=vwsz2_minus_vwsz3 
    lda xr
    sec
    sbc _10
    sta xr_1
    lda xr+1
    sbc _10+1
    sta xr_1+1
    // [33] (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#0 -- vbsz1=vbsz2 
    lda x
    sta mulf8s_prepared.b
    // [34] call mulf8s_prepared 
    // [56] phi from anim::@12 to mulf8s_prepared [phi:anim::@12->mulf8s_prepared]
  mulf8s_prepared_from_b12:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#3 [phi:anim::@12->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b13
    // anim::@13
  b13:
    // [35] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4 -- vwsz1=vwsz2 
    lda mulf8s_prepared.m
    sta _11
    lda mulf8s_prepared.m+1
    sta _11+1
    // [36] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _11
    asl
    sta _12
    lda _11+1
    rol
    sta _12+1
    // [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12 -- vwsz1=vwsz2_plus_vwsz3 
    // signed fixed[8.8]
    lda yr
    clc
    adc _12
    sta yr_1
    lda yr+1
    adc _12+1
    sta yr_1+1
    // [38] (byte~) anim::$15 ← > (signed word) anim::xr#1 -- vbuz1=_hi_vwsz2 
    lda xr_1+1
    sta _15
    // [39] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$15 + (signed byte) $18+(signed word) $95 -- vwsz1=vbsz2_plus_vwsc1 
    lda _15
    tax
    clc
    adc #<$18+$95
    sta xpos
    txa
    ora #$7f
    bmi !+
    lda #0
  !:
    adc #>$18+$95
    sta xpos+1
    // [40] (byte) anim::sprite_msb#1 ← (byte) anim::sprite_msb#10 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr sprite_msb
    // [41] (byte~) anim::$18 ← > (signed word) anim::xpos#0 -- vbuz1=_hi_vwsz2 
    lda xpos+1
    sta _18
    // [42] if((byte~) anim::$18==(byte) 0) goto anim::@5 -- vbuz1_eq_0_then_la1 
    lda _18
    cmp #0
    beq b5_from_b13
    jmp b6
    // anim::@6
  b6:
    // [43] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80 -- vbuz1=vbuz1_bor_vbuc1 
    lda #$80
    ora sprite_msb
    sta sprite_msb
    // [44] phi from anim::@13 anim::@6 to anim::@5 [phi:anim::@13/anim::@6->anim::@5]
  b5_from_b13:
  b5_from_b6:
    // [44] phi (byte) anim::sprite_msb#5 = (byte) anim::sprite_msb#1 [phi:anim::@13/anim::@6->anim::@5#0] -- register_copy 
    jmp b5
    // anim::@5
  b5:
    // [45] (byte~) anim::$22 ← > (signed word) anim::yr#1 -- vbuz1=_hi_vwsz2 
    lda yr_1+1
    sta _22
    // [46] (byte) anim::ypos#0 ← (byte~) anim::$22 + (byte) $59+(byte) $33 -- vbuz1=vbuz2_plus_vbuc1 
    lax _22
    axs #-[$59+$33]
    stx ypos
    // [47] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta i2
    // [48] (byte~) anim::$25 ← < (signed word) anim::xpos#0 -- vbuz1=_lo_vwsz2 
    lda xpos
    sta _25
    // [49] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte~) anim::$25 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _25
    ldy i2
    sta SPRITES_XPOS,y
    // [50] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda ypos
    ldy i2
    sta SPRITES_YPOS,y
    // [51] (byte) anim::i#1 ← ++ (byte) anim::i#10 -- vbuz1=_inc_vbuz1 
    inc i
    // [52] if((byte) anim::i#1!=(byte) 8) goto anim::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i
    bne b4_from_b5
    jmp b7
    // anim::@7
  b7:
    // [53] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::sprite_msb#5 -- _deref_pbuc1=vbuz1 
    lda sprite_msb
    sta SPRITES_XMSB
    // [54] (byte) anim::angle#1 ← ++ (byte) anim::angle#6 -- vbuz1=_inc_vbuz1 
    inc angle
    // [55] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
    // [10] phi from anim::@7 to anim::@1 [phi:anim::@7->anim::@1]
  b1_from_b7:
    // [10] phi (byte) anim::angle#6 = (byte) anim::angle#1 [phi:anim::@7->anim::@1#0] -- register_copy 
    jmp b1
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned byte to a word result
// The prepared number is set by calling mulf8s_prepare(byte a)
// mulf8s_prepared(signed byte zeropage(5) b)
mulf8s_prepared: {
    .label memA = $fd
    .label _8 = $39
    .label _12 = $3b
    .label _15 = $3a
    .label _16 = $3c
    .label m = 6
    .label b = 5
    // [57] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#4 -- vbuz1=vbuz2 
    lda b
    sta mulf8u_prepared.b
    // [58] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [59] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 -- vwuz1=vwuz2 
    lda mulf8u_prepared.return
    sta mulf8u_prepared.return_2
    lda mulf8u_prepared.return+1
    sta mulf8u_prepared.return_2+1
    jmp b5
    // mulf8s_prepared::@5
  b5:
    // [60] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 -- vwuz1=vwuz2 
    lda mulf8u_prepared.return_2
    sta m
    lda mulf8u_prepared.return_2+1
    sta m+1
    // [61] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl b1_from_b5
    jmp b3
    // mulf8s_prepared::@3
  b3:
    // [62] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0 -- vbuz1=_hi_vwuz2 
    lda m+1
    sta _8
    // [63] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#4 -- vbuz1=vbuz2_minus_vbuz3 
    lda _8
    sec
    sbc b
    sta _15
    // [64] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 -- vwuz1=vwuz1_sethi_vbuz2 
    lda _15
    sta m+1
    // [65] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
  b1_from_b3:
  b1_from_b5:
    // [65] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    jmp b1
    // mulf8s_prepared::@1
  b1:
    // [66] if((signed byte) mulf8s_prepared::b#4>=(signed byte) 0) goto mulf8s_prepared::@2 -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b2_from_b1
    jmp b4
    // mulf8s_prepared::@4
  b4:
    // [67] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5 -- vbuz1=_hi_vwuz2 
    lda m+1
    sta _12
    // [68] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) -- vbuz1=vbuz2_minus__deref_pbuc1 
    lda _12
    sec
    sbc memA
    sta _16
    // [69] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 -- vwuz1=vwuz1_sethi_vbuz2 
    lda _16
    sta m+1
    // [70] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  b2_from_b1:
  b2_from_b4:
    // [70] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp b2
    // mulf8s_prepared::@2
  b2:
    jmp breturn
    // mulf8s_prepared::@return
  breturn:
    // [71] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned byte to a word result
// The prepared number is set by calling mulf8u_prepare(byte a)
// mulf8u_prepared(byte zeropage($36) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $3d
    .label b = $36
    .label return_2 = $37
    // [72] *((const byte*) mulf8u_prepared::memB#0) ← (byte) mulf8u_prepared::b#0 -- _deref_pbuc1=vbuz1 
    lda b
    sta memB
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // [74] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta return
    lda memB
    sta return+1
    jmp breturn
    // mulf8u_prepared::@return
  breturn:
    // [75] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned byte to a word result
// mulf8u_prepare(byte zeropage(8) a)
mulf8u_prepare: {
    .label memA = $fd
    .label a = 8
    // [77] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 -- _deref_pbuc1=vbuz1 
    lda a
    sta memA
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp breturn
    // mulf8u_prepare::@return
  breturn:
    // [79] return 
    rts
}
  // init
init: {
    .label sprites_ptr = SCREEN+$3f8
    .label i = 9
    // [81] call mulf_init 
    // [89] phi from init to mulf_init [phi:init->mulf_init]
  mulf_init_from_init:
    jsr mulf_init
    jmp b2
    // init::@2
  b2:
    // [82] *((const byte*) SPRITES_ENABLE#0) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
    // [83] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
  b1_from_b2:
    // [83] phi (byte) init::i#2 = (byte) 0 [phi:init::@2->init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [83] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
    // [83] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp b1
    // init::@1
  b1:
    // [84] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE#0/(byte) $40 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #SPRITE/$40
    ldy i
    sta sprites_ptr,y
    // [85] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #GREEN
    ldy i
    sta SPRITES_COLS,y
    // [86] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [87] if((byte) init::i#1!=(byte) 8) goto init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i
    bne b1_from_b1
    jmp breturn
    // init::@return
  breturn:
    // [88] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label _7 = $3f
    .label _10 = $40
    .label _11 = $41
    .label c = $a
    .label sqr1_hi = $d
    .label sqr = $10
    .label sqr1_lo = $b
    .label x_2 = $f
    .label sqr2_hi = $15
    .label x_255 = $12
    .label sqr2_lo = $13
    .label dir = $17
    // [90] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
    // [90] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
    // [90] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[$200]) mulf_sqr1_hi#0+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
    // [90] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[$200]) mulf_sqr1_lo#0+(byte) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
    // [90] phi (word) mulf_init::sqr#4 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
    // [90] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b1
    // [90] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  b1_from_b2:
    // [90] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
    // [90] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
    // [90] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
    // [90] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
    // [90] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    jmp b1
    // mulf_init::@1
  b1:
    // [91] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc c
    // [92] (byte~) mulf_init::$7 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and c
    sta _7
    // [93] if((byte~) mulf_init::$7!=(byte) 0) goto mulf_init::@2 -- vbuz1_neq_0_then_la1 
    lda _7
    cmp #0
    bne b2_from_b1
    jmp b3
    // mulf_init::@3
  b3:
    // [94] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc x_2
    // [95] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
    // [96] phi from mulf_init::@1 mulf_init::@3 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2]
  b2_from_b1:
  b2_from_b3:
    // [96] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2#0] -- register_copy 
    // [96] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2#1] -- register_copy 
    jmp b2
    // mulf_init::@2
  b2:
    // [97] (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3 -- vbuz1=_lo_vwuz2 
    lda sqr
    sta _10
    // [98] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10 -- _deref_pbuz1=vbuz2 
    lda _10
    ldy #0
    sta (sqr1_lo),y
    // [99] (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3 -- vbuz1=_hi_vwuz2 
    lda sqr+1
    sta _11
    // [100] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11 -- _deref_pbuz1=vbuz2 
    lda _11
    ldy #0
    sta (sqr1_hi),y
    // [101] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
    // [102] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
    // [103] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
    // [104] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word) $200) goto mulf_init::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1_from_b2
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1_from_b2
    // [105] phi from mulf_init::@2 to mulf_init::@4 [phi:mulf_init::@2->mulf_init::@4]
  b4_from_b2:
    // [105] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@2->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
    // [105] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[$200]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@4#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
    // [105] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[$200]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@4#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
    // [105] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@2->mulf_init::@4#3] -- vbuz1=vbuc1 
    lda #-1
    sta x_255
    jmp b4
    // [105] phi from mulf_init::@5 to mulf_init::@4 [phi:mulf_init::@5->mulf_init::@4]
  b4_from_b5:
    // [105] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@5->mulf_init::@4#0] -- register_copy 
    // [105] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@5->mulf_init::@4#1] -- register_copy 
    // [105] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@5->mulf_init::@4#2] -- register_copy 
    // [105] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@5->mulf_init::@4#3] -- register_copy 
    jmp b4
    // mulf_init::@4
  b4:
    // [106] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy x_255
    lda mulf_sqr1_lo,y
    ldy #0
    sta (sqr2_lo),y
    // [107] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy x_255
    lda mulf_sqr1_hi,y
    ldy #0
    sta (sqr2_hi),y
    // [108] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
    // [109] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda x_255
    clc
    adc dir
    sta x_255
    // [110] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@7 -- vbuz1_neq_0_then_la1 
    lda x_255
    cmp #0
    bne b7_from_b4
    // [112] phi from mulf_init::@4 to mulf_init::@5 [phi:mulf_init::@4->mulf_init::@5]
  b5_from_b4:
    // [112] phi (byte) mulf_init::dir#3 = (byte) 1 [phi:mulf_init::@4->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    jmp b5
    // [111] phi from mulf_init::@4 to mulf_init::@7 [phi:mulf_init::@4->mulf_init::@7]
  b7_from_b4:
    jmp b7
    // mulf_init::@7
  b7:
    // [112] phi from mulf_init::@7 to mulf_init::@5 [phi:mulf_init::@7->mulf_init::@5]
  b5_from_b7:
    // [112] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@7->mulf_init::@5#0] -- register_copy 
    jmp b5
    // mulf_init::@5
  b5:
    // [113] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
    // [114] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) goto mulf_init::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b4_from_b5
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b4_from_b5
    jmp b6
    // mulf_init::@6
  b6:
    // [115] *((const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [116] *((const byte[$200]) mulf_sqr2_hi#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp breturn
    // mulf_init::@return
  breturn:
    // [117] return 
    rts
}
  // File Data
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // Sine and Cosine tables  
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
COS:
{
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

  // Positions to rotate
  xs: .byte -$46, -$46, -$46, 0, 0, $46, $46, $46
  ys: .byte -$46, 0, $46, -$46, $46, -$46, 0, $46
.pc = SPRITE "SPRITE"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:50 [ anim::$22 ] has ALU potential.
Statement [11] if(*((const byte*) RASTER#0)!=(byte) $ff) goto anim::@2 [ anim::angle#6 ] ( main:2::anim:7 [ anim::angle#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ]
Statement [20] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ anim::x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ anim::y#0 ]
Statement [21] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ) always clobbers reg byte a 
Statement [24] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ) always clobbers reg byte a 
Statement [25] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ) always clobbers reg byte a 
Statement [30] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ) always clobbers reg byte a 
Statement [31] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ) always clobbers reg byte a 
Statement [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ) always clobbers reg byte a 
Statement [35] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ) always clobbers reg byte a 
Statement [36] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ) always clobbers reg byte a 
Statement [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ) always clobbers reg byte a 
Statement [38] (byte~) anim::$15 ← > (signed word) anim::xr#1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::$15 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::$15 ] ) always clobbers reg byte a 
Statement [39] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$15 + (signed byte) $18+(signed word) $95 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
Statement [41] (byte~) anim::$18 ← > (signed word) anim::xpos#0 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#1 anim::$18 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#1 anim::$18 ] ) always clobbers reg byte a 
Statement [43] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ) always clobbers reg byte a 
Statement [47] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ anim::ypos#0 ]
Statement [48] (byte~) anim::$25 ← < (signed word) anim::xpos#0 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::ypos#0 anim::i2#0 anim::$25 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::ypos#0 anim::i2#0 anim::$25 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:52 [ anim::i2#0 ]
Statement [50] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 ] ) always clobbers reg byte a 
Statement [55] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::angle#1 ] ( main:2::anim:7 [ anim::angle#1 ] ) always clobbers reg byte a 
Statement [59] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ]
Statement [60] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [61] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [62] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] ) always clobbers reg byte a 
Statement [63] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) always clobbers reg byte a 
Statement [67] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ) always clobbers reg byte a 
Statement [68] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:24 [ anim::x#0 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:25 [ anim::y#0 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:5 [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ]
Statement [74] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8u_prepared::return#0 ] ( main:2::anim:7::mulf8s_prepared:19::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:2::anim:7::mulf8s_prepared:23::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:2::anim:7::mulf8s_prepared:29::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:2::anim:7::mulf8s_prepared:34::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [82] *((const byte*) SPRITES_ENABLE#0) ← (byte) $ff [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [84] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE#0/(byte) $40 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ init::i#2 init::i#1 ]
Statement [85] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [97] (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$10 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [98] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [99] (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$11 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$11 ] ) always clobbers reg byte a 
Statement [100] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [102] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [104] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word) $200) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [106] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ]
Statement [107] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [109] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) always clobbers reg byte a 
Statement [114] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) goto mulf_init::@4 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:2::init:5::mulf_init:81 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) always clobbers reg byte a 
Statement [115] *((const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word) $100) [ ] ( main:2::init:5::mulf_init:81 [ ] ) always clobbers reg byte a 
Statement [116] *((const byte[$200]) mulf_sqr2_hi#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word) $100) [ ] ( main:2::init:5::mulf_init:81 [ ] ) always clobbers reg byte a 
Statement [11] if(*((const byte*) RASTER#0)!=(byte) $ff) goto anim::@2 [ anim::angle#6 ] ( main:2::anim:7 [ anim::angle#6 ] ) always clobbers reg byte a 
Statement [20] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ) always clobbers reg byte a 
Statement [21] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ) always clobbers reg byte a 
Statement [24] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ) always clobbers reg byte a 
Statement [25] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ) always clobbers reg byte a 
Statement [30] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ) always clobbers reg byte a 
Statement [31] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ) always clobbers reg byte a 
Statement [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ) always clobbers reg byte a 
Statement [35] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ) always clobbers reg byte a 
Statement [36] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ) always clobbers reg byte a 
Statement [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ) always clobbers reg byte a 
Statement [38] (byte~) anim::$15 ← > (signed word) anim::xr#1 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::$15 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::$15 ] ) always clobbers reg byte a 
Statement [39] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$15 + (signed byte) $18+(signed word) $95 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ) always clobbers reg byte a reg byte x 
Statement [41] (byte~) anim::$18 ← > (signed word) anim::xpos#0 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#1 anim::$18 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#1 anim::$18 ] ) always clobbers reg byte a 
Statement [43] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ) always clobbers reg byte a 
Statement [47] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ) always clobbers reg byte a 
Statement [48] (byte~) anim::$25 ← < (signed word) anim::xpos#0 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::ypos#0 anim::i2#0 anim::$25 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 anim::ypos#0 anim::i2#0 anim::$25 ] ) always clobbers reg byte a 
Statement [50] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 ] ( main:2::anim:7 [ anim::angle#6 anim::i#10 anim::sprite_msb#5 ] ) always clobbers reg byte a 
Statement [55] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::angle#1 ] ( main:2::anim:7 [ anim::angle#1 ] ) always clobbers reg byte a 
Statement [59] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ) always clobbers reg byte a 
Statement [60] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [61] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ) always clobbers reg byte a 
Statement [62] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$8 ] ) always clobbers reg byte a 
Statement [63] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$15 ] ) always clobbers reg byte a 
Statement [67] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5 [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ) always clobbers reg byte a 
Statement [68] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) [ mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ( main:2::anim:7::mulf8s_prepared:19 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:2::anim:7::mulf8s_prepared:23 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:2::anim:7::mulf8s_prepared:29 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] main:2::anim:7::mulf8s_prepared:34 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$16 ] ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [74] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) [ mulf8u_prepared::return#0 ] ( main:2::anim:7::mulf8s_prepared:19::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:2::anim:7::mulf8s_prepared:23::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:2::anim:7::mulf8s_prepared:29::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] main:2::anim:7::mulf8s_prepared:34::mulf8u_prepared:58 [ anim::angle#6 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [82] *((const byte*) SPRITES_ENABLE#0) ← (byte) $ff [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [84] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE#0/(byte) $40 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [85] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [92] (byte~) mulf_init::$7 ← (byte) mulf_init::c#1 & (byte) 1 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$7 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr#4 mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$7 ] ) always clobbers reg byte a 
Statement [97] (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$10 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$10 ] ) always clobbers reg byte a 
Statement [98] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [99] (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$11 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 mulf_init::$11 ] ) always clobbers reg byte a 
Statement [100] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ) always clobbers reg byte y 
Statement [102] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [104] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word) $200) goto mulf_init::@1 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_lo#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ) always clobbers reg byte a 
Statement [106] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [107] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( main:2::init:5::mulf_init:81 [ mulf_init::x_255#2 mulf_init::sqr2_lo#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ) always clobbers reg byte a reg byte y 
Statement [109] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( main:2::init:5::mulf_init:81 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ) always clobbers reg byte a 
Statement [114] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) goto mulf_init::@4 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ( main:2::init:5::mulf_init:81 [ mulf_init::x_255#1 mulf_init::sqr2_lo#1 mulf_init::sqr2_hi#1 mulf_init::dir#3 ] ) always clobbers reg byte a 
Statement [115] *((const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word) $100) [ ] ( main:2::init:5::mulf_init:81 [ ] ) always clobbers reg byte a 
Statement [116] *((const byte[$200]) mulf_sqr2_hi#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word) $100) [ ] ( main:2::init:5::mulf_init:81 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ] : zp ZP_BYTE:2 , reg byte y , 
Potential registers zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ] : zp ZP_BYTE:3 , reg byte y , 
Potential registers zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ] : zp ZP_BYTE:4 , reg byte y , 
Potential registers zp ZP_BYTE:5 [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ] : zp ZP_BYTE:5 , reg byte y , 
Potential registers zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_BYTE:8 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ init::i#2 init::i#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ mulf_init::c#2 mulf_init::c#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_WORD:11 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp ZP_BYTE:15 , reg byte x , 
Potential registers zp ZP_WORD:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_WORD:19 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_WORD:21 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ] : zp ZP_BYTE:23 , reg byte x , 
Potential registers zp ZP_BYTE:24 [ anim::x#0 ] : zp ZP_BYTE:24 , reg byte y , 
Potential registers zp ZP_BYTE:25 [ anim::y#0 ] : zp ZP_BYTE:25 , reg byte y , 
Potential registers zp ZP_WORD:26 [ anim::$4 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ anim::xr#0 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_WORD:30 [ anim::$6 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_WORD:32 [ anim::yr#0 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_WORD:34 [ anim::$9 ] : zp ZP_WORD:34 , 
Potential registers zp ZP_WORD:36 [ anim::$10 ] : zp ZP_WORD:36 , 
Potential registers zp ZP_WORD:38 [ anim::xr#1 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_WORD:40 [ anim::$11 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ anim::$12 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_WORD:44 [ anim::yr#1 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_BYTE:46 [ anim::$15 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:47 [ anim::xpos#0 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_BYTE:49 [ anim::$18 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ anim::$22 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:51 [ anim::ypos#0 ] : zp ZP_BYTE:51 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ anim::i2#0 ] : zp ZP_BYTE:52 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ anim::$25 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ mulf8u_prepared::b#0 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:55 [ mulf8u_prepared::return#2 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_BYTE:57 [ mulf8s_prepared::$8 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ mulf8s_prepared::$15 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ mulf8s_prepared::$12 ] : zp ZP_BYTE:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ mulf8s_prepared::$16 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:61 [ mulf8u_prepared::return#0 ] : zp ZP_WORD:61 , 
Potential registers zp ZP_BYTE:63 [ mulf_init::$7 ] : zp ZP_BYTE:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:64 [ mulf_init::$10 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ mulf_init::$11 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [anim] 345.37: zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ] 202: zp ZP_WORD:26 [ anim::$4 ] 202: zp ZP_WORD:30 [ anim::$6 ] 202: zp ZP_WORD:34 [ anim::$9 ] 202: zp ZP_WORD:36 [ anim::$10 ] 202: zp ZP_WORD:40 [ anim::$11 ] 202: zp ZP_WORD:42 [ anim::$12 ] 202: zp ZP_BYTE:49 [ anim::$18 ] 202: zp ZP_BYTE:50 [ anim::$22 ] 202: zp ZP_BYTE:53 [ anim::$25 ] 164.79: zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ] 101: zp ZP_BYTE:46 [ anim::$15 ] 101: zp ZP_BYTE:52 [ anim::i2#0 ] 50.5: zp ZP_BYTE:51 [ anim::ypos#0 ] 33.67: zp ZP_WORD:38 [ anim::xr#1 ] 33.67: zp ZP_WORD:47 [ anim::xpos#0 ] 25.25: zp ZP_WORD:44 [ anim::yr#1 ] 23.31: zp ZP_BYTE:25 [ anim::y#0 ] 18.36: zp ZP_WORD:28 [ anim::xr#0 ] 16.83: zp ZP_WORD:32 [ anim::yr#0 ] 15.95: zp ZP_BYTE:24 [ anim::x#0 ] 11.5: zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ] 
Uplift Scope [mulf8s_prepared] 848.6: zp ZP_BYTE:5 [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ] 13.17: zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] 4: zp ZP_BYTE:57 [ mulf8s_prepared::$8 ] 4: zp ZP_BYTE:58 [ mulf8s_prepared::$15 ] 4: zp ZP_BYTE:59 [ mulf8s_prepared::$12 ] 4: zp ZP_BYTE:60 [ mulf8s_prepared::$16 ] 
Uplift Scope [mulf8u_prepare] 608: zp ZP_BYTE:8 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] 
Uplift Scope [mulf_init] 45.1: zp ZP_WORD:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 24.36: zp ZP_BYTE:10 [ mulf_init::c#2 mulf_init::c#1 ] 24.14: zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 22: zp ZP_BYTE:63 [ mulf_init::$7 ] 22: zp ZP_BYTE:64 [ mulf_init::$10 ] 22: zp ZP_BYTE:65 [ mulf_init::$11 ] 20.62: zp ZP_WORD:19 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 19.04: zp ZP_WORD:11 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 16.5: zp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 14.14: zp ZP_WORD:21 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 12.05: zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ] 8.5: zp ZP_WORD:13 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [init] 31.17: zp ZP_BYTE:9 [ init::i#2 init::i#1 ] 
Uplift Scope [mulf8u_prepared] 4: zp ZP_BYTE:54 [ mulf8u_prepared::b#0 ] 4: zp ZP_WORD:55 [ mulf8u_prepared::return#2 ] 1.33: zp ZP_WORD:61 [ mulf8u_prepared::return#0 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [anim] best 43569 combination zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ] zp ZP_WORD:26 [ anim::$4 ] zp ZP_WORD:30 [ anim::$6 ] zp ZP_WORD:34 [ anim::$9 ] zp ZP_WORD:36 [ anim::$10 ] zp ZP_WORD:40 [ anim::$11 ] zp ZP_WORD:42 [ anim::$12 ] reg byte a [ anim::$18 ] reg byte a [ anim::$22 ] reg byte a [ anim::$25 ] zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ] zp ZP_BYTE:46 [ anim::$15 ] zp ZP_BYTE:52 [ anim::i2#0 ] zp ZP_BYTE:51 [ anim::ypos#0 ] zp ZP_WORD:38 [ anim::xr#1 ] zp ZP_WORD:47 [ anim::xpos#0 ] zp ZP_WORD:44 [ anim::yr#1 ] zp ZP_BYTE:25 [ anim::y#0 ] zp ZP_WORD:28 [ anim::xr#0 ] zp ZP_WORD:32 [ anim::yr#0 ] zp ZP_BYTE:24 [ anim::x#0 ] zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ] 
Limited combination testing to 100 combinations of 92160 possible.
Uplifting [mulf8s_prepared] best 42348 combination reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ] zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] reg byte a [ mulf8s_prepared::$8 ] reg byte a [ mulf8s_prepared::$15 ] reg byte a [ mulf8s_prepared::$12 ] zp ZP_BYTE:60 [ mulf8s_prepared::$16 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [mulf8u_prepare] best 41745 combination reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] 
Uplifting [mulf_init] best 41495 combination zp ZP_WORD:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] reg byte x [ mulf_init::c#2 mulf_init::c#1 ] zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$7 ] reg byte a [ mulf_init::$10 ] reg byte a [ mulf_init::$11 ] zp ZP_WORD:19 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp ZP_WORD:11 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] zp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp ZP_WORD:21 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ] zp ZP_WORD:13 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [init] best 41345 combination reg byte x [ init::i#2 init::i#1 ] 
Uplifting [mulf8u_prepared] best 41341 combination reg byte a [ mulf8u_prepared::b#0 ] zp ZP_WORD:55 [ mulf8u_prepared::return#2 ] zp ZP_WORD:61 [ mulf8u_prepared::return#0 ] 
Uplifting [main] best 41341 combination 
Uplifting [] best 41341 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
Uplifting [anim] best 41341 combination zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ anim::i#10 anim::i#1 ]
Uplifting [anim] best 41341 combination zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ anim::$15 ]
Uplifting [anim] best 40741 combination reg byte a [ anim::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:52 [ anim::i2#0 ]
Uplifting [anim] best 40041 combination reg byte x [ anim::i2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ anim::ypos#0 ]
Uplifting [anim] best 39841 combination reg byte y [ anim::ypos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Uplifting [mulf_init] best 39841 combination zp ZP_BYTE:15 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ anim::y#0 ]
Uplifting [anim] best 39841 combination zp ZP_BYTE:25 [ anim::y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 39701 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ anim::x#0 ]
Uplifting [anim] best 39701 combination zp ZP_BYTE:24 [ anim::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ]
Uplifting [mulf_init] best 39701 combination zp ZP_BYTE:23 [ mulf_init::dir#2 mulf_init::dir#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ]
Uplifting [anim] best 39701 combination zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:60 [ mulf8s_prepared::$16 ]
Uplifting [mulf8s_prepared] best 39695 combination reg byte a [ mulf8s_prepared::$16 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] ] with [ zp ZP_WORD:26 [ anim::$4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 ] ] with [ zp ZP_WORD:30 [ anim::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 ] ] with [ zp ZP_WORD:34 [ anim::$9 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 ] ] with [ zp ZP_WORD:40 [ anim::$11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 ] ] with [ zp ZP_WORD:55 [ mulf8u_prepared::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:28 [ anim::xr#0 ] ] with [ zp ZP_WORD:38 [ anim::xr#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:32 [ anim::yr#0 ] ] with [ zp ZP_WORD:44 [ anim::yr#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 ] ] with [ zp ZP_WORD:36 [ anim::$10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 ] ] with [ zp ZP_WORD:42 [ anim::$12 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:6 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 ] ] with [ zp ZP_WORD:61 [ mulf8u_prepared::return#0 ] ] - score: 1
Allocated (was zp ZP_WORD:6) zp ZP_WORD:5 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 ]
Allocated (was zp ZP_WORD:11) zp ZP_WORD:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated (was zp ZP_BYTE:15) zp ZP_BYTE:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated (was zp ZP_WORD:16) zp ZP_WORD:12 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated (was zp ZP_WORD:19) zp ZP_WORD:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated (was zp ZP_WORD:21) zp ZP_WORD:16 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated (was zp ZP_BYTE:23) zp ZP_BYTE:18 [ mulf_init::dir#2 mulf_init::dir#3 ]
Allocated (was zp ZP_BYTE:24) zp ZP_BYTE:19 [ anim::x#0 ]
Allocated (was zp ZP_BYTE:25) zp ZP_BYTE:20 [ anim::y#0 ]
Allocated (was zp ZP_WORD:28) zp ZP_WORD:21 [ anim::xr#0 anim::xr#1 ]
Allocated (was zp ZP_WORD:32) zp ZP_WORD:23 [ anim::yr#0 anim::yr#1 ]
Allocated (was zp ZP_WORD:47) zp ZP_WORD:25 [ anim::xpos#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// 2D rotattion of 8 sprites 
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .label SCREEN = $400
  // A single sprite
  .label SPRITE = $3000
  .label SIN = COS+$40
  // @begin
bbegin:
  jmp b1
  // @1
b1:
  // kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
// sin(x) = cos(x+PI/2)
main: {
    // asm { sei  }
    sei
    // [5] call init 
    // [80] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
    // main::@1
  b1:
    // [7] call anim 
    // [9] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from_b1:
    jsr anim
    jmp breturn
    // main::@return
  breturn:
    // [8] return 
    rts
}
  // anim
anim: {
    .label _4 = 5
    .label _6 = 5
    .label _9 = 5
    .label _10 = 5
    .label _11 = 5
    .label _12 = 5
    .label x = $13
    .label y = $14
    .label xr = $15
    .label yr = $17
    .label xpos = $19
    .label sprite_msb = 4
    .label i = 3
    .label angle = 2
    // [10] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
    // [10] phi (byte) anim::angle#6 = (byte) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta angle
    jmp b1
    // anim::@1
  b1:
    jmp b2
    // anim::@2
  b2:
    // [11] if(*((const byte*) RASTER#0)!=(byte) $ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    jmp b3
    // anim::@3
  b3:
    // [12] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [13] phi from anim::@3 to anim::@4 [phi:anim::@3->anim::@4]
  b4_from_b3:
    // [13] phi (byte) anim::sprite_msb#10 = (byte) 0 [phi:anim::@3->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta sprite_msb
    // [13] phi (byte) anim::i#10 = (byte) 0 [phi:anim::@3->anim::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b4
    // [13] phi from anim::@5 to anim::@4 [phi:anim::@5->anim::@4]
  b4_from_b5:
    // [13] phi (byte) anim::sprite_msb#10 = (byte) anim::sprite_msb#5 [phi:anim::@5->anim::@4#0] -- register_copy 
    // [13] phi (byte) anim::i#10 = (byte) anim::i#1 [phi:anim::@5->anim::@4#1] -- register_copy 
    jmp b4
    // anim::@4
  b4:
    // [14] (signed byte) anim::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta x
    // [15] (signed byte) anim::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    // signed fixed[7.0]
    ldy i
    lda ys,y
    sta y
    jmp mulf8s_prepare1
    // anim::mulf8s_prepare1
  mulf8s_prepare1:
    // [16] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte[$140]) COS#0 + (byte) anim::angle#6) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy angle
    lda COS,y
    // [17] call mulf8u_prepare 
    // [76] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
    // [76] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp b8
    // anim::@8
  b8:
    // [18] (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#0 -- vbsyy=vbsz1 
    ldy x
    // [19] call mulf8s_prepared 
    // [56] phi from anim::@8 to mulf8s_prepared [phi:anim::@8->mulf8s_prepared]
  mulf8s_prepared_from_b8:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#0 [phi:anim::@8->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b10
    // anim::@10
  b10:
    // [20] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4
    // [21] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _4
    asl
    sta xr
    lda _4+1
    rol
    sta xr+1
    // [22] (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#0 -- vbsyy=vbsz1 
    ldy y
    // [23] call mulf8s_prepared 
    // [56] phi from anim::@10 to mulf8s_prepared [phi:anim::@10->mulf8s_prepared]
  mulf8s_prepared_from_b10:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#1 [phi:anim::@10->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b11
    // anim::@11
  b11:
    // [24] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4
    // [25] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _6
    asl
    sta yr
    lda _6+1
    rol
    sta yr+1
    jmp mulf8s_prepare2
    // anim::mulf8s_prepare2
  mulf8s_prepare2:
    // [26] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#6) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy angle
    lda SIN,y
    // [27] call mulf8u_prepare 
    // [76] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare2:
    // [76] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp b9
    // anim::@9
  b9:
    // [28] (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#0 -- vbsyy=vbsz1 
    ldy y
    // [29] call mulf8s_prepared 
    // [56] phi from anim::@9 to mulf8s_prepared [phi:anim::@9->mulf8s_prepared]
  mulf8s_prepared_from_b9:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#2 [phi:anim::@9->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b12
    // anim::@12
  b12:
    // [30] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4
    // [31] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _10
    rol _10+1
    // [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10 -- vwsz1=vwsz1_minus_vwsz2 
    lda xr
    sec
    sbc _10
    sta xr
    lda xr+1
    sbc _10+1
    sta xr+1
    // [33] (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#0 -- vbsyy=vbsz1 
    ldy x
    // [34] call mulf8s_prepared 
    // [56] phi from anim::@12 to mulf8s_prepared [phi:anim::@12->mulf8s_prepared]
  mulf8s_prepared_from_b12:
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#3 [phi:anim::@12->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp b13
    // anim::@13
  b13:
    // [35] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4
    // [36] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _12
    rol _12+1
    // [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12 -- vwsz1=vwsz1_plus_vwsz2 
    // signed fixed[8.8]
    lda yr
    clc
    adc _12
    sta yr
    lda yr+1
    adc _12+1
    sta yr+1
    // [38] (byte~) anim::$15 ← > (signed word) anim::xr#1 -- vbuaa=_hi_vwsz1 
    lda xr+1
    // [39] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$15 + (signed byte) $18+(signed word) $95 -- vwsz1=vbsaa_plus_vwsc1 
    tax
    clc
    adc #<$18+$95
    sta xpos
    txa
    ora #$7f
    bmi !+
    lda #0
  !:
    adc #>$18+$95
    sta xpos+1
    // [40] (byte) anim::sprite_msb#1 ← (byte) anim::sprite_msb#10 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr sprite_msb
    // [41] (byte~) anim::$18 ← > (signed word) anim::xpos#0 -- vbuaa=_hi_vwsz1 
    lda xpos+1
    // [42] if((byte~) anim::$18==(byte) 0) goto anim::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5_from_b13
    jmp b6
    // anim::@6
  b6:
    // [43] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80 -- vbuz1=vbuz1_bor_vbuc1 
    lda #$80
    ora sprite_msb
    sta sprite_msb
    // [44] phi from anim::@13 anim::@6 to anim::@5 [phi:anim::@13/anim::@6->anim::@5]
  b5_from_b13:
  b5_from_b6:
    // [44] phi (byte) anim::sprite_msb#5 = (byte) anim::sprite_msb#1 [phi:anim::@13/anim::@6->anim::@5#0] -- register_copy 
    jmp b5
    // anim::@5
  b5:
    // [45] (byte~) anim::$22 ← > (signed word) anim::yr#1 -- vbuaa=_hi_vwsz1 
    lda yr+1
    // [46] (byte) anim::ypos#0 ← (byte~) anim::$22 + (byte) $59+(byte) $33 -- vbuyy=vbuaa_plus_vbuc1 
    clc
    adc #$59+$33
    tay
    // [47] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
    // [48] (byte~) anim::$25 ← < (signed word) anim::xpos#0 -- vbuaa=_lo_vwsz1 
    lda xpos
    // [49] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte~) anim::$25 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
    // [50] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SPRITES_YPOS,x
    // [51] (byte) anim::i#1 ← ++ (byte) anim::i#10 -- vbuz1=_inc_vbuz1 
    inc i
    // [52] if((byte) anim::i#1!=(byte) 8) goto anim::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i
    bne b4_from_b5
    jmp b7
    // anim::@7
  b7:
    // [53] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::sprite_msb#5 -- _deref_pbuc1=vbuz1 
    lda sprite_msb
    sta SPRITES_XMSB
    // [54] (byte) anim::angle#1 ← ++ (byte) anim::angle#6 -- vbuz1=_inc_vbuz1 
    inc angle
    // [55] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
    // [10] phi from anim::@7 to anim::@1 [phi:anim::@7->anim::@1]
  b1_from_b7:
    // [10] phi (byte) anim::angle#6 = (byte) anim::angle#1 [phi:anim::@7->anim::@1#0] -- register_copy 
    jmp b1
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned byte to a word result
// The prepared number is set by calling mulf8s_prepare(byte a)
// mulf8s_prepared(signed byte register(Y) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = 5
    // [57] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#4 -- vbuaa=vbuyy 
    tya
    // [58] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [59] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
    jmp b5
    // mulf8s_prepared::@5
  b5:
    // [60] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
    // [61] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl b1_from_b5
    jmp b3
    // mulf8s_prepared::@3
  b3:
    // [62] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda m+1
    // [63] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#4 -- vbuaa=vbuaa_minus_vbuyy 
    sty $ff
    sec
    sbc $ff
    // [64] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
    // [65] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
  b1_from_b3:
  b1_from_b5:
    // [65] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    jmp b1
    // mulf8s_prepared::@1
  b1:
    // [66] if((signed byte) mulf8s_prepared::b#4>=(signed byte) 0) goto mulf8s_prepared::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl b2_from_b1
    jmp b4
    // mulf8s_prepared::@4
  b4:
    // [67] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda m+1
    // [68] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [69] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
    // [70] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  b2_from_b1:
  b2_from_b4:
    // [70] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp b2
    // mulf8s_prepared::@2
  b2:
    jmp breturn
    // mulf8s_prepared::@return
  breturn:
    // [71] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned byte to a word result
// The prepared number is set by calling mulf8u_prepare(byte a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = 5
    // [72] *((const byte*) mulf8u_prepared::memB#0) ← (byte) mulf8u_prepared::b#0 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // [74] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta return
    lda memB
    sta return+1
    jmp breturn
    // mulf8u_prepared::@return
  breturn:
    // [75] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned byte to a word result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // [77] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp breturn
    // mulf8u_prepare::@return
  breturn:
    // [79] return 
    rts
}
  // init
init: {
    .label sprites_ptr = SCREEN+$3f8
    // [81] call mulf_init 
    // [89] phi from init to mulf_init [phi:init->mulf_init]
  mulf_init_from_init:
    jsr mulf_init
    jmp b2
    // init::@2
  b2:
    // [82] *((const byte*) SPRITES_ENABLE#0) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
    // [83] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
  b1_from_b2:
    // [83] phi (byte) init::i#2 = (byte) 0 [phi:init::@2->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [83] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
    // [83] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp b1
    // init::@1
  b1:
    // [84] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE#0/(byte) $40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #SPRITE/$40
    sta sprites_ptr,x
    // [85] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
    // [86] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] if((byte) init::i#1!=(byte) 8) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b1
    jmp breturn
    // init::@return
  breturn:
    // [88] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label sqr1_hi = 9
    .label sqr = $c
    .label sqr1_lo = 7
    .label x_2 = $b
    .label sqr2_hi = $10
    .label sqr2_lo = $e
    .label dir = $12
    // [90] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
    // [90] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
    // [90] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[$200]) mulf_sqr1_hi#0+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
    // [90] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[$200]) mulf_sqr1_lo#0+(byte) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
    // [90] phi (word) mulf_init::sqr#4 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
    // [90] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [90] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
  b1_from_b2:
    // [90] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
    // [90] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
    // [90] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
    // [90] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
    // [90] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    jmp b1
    // mulf_init::@1
  b1:
    // [91] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [92] (byte~) mulf_init::$7 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [93] if((byte~) mulf_init::$7!=(byte) 0) goto mulf_init::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2_from_b1
    jmp b3
    // mulf_init::@3
  b3:
    // [94] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc x_2
    // [95] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
    // [96] phi from mulf_init::@1 mulf_init::@3 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2]
  b2_from_b1:
  b2_from_b3:
    // [96] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2#0] -- register_copy 
    // [96] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2#1] -- register_copy 
    jmp b2
    // mulf_init::@2
  b2:
    // [97] (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda sqr
    // [98] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // [99] (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda sqr+1
    // [100] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
    // [101] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
    // [102] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
    // [103] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
    // [104] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word) $200) goto mulf_init::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1_from_b2
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1_from_b2
    // [105] phi from mulf_init::@2 to mulf_init::@4 [phi:mulf_init::@2->mulf_init::@4]
  b4_from_b2:
    // [105] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@2->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
    // [105] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[$200]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@4#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
    // [105] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[$200]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@4#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
    // [105] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@2->mulf_init::@4#3] -- vbuxx=vbuc1 
    ldx #-1
    jmp b4
    // [105] phi from mulf_init::@5 to mulf_init::@4 [phi:mulf_init::@5->mulf_init::@4]
  b4_from_b5:
    // [105] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@5->mulf_init::@4#0] -- register_copy 
    // [105] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@5->mulf_init::@4#1] -- register_copy 
    // [105] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@5->mulf_init::@4#2] -- register_copy 
    // [105] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@5->mulf_init::@4#3] -- register_copy 
    jmp b4
    // mulf_init::@4
  b4:
    // [106] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // [107] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
    // [108] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
    // [109] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc dir
    tax
    // [110] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@7 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b7_from_b4
    // [112] phi from mulf_init::@4 to mulf_init::@5 [phi:mulf_init::@4->mulf_init::@5]
  b5_from_b4:
    // [112] phi (byte) mulf_init::dir#3 = (byte) 1 [phi:mulf_init::@4->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    jmp b5
    // [111] phi from mulf_init::@4 to mulf_init::@7 [phi:mulf_init::@4->mulf_init::@7]
  b7_from_b4:
    jmp b7
    // mulf_init::@7
  b7:
    // [112] phi from mulf_init::@7 to mulf_init::@5 [phi:mulf_init::@7->mulf_init::@5]
  b5_from_b7:
    // [112] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@7->mulf_init::@5#0] -- register_copy 
    jmp b5
    // mulf_init::@5
  b5:
    // [113] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
    // [114] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) goto mulf_init::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b4_from_b5
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b4_from_b5
    jmp b6
    // mulf_init::@6
  b6:
    // [115] *((const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [116] *((const byte[$200]) mulf_sqr2_hi#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp breturn
    // mulf_init::@return
  breturn:
    // [117] return 
    rts
}
  // File Data
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // Sine and Cosine tables  
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
COS:
{
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

  // Positions to rotate
  xs: .byte -$46, -$46, -$46, 0, 0, $46, $46, $46
  ys: .byte -$46, 0, $46, -$46, $46, -$46, 0, $46
.pc = SPRITE "SPRITE"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp mulf8s_prepare1
Removing instruction jmp b8
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp mulf8s_prepare2
Removing instruction jmp b9
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b6
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy i
Removing instruction lda xpos+1
Replacing instruction ldx memB with TAX
Removing instruction lda memA
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b5_from_b13 with b5
Replacing label b4_from_b5 with b4
Replacing label b1 with b2
Replacing label b1_from_b5 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b1 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Replacing label b7_from_b4 with b5
Replacing label b4_from_b5 with b4
Replacing label b4_from_b5 with b4
Removing instruction b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction anim_from_b1:
Removing instruction b1:
Removing instruction b4_from_b5:
Removing instruction b5_from_b13:
Removing instruction b5_from_b6:
Removing instruction b1_from_b3:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction breturn:
Removing instruction b1_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b4_from_b5:
Removing instruction b7_from_b4:
Removing instruction b7:
Removing instruction b5_from_b7:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction init_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_anim:
Removing instruction b3:
Removing instruction b4_from_b3:
Removing instruction mulf8s_prepare1:
Removing instruction mulf8u_prepare_from_mulf8s_prepare1:
Removing instruction b8:
Removing instruction mulf8s_prepared_from_b8:
Removing instruction b10:
Removing instruction mulf8s_prepared_from_b10:
Removing instruction b11:
Removing instruction mulf8s_prepare2:
Removing instruction mulf8u_prepare_from_mulf8s_prepare2:
Removing instruction b9:
Removing instruction mulf8s_prepared_from_b9:
Removing instruction b12:
Removing instruction mulf8s_prepared_from_b12:
Removing instruction b13:
Removing instruction b6:
Removing instruction b7:
Removing instruction b1_from_b7:
Removing instruction b5:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction mulf_init_from_init:
Removing instruction b2:
Removing instruction b1_from_b2:
Removing instruction breturn:
Removing instruction b1_from_mulf_init:
Removing instruction b3:
Removing instruction b4_from_b2:
Removing instruction b5_from_b4:
Removing instruction b6:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [134] bne b4 to beq

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte[$140]) COS
(const byte[$140]) COS#0 COS = kickasm {{ {
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte) 5
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte) $e
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte*) SIN
(const byte*) SIN#0 SIN = (const byte[$140]) COS#0+(byte) $40
(byte*) SPRITE
(const byte*) SPRITE#0 SPRITE = (byte*) 12288
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = (byte*) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = (byte*) 53269
(byte*) SPRITES_XMSB
(const byte*) SPRITES_XMSB#0 SPRITES_XMSB = (byte*) 53264
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = (byte*) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = (byte*) 53249
(void()) anim()
(signed word~) anim::$10 $10 zp ZP_WORD:5 202.0
(signed word~) anim::$11 $11 zp ZP_WORD:5 202.0
(signed word~) anim::$12 $12 zp ZP_WORD:5 202.0
(byte~) anim::$15 reg byte a 101.0
(byte~) anim::$18 reg byte a 202.0
(byte~) anim::$22 reg byte a 202.0
(byte~) anim::$25 reg byte a 202.0
(signed word~) anim::$4 $4 zp ZP_WORD:5 202.0
(signed word~) anim::$6 $6 zp ZP_WORD:5 202.0
(signed word~) anim::$9 $9 zp ZP_WORD:5 202.0
(label) anim::@1
(label) anim::@10
(label) anim::@11
(label) anim::@12
(label) anim::@13
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(byte) anim::angle
(byte) anim::angle#1 angle zp ZP_BYTE:2 11.0
(byte) anim::angle#6 angle zp ZP_BYTE:2 0.5
(signed byte) anim::cos_a
(byte) anim::i
(byte) anim::i#1 i zp ZP_BYTE:3 151.5
(byte) anim::i#10 i zp ZP_BYTE:3 13.289473684210527
(byte) anim::i2
(byte) anim::i2#0 reg byte x 101.0
(label) anim::mulf8s_prepare1
(byte~) anim::mulf8s_prepare1_$0
(signed byte) anim::mulf8s_prepare1_a
(label) anim::mulf8s_prepare2
(byte~) anim::mulf8s_prepare2_$0
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::sin_a
(byte) anim::sprite_msb
(byte) anim::sprite_msb#1 sprite_msb zp ZP_BYTE:4 101.0
(byte) anim::sprite_msb#10 sprite_msb zp ZP_BYTE:4 7.481481481481482
(byte) anim::sprite_msb#2 sprite_msb zp ZP_BYTE:4 202.0
(byte) anim::sprite_msb#5 sprite_msb zp ZP_BYTE:4 34.888888888888886
(signed byte) anim::x
(signed byte) anim::x#0 x zp ZP_BYTE:19 15.947368421052632
(signed word) anim::xpos
(signed word) anim::xpos#0 xpos zp ZP_WORD:25 33.666666666666664
(signed word) anim::xr
(signed word) anim::xr#0 xr zp ZP_WORD:21 18.363636363636363
(signed word) anim::xr#1 xr zp ZP_WORD:21 33.666666666666664
(signed byte) anim::y
(signed byte) anim::y#0 y zp ZP_BYTE:20 23.307692307692307
(byte) anim::ypos
(byte) anim::ypos#0 reg byte y 50.5
(signed word) anim::yr
(signed word) anim::yr#0 yr zp ZP_WORD:23 16.833333333333332
(signed word) anim::yr#1 yr zp ZP_WORD:23 25.25
(void()) init()
(label) init::@1
(label) init::@2
(label) init::@return
(byte) init::i
(byte) init::i#1 reg byte x 16.5
(byte) init::i#2 reg byte x 14.666666666666666
(byte*) init::sprites_ptr
(const byte*) init::sprites_ptr#0 sprites_ptr = (const byte*) SCREEN#0+(word) $3f8
(void()) main()
(label) main::@1
(label) main::@return
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$12 reg byte a 4.0
(byte~) mulf8s_prepared::$15 reg byte a 4.0
(byte~) mulf8s_prepared::$16 reg byte a 4.0
(byte~) mulf8s_prepared::$8 reg byte a 4.0
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@5
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0 reg byte y 202.0
(signed byte) mulf8s_prepared::b#1 reg byte y 202.0
(signed byte) mulf8s_prepared::b#2 reg byte y 202.0
(signed byte) mulf8s_prepared::b#3 reg byte y 202.0
(signed byte) mulf8s_prepared::b#4 reg byte y 40.6
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 m zp ZP_WORD:5 2.0
(word) mulf8s_prepared::m#1 m zp ZP_WORD:5 4.0
(word) mulf8s_prepared::m#2 m zp ZP_WORD:5 4.0
(word) mulf8s_prepared::m#4 m zp ZP_WORD:5 0.6666666666666666
(word) mulf8s_prepared::m#5 m zp ZP_WORD:5 2.5
(signed byte*) mulf8s_prepared::memA
(const signed byte*) mulf8s_prepared::memA#0 memA = (signed byte*) 253
(signed word) mulf8s_prepared::return
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#2 reg byte a 204.0
(byte~) mulf8u_prepare::a#3 reg byte a 202.0
(byte~) mulf8u_prepare::a#4 reg byte a 202.0
(byte*) mulf8u_prepare::memA
(const byte*) mulf8u_prepare::memA#0 memA = (byte*) 253
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0 reg byte a 4.0
(byte*) mulf8u_prepared::memB
(const byte*) mulf8u_prepared::memB#0 memB = (byte*) 255
(byte*) mulf8u_prepared::resL
(const byte*) mulf8u_prepared::resL#0 resL = (byte*) 254
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 return zp ZP_WORD:5 1.3333333333333333
(word) mulf8u_prepared::return#2 return zp ZP_WORD:5 4.0
(void()) mulf_init()
(byte~) mulf_init::$10 reg byte a 22.0
(byte~) mulf_init::$11 reg byte a 22.0
(byte~) mulf_init::$7 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 reg byte x 2.357142857142857
(byte) mulf_init::c#2 reg byte x 22.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp ZP_BYTE:18 4.714285714285714
(byte) mulf_init::dir#3 dir zp ZP_BYTE:18 7.333333333333333
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp ZP_WORD:12 7.333333333333333
(word) mulf_init::sqr#2 sqr zp ZP_WORD:12 22.0
(word) mulf_init::sqr#3 sqr zp ZP_WORD:12 9.166666666666666
(word) mulf_init::sqr#4 sqr zp ZP_WORD:12 6.6000000000000005
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp ZP_WORD:9 5.5
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp ZP_WORD:9 3.0
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp ZP_WORD:7 16.5
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp ZP_WORD:7 2.5384615384615383
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp ZP_WORD:16 3.142857142857143
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp ZP_WORD:16 11.0
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp ZP_WORD:14 16.5
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp ZP_WORD:14 4.125
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 x_2 zp ZP_BYTE:11 11.0
(byte) mulf_init::x_2#2 x_2 zp ZP_BYTE:11 4.888888888888889
(byte) mulf_init::x_2#3 x_2 zp ZP_BYTE:11 8.25
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 5.5
(byte) mulf_init::x_255#2 reg byte x 11.0
(byte[$200]) mulf_sqr1_hi
(const byte[$200]) mulf_sqr1_hi#0 mulf_sqr1_hi = { fill( $200, 0) }
(byte[$200]) mulf_sqr1_lo
(const byte[$200]) mulf_sqr1_lo#0 mulf_sqr1_lo = { fill( $200, 0) }
(byte[$200]) mulf_sqr2_hi
(const byte[$200]) mulf_sqr2_hi#0 mulf_sqr2_hi = { fill( $200, 0) }
(byte[$200]) mulf_sqr2_lo
(const byte[$200]) mulf_sqr2_lo#0 mulf_sqr2_lo = { fill( $200, 0) }
(signed byte[8]) xs
(const signed byte[8]) xs#0 xs = { (signed byte) -$46, (signed byte) -$46, (signed byte) -$46, (signed byte) 0, (signed byte) 0, (signed byte) $46, (signed byte) $46, (signed byte) $46 }
(signed byte[8]) ys
(const signed byte[8]) ys#0 ys = { (signed byte) -$46, (signed byte) 0, (signed byte) $46, (signed byte) -$46, (signed byte) $46, (signed byte) -$46, (signed byte) 0, (signed byte) $46 }

zp ZP_BYTE:2 [ anim::angle#6 anim::angle#1 ]
zp ZP_BYTE:3 [ anim::i#10 anim::i#1 ]
zp ZP_BYTE:4 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#2 anim::sprite_msb#1 ]
reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#0 mulf8s_prepared::b#2 mulf8s_prepared::b#1 mulf8s_prepared::b#3 ]
zp ZP_WORD:5 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
reg byte x [ init::i#2 init::i#1 ]
reg byte x [ mulf_init::c#2 mulf_init::c#1 ]
zp ZP_WORD:7 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
zp ZP_WORD:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
zp ZP_BYTE:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
zp ZP_WORD:12 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp ZP_WORD:14 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
zp ZP_WORD:16 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp ZP_BYTE:18 [ mulf_init::dir#2 mulf_init::dir#3 ]
zp ZP_BYTE:19 [ anim::x#0 ]
zp ZP_BYTE:20 [ anim::y#0 ]
zp ZP_WORD:21 [ anim::xr#0 anim::xr#1 ]
zp ZP_WORD:23 [ anim::yr#0 anim::yr#1 ]
reg byte a [ anim::$15 ]
zp ZP_WORD:25 [ anim::xpos#0 ]
reg byte a [ anim::$18 ]
reg byte a [ anim::$22 ]
reg byte y [ anim::ypos#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$25 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$8 ]
reg byte a [ mulf8s_prepared::$15 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ mulf8s_prepared::$16 ]
reg byte a [ mulf_init::$7 ]
reg byte a [ mulf_init::$10 ]
reg byte a [ mulf_init::$11 ]


FINAL ASSEMBLER
Score: 30135

  // File Comments
// 2D rotattion of 8 sprites 
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .label SCREEN = $400
  // A single sprite
  .label SPRITE = $3000
  .label SIN = COS+$40
  // @begin
  // @1
  // kickasm
  // kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
// sin(x) = cos(x+PI/2)
main: {
    // asm
    // asm { sei  }
    sei
    // init()
    // [5] call init 
    // [80] phi from main to init [phi:main->init]
    jsr init
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // anim()
    // [7] call anim 
    // [9] phi from main::@1 to anim [phi:main::@1->anim]
    jsr anim
    // main::@return
    // }
    // [8] return 
    rts
}
  // anim
anim: {
    .label _4 = 5
    .label _6 = 5
    .label _9 = 5
    .label _10 = 5
    .label _11 = 5
    .label _12 = 5
    .label x = $13
    .label y = $14
    .label xr = $15
    .label yr = $17
    .label xpos = $19
    .label sprite_msb = 4
    .label i = 3
    .label angle = 2
    // [10] phi from anim to anim::@1 [phi:anim->anim::@1]
    // [10] phi (byte) anim::angle#6 = (byte) 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta angle
    // anim::@1
    // anim::@2
  b2:
    // while(*RASTER!=$ff)
    // [11] if(*((const byte*) RASTER#0)!=(byte) $ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    // anim::@3
    // (*BORDERCOL)++;
    // [12] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [13] phi from anim::@3 to anim::@4 [phi:anim::@3->anim::@4]
    // [13] phi (byte) anim::sprite_msb#10 = (byte) 0 [phi:anim::@3->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta sprite_msb
    // [13] phi (byte) anim::i#10 = (byte) 0 [phi:anim::@3->anim::@4#1] -- vbuz1=vbuc1 
    sta i
    // [13] phi from anim::@5 to anim::@4 [phi:anim::@5->anim::@4]
    // [13] phi (byte) anim::sprite_msb#10 = (byte) anim::sprite_msb#5 [phi:anim::@5->anim::@4#0] -- register_copy 
    // [13] phi (byte) anim::i#10 = (byte) anim::i#1 [phi:anim::@5->anim::@4#1] -- register_copy 
    // anim::@4
  b4:
    // x = xs[i]
    // [14] (signed byte) anim::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta x
    // y = ys[i]
    // [15] (signed byte) anim::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#10) -- vbsz1=pbsc1_derefidx_vbuz2 
    // signed fixed[7.0]
    lda ys,y
    sta y
    // anim::mulf8s_prepare1
    // [16] (byte~) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte[$140]) COS#0 + (byte) anim::angle#6) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy angle
    lda COS,y
    // mulf8u_prepare((byte)a)
    // [17] call mulf8u_prepare 
    // [76] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
    // [76] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    // anim::@8
    // mulf8s_prepared(x)
    // [18] (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#0 -- vbsyy=vbsz1 
    ldy x
    // [19] call mulf8s_prepared 
    // [56] phi from anim::@8 to mulf8s_prepared [phi:anim::@8->mulf8s_prepared]
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#0 [phi:anim::@8->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@10
    // mulf8s_prepared(x)
    // [20] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4
    // xr = mulf8s_prepared(x)*2
    // [21] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _4
    asl
    sta xr
    lda _4+1
    rol
    sta xr+1
    // mulf8s_prepared(y)
    // [22] (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#0 -- vbsyy=vbsz1 
    ldy y
    // [23] call mulf8s_prepared 
    // [56] phi from anim::@10 to mulf8s_prepared [phi:anim::@10->mulf8s_prepared]
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#1 [phi:anim::@10->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@11
    // mulf8s_prepared(y)
    // [24] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4
    // yr = mulf8s_prepared(y)*2
    // [25] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda _6
    asl
    sta yr
    lda _6+1
    rol
    sta yr+1
    // anim::mulf8s_prepare2
    // [26] (byte~) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN#0 + (byte) anim::angle#6) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy angle
    lda SIN,y
    // mulf8u_prepare((byte)a)
    // [27] call mulf8u_prepare 
    // [76] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
    // [76] phi (byte) mulf8u_prepare::a#2 = (byte~) mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    // anim::@9
    // mulf8s_prepared(y)
    // [28] (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#0 -- vbsyy=vbsz1 
    ldy y
    // [29] call mulf8s_prepared 
    // [56] phi from anim::@9 to mulf8s_prepared [phi:anim::@9->mulf8s_prepared]
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#2 [phi:anim::@9->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@12
    // mulf8s_prepared(y)
    // [30] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4
    // mulf8s_prepared(y)*2
    // [31] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _10
    rol _10+1
    // xr -= mulf8s_prepared(y)*2
    // [32] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10 -- vwsz1=vwsz1_minus_vwsz2 
    lda xr
    sec
    sbc _10
    sta xr
    lda xr+1
    sbc _10+1
    sta xr+1
    // mulf8s_prepared(x)
    // [33] (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#0 -- vbsyy=vbsz1 
    ldy x
    // [34] call mulf8s_prepared 
    // [56] phi from anim::@12 to mulf8s_prepared [phi:anim::@12->mulf8s_prepared]
    // [56] phi (signed byte) mulf8s_prepared::b#4 = (signed byte) mulf8s_prepared::b#3 [phi:anim::@12->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@13
    // mulf8s_prepared(x)
    // [35] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4
    // mulf8s_prepared(x)*2
    // [36] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _12
    rol _12+1
    // yr += mulf8s_prepared(x)*2
    // [37] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12 -- vwsz1=vwsz1_plus_vwsz2 
    // signed fixed[8.8]
    lda yr
    clc
    adc _12
    sta yr
    lda yr+1
    adc _12+1
    sta yr+1
    // >xr
    // [38] (byte~) anim::$15 ← > (signed word) anim::xr#1 -- vbuaa=_hi_vwsz1 
    lda xr+1
    // xpos = ((signed byte) >xr) + 24 /*border*/ + 149
    // [39] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$15 + (signed byte) $18+(signed word) $95 -- vwsz1=vbsaa_plus_vwsc1 
    tax
    clc
    adc #<$18+$95
    sta xpos
    txa
    ora #$7f
    bmi !+
    lda #0
  !:
    adc #>$18+$95
    sta xpos+1
    // sprite_msb = sprite_msb/2
    // [40] (byte) anim::sprite_msb#1 ← (byte) anim::sprite_msb#10 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr sprite_msb
    // >xpos
    // [41] (byte~) anim::$18 ← > (signed word) anim::xpos#0 -- vbuaa=_hi_vwsz1 
    // if(>xpos!=0)
    // [42] if((byte~) anim::$18==(byte) 0) goto anim::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
    // anim::@6
    // sprite_msb |= $80
    // [43] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80 -- vbuz1=vbuz1_bor_vbuc1 
    lda #$80
    ora sprite_msb
    sta sprite_msb
    // [44] phi from anim::@13 anim::@6 to anim::@5 [phi:anim::@13/anim::@6->anim::@5]
    // [44] phi (byte) anim::sprite_msb#5 = (byte) anim::sprite_msb#1 [phi:anim::@13/anim::@6->anim::@5#0] -- register_copy 
    // anim::@5
  b5:
    // (>yr) + 89
    // [45] (byte~) anim::$22 ← > (signed word) anim::yr#1 -- vbuaa=_hi_vwsz1 
    lda yr+1
    // ypos = (>yr) + 89 /*center*/+ 51
    // [46] (byte) anim::ypos#0 ← (byte~) anim::$22 + (byte) $59+(byte) $33 -- vbuyy=vbuaa_plus_vbuc1 
    clc
    adc #$59+$33
    tay
    // i2 = i*2
    // [47] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
    // <xpos
    // [48] (byte~) anim::$25 ← < (signed word) anim::xpos#0 -- vbuaa=_lo_vwsz1 
    lda xpos
    // SPRITES_XPOS[i2] = <xpos
    // [49] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte~) anim::$25 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
    // SPRITES_YPOS[i2] = ypos
    // [50] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte) anim::ypos#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SPRITES_YPOS,x
    // for(byte i: 0..7)
    // [51] (byte) anim::i#1 ← ++ (byte) anim::i#10 -- vbuz1=_inc_vbuz1 
    inc i
    // [52] if((byte) anim::i#1!=(byte) 8) goto anim::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i
    beq !b4+
    jmp b4
  !b4:
    // anim::@7
    // *SPRITES_XMSB = sprite_msb
    // [53] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::sprite_msb#5 -- _deref_pbuc1=vbuz1 
    lda sprite_msb
    sta SPRITES_XMSB
    // angle++;
    // [54] (byte) anim::angle#1 ← ++ (byte) anim::angle#6 -- vbuz1=_inc_vbuz1 
    inc angle
    // *BORDERCOL = LIGHT_BLUE
    // [55] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
    // [10] phi from anim::@7 to anim::@1 [phi:anim::@7->anim::@1]
    // [10] phi (byte) anim::angle#6 = (byte) anim::angle#1 [phi:anim::@7->anim::@1#0] -- register_copy 
    jmp b2
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned byte to a word result
// The prepared number is set by calling mulf8s_prepare(byte a)
// mulf8s_prepared(signed byte register(Y) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = 5
    // mulf8u_prepared((byte) b)
    // [57] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#4 -- vbuaa=vbuyy 
    tya
    // [58] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [59] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
    // mulf8s_prepared::@5
    // m = mulf8u_prepared((byte) b)
    // [60] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
    // if(*memA<0)
    // [61] if(*((const signed byte*) mulf8s_prepared::memA#0)>=(signed byte) 0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl b1
    // mulf8s_prepared::@3
    // >m
    // [62] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda m+1
    // >m = (>m)-(byte)b
    // [63] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#4 -- vbuaa=vbuaa_minus_vbuyy 
    sty $ff
    sec
    sbc $ff
    // [64] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15 -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
    // [65] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
    // [65] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    // mulf8s_prepared::@1
  b1:
    // if(b<0)
    // [66] if((signed byte) mulf8s_prepared::b#4>=(signed byte) 0) goto mulf8s_prepared::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl b2
    // mulf8s_prepared::@4
    // >m
    // [67] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda m+1
    // >m = (>m)-(byte)*memA
    // [68] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA#0) -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [69] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16 -- vwuz1=vwuz1_sethi_vbuaa 
    sta m+1
    // [70] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
    // [70] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    // mulf8s_prepared::@2
  b2:
    // mulf8s_prepared::@return
    // }
    // [71] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned byte to a word result
// The prepared number is set by calling mulf8u_prepare(byte a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = 5
    // *memB = b
    // [72] *((const byte*) mulf8u_prepared::memB#0) ← (byte) mulf8u_prepared::b#0 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    tax
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // return { *memB, *resL };
    // [74] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB#0) w= *((const byte*) mulf8u_prepared::resL#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta return
    lda memB
    sta return+1
    // mulf8u_prepared::@return
    // }
    // [75] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned byte to a word result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // *memA = a
    // [77] *((const byte*) mulf8u_prepare::memA#0) ← (byte) mulf8u_prepare::a#2 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    // mulf8u_prepare::@return
    // }
    // [79] return 
    rts
}
  // init
init: {
    .label sprites_ptr = SCREEN+$3f8
    // mulf_init()
    // [81] call mulf_init 
    // [89] phi from init to mulf_init [phi:init->mulf_init]
    jsr mulf_init
    // init::@2
    // *SPRITES_ENABLE = %11111111
    // [82] *((const byte*) SPRITES_ENABLE#0) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
    // [83] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
    // [83] phi (byte) init::i#2 = (byte) 0 [phi:init::@2->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [83] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
    // [83] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    // init::@1
  b1:
    // sprites_ptr[i] = (byte)(SPRITE/$40)
    // [84] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE#0/(byte) $40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #SPRITE/$40
    sta sprites_ptr,x
    // SPRITES_COLS[i] = GREEN
    // [85] *((const byte*) SPRITES_COLS#0 + (byte) init::i#2) ← (const byte) GREEN#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
    // for(byte i: 0..7)
    // [86] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] if((byte) init::i#1!=(byte) 8) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
    // init::@return
    // }
    // [88] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label sqr1_hi = 9
    .label sqr = $c
    .label sqr1_lo = 7
    .label x_2 = $b
    .label sqr2_hi = $10
    .label sqr2_lo = $e
    .label dir = $12
    // [90] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
    // [90] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
    // [90] phi (byte*) mulf_init::sqr1_hi#2 = (const byte[$200]) mulf_sqr1_hi#0+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta sqr1_hi+1
    // [90] phi (byte*) mulf_init::sqr1_lo#2 = (const byte[$200]) mulf_sqr1_lo#0+(byte) 1 [phi:mulf_init->mulf_init::@1#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta sqr1_lo+1
    // [90] phi (word) mulf_init::sqr#4 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta sqr
    sta sqr+1
    // [90] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#4] -- vbuxx=vbuc1 
    tax
    // [90] phi from mulf_init::@2 to mulf_init::@1 [phi:mulf_init::@2->mulf_init::@1]
    // [90] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@2->mulf_init::@1#0] -- register_copy 
    // [90] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@2->mulf_init::@1#1] -- register_copy 
    // [90] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@2->mulf_init::@1#2] -- register_copy 
    // [90] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@2->mulf_init::@1#3] -- register_copy 
    // [90] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@2->mulf_init::@1#4] -- register_copy 
    // mulf_init::@1
  b1:
    // if((++c&1)==0)
    // [91] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // ++c&1
    // [92] (byte~) mulf_init::$7 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if((++c&1)==0)
    // [93] if((byte~) mulf_init::$7!=(byte) 0) goto mulf_init::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
    // mulf_init::@3
    // x_2++;
    // [94] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc x_2
    // sqr++;
    // [95] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
    // [96] phi from mulf_init::@1 mulf_init::@3 to mulf_init::@2 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2]
    // [96] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2#0] -- register_copy 
    // [96] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@1/mulf_init::@3->mulf_init::@2#1] -- register_copy 
    // mulf_init::@2
  b2:
    // <sqr
    // [97] (byte~) mulf_init::$10 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda sqr
    // *sqr1_lo = <sqr
    // [98] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$10 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // >sqr
    // [99] (byte~) mulf_init::$11 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda sqr+1
    // *sqr1_hi++ = >sqr
    // [100] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$11 -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
    // *sqr1_hi++ = >sqr;
    // [101] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_hi
    bne !+
    inc sqr1_hi+1
  !:
    // sqr = sqr + x_2
    // [102] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
    // for(byte* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [103] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr1_lo
    bne !+
    inc sqr1_lo+1
  !:
    // [104] if((byte*) mulf_init::sqr1_lo#1!=(const byte[$200]) mulf_sqr1_lo#0+(word) $200) goto mulf_init::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne b1
    lda sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne b1
    // [105] phi from mulf_init::@2 to mulf_init::@4 [phi:mulf_init::@2->mulf_init::@4]
    // [105] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@2->mulf_init::@4#0] -- vbuz1=vbuc1 
    lda #$ff
    sta dir
    // [105] phi (byte*) mulf_init::sqr2_hi#2 = (const byte[$200]) mulf_sqr2_hi#0 [phi:mulf_init::@2->mulf_init::@4#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta sqr2_hi
    lda #>mulf_sqr2_hi
    sta sqr2_hi+1
    // [105] phi (byte*) mulf_init::sqr2_lo#2 = (const byte[$200]) mulf_sqr2_lo#0 [phi:mulf_init::@2->mulf_init::@4#2] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta sqr2_lo
    lda #>mulf_sqr2_lo
    sta sqr2_lo+1
    // [105] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@2->mulf_init::@4#3] -- vbuxx=vbuc1 
    ldx #-1
    // [105] phi from mulf_init::@5 to mulf_init::@4 [phi:mulf_init::@5->mulf_init::@4]
    // [105] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#3 [phi:mulf_init::@5->mulf_init::@4#0] -- register_copy 
    // [105] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@5->mulf_init::@4#1] -- register_copy 
    // [105] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@5->mulf_init::@4#2] -- register_copy 
    // [105] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@5->mulf_init::@4#3] -- register_copy 
    // mulf_init::@4
  b4:
    // *sqr2_lo = mulf_sqr1_lo[x_255]
    // [106] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte[$200]) mulf_sqr1_lo#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255]
    // [107] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte[$200]) mulf_sqr1_hi#0 + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255];
    // [108] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_hi
    bne !+
    inc sqr2_hi+1
  !:
    // x_255 = x_255 + dir
    // [109] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc dir
    tax
    // if(x_255==0)
    // [110] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@7 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b5
    // [112] phi from mulf_init::@4 to mulf_init::@5 [phi:mulf_init::@4->mulf_init::@5]
    // [112] phi (byte) mulf_init::dir#3 = (byte) 1 [phi:mulf_init::@4->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #1
    sta dir
    // [111] phi from mulf_init::@4 to mulf_init::@7 [phi:mulf_init::@4->mulf_init::@7]
    // mulf_init::@7
    // [112] phi from mulf_init::@7 to mulf_init::@5 [phi:mulf_init::@7->mulf_init::@5]
    // [112] phi (byte) mulf_init::dir#3 = (byte) mulf_init::dir#2 [phi:mulf_init::@7->mulf_init::@5#0] -- register_copy 
    // mulf_init::@5
  b5:
    // for(byte* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [113] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc sqr2_lo
    bne !+
    inc sqr2_lo+1
  !:
    // [114] if((byte*) mulf_init::sqr2_lo#1!=(const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) goto mulf_init::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne b4
    lda sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne b4
    // mulf_init::@6
    // *(mulf_sqr2_lo+511) = *(mulf_sqr1_lo+256)
    // [115] *((const byte[$200]) mulf_sqr2_lo#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_lo#0+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // *(mulf_sqr2_hi+511) = *(mulf_sqr1_hi+256)
    // [116] *((const byte[$200]) mulf_sqr2_hi#0+(word) $1ff) ← *((const byte[$200]) mulf_sqr1_hi#0+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    // mulf_init::@return
    // }
    // [117] return 
    rts
}
  // File Data
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // Sine and Cosine tables  
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
COS:
{
    .var min = -$7fff
    .var max = $7fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

  // Positions to rotate
  xs: .byte -$46, -$46, -$46, 0, 0, $46, $46, $46
  ys: .byte -$46, 0, $46, -$46, $46, -$46, 0, $46
.pc = SPRITE "SPRITE"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


