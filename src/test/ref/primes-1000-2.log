Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_uint_decimal
  (byte*) utoa::buffer#21 ← phi( print_uint_decimal/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( print_uint_decimal/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( print_uint_decimal/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_uint_decimal::@1
  (byte*) print_char_cursor#28 ← phi( print_uint_decimal::@1/(byte*) print_char_cursor#25 )
  (byte*) print_str::str#5 ← phi( print_uint_decimal::@1/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#24 ← phi( print_str/(byte*) print_char_cursor#28 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#23 ← phi( print_str::@1/(byte*) print_char_cursor#24 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#12 ← phi( print_str::@2/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#12
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#13 ← phi( print_str::@1/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#13
  return 
  to:@return

(void()) print_uint_decimal((word) print_uint_decimal::w)
print_uint_decimal: scope:[print_uint_decimal]  from main::@6
  (byte*) print_char_cursor#29 ← phi( main::@6/(byte*) print_char_cursor#26 )
  (word) print_uint_decimal::w#1 ← phi( main::@6/(word) print_uint_decimal::w#0 )
  (word) utoa::value#1 ← (word) print_uint_decimal::w#1
  (byte*) utoa::buffer#5 ← (const byte*) decimal_digits
  (byte) utoa::radix#0 ← (const byte) DECIMAL
  call utoa 
  to:print_uint_decimal::@1
print_uint_decimal::@1: scope:[print_uint_decimal]  from print_uint_decimal
  (byte*) print_char_cursor#25 ← phi( print_uint_decimal/(byte*) print_char_cursor#29 )
  (byte*) print_str::str#1 ← (const byte*) decimal_digits
  call print_str 
  to:print_uint_decimal::@2
print_uint_decimal::@2: scope:[print_uint_decimal]  from print_uint_decimal::@1
  (byte*) print_char_cursor#14 ← phi( print_uint_decimal::@1/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#14
  to:print_uint_decimal::@return
print_uint_decimal::@return: scope:[print_uint_decimal]  from print_uint_decimal::@2
  (byte*) print_char_cursor#15 ← phi( print_uint_decimal::@2/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#15
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 print_str::@2
  (byte*) print_char_cursor#16 ← phi( main::@10/(byte*) print_char_cursor#6 print_str::@2/(byte*) print_char_cursor#23 )
  (byte) print_char::ch#2 ← phi( main::@10/(byte) print_char::ch#1 print_str::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#16) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#4 ← ++ (byte*) print_char_cursor#16
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#17 ← phi( print_char/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#17
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from main::@1
  (byte) mul8u::a#5 ← phi( main::@1/(byte) mul8u::a#1 )
  (byte) mul8u::b#1 ← phi( main::@1/(byte) mul8u::b#0 )
  (word) mul8u::res#0 ← (word) 0
  (word) mul8u::mb#0 ← (word)(byte) mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#5 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#3 ← phi( mul8u::@1/(byte) mul8u::a#2 )
  (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@5/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@5/(word) mul8u::mb#3 )
  (byte) mul8u::a#4 ← phi( mul8u::@2/(byte) mul8u::a#3 mul8u::@5/(byte) mul8u::a#6 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#6 ← phi( mul8u::@2/(byte) mul8u::a#3 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#3 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#3
  return 
  to:@return

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div16u8u div16u8u::@1
  (byte) divr8u::divisor#6 ← phi( div16u8u/(byte) divr8u::divisor#0 div16u8u::@1/(byte) divr8u::divisor#1 )
  (byte) divr8u::dividend#5 ← phi( div16u8u/(byte) divr8u::dividend#1 div16u8u::@1/(byte) divr8u::dividend#2 )
  (byte) divr8u::rem#10 ← phi( div16u8u/(byte) divr8u::rem#3 div16u8u::@1/(byte) divr8u::rem#4 )
  (byte) divr8u::quotient#0 ← (byte) 0
  (byte) divr8u::i#0 ← (byte) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte) divr8u::i#5 ← phi( divr8u/(byte) divr8u::i#0 divr8u::@3/(byte) divr8u::i#1 )
  (byte) divr8u::divisor#4 ← phi( divr8u/(byte) divr8u::divisor#6 divr8u::@3/(byte) divr8u::divisor#7 )
  (byte) divr8u::quotient#6 ← phi( divr8u/(byte) divr8u::quotient#0 divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::dividend#3 ← phi( divr8u/(byte) divr8u::dividend#5 divr8u::@3/(byte) divr8u::dividend#6 )
  (byte) divr8u::rem#5 ← phi( divr8u/(byte) divr8u::rem#10 divr8u::@3/(byte) divr8u::rem#11 )
  (byte~) divr8u::$0 ← (byte) divr8u::rem#5 << (number) 1
  (byte) divr8u::rem#0 ← (byte~) divr8u::$0
  (number~) divr8u::$1 ← (byte) divr8u::dividend#3 & (number) $80
  (bool~) divr8u::$2 ← (number~) divr8u::$1 != (number) 0
  (bool~) divr8u::$3 ← ! (bool~) divr8u::$2
  if((bool~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte) divr8u::i#3 ← phi( divr8u::@1/(byte) divr8u::i#5 divr8u::@4/(byte) divr8u::i#6 )
  (byte) divr8u::divisor#2 ← phi( divr8u::@1/(byte) divr8u::divisor#4 divr8u::@4/(byte) divr8u::divisor#5 )
  (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#0 divr8u::@4/(byte) divr8u::rem#1 )
  (byte) divr8u::quotient#3 ← phi( divr8u::@1/(byte) divr8u::quotient#6 divr8u::@4/(byte) divr8u::quotient#7 )
  (byte) divr8u::dividend#4 ← phi( divr8u::@1/(byte) divr8u::dividend#3 divr8u::@4/(byte) divr8u::dividend#7 )
  (byte~) divr8u::$5 ← (byte) divr8u::dividend#4 << (number) 1
  (byte) divr8u::dividend#0 ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (number) 1
  (byte) divr8u::quotient#1 ← (byte~) divr8u::$6
  (bool~) divr8u::$7 ← (byte) divr8u::rem#6 >= (byte) divr8u::divisor#2
  (bool~) divr8u::$8 ← ! (bool~) divr8u::$7
  if((bool~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte) divr8u::i#6 ← phi( divr8u::@1/(byte) divr8u::i#5 )
  (byte) divr8u::divisor#5 ← phi( divr8u::@1/(byte) divr8u::divisor#4 )
  (byte) divr8u::quotient#7 ← phi( divr8u::@1/(byte) divr8u::quotient#6 )
  (byte) divr8u::dividend#7 ← phi( divr8u::@1/(byte) divr8u::dividend#3 )
  (byte) divr8u::rem#7 ← phi( divr8u::@1/(byte) divr8u::rem#0 )
  (number~) divr8u::$4 ← (byte) divr8u::rem#7 | (number) 1
  (byte) divr8u::rem#1 ← (number~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::divisor#7 ← phi( divr8u::@2/(byte) divr8u::divisor#2 divr8u::@5/(byte) divr8u::divisor#3 )
  (byte) divr8u::quotient#8 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  (byte) divr8u::dividend#6 ← phi( divr8u::@2/(byte) divr8u::dividend#0 divr8u::@5/(byte) divr8u::dividend#8 )
  (byte) divr8u::rem#11 ← phi( divr8u::@2/(byte) divr8u::rem#6 divr8u::@5/(byte) divr8u::rem#2 )
  (byte) divr8u::i#2 ← phi( divr8u::@2/(byte) divr8u::i#3 divr8u::@5/(byte) divr8u::i#4 )
  (byte) divr8u::i#1 ← (byte) divr8u::i#2 + rangenext(0,7)
  (bool~) divr8u::$10 ← (byte) divr8u::i#1 != rangelast(0,7)
  if((bool~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::dividend#8 ← phi( divr8u::@2/(byte) divr8u::dividend#0 )
  (byte) divr8u::i#4 ← phi( divr8u::@2/(byte) divr8u::i#3 )
  (byte) divr8u::divisor#3 ← phi( divr8u::@2/(byte) divr8u::divisor#2 )
  (byte) divr8u::rem#8 ← phi( divr8u::@2/(byte) divr8u::rem#6 )
  (byte) divr8u::quotient#4 ← phi( divr8u::@2/(byte) divr8u::quotient#1 )
  (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#4
  (byte~) divr8u::$9 ← (byte) divr8u::rem#8 - (byte) divr8u::divisor#3
  (byte) divr8u::rem#2 ← (byte~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) divr8u::quotient#5 ← phi( divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::rem#9 ← phi( divr8u::@3/(byte) divr8u::rem#11 )
  (byte) rem8u#0 ← (byte) divr8u::rem#9
  (byte) divr8u::return#0 ← (byte) divr8u::quotient#5
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  (byte) rem8u#10 ← phi( divr8u::@6/(byte) rem8u#0 )
  (byte) divr8u::return#4 ← phi( divr8u::@6/(byte) divr8u::return#0 )
  (byte) divr8u::return#1 ← (byte) divr8u::return#4
  (byte) rem8u#1 ← (byte) rem8u#10
  return 
  to:@return

(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
div16u8u: scope:[div16u8u]  from main::@3
  (byte) rem8u#18 ← phi( main::@3/(byte) rem8u#19 )
  (byte) div16u8u::divisor#1 ← phi( main::@3/(byte) div16u8u::divisor#0 )
  (word) div16u8u::dividend#1 ← phi( main::@3/(word) div16u8u::dividend#0 )
  (byte~) div16u8u::$0 ← > (word) div16u8u::dividend#1
  (byte) divr8u::dividend#1 ← (byte~) div16u8u::$0
  (byte) divr8u::divisor#0 ← (byte) div16u8u::divisor#1
  (byte) divr8u::rem#3 ← (number) 0
  call divr8u 
  (byte) divr8u::return#2 ← (byte) divr8u::return#1
  to:div16u8u::@1
div16u8u::@1: scope:[div16u8u]  from div16u8u
  (byte) div16u8u::divisor#2 ← phi( div16u8u/(byte) div16u8u::divisor#1 )
  (word) div16u8u::dividend#2 ← phi( div16u8u/(word) div16u8u::dividend#1 )
  (byte) rem8u#11 ← phi( div16u8u/(byte) rem8u#1 )
  (byte) divr8u::return#5 ← phi( div16u8u/(byte) divr8u::return#2 )
  (byte~) div16u8u::$1 ← (byte) divr8u::return#5
  (byte) rem8u#2 ← (byte) rem8u#11
  (byte) div16u8u::quotient_hi#0 ← (byte~) div16u8u::$1
  (byte~) div16u8u::$2 ← < (word) div16u8u::dividend#2
  (byte) divr8u::dividend#2 ← (byte~) div16u8u::$2
  (byte) divr8u::divisor#1 ← (byte) div16u8u::divisor#2
  (byte) divr8u::rem#4 ← (byte) rem8u#2
  call divr8u 
  (byte) divr8u::return#3 ← (byte) divr8u::return#1
  to:div16u8u::@2
div16u8u::@2: scope:[div16u8u]  from div16u8u::@1
  (byte) div16u8u::quotient_hi#1 ← phi( div16u8u::@1/(byte) div16u8u::quotient_hi#0 )
  (byte) rem8u#12 ← phi( div16u8u::@1/(byte) rem8u#1 )
  (byte) divr8u::return#6 ← phi( div16u8u::@1/(byte) divr8u::return#3 )
  (byte~) div16u8u::$3 ← (byte) divr8u::return#6
  (byte) rem8u#3 ← (byte) rem8u#12
  (byte) div16u8u::quotient_lo#0 ← (byte~) div16u8u::$3
  (word) div16u8u::quotient#0 ← (word){ (byte) div16u8u::quotient_hi#1, (byte) div16u8u::quotient_lo#0 }
  (word) div16u8u::return#0 ← (word) div16u8u::quotient#0
  to:div16u8u::@return
div16u8u::@return: scope:[div16u8u]  from div16u8u::@2
  (byte) rem8u#13 ← phi( div16u8u::@2/(byte) rem8u#3 )
  (word) div16u8u::return#3 ← phi( div16u8u::@2/(word) div16u8u::return#0 )
  (word) div16u8u::return#1 ← (word) div16u8u::return#3
  (byte) rem8u#4 ← (byte) rem8u#13
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) print_char_cursor#38 ← phi( __start::@1/(byte*) print_char_cursor#27 )
  (byte) rem8u#30 ← phi( __start::@1/(byte) rem8u#21 )
  (number~) main::$10 ← (number) 1 * (const byte) SIZEOF_WORD
  *((const word*) PRIMES + (number~) main::$10) ← (number) 2
  (number~) main::$11 ← (number) 2 * (const byte) SIZEOF_WORD
  *((const word*) PRIMES + (number~) main::$11) ← (number) 3
  (word) potential#0 ← (number) 3
  (byte) test_last#0 ← (number) 2
  (word) prime_idx#0 ← (number) 2
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte*) print_char_cursor#37 ← phi( main/(byte*) print_char_cursor#38 main::@11/(byte*) print_char_cursor#7 )
  (word) prime_idx#20 ← phi( main/(word) prime_idx#0 main::@11/(word) prime_idx#7 )
  (byte) rem8u#29 ← phi( main/(byte) rem8u#30 main::@11/(byte) rem8u#20 )
  (word) potential#15 ← phi( main/(word) potential#0 main::@11/(word) potential#19 )
  (byte) test_last#6 ← phi( main/(byte) test_last#0 main::@11/(byte) test_last#12 )
  (byte~) main::$12 ← (byte) test_last#6 * (const byte) SIZEOF_WORD
  (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12)
  (byte) mul8u::a#1 ← (byte) main::p#0
  (byte) mul8u::b#0 ← (byte) main::p#0
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:main::@8
main::@8: scope:[main]  from main::@1
  (byte*) print_char_cursor#36 ← phi( main::@1/(byte*) print_char_cursor#37 )
  (word) prime_idx#19 ← phi( main::@1/(word) prime_idx#20 )
  (byte) rem8u#26 ← phi( main::@1/(byte) rem8u#29 )
  (byte) test_last#13 ← phi( main::@1/(byte) test_last#6 )
  (word) potential#7 ← phi( main::@1/(word) potential#15 )
  (word) mul8u::return#4 ← phi( main::@1/(word) mul8u::return#2 )
  (word~) main::$0 ← (word) mul8u::return#4
  (bool~) main::$1 ← (word) potential#7 > (word~) main::$0
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@7 main::@8
  (byte*) print_char_cursor#34 ← phi( main::@7/(byte*) print_char_cursor#35 main::@8/(byte*) print_char_cursor#36 )
  (word) prime_idx#17 ← phi( main::@7/(word) prime_idx#18 main::@8/(word) prime_idx#19 )
  (byte) test_last#19 ← phi( main::@7/(byte) test_last#1 main::@8/(byte) test_last#13 )
  (byte) rem8u#22 ← phi( main::@7/(byte) rem8u#25 main::@8/(byte) rem8u#26 )
  (word) potential#8 ← phi( main::@7/(word) potential#16 main::@8/(word) potential#7 )
  (word) potential#1 ← (word) potential#8 + (number) 2
  (byte) test_idx#0 ← (number) 2
  to:main::@3
main::@7: scope:[main]  from main::@8
  (byte*) print_char_cursor#35 ← phi( main::@8/(byte*) print_char_cursor#36 )
  (word) prime_idx#18 ← phi( main::@8/(word) prime_idx#19 )
  (byte) rem8u#25 ← phi( main::@8/(byte) rem8u#26 )
  (word) potential#16 ← phi( main::@8/(word) potential#7 )
  (byte) test_last#7 ← phi( main::@8/(byte) test_last#13 )
  (byte) test_last#1 ← ++ (byte) test_last#7
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@4
  (byte*) print_char_cursor#33 ← phi( main::@2/(byte*) print_char_cursor#34 main::@4/(byte*) print_char_cursor#30 )
  (word) prime_idx#16 ← phi( main::@2/(word) prime_idx#17 main::@4/(word) prime_idx#11 )
  (byte) test_last#17 ← phi( main::@2/(byte) test_last#19 main::@4/(byte) test_last#8 )
  (byte) rem8u#19 ← phi( main::@2/(byte) rem8u#22 main::@4/(byte) rem8u#23 )
  (word) potential#9 ← phi( main::@2/(word) potential#1 main::@4/(word) potential#17 )
  (byte) test_idx#7 ← phi( main::@2/(byte) test_idx#0 main::@4/(byte) test_idx#9 )
  (byte~) main::$13 ← (byte) test_idx#7 * (const byte) SIZEOF_WORD
  (word) div16u8u::dividend#0 ← (word) potential#9
  (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13)
  call div16u8u 
  (word) div16u8u::return#2 ← (word) div16u8u::return#1
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte*) print_char_cursor#32 ← phi( main::@3/(byte*) print_char_cursor#33 )
  (word) prime_idx#15 ← phi( main::@3/(word) prime_idx#16 )
  (word) potential#18 ← phi( main::@3/(word) potential#9 )
  (byte) test_last#15 ← phi( main::@3/(byte) test_last#17 )
  (byte) test_idx#8 ← phi( main::@3/(byte) test_idx#7 )
  (byte) rem8u#14 ← phi( main::@3/(byte) rem8u#4 )
  (byte) rem8u#5 ← (byte) rem8u#14
  (byte) test_idx#1 ← ++ (byte) test_idx#8
  (bool~) main::$4 ← (byte) rem8u#5 == (number) 0
  (bool~) main::$5 ← ! (bool~) main::$4
  if((bool~) main::$5) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@5 main::@9
  (byte*) print_char_cursor#30 ← phi( main::@5/(byte*) print_char_cursor#31 main::@9/(byte*) print_char_cursor#32 )
  (byte) rem8u#23 ← phi( main::@5/(byte) rem8u#27 main::@9/(byte) rem8u#5 )
  (word) prime_idx#11 ← phi( main::@5/(word) prime_idx#14 main::@9/(word) prime_idx#15 )
  (word) potential#17 ← phi( main::@5/(word) potential#2 main::@9/(word) potential#18 )
  (byte) test_last#8 ← phi( main::@5/(byte) test_last#14 main::@9/(byte) test_last#15 )
  (byte) test_idx#9 ← phi( main::@5/(byte) test_idx#2 main::@9/(byte) test_idx#1 )
  (bool~) main::$6 ← (byte) test_idx#9 <= (byte) test_last#8
  if((bool~) main::$6) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@9
  (byte*) print_char_cursor#31 ← phi( main::@9/(byte*) print_char_cursor#32 )
  (byte) rem8u#27 ← phi( main::@9/(byte) rem8u#5 )
  (word) prime_idx#14 ← phi( main::@9/(word) prime_idx#15 )
  (byte) test_last#14 ← phi( main::@9/(byte) test_last#15 )
  (word) potential#10 ← phi( main::@9/(word) potential#18 )
  (word) potential#2 ← (word) potential#10 + (number) 2
  (byte) test_idx#2 ← (number) 2
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte) rem8u#28 ← phi( main::@4/(byte) rem8u#23 )
  (byte) test_idx#16 ← phi( main::@4/(byte) test_idx#9 )
  (byte) test_last#20 ← phi( main::@4/(byte) test_last#8 )
  (byte*) print_char_cursor#26 ← phi( main::@4/(byte*) print_char_cursor#30 )
  (word) potential#11 ← phi( main::@4/(word) potential#17 )
  (word) prime_idx#6 ← phi( main::@4/(word) prime_idx#11 )
  (word) prime_idx#1 ← ++ (word) prime_idx#6
  (word~) main::$14 ← (word) prime_idx#1 * (const byte) SIZEOF_WORD
  *((const word*) PRIMES + (word~) main::$14) ← (word) potential#11
  (word) print_uint_decimal::w#0 ← (word) potential#11
  call print_uint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  (byte) rem8u#24 ← phi( main::@6/(byte) rem8u#28 )
  (byte) test_idx#15 ← phi( main::@6/(byte) test_idx#16 )
  (word) potential#21 ← phi( main::@6/(word) potential#11 )
  (byte) test_last#18 ← phi( main::@6/(byte) test_last#20 )
  (word) prime_idx#12 ← phi( main::@6/(word) prime_idx#1 )
  (byte*) print_char_cursor#18 ← phi( main::@6/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#18
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) rem8u#20 ← phi( main::@10/(byte) rem8u#24 )
  (byte) test_idx#13 ← phi( main::@10/(byte) test_idx#15 )
  (word) potential#19 ← phi( main::@10/(word) potential#21 )
  (byte) test_last#12 ← phi( main::@10/(byte) test_last#18 )
  (word) prime_idx#7 ← phi( main::@10/(word) prime_idx#12 )
  (byte*) print_char_cursor#19 ← phi( main::@10/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#19
  (bool~) main::$9 ← (word) prime_idx#7 < (number) $3e8
  if((bool~) main::$9) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte*) print_char_cursor#20 ← phi( main::@11/(byte*) print_char_cursor#7 )
  (byte) rem8u#15 ← phi( main::@11/(byte) rem8u#20 )
  (byte) test_idx#10 ← phi( main::@11/(byte) test_idx#13 )
  (word) prime_idx#8 ← phi( main::@11/(word) prime_idx#7 )
  (byte) test_last#9 ← phi( main::@11/(byte) test_last#12 )
  (word) potential#12 ← phi( main::@11/(word) potential#19 )
  (word) potential#3 ← (word) potential#12
  (byte) test_last#2 ← (byte) test_last#9
  (word) prime_idx#2 ← (word) prime_idx#8
  (byte) test_idx#3 ← (byte) test_idx#10
  (byte) rem8u#6 ← (byte) rem8u#15
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#20
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#9 ← (byte*) print_line_cursor#0
  (byte) rem8u#7 ← (byte) 0
  (word) prime_idx#3 ← (word) 0
  (word) potential#4 ← (word) 0
  (byte) test_idx#4 ← (byte) 0
  (byte) test_last#3 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte*) print_line_cursor#4 ← phi( __start::__init1/(byte*) print_line_cursor#0 )
  (byte*) print_screen#4 ← phi( __start::__init1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#27 ← phi( __start::__init1/(byte*) print_char_cursor#9 )
  (byte) rem8u#21 ← phi( __start::__init1/(byte) rem8u#7 )
  (byte) test_idx#14 ← phi( __start::__init1/(byte) test_idx#4 )
  (word) prime_idx#13 ← phi( __start::__init1/(word) prime_idx#3 )
  (byte) test_last#16 ← phi( __start::__init1/(byte) test_last#3 )
  (word) potential#20 ← phi( __start::__init1/(word) potential#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte*) print_line_cursor#3 ← phi( __start::@1/(byte*) print_line_cursor#4 )
  (byte*) print_screen#3 ← phi( __start::@1/(byte*) print_screen#4 )
  (byte*) print_char_cursor#21 ← phi( __start::@1/(byte*) print_char_cursor#8 )
  (byte) rem8u#16 ← phi( __start::@1/(byte) rem8u#6 )
  (byte) test_idx#11 ← phi( __start::@1/(byte) test_idx#3 )
  (word) prime_idx#9 ← phi( __start::@1/(word) prime_idx#2 )
  (byte) test_last#10 ← phi( __start::@1/(byte) test_last#2 )
  (word) potential#13 ← phi( __start::@1/(word) potential#3 )
  (word) potential#5 ← (word) potential#13
  (byte) test_last#4 ← (byte) test_last#10
  (word) prime_idx#4 ← (word) prime_idx#9
  (byte) test_idx#5 ← (byte) test_idx#11
  (byte) rem8u#8 ← (byte) rem8u#16
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#21
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) test_last#11 ← phi( __start::@2/(byte) test_last#4 )
  (byte) test_idx#12 ← phi( __start::@2/(byte) test_idx#5 )
  (word) potential#14 ← phi( __start::@2/(word) potential#5 )
  (word) prime_idx#10 ← phi( __start::@2/(word) prime_idx#4 )
  (byte) rem8u#17 ← phi( __start::@2/(byte) rem8u#8 )
  (byte*) print_char_cursor#22 ← phi( __start::@2/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#2 ← phi( __start::@2/(byte*) print_line_cursor#3 )
  (byte*) print_screen#2 ← phi( __start::@2/(byte*) print_screen#3 )
  (byte*) print_screen#1 ← (byte*) print_screen#2
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#2
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#22
  (byte) rem8u#9 ← (byte) rem8u#17
  (word) prime_idx#5 ← (word) prime_idx#10
  (word) potential#6 ← (word) potential#14
  (byte) test_idx#6 ← (byte) test_idx#12
  (byte) test_last#5 ← (byte) test_last#11
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) BINARY = (number) 2
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const word*) PRIMES[(number) $3e8]  = { fill( $3e8, 0) }
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte) SIZEOF_WORD = (byte) 2
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(const byte*) decimal_digits[(number) 6]  = { fill( 6, 0) }
(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
(byte~) div16u8u::$0
(byte~) div16u8u::$1
(byte~) div16u8u::$2
(byte~) div16u8u::$3
(label) div16u8u::@1
(label) div16u8u::@2
(label) div16u8u::@return
(word) div16u8u::dividend
(word) div16u8u::dividend#0
(word) div16u8u::dividend#1
(word) div16u8u::dividend#2
(byte) div16u8u::divisor
(byte) div16u8u::divisor#0
(byte) div16u8u::divisor#1
(byte) div16u8u::divisor#2
(word) div16u8u::quotient
(word) div16u8u::quotient#0
(byte) div16u8u::quotient_hi
(byte) div16u8u::quotient_hi#0
(byte) div16u8u::quotient_hi#1
(byte) div16u8u::quotient_lo
(byte) div16u8u::quotient_lo#0
(word) div16u8u::return
(word) div16u8u::return#0
(word) div16u8u::return#1
(word) div16u8u::return#2
(word) div16u8u::return#3
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(number~) divr8u::$1
(bool~) divr8u::$10
(bool~) divr8u::$2
(bool~) divr8u::$3
(number~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(bool~) divr8u::$7
(bool~) divr8u::$8
(byte~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0
(byte) divr8u::dividend#1
(byte) divr8u::dividend#2
(byte) divr8u::dividend#3
(byte) divr8u::dividend#4
(byte) divr8u::dividend#5
(byte) divr8u::dividend#6
(byte) divr8u::dividend#7
(byte) divr8u::dividend#8
(byte) divr8u::divisor
(byte) divr8u::divisor#0
(byte) divr8u::divisor#1
(byte) divr8u::divisor#2
(byte) divr8u::divisor#3
(byte) divr8u::divisor#4
(byte) divr8u::divisor#5
(byte) divr8u::divisor#6
(byte) divr8u::divisor#7
(byte) divr8u::i
(byte) divr8u::i#0
(byte) divr8u::i#1
(byte) divr8u::i#2
(byte) divr8u::i#3
(byte) divr8u::i#4
(byte) divr8u::i#5
(byte) divr8u::i#6
(byte) divr8u::quotient
(byte) divr8u::quotient#0
(byte) divr8u::quotient#1
(byte) divr8u::quotient#2
(byte) divr8u::quotient#3
(byte) divr8u::quotient#4
(byte) divr8u::quotient#5
(byte) divr8u::quotient#6
(byte) divr8u::quotient#7
(byte) divr8u::quotient#8
(byte) divr8u::rem
(byte) divr8u::rem#0
(byte) divr8u::rem#1
(byte) divr8u::rem#10
(byte) divr8u::rem#11
(byte) divr8u::rem#2
(byte) divr8u::rem#3
(byte) divr8u::rem#4
(byte) divr8u::rem#5
(byte) divr8u::rem#6
(byte) divr8u::rem#7
(byte) divr8u::rem#8
(byte) divr8u::rem#9
(byte) divr8u::return
(byte) divr8u::return#0
(byte) divr8u::return#1
(byte) divr8u::return#2
(byte) divr8u::return#3
(byte) divr8u::return#4
(byte) divr8u::return#5
(byte) divr8u::return#6
(void()) main()
(word~) main::$0
(bool~) main::$1
(number~) main::$10
(number~) main::$11
(byte~) main::$12
(byte~) main::$13
(word~) main::$14
(bool~) main::$2
(bool~) main::$4
(bool~) main::$5
(bool~) main::$6
(bool~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::p
(byte) main::p#0
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@5
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) potential
(word) potential#0
(word) potential#1
(word) potential#10
(word) potential#11
(word) potential#12
(word) potential#13
(word) potential#14
(word) potential#15
(word) potential#16
(word) potential#17
(word) potential#18
(word) potential#19
(word) potential#2
(word) potential#20
(word) potential#21
(word) potential#3
(word) potential#4
(word) potential#5
(word) potential#6
(word) potential#7
(word) potential#8
(word) potential#9
(word) prime_idx
(word) prime_idx#0
(word) prime_idx#1
(word) prime_idx#10
(word) prime_idx#11
(word) prime_idx#12
(word) prime_idx#13
(word) prime_idx#14
(word) prime_idx#15
(word) prime_idx#16
(word) prime_idx#17
(word) prime_idx#18
(word) prime_idx#19
(word) prime_idx#2
(word) prime_idx#20
(word) prime_idx#3
(word) prime_idx#4
(word) prime_idx#5
(word) prime_idx#6
(word) prime_idx#7
(word) prime_idx#8
(word) prime_idx#9
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#4
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_uint_decimal((word) print_uint_decimal::w)
(label) print_uint_decimal::@1
(label) print_uint_decimal::@2
(label) print_uint_decimal::@return
(word) print_uint_decimal::w
(word) print_uint_decimal::w#0
(word) print_uint_decimal::w#1
(byte) rem8u
(byte) rem8u#0
(byte) rem8u#1
(byte) rem8u#10
(byte) rem8u#11
(byte) rem8u#12
(byte) rem8u#13
(byte) rem8u#14
(byte) rem8u#15
(byte) rem8u#16
(byte) rem8u#17
(byte) rem8u#18
(byte) rem8u#19
(byte) rem8u#2
(byte) rem8u#20
(byte) rem8u#21
(byte) rem8u#22
(byte) rem8u#23
(byte) rem8u#24
(byte) rem8u#25
(byte) rem8u#26
(byte) rem8u#27
(byte) rem8u#28
(byte) rem8u#29
(byte) rem8u#3
(byte) rem8u#30
(byte) rem8u#4
(byte) rem8u#5
(byte) rem8u#6
(byte) rem8u#7
(byte) rem8u#8
(byte) rem8u#9
(byte) test_idx
(byte) test_idx#0
(byte) test_idx#1
(byte) test_idx#10
(byte) test_idx#11
(byte) test_idx#12
(byte) test_idx#13
(byte) test_idx#14
(byte) test_idx#15
(byte) test_idx#16
(byte) test_idx#2
(byte) test_idx#3
(byte) test_idx#4
(byte) test_idx#5
(byte) test_idx#6
(byte) test_idx#7
(byte) test_idx#8
(byte) test_idx#9
(byte) test_last
(byte) test_last#0
(byte) test_last#1
(byte) test_last#10
(byte) test_last#11
(byte) test_last#12
(byte) test_last#13
(byte) test_last#14
(byte) test_last#15
(byte) test_last#16
(byte) test_last#17
(byte) test_last#18
(byte) test_last#19
(byte) test_last#2
(byte) test_last#20
(byte) test_last#3
(byte) test_last#4
(byte) test_last#5
(byte) test_last#6
(byte) test_last#7
(byte) test_last#8
(byte) test_last#9
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Fixing inline constructor with div16u8u::$4 ← (byte)div16u8u::quotient_hi#1 w= (byte)div16u8u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$0 ← (byte) divr8u::rem#5 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr8u::$1 ← (byte) divr8u::dividend#3 & (number) $80
Adding number conversion cast (unumber) divr8u::$1 in (number~) divr8u::$1 ← (byte) divr8u::dividend#3 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr8u::$2 ← (unumber~) divr8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$5 ← (byte) divr8u::dividend#4 << (number) 1
Adding number conversion cast (unumber) 1 in (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr8u::$4 ← (byte) divr8u::rem#7 | (number) 1
Adding number conversion cast (unumber) divr8u::$4 in (number~) divr8u::$4 ← (byte) divr8u::rem#7 | (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) divr8u::rem#3 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) main::$10 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$10 in (number~) main::$10 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 2 in *((const word*) PRIMES + (unumber~) main::$10) ← (number) 2
Adding number conversion cast (unumber) 2 in (number~) main::$11 ← (number) 2 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$11 in (number~) main::$11 ← (unumber)(number) 2 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 3 in *((const word*) PRIMES + (unumber~) main::$11) ← (number) 3
Adding number conversion cast (unumber) 3 in (word) potential#0 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) test_last#0 ← (number) 2
Adding number conversion cast (unumber) 2 in (word) prime_idx#0 ← (number) 2
Adding number conversion cast (unumber) 2 in (word) potential#1 ← (word) potential#8 + (number) 2
Adding number conversion cast (unumber) 2 in (byte) test_idx#0 ← (number) 2
Adding number conversion cast (unumber) 0 in (bool~) main::$4 ← (byte) rem8u#5 == (number) 0
Adding number conversion cast (unumber) 2 in (word) potential#2 ← (word) potential#10 + (number) 2
Adding number conversion cast (unumber) 2 in (byte) test_idx#2 ← (number) 2
Adding number conversion cast (unumber) $3e8 in (bool~) main::$9 ← (word) prime_idx#7 < (number) $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) divr8u::rem#3 ← (unumber)(number) 0
Inlining cast *((const word*) PRIMES + (unumber~) main::$10) ← (unumber)(number) 2
Inlining cast *((const word*) PRIMES + (unumber~) main::$11) ← (unumber)(number) 3
Inlining cast (word) potential#0 ← (unumber)(number) 3
Inlining cast (byte) test_last#0 ← (unumber)(number) 2
Inlining cast (word) prime_idx#0 ← (unumber)(number) 2
Inlining cast (byte) test_idx#0 ← (unumber)(number) 2
Inlining cast (byte) test_idx#2 ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) div16u8u::quotient_hi#1
Simplifying constant integer cast (byte) div16u8u::quotient_lo#0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $3e8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80
Inferred type updated to byte in (unumber~) divr8u::$4 ← (byte) divr8u::rem#7 | (byte) 1
Inferred type updated to byte in (unumber~) main::$10 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$11 ← (byte) 2 * (const byte) SIZEOF_WORD
Inversing boolean not [122] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [121] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [145] (bool~) divr8u::$3 ← (byte~) divr8u::$1 == (byte) 0 from [144] (bool~) divr8u::$2 ← (byte~) divr8u::$1 != (byte) 0
Inversing boolean not [153] (bool~) divr8u::$8 ← (byte) divr8u::rem#6 < (byte) divr8u::divisor#2 from [152] (bool~) divr8u::$7 ← (byte) divr8u::rem#6 >= (byte) divr8u::divisor#2
Inversing boolean not [219] (bool~) main::$2 ← (word) potential#7 <= (word~) main::$0 from [218] (bool~) main::$1 ← (word) potential#7 > (word~) main::$0
Inversing boolean not [236] (bool~) main::$5 ← (byte) rem8u#5 != (byte) 0 from [235] (bool~) main::$4 ← (byte) rem8u#5 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#23 print_char_cursor#24 print_char_cursor#13 
Alias print_char_cursor#0 = print_char_cursor#12 
Alias print_char_cursor#25 = print_char_cursor#29 
Alias print_char_cursor#14 = print_char_cursor#2 print_char_cursor#15 print_char_cursor#3 
Alias print_char_cursor#17 = print_char_cursor#4 print_char_cursor#5 
Alias mul8u::a#2 = mul8u::a#3 mul8u::a#6 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#3 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias divr8u::rem#0 = divr8u::$0 divr8u::rem#7 
Alias divr8u::dividend#0 = divr8u::$5 divr8u::dividend#8 
Alias divr8u::quotient#1 = divr8u::$6 divr8u::quotient#4 
Alias divr8u::dividend#3 = divr8u::dividend#7 
Alias divr8u::quotient#6 = divr8u::quotient#7 
Alias divr8u::divisor#4 = divr8u::divisor#5 
Alias divr8u::i#5 = divr8u::i#6 
Alias divr8u::rem#1 = divr8u::$4 
Alias divr8u::rem#6 = divr8u::rem#8 
Alias divr8u::divisor#2 = divr8u::divisor#3 
Alias divr8u::i#3 = divr8u::i#4 
Alias divr8u::rem#2 = divr8u::$9 
Alias divr8u::rem#11 = divr8u::rem#9 
Alias divr8u::return#0 = divr8u::quotient#5 divr8u::quotient#8 divr8u::return#4 divr8u::return#1 
Alias rem8u#0 = rem8u#10 rem8u#1 
Alias divr8u::dividend#1 = div16u8u::$0 
Alias divr8u::return#2 = divr8u::return#5 
Alias div16u8u::dividend#1 = div16u8u::dividend#2 
Alias div16u8u::divisor#1 = div16u8u::divisor#2 
Alias rem8u#11 = rem8u#2 
Alias div16u8u::quotient_hi#0 = div16u8u::$1 div16u8u::quotient_hi#1 
Alias divr8u::dividend#2 = div16u8u::$2 
Alias divr8u::return#3 = divr8u::return#6 
Alias rem8u#12 = rem8u#3 rem8u#13 rem8u#4 
Alias div16u8u::quotient_lo#0 = div16u8u::$3 
Alias div16u8u::return#0 = div16u8u::quotient#0 div16u8u::$4 div16u8u::return#3 div16u8u::return#1 
Alias mul8u::return#2 = mul8u::return#4 
Alias potential#15 = potential#7 potential#16 
Alias test_last#13 = test_last#6 test_last#7 
Alias rem8u#25 = rem8u#26 rem8u#29 
Alias prime_idx#18 = prime_idx#19 prime_idx#20 
Alias print_char_cursor#35 = print_char_cursor#36 print_char_cursor#37 
Alias test_idx#7 = test_idx#8 
Alias test_last#14 = test_last#15 test_last#17 
Alias potential#10 = potential#18 potential#9 
Alias prime_idx#14 = prime_idx#15 prime_idx#16 
Alias print_char_cursor#31 = print_char_cursor#32 print_char_cursor#33 
Alias rem8u#14 = rem8u#5 rem8u#27 
Alias prime_idx#11 = prime_idx#6 
Alias potential#11 = potential#17 potential#21 potential#19 potential#12 potential#3 
Alias print_char_cursor#26 = print_char_cursor#30 
Alias test_last#12 = test_last#20 test_last#8 test_last#18 test_last#9 test_last#2 
Alias test_idx#10 = test_idx#16 test_idx#9 test_idx#15 test_idx#13 test_idx#3 
Alias rem8u#15 = rem8u#28 rem8u#23 rem8u#24 rem8u#20 rem8u#6 
Alias prime_idx#1 = prime_idx#12 prime_idx#7 prime_idx#8 prime_idx#2 
Alias print_char_cursor#18 = print_char_cursor#6 
Alias print_char_cursor#19 = print_char_cursor#7 print_char_cursor#20 print_char_cursor#8 
Alias print_screen#0 = print_line_cursor#0 print_char_cursor#9 print_char_cursor#27 print_screen#4 print_line_cursor#4 print_screen#3 print_line_cursor#3 print_screen#2 print_line_cursor#2 print_screen#1 print_line_cursor#1 
Alias potential#20 = potential#4 
Alias test_last#16 = test_last#3 
Alias prime_idx#13 = prime_idx#3 
Alias test_idx#14 = test_idx#4 
Alias rem8u#21 = rem8u#7 
Alias potential#13 = potential#5 potential#14 potential#6 
Alias test_last#10 = test_last#4 test_last#11 test_last#5 
Alias prime_idx#10 = prime_idx#4 prime_idx#9 prime_idx#5 
Alias test_idx#11 = test_idx#5 test_idx#12 test_idx#6 
Alias rem8u#16 = rem8u#8 rem8u#17 rem8u#9 
Alias print_char_cursor#10 = print_char_cursor#21 print_char_cursor#22 print_char_cursor#11 
Successful SSA optimization Pass2AliasElimination
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias mul8u::a#2 = mul8u::a#4 
Alias mul8u::mb#2 = mul8u::mb#3 
Alias divr8u::dividend#3 = divr8u::dividend#4 
Alias divr8u::quotient#3 = divr8u::quotient#6 
Alias divr8u::divisor#2 = divr8u::divisor#4 divr8u::divisor#7 
Alias divr8u::i#2 = divr8u::i#3 divr8u::i#5 
Alias divr8u::dividend#0 = divr8u::dividend#6 
Alias potential#15 = potential#8 
Alias rem8u#22 = rem8u#25 
Alias prime_idx#17 = prime_idx#18 
Alias print_char_cursor#34 = print_char_cursor#35 
Alias test_last#12 = test_last#14 
Alias prime_idx#11 = prime_idx#14 
Alias rem8u#14 = rem8u#15 
Alias print_char_cursor#26 = print_char_cursor#31 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#17
Identical Phi Values (word) print_uint_decimal::w#1 (word) print_uint_decimal::w#0
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#1
Identical Phi Values (byte) mul8u::b#1 (byte) mul8u::b#0
Identical Phi Values (byte) mul8u::a#5 (byte) mul8u::a#1
Identical Phi Values (byte) divr8u::divisor#2 (byte) divr8u::divisor#6
Identical Phi Values (word) div16u8u::dividend#1 (word) div16u8u::dividend#0
Identical Phi Values (byte) div16u8u::divisor#1 (byte) div16u8u::divisor#0
Identical Phi Values (byte) rem8u#18 (byte) rem8u#19
Identical Phi Values (byte) rem8u#11 (byte) rem8u#0
Identical Phi Values (byte) rem8u#12 (byte) rem8u#0
Identical Phi Values (byte) rem8u#30 (byte) rem8u#21
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_screen#0
Identical Phi Values (byte) test_last#12 (byte) test_last#19
Identical Phi Values (word) prime_idx#11 (word) prime_idx#17
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#34
Identical Phi Values (byte) rem8u#14 (byte) rem8u#12
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#17
Identical Phi Values (word) potential#13 (word) potential#11
Identical Phi Values (byte) test_last#10 (byte) test_last#12
Identical Phi Values (word) prime_idx#10 (word) prime_idx#1
Identical Phi Values (byte) test_idx#11 (byte) test_idx#10
Identical Phi Values (byte) rem8u#16 (byte) rem8u#14
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#19
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) utoa::$0 [4] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [8] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [12] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [16] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [33] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [58] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) print_str::$1 [66] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) mul8u::$0 [90] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [93] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) divr8u::$3 [106] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
Simple Condition (bool~) divr8u::$8 [111] if((byte) divr8u::rem#6<(byte) divr8u::divisor#6) goto divr8u::@3
Simple Condition (bool~) divr8u::$10 [116] if((byte) divr8u::i#1!=rangelast(0,7)) goto divr8u::@1
Simple Condition (bool~) main::$2 [155] if((word) potential#15<=(word~) main::$0) goto main::@2
Simple Condition (bool~) main::$5 [169] if((byte) rem8u#0!=(byte) 0) goto main::@4
Simple Condition (bool~) main::$6 [172] if((byte) test_idx#10<=(byte) test_last#19) goto main::@3
Simple Condition (bool~) main::$9 [185] if((word) prime_idx#1<(word) $3e8) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [38] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [37] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Constant right-side identified [139] (byte~) main::$10 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [141] (byte~) main::$11 ← (byte) 2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const byte*) utoa::buffer#5 = decimal_digits
Constant (const byte) utoa::radix#0 = DECIMAL
Constant (const byte*) print_str::str#1 = decimal_digits
Constant (const word) mul8u::res#0 = 0
Constant (const byte) divr8u::quotient#0 = 0
Constant (const byte) divr8u::i#0 = 0
Constant (const byte) divr8u::rem#3 = 0
Constant (const byte) main::$10 = 1*SIZEOF_WORD
Constant (const byte) main::$11 = 2*SIZEOF_WORD
Constant (const word) potential#0 = 3
Constant (const byte) test_last#0 = 2
Constant (const word) prime_idx#0 = 2
Constant (const byte) test_idx#0 = 2
Constant (const byte) test_idx#2 = 2
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const byte) rem8u#21 = 0
Constant (const word) prime_idx#13 = 0
Constant (const word) potential#20 = 0
Constant (const byte) test_idx#14 = 0
Constant (const byte) test_last#16 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [4] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [8] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [12] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [16] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [114] divr8u::i#1 ← ++ divr8u::i#2 to ++
Resolved ranged comparison value [116] if(divr8u::i#1!=rangelast(0,7)) goto divr8u::@1 to (number) 8
De-inlining pointer[w] to *(pointer+w)   [177] *((const word*) PRIMES + (word~) main::$14) ← (word) potential#11
Successful SSA optimization Pass2DeInlineWordDerefIdx
Eliminating unused variable - keeping the phi block (byte) rem8u#19
Eliminating unused variable (word) div16u8u::return#2 and assignment [109] (word) div16u8u::return#2 ← (word) div16u8u::return#0
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) HEXADECIMAL
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const word) prime_idx#13
Eliminating unused constant (const word) potential#20
Eliminating unused constant (const byte) test_idx#14
Eliminating unused constant (const byte) test_last#16
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (word) div16u8u::return#0 and assignment [88] (word) div16u8u::return#0 ← (byte) div16u8u::quotient_hi#0 w= (byte) div16u8u::quotient_lo#0
Eliminating unused variable - keeping the phi block (byte) rem8u#22
Eliminating unused constant (const byte) DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) div16u8u::quotient_hi#0 and assignment [81] (byte) div16u8u::quotient_hi#0 ← (byte) divr8u::return#2
Eliminating unused variable (byte) div16u8u::quotient_lo#0 and assignment [87] (byte) div16u8u::quotient_lo#0 ← (byte) divr8u::return#3
Eliminating unused constant (const byte) rem8u#21
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) divr8u::return#2 and assignment [80] (byte) divr8u::return#2 ← (byte) divr8u::return#0
Eliminating unused variable (byte) divr8u::return#3 and assignment [85] (byte) divr8u::return#3 ← (byte) divr8u::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [8] (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) 8 in [65] if((byte) divr8u::i#1!=(number) 8) goto divr8u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#1
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) utoa::$12 [9] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) utoa::$6 [111] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [3] (byte~) utoa::$4 ← (const byte) utoa::max_digits#1 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) utoa::$4 = utoa::max_digits#1-1
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) utoa::max_digits#2
Eliminating unused constant (const word*) utoa::digit_values#2
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Successful SSA optimization PassNEliminateUnusedVars
Rewriting multiplication to use shift [3] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [77] (byte~) main::$12 ← (byte) test_last#13 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [89] (byte~) main::$13 ← (byte) test_idx#7 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [99] (word~) main::$14 ← (word) prime_idx#1 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const byte) divr8u::rem#3
Inlining constant with var siblings (const word) potential#0
Inlining constant with var siblings (const byte) test_last#0
Inlining constant with var siblings (const word) prime_idx#0
Inlining constant with var siblings (const byte) test_idx#0
Inlining constant with var siblings (const byte) test_idx#2
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined divr8u::rem#3 = (byte) 0
Constant inlined utoa::started#1 = (byte) 1
Constant inlined test_idx#0 = (byte) 2
Constant inlined utoa::started#0 = (byte) 0
Constant inlined test_idx#2 = (byte) 2
Constant inlined main::$10 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$11 = (byte) 2*(const byte) SIZEOF_WORD
Constant inlined divr8u::i#0 = (byte) 0
Constant inlined divr8u::quotient#0 = (byte) 0
Constant inlined mul8u::res#0 = (word) 0
Constant inlined utoa::buffer#5 = (const byte*) decimal_digits
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined prime_idx#0 = (byte) 2
Constant inlined utoa::$4 = (const byte) utoa::max_digits#1-(byte) 1
Constant inlined test_last#0 = (byte) 2
Constant inlined print_str::str#1 = (const byte*) decimal_digits
Constant inlined potential#0 = (byte) 3
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(PRIMES+1*SIZEOF_WORD)
Consolidated array index constant in *(PRIMES+2*SIZEOF_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting divr8u::@7(between divr8u::@3 and divr8u::@1)
Added new block during phi lifting divr8u::@8(between divr8u::@1 and divr8u::@2)
Added new block during phi lifting divr8u::@9(between divr8u::@2 and divr8u::@3)
Added new block during phi lifting main::@12(between main::@11 and main::@1)
Added new block during phi lifting main::@13(between main::@8 and main::@2)
Added new block during phi lifting main::@14(between main::@4 and main::@3)
Added new block during phi lifting main::@15(between main::@9 and main::@4)
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of print_uint_decimal::@1
Adding NOP phi() at start of print_uint_decimal::@2
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of div16u8u::@2
Adding NOP phi() at start of mul8u::@3
CALL GRAPH
Calls in [main] to mul8u:7 div16u8u:20 print_uint_decimal:32 print_char:34 
Calls in [print_uint_decimal] to utoa:51 print_str:53 
Calls in [print_str] to print_char:62 
Calls in [utoa] to utoa_append:92 
Calls in [div16u8u] to divr8u:111 divr8u:118 

Created 35 initial phi equivalence classes
Coalesced [12] test_last#22 ← test_last#1
Coalesced [15] potential#23 ← potential#1
Coalesced [24] potential#25 ← potential#2
Coalesced [37] test_last#21 ← test_last#19
Coalesced [38] potential#22 ← potential#11
Coalesced [39] prime_idx#21 ← prime_idx#1
Coalesced [40] print_char_cursor#41 ← print_char_cursor#17
Coalesced [41] test_idx#17 ← test_idx#10
Coalesced [42] potential#24 ← potential#11
Coalesced [43] test_idx#18 ← test_idx#1
Coalesced (already) [44] potential#26 ← potential#10
Coalesced (already) [45] test_last#23 ← test_last#13
Coalesced [56] print_char_cursor#39 ← print_char_cursor#34
Coalesced [61] print_char::ch#3 ← print_char::ch#0
Coalesced [64] print_str::str#6 ← print_str::str#0
Coalesced (already) [65] print_char_cursor#40 ← print_char_cursor#17
Coalesced [68] utoa::value#17 ← utoa::value#1
Coalesced [80] utoa::value#18 ← utoa::value#2
Coalesced [81] utoa::started#6 ← utoa::started#2
Coalesced [82] utoa::buffer#23 ← utoa::buffer#11
Coalesced [85] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [86] utoa::value#16 ← utoa::value#6
Coalesced (already) [87] utoa::started#5 ← utoa::started#4
Coalesced (already) [88] utoa::buffer#22 ← utoa::buffer#14
Coalesced [96] utoa::value#19 ← utoa::value#0
Coalesced [97] utoa::buffer#24 ← utoa::buffer#4
Coalesced [98] utoa_append::value#6 ← utoa_append::value#0
Coalesced [105] utoa_append::value#7 ← utoa_append::value#1
Coalesced [106] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [109] divr8u::dividend#9 ← divr8u::dividend#1
Coalesced [110] divr8u::divisor#8 ← divr8u::divisor#0
Coalesced [115] divr8u::rem#12 ← divr8u::rem#4
Coalesced [116] divr8u::dividend#10 ← divr8u::dividend#2
Coalesced [117] divr8u::divisor#9 ← divr8u::divisor#1
Coalesced [122] divr8u::rem#13 ← divr8u::rem#10
Coalesced [123] divr8u::dividend#11 ← divr8u::dividend#5
Coalesced [129] divr8u::rem#16 ← divr8u::rem#1
Coalesced [136] divr8u::rem#18 ← divr8u::rem#2
Coalesced [137] divr8u::return#8 ← divr8u::quotient#2
Coalesced [143] divr8u::rem#14 ← divr8u::rem#11
Coalesced [144] divr8u::dividend#12 ← divr8u::dividend#0
Coalesced [145] divr8u::quotient#9 ← divr8u::return#0
Coalesced [146] divr8u::i#7 ← divr8u::i#1
Coalesced [147] divr8u::rem#17 ← divr8u::rem#6
Coalesced [148] divr8u::return#7 ← divr8u::quotient#1
Coalesced [149] divr8u::rem#15 ← divr8u::rem#0
Coalesced [151] mul8u::a#7 ← mul8u::a#1
Coalesced [152] mul8u::mb#6 ← mul8u::mb#0
Coalesced [160] mul8u::res#9 ← mul8u::res#1
Coalesced [164] mul8u::a#8 ← mul8u::a#0
Coalesced [165] mul8u::res#7 ← mul8u::res#6
Coalesced [166] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [167] mul8u::res#8 ← mul8u::res#2
Coalesced down to 21 phi equivalence classes
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@13
Culled Empty Block (label) print_uint_decimal::@2
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) div16u8u::@2
Culled Empty Block (label) divr8u::@7
Culled Empty Block (label) divr8u::@9
Culled Empty Block (label) divr8u::@8
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@6
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of print_uint_decimal::@1
Adding NOP phi() at start of print_str
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2
  [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3
  to:main::@1
main::@1: scope:[main]  from main main::@11
  [2] (byte*) print_char_cursor#34 ← phi( main/(const byte*) print_screen#0 main::@11/(byte*) print_char_cursor#17 )
  [2] (word) prime_idx#17 ← phi( main/(byte) 2 main::@11/(word) prime_idx#1 )
  [2] (word) potential#15 ← phi( main/(byte) 3 main::@11/(word) potential#11 )
  [2] (byte) test_last#13 ← phi( main/(byte) 2 main::@11/(byte) test_last#19 )
  [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1
  [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12)
  [5] (byte) mul8u::a#1 ← (byte) main::p#0
  [6] (byte) mul8u::b#0 ← (byte) main::p#0
  [7] call mul8u 
  [8] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:main::@8
main::@8: scope:[main]  from main::@1
  [9] (word~) main::$0 ← (word) mul8u::return#2
  [10] if((word) potential#15<=(word~) main::$0) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@8
  [11] (byte) test_last#1 ← ++ (byte) test_last#13
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [12] (byte) test_last#19 ← phi( main::@7/(byte) test_last#1 main::@8/(byte) test_last#13 )
  [13] (word) potential#1 ← (word) potential#15 + (byte) 2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [14] (word) potential#10 ← phi( main::@2/(word) potential#1 main::@4/(word) potential#11 )
  [14] (byte) test_idx#7 ← phi( main::@2/(byte) 2 main::@4/(byte) test_idx#10 )
  [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1
  [16] (word) div16u8u::dividend#0 ← (word) potential#10
  [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13)
  [18] call div16u8u 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [19] (byte) test_idx#1 ← ++ (byte) test_idx#7
  [20] if((byte) rem8u#0!=(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [21] (word) potential#2 ← (word) potential#10 + (byte) 2
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@9
  [22] (word) potential#11 ← phi( main::@5/(word) potential#2 main::@9/(word) potential#10 )
  [22] (byte) test_idx#10 ← phi( main::@5/(byte) 2 main::@9/(byte) test_idx#1 )
  [23] if((byte) test_idx#10<=(byte) test_last#19) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [24] (word) prime_idx#1 ← ++ (word) prime_idx#17
  [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1
  [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14
  [27] *((word*~) main::$15) ← (word) potential#11
  [28] (word) print_uint_decimal::w#0 ← (word) potential#11
  [29] call print_uint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  [30] phi()
  [31] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [32] if((word) prime_idx#1<(word) $3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  [33] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 print_str::@2
  [34] (byte) print_char::ch#2 ← phi( main::@10/(byte) ' ' print_str::@2/(byte) print_char::ch#0 )
  [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2
  [36] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [37] return 
  to:@return

(void()) print_uint_decimal((word) print_uint_decimal::w)
print_uint_decimal: scope:[print_uint_decimal]  from main::@6
  [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0
  [39] call utoa 
  to:print_uint_decimal::@1
print_uint_decimal::@1: scope:[print_uint_decimal]  from print_uint_decimal
  [40] phi()
  [41] call print_str 
  to:print_uint_decimal::@return
print_uint_decimal::@return: scope:[print_uint_decimal]  from print_uint_decimal::@1
  [42] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_uint_decimal::@1
  [43] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [44] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#34 print_str::@3/(byte*) print_char_cursor#17 )
  [44] (byte*) print_str::str#2 ← phi( print_str/(const byte*) decimal_digits print_str::@3/(byte*) print_str::str#0 )
  [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [46] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [48] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [49] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_uint_decimal
  [50] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [51] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(const byte*) decimal_digits )
  [51] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [51] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [51] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [52] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [56] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [57] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [60] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [62] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [62] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [62] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [63] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [65] (word) utoa_append::value#0 ← (word) utoa::value#2
  [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [67] call utoa_append 
  [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [69] (word) utoa::value#0 ← (word) utoa_append::return#0
  [70] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [71] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [72] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [72] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [75] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [76] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
div16u8u: scope:[div16u8u]  from main::@3
  [78] (byte) divr8u::dividend#1 ← > (word) div16u8u::dividend#0
  [79] (byte) divr8u::divisor#0 ← (byte) div16u8u::divisor#0
  [80] call divr8u 
  to:div16u8u::@1
div16u8u::@1: scope:[div16u8u]  from div16u8u
  [81] (byte) divr8u::dividend#2 ← < (word) div16u8u::dividend#0
  [82] (byte) divr8u::divisor#1 ← (byte) div16u8u::divisor#0
  [83] (byte) divr8u::rem#4 ← (byte) rem8u#0
  [84] call divr8u 
  to:div16u8u::@return
div16u8u::@return: scope:[div16u8u]  from div16u8u::@1
  [85] return 
  to:@return

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div16u8u div16u8u::@1
  [86] (byte) divr8u::divisor#6 ← phi( div16u8u/(byte) divr8u::divisor#0 div16u8u::@1/(byte) divr8u::divisor#1 )
  [86] (byte) divr8u::dividend#5 ← phi( div16u8u/(byte) divr8u::dividend#1 div16u8u::@1/(byte) divr8u::dividend#2 )
  [86] (byte) divr8u::rem#10 ← phi( div16u8u/(byte) 0 div16u8u::@1/(byte) divr8u::rem#4 )
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [87] (byte) divr8u::i#2 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::i#1 )
  [87] (byte) divr8u::quotient#3 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::return#0 )
  [87] (byte) divr8u::dividend#3 ← phi( divr8u/(byte) divr8u::dividend#5 divr8u::@3/(byte) divr8u::dividend#0 )
  [87] (byte) divr8u::rem#5 ← phi( divr8u/(byte) divr8u::rem#10 divr8u::@3/(byte) divr8u::rem#11 )
  [88] (byte) divr8u::rem#0 ← (byte) divr8u::rem#5 << (byte) 1
  [89] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80
  [90] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [92] (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#0 divr8u::@4/(byte) divr8u::rem#1 )
  [93] (byte) divr8u::dividend#0 ← (byte) divr8u::dividend#3 << (byte) 1
  [94] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1
  [95] if((byte) divr8u::rem#6<(byte) divr8u::divisor#6) goto divr8u::@3
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [96] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1
  [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [98] (byte) divr8u::return#0 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  [98] (byte) divr8u::rem#11 ← phi( divr8u::@2/(byte) divr8u::rem#6 divr8u::@5/(byte) divr8u::rem#2 )
  [99] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  [100] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [101] (byte) rem8u#0 ← (byte) divr8u::rem#11
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [102] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from main::@1
  [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [104] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [104] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [104] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [105] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [106] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [108] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [110] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [111] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [112] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

null depth in calling loop Loop head: print_str::@1 tails: print_str::@3 blocks: print_str::@3 print_str::@2 print_str::@1  in scope print_char

VARIABLE REGISTER WEIGHTS
(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
(word) div16u8u::dividend
(word) div16u8u::dividend#0 420.59999999999997
(byte) div16u8u::divisor
(byte) div16u8u::divisor#0 420.59999999999997
(word) div16u8u::quotient
(byte) div16u8u::quotient_hi
(byte) div16u8u::quotient_lo
(word) div16u8u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 2.0000002E7
(byte) divr8u::dividend
(byte) divr8u::dividend#0 2500000.25
(byte) divr8u::dividend#1 1001.0
(byte) divr8u::dividend#2 667.3333333333334
(byte) divr8u::dividend#3 5001667.333333333
(byte) divr8u::dividend#5 12003.0
(byte) divr8u::divisor
(byte) divr8u::divisor#0 2002.0
(byte) divr8u::divisor#1 1001.0
(byte) divr8u::divisor#6 1333466.933333333
(byte) divr8u::i
(byte) divr8u::i#1 1.50000015E7
(byte) divr8u::i#2 1666666.8333333333
(byte) divr8u::quotient
(byte) divr8u::quotient#1 1.50000015E7
(byte) divr8u::quotient#2 1.0000001E7
(byte) divr8u::quotient#3 2857143.1428571427
(byte) divr8u::rem
(byte) divr8u::rem#0 1.0000001E7
(byte) divr8u::rem#1 2.0000002E7
(byte) divr8u::rem#10 11002.0
(byte) divr8u::rem#11 1.0003334666666666E7
(byte) divr8u::rem#2 2.0000002E7
(byte) divr8u::rem#4 2002.0
(byte) divr8u::rem#5 2.0010003E7
(byte) divr8u::rem#6 1.0000001E7
(byte) divr8u::return
(byte) divr8u::return#0 1.0000001E7
(void()) main()
(word~) main::$0 22.0
(byte~) main::$12 11.0
(byte~) main::$13 50.5
(word~) main::$14 22.0
(word*~) main::$15 22.0
(byte) main::p
(byte) main::p#0 16.5
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 20002.0
(byte) mul8u::a
(byte) mul8u::a#0 10001.0
(byte) mul8u::a#1 37.33333333333333
(byte) mul8u::a#2 6684.166666666666
(byte) mul8u::b
(byte) mul8u::b#0 11.0
(word) mul8u::mb
(word) mul8u::mb#0 202.0
(word) mul8u::mb#1 20002.0
(word) mul8u::mb#2 4300.571428571429
(word) mul8u::res
(word) mul8u::res#1 20002.0
(word) mul8u::res#2 5002.333333333333
(word) mul8u::res#6 10001.0
(word) mul8u::return
(word) mul8u::return#2 22.0
(word) potential
(word) potential#1 22.0
(word) potential#10 59.28571428571429
(word) potential#11 30.545454545454547
(word) potential#15 3.0
(word) potential#2 202.0
(word) prime_idx
(word) prime_idx#1 4.888888888888889
(word) prime_idx#17 1.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 200002.0
(byte) print_char::ch#2 1100002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 210100.40000000002
(byte*) print_char_cursor#17 183335.50000000003
(byte*) print_char_cursor#34 32.64516129032258
(byte*) print_line_cursor
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 200002.0
(byte*) print_str::str#2 100001.0
(void()) print_uint_decimal((word) print_uint_decimal::w)
(word) print_uint_decimal::w
(word) print_uint_decimal::w#0 112.0
(byte) rem8u
(byte) rem8u#0 1233.6666666666665
(byte) test_idx
(byte) test_idx#1 101.0
(byte) test_idx#10 151.5
(byte) test_idx#7 60.599999999999994
(byte) test_last
(byte) test_last#1 22.0
(byte) test_last#13 4.888888888888889
(byte) test_last#19 6.380952380952381
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 200002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 28714.714285714286
(byte*) utoa::buffer#14 150001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 200002.0
(byte) utoa::digit
(byte) utoa::digit#1 200002.0
(byte) utoa::digit#2 28571.714285714286
(word) utoa::digit_value
(word) utoa::digit_value#0 60000.600000000006
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 50000.5
(byte) utoa::started#4 100001.0
(word) utoa::value
(word) utoa::value#0 100001.0
(word) utoa::value#1 551.0
(word) utoa::value#2 57286.42857142857
(word) utoa::value#6 150001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 137500.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.000000001E9
(byte) utoa_append::digit#2 1.0005000015E9
(word) utoa_append::return
(word) utoa_append::return#0 200002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3.333500005E8
(word) utoa_append::value
(word) utoa_append::value#0 366667.3333333334
(word) utoa_append::value#1 2.000000002E9
(word) utoa_append::value#2 5.0018333416666675E8

Initial phi equivalence classes
[ test_last#13 test_last#19 test_last#1 ]
[ prime_idx#17 prime_idx#1 ]
[ test_idx#7 test_idx#10 test_idx#1 ]
[ potential#10 potential#1 potential#15 potential#11 potential#2 ]
[ print_char::ch#2 print_char::ch#0 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ]
[ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ]
[ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
[ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::p#0 to live range equivalence class [ main::p#0 ]
Added variable mul8u::b#0 to live range equivalence class [ mul8u::b#0 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$13 to live range equivalence class [ main::$13 ]
Added variable div16u8u::dividend#0 to live range equivalence class [ div16u8u::dividend#0 ]
Added variable div16u8u::divisor#0 to live range equivalence class [ div16u8u::divisor#0 ]
Added variable main::$14 to live range equivalence class [ main::$14 ]
Added variable main::$15 to live range equivalence class [ main::$15 ]
Added variable print_uint_decimal::w#0 to live range equivalence class [ print_uint_decimal::w#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable divr8u::$1 to live range equivalence class [ divr8u::$1 ]
Added variable rem8u#0 to live range equivalence class [ rem8u#0 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Complete equivalence classes
[ test_last#13 test_last#19 test_last#1 ]
[ prime_idx#17 prime_idx#1 ]
[ test_idx#7 test_idx#10 test_idx#1 ]
[ potential#10 potential#1 potential#15 potential#11 potential#2 ]
[ print_char::ch#2 print_char::ch#0 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ]
[ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ]
[ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
[ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ main::$12 ]
[ main::p#0 ]
[ mul8u::b#0 ]
[ mul8u::return#2 ]
[ main::$0 ]
[ main::$13 ]
[ div16u8u::dividend#0 ]
[ div16u8u::divisor#0 ]
[ main::$14 ]
[ main::$15 ]
[ print_uint_decimal::w#0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ divr8u::$1 ]
[ rem8u#0 ]
[ mul8u::$1 ]
Allocated zp[1]:2 [ test_last#13 test_last#19 test_last#1 ]
Allocated zp[2]:3 [ prime_idx#17 prime_idx#1 ]
Allocated zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ]
Allocated zp[2]:6 [ potential#10 potential#1 potential#15 potential#11 potential#2 ]
Allocated zp[1]:8 [ print_char::ch#2 print_char::ch#0 ]
Allocated zp[2]:9 [ print_str::str#2 print_str::str#0 ]
Allocated zp[2]:11 [ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ]
Allocated zp[1]:13 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:16 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:19 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:21 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ]
Allocated zp[1]:23 [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ]
Allocated zp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
Allocated zp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated zp[1]:26 [ divr8u::i#2 divr8u::i#1 ]
Allocated zp[1]:27 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:30 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[1]:32 [ main::$12 ]
Allocated zp[1]:33 [ main::p#0 ]
Allocated zp[1]:34 [ mul8u::b#0 ]
Allocated zp[2]:35 [ mul8u::return#2 ]
Allocated zp[2]:37 [ main::$0 ]
Allocated zp[1]:39 [ main::$13 ]
Allocated zp[2]:40 [ div16u8u::dividend#0 ]
Allocated zp[1]:42 [ div16u8u::divisor#0 ]
Allocated zp[2]:43 [ main::$14 ]
Allocated zp[2]:45 [ main::$15 ]
Allocated zp[2]:47 [ print_uint_decimal::w#0 ]
Allocated zp[1]:49 [ utoa::$11 ]
Allocated zp[2]:50 [ utoa::buffer#3 ]
Allocated zp[1]:52 [ utoa::$10 ]
Allocated zp[2]:53 [ utoa::digit_value#0 ]
Allocated zp[2]:55 [ utoa_append::buffer#0 ]
Allocated zp[2]:57 [ utoa_append::sub#0 ]
Allocated zp[2]:59 [ utoa_append::return#0 ]
Allocated zp[1]:61 [ divr8u::$1 ]
Allocated zp[1]:62 [ rem8u#0 ]
Allocated zp[1]:63 [ mul8u::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label print_screen = $400
  .label print_char_cursor = $b
  // Remainder after signed 8 bit division
  .label rem8u = $3e
  // The number currently being tested for whether it is a prime
  .label potential = 6
  // The last index to test. It is the smallest index where PRIMES[test_last] > sqr(potential)
  .label test_last = 2
  // The index into PRIMES[] used for prime testing. It runs from 2 to test_last for each number tested.
  .label test_idx = 5
  // The index of the last prime we put into the PRIME[] table
  .label prime_idx = 3
  // main
main: {
    .label __0 = $25
    .label __12 = $20
    .label __13 = $27
    .label __14 = $2b
    .label p = $21
    .label __15 = $2d
    // [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2 -- _deref_pwuc1=vbuc2 
    lda #0
    sta PRIMES+1*SIZEOF_WORD+1
    lda #<2
    sta PRIMES+1*SIZEOF_WORD
    // [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3 -- _deref_pwuc1=vbuc2 
    lda #0
    sta PRIMES+2*SIZEOF_WORD+1
    lda #<3
    sta PRIMES+2*SIZEOF_WORD
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte*) print_char_cursor#34 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (word) prime_idx#17 = (byte) 2 [phi:main->main::@1#1] -- vwuz1=vbuc1 
    lda #<2
    sta.z prime_idx
    lda #>2
    sta.z prime_idx+1
    // [2] phi (word) potential#15 = (byte) 3 [phi:main->main::@1#2] -- vwuz1=vbuc1 
    lda #<3
    sta.z potential
    lda #>3
    sta.z potential+1
    // [2] phi (byte) test_last#13 = (byte) 2 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #2
    sta.z test_last
    jmp __b1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [2] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#17 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi (word) prime_idx#17 = (word) prime_idx#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi (word) potential#15 = (word) potential#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi (byte) test_last#13 = (byte) test_last#19 [phi:main::@11->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z test_last
    asl
    sta.z __12
    // [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12) -- vbuz1=_byte_pwuc1_derefidx_vbuz2 
    ldy.z __12
    lda PRIMES,y
    sta.z p
    // [5] (byte) mul8u::a#1 ← (byte) main::p#0 -- vbuz1=vbuz2 
    lda.z p
    sta.z mul8u.a
    // [6] (byte) mul8u::b#0 ← (byte) main::p#0 -- vbuz1=vbuz2 
    lda.z p
    sta.z mul8u.b
    // [7] call mul8u 
    jsr mul8u
    // [8] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp __b8
    // main::@8
  __b8:
    // [9] (word~) main::$0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z __0
    lda.z mul8u.return+1
    sta.z __0+1
    // [10] if((word) potential#15<=(word~) main::$0) goto main::@2 -- vwuz1_le_vwuz2_then_la1 
    lda.z potential+1
    cmp.z __0+1
    bne !+
    lda.z potential
    cmp.z __0
    beq __b2_from___b8
  !:
    bcc __b2_from___b8
    jmp __b7
    // main::@7
  __b7:
    // [11] (byte) test_last#1 ← ++ (byte) test_last#13 -- vbuz1=_inc_vbuz1 
    inc.z test_last
    // [12] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
  __b2_from___b7:
  __b2_from___b8:
    // [12] phi (byte) test_last#19 = (byte) test_last#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [13] (word) potential#1 ← (word) potential#15 + (byte) 2 -- vwuz1=vwuz1_plus_vbuc1 
    lda #2
    clc
    adc.z potential
    sta.z potential
    bcc !+
    inc.z potential+1
  !:
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [14] phi (word) potential#10 = (word) potential#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [14] phi (byte) test_idx#7 = (byte) 2 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #2
    sta.z test_idx
    jmp __b3
    // [14] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [14] phi (word) potential#10 = (word) potential#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [14] phi (byte) test_idx#7 = (byte) test_idx#10 [phi:main::@4->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z test_idx
    asl
    sta.z __13
    // [16] (word) div16u8u::dividend#0 ← (word) potential#10 -- vwuz1=vwuz2 
    lda.z potential
    sta.z div16u8u.dividend
    lda.z potential+1
    sta.z div16u8u.dividend+1
    // [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13) -- vbuz1=_byte_pwuc1_derefidx_vbuz2 
    ldy.z __13
    lda PRIMES,y
    sta.z div16u8u.divisor
    // [18] call div16u8u 
    jsr div16u8u
    jmp __b9
    // main::@9
  __b9:
    // [19] (byte) test_idx#1 ← ++ (byte) test_idx#7 -- vbuz1=_inc_vbuz1 
    inc.z test_idx
    // [20] if((byte) rem8u#0!=(byte) 0) goto main::@4 -- vbuz1_neq_0_then_la1 
    lda.z rem8u
    cmp #0
    bne __b4_from___b9
    jmp __b5
    // main::@5
  __b5:
    // [21] (word) potential#2 ← (word) potential#10 + (byte) 2 -- vwuz1=vwuz1_plus_vbuc1 
    lda #2
    clc
    adc.z potential
    sta.z potential
    bcc !+
    inc.z potential+1
  !:
    // [22] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [22] phi (word) potential#11 = (word) potential#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [22] phi (byte) test_idx#10 = (byte) 2 [phi:main::@5->main::@4#1] -- vbuz1=vbuc1 
    lda #2
    sta.z test_idx
    jmp __b4
    // [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [22] phi (word) potential#11 = (word) potential#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [22] phi (byte) test_idx#10 = (byte) test_idx#1 [phi:main::@9->main::@4#1] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [23] if((byte) test_idx#10<=(byte) test_last#19) goto main::@3 -- vbuz1_le_vbuz2_then_la1 
    lda.z test_last
    cmp.z test_idx
    bcs __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [24] (word) prime_idx#1 ← ++ (word) prime_idx#17 -- vwuz1=_inc_vwuz1 
    inc.z prime_idx
    bne !+
    inc.z prime_idx+1
  !:
    // [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z prime_idx
    asl
    sta.z __14
    lda.z prime_idx+1
    rol
    sta.z __14+1
    // [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14 -- pwuz1=pwuc1_plus_vwuz2 
    lda.z __14
    clc
    adc #<PRIMES
    sta.z __15
    lda.z __14+1
    adc #>PRIMES
    sta.z __15+1
    // [27] *((word*~) main::$15) ← (word) potential#11 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z potential
    sta (__15),y
    iny
    lda.z potential+1
    sta (__15),y
    // [28] (word) print_uint_decimal::w#0 ← (word) potential#11 -- vwuz1=vwuz2 
    lda.z potential
    sta.z print_uint_decimal.w
    lda.z potential+1
    sta.z print_uint_decimal.w+1
    // [29] call print_uint_decimal 
    jsr print_uint_decimal
    // [30] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
  __b10_from___b6:
    jmp __b10
    // main::@10
  __b10:
    // [31] call print_char 
    // [34] phi from main::@10 to print_char [phi:main::@10->print_char]
  print_char_from___b10:
    // [34] phi (byte) print_char::ch#2 = (byte) ' ' [phi:main::@10->print_char#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b11
    // main::@11
  __b11:
    // [32] if((word) prime_idx#1<(word) $3e8) goto main::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z prime_idx+1
    cmp #>$3e8
    bcc __b1_from___b11
    bne !+
    lda.z prime_idx
    cmp #<$3e8
    bcc __b1_from___b11
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [33] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp(8) ch)
print_char: {
    .label ch = 8
    // [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [36] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#1 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [37] return 
    rts
}
  // print_uint_decimal
// Print a unsigned int as DECIMAL
// print_uint_decimal(word zp($2f) w)
print_uint_decimal: {
    .label w = $2f
    // [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0 -- vwuz1=vwuz2 
    lda.z w
    sta.z utoa.value
    lda.z w+1
    sta.z utoa.value+1
    // [39] call utoa 
    // [50] phi from print_uint_decimal to utoa [phi:print_uint_decimal->utoa]
  utoa_from_print_uint_decimal:
    jsr utoa
    // [40] phi from print_uint_decimal to print_uint_decimal::@1 [phi:print_uint_decimal->print_uint_decimal::@1]
  __b1_from_print_uint_decimal:
    jmp __b1
    // print_uint_decimal::@1
  __b1:
    // [41] call print_str 
    // [43] phi from print_uint_decimal::@1 to print_str [phi:print_uint_decimal::@1->print_str]
  print_str_from___b1:
    jsr print_str
    jmp __breturn
    // print_uint_decimal::@return
  __breturn:
    // [42] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(9) str)
print_str: {
    .label str = 9
    // [44] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [44] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#34 [phi:print_str->print_str::@1#0] -- register_copy 
    // [44] phi (byte*) print_str::str#2 = (const byte*) decimal_digits [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [46] return 
    rts
    // print_str::@2
  __b2:
    // [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [48] call print_char 
    // [34] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [34] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#0] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [49] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [44] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [44] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#17 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    // [44] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($e) value, byte* zp($32) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $34
    .label __11 = $31
    .label digit_value = $35
    .label buffer = $32
    .label digit = $d
    .label value = $e
    .label buffer_1 = $11
    .label started = $10
    // [51] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [51] phi (byte*) utoa::buffer#11 = (const byte*) decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer_1
    lda #>decimal_digits
    sta.z buffer_1+1
    // [51] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [51] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [51] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [52] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [56] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [57] return 
    rts
    // utoa::@2
  __b2:
    // [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [60] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [62] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [62] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [62] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [62] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [63] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [51] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [51] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [51] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [51] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [51] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [65] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [67] call utoa_append 
    // [71] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [69] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [70] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [62] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [62] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [62] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [62] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($37) buffer, word zp($13) value, word zp($39) sub)
utoa_append: {
    .label buffer = $37
    .label value = $13
    .label sub = $39
    .label return = $3b
    .label digit = $15
    // [72] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [72] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [72] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [75] return 
    rts
    // utoa_append::@2
  __b2:
    // [76] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [72] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [72] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [72] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // div16u8u
// Divide unsigned 16-bit unsigned long dividend with a 8-bit unsigned char divisor
// The 8-bit unsigned char remainder can be found in rem8u after the division
// div16u8u(word zp($28) dividend, byte zp($2a) divisor)
div16u8u: {
    .label dividend = $28
    .label divisor = $2a
    // [78] (byte) divr8u::dividend#1 ← > (word) div16u8u::dividend#0 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z divr8u.dividend
    // [79] (byte) divr8u::divisor#0 ← (byte) div16u8u::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z divr8u.divisor
    // [80] call divr8u 
    // [86] phi from div16u8u to divr8u [phi:div16u8u->divr8u]
  divr8u_from_div16u8u:
    // [86] phi (byte) divr8u::divisor#6 = (byte) divr8u::divisor#0 [phi:div16u8u->divr8u#0] -- register_copy 
    // [86] phi (byte) divr8u::dividend#5 = (byte) divr8u::dividend#1 [phi:div16u8u->divr8u#1] -- register_copy 
    // [86] phi (byte) divr8u::rem#10 = (byte) 0 [phi:div16u8u->divr8u#2] -- vbuz1=vbuc1 
    lda #0
    sta.z divr8u.rem
    jsr divr8u
    jmp __b1
    // div16u8u::@1
  __b1:
    // [81] (byte) divr8u::dividend#2 ← < (word) div16u8u::dividend#0 -- vbuz1=_lo_vwuz2 
    lda.z dividend
    sta.z divr8u.dividend
    // [82] (byte) divr8u::divisor#1 ← (byte) div16u8u::divisor#0 -- vbuz1=vbuz2 
    lda.z divisor
    sta.z divr8u.divisor
    // [83] (byte) divr8u::rem#4 ← (byte) rem8u#0 -- vbuz1=vbuz2 
    lda.z rem8u
    sta.z divr8u.rem
    // [84] call divr8u 
    // [86] phi from div16u8u::@1 to divr8u [phi:div16u8u::@1->divr8u]
  divr8u_from___b1:
    // [86] phi (byte) divr8u::divisor#6 = (byte) divr8u::divisor#1 [phi:div16u8u::@1->divr8u#0] -- register_copy 
    // [86] phi (byte) divr8u::dividend#5 = (byte) divr8u::dividend#2 [phi:div16u8u::@1->divr8u#1] -- register_copy 
    // [86] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#4 [phi:div16u8u::@1->divr8u#2] -- register_copy 
    jsr divr8u
    jmp __breturn
    // div16u8u::@return
  __breturn:
    // [85] return 
    rts
}
  // divr8u
// Performs division on two 8 bit unsigned chars and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zp($18) dividend, byte zp($16) divisor, byte zp($17) rem)
divr8u: {
    .label __1 = $3d
    .label rem = $17
    .label dividend = $18
    .label quotient = $19
    .label i = $1a
    .label return = $19
    .label divisor = $16
    // [87] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  __b1_from_divr8u:
    // [87] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [87] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z quotient
    // [87] phi (byte) divr8u::dividend#3 = (byte) divr8u::dividend#5 [phi:divr8u->divr8u::@1#2] -- register_copy 
    // [87] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#10 [phi:divr8u->divr8u::@1#3] -- register_copy 
    jmp __b1
    // [87] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  __b1_from___b3:
    // [87] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
    // [87] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#0 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
    // [87] phi (byte) divr8u::dividend#3 = (byte) divr8u::dividend#0 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
    // [87] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#11 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp __b1
    // divr8u::@1
  __b1:
    // [88] (byte) divr8u::rem#0 ← (byte) divr8u::rem#5 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z rem
    // [89] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z dividend
    sta.z __1
    // [90] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr8u::@4
  __b4:
    // [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1 -- vbuz1=vbuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [92] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [92] phi (byte) divr8u::rem#6 = (byte) divr8u::rem#0 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp __b2
    // divr8u::@2
  __b2:
    // [93] (byte) divr8u::dividend#0 ← (byte) divr8u::dividend#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z dividend
    // [94] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z quotient
    // [95] if((byte) divr8u::rem#6<(byte) divr8u::divisor#6) goto divr8u::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
    jmp __b5
    // divr8u::@5
  __b5:
    // [96] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc.z quotient
    // [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    // [98] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [98] phi (byte) divr8u::return#0 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
    // [98] phi (byte) divr8u::rem#11 = (byte) divr8u::rem#6 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp __b3
    // divr8u::@3
  __b3:
    // [99] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [100] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b1_from___b3
    jmp __b6
    // divr8u::@6
  __b6:
    // [101] (byte) rem8u#0 ← (byte) divr8u::rem#11 -- vbuz1=vbuz2 
    lda.z rem
    sta.z rem8u
    jmp __breturn
    // divr8u::@return
  __breturn:
    // [102] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte zp($1b) a, byte zp($22) b)
mul8u: {
    .label __1 = $3f
    .label mb = $1e
    .label a = $1b
    .label res = $1c
    .label b = $22
    .label return = $23
    // [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 -- vwuz1=_word_vbuz2 
    lda.z b
    sta.z mb
    lda #0
    sta.z mb+1
    // [104] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [104] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [104] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [104] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [105] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [106] return 
    rts
    // mul8u::@2
  __b2:
    // [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [108] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [110] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [110] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [111] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [112] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [104] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [104] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [104] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [104] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  // Table that is filled with the primes we are finding
  PRIMES: .fill 2*$3e8, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$12 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$12 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ test_last#13 test_last#19 test_last#1 ]
Statement [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12) [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::p#0 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::p#0 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [8] (word) mul8u::return#2 ← (word) mul8u::res#2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::return#2 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::return#2 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [9] (word~) main::$0 ← (word) mul8u::return#2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$0 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$0 ] { }  ) always clobbers reg byte a 
Statement [10] if((word) potential#15<=(word~) main::$0) goto main::@2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 ] { }  ) always clobbers reg byte a 
Statement [13] (word) potential#1 ← (word) potential#15 + (byte) 2 [ prime_idx#17 print_char_cursor#34 test_last#19 potential#1 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 potential#1 ] { }  ) always clobbers reg byte a 
Statement [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ]
Statement [16] (word) div16u8u::dividend#0 ← (word) potential#10 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 div16u8u::dividend#0 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 div16u8u::dividend#0 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:39 [ main::$13 ]
Statement [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13) [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [21] (word) potential#2 ← (word) potential#10 + (byte) 2 [ prime_idx#17 print_char_cursor#34 test_last#19 potential#2 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 potential#2 ] { }  ) always clobbers reg byte a 
Statement [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$14 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$14 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$15 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$15 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [27] *((word*~) main::$15) ← (word) potential#11 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ test_last#13 test_last#19 test_last#1 ]
Statement [28] (word) print_uint_decimal::w#0 ← (word) potential#11 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 print_uint_decimal::w#0 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 print_uint_decimal::w#0 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [32] if((word) prime_idx#1<(word) $3e8) goto main::@1 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#17 ] (  [ test_last#19 potential#11 prime_idx#1 print_char_cursor#17 ] { }  ) always clobbers reg byte a 
Statement [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2 [ print_char_cursor#1 ] ( print_char:31 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#1 ] { }  print_uint_decimal:29::print_str:41::print_char:48 [ test_last#19 potential#11 prime_idx#1 print_str::str#2 print_char_cursor#1 ] { { potential#11 = print_uint_decimal::w#0 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0 [ print_char_cursor#34 utoa::value#1 ] ( print_uint_decimal:29 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::value#1 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#1 print_str::str#2 ] ( print_uint_decimal:29::print_str:41 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#1 print_str::str#2 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a reg byte y 
Statement [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char::ch#0 print_char_cursor#1 print_str::str#2 ] ( print_uint_decimal:29::print_str:41 [ test_last#19 potential#11 prime_idx#1 print_char::ch#0 print_char_cursor#1 print_str::str#2 ] { { potential#11 = print_uint_decimal::w#0 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ utoa::buffer#11 utoa::$11 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#11 utoa::$11 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ utoa::buffer#11 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#11 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ utoa::buffer#3 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#3 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [56] *((byte*) utoa::buffer#3) ← (byte) 0 [ ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ utoa::started#2 utoa::started#4 ]
Statement [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [65] (word) utoa_append::value#0 ← (word) utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [69] (word) utoa::value#0 ← (word) utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:13 [ utoa::digit#2 utoa::digit#1 ]
Statement [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1 [ divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ div16u8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ divr8u::i#2 divr8u::i#1 ]
Statement [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6 [ divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Statement [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::a#1 mul8u::mb#0 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$12 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$12 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12) [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::p#0 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::p#0 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [8] (word) mul8u::return#2 ← (word) mul8u::res#2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::return#2 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::return#2 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [9] (word~) main::$0 ← (word) mul8u::return#2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$0 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$0 ] { }  ) always clobbers reg byte a 
Statement [10] if((word) potential#15<=(word~) main::$0) goto main::@2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 ] { }  ) always clobbers reg byte a 
Statement [13] (word) potential#1 ← (word) potential#15 + (byte) 2 [ prime_idx#17 print_char_cursor#34 test_last#19 potential#1 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 potential#1 ] { }  ) always clobbers reg byte a 
Statement [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [16] (word) div16u8u::dividend#0 ← (word) potential#10 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 div16u8u::dividend#0 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 div16u8u::dividend#0 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13) [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [21] (word) potential#2 ← (word) potential#10 + (byte) 2 [ prime_idx#17 print_char_cursor#34 test_last#19 potential#2 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 potential#2 ] { }  ) always clobbers reg byte a 
Statement [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$14 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$14 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$15 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$15 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [27] *((word*~) main::$15) ← (word) potential#11 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a reg byte y 
Statement [28] (word) print_uint_decimal::w#0 ← (word) potential#11 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 print_uint_decimal::w#0 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 print_uint_decimal::w#0 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [32] if((word) prime_idx#1<(word) $3e8) goto main::@1 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#17 ] (  [ test_last#19 potential#11 prime_idx#1 print_char_cursor#17 ] { }  ) always clobbers reg byte a 
Statement [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2 [ print_char_cursor#1 ] ( print_char:31 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#1 ] { }  print_uint_decimal:29::print_str:41::print_char:48 [ test_last#19 potential#11 prime_idx#1 print_str::str#2 print_char_cursor#1 ] { { potential#11 = print_uint_decimal::w#0 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0 [ print_char_cursor#34 utoa::value#1 ] ( print_uint_decimal:29 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::value#1 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#1 print_str::str#2 ] ( print_uint_decimal:29::print_str:41 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#1 print_str::str#2 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a reg byte y 
Statement [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char::ch#0 print_char_cursor#1 print_str::str#2 ] ( print_uint_decimal:29::print_str:41 [ test_last#19 potential#11 prime_idx#1 print_char::ch#0 print_char_cursor#1 print_str::str#2 ] { { potential#11 = print_uint_decimal::w#0 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ utoa::buffer#11 utoa::$11 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#11 utoa::$11 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ utoa::buffer#11 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#11 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ utoa::buffer#3 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#3 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [56] *((byte*) utoa::buffer#3) ← (byte) 0 [ ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [65] (word) utoa_append::value#0 ← (word) utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [69] (word) utoa::value#0 ← (word) utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [89] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80 [ divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#0 divr8u::$1 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#0 divr8u::$1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#0 divr8u::$1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ]
Statement [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1 [ divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Statement [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6 [ divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Statement [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::a#1 mul8u::mb#0 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$12 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$12 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12) [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::p#0 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::p#0 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [8] (word) mul8u::return#2 ← (word) mul8u::res#2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::return#2 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::return#2 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [9] (word~) main::$0 ← (word) mul8u::return#2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$0 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 main::$0 ] { }  ) always clobbers reg byte a 
Statement [10] if((word) potential#15<=(word~) main::$0) goto main::@2 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 ] (  [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 ] { }  ) always clobbers reg byte a 
Statement [13] (word) potential#1 ← (word) potential#15 + (byte) 2 [ prime_idx#17 print_char_cursor#34 test_last#19 potential#1 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 potential#1 ] { }  ) always clobbers reg byte a 
Statement [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [16] (word) div16u8u::dividend#0 ← (word) potential#10 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 div16u8u::dividend#0 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 main::$13 div16u8u::dividend#0 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13) [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 ] { { potential#10 = div16u8u::dividend#0 } }  ) always clobbers reg byte a 
Statement [21] (word) potential#2 ← (word) potential#10 + (byte) 2 [ prime_idx#17 print_char_cursor#34 test_last#19 potential#2 ] (  [ prime_idx#17 print_char_cursor#34 test_last#19 potential#2 ] { }  ) always clobbers reg byte a 
Statement [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$14 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$14 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$15 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 main::$15 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [27] *((word*~) main::$15) ← (word) potential#11 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a reg byte y 
Statement [28] (word) print_uint_decimal::w#0 ← (word) potential#11 [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 print_uint_decimal::w#0 ] (  [ print_char_cursor#34 test_last#19 potential#11 prime_idx#1 print_uint_decimal::w#0 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a 
Statement [32] if((word) prime_idx#1<(word) $3e8) goto main::@1 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#17 ] (  [ test_last#19 potential#11 prime_idx#1 print_char_cursor#17 ] { }  ) always clobbers reg byte a 
Statement [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2 [ print_char_cursor#1 ] ( print_char:31 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#1 ] { }  print_uint_decimal:29::print_str:41::print_char:48 [ test_last#19 potential#11 prime_idx#1 print_str::str#2 print_char_cursor#1 ] { { potential#11 = print_uint_decimal::w#0 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0 [ print_char_cursor#34 utoa::value#1 ] ( print_uint_decimal:29 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::value#1 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#1 print_str::str#2 ] ( print_uint_decimal:29::print_str:41 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#1 print_str::str#2 ] { { potential#11 = print_uint_decimal::w#0 } }  ) always clobbers reg byte a reg byte y 
Statement [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char::ch#0 print_char_cursor#1 print_str::str#2 ] ( print_uint_decimal:29::print_str:41 [ test_last#19 potential#11 prime_idx#1 print_char::ch#0 print_char_cursor#1 print_str::str#2 ] { { potential#11 = print_uint_decimal::w#0 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ utoa::buffer#11 utoa::$11 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#11 utoa::$11 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ utoa::buffer#11 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#11 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ utoa::buffer#3 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::buffer#3 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [56] *((byte*) utoa::buffer#3) ← (byte) 0 [ ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [65] (word) utoa_append::value#0 ← (word) utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [69] (word) utoa::value#0 ← (word) utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( print_uint_decimal:29::utoa:39 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_uint_decimal:29::utoa:39::utoa_append:67 [ test_last#19 potential#11 prime_idx#1 print_char_cursor#34 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { potential#11 = print_uint_decimal::w#0 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [89] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80 [ divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#0 divr8u::$1 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#0 divr8u::$1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#0 divr8u::$1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Statement [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1 [ divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::dividend#3 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Statement [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6 [ divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] ( div16u8u:18::divr8u:80 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 div16u8u::dividend#0 div16u8u::divisor#0 divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::dividend#1 = divr8u::dividend#5 } { divr8u::divisor#0 = divr8u::divisor#6 div16u8u::divisor#0 } }  div16u8u:18::divr8u:84 [ prime_idx#17 print_char_cursor#34 test_last#19 test_idx#7 potential#10 divr8u::divisor#6 divr8u::i#2 divr8u::dividend#0 divr8u::quotient#2 divr8u::rem#2 ] { { potential#10 = div16u8u::dividend#0 } { divr8u::rem#10 = divr8u::rem#4 rem8u#0 } { divr8u::dividend#2 = divr8u::dividend#5 } { divr8u::divisor#1 = divr8u::divisor#6 div16u8u::divisor#0 } }  ) always clobbers reg byte a 
Statement [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::a#1 mul8u::mb#0 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( mul8u:7 [ test_last#13 potential#15 prime_idx#17 print_char_cursor#34 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = main::p#0 mul8u::b#0 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ test_last#13 test_last#19 test_last#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ prime_idx#17 prime_idx#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ potential#10 potential#1 potential#15 potential#11 potential#2 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ print_char::ch#2 print_char::ch#0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:9 [ print_str::str#2 print_str::str#0 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ utoa::started#2 utoa::started#4 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:21 , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ] : zp[1]:22 , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ divr8u::i#2 divr8u::i#1 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp[1]:27 , reg byte x , reg byte y , 
Potential registers zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ main::$12 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ main::p#0 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ mul8u::b#0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ mul8u::return#2 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ main::$0 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ main::$13 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[2]:40 [ div16u8u::dividend#0 ] : zp[2]:40 , 
Potential registers zp[1]:42 [ div16u8u::divisor#0 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[2]:43 [ main::$14 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ main::$15 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ print_uint_decimal::w#0 ] : zp[2]:47 , 
Potential registers zp[1]:49 [ utoa::$11 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:50 [ utoa::buffer#3 ] : zp[2]:50 , 
Potential registers zp[1]:52 [ utoa::$10 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:53 [ utoa::digit_value#0 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ utoa_append::buffer#0 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ utoa_append::sub#0 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ utoa_append::return#0 ] : zp[2]:59 , 
Potential registers zp[1]:61 [ divr8u::$1 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ rem8u#0 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ mul8u::$1 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [utoa_append] 2,500,550,003.5: zp[2]:19 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 2,000,500,002.5: zp[1]:21 [ utoa_append::digit#2 utoa_append::digit#1 ] 333,350,000.5: zp[2]:57 [ utoa_append::sub#0 ] 200,002: zp[2]:59 [ utoa_append::return#0 ] 137,500.25: zp[2]:55 [ utoa_append::buffer#0 ] 
Uplift Scope [divr8u] 90,026,347.67: zp[1]:23 [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ] 37,857,146.64: zp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ] 20,000,002: zp[1]:61 [ divr8u::$1 ] 16,666,668.33: zp[1]:26 [ divr8u::i#2 divr8u::i#1 ] 7,515,338.92: zp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ] 1,336,469.93: zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ] 
Uplift Scope [utoa] 378,718.21: zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 307,839.93: zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 228,573.71: zp[1]:13 [ utoa::digit#2 utoa::digit#1 ] 200,002: zp[1]:52 [ utoa::$10 ] 150,001.5: zp[1]:16 [ utoa::started#2 utoa::started#4 ] 60,000.6: zp[2]:53 [ utoa::digit_value#0 ] 2,002: zp[1]:49 [ utoa::$11 ] 2,002: zp[2]:50 [ utoa::buffer#3 ] 
Uplift Scope [print_char] 1,300,004: zp[1]:8 [ print_char::ch#2 print_char::ch#0 ] 
Uplift Scope [] 393,468.55: zp[2]:11 [ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ] 1,233.67: zp[1]:62 [ rem8u#0 ] 316.83: zp[2]:6 [ potential#10 potential#1 potential#15 potential#11 potential#2 ] 313.1: zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ] 33.27: zp[1]:2 [ test_last#13 test_last#19 test_last#1 ] 5.89: zp[2]:3 [ prime_idx#17 prime_idx#1 ] 
Uplift Scope [print_str] 300,003: zp[2]:9 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [mul8u] 35,005.33: zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,504.57: zp[2]:30 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 20,002: zp[1]:63 [ mul8u::$1 ] 16,722.5: zp[1]:27 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 22: zp[2]:35 [ mul8u::return#2 ] 11: zp[1]:34 [ mul8u::b#0 ] 
Uplift Scope [div16u8u] 420.6: zp[2]:40 [ div16u8u::dividend#0 ] 420.6: zp[1]:42 [ div16u8u::divisor#0 ] 
Uplift Scope [main] 50.5: zp[1]:39 [ main::$13 ] 22: zp[2]:37 [ main::$0 ] 22: zp[2]:43 [ main::$14 ] 22: zp[2]:45 [ main::$15 ] 16.5: zp[1]:33 [ main::p#0 ] 11: zp[1]:32 [ main::$12 ] 
Uplift Scope [print_uint_decimal] 112: zp[2]:47 [ print_uint_decimal::w#0 ] 
Uplift Scope [RADIX] 

Uplifting [utoa_append] best 204628 combination zp[2]:19 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:57 [ utoa_append::sub#0 ] zp[2]:59 [ utoa_append::return#0 ] zp[2]:55 [ utoa_append::buffer#0 ] 
Uplifting [divr8u] best 183619 combination reg byte y [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ] zp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ] reg byte a [ divr8u::$1 ] reg byte x [ divr8u::i#2 divr8u::i#1 ] zp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ] zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ] 
Limited combination testing to 100 combinations of 972 possible.
Uplifting [utoa] best 182315 combination zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:13 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:53 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:50 [ utoa::buffer#3 ] 
Uplifting [print_char] best 182009 combination reg byte a [ print_char::ch#2 print_char::ch#0 ] 
Uplifting [] best 181703 combination zp[2]:11 [ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ] reg byte y [ rem8u#0 ] zp[2]:6 [ potential#10 potential#1 potential#15 potential#11 potential#2 ] zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ] zp[1]:2 [ test_last#13 test_last#19 test_last#1 ] zp[2]:3 [ prime_idx#17 prime_idx#1 ] 
Uplifting [print_str] best 181703 combination zp[2]:9 [ print_str::str#2 print_str::str#0 ] 
Uplifting [mul8u] best 180740 combination zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:30 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp[2]:35 [ mul8u::return#2 ] reg byte a [ mul8u::b#0 ] 
Uplifting [div16u8u] best 180740 combination zp[2]:40 [ div16u8u::dividend#0 ] zp[1]:42 [ div16u8u::divisor#0 ] 
Uplifting [main] best 180230 combination reg byte x [ main::$13 ] zp[2]:37 [ main::$0 ] zp[2]:43 [ main::$14 ] zp[2]:45 [ main::$15 ] reg byte a [ main::p#0 ] reg byte a [ main::$12 ] 
Uplifting [print_uint_decimal] best 180230 combination zp[2]:47 [ print_uint_decimal::w#0 ] 
Uplifting [RADIX] best 180230 combination 
Attempting to uplift remaining variables inzp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
Uplifting [divr8u] best 180230 combination zp[1]:25 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ] 
Attempting to uplift remaining variables inzp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
Uplifting [divr8u] best 180230 combination zp[1]:24 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ] 
Attempting to uplift remaining variables inzp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ]
Uplifting [divr8u] best 180230 combination zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ] 
Attempting to uplift remaining variables inzp[1]:13 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 180230 combination zp[1]:13 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:42 [ div16u8u::divisor#0 ]
Uplifting [div16u8u] best 180230 combination zp[1]:42 [ div16u8u::divisor#0 ] 
Attempting to uplift remaining variables inzp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ]
Uplifting [] best 180230 combination zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ test_last#13 test_last#19 test_last#1 ]
Uplifting [] best 180230 combination zp[1]:2 [ test_last#13 test_last#19 test_last#1 ] 
Coalescing zero page register [ zp[1]:22 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 ] ] with [ zp[1]:42 [ div16u8u::divisor#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:6 [ potential#10 potential#1 potential#15 potential#11 potential#2 ] ] with [ zp[2]:40 [ div16u8u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ potential#10 potential#1 potential#15 potential#11 potential#2 div16u8u::dividend#0 ] ] with [ zp[2]:47 [ print_uint_decimal::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:19 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:59 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:50 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:55 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:35 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:43 [ main::$14 ] ] with [ zp[2]:45 [ main::$15 ] ] - score: 1
Coalescing zero page register [ zp[2]:53 [ utoa::digit_value#0 ] ] with [ zp[2]:57 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp[2]:37 [ main::$0 ] ] - score: 1
Coalescing zero page register [ zp[1]:13 [ utoa::digit#2 utoa::digit#1 ] ] with [ zp[1]:5 [ test_idx#7 test_idx#10 test_idx#1 ] ]
Coalescing zero page register [ zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:9 [ print_str::str#2 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:28 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 main::$0 ] ] with [ zp[2]:17 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[2]:43 [ main::$14 main::$15 ] ] with [ zp[2]:30 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ]
Coalescing zero page register [ zp[2]:43 [ main::$14 main::$15 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ] with [ zp[2]:14 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 print_str::str#2 print_str::str#0 ] ]
Allocated (was zp[2]:6) zp[2]:5 [ potential#10 potential#1 potential#15 potential#11 potential#2 div16u8u::dividend#0 print_uint_decimal::w#0 ]
Allocated (was zp[2]:11) zp[2]:7 [ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ]
Allocated (was zp[1]:13) zp[1]:9 [ utoa::digit#2 utoa::digit#1 test_idx#7 test_idx#10 test_idx#1 ]
Allocated (was zp[1]:22) zp[1]:10 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 div16u8u::divisor#0 ]
Allocated (was zp[1]:24) zp[1]:11 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
Allocated (was zp[1]:25) zp[1]:12 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated (was zp[2]:28) zp[2]:13 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 main::$0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
Allocated (was zp[2]:43) zp[2]:15 [ main::$14 main::$15 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 print_str::str#2 print_str::str#0 ]
Allocated (was zp[2]:53) zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label print_screen = $400
  .label print_char_cursor = 7
  // The number currently being tested for whether it is a prime
  .label potential = 5
  // The last index to test. It is the smallest index where PRIMES[test_last] > sqr(potential)
  .label test_last = 2
  // The index into PRIMES[] used for prime testing. It runs from 2 to test_last for each number tested.
  .label test_idx = 9
  // The index of the last prime we put into the PRIME[] table
  .label prime_idx = 3
  // main
main: {
    .label __0 = $d
    .label __14 = $f
    .label __15 = $f
    // [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2 -- _deref_pwuc1=vbuc2 
    lda #0
    sta PRIMES+1*SIZEOF_WORD+1
    lda #<2
    sta PRIMES+1*SIZEOF_WORD
    // [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3 -- _deref_pwuc1=vbuc2 
    lda #0
    sta PRIMES+2*SIZEOF_WORD+1
    lda #<3
    sta PRIMES+2*SIZEOF_WORD
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte*) print_char_cursor#34 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (word) prime_idx#17 = (byte) 2 [phi:main->main::@1#1] -- vwuz1=vbuc1 
    lda #<2
    sta.z prime_idx
    lda #>2
    sta.z prime_idx+1
    // [2] phi (word) potential#15 = (byte) 3 [phi:main->main::@1#2] -- vwuz1=vbuc1 
    lda #<3
    sta.z potential
    lda #>3
    sta.z potential+1
    // [2] phi (byte) test_last#13 = (byte) 2 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #2
    sta.z test_last
    jmp __b1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [2] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#17 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi (word) prime_idx#17 = (word) prime_idx#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi (word) potential#15 = (word) potential#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi (byte) test_last#13 = (byte) test_last#19 [phi:main::@11->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z test_last
    asl
    // [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12) -- vbuaa=_byte_pwuc1_derefidx_vbuaa 
    tay
    lda PRIMES,y
    // [5] (byte) mul8u::a#1 ← (byte) main::p#0 -- vbuxx=vbuaa 
    tax
    // [6] (byte) mul8u::b#0 ← (byte) main::p#0
    // [7] call mul8u 
    jsr mul8u
    // [8] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp __b8
    // main::@8
  __b8:
    // [9] (word~) main::$0 ← (word) mul8u::return#2
    // [10] if((word) potential#15<=(word~) main::$0) goto main::@2 -- vwuz1_le_vwuz2_then_la1 
    lda.z potential+1
    cmp.z __0+1
    bne !+
    lda.z potential
    cmp.z __0
    beq __b2_from___b8
  !:
    bcc __b2_from___b8
    jmp __b7
    // main::@7
  __b7:
    // [11] (byte) test_last#1 ← ++ (byte) test_last#13 -- vbuz1=_inc_vbuz1 
    inc.z test_last
    // [12] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
  __b2_from___b7:
  __b2_from___b8:
    // [12] phi (byte) test_last#19 = (byte) test_last#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [13] (word) potential#1 ← (word) potential#15 + (byte) 2 -- vwuz1=vwuz1_plus_vbuc1 
    lda #2
    clc
    adc.z potential
    sta.z potential
    bcc !+
    inc.z potential+1
  !:
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [14] phi (word) potential#10 = (word) potential#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [14] phi (byte) test_idx#7 = (byte) 2 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #2
    sta.z test_idx
    jmp __b3
    // [14] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [14] phi (word) potential#10 = (word) potential#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [14] phi (byte) test_idx#7 = (byte) test_idx#10 [phi:main::@4->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z test_idx
    asl
    tax
    // [16] (word) div16u8u::dividend#0 ← (word) potential#10
    // [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13) -- vbuz1=_byte_pwuc1_derefidx_vbuxx 
    lda PRIMES,x
    sta.z div16u8u.divisor
    // [18] call div16u8u 
    jsr div16u8u
    jmp __b9
    // main::@9
  __b9:
    // [19] (byte) test_idx#1 ← ++ (byte) test_idx#7 -- vbuz1=_inc_vbuz1 
    inc.z test_idx
    // [20] if((byte) rem8u#0!=(byte) 0) goto main::@4 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b4_from___b9
    jmp __b5
    // main::@5
  __b5:
    // [21] (word) potential#2 ← (word) potential#10 + (byte) 2 -- vwuz1=vwuz1_plus_vbuc1 
    lda #2
    clc
    adc.z potential
    sta.z potential
    bcc !+
    inc.z potential+1
  !:
    // [22] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [22] phi (word) potential#11 = (word) potential#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [22] phi (byte) test_idx#10 = (byte) 2 [phi:main::@5->main::@4#1] -- vbuz1=vbuc1 
    lda #2
    sta.z test_idx
    jmp __b4
    // [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [22] phi (word) potential#11 = (word) potential#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [22] phi (byte) test_idx#10 = (byte) test_idx#1 [phi:main::@9->main::@4#1] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [23] if((byte) test_idx#10<=(byte) test_last#19) goto main::@3 -- vbuz1_le_vbuz2_then_la1 
    lda.z test_last
    cmp.z test_idx
    bcs __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [24] (word) prime_idx#1 ← ++ (word) prime_idx#17 -- vwuz1=_inc_vwuz1 
    inc.z prime_idx
    bne !+
    inc.z prime_idx+1
  !:
    // [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z prime_idx
    asl
    sta.z __14
    lda.z prime_idx+1
    rol
    sta.z __14+1
    // [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __15
    adc #<PRIMES
    sta.z __15
    lda.z __15+1
    adc #>PRIMES
    sta.z __15+1
    // [27] *((word*~) main::$15) ← (word) potential#11 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z potential
    sta (__15),y
    iny
    lda.z potential+1
    sta (__15),y
    // [28] (word) print_uint_decimal::w#0 ← (word) potential#11
    // [29] call print_uint_decimal 
    jsr print_uint_decimal
    // [30] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
  __b10_from___b6:
    jmp __b10
    // main::@10
  __b10:
    // [31] call print_char 
    // [34] phi from main::@10 to print_char [phi:main::@10->print_char]
  print_char_from___b10:
    // [34] phi (byte) print_char::ch#2 = (byte) ' ' [phi:main::@10->print_char#0] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b11
    // main::@11
  __b11:
    // [32] if((word) prime_idx#1<(word) $3e8) goto main::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z prime_idx+1
    cmp #>$3e8
    bcc __b1_from___b11
    bne !+
    lda.z prime_idx
    cmp #<$3e8
    bcc __b1_from___b11
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [33] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [36] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#1 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [37] return 
    rts
}
  // print_uint_decimal
// Print a unsigned int as DECIMAL
// print_uint_decimal(word zp(5) w)
print_uint_decimal: {
    .label w = 5
    // [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0 -- vwuz1=vwuz2 
    lda.z w
    sta.z utoa.value
    lda.z w+1
    sta.z utoa.value+1
    // [39] call utoa 
    // [50] phi from print_uint_decimal to utoa [phi:print_uint_decimal->utoa]
  utoa_from_print_uint_decimal:
    jsr utoa
    // [40] phi from print_uint_decimal to print_uint_decimal::@1 [phi:print_uint_decimal->print_uint_decimal::@1]
  __b1_from_print_uint_decimal:
    jmp __b1
    // print_uint_decimal::@1
  __b1:
    // [41] call print_str 
    // [43] phi from print_uint_decimal::@1 to print_str [phi:print_uint_decimal::@1->print_str]
  print_str_from___b1:
    jsr print_str
    jmp __breturn
    // print_uint_decimal::@return
  __breturn:
    // [42] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($f) str)
print_str: {
    .label str = $f
    // [44] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [44] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#34 [phi:print_str->print_str::@1#0] -- register_copy 
    // [44] phi (byte*) print_str::str#2 = (const byte*) decimal_digits [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [46] return 
    rts
    // print_str::@2
  __b2:
    // [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [48] call print_char 
    // [34] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [34] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#0] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [49] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [44] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [44] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#17 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    // [44] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($f) value, byte* zp($d) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $11
    .label buffer = $d
    .label digit = 9
    .label value = $f
    // [51] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [51] phi (byte*) utoa::buffer#11 = (const byte*) decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [51] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [51] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [51] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [52] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [56] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [57] return 
    rts
    // utoa::@2
  __b2:
    // [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [60] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [62] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [62] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [62] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [62] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [63] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [51] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [51] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [51] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [51] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [51] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [65] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [67] call utoa_append 
    // [71] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [69] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [70] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [62] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [62] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [62] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [62] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($d) buffer, word zp($f) value, word zp($11) sub)
utoa_append: {
    .label buffer = $d
    .label value = $f
    .label sub = $11
    .label return = $f
    // [72] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [72] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [72] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [75] return 
    rts
    // utoa_append::@2
  __b2:
    // [76] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [72] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [72] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [72] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // div16u8u
// Divide unsigned 16-bit unsigned long dividend with a 8-bit unsigned char divisor
// The 8-bit unsigned char remainder can be found in rem8u after the division
// div16u8u(word zp(5) dividend, byte zp($a) divisor)
div16u8u: {
    .label dividend = 5
    .label divisor = $a
    // [78] (byte) divr8u::dividend#1 ← > (word) div16u8u::dividend#0 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z divr8u.dividend
    // [79] (byte) divr8u::divisor#0 ← (byte) div16u8u::divisor#0
    // [80] call divr8u 
    // [86] phi from div16u8u to divr8u [phi:div16u8u->divr8u]
  divr8u_from_div16u8u:
    // [86] phi (byte) divr8u::divisor#6 = (byte) divr8u::divisor#0 [phi:div16u8u->divr8u#0] -- register_copy 
    // [86] phi (byte) divr8u::dividend#5 = (byte) divr8u::dividend#1 [phi:div16u8u->divr8u#1] -- register_copy 
    // [86] phi (byte) divr8u::rem#10 = (byte) 0 [phi:div16u8u->divr8u#2] -- vbuyy=vbuc1 
    ldy #0
    jsr divr8u
    jmp __b1
    // div16u8u::@1
  __b1:
    // [81] (byte) divr8u::dividend#2 ← < (word) div16u8u::dividend#0 -- vbuz1=_lo_vwuz2 
    lda.z dividend
    sta.z divr8u.dividend
    // [82] (byte) divr8u::divisor#1 ← (byte) div16u8u::divisor#0
    // [83] (byte) divr8u::rem#4 ← (byte) rem8u#0
    // [84] call divr8u 
    // [86] phi from div16u8u::@1 to divr8u [phi:div16u8u::@1->divr8u]
  divr8u_from___b1:
    // [86] phi (byte) divr8u::divisor#6 = (byte) divr8u::divisor#1 [phi:div16u8u::@1->divr8u#0] -- register_copy 
    // [86] phi (byte) divr8u::dividend#5 = (byte) divr8u::dividend#2 [phi:div16u8u::@1->divr8u#1] -- register_copy 
    // [86] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#4 [phi:div16u8u::@1->divr8u#2] -- register_copy 
    jsr divr8u
    jmp __breturn
    // div16u8u::@return
  __breturn:
    // [85] return 
    rts
}
  // divr8u
// Performs division on two 8 bit unsigned chars and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zp($b) dividend, byte zp($a) divisor, byte register(Y) rem)
divr8u: {
    .label dividend = $b
    .label quotient = $c
    .label return = $c
    .label divisor = $a
    // [87] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  __b1_from_divr8u:
    // [87] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [87] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z quotient
    // [87] phi (byte) divr8u::dividend#3 = (byte) divr8u::dividend#5 [phi:divr8u->divr8u::@1#2] -- register_copy 
    // [87] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#10 [phi:divr8u->divr8u::@1#3] -- register_copy 
    jmp __b1
    // [87] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  __b1_from___b3:
    // [87] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
    // [87] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#0 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
    // [87] phi (byte) divr8u::dividend#3 = (byte) divr8u::dividend#0 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
    // [87] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#11 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp __b1
    // divr8u::@1
  __b1:
    // [88] (byte) divr8u::rem#0 ← (byte) divr8u::rem#5 << (byte) 1 -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
    // [89] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z dividend
    // [90] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr8u::@4
  __b4:
    // [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
    // [92] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [92] phi (byte) divr8u::rem#6 = (byte) divr8u::rem#0 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp __b2
    // divr8u::@2
  __b2:
    // [93] (byte) divr8u::dividend#0 ← (byte) divr8u::dividend#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z dividend
    // [94] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z quotient
    // [95] if((byte) divr8u::rem#6<(byte) divr8u::divisor#6) goto divr8u::@3 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z divisor
    bcc __b3_from___b2
    jmp __b5
    // divr8u::@5
  __b5:
    // [96] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc.z quotient
    // [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6 -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc.z divisor
    tay
    // [98] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [98] phi (byte) divr8u::return#0 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
    // [98] phi (byte) divr8u::rem#11 = (byte) divr8u::rem#6 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp __b3
    // divr8u::@3
  __b3:
    // [99] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [100] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b3
    jmp __b6
    // divr8u::@6
  __b6:
    // [101] (byte) rem8u#0 ← (byte) divr8u::rem#11
    jmp __breturn
    // divr8u::@return
  __breturn:
    // [102] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $f
    .label res = $d
    .label return = $d
    // [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [104] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [104] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [104] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [104] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [105] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [106] return 
    rts
    // mul8u::@2
  __b2:
    // [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [108] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [110] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [110] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [111] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [112] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [104] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [104] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [104] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [104] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  // Table that is filled with the primes we are finding
  PRIMES: .fill 2*$3e8, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Replacing instruction lda #0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b8 with __b2
Replacing label __b2_from___b8 with __b2
Replacing label __b4_from___b9 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b1_from___b11 with __b1
Replacing label __b1_from___b11 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from___b11:
Removing instruction __b2_from___b7:
Removing instruction __b2_from___b8:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b9:
Removing instruction __b10_from___b6:
Removing instruction print_char_from___b10:
Removing instruction __b1_from_print_uint_decimal:
Removing instruction print_str_from___b1:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b8:
Removing instruction __b7:
Removing instruction __b3_from___b2:
Removing instruction __b9:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Removing instruction __b6:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction utoa_from_print_uint_decimal:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction divr8u_from_div16u8u:
Removing instruction __b1:
Removing instruction divr8u_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_divr8u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Fixing long branch [120] bcc __b1 to bcs
Fixing long branch [126] bcc __b1 to bcs

FINAL SYMBOL TABLE
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const word*) PRIMES[(number) $3e8]  = { fill( $3e8, 0) }
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte) SIZEOF_WORD = (byte) 2
(const byte*) decimal_digits[(number) 6]  = { fill( 6, 0) }
(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
(label) div16u8u::@1
(label) div16u8u::@return
(word) div16u8u::dividend
(word) div16u8u::dividend#0 dividend zp[2]:5 420.59999999999997
(byte) div16u8u::divisor
(byte) div16u8u::divisor#0 divisor zp[1]:10 420.59999999999997
(word) div16u8u::quotient
(byte) div16u8u::quotient_hi
(byte) div16u8u::quotient_lo
(word) div16u8u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 2.0000002E7
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp[1]:11 2500000.25
(byte) divr8u::dividend#1 dividend zp[1]:11 1001.0
(byte) divr8u::dividend#2 dividend zp[1]:11 667.3333333333334
(byte) divr8u::dividend#3 dividend zp[1]:11 5001667.333333333
(byte) divr8u::dividend#5 dividend zp[1]:11 12003.0
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp[1]:10 2002.0
(byte) divr8u::divisor#1 divisor zp[1]:10 1001.0
(byte) divr8u::divisor#6 divisor zp[1]:10 1333466.933333333
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 1.50000015E7
(byte) divr8u::i#2 reg byte x 1666666.8333333333
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp[1]:12 1.50000015E7
(byte) divr8u::quotient#2 quotient zp[1]:12 1.0000001E7
(byte) divr8u::quotient#3 quotient zp[1]:12 2857143.1428571427
(byte) divr8u::rem
(byte) divr8u::rem#0 reg byte y 1.0000001E7
(byte) divr8u::rem#1 reg byte y 2.0000002E7
(byte) divr8u::rem#10 reg byte y 11002.0
(byte) divr8u::rem#11 reg byte y 1.0003334666666666E7
(byte) divr8u::rem#2 reg byte y 2.0000002E7
(byte) divr8u::rem#4 reg byte y 2002.0
(byte) divr8u::rem#5 reg byte y 2.0010003E7
(byte) divr8u::rem#6 reg byte y 1.0000001E7
(byte) divr8u::return
(byte) divr8u::return#0 return zp[1]:12 1.0000001E7
(void()) main()
(word~) main::$0 zp[2]:13 22.0
(byte~) main::$12 reg byte a 11.0
(byte~) main::$13 reg byte x 50.5
(word~) main::$14 zp[2]:15 22.0
(word*~) main::$15 zp[2]:15 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::p
(byte) main::p#0 reg byte a 16.5
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 20002.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 10001.0
(byte) mul8u::a#1 reg byte x 37.33333333333333
(byte) mul8u::a#2 reg byte x 6684.166666666666
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 11.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:15 202.0
(word) mul8u::mb#1 mb zp[2]:15 20002.0
(word) mul8u::mb#2 mb zp[2]:15 4300.571428571429
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:13 20002.0
(word) mul8u::res#2 res zp[2]:13 5002.333333333333
(word) mul8u::res#6 res zp[2]:13 10001.0
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:13 22.0
(word) potential
(word) potential#1 potential zp[2]:5 22.0
(word) potential#10 potential zp[2]:5 59.28571428571429
(word) potential#11 potential zp[2]:5 30.545454545454547
(word) potential#15 potential zp[2]:5 3.0
(word) potential#2 potential zp[2]:5 202.0
(word) prime_idx
(word) prime_idx#1 prime_idx zp[2]:3 4.888888888888889
(word) prime_idx#17 prime_idx zp[2]:3 1.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 200002.0
(byte) print_char::ch#2 reg byte a 1100002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:7 210100.40000000002
(byte*) print_char_cursor#17 print_char_cursor zp[2]:7 183335.50000000003
(byte*) print_char_cursor#34 print_char_cursor zp[2]:7 32.64516129032258
(byte*) print_line_cursor
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:15 200002.0
(byte*) print_str::str#2 str zp[2]:15 100001.0
(void()) print_uint_decimal((word) print_uint_decimal::w)
(label) print_uint_decimal::@1
(label) print_uint_decimal::@return
(word) print_uint_decimal::w
(word) print_uint_decimal::w#0 w zp[2]:5 112.0
(byte) rem8u
(byte) rem8u#0 reg byte y 1233.6666666666665
(byte) test_idx
(byte) test_idx#1 test_idx zp[1]:9 101.0
(byte) test_idx#10 test_idx zp[1]:9 151.5
(byte) test_idx#7 test_idx zp[1]:9 60.599999999999994
(byte) test_last
(byte) test_last#1 test_last zp[1]:2 22.0
(byte) test_last#13 test_last zp[1]:2 4.888888888888889
(byte) test_last#19 test_last zp[1]:2 6.380952380952381
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 200002.0
(byte~) utoa::$11 reg byte a 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:13 28714.714285714286
(byte*) utoa::buffer#14 buffer zp[2]:13 150001.5
(byte*) utoa::buffer#3 buffer zp[2]:13 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:13 200002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:9 200002.0
(byte) utoa::digit#2 digit zp[1]:9 28571.714285714286
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:17 60000.600000000006
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 50000.5
(byte) utoa::started#4 reg byte x 100001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:15 100001.0
(word) utoa::value#1 value zp[2]:15 551.0
(word) utoa::value#2 value zp[2]:15 57286.42857142857
(word) utoa::value#6 value zp[2]:15 150001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:13 137500.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.000000001E9
(byte) utoa_append::digit#2 reg byte x 1.0005000015E9
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:15 200002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:17 3.333500005E8
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:15 366667.3333333334
(word) utoa_append::value#1 value zp[2]:15 2.000000002E9
(word) utoa_append::value#2 value zp[2]:15 5.0018333416666675E8

zp[1]:2 [ test_last#13 test_last#19 test_last#1 ]
zp[2]:3 [ prime_idx#17 prime_idx#1 ]
zp[2]:5 [ potential#10 potential#1 potential#15 potential#11 potential#2 div16u8u::dividend#0 print_uint_decimal::w#0 ]
reg byte a [ print_char::ch#2 print_char::ch#0 ]
zp[2]:7 [ print_char_cursor#1 print_char_cursor#34 print_char_cursor#17 ]
zp[1]:9 [ utoa::digit#2 utoa::digit#1 test_idx#7 test_idx#10 test_idx#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:10 [ divr8u::divisor#6 divr8u::divisor#0 divr8u::divisor#1 div16u8u::divisor#0 ]
reg byte y [ divr8u::rem#5 divr8u::rem#10 divr8u::rem#4 divr8u::rem#11 divr8u::rem#6 divr8u::rem#0 divr8u::rem#1 divr8u::rem#2 ]
zp[1]:11 [ divr8u::dividend#3 divr8u::dividend#5 divr8u::dividend#1 divr8u::dividend#2 divr8u::dividend#0 ]
zp[1]:12 [ divr8u::quotient#3 divr8u::return#0 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:13 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 main::$0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
reg byte a [ main::$12 ]
reg byte a [ main::p#0 ]
reg byte a [ mul8u::b#0 ]
reg byte x [ main::$13 ]
zp[2]:15 [ main::$14 main::$15 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 print_str::str#2 print_str::str#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:17 [ utoa::digit_value#0 utoa_append::sub#0 ]
reg byte a [ divr8u::$1 ]
reg byte y [ rem8u#0 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 139372

  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  .label print_screen = $400
  .label print_char_cursor = 7
  // The number currently being tested for whether it is a prime
  .label potential = 5
  // The last index to test. It is the smallest index where PRIMES[test_last] > sqr(potential)
  .label test_last = 2
  // The index into PRIMES[] used for prime testing. It runs from 2 to test_last for each number tested.
  .label test_idx = 9
  // The index of the last prime we put into the PRIME[] table
  .label prime_idx = 3
  // main
main: {
    .label __0 = $d
    .label __14 = $f
    .label __15 = $f
    // PRIMES[1] = 2
    // [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2 -- _deref_pwuc1=vbuc2 
    lda #0
    sta PRIMES+1*SIZEOF_WORD+1
    lda #<2
    sta PRIMES+1*SIZEOF_WORD
    // PRIMES[2] = 3
    // [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3 -- _deref_pwuc1=vbuc2 
    lda #0
    sta PRIMES+2*SIZEOF_WORD+1
    lda #<3
    sta PRIMES+2*SIZEOF_WORD
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi (byte*) print_char_cursor#34 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (word) prime_idx#17 = (byte) 2 [phi:main->main::@1#1] -- vwuz1=vbuc1 
    lda #<2
    sta.z prime_idx
    lda #>2
    sta.z prime_idx+1
    // [2] phi (word) potential#15 = (byte) 3 [phi:main->main::@1#2] -- vwuz1=vbuc1 
    lda #<3
    sta.z potential
    lda #>3
    sta.z potential+1
    // [2] phi (byte) test_last#13 = (byte) 2 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #2
    sta.z test_last
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
    // [2] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#17 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi (word) prime_idx#17 = (word) prime_idx#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi (word) potential#15 = (word) potential#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi (byte) test_last#13 = (byte) test_last#19 [phi:main::@11->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // p = (char)PRIMES[test_last]
    // [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z test_last
    asl
    // [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12) -- vbuaa=_byte_pwuc1_derefidx_vbuaa 
    tay
    lda PRIMES,y
    // mul8u(p, p)
    // [5] (byte) mul8u::a#1 ← (byte) main::p#0 -- vbuxx=vbuaa 
    tax
    // [6] (byte) mul8u::b#0 ← (byte) main::p#0
    // [7] call mul8u 
    jsr mul8u
    // [8] (word) mul8u::return#2 ← (word) mul8u::res#2
    // main::@8
    // [9] (word~) main::$0 ← (word) mul8u::return#2
    // if(potential > mul8u(p, p))
    // [10] if((word) potential#15<=(word~) main::$0) goto main::@2 -- vwuz1_le_vwuz2_then_la1 
    lda.z potential+1
    cmp.z __0+1
    bne !+
    lda.z potential
    cmp.z __0
    beq __b2
  !:
    bcc __b2
    // main::@7
    // test_last++;
    // [11] (byte) test_last#1 ← ++ (byte) test_last#13 -- vbuz1=_inc_vbuz1 
    inc.z test_last
    // [12] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
    // [12] phi (byte) test_last#19 = (byte) test_last#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // potential +=2
    // [13] (word) potential#1 ← (word) potential#15 + (byte) 2 -- vwuz1=vwuz1_plus_vbuc1 
    lda #2
    clc
    adc.z potential
    sta.z potential
    bcc !+
    inc.z potential+1
  !:
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [14] phi (word) potential#10 = (word) potential#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [14] phi (byte) test_idx#7 = (byte) 2 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #2
    sta.z test_idx
    // [14] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [14] phi (word) potential#10 = (word) potential#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [14] phi (byte) test_idx#7 = (byte) test_idx#10 [phi:main::@4->main::@3#1] -- register_copy 
    // main::@3
  __b3:
    // div16u8u(potential, (char)PRIMES[test_idx++])
    // [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda.z test_idx
    asl
    tax
    // [16] (word) div16u8u::dividend#0 ← (word) potential#10
    // [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13) -- vbuz1=_byte_pwuc1_derefidx_vbuxx 
    lda PRIMES,x
    sta.z div16u8u.divisor
    // [18] call div16u8u 
    jsr div16u8u
    // main::@9
    // div16u8u(potential, (char)PRIMES[test_idx++]);
    // [19] (byte) test_idx#1 ← ++ (byte) test_idx#7 -- vbuz1=_inc_vbuz1 
    inc.z test_idx
    // if(rem8u == 0)
    // [20] if((byte) rem8u#0!=(byte) 0) goto main::@4 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b4
    // main::@5
    // potential +=2
    // [21] (word) potential#2 ← (word) potential#10 + (byte) 2 -- vwuz1=vwuz1_plus_vbuc1 
    lda #2
    clc
    adc.z potential
    sta.z potential
    bcc !+
    inc.z potential+1
  !:
    // [22] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [22] phi (word) potential#11 = (word) potential#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [22] phi (byte) test_idx#10 = (byte) 2 [phi:main::@5->main::@4#1] -- vbuz1=vbuc1 
    lda #2
    sta.z test_idx
    // [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
    // [22] phi (word) potential#11 = (word) potential#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [22] phi (byte) test_idx#10 = (byte) test_idx#1 [phi:main::@9->main::@4#1] -- register_copy 
    // main::@4
  __b4:
    // while (test_idx<=test_last)
    // [23] if((byte) test_idx#10<=(byte) test_last#19) goto main::@3 -- vbuz1_le_vbuz2_then_la1 
    lda.z test_last
    cmp.z test_idx
    bcs __b3
    // main::@6
    // PRIMES[++prime_idx] = potential;
    // [24] (word) prime_idx#1 ← ++ (word) prime_idx#17 -- vwuz1=_inc_vwuz1 
    inc.z prime_idx
    bne !+
    inc.z prime_idx+1
  !:
    // PRIMES[++prime_idx] = potential
    // [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1 -- vwuz1=vwuz2_rol_1 
    lda.z prime_idx
    asl
    sta.z __14
    lda.z prime_idx+1
    rol
    sta.z __14+1
    // [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14 -- pwuz1=pwuc1_plus_vwuz1 
    clc
    lda.z __15
    adc #<PRIMES
    sta.z __15
    lda.z __15+1
    adc #>PRIMES
    sta.z __15+1
    // [27] *((word*~) main::$15) ← (word) potential#11 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z potential
    sta (__15),y
    iny
    lda.z potential+1
    sta (__15),y
    // print_uint_decimal(potential)
    // [28] (word) print_uint_decimal::w#0 ← (word) potential#11
    // [29] call print_uint_decimal 
    jsr print_uint_decimal
    // [30] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
    // main::@10
    // print_char(' ')
    // [31] call print_char 
    // [34] phi from main::@10 to print_char [phi:main::@10->print_char]
    // [34] phi (byte) print_char::ch#2 = (byte) ' ' [phi:main::@10->print_char#0] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@11
    // while(prime_idx<totalprimes)
    // [32] if((word) prime_idx#1<(word) $3e8) goto main::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z prime_idx+1
    cmp #>$3e8
    bcs !__b1+
    jmp __b1
  !__b1:
    bne !+
    lda.z prime_idx
    cmp #<$3e8
    bcs !__b1+
    jmp __b1
  !__b1:
  !:
    // main::@return
    // }
    // [33] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [35] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [36] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#1 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [37] return 
    rts
}
  // print_uint_decimal
// Print a unsigned int as DECIMAL
// print_uint_decimal(word zp(5) w)
print_uint_decimal: {
    .label w = 5
    // utoa(w, decimal_digits, DECIMAL)
    // [38] (word) utoa::value#1 ← (word) print_uint_decimal::w#0 -- vwuz1=vwuz2 
    lda.z w
    sta.z utoa.value
    lda.z w+1
    sta.z utoa.value+1
    // [39] call utoa 
    // [50] phi from print_uint_decimal to utoa [phi:print_uint_decimal->utoa]
    jsr utoa
    // [40] phi from print_uint_decimal to print_uint_decimal::@1 [phi:print_uint_decimal->print_uint_decimal::@1]
    // print_uint_decimal::@1
    // print_str(decimal_digits)
    // [41] call print_str 
    // [43] phi from print_uint_decimal::@1 to print_str [phi:print_uint_decimal::@1->print_str]
    jsr print_str
    // print_uint_decimal::@return
    // }
    // [42] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($f) str)
print_str: {
    .label str = $f
    // [44] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [44] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#34 [phi:print_str->print_str::@1#0] -- register_copy 
    // [44] phi (byte*) print_str::str#2 = (const byte*) decimal_digits [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [45] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [46] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [47] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [48] call print_char 
    // [34] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [34] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#0] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [49] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [44] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [44] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#17 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    // [44] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($f) value, byte* zp($d) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $11
    .label buffer = $d
    .label digit = 9
    .label value = $f
    // [51] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [51] phi (byte*) utoa::buffer#11 = (const byte*) decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [51] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [51] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [51] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [52] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [53] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [54] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [55] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [56] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [57] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [58] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [59] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [60] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [61] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [62] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [62] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [62] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [62] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [63] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [51] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [51] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [51] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [51] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [51] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [64] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [65] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [66] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [67] call utoa_append 
    // [71] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [68] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [69] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [70] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [62] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [62] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [62] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [62] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($d) buffer, word zp($f) value, word zp($11) sub)
utoa_append: {
    .label buffer = $d
    .label value = $f
    .label sub = $11
    .label return = $f
    // [72] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [72] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [72] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [73] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [74] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [75] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [76] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [77] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [72] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [72] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [72] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // div16u8u
// Divide unsigned 16-bit unsigned long dividend with a 8-bit unsigned char divisor
// The 8-bit unsigned char remainder can be found in rem8u after the division
// div16u8u(word zp(5) dividend, byte zp($a) divisor)
div16u8u: {
    .label dividend = 5
    .label divisor = $a
    // divr8u(>dividend, divisor, 0)
    // [78] (byte) divr8u::dividend#1 ← > (word) div16u8u::dividend#0 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z divr8u.dividend
    // [79] (byte) divr8u::divisor#0 ← (byte) div16u8u::divisor#0
    // [80] call divr8u 
    // [86] phi from div16u8u to divr8u [phi:div16u8u->divr8u]
    // [86] phi (byte) divr8u::divisor#6 = (byte) divr8u::divisor#0 [phi:div16u8u->divr8u#0] -- register_copy 
    // [86] phi (byte) divr8u::dividend#5 = (byte) divr8u::dividend#1 [phi:div16u8u->divr8u#1] -- register_copy 
    // [86] phi (byte) divr8u::rem#10 = (byte) 0 [phi:div16u8u->divr8u#2] -- vbuyy=vbuc1 
    ldy #0
    jsr divr8u
    // div16u8u::@1
    // divr8u(<dividend, divisor, rem8u)
    // [81] (byte) divr8u::dividend#2 ← < (word) div16u8u::dividend#0 -- vbuz1=_lo_vwuz2 
    lda.z dividend
    sta.z divr8u.dividend
    // [82] (byte) divr8u::divisor#1 ← (byte) div16u8u::divisor#0
    // [83] (byte) divr8u::rem#4 ← (byte) rem8u#0
    // [84] call divr8u 
    // [86] phi from div16u8u::@1 to divr8u [phi:div16u8u::@1->divr8u]
    // [86] phi (byte) divr8u::divisor#6 = (byte) divr8u::divisor#1 [phi:div16u8u::@1->divr8u#0] -- register_copy 
    // [86] phi (byte) divr8u::dividend#5 = (byte) divr8u::dividend#2 [phi:div16u8u::@1->divr8u#1] -- register_copy 
    // [86] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#4 [phi:div16u8u::@1->divr8u#2] -- register_copy 
    jsr divr8u
    // div16u8u::@return
    // }
    // [85] return 
    rts
}
  // divr8u
// Performs division on two 8 bit unsigned chars and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
// divr8u(byte zp($b) dividend, byte zp($a) divisor, byte register(Y) rem)
divr8u: {
    .label dividend = $b
    .label quotient = $c
    .label return = $c
    .label divisor = $a
    // [87] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
    // [87] phi (byte) divr8u::i#2 = (byte) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [87] phi (byte) divr8u::quotient#3 = (byte) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z quotient
    // [87] phi (byte) divr8u::dividend#3 = (byte) divr8u::dividend#5 [phi:divr8u->divr8u::@1#2] -- register_copy 
    // [87] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#10 [phi:divr8u->divr8u::@1#3] -- register_copy 
    // [87] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
    // [87] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
    // [87] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#0 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
    // [87] phi (byte) divr8u::dividend#3 = (byte) divr8u::dividend#0 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
    // [87] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#11 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    // divr8u::@1
  __b1:
    // rem = rem << 1
    // [88] (byte) divr8u::rem#0 ← (byte) divr8u::rem#5 << (byte) 1 -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
    // dividend & $80
    // [89] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z dividend
    // if( (dividend & $80) != 0 )
    // [90] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr8u::@4
    // rem = rem | 1
    // [91] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1 -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
    // [92] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
    // [92] phi (byte) divr8u::rem#6 = (byte) divr8u::rem#0 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    // divr8u::@2
  __b2:
    // dividend = dividend << 1
    // [93] (byte) divr8u::dividend#0 ← (byte) divr8u::dividend#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z dividend
    // quotient = quotient << 1
    // [94] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z quotient
    // if(rem>=divisor)
    // [95] if((byte) divr8u::rem#6<(byte) divr8u::divisor#6) goto divr8u::@3 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z divisor
    bcc __b3
    // divr8u::@5
    // quotient++;
    // [96] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 -- vbuz1=_inc_vbuz1 
    inc.z quotient
    // rem = rem - divisor
    // [97] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6 -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc.z divisor
    tay
    // [98] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
    // [98] phi (byte) divr8u::return#0 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
    // [98] phi (byte) divr8u::rem#11 = (byte) divr8u::rem#6 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    // divr8u::@3
  __b3:
    // for( char i : 0..7)
    // [99] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [100] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // divr8u::@6
    // rem8u = rem
    // [101] (byte) rem8u#0 ← (byte) divr8u::rem#11
    // divr8u::@return
    // }
    // [102] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $f
    .label res = $d
    .label return = $d
    // mb = b
    // [103] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [104] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [104] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [104] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [104] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [105] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [106] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [107] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [108] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [109] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [110] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [110] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [111] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [112] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [104] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [104] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [104] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [104] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  // Table that is filled with the primes we are finding
  PRIMES: .fill 2*$3e8, 0

