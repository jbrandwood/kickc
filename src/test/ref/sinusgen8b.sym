constant const word PI2_u4f12 = $6488
constant const dword PI2_u4f28 = $6487ed51
constant const word PI_HALF_u4f12 = $1922
constant const dword PI_HALF_u4f28 = $1921fb54
constant const word PI_u4f12 = $3244
constant const dword PI_u4f28 = $3243f6a9
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte SIZEOF_SIGNED_WORD = 2
word div16u(word div16u::dividend , word div16u::divisor)
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 return zp[2]:42 22.0
word div16u::return#1 return zp[2]:42 37.33333333333333
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:34 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:42 202.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:27 22.0
dword div32u16u::return#1 return zp[4]:27 37.33333333333333
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:18 2500.25
word divr16u::dividend#4 dividend zp[2]:18 4429.142857142857
word divr16u::dividend#6 dividend zp[2]:18 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:42 15001.5
word divr16u::quotient#2 quotient zp[2]:42 10001.0
word divr16u::quotient#3 quotient zp[2]:42 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:25 7500.75
word divr16u::rem#1 rem zp[2]:25 20002.0
word divr16u::rem#10 rem zp[2]:25 10334.666666666666
word divr16u::rem#11 rem zp[2]:25 1102.0
word divr16u::rem#2 rem zp[2]:25 20002.0
word divr16u::rem#5 rem zp[2]:25 202.0
word divr16u::rem#6 rem zp[2]:25 21003.0
word divr16u::rem#7 rem zp[2]:25 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:42 3788.25
word divr16u::return#2 return zp[2]:42 202.0
word divr16u::return#3 return zp[2]:42 202.0
word divr16u::return#4 return zp[2]:42 202.0
void main()
word~ main::$10 zp[2]:25 22.0
byte~ main::$11 reg byte a 11.0
signed word*~ main::$3 zp[2]:25 22.0
word~ main::$9 zp[2]:25 22.0
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 2.75
signed byte main::sb
signed byte main::sb#0 sb zp[1]:24 3.6666666666666665
signed byte main::sd
signed byte main::sd#0 reg byte a 22.0
constant signed byte* main::sintabb[$c0]  = { fill( $c0, 0) }
constant signed word* main::sintabw[$c0]  = { fill( $c0, 0) }
constant byte* main::str[3]  = "  "
signed word main::sw
signed word main::sw#0 sw zp[2]:25 22.0
constant word main::wavelength = $c0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:15 2002.0
byte* memset::dst#2 dst zp[2]:15 1334.6666666666667
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
constant word memset::num#0 num = $3e8
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)print_screen#0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.0000002E7
word mul16u::a
word mul16u::a#0 a zp[2]:42 36667.33333333333
word mul16u::a#1 a zp[2]:42 1.0000001E7
word mul16u::a#2 a zp[2]:42 6683334.166666666
word mul16u::b
word mul16u::b#0 b zp[2]:18 10001.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:20 200002.0
dword mul16u::mb#1 mb zp[4]:20 2.0000002E7
dword mul16u::mb#2 mb zp[4]:20 4300000.571428571
dword mul16u::res
dword mul16u::res#1 res zp[4]:36 2.0000002E7
dword mul16u::res#2 res zp[4]:36 5001667.333333333
dword mul16u::res#6 res zp[4]:36 1.0000001E7
dword mul16u::return
dword mul16u::return#0 return zp[4]:36 20002.0
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.0000002E7
byte mul8u::a
byte mul8u::a#0 reg byte x 36667.33333333333
byte mul8u::a#1 reg byte x 1.0000001E7
byte mul8u::a#2 reg byte x 6683334.166666666
byte mul8u::b
byte mul8u::b#0 reg byte a 10001.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:34 200002.0
word mul8u::mb#1 mb zp[2]:34 2.0000002E7
word mul8u::mb#2 mb zp[2]:34 4300000.571428571
word mul8u::res
word mul8u::res#1 res zp[2]:25 2.0000002E7
word mul8u::res#2 res zp[2]:25 5001667.333333333
word mul8u::res#6 res zp[2]:25 1.0000001E7
word mul8u::return
word mul8u::return#0 return zp[2]:25 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 zp[4]:36 20002.0
dword~ mulu16_sel::$1 zp[4]:36 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 return zp[2]:42 2002.0
word mulu16_sel::return#1 return_1 zp[2]:25 2002.0
word mulu16_sel::return#10 return_1 zp[2]:25 2002.0
word mulu16_sel::return#11 return zp[2]:42 2002.0
word mulu16_sel::return#12 return zp[2]:42 2143.714285714286
word mulu16_sel::return#2 return zp[2]:42 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 reg byte x 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 v1 zp[2]:25 1001.0
word mulu16_sel::v1#1 v1 zp[2]:25 1001.0
word mulu16_sel::v1#2 v1 zp[2]:25 2002.0
word mulu16_sel::v1#3 v1 zp[2]:25 1001.0
word mulu16_sel::v1#4 v1 zp[2]:25 1001.0
word mulu16_sel::v1#5 v1 zp[2]:25 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 v2 zp[2]:18 2002.0
word mulu16_sel::v2#1 v2 zp[2]:18 2002.0
word mulu16_sel::v2#3 v2 zp[2]:18 2002.0
word mulu16_sel::v2#4 v2 zp[2]:18 2002.0
word mulu16_sel::v2#5 v2 zp[2]:18 7002.5
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 zp[2]:25 20002.0
word~ mulu8_sel::$1 zp[2]:25 20002.0
byte mulu8_sel::return
byte mulu8_sel::return#0 reg byte a 2002.0
byte mulu8_sel::return#1 reg byte a 2002.0
byte mulu8_sel::return#10 reg byte a 2002.0
byte mulu8_sel::return#11 reg byte a 2002.0
byte mulu8_sel::return#12 reg byte a 2143.714285714286
byte mulu8_sel::return#2 reg byte a 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 select zp[1]:17 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 reg byte x 1001.0
byte mulu8_sel::v1#1 reg byte x 1001.0
byte mulu8_sel::v1#2 reg byte x 2002.0
byte mulu8_sel::v1#3 reg byte x 1001.0
byte mulu8_sel::v1#4 reg byte x 1001.0
byte mulu8_sel::v1#5 reg byte x 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 reg byte y 2002.0
byte mulu8_sel::v2#1 reg byte y 2002.0
byte mulu8_sel::v2#3 reg byte y 2002.0
byte mulu8_sel::v2#4 reg byte y 2002.0
byte mulu8_sel::v2#5 reg byte y 7002.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#3 reg byte a 2002.0
byte print_char::ch#4 reg byte a 2002.0
byte print_char::ch#5 reg byte a 112004.0
byte* print_char_cursor
byte* print_char_cursor#10 print_char_cursor zp[2]:15 4000.535714285714
byte* print_char_cursor#29 print_char_cursor zp[2]:15 106103.5
byte* print_char_cursor#45 print_char_cursor zp[2]:15 17.75
void print_cls()
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 202.0
signed byte print_schar::b#1 reg byte x 52.33333333333333
signed byte print_schar::b#4 reg byte x 202.0
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:40 20002.0
byte* print_str::str#2 str zp[2]:40 10001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 525.75
word rem16u
word rem16u#21 rem16u zp[2]:25 220.39999999999998
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 zp[4]:36 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 reg byte y 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 return zp[2]:13 202.0
signed word sin16s::return#1 return zp[2]:13 701.0
signed word sin16s::return#5 return zp[2]:13 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 sinx zp[2]:13 2002.0
word sin16s::usinx
word sin16s::usinx#0 usinx zp[2]:13 166.83333333333334
word sin16s::usinx#1 usinx zp[2]:13 500.5
dword sin16s::x
dword sin16s::x#0 x zp[4]:9 1552.0
dword sin16s::x#1 x zp[4]:9 2002.0
dword sin16s::x#2 x zp[4]:9 2002.0
dword sin16s::x#4 x zp[4]:9 2502.5
dword sin16s::x#6 x zp[4]:9 3003.0
word sin16s::x1
word sin16s::x1#0 x1 zp[2]:40 318.5
word sin16s::x2
word sin16s::x2#0 x2 zp[2]:25 2002.0
word sin16s::x3
word sin16s::x3#0 x3 zp[2]:25 500.5
word sin16s::x3_6
word sin16s::x3_6#0 x3_6 zp[2]:42 2002.0
word sin16s::x4
word sin16s::x4#0 x4 zp[2]:25 2002.0
word sin16s::x5
word sin16s::x5#0 x5 zp[2]:42 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 x5_128 zp[2]:42 2002.0
void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
signed word~ sin16s_gen::$2 zp[2]:13 202.0
word sin16s_gen::i
word sin16s_gen::i#1 i zp[2]:15 202.0
word sin16s_gen::i#2 i zp[2]:15 33.666666666666664
signed word* sin16s_gen::sintab
signed word* sin16s_gen::sintab#0 sintab zp[2]:7 67.33333333333333
signed word* sin16s_gen::sintab#2 sintab zp[2]:7 43.285714285714285
dword sin16s_gen::step
dword sin16s_gen::step#0 step zp[4]:27 10.181818181818182
word sin16s_gen::wavelength
dword sin16s_gen::x
dword sin16s_gen::x#1 x zp[4]:3 101.0
dword sin16s_gen::x#2 x zp[4]:3 37.875
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 zp[2]:13 2002.0
constant const byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#10 isUpper zp[1]:24 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 reg byte a 202.0
signed byte sin8s::return#1 reg byte a 701.0
signed byte sin8s::return#5 reg byte a 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 reg byte a 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 usinx zp[1]:33 166.83333333333334
byte sin8s::usinx#1 reg byte x 2002.0
byte sin8s::usinx#2 reg byte x 2002.0
byte sin8s::usinx#4 reg byte x 1001.0
word sin8s::x
word sin8s::x#0 x zp[2]:13 1552.0
word sin8s::x#1 x zp[2]:13 2002.0
word sin8s::x#2 x zp[2]:13 2002.0
word sin8s::x#4 x zp[2]:13 2502.5
word sin8s::x#6 x zp[2]:13 3003.0
byte sin8s::x1
byte sin8s::x1#0 x1 zp[1]:31 318.5
byte sin8s::x2
byte sin8s::x2#0 reg byte a 2002.0
byte sin8s::x3
byte sin8s::x3#0 x3 zp[1]:32 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 reg byte a 2002.0
byte sin8s::x4
byte sin8s::x4#0 reg byte a 2002.0
byte sin8s::x5
byte sin8s::x5#0 reg byte a 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 reg byte a 2002.0
void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
signed byte~ sin8s_gen::$2 reg byte a 202.0
word sin8s_gen::i
word sin8s_gen::i#1 i zp[2]:15 202.0
word sin8s_gen::i#2 i zp[2]:15 33.666666666666664
signed byte* sin8s_gen::sintab
signed byte* sin8s_gen::sintab#0 sintab zp[2]:40 67.33333333333333
signed byte* sin8s_gen::sintab#2 sintab zp[2]:40 43.285714285714285
word sin8s_gen::step
word sin8s_gen::step#0 step zp[2]:42 10.181818181818182
word sin8s_gen::wavelength
word sin8s_gen::x
word sin8s_gen::x#1 x zp[2]:7 101.0
word sin8s_gen::x#2 x zp[2]:7 37.875

zp[1]:2 [ main::i#2 main::i#1 ]
zp[4]:3 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
zp[2]:7 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 sin8s_gen::x#2 sin8s_gen::x#1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:9 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[2]:13 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:15 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 memset::dst#2 memset::dst#1 sin16s_gen::i#2 sin16s_gen::i#1 sin8s_gen::i#2 sin8s_gen::i#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:17 [ mulu8_sel::select#5 ]
zp[2]:18 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
reg byte x [ mulu16_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
zp[4]:20 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[1]:24 [ main::sb#0 sin8s::isUpper#10 ]
zp[2]:25 [ main::$10 main::$9 main::$3 main::sw#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#21 ]
reg byte a [ main::$11 ]
reg byte a [ main::sd#0 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
zp[4]:27 [ div32u16u::return#0 sin16s_gen::step#0 div32u16u::return#1 ]
reg byte x [ print_uchar::b#0 ]
zp[1]:31 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:32 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:33 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
zp[2]:34 [ div32u16u::quotient_hi#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
zp[4]:36 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mulu16_sel::$0 mulu16_sel::$1 ]
zp[2]:40 [ sin16s::x1#0 print_str::str#2 print_str::str#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp[2]:42 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 mul16u::a#2 mul16u::a#0 mul16u::a#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#0 sin8s_gen::step#0 div16u::return#1 div32u16u::quotient_lo#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
reg byte a [ mul16u::$1 ]
