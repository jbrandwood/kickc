
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] __snprintf_buffer = (char *) 0
  [6] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [7] phi()
  [8] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

__stackcall void snputc(char c)
snputc: scope:[snputc]  from
  [10] snputc::c#0 = stackidx(char,snputc::OFFSET_STACK_C)
  [11] __snprintf_size = ++ __snprintf_size
  [12] if(__snprintf_size<=__snprintf_capacity) goto snputc::@1
  to:snputc::@return
snputc::@return: scope:[snputc]  from snputc snputc::@2
  [13] return 
  to:@return
snputc::@1: scope:[snputc]  from snputc
  [14] if(__snprintf_size!=__snprintf_capacity) goto snputc::@3
  to:snputc::@2
snputc::@3: scope:[snputc]  from snputc::@1
  [15] phi()
  to:snputc::@2
snputc::@2: scope:[snputc]  from snputc::@1 snputc::@3
  [16] snputc::c#2 = phi( snputc::@3/snputc::c#0, snputc::@1/0 )
  [17] *__snprintf_buffer = snputc::c#2
  [18] __snprintf_buffer = ++ __snprintf_buffer
  to:snputc::@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [19] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [20] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [21] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [22] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [23] gotoxy::y#2 = conio_c64_init::line#2
  [24] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [25] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from
  [26] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [27] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [28] conio_line_text[conio_cursor_x] = cputc::c#0
  [29] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [30] conio_cursor_x = ++ conio_cursor_x
  [31] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [32] phi()
  [33] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [34] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [35] phi()
  [36] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [37] phi()
  [38] call snprintf_init
  to:main::@1
main::@1: scope:[main]  from main
  [39] phi()
  [40] call printf_str
  to:main::@2
main::@2: scope:[main]  from main::@1
  [41] stackpush(char) = 0
  [42] callexecute snputc 
  sideeffect stackpullpadding(1)
  [44] call snprintf_init
  to:main::@3
main::@3: scope:[main]  from main::@2
  [45] phi()
  [46] call printf_str
  to:main::@4
main::@4: scope:[main]  from main::@3
  [47] phi()
  [48] call printf_string
  to:main::@5
main::@5: scope:[main]  from main::@4
  [49] stackpush(char) = '!'
  [50] callexecute snputc 
  sideeffect stackpullpadding(1)
  [52] stackpush(char) = 0
  [53] callexecute snputc 
  sideeffect stackpullpadding(1)
  [55] call printf_str
  to:main::@6
main::@6: scope:[main]  from main::@5
  [56] phi()
  [57] call printf_string
  to:main::@7
main::@7: scope:[main]  from main::@6
  [58] phi()
  [59] call printf_str
  to:main::@8
main::@8: scope:[main]  from main::@7
  [60] phi()
  [61] call printf_string
  to:main::@9
main::@9: scope:[main]  from main::@8
  [62] phi()
  [63] call printf_str
  to:main::@return
main::@return: scope:[main]  from main::@9
  [64] return 
  to:@return

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [65] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [66] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [67] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [68] conio_cursor_x = gotoxy::x#2
  [69] conio_cursor_y = gotoxy::y#4
  [70] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [71] gotoxy::$8 = gotoxy::$7 << 2
  [72] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [73] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [74] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [75] conio_line_text = gotoxy::$5
  [76] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [77] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [78] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [79] conio_line_text = conio_line_text + $28
  [80] conio_line_color = conio_line_color + $28
  [81] conio_cursor_x = 0
  [82] conio_cursor_y = ++ conio_cursor_y
  [83] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [84] return 
  to:@return

void snprintf_init(char *s , unsigned int n)
snprintf_init: scope:[snprintf_init]  from main main::@2
  [85] snprintf_init::s#2 = phi( main/BUF1, main::@2/BUF2 )
  [86] __snprintf_capacity = $14
  [87] __snprintf_size = 0
  [88] __snprintf_buffer = snprintf_init::s#2
  to:snprintf_init::@return
snprintf_init::@return: scope:[snprintf_init]  from snprintf_init
  [89] return 
  to:@return

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@1 main::@3 main::@5 main::@7 main::@9 printf_string::@1
  [90] printf_str::putc#8 = phi( main::@1/&snputc, main::@3/&snputc, main::@5/&cputc, main::@7/&cputc, main::@9/&cputc, printf_string::@1/printf_str::putc#0 )
  [90] printf_str::s#8 = phi( main::@1/main::s, main::@3/main::s1, main::@5/main::s2, main::@7/main::s3, main::@9/main::s2, printf_string::@1/printf_str::s#1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [91] printf_str::s#7 = phi( printf_str/printf_str::s#8, printf_str::@2/printf_str::s#0 )
  [92] printf_str::c#1 = *printf_str::s#7
  [93] printf_str::s#0 = ++ printf_str::s#7
  [94] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [95] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [96] stackpush(char) = printf_str::c#1
  [97] callexecute *printf_str::putc#8 
  sideeffect stackpullpadding(1)
  to:printf_str::@1

void printf_string(void (*putc)(char) , char *str , char format_min_length , char format_justify_left)
printf_string: scope:[printf_string]  from main::@4 main::@6 main::@8
  [99] printf_string::putc#10 = phi( main::@4/&snputc, main::@6/&cputc, main::@8/&cputc )
  [99] printf_string::str#10 = phi( main::@4/main::str, main::@6/BUF1, main::@8/BUF2 )
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [100] printf_str::putc#0 = printf_string::putc#10
  [101] printf_str::s#1 = printf_string::str#10
  [102] call printf_str
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [103] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [104] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [105] phi()
  [106] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [107] phi()
  [108] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [109] phi()
  [110] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [111] phi()
  [112] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [113] conio_line_text = conio_line_text - $28
  [114] conio_line_color = conio_line_color - $28
  [115] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [116] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [117] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [117] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [118] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [119] memcpy::src#4 = (char *)memcpy::source#2
  [120] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [121] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [121] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [122] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [123] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [124] *memcpy::dst#2 = *memcpy::src#2
  [125] memcpy::dst#1 = ++ memcpy::dst#2
  [126] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [127] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [127] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [128] memset::end#0 = (char *)memset::str#3 + $28
  [129] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [130] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [131] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [132] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [133] *memset::dst#2 = memset::c#4
  [134] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
