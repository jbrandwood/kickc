
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte/signed byte/word/signed word/dword/signed dword~) main::$0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 * (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*~) main::$1 ← (byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword~) main::$0
  (byte/signed word/word/dword/signed dword~) main::$2 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*~) main::$1 + (byte) main::i#2) ← (byte/signed word/word/dword/signed dword~) main::$2
  (byte/signed byte/word/signed word/dword/signed dword~) main::$3 ← (byte/signed byte/word/signed word/dword/signed dword) 1 * (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*~) main::$4 ← (byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword~) main::$3
  (byte/signed word/word/dword/signed dword~) main::$5 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 2
  *((byte*~) main::$4 + (byte) main::i#2) ← (byte/signed word/word/dword/signed dword~) main::$5
  (byte/signed byte/word/signed word/dword/signed dword~) main::$6 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*~) main::$7 ← (byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword~) main::$6
  (byte/signed word/word/dword/signed dword~) main::$8 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 4
  *((byte*~) main::$7 + (byte) main::i#2) ← (byte/signed word/word/dword/signed dword~) main::$8
  (byte/signed byte/word/signed word/dword/signed dword~) main::$9 ← (byte/signed byte/word/signed word/dword/signed dword) 3 * (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*~) main::$10 ← (byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword~) main::$9
  (byte/signed word/word/dword/signed dword~) main::$11 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 8
  *((byte*~) main::$10 + (byte) main::i#2) ← (byte/signed word/word/dword/signed dword~) main::$11
  (signed byte~) main::$12 ← ((signed byte)) (byte) main::i#2
  (signed byte~) main::$13 ← - (signed byte~) main::$12
  (signed byte) main::sb#0 ← (signed byte~) main::$13
  (byte/word/signed word/dword/signed dword~) main::$14 ← (byte/signed byte/word/signed word/dword/signed dword) 5 * (byte/signed byte/word/signed word/dword/signed dword) $28
  (byte*~) main::$15 ← (byte*) main::SCREEN#0 + (byte/word/signed word/dword/signed dword~) main::$14
  (signed word/signed byte/signed dword~) main::$16 ← (signed byte) main::sb#0 * (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) main::$17 ← ((byte)) (signed word/signed byte/signed dword~) main::$16
  *((byte*~) main::$15 + (byte) main::i#2) ← (byte~) main::$17
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$a)
  (bool~) main::$18 ← (byte) main::i#1 != rangelast(0,$a)
  if((bool~) main::$18) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte/signed byte/word/signed word/dword/signed dword~) main::$0
(byte*~) main::$1
(byte*~) main::$10
(byte/signed word/word/dword/signed dword~) main::$11
(signed byte~) main::$12
(signed byte~) main::$13
(byte/word/signed word/dword/signed dword~) main::$14
(byte*~) main::$15
(signed word/signed byte/signed dword~) main::$16
(byte~) main::$17
(bool~) main::$18
(byte/signed word/word/dword/signed dword~) main::$2
(byte/signed byte/word/signed word/dword/signed dword~) main::$3
(byte*~) main::$4
(byte/signed word/word/dword/signed dword~) main::$5
(byte/signed byte/word/signed word/dword/signed dword~) main::$6
(byte*~) main::$7
(byte/signed word/word/dword/signed dword~) main::$8
(byte/signed byte/word/signed word/dword/signed dword~) main::$9
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(signed byte) main::sb
(signed byte) main::sb#0

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Alias (signed byte) main::sb#0 = (signed byte~) main::$13 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$18 [29] if((byte) main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::SCREEN#0 = ((byte*))$400
Constant (const byte) main::i#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$0 = 0*$28
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$3 = 1*$28
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$6 = 2*$28
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$9 = 3*$28
Constant (const byte/word/signed word/dword/signed dword) main::$14 = 5*$28
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$1 = main::SCREEN#0+main::$0
Constant (const byte*) main::$4 = main::SCREEN#0+main::$3
Constant (const byte*) main::$7 = main::SCREEN#0+main::$6
Constant (const byte*) main::$10 = main::SCREEN#0+main::$9
Constant (const byte*) main::$15 = main::SCREEN#0+main::$14
Successful SSA optimization Pass2ConstantIdentification
Eliminating Noop Cast (signed byte~) main::$12 ← ((signed byte)) (byte) main::i#2
Eliminating Noop Cast (byte~) main::$17 ← ((byte)) (signed word/signed byte/signed dword~) main::$16
Successful SSA optimization Pass2NopCastElimination
Resolved ranged next value main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value if(main::i#1!=rangelast(0,$a)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) $b
Rewriting multiplication to remove identity multiply/divide (byte/signed word/word/dword/signed dword~) main::$2 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 1
Rewriting multiplication to use shift (byte/signed word/word/dword/signed dword~) main::$5 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 2
Rewriting multiplication to use shift (byte/signed word/word/dword/signed dword~) main::$8 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 4
Rewriting multiplication to use shift (byte/signed word/word/dword/signed dword~) main::$11 ← (byte) main::i#2 * (byte/signed byte/word/signed word/dword/signed dword) 8
Rewriting multiplication to use shift (signed word/signed byte/signed dword~) main::$16 ← (signed byte) main::sb#0 * (byte/signed byte/word/signed word/dword/signed dword) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Alias (byte) main::i#2 = (byte/signed word/word/dword/signed dword~) main::$2 
Successful SSA optimization Pass2AliasElimination
Inferred type updated to byte in [2] (byte/signed word/word/dword/signed dword~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
Inferred type updated to byte in [4] (byte/signed word/word/dword/signed dword~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2
Inferred type updated to byte in [6] (byte/signed word/word/dword/signed dword~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3
Inferred type updated to signed byte in [9] (signed word/signed byte/signed dword~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::$1 = (const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 0*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$0 = (byte/signed byte/word/signed word/dword/signed dword) 0*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$6 = (byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$3 = (byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$14 = (byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$4 = (const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$15 = (const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$9 = (byte/signed byte/word/signed word/dword/signed dword) 3*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$7 = (const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28
Constant inlined main::$10 = (const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3*(byte/signed byte/word/signed word/dword/signed dword) $28
Successful SSA optimization Pass2ConstantInlining
Simplifying constant multiply by zero 0*$28
Simplifying constant plus zero main::SCREEN#0+0
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [19] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$5
  [9] (byte~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2
  [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$8
  [11] (byte~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$11
  [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2
  [14] (signed byte~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$16
  [16] (byte) main::i#1 ← ++ (byte) main::i#2
  [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [18] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$11 22.0
(signed byte~) main::$16 11.0
(byte~) main::$5 22.0
(byte~) main::$8 22.0
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(signed byte) main::sb
(signed byte) main::sb#0 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::$8 to zero page equivalence class [ main::$8 ]
Added variable main::$11 to zero page equivalence class [ main::$11 ]
Added variable main::sb#0 to zero page equivalence class [ main::sb#0 ]
Added variable main::$16 to zero page equivalence class [ main::$16 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$5 ]
[ main::$8 ]
[ main::$11 ]
[ main::sb#0 ]
[ main::$16 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$5 ]
Allocated zp ZP_BYTE:4 [ main::$8 ]
Allocated zp ZP_BYTE:5 [ main::$11 ]
Allocated zp ZP_BYTE:6 [ main::sb#0 ]
Allocated zp ZP_BYTE:7 [ main::$16 ]

INITIAL ASM
//SEG0 File Comments
// Check that multiplication by factors of 2 is converted to shifts
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
    .label _5 = 3
    .label _8 = 4
    .label _11 = 5
    .label _16 = 7
    .label sb = 6
    .label i = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta SCREEN,y
  //SEG17 [7] (byte~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _5
  //SEG18 [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _5
    ldy i
    sta SCREEN+1*$28,y
  //SEG19 [9] (byte~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuz1=vbuz2_rol_2 
    lda i
    asl
    asl
    sta _8
  //SEG20 [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _8
    ldy i
    sta SCREEN+2*$28,y
  //SEG21 [11] (byte~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuz1=vbuz2_rol_3 
    lda i
    asl
    asl
    asl
    sta _11
  //SEG22 [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$11 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _11
    ldy i
    sta SCREEN+3*$28,y
  //SEG23 [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 -- vbsz1=_neg_vbsz2 
    lda i
    eor #$ff
    clc
    adc #1
    sta sb
  //SEG24 [14] (signed byte~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbsz1=vbsz2_rol_1 
    lda sb
    asl
    sta _16
  //SEG25 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$16 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _16
    ldy i
    sta SCREEN+5*$28,y
  //SEG26 [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG27 [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp i
    bne b1_from_b1
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [18] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [9] (byte~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#2 main::$8 ] ( main:2 [ main::i#2 main::$8 ] ) always clobbers reg byte a 
Statement [11] (byte~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ main::i#2 main::$11 ] ( main:2 [ main::i#2 main::$11 ] ) always clobbers reg byte a 
Statement [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 [ main::i#2 main::sb#0 ] ( main:2 [ main::i#2 main::sb#0 ] ) always clobbers reg byte a 
Statement [14] (signed byte~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$16 ] ( main:2 [ main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#2 main::$8 ] ( main:2 [ main::i#2 main::$8 ] ) always clobbers reg byte a 
Statement [11] (byte~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ main::i#2 main::$11 ] ( main:2 [ main::i#2 main::$11 ] ) always clobbers reg byte a 
Statement [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 [ main::i#2 main::sb#0 ] ( main:2 [ main::i#2 main::sb#0 ] ) always clobbers reg byte a 
Statement [14] (signed byte~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ main::i#2 main::$16 ] ( main:2 [ main::i#2 main::$16 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$5 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$8 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$11 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::sb#0 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$16 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:3 [ main::$5 ] 22: zp ZP_BYTE:4 [ main::$8 ] 22: zp ZP_BYTE:5 [ main::$11 ] 22: zp ZP_BYTE:6 [ main::sb#0 ] 11: zp ZP_BYTE:7 [ main::$16 ] 
Uplift Scope [] 

Uplifting [main] best 863 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$5 ] reg byte a [ main::$8 ] reg byte a [ main::$11 ] zp ZP_BYTE:6 [ main::sb#0 ] zp ZP_BYTE:7 [ main::$16 ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [] best 863 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::sb#0 ]
Uplifting [main] best 803 combination reg byte a [ main::sb#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ main::$16 ]
Uplifting [main] best 743 combination reg byte a [ main::$16 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Check that multiplication by factors of 2 is converted to shifts
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
  //SEG17 [7] (byte~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG18 [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+1*$28,x
  //SEG19 [9] (byte~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG20 [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+2*$28,x
  //SEG21 [11] (byte~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
  //SEG22 [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$11 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+3*$28,x
  //SEG23 [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG24 [14] (signed byte~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbsaa=vbsaa_rol_1 
    asl
  //SEG25 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$16 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+5*$28,x
  //SEG26 [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG27 [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b1_from_b1
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [18] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$11 reg byte a 22.0
(signed byte~) main::$16 reg byte a 11.0
(byte~) main::$5 reg byte a 22.0
(byte~) main::$8 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0
(signed byte) main::sb
(signed byte) main::sb#0 reg byte a 22.0

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$5 ]
reg byte a [ main::$8 ]
reg byte a [ main::$11 ]
reg byte a [ main::sb#0 ]
reg byte a [ main::$16 ]


FINAL ASSEMBLER
Score: 641

//SEG0 File Comments
// Check that multiplication by factors of 2 is converted to shifts
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label SCREEN = $400
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
  //SEG17 [7] (byte~) main::$5 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG18 [8] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+1*$28,x
  //SEG19 [9] (byte~) main::$8 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG20 [10] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+2*$28,x
  //SEG21 [11] (byte~) main::$11 ← (byte) main::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
  //SEG22 [12] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte~) main::$11 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+3*$28,x
  //SEG23 [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG24 [14] (signed byte~) main::$16 ← (signed byte) main::sb#0 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbsaa=vbsaa_rol_1 
    asl
  //SEG25 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$16 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+5*$28,x
  //SEG26 [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG27 [17] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b1
  //SEG28 main::@return
  //SEG29 [18] return 
    rts
}

