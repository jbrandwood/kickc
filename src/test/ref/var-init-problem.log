Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) screen#0 ← ((byte*)) (number) $400
  *((byte*) screen#0) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  (byte*) screen#5 ← phi( main/(byte*) screen#0 )
  (byte*) screen#1 ← (byte*) screen#5
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) screen#2 ← (byte*) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) screen#8 ← phi( _start::_init1/(byte*) screen#2 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) screen#6 ← phi( _start::@1/(byte*) screen#1 )
  (byte*) screen#3 ← (byte*) screen#6
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) screen#7 ← phi( _start::@2/(byte*) screen#3 )
  (byte*) screen#4 ← (byte*) screen#7
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@return
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8

Inlining cast (byte*) screen#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias screen#0 = screen#5 screen#1 
Alias screen#2 = screen#8 
Alias screen#3 = screen#6 screen#7 screen#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) screen#3 (byte*) screen#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) screen#0 = (byte*) 1024
Constant (const byte*) screen#2 = (byte*) 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte*) screen#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) screen#0) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) screen

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Variables without initialization causes problems when compiling
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // [0] *((const byte*) screen#0) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) screen#0) ← (byte) 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Variables without initialization causes problems when compiling
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // [0] *((const byte*) screen#0) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(byte*) screen
(const byte*) screen#0 screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Variables without initialization causes problems when compiling
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // *screen = 'a'
    // [0] *((const byte*) screen#0) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

