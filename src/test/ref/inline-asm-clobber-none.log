Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  main::i#6 = phi( main/main::i#0, main::@5/main::i#1 )
  main::j#0 = 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  main::i#5 = phi( main::@1/main::i#6, main::@4/main::i#3 )
  main::j#4 = phi( main::@1/main::j#0, main::@4/main::j#1 )
  main::k#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::i#4 = phi( main::@2/main::i#5, main::@3/main::i#4 )
  main::j#3 = phi( main::@2/main::j#4, main::@3/main::j#3 )
  main::k#2 = phi( main::@2/main::k#0, main::@3/main::k#1 )
  asm { pha txa pha tya pha jsr$e544 pla tay pla tax pla  }
  main::k#1 = main::k#2 + rangenext(0,$a)
  main::$0 = main::k#1 != rangelast(0,$a)
  if(main::$0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  main::i#3 = phi( main::@3/main::i#4 )
  main::j#2 = phi( main::@3/main::j#3 )
  main::j#1 = main::j#2 + rangenext(0,$a)
  main::$1 = main::j#1 != rangelast(0,$a)
  if(main::$1) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::i#2 = phi( main::@4/main::i#3 )
  main::i#1 = main::i#2 + rangenext(0,$a)
  main::$2 = main::i#1 != rangelast(0,$a)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::i#6
byte main::j
byte main::j#0
byte main::j#1
byte main::j#2
byte main::j#3
byte main::j#4
byte main::k
byte main::k#0
byte main::k#1
byte main::k#2

Alias main::j#2 = main::j#3 
Alias main::i#2 = main::i#3 main::i#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::j#2 main::j#4
Identical Phi Values main::i#2 main::i#5
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values main::i#5 main::i#6
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [9] if(main::k#1!=rangelast(0,$a)) goto main::@3
Simple Condition main::$1 [12] if(main::j#1!=rangelast(0,$a)) goto main::@2
Simple Condition main::$2 [15] if(main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::j#0 = 0
Constant main::k#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::k#1 = ++ main::k#2 to ++
Resolved ranged comparison value [9] if(main::k#1!=rangelast(0,$a)) goto main::@3 to $b
Resolved ranged next value [10] main::j#1 = ++ main::j#4 to ++
Resolved ranged comparison value [12] if(main::j#1!=rangelast(0,$a)) goto main::@2 to $b
Resolved ranged next value [13] main::i#1 = ++ main::i#6 to ++
Resolved ranged comparison value [15] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [5] if(main::k#1!=$b) goto main::@3
Adding number conversion cast (unumber) $b in [7] if(main::j#1!=$b) goto main::@2
Adding number conversion cast (unumber) $b in [9] if(main::i#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#0
Inlining constant with var siblings main::k#0
Constant inlined main::i#0 = 0
Constant inlined main::k#0 = 0
Constant inlined main::j#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@6(between main::@5 and main::@1)
Added new block during phi lifting main::@7(between main::@4 and main::@2)
Added new block during phi lifting main::@8(between main::@3 and main::@3)
Adding NOP phi() at start of main
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [12] main::i#7 = main::i#1
Coalesced [13] main::j#5 = main::j#1
Coalesced [14] main::k#3 = main::k#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@6
Culled Empty Block label main::@7
Culled Empty Block label main::@8
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] main::i#6 = phi( main/0, main::@5/main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [2] main::j#4 = phi( main::@1/0, main::@4/main::j#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [3] main::k#2 = phi( main::@2/0, main::@3/main::k#1 )
  asm { pha txa pha tya pha jsr$e544 pla tay pla tax pla  }
  [5] main::k#1 = ++ main::k#2
  [6] if(main::k#1!=$b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [7] main::j#1 = ++ main::j#4
  [8] if(main::j#1!=$b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [9] main::i#1 = ++ main::i#6
  [10] if(main::i#1!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#6 2.75
byte main::j
byte main::j#1 151.5
byte main::j#4 40.4
byte main::k
byte main::k#1 1501.5
byte main::k#2 1001.0

Initial phi equivalence classes
[ main::i#6 main::i#1 ]
[ main::j#4 main::j#1 ]
[ main::k#2 main::k#1 ]
Complete equivalence classes
[ main::i#6 main::i#1 ]
[ main::j#4 main::j#1 ]
[ main::k#2 main::k#1 ]
Allocated zp[1]:2 [ main::i#6 main::i#1 ]
Allocated zp[1]:3 [ main::j#4 main::j#1 ]
Allocated zp[1]:4 [ main::k#2 main::k#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#6 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::j#4 main::j#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::k#2 main::k#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 2,502.5: zp[1]:4 [ main::k#2 main::k#1 ] 191.9: zp[1]:3 [ main::j#4 main::j#1 ] 19.25: zp[1]:2 [ main::i#6 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 54451 combination reg byte y [ main::k#2 main::k#1 ] reg byte x [ main::j#4 main::j#1 ] reg byte a [ main::i#6 main::i#1 ] 
Uplifting [] best 54451 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that inline ASM JSR clobbers all registers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#6 = 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b1
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [1] phi main::i#6 = main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi main::j#4 = 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [2] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [2] phi main::j#4 = main::j#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [3] phi main::k#2 = 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [3] phi main::k#2 = main::k#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // asm { pha txa pha tya pha jsr$e544 pla tay pla tax pla  }
    pha
    txa
    pha
    tya
    pha
    jsr $e544
    pla
    tay
    pla
    tax
    pla
    // [5] main::k#1 = ++ main::k#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::k#1!=$b) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [7] main::j#1 = ++ main::j#4 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::j#1!=$b) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b2_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [9] main::i#1 = ++ main::i#6 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [10] if(main::i#1!=$b) goto main::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$b
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b3 with __b3
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b5 with __b1
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte main::i
byte main::i#1 reg byte a 16.5
byte main::i#6 reg byte a 2.75
byte main::j
byte main::j#1 reg byte x 151.5
byte main::j#4 reg byte x 40.4
byte main::k
byte main::k#1 reg byte y 1501.5
byte main::k#2 reg byte y 1001.0

reg byte a [ main::i#6 main::i#1 ]
reg byte x [ main::j#4 main::j#1 ]
reg byte y [ main::k#2 main::k#1 ]


FINAL ASSEMBLER
Score: 44461

  // File Comments
// Tests that inline ASM JSR clobbers all registers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#6 = 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [1] phi main::i#6 = main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [2] phi main::j#4 = 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [2] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [2] phi main::j#4 = main::j#1 [phi:main::@4->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // [3] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [3] phi main::k#2 = 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
    // [3] phi main::k#2 = main::k#1 [phi:main::@3->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // asm
    // asm { pha txa pha tya pha jsr$e544 pla tay pla tax pla  }
    pha
    txa
    pha
    tya
    pha
    jsr $e544
    pla
    tay
    pla
    tax
    pla
    // for( byte k:0..10)
    // [5] main::k#1 = ++ main::k#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::k#1!=$b) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b3
    // main::@4
    // for( byte j:0..10)
    // [7] main::j#1 = ++ main::j#4 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::j#1!=$b) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b2
    // main::@5
    // for( byte i:0..10)
    // [9] main::i#1 = ++ main::i#6 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [10] if(main::i#1!=$b) goto main::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$b
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data

