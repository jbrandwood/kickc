Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  framedone#11 = phi( __start::@1/framedone#10 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  framedone#9 = phi( main/framedone#11, main::@3/framedone#0 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1 main::@2
  framedone#5 = phi( main::@1/framedone#9, main::@2/framedone#5 )
  main::$0 = ! framedone#5
  if(main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  framedone#0 = false
  to:main::@1
main::@return: scope:[main]  from main::@1
  framedone#6 = phi( main::@1/framedone#9 )
  framedone#1 = framedone#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  framedone#2 = true
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  framedone#10 = phi( __start::__init1/framedone#2 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  framedone#7 = phi( __start::@1/framedone#1 )
  framedone#3 = framedone#7
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  framedone#8 = phi( __start::@2/framedone#3 )
  framedone#4 = framedone#8
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
bool framedone
bool framedone#0
bool framedone#1
bool framedone#10
bool framedone#11
bool framedone#2
bool framedone#3
bool framedone#4
bool framedone#5
bool framedone#6
bool framedone#7
bool framedone#8
bool framedone#9
void main()
bool main::$0

Alias framedone#1 = framedone#6 framedone#9 
Alias framedone#10 = framedone#2 
Alias framedone#3 = framedone#7 framedone#8 framedone#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values framedone#11 framedone#10
Identical Phi Values framedone#5 framedone#1
Identical Phi Values framedone#3 framedone#1
Successful SSA optimization Pass2IdenticalPhiElimination
Rewriting ! if()-condition to reversed if() [4] main::$0 = ! framedone#1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant framedone#0 = false
Constant framedone#10 = true
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [2] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings framedone#0
Inlining constant with var siblings framedone#10
Constant inlined framedone#10 = true
Constant inlined framedone#0 = false
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] framedone#1 = phi( main/true, main::@2/false )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] if(framedone#1) goto main::@1
  to:main::@2


VARIABLE REGISTER WEIGHTS
bool framedone
bool framedone#1 // 50.5
void main()

Initial phi equivalence classes
[ framedone#1 ]
Complete equivalence classes
[ framedone#1 ]
Allocated zp[1]:2 [ framedone#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ framedone#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 50.5: zp[1]:2 [ framedone#1 ] 
Uplift Scope [main] 

Uplifting [] best 880 combination reg byte a [ framedone#1 ] 
Uplifting [main] best 880 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Some bool code that causes a NullPointerException
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bool-nullpointer-exception.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi framedone#1 = true [phi:main->main::@1#0] -- vboaa=vboc1 
    lda #1
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi framedone#1 = false [phi:main::@2->main::@1#0] -- vboaa=vboc1 
    lda #0
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [2] if(framedone#1) goto main::@1 -- vboaa_then_la1 
    cmp #0
    bne __b1_from___b2
    jmp __b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1 with __b2
Removing instruction __b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b1_from___b2 to __b1
Succesful ASM optimization Pass5RelabelLongLabels

FINAL SYMBOL TABLE
bool framedone
bool framedone#1 // reg byte a 50.5
void main()

reg byte a [ framedone#1 ]


FINAL ASSEMBLER
Score: 820

  // File Comments
// Some bool code that causes a NullPointerException
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bool-nullpointer-exception.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi framedone#1 = true [phi:main->main::@1#0] -- vboaa=vboc1 
    lda #1
    jmp __b2
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1:
    // [1] phi framedone#1 = false [phi:main::@2->main::@1#0] -- vboaa=vboc1 
    lda #0
    // main::@1
    // main::@2
  __b2:
    // while(!framedone)
    // [2] if(framedone#1) goto main::@1 -- vboaa_then_la1 
    cmp #0
    bne __b1
    jmp __b2
}
  // File Data

