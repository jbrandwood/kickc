Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::line#0 = (byte*)$400
  main::cursor#0 = main::line#0
  main::msg#0 = MESSAGE
  to:main::@1
main::@1: scope:[main]  from main main::@5
  main::cursor#5 = phi( main/main::cursor#0, main::@5/main::cursor#6 )
  main::line#4 = phi( main/main::line#0, main::@5/main::line#5 )
  main::msg#2 = phi( main/main::msg#0, main::@5/main::msg#1 )
  main::$0 = 0 != *main::msg#2
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::cursor#4 = phi( main::@1/main::cursor#5 )
  main::line#3 = phi( main::@1/main::line#4 )
  main::msg#3 = phi( main::@1/main::msg#2 )
  if(*main::msg#3=='
') goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  main::msg#6 = phi( main::@2/main::msg#3 )
  main::line#2 = phi( main::@2/main::line#3 )
  main::line#1 = main::line#2 + $28
  main::cursor#1 = main::line#1
  to:main::@5
main::@4: scope:[main]  from main::@2
  main::line#6 = phi( main::@2/main::line#3 )
  main::cursor#3 = phi( main::@2/main::cursor#4 )
  main::msg#4 = phi( main::@2/main::msg#3 )
  *main::cursor#3 = *main::msg#4
  main::cursor#2 = ++ main::cursor#3
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  main::cursor#6 = phi( main::@3/main::cursor#1, main::@4/main::cursor#2 )
  main::line#5 = phi( main::@3/main::line#1, main::@4/main::line#6 )
  main::msg#5 = phi( main::@3/main::msg#6, main::@4/main::msg#4 )
  main::msg#1 = ++ main::msg#5
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* MESSAGE[]  = "hello
world"
void __start()
void main()
bool~ main::$0
byte* main::cursor
byte* main::cursor#0
byte* main::cursor#1
byte* main::cursor#2
byte* main::cursor#3
byte* main::cursor#4
byte* main::cursor#5
byte* main::cursor#6
byte* main::line
byte* main::line#0
byte* main::line#1
byte* main::line#2
byte* main::line#3
byte* main::line#4
byte* main::line#5
byte* main::line#6
byte* main::msg
byte* main::msg#0
byte* main::msg#1
byte* main::msg#2
byte* main::msg#3
byte* main::msg#4
byte* main::msg#5
byte* main::msg#6

Adding number conversion cast (unumber) 0 in main::$0 = 0 != *main::msg#2
Adding number conversion cast (unumber) $28 in main::line#1 = main::line#2 + $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::cursor#0 = main::line#0 
Alias main::msg#2 = main::msg#3 main::msg#6 main::msg#4 
Alias main::line#2 = main::line#3 main::line#4 main::line#6 
Alias main::cursor#3 = main::cursor#4 main::cursor#5 
Alias main::cursor#1 = main::line#1 
Successful SSA optimization Pass2AliasElimination
Alias main::msg#2 = main::msg#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(0!=*main::msg#2) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::cursor#0 = (byte*) 1024
Constant main::msg#0 = MESSAGE
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::cursor#0
Inlining constant with var siblings main::msg#0
Constant inlined main::cursor#0 = (byte*) 1024
Constant inlined main::msg#0 = MESSAGE
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 5 initial phi equivalence classes
Coalesced [7] main::line#9 = main::line#2
Coalesced [8] main::cursor#9 = main::cursor#2
Coalesced [11] main::msg#7 = main::msg#1
Coalesced (already) [12] main::line#7 = main::line#5
Coalesced [13] main::cursor#7 = main::cursor#6
Not coalescing [15] main::line#8 = main::cursor#1
Coalesced [16] main::cursor#8 = main::cursor#1
Coalesced down to 3 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] main::cursor#3 = phi( main/(byte*) 1024, main::@5/main::cursor#6 )
  [1] main::line#2 = phi( main/(byte*) 1024, main::@5/main::line#5 )
  [1] main::msg#2 = phi( main/MESSAGE, main::@5/main::msg#1 )
  [2] if(0!=*main::msg#2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] if(*main::msg#2=='
') goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [5] *main::cursor#3 = *main::msg#2
  [6] main::cursor#2 = ++ main::cursor#3
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  [7] main::cursor#6 = phi( main::@3/main::cursor#1, main::@4/main::cursor#2 )
  [7] main::line#5 = phi( main::@3/main::line#8, main::@4/main::line#2 )
  [8] main::msg#1 = ++ main::msg#2
  to:main::@1
main::@3: scope:[main]  from main::@2
  [9] main::cursor#1 = main::line#2 + $28
  [10] main::line#8 = main::cursor#1
  to:main::@5


VARIABLE REGISTER WEIGHTS
void main()
byte* main::cursor
byte* main::cursor#1 16.5
byte* main::cursor#2 22.0
byte* main::cursor#3 8.25
byte* main::cursor#6 16.5
byte* main::line
byte* main::line#2 6.6000000000000005
byte* main::line#5 16.5
byte* main::line#8 22.0
byte* main::msg
byte* main::msg#1 22.0
byte* main::msg#2 6.875

Initial phi equivalence classes
[ main::msg#2 main::msg#1 ]
[ main::line#2 main::line#5 main::line#8 ]
[ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ]
Complete equivalence classes
[ main::msg#2 main::msg#1 ]
[ main::line#2 main::line#5 main::line#8 ]
[ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ]
Allocated zp[2]:2 [ main::msg#2 main::msg#1 ]
Allocated zp[2]:4 [ main::line#2 main::line#5 main::line#8 ]
Allocated zp[2]:6 [ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(0!=*main::msg#2) goto main::@2 [ main::msg#2 main::line#2 main::cursor#3 ] (  [ main::msg#2 main::line#2 main::cursor#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [4] if(*main::msg#2=='
') goto main::@3 [ main::msg#2 main::line#2 main::cursor#3 ] (  [ main::msg#2 main::line#2 main::cursor#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [5] *main::cursor#3 = *main::msg#2 [ main::msg#2 main::line#2 main::cursor#3 ] (  [ main::msg#2 main::line#2 main::cursor#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] main::cursor#1 = main::line#2 + $28 [ main::msg#2 main::cursor#1 ] (  [ main::msg#2 main::cursor#1 ] { }  ) always clobbers reg byte a 
Statement [10] main::line#8 = main::cursor#1 [ main::msg#2 main::line#8 main::cursor#1 ] (  [ main::msg#2 main::line#8 main::cursor#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::msg#2 main::msg#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::line#2 main::line#5 main::line#8 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ] : zp[2]:6 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 63.25: zp[2]:6 [ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ] 45.1: zp[2]:4 [ main::line#2 main::line#5 main::line#8 ] 28.88: zp[2]:2 [ main::msg#2 main::msg#1 ] 
Uplift Scope [] 

Uplifting [main] best 1431 combination zp[2]:6 [ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ] zp[2]:4 [ main::line#2 main::line#5 main::line#8 ] zp[2]:2 [ main::msg#2 main::msg#1 ] 
Uplifting [] best 1431 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test using some simple supported string escape \n in both string and char
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-escapes-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label cursor = 6
    .label msg = 2
    .label line = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::cursor#3 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z cursor
    lda #>$400
    sta.z cursor+1
    // [1] phi main::line#2 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    // [1] phi main::msg#2 = MESSAGE [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<MESSAGE
    sta.z msg
    lda #>MESSAGE
    sta.z msg+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if(0!=*main::msg#2) goto main::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] if(*main::msg#2==' ') goto main::@3 -- _deref_pbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    ldy #0
    cmp (msg),y
    beq __b3
    jmp __b4
    // main::@4
  __b4:
    // [5] *main::cursor#3 = *main::msg#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (cursor),y
    // [6] main::cursor#2 = ++ main::cursor#3 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [7] phi from main::@3 main::@4 to main::@5 [phi:main::@3/main::@4->main::@5]
  __b5_from___b3:
  __b5_from___b4:
    // [7] phi main::cursor#6 = main::cursor#1 [phi:main::@3/main::@4->main::@5#0] -- register_copy 
    // [7] phi main::line#5 = main::line#8 [phi:main::@3/main::@4->main::@5#1] -- register_copy 
    jmp __b5
    // main::@5
  __b5:
    // [8] main::msg#1 = ++ main::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [1] phi main::cursor#3 = main::cursor#6 [phi:main::@5->main::@1#0] -- register_copy 
    // [1] phi main::line#2 = main::line#5 [phi:main::@5->main::@1#1] -- register_copy 
    // [1] phi main::msg#2 = main::msg#1 [phi:main::@5->main::@1#2] -- register_copy 
    jmp __b1
    // main::@3
  __b3:
    // [9] main::cursor#1 = main::line#2 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z cursor
    lda #0
    adc.z line+1
    sta.z cursor+1
    // [10] main::line#8 = main::cursor#1 -- pbuz1=pbuz2 
    lda.z cursor
    sta.z line
    lda.z cursor+1
    sta.z line+1
    jmp __b5_from___b3
}
  // File Data
.segment Data
  MESSAGE: .text @"hello\nworld"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b5_from___b3 with __b5
Removing instruction __b5_from___b3:
Removing instruction __b5_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
const byte* MESSAGE[]  = "hello
world"
void main()
byte* main::cursor
byte* main::cursor#1 cursor zp[2]:6 16.5
byte* main::cursor#2 cursor zp[2]:6 22.0
byte* main::cursor#3 cursor zp[2]:6 8.25
byte* main::cursor#6 cursor zp[2]:6 16.5
byte* main::line
byte* main::line#2 line zp[2]:4 6.6000000000000005
byte* main::line#5 line zp[2]:4 16.5
byte* main::line#8 line zp[2]:4 22.0
byte* main::msg
byte* main::msg#1 msg zp[2]:2 22.0
byte* main::msg#2 msg zp[2]:2 6.875

zp[2]:2 [ main::msg#2 main::msg#1 ]
zp[2]:4 [ main::line#2 main::line#5 main::line#8 ]
zp[2]:6 [ main::cursor#3 main::cursor#6 main::cursor#1 main::cursor#2 ]


FINAL ASSEMBLER
Score: 1271

  // File Comments
// Test using some simple supported string escape \n in both string and char
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-escapes-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label cursor = 6
    .label msg = 2
    .label line = 4
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::cursor#3 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z cursor
    lda #>$400
    sta.z cursor+1
    // [1] phi main::line#2 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    // [1] phi main::msg#2 = MESSAGE [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<MESSAGE
    sta.z msg
    lda #>MESSAGE
    sta.z msg+1
    // main::@1
  __b1:
    // while(*msg)
    // [2] if(0!=*main::msg#2) goto main::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // case '\n':
    //                 line += 0x28;
    //                 cursor = line;
    //                 break;
    // [4] if(*main::msg#2==' ') goto main::@3 -- _deref_pbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    ldy #0
    cmp (msg),y
    beq __b3
    // main::@4
    // *cursor++ = *msg
    // [5] *main::cursor#3 = *main::msg#2 -- _deref_pbuz1=_deref_pbuz2 
    lda (msg),y
    sta (cursor),y
    // *cursor++ = *msg;
    // [6] main::cursor#2 = ++ main::cursor#3 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [7] phi from main::@3 main::@4 to main::@5 [phi:main::@3/main::@4->main::@5]
    // [7] phi main::cursor#6 = main::cursor#1 [phi:main::@3/main::@4->main::@5#0] -- register_copy 
    // [7] phi main::line#5 = main::line#8 [phi:main::@3/main::@4->main::@5#1] -- register_copy 
    // main::@5
  __b5:
    // msg++;
    // [8] main::msg#1 = ++ main::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [1] phi main::cursor#3 = main::cursor#6 [phi:main::@5->main::@1#0] -- register_copy 
    // [1] phi main::line#2 = main::line#5 [phi:main::@5->main::@1#1] -- register_copy 
    // [1] phi main::msg#2 = main::msg#1 [phi:main::@5->main::@1#2] -- register_copy 
    jmp __b1
    // main::@3
  __b3:
    // line += 0x28
    // [9] main::cursor#1 = main::line#2 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z cursor
    lda #0
    adc.z line+1
    sta.z cursor+1
    // [10] main::line#8 = main::cursor#1 -- pbuz1=pbuz2 
    lda.z cursor
    sta.z line
    lda.z cursor+1
    sta.z line+1
    jmp __b5
}
  // File Data
.segment Data
  MESSAGE: .text @"hello\nworld"
  .byte 0

