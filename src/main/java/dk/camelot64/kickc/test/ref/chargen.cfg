@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  asm { sei }
  [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [3] (byte*) main::sc#7 ← phi( main/(const byte*) SCREEN#0 main::@5/(byte*) main::sc#2 ) [ main::y#2 main::sc#7 ] ( main:0 [ main::y#2 main::sc#7 ] )
  [3] (byte) main::y#2 ← phi( main/(byte) 0 main::@5/(byte) main::y#1 ) [ main::y#2 main::sc#7 ] ( main:0 [ main::y#2 main::sc#7 ] )
  [4] (byte) main::bits#0 ← (const byte*) main::CHAR_A#0 *idx (byte) main::y#2 [ main::y#2 main::sc#7 main::bits#0 ] ( main:0 [ main::y#2 main::sc#7 main::bits#0 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [5] (byte) main::x#2 ← phi( main::@1/(byte) 0 main::@3/(byte) main::x#1 ) [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] )
  [5] (byte*) main::sc#3 ← phi( main::@1/(byte*) main::sc#7 main::@3/(byte*) main::sc#1 ) [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] )
  [5] (byte) main::bits#2 ← phi( main::@1/(byte) main::bits#0 main::@3/(byte) main::bits#1 ) [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] )
  [6] (byte~) main::$2 ← (byte) main::bits#2 & (byte) 128 [ main::y#2 main::bits#2 main::sc#3 main::x#2 main::$2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 main::$2 ] )
  [7] if((byte~) main::$2==(byte) 0) goto main::@3 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] )
  to:main::@4
main::@4: scope:[main]  from main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [8] (byte) main::c#2 ← phi( main::@2/(byte) '.' main::@4/(byte) '*' ) [ main::y#2 main::bits#2 main::sc#3 main::x#2 main::c#2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 main::c#2 ] )
  [9] *((byte*) main::sc#3) ← (byte) main::c#2 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] ( main:0 [ main::y#2 main::bits#2 main::sc#3 main::x#2 ] )
  [10] (byte*) main::sc#1 ← ++ (byte*) main::sc#3 [ main::y#2 main::bits#2 main::x#2 main::sc#1 ] ( main:0 [ main::y#2 main::bits#2 main::x#2 main::sc#1 ] )
  [11] (byte) main::bits#1 ← (byte) main::bits#2 << (byte) 1 [ main::y#2 main::x#2 main::bits#1 main::sc#1 ] ( main:0 [ main::y#2 main::x#2 main::bits#1 main::sc#1 ] )
  [12] (byte) main::x#1 ← ++ (byte) main::x#2 [ main::y#2 main::bits#1 main::sc#1 main::x#1 ] ( main:0 [ main::y#2 main::bits#1 main::sc#1 main::x#1 ] )
  [13] if((byte) main::x#1!=(byte) 8) goto main::@2 [ main::y#2 main::bits#1 main::sc#1 main::x#1 ] ( main:0 [ main::y#2 main::bits#1 main::sc#1 main::x#1 ] )
  to:main::@5
main::@5: scope:[main]  from main::@3
  [14] (byte*) main::sc#2 ← (byte*) main::sc#1 + (byte) 32 [ main::y#2 main::sc#2 ] ( main:0 [ main::y#2 main::sc#2 ] )
  [15] (byte) main::y#1 ← ++ (byte) main::y#2 [ main::y#1 main::sc#2 ] ( main:0 [ main::y#1 main::sc#2 ] )
  [16] if((byte) main::y#1!=(byte) 8) goto main::@1 [ main::y#1 main::sc#2 ] ( main:0 [ main::y#1 main::sc#2 ] )
  to:main::@6
main::@6: scope:[main]  from main::@5
  [17] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] )
  asm { cli }
  to:main::@return
main::@return: scope:[main]  from main::@6
  [19] return  [ ] ( main:0 [ ] )
  to:@return
