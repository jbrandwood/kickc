constant byte OFFSET_STRUCT_NODE_VALUE = 2
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
word Ticks
word Ticks#0 Ticks zp[2]:12 101.0
word Ticks#1 Ticks_1 zp[2]:14 202.0
void __start()
struct node* alloc()
word~ alloc::$1 zp[2]:12 200002.0
struct node* alloc::result
struct node* alloc::return
struct node* alloc::return#0 return zp[2]:12 27500.5
struct node* alloc::return#2 return zp[2]:12 20002.0
void end()
word free_
word free_#14 free_ zp[2]:4 8416.833333333332
word free_#24 free_ zp[2]:4 40200.600000000006
constant struct node* heap[$fa0]  = { fill( $fa0, 0) }
volatile word last_time loadstore zp[2]:10 18.454545454545453
void main()
word~ main::$5 zp[2]:4 101.0
byte main::c
byte main::c#2 reg byte x 151.5
byte main::c#8 reg byte x 16.833333333333332
word main::i
word main::i#2 i zp[2]:8 1501.5
word main::i#3 i zp[2]:8 1001.0
void prepend(word prepend::x)
struct node* prepend::new
struct node* prepend::new#1 new zp[2]:12 6667.333333333333
word prepend::x
word prepend::x#0 x zp[2]:8 1833.6666666666665
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#1 reg byte a 20002.0
byte print_char::ch#2 reg byte a 202.0
byte print_char::ch#3 reg byte a 120104.0
byte* print_char_cursor
byte* print_char_cursor#27 print_char_cursor zp[2]:6 110052.5
byte* print_char_cursor#28 print_char_cursor zp[2]:6 4336.833333333333
byte* print_char_cursor#48 print_char_cursor zp[2]:6 18.363636363636363
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:8 15001.5
byte* print_line_cursor#9 print_line_cursor zp[2]:8 20002.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 2002.0
byte print_uchar::b#1 reg byte x 2002.0
byte print_uchar::b#2 reg byte x 5501.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:14 701.0
struct node* root
struct node* root#12 root zp[2]:2 2000.4999999999998
struct node* root#22 root zp[2]:2 1833.6666666666665
void start()
constant word* const start::LAST_TIME = &last_time
word sum()
struct node* sum::current
struct node* sum::current#1 current zp[2]:2 2002.0
struct node* sum::current#2 current zp[2]:2 200002.0
struct node* sum::current#3 current zp[2]:2 67001.0
word sum::return
word sum::return#2 return zp[2]:4 202.0
word sum::s
word sum::s#2 s zp[2]:4 100001.0
word sum::s#3 s zp[2]:4 50025.75

reg byte x [ main::c#8 main::c#2 ]
zp[2]:2 [ root#22 root#12 sum::current#3 sum::current#1 sum::current#2 ]
zp[2]:4 [ sum::s#3 sum::s#2 sum::return#2 main::$5 free_#24 free_#14 ]
reg byte a [ print_char::ch#3 print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:6 [ print_char_cursor#27 print_char_cursor#48 print_char_cursor#28 ]
zp[2]:8 [ print_line_cursor#9 print_line_cursor#0 main::i#3 main::i#2 prepend::x#0 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:10 [ last_time ]
zp[2]:12 [ Ticks#0 alloc::return#2 prepend::new#1 alloc::return#0 alloc::$1 ]
zp[2]:14 [ Ticks#1 print_uint::w#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
