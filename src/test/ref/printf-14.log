Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uchar main::c (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL } 
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 
Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  toupper::ch#1 = phi( strupr::@2/toupper::ch#0 )
  toupper::$0 = toupper::ch#1 >= 'a'
  toupper::$1 = toupper::ch#1 <= 'z'
  toupper::$2 = toupper::$0 && toupper::$1
  if(toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  toupper::ch#2 = phi( toupper/toupper::ch#1 )
  toupper::$3 = toupper::ch#2 + 'A'-'a'
  toupper::return#0 = toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  toupper::ch#3 = phi( toupper/toupper::ch#1 )
  toupper::return#1 = toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  toupper::return#4 = phi( toupper::@1/toupper::return#0, toupper::@2/toupper::return#1 )
  toupper::return#2 = toupper::return#4
  return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  memcpy::num#2 = phi( cscroll::@3/memcpy::num#0, cscroll::@4/memcpy::num#1 )
  memcpy::destination#2 = phi( cscroll::@3/memcpy::destination#0, cscroll::@4/memcpy::destination#1 )
  memcpy::source#2 = phi( cscroll::@3/memcpy::source#0, cscroll::@4/memcpy::source#1 )
  memcpy::src#0 = ((byte*)) memcpy::source#2
  memcpy::dst#0 = ((byte*)) memcpy::destination#2
  memcpy::$2 = (byte*)memcpy::source#2
  memcpy::$0 = memcpy::$2 + memcpy::num#2
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#4 = phi( memcpy/memcpy::destination#2, memcpy::@2/memcpy::destination#5 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#5 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#3 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::return#0 = memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#4 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#4
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  memset::c#5 = phi( cscroll::@5/memset::c#0, cscroll::@6/memset::c#1 )
  memset::str#4 = phi( cscroll::@5/memset::str#0, cscroll::@6/memset::str#1 )
  memset::num#2 = phi( cscroll::@5/memset::num#0, cscroll::@6/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  strupr::str#1 = phi( printf_number_buffer::@11/strupr::str#0 )
  strupr::src#0 = strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  strupr::str#3 = phi( strupr/strupr::str#1, strupr::@4/strupr::str#4 )
  strupr::src#2 = phi( strupr/strupr::src#0, strupr::@4/strupr::src#1 )
  strupr::$1 = 0 != *strupr::src#2
  if(strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  strupr::str#5 = phi( strupr::@1/strupr::str#3 )
  strupr::src#3 = phi( strupr::@1/strupr::src#2 )
  toupper::ch#0 = *strupr::src#3
  call toupper 
  toupper::return#3 = toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  strupr::str#4 = phi( strupr::@2/strupr::str#5 )
  strupr::src#4 = phi( strupr::@2/strupr::src#3 )
  toupper::return#5 = phi( strupr::@2/toupper::return#3 )
  strupr::$0 = toupper::return#5
  *strupr::src#4 = strupr::$0
  strupr::src#1 = ++ strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  strupr::str#2 = phi( strupr::@1/strupr::str#3 )
  strupr::return#0 = strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  strupr::return#3 = phi( strupr::@3/strupr::return#0 )
  strupr::return#1 = strupr::return#3
  return 
  to:@return

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  strlen::str#4 = phi( printf_number_buffer::@6/strlen::str#1 )
  strlen::len#0 = 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  strlen::len#4 = phi( strlen/strlen::len#0, strlen::@2/strlen::len#1 )
  strlen::str#2 = phi( strlen/strlen::str#4, strlen::@2/strlen::str#0 )
  strlen::$0 = 0 != *strlen::str#2
  if(strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  strlen::str#3 = phi( strlen::@1/strlen::str#2 )
  strlen::len#2 = phi( strlen::@1/strlen::len#4 )
  strlen::len#1 = ++ strlen::len#2
  strlen::str#0 = ++ strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  strlen::len#3 = phi( strlen::@1/strlen::len#4 )
  strlen::return#0 = strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  strlen::return#3 = phi( strlen::@3/strlen::return#0 )
  strlen::return#1 = strlen::return#3
  return 
  to:@return

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@3
  uctoa::buffer#21 = phi( printf_uchar::@3/uctoa::buffer#5 )
  uctoa::value#12 = phi( printf_uchar::@3/uctoa::value#1 )
  uctoa::radix#1 = phi( printf_uchar::@3/uctoa::radix#0 )
  uctoa::max_digits#0 = 0
  uctoa::digit_values#0 = (byte*) 0
  uctoa::$0 = uctoa::radix#1 == DECIMAL
  if(uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  uctoa::buffer#17 = phi( uctoa/uctoa::buffer#21 )
  uctoa::value#8 = phi( uctoa/uctoa::value#12 )
  uctoa::max_digits#1 = 3
  uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  uctoa::value#13 = phi( uctoa/uctoa::value#12 )
  uctoa::buffer#16 = phi( uctoa/uctoa::buffer#21 )
  uctoa::radix#2 = phi( uctoa/uctoa::radix#1 )
  uctoa::$1 = uctoa::radix#2 == HEXADECIMAL
  if(uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  uctoa::buffer#18 = phi( uctoa::@6/uctoa::buffer#16 )
  uctoa::value#9 = phi( uctoa::@6/uctoa::value#13 )
  uctoa::max_digits#2 = 2
  uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  uctoa::value#14 = phi( uctoa::@6/uctoa::value#13 )
  uctoa::buffer#13 = phi( uctoa::@6/uctoa::buffer#16 )
  uctoa::radix#3 = phi( uctoa::@6/uctoa::radix#2 )
  uctoa::$2 = uctoa::radix#3 == OCTAL
  if(uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  uctoa::buffer#19 = phi( uctoa::@7/uctoa::buffer#13 )
  uctoa::value#10 = phi( uctoa::@7/uctoa::value#14 )
  uctoa::max_digits#3 = 3
  uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  uctoa::value#15 = phi( uctoa::@7/uctoa::value#14 )
  uctoa::buffer#10 = phi( uctoa::@7/uctoa::buffer#13 )
  uctoa::radix#4 = phi( uctoa::@7/uctoa::radix#3 )
  uctoa::$3 = uctoa::radix#4 == BINARY
  if(uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  uctoa::buffer#20 = phi( uctoa::@8/uctoa::buffer#10 )
  uctoa::value#11 = phi( uctoa::@8/uctoa::value#15 )
  uctoa::max_digits#4 = 8
  uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  uctoa::buffer#6 = phi( uctoa::@8/uctoa::buffer#10 )
  *uctoa::buffer#6 = 'e'
  uctoa::buffer#0 = ++ uctoa::buffer#6
  *uctoa::buffer#0 = 'r'
  uctoa::buffer#1 = ++ uctoa::buffer#0
  *uctoa::buffer#1 = 'r'
  uctoa::buffer#2 = ++ uctoa::buffer#1
  *uctoa::buffer#2 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  uctoa::buffer#15 = phi( uctoa::@1/uctoa::buffer#17, uctoa::@2/uctoa::buffer#18, uctoa::@3/uctoa::buffer#19, uctoa::@4/uctoa::buffer#20 )
  uctoa::value#7 = phi( uctoa::@1/uctoa::value#8, uctoa::@2/uctoa::value#9, uctoa::@3/uctoa::value#10, uctoa::@4/uctoa::value#11 )
  uctoa::digit_values#8 = phi( uctoa::@1/uctoa::digit_values#1, uctoa::@2/uctoa::digit_values#2, uctoa::@3/uctoa::digit_values#3, uctoa::@4/uctoa::digit_values#4 )
  uctoa::max_digits#7 = phi( uctoa::@1/uctoa::max_digits#1, uctoa::@2/uctoa::max_digits#2, uctoa::@3/uctoa::max_digits#3, uctoa::@4/uctoa::max_digits#4 )
  uctoa::started#0 = 0
  uctoa::digit#0 = 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  uctoa::buffer#11 = phi( uctoa::@13/uctoa::buffer#14, uctoa::@5/uctoa::buffer#15 )
  uctoa::started#3 = phi( uctoa::@13/uctoa::started#4, uctoa::@5/uctoa::started#0 )
  uctoa::value#5 = phi( uctoa::@13/uctoa::value#6, uctoa::@5/uctoa::value#7 )
  uctoa::digit_values#6 = phi( uctoa::@13/uctoa::digit_values#7, uctoa::@5/uctoa::digit_values#8 )
  uctoa::digit#2 = phi( uctoa::@13/uctoa::digit#1, uctoa::@5/uctoa::digit#0 )
  uctoa::max_digits#5 = phi( uctoa::@13/uctoa::max_digits#6, uctoa::@5/uctoa::max_digits#7 )
  uctoa::$4 = uctoa::max_digits#5 - 1
  uctoa::$5 = uctoa::digit#2 < uctoa::$4
  if(uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  uctoa::max_digits#8 = phi( uctoa::@10/uctoa::max_digits#5 )
  uctoa::buffer#12 = phi( uctoa::@10/uctoa::buffer#11 )
  uctoa::started#2 = phi( uctoa::@10/uctoa::started#3 )
  uctoa::value#2 = phi( uctoa::@10/uctoa::value#5 )
  uctoa::digit#3 = phi( uctoa::@10/uctoa::digit#2 )
  uctoa::digit_values#5 = phi( uctoa::@10/uctoa::digit_values#6 )
  uctoa::digit_value#0 = uctoa::digit_values#5[uctoa::digit#3]
  uctoa::$6 = uctoa::value#2 >= uctoa::digit_value#0
  uctoa::$7 = uctoa::started#2 || uctoa::$6
  uctoa::$8 = ! uctoa::$7
  if(uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  uctoa::buffer#7 = phi( uctoa::@10/uctoa::buffer#11 )
  uctoa::value#3 = phi( uctoa::@10/uctoa::value#5 )
  uctoa::$10 = (byte)uctoa::value#3
  *uctoa::buffer#7 = DIGITS[uctoa::$10]
  uctoa::buffer#3 = ++ uctoa::buffer#7
  *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  uctoa::buffer#14 = phi( uctoa::@11/uctoa::buffer#12, uctoa::@15/uctoa::buffer#4 )
  uctoa::started#4 = phi( uctoa::@11/uctoa::started#2, uctoa::@15/uctoa::started#1 )
  uctoa::value#6 = phi( uctoa::@11/uctoa::value#2, uctoa::@15/uctoa::value#0 )
  uctoa::digit_values#7 = phi( uctoa::@11/uctoa::digit_values#5, uctoa::@15/uctoa::digit_values#9 )
  uctoa::max_digits#6 = phi( uctoa::@11/uctoa::max_digits#8, uctoa::@15/uctoa::max_digits#9 )
  uctoa::digit#4 = phi( uctoa::@11/uctoa::digit#3, uctoa::@15/uctoa::digit#5 )
  uctoa::digit#1 = ++ uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  uctoa::digit_values#10 = phi( uctoa::@11/uctoa::digit_values#5 )
  uctoa::max_digits#10 = phi( uctoa::@11/uctoa::max_digits#8 )
  uctoa::digit#6 = phi( uctoa::@11/uctoa::digit#3 )
  uctoa::digit_value#1 = phi( uctoa::@11/uctoa::digit_value#0 )
  uctoa::value#4 = phi( uctoa::@11/uctoa::value#2 )
  uctoa::buffer#8 = phi( uctoa::@11/uctoa::buffer#12 )
  uctoa_append::buffer#0 = uctoa::buffer#8
  uctoa_append::value#0 = uctoa::value#4
  uctoa_append::sub#0 = uctoa::digit_value#1
  call uctoa_append 
  uctoa_append::return#0 = uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  uctoa::digit_values#9 = phi( uctoa::@14/uctoa::digit_values#10 )
  uctoa::max_digits#9 = phi( uctoa::@14/uctoa::max_digits#10 )
  uctoa::digit#5 = phi( uctoa::@14/uctoa::digit#6 )
  uctoa::buffer#9 = phi( uctoa::@14/uctoa::buffer#8 )
  uctoa_append::return#3 = phi( uctoa::@14/uctoa_append::return#0 )
  uctoa::$9 = uctoa_append::return#3
  uctoa::value#0 = uctoa::$9
  uctoa::buffer#4 = ++ uctoa::buffer#9
  uctoa::started#1 = 1
  to:uctoa::@13

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  uctoa_append::buffer#3 = phi( uctoa::@14/uctoa_append::buffer#0 )
  uctoa_append::sub#3 = phi( uctoa::@14/uctoa_append::sub#0 )
  uctoa_append::value#5 = phi( uctoa::@14/uctoa_append::value#0 )
  uctoa_append::digit#0 = 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  uctoa_append::buffer#2 = phi( uctoa_append/uctoa_append::buffer#3, uctoa_append::@2/uctoa_append::buffer#4 )
  uctoa_append::digit#4 = phi( uctoa_append/uctoa_append::digit#0, uctoa_append::@2/uctoa_append::digit#1 )
  uctoa_append::sub#1 = phi( uctoa_append/uctoa_append::sub#3, uctoa_append::@2/uctoa_append::sub#2 )
  uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#5, uctoa_append::@2/uctoa_append::value#1 )
  uctoa_append::$0 = uctoa_append::value#2 >= uctoa_append::sub#1
  if(uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  uctoa_append::buffer#4 = phi( uctoa_append::@1/uctoa_append::buffer#2 )
  uctoa_append::sub#2 = phi( uctoa_append::@1/uctoa_append::sub#1 )
  uctoa_append::value#3 = phi( uctoa_append::@1/uctoa_append::value#2 )
  uctoa_append::digit#2 = phi( uctoa_append::@1/uctoa_append::digit#4 )
  uctoa_append::digit#1 = ++ uctoa_append::digit#2
  uctoa_append::value#1 = uctoa_append::value#3 - uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  uctoa_append::value#4 = phi( uctoa_append::@1/uctoa_append::value#2 )
  uctoa_append::buffer#1 = phi( uctoa_append::@1/uctoa_append::buffer#2 )
  uctoa_append::digit#3 = phi( uctoa_append::@1/uctoa_append::digit#4 )
  *uctoa_append::buffer#1 = DIGITS[uctoa_append::digit#3]
  uctoa_append::return#1 = uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  uctoa_append::return#4 = phi( uctoa_append::@3/uctoa_append::return#1 )
  uctoa_append::return#2 = uctoa_append::return#4
  return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  clrscr::line_text#0 = CONIO_SCREEN_TEXT
  clrscr::line_cols#0 = CONIO_SCREEN_COLORS
  clrscr::l#0 = 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  clrscr::line_cols#6 = phi( clrscr/clrscr::line_cols#0, clrscr::@6/clrscr::line_cols#1 )
  clrscr::line_text#6 = phi( clrscr/clrscr::line_text#0, clrscr::@6/clrscr::line_text#1 )
  clrscr::l#2 = phi( clrscr/clrscr::l#0, clrscr::@6/clrscr::l#1 )
  clrscr::$0 = clrscr::l#2 < $19
  if(clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  clrscr::l#5 = phi( clrscr::@1/clrscr::l#2 )
  clrscr::line_cols#5 = phi( clrscr::@1/clrscr::line_cols#6 )
  clrscr::line_text#5 = phi( clrscr::@1/clrscr::line_text#6 )
  clrscr::c#0 = 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  clrscr::l#4 = phi( clrscr::@2/clrscr::l#5, clrscr::@5/clrscr::l#6 )
  clrscr::line_cols#4 = phi( clrscr::@2/clrscr::line_cols#5, clrscr::@5/clrscr::line_cols#2 )
  clrscr::line_text#4 = phi( clrscr::@2/clrscr::line_text#5, clrscr::@5/clrscr::line_text#2 )
  clrscr::c#2 = phi( clrscr::@2/clrscr::c#0, clrscr::@5/clrscr::c#1 )
  clrscr::$1 = clrscr::c#2 < $28
  if(clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  clrscr::l#6 = phi( clrscr::@4/clrscr::l#4 )
  clrscr::line_cols#2 = phi( clrscr::@4/clrscr::line_cols#4 )
  clrscr::c#3 = phi( clrscr::@4/clrscr::c#2 )
  clrscr::line_text#2 = phi( clrscr::@4/clrscr::line_text#4 )
  clrscr::line_text#2[clrscr::c#3] = ' '
  clrscr::line_cols#2[clrscr::c#3] = conio_textcolor
  clrscr::c#1 = ++ clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  clrscr::l#3 = phi( clrscr::@4/clrscr::l#4 )
  clrscr::line_cols#3 = phi( clrscr::@4/clrscr::line_cols#4 )
  clrscr::line_text#3 = phi( clrscr::@4/clrscr::line_text#4 )
  clrscr::line_text#1 = clrscr::line_text#3 + $28
  clrscr::line_cols#1 = clrscr::line_cols#3 + $28
  clrscr::l#1 = ++ clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 cscroll::@2
  gotoxy::x#5 = phi( conio_c64_init::@1/gotoxy::x#2, cscroll::@2/gotoxy::x#1 )
  gotoxy::y#3 = phi( conio_c64_init::@1/gotoxy::y#2, cscroll::@2/gotoxy::y#1 )
  gotoxy::$0 = gotoxy::y#3 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  gotoxy::y#5 = phi( gotoxy/gotoxy::y#3, gotoxy::@3/gotoxy::y#0 )
  gotoxy::x#3 = phi( gotoxy/gotoxy::x#5, gotoxy::@3/gotoxy::x#6 )
  gotoxy::$2 = gotoxy::x#3 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  gotoxy::x#6 = phi( gotoxy/gotoxy::x#5 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  gotoxy::y#4 = phi( gotoxy::@1/gotoxy::y#5, gotoxy::@4/gotoxy::y#6 )
  gotoxy::x#4 = phi( gotoxy::@1/gotoxy::x#3, gotoxy::@4/gotoxy::x#0 )
  conio_cursor_x = gotoxy::x#4
  conio_cursor_y = gotoxy::y#4
  gotoxy::$7 = (word)gotoxy::y#4
  gotoxy::$4 = gotoxy::$7 * $28
  gotoxy::line_offset#0 = gotoxy::$4
  gotoxy::$5 = CONIO_SCREEN_TEXT + gotoxy::line_offset#0
  conio_line_text = gotoxy::$5
  gotoxy::$6 = CONIO_SCREEN_COLORS + gotoxy::line_offset#0
  conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  gotoxy::y#6 = phi( gotoxy::@1/gotoxy::y#5 )
  gotoxy::x#0 = 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  cputc::$0 = cputc::c#3 == '
'
  if(cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  cputc::c#4 = phi( cputc/cputc::c#3 )
  conio_line_text[conio_cursor_x] = cputc::c#4
  conio_line_color[conio_cursor_x] = conio_textcolor
  conio_cursor_x = ++ conio_cursor_x
  cputc::$1 = conio_cursor_x == $28
  cputc::$2 = ! cputc::$1
  if(cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  conio_line_text = conio_line_text + $28
  conio_line_color = conio_line_color + $28
  conio_cursor_x = 0
  conio_cursor_y = ++ conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  cscroll::$0 = conio_cursor_y == $19
  cscroll::$1 = ! cscroll::$0
  if(cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  cscroll::$7 = 0 != conio_scroll_enable
  if(cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
  memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
  memcpy::num#0 = $19*$28-$28
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
  memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
  memcpy::num#1 = $19*$28-$28
  call memcpy 
  memcpy::return#3 = memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
  memset::c#0 = ' '
  memset::num#0 = $28
  call memset 
  memset::return#2 = memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
  memset::c#1 = conio_textcolor
  memset::num#1 = $28
  call memset 
  memset::return#3 = memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  conio_line_text = conio_line_text - $28
  conio_line_color = conio_line_color - $28
  conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  gotoxy::x#1 = 0
  gotoxy::y#1 = 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from printf_number_buffer::@5
  cputs::s#3 = phi( printf_number_buffer::@5/cputs::s#1 )
  cputs::c#0 = 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  cputs::s#2 = phi( cputs/cputs::s#3, cputs::@3/cputs::s#4 )
  cputs::c#1 = *cputs::s#2
  cputs::$0 = cputs::c#1
  cputs::s#0 = ++ cputs::s#2
  cputs::$2 = 0 != cputs::$0
  if(cputs::$2) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  cputs::s#5 = phi( cputs::@1/cputs::s#0 )
  cputs::c#2 = phi( cputs::@1/cputs::c#1 )
  cputc::c#0 = cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  cputs::s#4 = phi( cputs::@2/cputs::s#5 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  conio_c64_init::$0 = conio_c64_init::line#0 >= $19
  conio_c64_init::$1 = ! conio_c64_init::$0
  if(conio_c64_init::$1) goto conio_c64_init::@1
  to:conio_c64_init::@2
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  conio_c64_init::line#2 = phi( conio_c64_init/conio_c64_init::line#0, conio_c64_init::@2/conio_c64_init::line#1 )
  gotoxy::x#2 = 0
  gotoxy::y#2 = conio_c64_init::line#2
  call gotoxy 
  to:conio_c64_init::@3
conio_c64_init::@3: scope:[conio_c64_init]  from conio_c64_init::@1
  to:conio_c64_init::@return
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  conio_c64_init::line#1 = $19-1
  to:conio_c64_init::@1
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@3
  return 
  to:@return

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  printf_padding::pad#5 = phi( printf_number_buffer::@10/printf_padding::pad#1, printf_number_buffer::@12/printf_padding::pad#2, printf_number_buffer::@8/printf_padding::pad#0 )
  printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  printf_padding::i#0 = 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  printf_padding::pad#4 = phi( printf_padding/printf_padding::pad#5, printf_padding::@3/printf_padding::pad#6 )
  printf_padding::length#3 = phi( printf_padding/printf_padding::length#4, printf_padding::@3/printf_padding::length#5 )
  printf_padding::i#2 = phi( printf_padding/printf_padding::i#0, printf_padding::@3/printf_padding::i#1 )
  printf_padding::$0 = printf_padding::i#2 < printf_padding::length#3
  if(printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  printf_padding::length#6 = phi( printf_padding::@1/printf_padding::length#3 )
  printf_padding::i#4 = phi( printf_padding::@1/printf_padding::i#2 )
  printf_padding::pad#3 = phi( printf_padding::@1/printf_padding::pad#4 )
  cputc::c#1 = printf_padding::pad#3
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  printf_padding::pad#6 = phi( printf_padding::@2/printf_padding::pad#3 )
  printf_padding::length#5 = phi( printf_padding::@2/printf_padding::length#6 )
  printf_padding::i#3 = phi( printf_padding::@2/printf_padding::i#4 )
  printf_padding::i#1 = ++ printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@1
  printf_uchar::format_upper_case#5 = phi( main::@1/printf_uchar::format_upper_case#0 )
  printf_uchar::format_zero_padding#5 = phi( main::@1/printf_uchar::format_zero_padding#0 )
  printf_uchar::format_justify_left#5 = phi( main::@1/printf_uchar::format_justify_left#0 )
  printf_uchar::format_min_length#5 = phi( main::@1/printf_uchar::format_min_length#0 )
  printf_uchar::format_radix#5 = phi( main::@1/printf_uchar::format_radix#0 )
  printf_uchar::uvalue#4 = phi( main::@1/printf_uchar::uvalue#0 )
  printf_uchar::format_sign_always#1 = phi( main::@1/printf_uchar::format_sign_always#0 )
  printf_uchar::$5 = 0 != printf_uchar::format_sign_always#1
  if(printf_uchar::$5) goto printf_uchar::@1
  to:printf_uchar::@2
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  printf_uchar::format_upper_case#3 = phi( printf_uchar/printf_uchar::format_upper_case#5 )
  printf_uchar::format_zero_padding#3 = phi( printf_uchar/printf_uchar::format_zero_padding#5 )
  printf_uchar::format_sign_always#4 = phi( printf_uchar/printf_uchar::format_sign_always#1 )
  printf_uchar::format_justify_left#3 = phi( printf_uchar/printf_uchar::format_justify_left#5 )
  printf_uchar::format_min_length#3 = phi( printf_uchar/printf_uchar::format_min_length#5 )
  printf_uchar::format_radix#3 = phi( printf_uchar/printf_uchar::format_radix#5 )
  printf_uchar::uvalue#2 = phi( printf_uchar/printf_uchar::uvalue#4 )
  printf_uchar::$1 = '+'
  to:printf_uchar::@3
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar
  printf_uchar::format_upper_case#4 = phi( printf_uchar/printf_uchar::format_upper_case#5 )
  printf_uchar::format_zero_padding#4 = phi( printf_uchar/printf_uchar::format_zero_padding#5 )
  printf_uchar::format_sign_always#5 = phi( printf_uchar/printf_uchar::format_sign_always#1 )
  printf_uchar::format_justify_left#4 = phi( printf_uchar/printf_uchar::format_justify_left#5 )
  printf_uchar::format_min_length#4 = phi( printf_uchar/printf_uchar::format_min_length#5 )
  printf_uchar::format_radix#4 = phi( printf_uchar/printf_uchar::format_radix#5 )
  printf_uchar::uvalue#3 = phi( printf_uchar/printf_uchar::uvalue#4 )
  printf_uchar::$0 = 0
  to:printf_uchar::@3
printf_uchar::@3: scope:[printf_uchar]  from printf_uchar::@1 printf_uchar::@2
  printf_uchar::format_upper_case#2 = phi( printf_uchar::@1/printf_uchar::format_upper_case#3, printf_uchar::@2/printf_uchar::format_upper_case#4 )
  printf_uchar::format_zero_padding#2 = phi( printf_uchar::@1/printf_uchar::format_zero_padding#3, printf_uchar::@2/printf_uchar::format_zero_padding#4 )
  printf_uchar::format_sign_always#3 = phi( printf_uchar::@1/printf_uchar::format_sign_always#4, printf_uchar::@2/printf_uchar::format_sign_always#5 )
  printf_uchar::format_justify_left#2 = phi( printf_uchar::@1/printf_uchar::format_justify_left#3, printf_uchar::@2/printf_uchar::format_justify_left#4 )
  printf_uchar::format_min_length#2 = phi( printf_uchar::@1/printf_uchar::format_min_length#3, printf_uchar::@2/printf_uchar::format_min_length#4 )
  printf_uchar::format_radix#1 = phi( printf_uchar::@1/printf_uchar::format_radix#3, printf_uchar::@2/printf_uchar::format_radix#4 )
  printf_uchar::uvalue#1 = phi( printf_uchar::@1/printf_uchar::uvalue#2, printf_uchar::@2/printf_uchar::uvalue#3 )
  printf_uchar::$2 = phi( printf_uchar::@1/printf_uchar::$1, printf_uchar::@2/printf_uchar::$0 )
  *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uchar::$2
  uctoa::value#1 = printf_uchar::uvalue#1
  uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  uctoa::radix#0 = printf_uchar::format_radix#1
  call uctoa 
  to:printf_uchar::@4
printf_uchar::@4: scope:[printf_uchar]  from printf_uchar::@3
  printf_uchar::format_radix#2 = phi( printf_uchar::@3/printf_uchar::format_radix#1 )
  printf_uchar::format_upper_case#1 = phi( printf_uchar::@3/printf_uchar::format_upper_case#2 )
  printf_uchar::format_zero_padding#1 = phi( printf_uchar::@3/printf_uchar::format_zero_padding#2 )
  printf_uchar::format_sign_always#2 = phi( printf_uchar::@3/printf_uchar::format_sign_always#3 )
  printf_uchar::format_justify_left#1 = phi( printf_uchar::@3/printf_uchar::format_justify_left#2 )
  printf_uchar::format_min_length#1 = phi( printf_uchar::@3/printf_uchar::format_min_length#2 )
  printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  printf_number_buffer::format_min_length#0 = printf_uchar::format_min_length#1
  printf_number_buffer::format_justify_left#0 = printf_uchar::format_justify_left#1
  printf_number_buffer::format_sign_always#0 = printf_uchar::format_sign_always#2
  printf_number_buffer::format_zero_padding#0 = printf_uchar::format_zero_padding#1
  printf_number_buffer::format_upper_case#0 = printf_uchar::format_upper_case#1
  printf_number_buffer::format_radix#0 = printf_uchar::format_radix#2
  call printf_number_buffer 
  to:printf_uchar::@5
printf_uchar::@5: scope:[printf_uchar]  from printf_uchar::@4
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@5
  return 
  to:@return

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@4
  printf_number_buffer::format_upper_case#10 = phi( printf_uchar::@4/printf_number_buffer::format_upper_case#0 )
  printf_number_buffer::buffer_sign#7 = phi( printf_uchar::@4/printf_number_buffer::buffer_sign#0 )
  printf_number_buffer::buffer_digits#4 = phi( printf_uchar::@4/printf_number_buffer::buffer_digits#0 )
  printf_number_buffer::format_zero_padding#4 = phi( printf_uchar::@4/printf_number_buffer::format_zero_padding#0 )
  printf_number_buffer::format_justify_left#3 = phi( printf_uchar::@4/printf_number_buffer::format_justify_left#0 )
  printf_number_buffer::format_min_length#1 = phi( printf_uchar::@4/printf_number_buffer::format_min_length#0 )
  printf_number_buffer::padding#0 = 0
  printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
  printf_number_buffer::$0 = ! printf_number_buffer::$26
  if(printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  printf_number_buffer::buffer_digits#12 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#4, printf_number_buffer::@13/printf_number_buffer::buffer_digits#15, printf_number_buffer::@14/printf_number_buffer::buffer_digits#16 )
  printf_number_buffer::format_upper_case#7 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#10, printf_number_buffer::@13/printf_number_buffer::format_upper_case#11, printf_number_buffer::@14/printf_number_buffer::format_upper_case#12 )
  printf_number_buffer::buffer_sign#5 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#7, printf_number_buffer::@13/printf_number_buffer::buffer_sign#8, printf_number_buffer::@14/printf_number_buffer::buffer_sign#9 )
  printf_number_buffer::padding#3 = phi( printf_number_buffer/printf_number_buffer::padding#0, printf_number_buffer::@13/printf_number_buffer::padding#1, printf_number_buffer::@14/printf_number_buffer::padding#2 )
  printf_number_buffer::format_zero_padding#1 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#4, printf_number_buffer::@13/printf_number_buffer::format_zero_padding#5, printf_number_buffer::@14/printf_number_buffer::format_zero_padding#6 )
  printf_number_buffer::format_justify_left#1 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#3, printf_number_buffer::@13/printf_number_buffer::format_justify_left#4, printf_number_buffer::@14/printf_number_buffer::format_justify_left#5 )
  printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
  printf_number_buffer::$1 = ! printf_number_buffer::$27
  printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
  printf_number_buffer::$2 = ! printf_number_buffer::$28
  printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
  printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#3
  printf_number_buffer::$5 = ! printf_number_buffer::$4
  if(printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  printf_number_buffer::format_upper_case#16 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#10 )
  printf_number_buffer::format_zero_padding#16 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#4 )
  printf_number_buffer::format_justify_left#11 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#3 )
  printf_number_buffer::format_min_length#5 = phi( printf_number_buffer/printf_number_buffer::format_min_length#1 )
  printf_number_buffer::buffer_sign#4 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#7 )
  printf_number_buffer::buffer_digits#1 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#4 )
  strlen::str#1 = printf_number_buffer::buffer_digits#1
  call strlen 
  strlen::return#2 = strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  printf_number_buffer::buffer_digits#18 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_digits#1 )
  printf_number_buffer::format_upper_case#14 = phi( printf_number_buffer::@6/printf_number_buffer::format_upper_case#16 )
  printf_number_buffer::format_zero_padding#10 = phi( printf_number_buffer::@6/printf_number_buffer::format_zero_padding#16 )
  printf_number_buffer::format_justify_left#7 = phi( printf_number_buffer::@6/printf_number_buffer::format_justify_left#11 )
  printf_number_buffer::format_min_length#3 = phi( printf_number_buffer::@6/printf_number_buffer::format_min_length#5 )
  printf_number_buffer::buffer_sign#1 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_sign#4 )
  strlen::return#4 = phi( printf_number_buffer::@6/strlen::return#2 )
  printf_number_buffer::$19 = strlen::return#4
  printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
  printf_number_buffer::$20 = ! printf_number_buffer::$29
  if(printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  printf_number_buffer::buffer_digits#15 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#18, printf_number_buffer::@7/printf_number_buffer::buffer_digits#19 )
  printf_number_buffer::format_upper_case#11 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#14, printf_number_buffer::@7/printf_number_buffer::format_upper_case#15 )
  printf_number_buffer::buffer_sign#8 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#1, printf_number_buffer::@7/printf_number_buffer::buffer_sign#11 )
  printf_number_buffer::format_zero_padding#5 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#10, printf_number_buffer::@7/printf_number_buffer::format_zero_padding#11 )
  printf_number_buffer::format_justify_left#4 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#7, printf_number_buffer::@7/printf_number_buffer::format_justify_left#8 )
  printf_number_buffer::len#2 = phi( printf_number_buffer::@15/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  printf_number_buffer::format_min_length#2 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#3, printf_number_buffer::@7/printf_number_buffer::format_min_length#4 )
  printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#2
  printf_number_buffer::$21 = printf_number_buffer::$25 - printf_number_buffer::len#2
  printf_number_buffer::padding#1 = printf_number_buffer::$21
  printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
  printf_number_buffer::$23 = ! printf_number_buffer::$22
  if(printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  printf_number_buffer::buffer_digits#19 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#18 )
  printf_number_buffer::format_upper_case#15 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#14 )
  printf_number_buffer::buffer_sign#11 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#1 )
  printf_number_buffer::format_zero_padding#11 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#10 )
  printf_number_buffer::format_justify_left#8 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#7 )
  printf_number_buffer::format_min_length#4 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#3 )
  printf_number_buffer::len#3 = phi( printf_number_buffer::@15/printf_number_buffer::len#0 )
  printf_number_buffer::len#1 = ++ printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  printf_number_buffer::buffer_digits#16 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_digits#15 )
  printf_number_buffer::format_upper_case#12 = phi( printf_number_buffer::@13/printf_number_buffer::format_upper_case#11 )
  printf_number_buffer::buffer_sign#9 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_sign#8 )
  printf_number_buffer::format_zero_padding#6 = phi( printf_number_buffer::@13/printf_number_buffer::format_zero_padding#5 )
  printf_number_buffer::format_justify_left#5 = phi( printf_number_buffer::@13/printf_number_buffer::format_justify_left#4 )
  printf_number_buffer::padding#2 = 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  printf_number_buffer::format_justify_left#16 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#1, printf_number_buffer::@16/printf_number_buffer::format_justify_left#18 )
  printf_number_buffer::buffer_digits#10 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#12, printf_number_buffer::@16/printf_number_buffer::buffer_digits#13 )
  printf_number_buffer::format_upper_case#5 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#7, printf_number_buffer::@16/printf_number_buffer::format_upper_case#8 )
  printf_number_buffer::padding#10 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3, printf_number_buffer::@16/printf_number_buffer::padding#12 )
  printf_number_buffer::format_zero_padding#8 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#1, printf_number_buffer::@16/printf_number_buffer::format_zero_padding#12 )
  printf_number_buffer::buffer_sign#2 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#5, printf_number_buffer::@16/printf_number_buffer::buffer_sign#6 )
  printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
  printf_number_buffer::$7 = ! printf_number_buffer::$30
  if(printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  printf_number_buffer::format_justify_left#20 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#1 )
  printf_number_buffer::buffer_digits#17 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#12 )
  printf_number_buffer::format_upper_case#13 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#7 )
  printf_number_buffer::format_zero_padding#17 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#1 )
  printf_number_buffer::buffer_sign#10 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#5 )
  printf_number_buffer::padding#4 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3 )
  printf_padding::pad#0 = ' '
  printf_padding::length#0 = (byte)printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  printf_number_buffer::format_justify_left#18 = phi( printf_number_buffer::@8/printf_number_buffer::format_justify_left#20 )
  printf_number_buffer::buffer_digits#13 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_digits#17 )
  printf_number_buffer::format_upper_case#8 = phi( printf_number_buffer::@8/printf_number_buffer::format_upper_case#13 )
  printf_number_buffer::padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::padding#4 )
  printf_number_buffer::format_zero_padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::format_zero_padding#17 )
  printf_number_buffer::buffer_sign#6 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_sign#10 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  printf_number_buffer::format_justify_left#13 = phi( printf_number_buffer::@17/printf_number_buffer::format_justify_left#15, printf_number_buffer::@2/printf_number_buffer::format_justify_left#16 )
  printf_number_buffer::buffer_digits#8 = phi( printf_number_buffer::@17/printf_number_buffer::buffer_digits#9, printf_number_buffer::@2/printf_number_buffer::buffer_digits#10 )
  printf_number_buffer::format_upper_case#3 = phi( printf_number_buffer::@17/printf_number_buffer::format_upper_case#4, printf_number_buffer::@2/printf_number_buffer::format_upper_case#5 )
  printf_number_buffer::padding#5 = phi( printf_number_buffer::@17/printf_number_buffer::padding#9, printf_number_buffer::@2/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#2 = phi( printf_number_buffer::@17/printf_number_buffer::format_zero_padding#7, printf_number_buffer::@2/printf_number_buffer::format_zero_padding#8 )
  printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#2 && printf_number_buffer::padding#5
  printf_number_buffer::$10 = ! printf_number_buffer::$9
  if(printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  printf_number_buffer::format_justify_left#19 = phi( printf_number_buffer::@2/printf_number_buffer::format_justify_left#16 )
  printf_number_buffer::buffer_digits#14 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_digits#10 )
  printf_number_buffer::format_upper_case#9 = phi( printf_number_buffer::@2/printf_number_buffer::format_upper_case#5 )
  printf_number_buffer::padding#13 = phi( printf_number_buffer::@2/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#13 = phi( printf_number_buffer::@2/printf_number_buffer::format_zero_padding#8 )
  printf_number_buffer::buffer_sign#3 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_sign#2 )
  cputc::c#2 = printf_number_buffer::buffer_sign#3
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  printf_number_buffer::format_justify_left#15 = phi( printf_number_buffer::@9/printf_number_buffer::format_justify_left#19 )
  printf_number_buffer::buffer_digits#9 = phi( printf_number_buffer::@9/printf_number_buffer::buffer_digits#14 )
  printf_number_buffer::format_upper_case#4 = phi( printf_number_buffer::@9/printf_number_buffer::format_upper_case#9 )
  printf_number_buffer::padding#9 = phi( printf_number_buffer::@9/printf_number_buffer::padding#13 )
  printf_number_buffer::format_zero_padding#7 = phi( printf_number_buffer::@9/printf_number_buffer::format_zero_padding#13 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  printf_number_buffer::padding#15 = phi( printf_number_buffer::@18/printf_number_buffer::padding#16, printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_number_buffer::format_justify_left#10 = phi( printf_number_buffer::@18/printf_number_buffer::format_justify_left#12, printf_number_buffer::@3/printf_number_buffer::format_justify_left#13 )
  printf_number_buffer::format_zero_padding#15 = phi( printf_number_buffer::@18/printf_number_buffer::format_zero_padding#18, printf_number_buffer::@3/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_digits#6 = phi( printf_number_buffer::@18/printf_number_buffer::buffer_digits#7, printf_number_buffer::@3/printf_number_buffer::buffer_digits#8 )
  printf_number_buffer::format_upper_case#1 = phi( printf_number_buffer::@18/printf_number_buffer::format_upper_case#2, printf_number_buffer::@3/printf_number_buffer::format_upper_case#3 )
  printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
  printf_number_buffer::$12 = ! printf_number_buffer::$31
  if(printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  printf_number_buffer::format_justify_left#17 = phi( printf_number_buffer::@3/printf_number_buffer::format_justify_left#13 )
  printf_number_buffer::format_zero_padding#20 = phi( printf_number_buffer::@3/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_digits#11 = phi( printf_number_buffer::@3/printf_number_buffer::buffer_digits#8 )
  printf_number_buffer::format_upper_case#6 = phi( printf_number_buffer::@3/printf_number_buffer::format_upper_case#3 )
  printf_number_buffer::padding#6 = phi( printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_padding::pad#1 = '0'
  printf_padding::length#1 = (byte)printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  printf_number_buffer::padding#16 = phi( printf_number_buffer::@10/printf_number_buffer::padding#6 )
  printf_number_buffer::format_justify_left#12 = phi( printf_number_buffer::@10/printf_number_buffer::format_justify_left#17 )
  printf_number_buffer::format_zero_padding#18 = phi( printf_number_buffer::@10/printf_number_buffer::format_zero_padding#20 )
  printf_number_buffer::buffer_digits#7 = phi( printf_number_buffer::@10/printf_number_buffer::buffer_digits#11 )
  printf_number_buffer::format_upper_case#2 = phi( printf_number_buffer::@10/printf_number_buffer::format_upper_case#6 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  printf_number_buffer::padding#11 = phi( printf_number_buffer::@20/printf_number_buffer::padding#14, printf_number_buffer::@4/printf_number_buffer::padding#15 )
  printf_number_buffer::format_justify_left#6 = phi( printf_number_buffer::@20/printf_number_buffer::format_justify_left#9, printf_number_buffer::@4/printf_number_buffer::format_justify_left#10 )
  printf_number_buffer::format_zero_padding#9 = phi( printf_number_buffer::@20/printf_number_buffer::format_zero_padding#14, printf_number_buffer::@4/printf_number_buffer::format_zero_padding#15 )
  printf_number_buffer::buffer_digits#2 = phi( printf_number_buffer::@20/printf_number_buffer::buffer_digits#5, printf_number_buffer::@4/printf_number_buffer::buffer_digits#6 )
  cputs::s#1 = printf_number_buffer::buffer_digits#2
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  printf_number_buffer::padding#7 = phi( printf_number_buffer::@5/printf_number_buffer::padding#11 )
  printf_number_buffer::format_justify_left#2 = phi( printf_number_buffer::@5/printf_number_buffer::format_justify_left#6 )
  printf_number_buffer::format_zero_padding#3 = phi( printf_number_buffer::@5/printf_number_buffer::format_zero_padding#9 )
  printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
  printf_number_buffer::$14 = ! printf_number_buffer::$32
  printf_number_buffer::$15 = printf_number_buffer::format_justify_left#2 && printf_number_buffer::$14
  printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#7
  printf_number_buffer::$17 = ! printf_number_buffer::$16
  if(printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  printf_number_buffer::padding#17 = phi( printf_number_buffer::@4/printf_number_buffer::padding#15 )
  printf_number_buffer::format_justify_left#14 = phi( printf_number_buffer::@4/printf_number_buffer::format_justify_left#10 )
  printf_number_buffer::format_zero_padding#19 = phi( printf_number_buffer::@4/printf_number_buffer::format_zero_padding#15 )
  printf_number_buffer::buffer_digits#3 = phi( printf_number_buffer::@4/printf_number_buffer::buffer_digits#6 )
  strupr::str#0 = printf_number_buffer::buffer_digits#3
  call strupr 
  strupr::return#2 = strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  printf_number_buffer::padding#14 = phi( printf_number_buffer::@11/printf_number_buffer::padding#17 )
  printf_number_buffer::format_justify_left#9 = phi( printf_number_buffer::@11/printf_number_buffer::format_justify_left#14 )
  printf_number_buffer::format_zero_padding#14 = phi( printf_number_buffer::@11/printf_number_buffer::format_zero_padding#19 )
  printf_number_buffer::buffer_digits#5 = phi( printf_number_buffer::@11/printf_number_buffer::buffer_digits#3 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  printf_number_buffer::padding#8 = phi( printf_number_buffer::@19/printf_number_buffer::padding#7 )
  printf_padding::pad#2 = ' '
  printf_padding::length#2 = (byte)printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  printf_uchar::uvalue#0 = main::c
  printf_uchar::format_min_length#0 = 0
  printf_uchar::format_justify_left#0 = 0
  printf_uchar::format_sign_always#0 = 0
  printf_uchar::format_zero_padding#0 = 0
  printf_uchar::format_upper_case#0 = 0
  printf_uchar::format_radix#0 = DECIMAL
  call printf_uchar 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  conio_scroll_enable = 1
  call conio_c64_init 
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1
  to:__start::@1
__start::@1: scope:[__start]  from __start::@2
  call main 
  to:__start::@3
__start::@3: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@3
  return 
  to:@return

SYMBOL TABLE SSA
const byte BINARY = 2
const nomodify byte* COLORRAM = (byte*)$d800
const nomodify byte* CONIO_SCREEN_COLORS = COLORRAM
const nomodify byte* CONIO_SCREEN_TEXT = DEFAULT_SCREEN
const nomodify byte CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
const byte DECIMAL = $a
const nomodify byte* DEFAULT_SCREEN = (byte*)$400
const byte* DIGITS[]  = "0123456789abcdef"z
const byte HEXADECIMAL = $10
const nomodify byte LIGHT_BLUE = $e
const byte OCTAL = 8
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = 0
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* RADIX_BINARY_VALUES_CHAR[]  = { $80, $40, $20, $10, 8, 4, 2 }
const byte* RADIX_DECIMAL_VALUES_CHAR[]  = { $64, $a }
const byte* RADIX_HEXADECIMAL_VALUES_CHAR[]  = { $10 }
const byte* RADIX_OCTAL_VALUES_CHAR[]  = { $40, 8 }
void __start()
void clrscr()
bool~ clrscr::$0
bool~ clrscr::$1
byte clrscr::c
byte clrscr::c#0
byte clrscr::c#1
byte clrscr::c#2
byte clrscr::c#3
byte clrscr::l
byte clrscr::l#0
byte clrscr::l#1
byte clrscr::l#2
byte clrscr::l#3
byte clrscr::l#4
byte clrscr::l#5
byte clrscr::l#6
byte* clrscr::line_cols
byte* clrscr::line_cols#0
byte* clrscr::line_cols#1
byte* clrscr::line_cols#2
byte* clrscr::line_cols#3
byte* clrscr::line_cols#4
byte* clrscr::line_cols#5
byte* clrscr::line_cols#6
byte* clrscr::line_text
byte* clrscr::line_text#0
byte* clrscr::line_text#1
byte* clrscr::line_text#2
byte* clrscr::line_text#3
byte* clrscr::line_text#4
byte* clrscr::line_text#5
byte* clrscr::line_text#6
void conio_c64_init()
bool~ conio_c64_init::$0
bool~ conio_c64_init::$1
const nomodify byte* conio_c64_init::BASIC_CURSOR_LINE = (byte*)$d6
byte conio_c64_init::line
byte conio_c64_init::line#0
byte conio_c64_init::line#1
byte conio_c64_init::line#2
byte conio_cursor_x loadstore
byte conio_cursor_y loadstore
byte* conio_line_color loadstore
byte* conio_line_text loadstore
byte conio_scroll_enable loadstore
byte conio_textcolor loadstore
void cputc(byte cputc::c)
bool~ cputc::$0
bool~ cputc::$1
bool~ cputc::$2
byte cputc::c
byte cputc::c#0
byte cputc::c#1
byte cputc::c#2
byte cputc::c#3
byte cputc::c#4
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte~ cputs::$0
bool~ cputs::$2
byte cputs::c
byte cputs::c#0
byte cputs::c#1
byte cputs::c#2
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0
to_nomodify byte* cputs::s#1
to_nomodify byte* cputs::s#2
to_nomodify byte* cputs::s#3
to_nomodify byte* cputs::s#4
to_nomodify byte* cputs::s#5
void cscroll()
bool~ cscroll::$0
bool~ cscroll::$1
bool~ cscroll::$7
void gotoxy(byte gotoxy::x , byte gotoxy::y)
bool~ gotoxy::$0
bool~ gotoxy::$1
bool~ gotoxy::$2
bool~ gotoxy::$3
number~ gotoxy::$4
byte*~ gotoxy::$5
byte*~ gotoxy::$6
word~ gotoxy::$7
word gotoxy::line_offset
word gotoxy::line_offset#0
byte gotoxy::x
byte gotoxy::x#0
byte gotoxy::x#1
byte gotoxy::x#2
byte gotoxy::x#3
byte gotoxy::x#4
byte gotoxy::x#5
byte gotoxy::x#6
byte gotoxy::y
byte gotoxy::y#0
byte gotoxy::y#1
byte gotoxy::y#2
byte gotoxy::y#3
byte gotoxy::y#4
byte gotoxy::y#5
byte gotoxy::y#6
void main()
const byte main::c = 7
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
void* memcpy::destination#5
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
word memcpy::num#2
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::return#4
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
struct printf_buffer_number printf_buffer loadstore = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
bool~ printf_number_buffer::$0
bool~ printf_number_buffer::$1
bool~ printf_number_buffer::$10
bool~ printf_number_buffer::$12
bool~ printf_number_buffer::$14
bool~ printf_number_buffer::$15
bool~ printf_number_buffer::$16
bool~ printf_number_buffer::$17
word~ printf_number_buffer::$19
bool~ printf_number_buffer::$2
bool~ printf_number_buffer::$20
signed byte~ printf_number_buffer::$21
bool~ printf_number_buffer::$22
bool~ printf_number_buffer::$23
signed byte~ printf_number_buffer::$25
bool~ printf_number_buffer::$26
bool~ printf_number_buffer::$27
bool~ printf_number_buffer::$28
bool~ printf_number_buffer::$29
bool~ printf_number_buffer::$3
bool~ printf_number_buffer::$30
bool~ printf_number_buffer::$31
bool~ printf_number_buffer::$32
bool~ printf_number_buffer::$4
bool~ printf_number_buffer::$5
bool~ printf_number_buffer::$7
bool~ printf_number_buffer::$9
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte* printf_number_buffer::buffer_digits#0
byte* printf_number_buffer::buffer_digits#1
byte* printf_number_buffer::buffer_digits#10
byte* printf_number_buffer::buffer_digits#11
byte* printf_number_buffer::buffer_digits#12
byte* printf_number_buffer::buffer_digits#13
byte* printf_number_buffer::buffer_digits#14
byte* printf_number_buffer::buffer_digits#15
byte* printf_number_buffer::buffer_digits#16
byte* printf_number_buffer::buffer_digits#17
byte* printf_number_buffer::buffer_digits#18
byte* printf_number_buffer::buffer_digits#19
byte* printf_number_buffer::buffer_digits#2
byte* printf_number_buffer::buffer_digits#3
byte* printf_number_buffer::buffer_digits#4
byte* printf_number_buffer::buffer_digits#5
byte* printf_number_buffer::buffer_digits#6
byte* printf_number_buffer::buffer_digits#7
byte* printf_number_buffer::buffer_digits#8
byte* printf_number_buffer::buffer_digits#9
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0
byte printf_number_buffer::buffer_sign#1
byte printf_number_buffer::buffer_sign#10
byte printf_number_buffer::buffer_sign#11
byte printf_number_buffer::buffer_sign#2
byte printf_number_buffer::buffer_sign#3
byte printf_number_buffer::buffer_sign#4
byte printf_number_buffer::buffer_sign#5
byte printf_number_buffer::buffer_sign#6
byte printf_number_buffer::buffer_sign#7
byte printf_number_buffer::buffer_sign#8
byte printf_number_buffer::buffer_sign#9
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#0
byte printf_number_buffer::format_justify_left#1
byte printf_number_buffer::format_justify_left#10
byte printf_number_buffer::format_justify_left#11
byte printf_number_buffer::format_justify_left#12
byte printf_number_buffer::format_justify_left#13
byte printf_number_buffer::format_justify_left#14
byte printf_number_buffer::format_justify_left#15
byte printf_number_buffer::format_justify_left#16
byte printf_number_buffer::format_justify_left#17
byte printf_number_buffer::format_justify_left#18
byte printf_number_buffer::format_justify_left#19
byte printf_number_buffer::format_justify_left#2
byte printf_number_buffer::format_justify_left#20
byte printf_number_buffer::format_justify_left#3
byte printf_number_buffer::format_justify_left#4
byte printf_number_buffer::format_justify_left#5
byte printf_number_buffer::format_justify_left#6
byte printf_number_buffer::format_justify_left#7
byte printf_number_buffer::format_justify_left#8
byte printf_number_buffer::format_justify_left#9
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#0
byte printf_number_buffer::format_min_length#1
byte printf_number_buffer::format_min_length#2
byte printf_number_buffer::format_min_length#3
byte printf_number_buffer::format_min_length#4
byte printf_number_buffer::format_min_length#5
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_radix#0
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_sign_always#0
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#0
byte printf_number_buffer::format_upper_case#1
byte printf_number_buffer::format_upper_case#10
byte printf_number_buffer::format_upper_case#11
byte printf_number_buffer::format_upper_case#12
byte printf_number_buffer::format_upper_case#13
byte printf_number_buffer::format_upper_case#14
byte printf_number_buffer::format_upper_case#15
byte printf_number_buffer::format_upper_case#16
byte printf_number_buffer::format_upper_case#2
byte printf_number_buffer::format_upper_case#3
byte printf_number_buffer::format_upper_case#4
byte printf_number_buffer::format_upper_case#5
byte printf_number_buffer::format_upper_case#6
byte printf_number_buffer::format_upper_case#7
byte printf_number_buffer::format_upper_case#8
byte printf_number_buffer::format_upper_case#9
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#0
byte printf_number_buffer::format_zero_padding#1
byte printf_number_buffer::format_zero_padding#10
byte printf_number_buffer::format_zero_padding#11
byte printf_number_buffer::format_zero_padding#12
byte printf_number_buffer::format_zero_padding#13
byte printf_number_buffer::format_zero_padding#14
byte printf_number_buffer::format_zero_padding#15
byte printf_number_buffer::format_zero_padding#16
byte printf_number_buffer::format_zero_padding#17
byte printf_number_buffer::format_zero_padding#18
byte printf_number_buffer::format_zero_padding#19
byte printf_number_buffer::format_zero_padding#2
byte printf_number_buffer::format_zero_padding#20
byte printf_number_buffer::format_zero_padding#3
byte printf_number_buffer::format_zero_padding#4
byte printf_number_buffer::format_zero_padding#5
byte printf_number_buffer::format_zero_padding#6
byte printf_number_buffer::format_zero_padding#7
byte printf_number_buffer::format_zero_padding#8
byte printf_number_buffer::format_zero_padding#9
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0
signed byte printf_number_buffer::len#1
signed byte printf_number_buffer::len#2
signed byte printf_number_buffer::len#3
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#0
signed byte printf_number_buffer::padding#1
signed byte printf_number_buffer::padding#10
signed byte printf_number_buffer::padding#11
signed byte printf_number_buffer::padding#12
signed byte printf_number_buffer::padding#13
signed byte printf_number_buffer::padding#14
signed byte printf_number_buffer::padding#15
signed byte printf_number_buffer::padding#16
signed byte printf_number_buffer::padding#17
signed byte printf_number_buffer::padding#2
signed byte printf_number_buffer::padding#3
signed byte printf_number_buffer::padding#4
signed byte printf_number_buffer::padding#5
signed byte printf_number_buffer::padding#6
signed byte printf_number_buffer::padding#7
signed byte printf_number_buffer::padding#8
signed byte printf_number_buffer::padding#9
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
bool~ printf_padding::$0
byte printf_padding::i
byte printf_padding::i#0
byte printf_padding::i#1
byte printf_padding::i#2
byte printf_padding::i#3
byte printf_padding::i#4
byte printf_padding::length
byte printf_padding::length#0
byte printf_padding::length#1
byte printf_padding::length#2
byte printf_padding::length#3
byte printf_padding::length#4
byte printf_padding::length#5
byte printf_padding::length#6
byte printf_padding::pad
byte printf_padding::pad#0
byte printf_padding::pad#1
byte printf_padding::pad#2
byte printf_padding::pad#3
byte printf_padding::pad#4
byte printf_padding::pad#5
byte printf_padding::pad#6
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
number~ printf_uchar::$0
byte~ printf_uchar::$1
number~ printf_uchar::$2
bool~ printf_uchar::$5
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_justify_left#0
byte printf_uchar::format_justify_left#1
byte printf_uchar::format_justify_left#2
byte printf_uchar::format_justify_left#3
byte printf_uchar::format_justify_left#4
byte printf_uchar::format_justify_left#5
byte printf_uchar::format_min_length
byte printf_uchar::format_min_length#0
byte printf_uchar::format_min_length#1
byte printf_uchar::format_min_length#2
byte printf_uchar::format_min_length#3
byte printf_uchar::format_min_length#4
byte printf_uchar::format_min_length#5
byte printf_uchar::format_radix
byte printf_uchar::format_radix#0
byte printf_uchar::format_radix#1
byte printf_uchar::format_radix#2
byte printf_uchar::format_radix#3
byte printf_uchar::format_radix#4
byte printf_uchar::format_radix#5
byte printf_uchar::format_sign_always
byte printf_uchar::format_sign_always#0
byte printf_uchar::format_sign_always#1
byte printf_uchar::format_sign_always#2
byte printf_uchar::format_sign_always#3
byte printf_uchar::format_sign_always#4
byte printf_uchar::format_sign_always#5
byte printf_uchar::format_upper_case
byte printf_uchar::format_upper_case#0
byte printf_uchar::format_upper_case#1
byte printf_uchar::format_upper_case#2
byte printf_uchar::format_upper_case#3
byte printf_uchar::format_upper_case#4
byte printf_uchar::format_upper_case#5
byte printf_uchar::format_zero_padding
byte printf_uchar::format_zero_padding#0
byte printf_uchar::format_zero_padding#1
byte printf_uchar::format_zero_padding#2
byte printf_uchar::format_zero_padding#3
byte printf_uchar::format_zero_padding#4
byte printf_uchar::format_zero_padding#5
byte printf_uchar::uvalue
byte printf_uchar::uvalue#0
byte printf_uchar::uvalue#1
byte printf_uchar::uvalue#2
byte printf_uchar::uvalue#3
byte printf_uchar::uvalue#4
word strlen(byte* strlen::str)
bool~ strlen::$0
word strlen::len
word strlen::len#0
word strlen::len#1
word strlen::len#2
word strlen::len#3
word strlen::len#4
word strlen::return
word strlen::return#0
word strlen::return#1
word strlen::return#2
word strlen::return#3
word strlen::return#4
byte* strlen::str
byte* strlen::str#0
byte* strlen::str#1
byte* strlen::str#2
byte* strlen::str#3
byte* strlen::str#4
byte* strupr(byte* strupr::str)
byte~ strupr::$0
bool~ strupr::$1
byte* strupr::return
byte* strupr::return#0
byte* strupr::return#1
byte* strupr::return#2
byte* strupr::return#3
byte* strupr::src
byte* strupr::src#0
byte* strupr::src#1
byte* strupr::src#2
byte* strupr::src#3
byte* strupr::src#4
byte* strupr::str
byte* strupr::str#0
byte* strupr::str#1
byte* strupr::str#2
byte* strupr::str#3
byte* strupr::str#4
byte* strupr::str#5
byte toupper(byte toupper::ch)
bool~ toupper::$0
bool~ toupper::$1
bool~ toupper::$2
byte~ toupper::$3
byte toupper::ch
byte toupper::ch#0
byte toupper::ch#1
byte toupper::ch#2
byte toupper::ch#3
byte toupper::return
byte toupper::return#0
byte toupper::return#1
byte toupper::return#2
byte toupper::return#3
byte toupper::return#4
byte toupper::return#5
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
bool~ uctoa::$0
bool~ uctoa::$1
byte~ uctoa::$10
bool~ uctoa::$2
bool~ uctoa::$3
number~ uctoa::$4
bool~ uctoa::$5
bool~ uctoa::$6
bool~ uctoa::$7
bool~ uctoa::$8
byte~ uctoa::$9
byte* uctoa::buffer
byte* uctoa::buffer#0
byte* uctoa::buffer#1
byte* uctoa::buffer#10
byte* uctoa::buffer#11
byte* uctoa::buffer#12
byte* uctoa::buffer#13
byte* uctoa::buffer#14
byte* uctoa::buffer#15
byte* uctoa::buffer#16
byte* uctoa::buffer#17
byte* uctoa::buffer#18
byte* uctoa::buffer#19
byte* uctoa::buffer#2
byte* uctoa::buffer#20
byte* uctoa::buffer#21
byte* uctoa::buffer#3
byte* uctoa::buffer#4
byte* uctoa::buffer#5
byte* uctoa::buffer#6
byte* uctoa::buffer#7
byte* uctoa::buffer#8
byte* uctoa::buffer#9
byte uctoa::digit
byte uctoa::digit#0
byte uctoa::digit#1
byte uctoa::digit#2
byte uctoa::digit#3
byte uctoa::digit#4
byte uctoa::digit#5
byte uctoa::digit#6
byte uctoa::digit_value
byte uctoa::digit_value#0
byte uctoa::digit_value#1
byte* uctoa::digit_values
byte* uctoa::digit_values#0
byte* uctoa::digit_values#1
byte* uctoa::digit_values#10
byte* uctoa::digit_values#2
byte* uctoa::digit_values#3
byte* uctoa::digit_values#4
byte* uctoa::digit_values#5
byte* uctoa::digit_values#6
byte* uctoa::digit_values#7
byte* uctoa::digit_values#8
byte* uctoa::digit_values#9
byte uctoa::max_digits
byte uctoa::max_digits#0
byte uctoa::max_digits#1
byte uctoa::max_digits#10
byte uctoa::max_digits#2
byte uctoa::max_digits#3
byte uctoa::max_digits#4
byte uctoa::max_digits#5
byte uctoa::max_digits#6
byte uctoa::max_digits#7
byte uctoa::max_digits#8
byte uctoa::max_digits#9
byte uctoa::radix
byte uctoa::radix#0
byte uctoa::radix#1
byte uctoa::radix#2
byte uctoa::radix#3
byte uctoa::radix#4
byte uctoa::started
byte uctoa::started#0
byte uctoa::started#1
byte uctoa::started#2
byte uctoa::started#3
byte uctoa::started#4
byte uctoa::value
byte uctoa::value#0
byte uctoa::value#1
byte uctoa::value#10
byte uctoa::value#11
byte uctoa::value#12
byte uctoa::value#13
byte uctoa::value#14
byte uctoa::value#15
byte uctoa::value#2
byte uctoa::value#3
byte uctoa::value#4
byte uctoa::value#5
byte uctoa::value#6
byte uctoa::value#7
byte uctoa::value#8
byte uctoa::value#9
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
bool~ uctoa_append::$0
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0
byte* uctoa_append::buffer#1
byte* uctoa_append::buffer#2
byte* uctoa_append::buffer#3
byte* uctoa_append::buffer#4
byte uctoa_append::digit
byte uctoa_append::digit#0
byte uctoa_append::digit#1
byte uctoa_append::digit#2
byte uctoa_append::digit#3
byte uctoa_append::digit#4
byte uctoa_append::return
byte uctoa_append::return#0
byte uctoa_append::return#1
byte uctoa_append::return#2
byte uctoa_append::return#3
byte uctoa_append::return#4
byte uctoa_append::sub
byte uctoa_append::sub#0
byte uctoa_append::sub#1
byte uctoa_append::sub#2
byte uctoa_append::sub#3
byte uctoa_append::value
byte uctoa_append::value#0
byte uctoa_append::value#1
byte uctoa_append::value#2
byte uctoa_append::value#3
byte uctoa_append::value#4
byte uctoa_append::value#5

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) 0 in strupr::$1 = 0 != *strupr::src#2
Adding number conversion cast (unumber) 0 in strlen::$0 = 0 != *strlen::str#2
Adding number conversion cast (unumber) 3 in uctoa::max_digits#1 = 3
Adding number conversion cast (unumber) 2 in uctoa::max_digits#2 = 2
Adding number conversion cast (unumber) 3 in uctoa::max_digits#3 = 3
Adding number conversion cast (unumber) 8 in uctoa::max_digits#4 = 8
Adding number conversion cast (unumber) 0 in *uctoa::buffer#2 = 0
Adding number conversion cast (unumber) 1 in uctoa::$4 = uctoa::max_digits#5 - 1
Adding number conversion cast (unumber) uctoa::$4 in uctoa::$4 = uctoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *uctoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in uctoa::started#1 = 1
Adding number conversion cast (unumber) $19 in clrscr::$0 = clrscr::l#2 < $19
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) 0 in conio_cursor_y = 0
Adding number conversion cast (unumber) $28 in clrscr::$1 = clrscr::c#2 < $28
Adding number conversion cast (unumber) $28 in clrscr::line_text#1 = clrscr::line_text#3 + $28
Adding number conversion cast (unumber) $28 in clrscr::line_cols#1 = clrscr::line_cols#3 + $28
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#3 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#3 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) $28 in gotoxy::$4 = gotoxy::$7 * $28
Adding number conversion cast (unumber) gotoxy::$4 in gotoxy::$4 = gotoxy::$7 * (unumber)$28
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) $28 in cputc::$1 = conio_cursor_x == $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text + $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color + $28
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) $19 in cscroll::$0 = conio_cursor_y == $19
Adding number conversion cast (unumber) 0 in cscroll::$7 = 0 != conio_scroll_enable
Adding number conversion cast (unumber) $28 in memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#0 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#1 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#0 = $28
Adding number conversion cast (unumber) $28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#1 = $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text - $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color - $28
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#1 = 0
Adding number conversion cast (unumber) 0 in cputs::$2 = 0 != cputs::$0
Adding number conversion cast (unumber) $19 in conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Adding number conversion cast (unumber) 0 in gotoxy::x#2 = 0
Adding number conversion cast (unumber) $19-1 in conio_c64_init::line#1 = $19-1
Adding number conversion cast (unumber) 0 in printf_uchar::$5 = 0 != printf_uchar::format_sign_always#1
Adding number conversion cast (unumber) printf_uchar::$2 in printf_uchar::format_upper_case#2 = phi( printf_uchar::@1/printf_uchar::format_upper_case#3, printf_uchar::@2/printf_uchar::format_upper_case#4 )
  printf_uchar::format_zero_padding#2 = phi( printf_uchar::@1/printf_uchar::format_zero_padding#3, printf_uchar::@2/printf_uchar::format_zero_padding#4 )
  printf_uchar::format_sign_always#3 = phi( printf_uchar::@1/printf_uchar::format_sign_always#4, printf_uchar::@2/printf_uchar::format_sign_always#5 )
  printf_uchar::format_justify_left#2 = phi( printf_uchar::@1/printf_uchar::format_justify_left#3, printf_uchar::@2/printf_uchar::format_justify_left#4 )
  printf_uchar::format_min_length#2 = phi( printf_uchar::@1/printf_uchar::format_min_length#3, printf_uchar::@2/printf_uchar::format_min_length#4 )
  printf_uchar::format_radix#1 = phi( printf_uchar::@1/printf_uchar::format_radix#3, printf_uchar::@2/printf_uchar::format_radix#4 )
  printf_uchar::uvalue#1 = phi( printf_uchar::@1/printf_uchar::uvalue#2, printf_uchar::@2/printf_uchar::uvalue#3 )
  printf_uchar::$2 = phi( printf_uchar::@1/printf_uchar::$1, printf_uchar::@2/printf_uchar::$0 )
Adding number conversion cast (unumber) printf_uchar::$0 in printf_uchar::format_upper_case#2 = phi( printf_uchar::@1/printf_uchar::format_upper_case#3, printf_uchar::@2/printf_uchar::format_upper_case#4 )
  printf_uchar::format_zero_padding#2 = phi( printf_uchar::@1/printf_uchar::format_zero_padding#3, printf_uchar::@2/printf_uchar::format_zero_padding#4 )
  printf_uchar::format_sign_always#3 = phi( printf_uchar::@1/printf_uchar::format_sign_always#4, printf_uchar::@2/printf_uchar::format_sign_always#5 )
  printf_uchar::format_justify_left#2 = phi( printf_uchar::@1/printf_uchar::format_justify_left#3, printf_uchar::@2/printf_uchar::format_justify_left#4 )
  printf_uchar::format_min_length#2 = phi( printf_uchar::@1/printf_uchar::format_min_length#3, printf_uchar::@2/printf_uchar::format_min_length#4 )
  printf_uchar::format_radix#1 = phi( printf_uchar::@1/printf_uchar::format_radix#3, printf_uchar::@2/printf_uchar::format_radix#4 )
  printf_uchar::uvalue#1 = phi( printf_uchar::@1/printf_uchar::uvalue#2, printf_uchar::@2/printf_uchar::uvalue#3 )
  printf_uchar::$2 = phi( printf_uchar::@1/printf_uchar::$1, printf_uchar::@2/printf_uchar::$0 )
Adding number conversion cast (unumber) 0 in printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
Adding number conversion cast (snumber) 0 in printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Adding number conversion cast (snumber) 0 in printf_number_buffer::padding#2 = 0
Adding number conversion cast (unumber) 0 in printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in printf_uchar::$0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (byte*)memcpy::source#2
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#2
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast uctoa::max_digits#1 = (unumber)3
Inlining cast uctoa::max_digits#2 = (unumber)2
Inlining cast uctoa::max_digits#3 = (unumber)3
Inlining cast uctoa::max_digits#4 = (unumber)8
Inlining cast *uctoa::buffer#2 = (unumber)0
Inlining cast *uctoa::buffer#3 = (unumber)0
Inlining cast uctoa::started#1 = (unumber)1
Inlining cast conio_cursor_x = (unumber)0
Inlining cast conio_cursor_y = (unumber)0
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast conio_cursor_x = (unumber)0
Inlining cast memcpy::num#0 = (unumber)$19*$28-$28
Inlining cast memcpy::num#1 = (unumber)$19*$28-$28
Inlining cast memset::num#0 = (unumber)$28
Inlining cast memset::num#1 = (unumber)$28
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast gotoxy::y#1 = (unumber)0
Inlining cast gotoxy::x#2 = (unumber)0
Inlining cast conio_c64_init::line#1 = (unumber)$19-1
Inlining cast printf_uchar::$0 = (unumber)0
Inlining cast printf_number_buffer::padding#2 = (snumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 214
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in uctoa::$4 = uctoa::max_digits#5 - 1
Inferred type updated to word in gotoxy::$4 = gotoxy::$7 * $28
Inferred type updated to byte in printf_uchar::$0 = 0
Inferred type updated to byte for printf_uchar::$2
Inversing boolean not [33] memset::$1 = memset::num#2 <= 0 from [32] memset::$0 = memset::num#2 > 0
Inversing boolean not [188] gotoxy::$1 = gotoxy::y#3 <= $19 from [187] gotoxy::$0 = gotoxy::y#3 > $19
Inversing boolean not [192] gotoxy::$3 = gotoxy::x#3 < $28 from [191] gotoxy::$2 = gotoxy::x#3 >= $28
Inversing boolean not [218] cputc::$2 = conio_cursor_x != $28 from [217] cputc::$1 = conio_cursor_x == $28
Inversing boolean not [229] cscroll::$1 = conio_cursor_y != $19 from [228] cscroll::$0 = conio_cursor_y == $19
Inversing boolean not [275] conio_c64_init::$1 = conio_c64_init::line#0 < $19 from [274] conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Inversing boolean not [321] printf_number_buffer::$0 = 0 == printf_number_buffer::format_min_length#1 from [320] printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
Inversing boolean not [325] printf_number_buffer::$1 = 0 == printf_number_buffer::format_justify_left#1 from [324] printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
Inversing boolean not [327] printf_number_buffer::$2 = 0 == printf_number_buffer::format_zero_padding#1 from [326] printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
Inversing boolean not [340] printf_number_buffer::$20 = 0 == printf_number_buffer::buffer_sign#1 from [339] printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
Inversing boolean not [347] printf_number_buffer::$23 = printf_number_buffer::padding#1 >= 0 from [346] printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Inversing boolean not [355] printf_number_buffer::$7 = 0 == printf_number_buffer::buffer_sign#2 from [354] printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
Inversing boolean not [372] printf_number_buffer::$12 = 0 == printf_number_buffer::format_upper_case#1 from [371] printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
Inversing boolean not [384] printf_number_buffer::$14 = 0 == printf_number_buffer::format_zero_padding#3 from [383] printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#3 = cputc::c#4 
Alias cputs::c#1 = cputs::$0 cputs::c#2 
Alias cputs::s#0 = cputs::s#5 cputs::s#4 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_uchar::uvalue#2 = printf_uchar::uvalue#4 printf_uchar::uvalue#3 
Alias printf_uchar::format_radix#3 = printf_uchar::format_radix#5 printf_uchar::format_radix#4 
Alias printf_uchar::format_min_length#3 = printf_uchar::format_min_length#5 printf_uchar::format_min_length#4 
Alias printf_uchar::format_justify_left#3 = printf_uchar::format_justify_left#5 printf_uchar::format_justify_left#4 
Alias printf_uchar::format_sign_always#1 = printf_uchar::format_sign_always#4 printf_uchar::format_sign_always#5 
Alias printf_uchar::format_zero_padding#3 = printf_uchar::format_zero_padding#5 printf_uchar::format_zero_padding#4 
Alias printf_uchar::format_upper_case#3 = printf_uchar::format_upper_case#5 printf_uchar::format_upper_case#4 
Alias printf_uchar::format_min_length#1 = printf_uchar::format_min_length#2 
Alias printf_uchar::format_justify_left#1 = printf_uchar::format_justify_left#2 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#3 
Alias printf_uchar::format_zero_padding#1 = printf_uchar::format_zero_padding#2 
Alias printf_uchar::format_upper_case#1 = printf_uchar::format_upper_case#2 
Alias printf_uchar::format_radix#1 = printf_uchar::format_radix#2 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#4 printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#3 printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#3 printf_number_buffer::format_justify_left#7 printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#4 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#15 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#5 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#8 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#15 = printf_number_buffer::buffer_digits#16 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#6 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#8 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#17 printf_number_buffer::buffer_digits#13 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::buffer_sign#2 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#8 printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#9 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_justify_left#15 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#16 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#2 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#18 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#13 
Alias printf_number_buffer::format_zero_padding#3 = printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::format_justify_left#2 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#3 = printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#5 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias printf_uchar::uvalue#1 = printf_uchar::uvalue#2 
Alias printf_uchar::format_radix#1 = printf_uchar::format_radix#3 
Alias printf_uchar::format_min_length#1 = printf_uchar::format_min_length#3 
Alias printf_uchar::format_justify_left#1 = printf_uchar::format_justify_left#3 
Alias printf_uchar::format_sign_always#1 = printf_uchar::format_sign_always#2 
Alias printf_uchar::format_zero_padding#1 = printf_uchar::format_zero_padding#3 
Alias printf_uchar::format_upper_case#1 = printf_uchar::format_upper_case#3 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#2 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#13 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#2 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#12 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#10 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values toupper::ch#1 toupper::ch#0
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#3 memcpy::destination#2
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values strupr::src#0 strupr::str#0
Identical Phi Values strupr::str#2 strupr::src#0
Identical Phi Values strlen::str#4 strlen::str#1
Identical Phi Values uctoa::radix#1 uctoa::radix#0
Identical Phi Values uctoa::value#10 uctoa::value#1
Identical Phi Values uctoa::buffer#10 uctoa::buffer#5
Identical Phi Values uctoa::max_digits#10 uctoa::max_digits#7
Identical Phi Values uctoa::digit_values#10 uctoa::digit_values#8
Identical Phi Values uctoa_append::value#5 uctoa_append::value#0
Identical Phi Values uctoa_append::sub#3 uctoa_append::sub#0
Identical Phi Values uctoa_append::buffer#3 uctoa_append::buffer#0
Identical Phi Values uctoa_append::sub#1 uctoa_append::sub#3
Identical Phi Values uctoa_append::buffer#1 uctoa_append::buffer#3
Identical Phi Values clrscr::line_text#2 clrscr::line_text#5
Identical Phi Values clrscr::line_cols#2 clrscr::line_cols#5
Identical Phi Values clrscr::l#3 clrscr::l#2
Identical Phi Values cputs::s#3 cputs::s#1
Identical Phi Values printf_padding::length#3 printf_padding::length#4
Identical Phi Values printf_padding::pad#3 printf_padding::pad#5
Identical Phi Values printf_uchar::format_sign_always#1 printf_uchar::format_sign_always#0
Identical Phi Values printf_uchar::uvalue#1 printf_uchar::uvalue#0
Identical Phi Values printf_uchar::format_radix#1 printf_uchar::format_radix#0
Identical Phi Values printf_uchar::format_min_length#1 printf_uchar::format_min_length#0
Identical Phi Values printf_uchar::format_justify_left#1 printf_uchar::format_justify_left#0
Identical Phi Values printf_uchar::format_zero_padding#1 printf_uchar::format_zero_padding#0
Identical Phi Values printf_uchar::format_upper_case#1 printf_uchar::format_upper_case#0
Identical Phi Values printf_number_buffer::format_min_length#1 printf_number_buffer::format_min_length#0
Identical Phi Values printf_number_buffer::format_justify_left#1 printf_number_buffer::format_justify_left#0
Identical Phi Values printf_number_buffer::format_zero_padding#1 printf_number_buffer::format_zero_padding#0
Identical Phi Values printf_number_buffer::buffer_digits#1 printf_number_buffer::buffer_digits#0
Identical Phi Values printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0
Identical Phi Values printf_number_buffer::format_upper_case#1 printf_number_buffer::format_upper_case#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [15] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition memset::$1 [22] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [29] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition strupr::$1 [36] if(0!=*strupr::src#2) goto strupr::@2
Simple Condition strlen::$0 [48] if(0!=*strlen::str#2) goto strlen::@2
Simple Condition uctoa::$0 [56] if(uctoa::radix#0==DECIMAL) goto uctoa::@1
Simple Condition uctoa::$1 [60] if(uctoa::radix#0==HEXADECIMAL) goto uctoa::@2
Simple Condition uctoa::$2 [64] if(uctoa::radix#0==OCTAL) goto uctoa::@3
Simple Condition uctoa::$3 [68] if(uctoa::radix#0==BINARY) goto uctoa::@4
Simple Condition uctoa::$5 [85] if(uctoa::digit#2<uctoa::$4) goto uctoa::@11
Simple Condition uctoa_append::$0 [108] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition clrscr::$0 [118] if(clrscr::l#2<$19) goto clrscr::@2
Simple Condition clrscr::$1 [126] if(clrscr::c#2<$28) goto clrscr::@5
Simple Condition gotoxy::$1 [136] if(gotoxy::y#3<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [139] if(gotoxy::x#3<$28) goto gotoxy::@2
Simple Condition cputc::$0 [154] if(cputc::c#3=='
') goto cputc::@1
Simple Condition cputc::$2 [160] if(conio_cursor_x!=$28) goto cputc::@return
Simple Condition cscroll::$1 [170] if(conio_cursor_y!=$19) goto cscroll::@return
Simple Condition cscroll::$7 [172] if(0!=conio_scroll_enable) goto cscroll::@3
Simple Condition cputs::$2 [206] if(0!=cputs::c#1) goto cputs::@2
Simple Condition conio_c64_init::$1 [212] if(conio_c64_init::line#0<$19) goto conio_c64_init::@1
Simple Condition printf_padding::$0 [223] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
Simple Condition printf_uchar::$5 [230] if(0!=printf_uchar::format_sign_always#0) goto printf_uchar::@1
Simple Condition printf_number_buffer::$0 [252] if(0==printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$20 [266] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@13
Simple Condition printf_number_buffer::$23 [271] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$7 [275] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
Simple Condition printf_number_buffer::$12 [285] if(0==printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] toupper::$2 = toupper::$0 && toupper::$1
Rewriting ! if()-condition to reversed if() [89] uctoa::$8 = ! uctoa::$7
Rewriting || if()-condition to two if()s [88] uctoa::$7 = uctoa::started#2 || uctoa::$6
Rewriting ! if()-condition to reversed if() [258] printf_number_buffer::$5 = ! printf_number_buffer::$4
Rewriting && if()-condition to two if()s [257] printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [256] printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [280] printf_number_buffer::$10 = ! printf_number_buffer::$9
Rewriting && if()-condition to two if()s [279] printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#0 && printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [294] printf_number_buffer::$17 = ! printf_number_buffer::$16
Rewriting && if()-condition to two if()s [293] printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [292] printf_number_buffer::$15 = printf_number_buffer::format_justify_left#0 && printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition uctoa::started#2
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_zero_padding#0
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Constant right-side identified [175] memcpy::num#0 = (unumber)$19*$28-$28
Constant right-side identified [180] memcpy::num#1 = (unumber)$19*$28-$28
Constant right-side identified [217] conio_c64_init::line#1 = (unumber)$19-1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant strlen::len#0 = 0
Constant uctoa::max_digits#0 = 0
Constant uctoa::digit_values#0 = (byte*) 0
Constant uctoa::max_digits#1 = 3
Constant uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant uctoa::max_digits#2 = 2
Constant uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant uctoa::max_digits#3 = 3
Constant uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant uctoa::max_digits#4 = 8
Constant uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant uctoa::started#0 = 0
Constant uctoa::digit#0 = 0
Constant uctoa::started#1 = 1
Constant uctoa_append::digit#0 = 0
Constant clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant clrscr::l#0 = 0
Constant clrscr::c#0 = 0
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant memcpy::num#0 = (unumber)$19*$28-$28
Constant memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant memcpy::num#1 = (unumber)$19*$28-$28
Constant memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant memset::c#0 = ' '
Constant memset::num#0 = $28
Constant memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant memset::num#1 = $28
Constant gotoxy::x#1 = 0
Constant gotoxy::y#1 = 0
Constant cputs::c#0 = 0
Constant gotoxy::x#2 = 0
Constant conio_c64_init::line#1 = (unumber)$19-1
Constant printf_padding::i#0 = 0
Constant printf_uchar::$1 = '+'
Constant printf_uchar::$0 = 0
Constant uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::padding#0 = 0
Constant printf_number_buffer::padding#2 = 0
Constant printf_padding::pad#0 = ' '
Constant printf_padding::pad#1 = '0'
Constant printf_padding::pad#2 = ' '
Constant printf_uchar::uvalue#0 = main::c
Constant printf_uchar::format_min_length#0 = 0
Constant printf_uchar::format_justify_left#0 = 0
Constant printf_uchar::format_sign_always#0 = 0
Constant printf_uchar::format_zero_padding#0 = 0
Constant printf_uchar::format_upper_case#0 = 0
Constant printf_uchar::format_radix#0 = DECIMAL
Constant conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant memset::c#1 = conio_textcolor
Constant uctoa::value#1 = printf_uchar::uvalue#0
Constant uctoa::radix#0 = printf_uchar::format_radix#0
Constant printf_number_buffer::format_min_length#0 = printf_uchar::format_min_length#0
Constant printf_number_buffer::format_justify_left#0 = printf_uchar::format_justify_left#0
Constant printf_number_buffer::format_sign_always#0 = printf_uchar::format_sign_always#0
Constant printf_number_buffer::format_zero_padding#0 = printf_uchar::format_zero_padding#0
Constant printf_number_buffer::format_upper_case#0 = printf_uchar::format_upper_case#0
Constant printf_number_buffer::format_radix#0 = printf_uchar::format_radix#0
Constant strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant cputs::s#1 = printf_number_buffer::buffer_digits#0
Constant strupr::str#0 = printf_number_buffer::buffer_digits#0
Successful SSA optimization Pass2ConstantIdentification
Constant printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#0
Constant strupr::return#2 = strupr::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [56] if(uctoa::radix#0==DECIMAL) goto uctoa::@1
if() condition always false - eliminating [60] if(uctoa::radix#0==HEXADECIMAL) goto uctoa::@2
if() condition always false - eliminating [64] if(uctoa::radix#0==OCTAL) goto uctoa::@3
if() condition always false - eliminating [68] if(uctoa::radix#0==BINARY) goto uctoa::@4
if() condition always true - replacing block destination [172] if(0!=conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [230] if(0!=printf_uchar::format_sign_always#0) goto printf_uchar::@1
if() condition always true - replacing block destination [252] if(0==printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
if() condition always true - replacing block destination [285] if(0==printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [136] if(gotoxy::y#3<=$19) goto gotoxy::@1
Simplifying constant evaluating to zero (signed byte)printf_number_buffer::format_min_length#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)&printf_buffer in [234] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uchar::$2
Simplifying expression containing zero (byte*)&printf_buffer in [239] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero printf_number_buffer::len#2 in [269] printf_number_buffer::padding#1 = printf_number_buffer::$25 - printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable memcpy::return#2 and assignment [121] memcpy::return#2 = memcpy::destination#2
Eliminating unused variable memcpy::return#3 and assignment [123] memcpy::return#3 = memcpy::destination#2
Eliminating unused variable memset::return#2 and assignment [125] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [127] memset::return#3 = memset::str#3
Eliminating unused constant strupr::return#2
Eliminating unused constant BINARY
Eliminating unused constant OCTAL
Eliminating unused constant HEXADECIMAL
Eliminating unused constant uctoa::max_digits#0
Eliminating unused constant uctoa::digit_values#0
Eliminating unused constant uctoa::radix#0
Eliminating unused constant cputs::c#0
Eliminating unused constant printf_number_buffer::format_min_length#0
Eliminating unused constant printf_number_buffer::format_sign_always#0
Eliminating unused constant printf_number_buffer::format_upper_case#0
Eliminating unused constant printf_number_buffer::format_radix#0
Eliminating unused constant printf_number_buffer::$25
Eliminating unused constant OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant printf_uchar::format_min_length#0
Eliminating unused constant printf_uchar::format_sign_always#0
Eliminating unused constant printf_uchar::format_upper_case#0
Eliminating unused constant printf_uchar::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable toupper::$0 from unused block toupper
Eliminating variable toupper::$1 from unused block toupper
Eliminating variable toupper::return#0 from unused block toupper::@1
Eliminating variable toupper::return#2 from unused block toupper::@return
Eliminating variable strupr::src#2 from unused block strupr::@1
Eliminating variable toupper::ch#0 from unused block strupr::@2
Eliminating variable toupper::return#3 from unused block strupr::@2
Eliminating variable strupr::$0 from unused block strupr::@4
Eliminating variable strupr::src#1 from unused block strupr::@4
Eliminating variable strlen::str#2 from unused block strlen::@1
Eliminating variable strlen::len#2 from unused block strlen::@1
Eliminating variable strlen::len#1 from unused block strlen::@2
Eliminating variable strlen::str#0 from unused block strlen::@2
Eliminating variable uctoa::buffer#0 from unused block uctoa::@9
Eliminating variable uctoa::buffer#1 from unused block uctoa::@9
Eliminating variable uctoa::buffer#2 from unused block uctoa::@9
Eliminating variable strlen::return#2 from unused block printf_number_buffer::@6
Eliminating variable printf_number_buffer::$19 from unused block printf_number_buffer::@15
Eliminating variable printf_number_buffer::len#0 from unused block printf_number_buffer::@15
Eliminating variable printf_number_buffer::len#2 from unused block printf_number_buffer::@13
Eliminating variable printf_number_buffer::padding#1 from unused block printf_number_buffer::@13
Eliminating variable printf_number_buffer::len#1 from unused block printf_number_buffer::@7
Removing unused procedure toupper
Removing unused procedure block toupper
Removing unused procedure block toupper::@1
Removing PHI-reference to removed block (toupper::@1) in block toupper::@return
Removing unused procedure block toupper::@2
Removing PHI-reference to removed block (toupper::@2) in block toupper::@return
Removing unused procedure block toupper::@return
Removing unused procedure block toupper::@3
Removing unused procedure strupr
Removing unused procedure block strupr
Removing PHI-reference to removed block (strupr) in block strupr::@1
Removing unused procedure block strupr::@1
Removing unused procedure block strupr::@2
Removing unused procedure block strupr::@4
Removing unused procedure block strupr::@3
Removing unused procedure block strupr::@return
Removing unused procedure strlen
Removing unused procedure block strlen
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing unused procedure block strlen::@1
Removing unused procedure block strlen::@2
Removing unused procedure block strlen::@3
Removing unused procedure block strlen::@return
Removing unused block uctoa::@6
Removing PHI-reference to removed block (uctoa::@2) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@2) in block uctoa::@5
Removing unused block uctoa::@2
Removing unused block uctoa::@7
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing unused block uctoa::@3
Removing unused block uctoa::@8
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing unused block uctoa::@4
Removing unused block uctoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_uchar::@1) in block printf_uchar::@3
Removing unused block printf_uchar::@1
Removing unused block printf_number_buffer::@6
Removing PHI-reference to removed block (printf_number_buffer::@15) in block printf_number_buffer::@13
Removing unused block printf_number_buffer::@15
Removing PHI-reference to removed block (printf_number_buffer::@13) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@13
Removing unused block printf_number_buffer::@7
Removing PHI-reference to removed block (printf_number_buffer::@14) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@14
Removing unused block printf_number_buffer::@11
Removing unused block printf_number_buffer::@20
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in uctoa::$11 = 0 != uctoa::started#2
Adding number conversion cast (unumber) $19+1 in if(gotoxy::y#3<$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if(gotoxy::y#3<(unumber)$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$33 = 0 != printf_number_buffer::format_zero_padding#0
Adding number conversion cast (unumber) 0 in printf_number_buffer::$34 = 0 != printf_number_buffer::format_justify_left#0
Adding number conversion cast (snumber) 0 in printf_number_buffer::$35 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_number_buffer::$36 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_number_buffer::$37 = 0 != printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $19+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values uctoa::max_digits#7 uctoa::max_digits#1
Identical Phi Values uctoa::digit_values#8 uctoa::digit_values#1
Identical Phi Values gotoxy::y#3 gotoxy::y#2
Identical Phi Values gotoxy::x#3 gotoxy::x#2
Identical Phi Values printf_uchar::$2 printf_uchar::$0
Identical Phi Values printf_number_buffer::padding#10 printf_number_buffer::padding#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition uctoa::$11 [29] if(0!=uctoa::started#2) goto uctoa::@14
Simple Condition printf_number_buffer::$1 [130] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@23
Simple Condition printf_number_buffer::$33 [135] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@24
Simple Condition printf_number_buffer::$34 [143] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@26
Simple Condition uctoa::$6 [157] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@14
Simple Condition printf_number_buffer::$35 [159] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@8
Simple Condition printf_number_buffer::$2 [160] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@22
Simple Condition printf_number_buffer::$36 [162] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@10
Simple Condition printf_number_buffer::$37 [164] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@12
Simple Condition printf_number_buffer::$14 [165] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [130] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
Negating conditional jump and destination [135] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
Negating conditional jump and destination [143] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
Negating conditional jump and destination [160] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
Negating conditional jump and destination [165] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [24] uctoa::$4 = uctoa::max_digits#1 - 1
Constant right-side identified [132] printf_padding::length#0 = (byte)printf_number_buffer::padding#0
Constant right-side identified [138] printf_padding::length#1 = (byte)printf_number_buffer::padding#0
Constant right-side identified [144] printf_padding::length#2 = (byte)printf_number_buffer::padding#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant uctoa::$4 = uctoa::max_digits#1-1
Constant printf_padding::length#0 = (byte)printf_number_buffer::padding#0
Constant printf_padding::length#1 = (byte)printf_number_buffer::padding#0
Constant printf_padding::length#2 = (byte)printf_number_buffer::padding#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [66] if(gotoxy::x#2<$28) goto gotoxy::@2
if() condition always false - eliminating [130] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
if() condition always true - replacing block destination [135] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
if() condition always true - replacing block destination [143] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
if() condition always false - eliminating [159] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@8
if() condition always false - eliminating [160] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
if() condition always false - eliminating [162] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@10
if() condition always false - eliminating [164] if(0!=printf_number_buffer::padding#0) goto printf_number_buffer::@12
if() condition always false - eliminating [165] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)printf_number_buffer::padding#0 in 
Simplifying constant evaluating to zero (byte)printf_number_buffer::padding#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant uctoa::max_digits#2
Eliminating unused constant uctoa::digit_values#2
Eliminating unused constant uctoa::max_digits#3
Eliminating unused constant uctoa::digit_values#3
Eliminating unused constant uctoa::max_digits#4
Eliminating unused constant uctoa::digit_values#4
Eliminating unused constant gotoxy::x#1
Eliminating unused constant gotoxy::y#1
Eliminating unused constant printf_uchar::$1
Eliminating unused constant printf_number_buffer::padding#0
Eliminating unused constant printf_number_buffer::padding#2
Eliminating unused constant printf_number_buffer::format_justify_left#0
Eliminating unused constant printf_number_buffer::format_zero_padding#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant RADIX_BINARY_VALUES_CHAR
Eliminating unused constant RADIX_OCTAL_VALUES_CHAR
Eliminating unused constant RADIX_HEXADECIMAL_VALUES_CHAR
Eliminating unused constant printf_uchar::format_justify_left#0
Eliminating unused constant printf_uchar::format_zero_padding#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable printf_padding::length#4 from unused block printf_padding
Eliminating variable printf_padding::pad#5 from unused block printf_padding
Eliminating variable printf_padding::i#2 from unused block printf_padding::@1
Eliminating variable cputc::c#1 from unused block printf_padding::@2
Eliminating variable printf_padding::i#1 from unused block printf_padding::@3
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Removing unused procedure printf_padding
Removing unused procedure block printf_padding
Removing PHI-reference to removed block (printf_padding) in block printf_padding::@1
Removing unused procedure block printf_padding::@1
Removing unused procedure block printf_padding::@2
Removing PHI-reference to removed block (printf_padding::@2) in block cputc
Removing unused procedure block printf_padding::@3
Removing unused procedure block printf_padding::@return
Removing unused block printf_number_buffer::@8
Removing unused block printf_number_buffer::@16
Removing unused block printf_number_buffer::@10
Removing unused block printf_number_buffer::@18
Removing unused block printf_number_buffer::@12
Removing unused block printf_number_buffer::@21
Removing unused block printf_number_buffer::@24
Removing unused block printf_number_buffer::@25
Removing unused block printf_number_buffer::@26
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values gotoxy::x#4 gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Eliminating unused constant gotoxy::x#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Inlining Noop Cast [1] memcpy::src#0 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] memcpy::dst#0 = (byte*)memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] memcpy::$2 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift and addition[64] gotoxy::line_offset#0 = gotoxy::$7 * $28
Inlining constant with var siblings memcpy::destination#0
Inlining constant with var siblings memcpy::source#0
Inlining constant with var siblings memcpy::num#0
Inlining constant with var siblings memcpy::destination#1
Inlining constant with var siblings memcpy::source#1
Inlining constant with var siblings memcpy::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings uctoa::started#0
Inlining constant with var siblings uctoa::digit#0
Inlining constant with var siblings uctoa::started#1
Inlining constant with var siblings uctoa::buffer#5
Inlining constant with var siblings uctoa::value#1
Inlining constant with var siblings uctoa_append::digit#0
Inlining constant with var siblings clrscr::line_text#0
Inlining constant with var siblings clrscr::line_cols#0
Inlining constant with var siblings clrscr::l#0
Inlining constant with var siblings clrscr::c#0
Inlining constant with var siblings gotoxy::y#0
Inlining constant with var siblings cputs::s#1
Inlining constant with var siblings conio_c64_init::line#1
Constant inlined uctoa_append::digit#0 = 0
Constant inlined uctoa::$4 = uctoa::max_digits#1-1
Constant inlined uctoa::started#0 = 0
Constant inlined uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant inlined uctoa::started#1 = 1
Constant inlined cputs::s#1 = printf_number_buffer::buffer_digits#0
Constant inlined printf_uchar::uvalue#0 = main::c
Constant inlined printf_uchar::$0 = 0
Constant inlined conio_textcolor = LIGHT_BLUE
Constant inlined memcpy::destination#0 = (void*)DEFAULT_SCREEN
Constant inlined memset::num#1 = $28
Constant inlined memcpy::destination#1 = (void*)COLORRAM
Constant inlined memset::num#0 = $28
Constant inlined clrscr::l#0 = 0
Constant inlined conio_c64_init::line#1 = (byte)$19-1
Constant inlined memcpy::source#1 = (void*)COLORRAM+$28
Constant inlined CONIO_SCREEN_TEXT = DEFAULT_SCREEN
Constant inlined CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
Constant inlined memset::str#1 = (void*)COLORRAM+(word)$19*$28-$28
Constant inlined uctoa::digit#0 = 0
Constant inlined memset::str#0 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28
Constant inlined CONIO_SCREEN_COLORS = COLORRAM
Constant inlined clrscr::line_text#0 = DEFAULT_SCREEN
Constant inlined memcpy::source#0 = (void*)DEFAULT_SCREEN+$28
Constant inlined uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memcpy::num#1 = (word)$19*$28-$28
Constant inlined memcpy::num#0 = (word)$19*$28-$28
Constant inlined gotoxy::y#0 = 0
Constant inlined memset::c#0 = ' '
Constant inlined memset::c#1 = LIGHT_BLUE
Constant inlined clrscr::c#0 = 0
Constant inlined clrscr::line_cols#0 = COLORRAM
Constant inlined uctoa::value#1 = main::c
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::line_offset#0 = gotoxy::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values memcpy::num#2 (word)$19*$28-$28
Identical Phi Values memset::num#2 $28
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [9] if($28<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $19-1
Successful SSA optimization PassNCastSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Added new block during phi lifting conio_c64_init::@4(between conio_c64_init and conio_c64_init::@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@3
Adding NOP phi() at start of conio_c64_init::@2
Adding NOP phi() at start of conio_c64_init::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of printf_uchar
Adding NOP phi() at start of printf_uchar::@2
Adding NOP phi() at start of printf_uchar::@5
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa::@1
Adding NOP phi() at start of uctoa::@5
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@1
Adding NOP phi() at start of printf_number_buffer::@23
Adding NOP phi() at start of printf_number_buffer::@22
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@3
Adding NOP phi() at start of printf_number_buffer::@4
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@19
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to conio_c64_init:5 main:8 
Calls in [conio_c64_init] to gotoxy:16 
Calls in [main] to clrscr:21 printf_uchar:23 
Calls in [printf_uchar] to uctoa:65 printf_number_buffer:67 
Calls in [uctoa] to uctoa_append:94 
Calls in [printf_number_buffer] to cputc:107 cputs:112 
Calls in [cputc] to cputln:131 cputln:135 
Calls in [cputs] to cputc:145 
Calls in [cputln] to cscroll:151 
Calls in [cscroll] to memcpy:157 memcpy:159 memset:161 memset:163 

Created 24 initial phi equivalence classes
Coalesced [19] conio_c64_init::line#3 = conio_c64_init::line#0
Coalesced [40] gotoxy::y#7 = gotoxy::y#2
Coalesced [55] clrscr::l#7 = clrscr::l#1
Coalesced [56] clrscr::line_text#7 = clrscr::line_text#1
Coalesced [57] clrscr::line_cols#7 = clrscr::line_cols#1
Coalesced [61] clrscr::c#4 = clrscr::c#1
Coalesced [82] uctoa::value#17 = uctoa::value#2
Coalesced [83] uctoa::started#6 = uctoa::started#2
Coalesced [84] uctoa::buffer#23 = uctoa::buffer#11
Coalesced [87] uctoa::digit#7 = uctoa::digit#1
Coalesced (already) [88] uctoa::value#16 = uctoa::value#6
Coalesced (already) [89] uctoa::started#5 = uctoa::started#4
Coalesced (already) [90] uctoa::buffer#22 = uctoa::buffer#14
Coalesced [98] uctoa::value#18 = uctoa::value#0
Coalesced [99] uctoa::buffer#24 = uctoa::buffer#4
Coalesced [106] cputc::c#6 = cputc::c#2
Coalesced [115] uctoa_append::value#6 = uctoa_append::value#0
Coalesced [122] uctoa_append::value#7 = uctoa_append::value#1
Coalesced [123] uctoa_append::digit#5 = uctoa_append::digit#1
Coalesced [144] cputc::c#5 = cputc::c#0
Coalesced [146] cputs::s#6 = cputs::s#0
Coalesced [179] memcpy::src#5 = memcpy::src#1
Coalesced [180] memcpy::dst#5 = memcpy::dst#1
Coalesced [190] memset::dst#5 = memset::dst#1
Coalesced down to 21 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label __start::@3
Culled Empty Block label conio_c64_init::@2
Culled Empty Block label conio_c64_init::@3
Culled Empty Block label main::@2
Culled Empty Block label gotoxy::@3
Culled Empty Block label clrscr::@2
Culled Empty Block label printf_uchar::@2
Culled Empty Block label printf_uchar::@5
Culled Empty Block label uctoa::@1
Culled Empty Block label uctoa::@5
Culled Empty Block label uctoa::@17
Culled Empty Block label printf_number_buffer::@1
Culled Empty Block label printf_number_buffer::@23
Culled Empty Block label printf_number_buffer::@22
Culled Empty Block label printf_number_buffer::@17
Culled Empty Block label printf_number_buffer::@3
Culled Empty Block label printf_number_buffer::@4
Culled Empty Block label printf_number_buffer::@19
Culled Empty Block label cputc::@5
Culled Empty Block label cputc::@4
Culled Empty Block label cputs::@3
Culled Empty Block label cputln::@1
Culled Empty Block label cscroll::@1
Culled Empty Block label memcpy::@3
Culled Empty Block label memset::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block uctoa::@10 to uctoa::@1
Renumbering block uctoa::@11 to uctoa::@2
Renumbering block uctoa::@12 to uctoa::@3
Renumbering block uctoa::@13 to uctoa::@4
Renumbering block uctoa::@14 to uctoa::@5
Renumbering block uctoa::@15 to uctoa::@6
Renumbering block uctoa::@16 to uctoa::@7
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block conio_c64_init::@4 to conio_c64_init::@2
Renumbering block printf_uchar::@3 to printf_uchar::@1
Renumbering block printf_uchar::@4 to printf_uchar::@2
Renumbering block printf_number_buffer::@2 to printf_number_buffer::@1
Renumbering block printf_number_buffer::@5 to printf_number_buffer::@2
Renumbering block printf_number_buffer::@9 to printf_number_buffer::@3
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of conio_c64_init::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of printf_uchar
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@2
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [16] phi()
  [17] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [18] phi()
  [19] call printf_uchar 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [20] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [21] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [22] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [23] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [24] conio_cursor_x = gotoxy::x#2
  [25] conio_cursor_y = gotoxy::y#4
  [26] gotoxy::$7 = (word)gotoxy::y#4
  [27] gotoxy::$8 = gotoxy::$7 << 2
  [28] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [29] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [30] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [31] conio_line_text = gotoxy::$5
  [32] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [33] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [34] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [35] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [36] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [36] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [36] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [37] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [38] conio_cursor_x = 0
  [39] conio_cursor_y = 0
  [40] conio_line_text = DEFAULT_SCREEN
  [41] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [42] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [43] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [44] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [45] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [46] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [47] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [48] clrscr::line_text#5[clrscr::c#2] = ' '
  [49] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [50] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@1
  [51] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [52] *((byte*)&printf_buffer) = 0
  [53] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [54] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [55] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [56] return 
  to:@return

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [57] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [58] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [58] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [58] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/main::c )
  [58] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [59] if(uctoa::digit#2<uctoa::max_digits#1-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [60] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [61] uctoa::buffer#3 = ++ uctoa::buffer#11
  [62] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [63] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [64] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2]
  [65] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [66] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [67] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [67] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [67] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [68] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [69] uctoa_append::buffer#0 = uctoa::buffer#11
  [70] uctoa_append::value#0 = uctoa::value#2
  [71] uctoa_append::sub#0 = uctoa::digit_value#0
  [72] call uctoa_append 
  [73] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [74] uctoa::value#0 = uctoa_append::return#0
  [75] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [76] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [77] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [78] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [79] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [80] phi()
  [81] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [82] return 
  to:@return

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [83] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [84] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [84] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [85] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [86] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [87] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [88] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [89] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [90] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [91] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [92] conio_line_text[conio_cursor_x] = cputc::c#3
  [93] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [94] conio_cursor_x = ++ conio_cursor_x
  [95] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [96] phi()
  [97] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [98] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [99] phi()
  [100] call cputln 
  to:cputc::@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from printf_number_buffer::@2
  [101] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [102] cputs::s#2 = phi( cputs/printf_number_buffer::buffer_digits#0, cputs::@2/cputs::s#0 )
  [103] cputs::c#1 = *cputs::s#2
  [104] cputs::s#0 = ++ cputs::s#2
  [105] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [106] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [107] cputc::c#0 = cputs::c#1
  [108] call cputc 
  to:cputs::@1

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [109] conio_line_text = conio_line_text + $28
  [110] conio_line_color = conio_line_color + $28
  [111] conio_cursor_x = 0
  [112] conio_cursor_y = ++ conio_cursor_y
  [113] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [114] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [115] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [116] phi()
  [117] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [118] phi()
  [119] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [120] phi()
  [121] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [122] phi()
  [123] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [124] conio_line_text = conio_line_text - $28
  [125] conio_line_color = conio_line_color - $28
  [126] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [127] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [128] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [128] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [129] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [130] memcpy::src#4 = (byte*)memcpy::source#2
  [131] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [132] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [132] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [133] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [134] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [135] *memcpy::dst#2 = *memcpy::src#2
  [136] memcpy::dst#1 = ++ memcpy::dst#2
  [137] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [138] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [138] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [139] memset::end#0 = (byte*)memset::str#3 + $28
  [140] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [141] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [142] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [143] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [144] *memset::dst#2 = memset::c#4
  [145] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc

VARIABLE REGISTER WEIGHTS
void __start()
void clrscr()
byte clrscr::c
byte clrscr::c#1 20002.0
byte clrscr::c#2 12501.25
byte clrscr::l
byte clrscr::l#1 2002.0
byte clrscr::l#2 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 1001.0
byte* clrscr::line_cols#5 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 667.3333333333334
byte* clrscr::line_text#5 1714.7142857142858
void conio_c64_init()
byte conio_c64_init::line
byte conio_c64_init::line#0 11.0
byte conio_c64_init::line#2 22.0
byte conio_cursor_x loadstore 416672.5
byte conio_cursor_y loadstore 6153850.173076923
byte* conio_line_color loadstore 4420004.18
byte* conio_line_text loadstore 4333337.431372548
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 200002.0
byte cputc::c#2 2002.0
byte cputc::c#3 1050502.0
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 100001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 50000.5
to_nomodify byte* cputs::s#2 150001.5
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 202.0
byte*~ gotoxy::$6 202.0
word~ gotoxy::$7 151.5
word~ gotoxy::$8 202.0
word~ gotoxy::$9 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 101.0
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#2 71.0
byte gotoxy::y#4 67.33333333333333
void main()
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2
byte* memcpy::dst
byte* memcpy::dst#1 1.00000000001E11
byte* memcpy::dst#2 1.0033333333466667E11
byte* memcpy::dst#4 2.000000002E9
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#1 2.00000000002E11
byte* memcpy::src#2 1.0025000000125E11
byte* memcpy::src#4 1.000000001E9
byte* memcpy::src_end
byte* memcpy::src_end#0 1.262500000025E10
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 1.4285714285857143E10
byte* memset::dst
byte* memset::dst#1 2.00000000002E11
byte* memset::dst#2 1.3366666666833334E11
byte* memset::dst#4 2.000000002E9
byte* memset::end
byte* memset::end#0 1.6833333333666668E10
word memset::num
void* memset::return
void* memset::str
void* memset::str#3
struct printf_buffer_number printf_buffer loadstore = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 701.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_min_length
byte printf_uchar::format_radix
byte printf_uchar::format_sign_always
byte printf_uchar::format_upper_case
byte printf_uchar::format_zero_padding
byte printf_uchar::uvalue
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 3500.4999999999995
byte* uctoa::buffer#14 15001.5
byte* uctoa::buffer#3 2002.0
byte* uctoa::buffer#4 20002.0
byte uctoa::digit
byte uctoa::digit#1 20002.0
byte uctoa::digit#2 3077.230769230769
byte uctoa::digit_value
byte uctoa::digit_value#0 6000.6
byte* uctoa::digit_values
byte uctoa::max_digits
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 6000.6
byte uctoa::started#4 10001.0
byte uctoa::value
byte uctoa::value#0 10001.0
byte uctoa::value#2 6834.166666666666
byte uctoa::value#6 15001.5
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 13750.25
byte uctoa_append::digit
byte uctoa_append::digit#1 1.0000001E7
byte uctoa_append::digit#2 1.00500015E7
byte uctoa_append::return
byte uctoa_append::return#0 20002.0
byte uctoa_append::sub
byte uctoa_append::sub#0 3335000.5
byte uctoa_append::value
byte uctoa_append::value#0 36667.33333333333
byte uctoa_append::value#1 2.0000002E7
byte uctoa_append::value#2 5018334.166666666

Initial phi equivalence classes
[ conio_c64_init::line#2 conio_c64_init::line#0 ]
[ gotoxy::y#4 gotoxy::y#2 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ cputs::s#2 cputs::s#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable gotoxy::$7 to live range equivalence class [ gotoxy::$7 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::line_offset#0 to live range equivalence class [ gotoxy::line_offset#0 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::$6 to live range equivalence class [ gotoxy::$6 ]
Added variable printf_number_buffer::buffer_sign#0 to live range equivalence class [ printf_number_buffer::buffer_sign#0 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ conio_c64_init::line#2 conio_c64_init::line#0 ]
[ gotoxy::y#4 gotoxy::y#2 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ cputs::s#2 cputs::s#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ gotoxy::$7 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::line_offset#0 ]
[ gotoxy::$5 ]
[ gotoxy::$6 ]
[ printf_number_buffer::buffer_sign#0 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ cputs::c#1 ]
[ memcpy::src_end#0 ]
[ memset::end#0 ]
[ printf_buffer ]
Allocated zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 ]
Allocated zp[1]:3 [ gotoxy::y#4 gotoxy::y#2 ]
Allocated zp[1]:4 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:9 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:11 [ uctoa::value#2 uctoa::value#6 uctoa::value#0 ]
Allocated zp[1]:12 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[1]:15 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:16 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:17 [ cputc::c#3 cputc::c#0 cputc::c#2 ]
Allocated zp[2]:18 [ cputs::s#2 cputs::s#0 ]
Allocated zp[2]:20 [ memcpy::source#2 ]
Allocated zp[2]:22 [ memcpy::destination#2 ]
Allocated zp[2]:24 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:26 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:28 [ memset::str#3 ]
Allocated zp[1]:30 [ memset::c#4 ]
Allocated zp[2]:31 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:33 [ conio_cursor_x ]
Allocated zp[1]:34 [ conio_cursor_y ]
Allocated zp[2]:35 [ conio_line_text ]
Allocated zp[2]:37 [ conio_line_color ]
Allocated zp[2]:39 [ gotoxy::$7 ]
Allocated zp[2]:41 [ gotoxy::$8 ]
Allocated zp[2]:43 [ gotoxy::$9 ]
Allocated zp[2]:45 [ gotoxy::line_offset#0 ]
Allocated zp[2]:47 [ gotoxy::$5 ]
Allocated zp[2]:49 [ gotoxy::$6 ]
Allocated zp[1]:51 [ printf_number_buffer::buffer_sign#0 ]
Allocated zp[2]:52 [ uctoa::buffer#3 ]
Allocated zp[1]:54 [ uctoa::digit_value#0 ]
Allocated zp[2]:55 [ uctoa_append::buffer#0 ]
Allocated zp[1]:57 [ uctoa_append::sub#0 ]
Allocated zp[1]:58 [ uctoa_append::return#0 ]
Allocated zp[1]:59 [ cputs::c#1 ]
Allocated zp[2]:60 [ memcpy::src_end#0 ]
Allocated zp[2]:62 [ memset::end#0 ]
Allocated mem[12] [ printf_buffer ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] conio_cursor_x = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [24] conio_cursor_x = gotoxy::x#2 [ gotoxy::y#4 ] ( gotoxy:14 [ gotoxy::y#4 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::y#4 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ gotoxy::y#4 gotoxy::y#2 ]
Statement [26] gotoxy::$7 = (word)gotoxy::y#4 [ gotoxy::$7 ] ( gotoxy:14 [ gotoxy::$7 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$7 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [27] gotoxy::$8 = gotoxy::$7 << 2 [ gotoxy::$7 gotoxy::$8 ] ( gotoxy:14 [ gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [28] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ gotoxy::$9 ] ( gotoxy:14 [ gotoxy::$9 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$9 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [29] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ gotoxy::line_offset#0 ] ( gotoxy:14 [ gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [30] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ gotoxy::line_offset#0 gotoxy::$5 ] ( gotoxy:14 [ gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [31] conio_line_text = gotoxy::$5 [ gotoxy::line_offset#0 ] ( gotoxy:14 [ gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [32] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ gotoxy::$6 ] ( gotoxy:14 [ gotoxy::$6 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$6 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [33] conio_line_color = gotoxy::$6 [ ] ( gotoxy:14 [ ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [38] conio_cursor_x = 0 [ conio_cursor_x ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [39] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [40] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [41] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [45] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ clrscr::l#2 clrscr::l#1 ]
Statement [46] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [48] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ clrscr::c#2 clrscr::c#1 ]
Statement [49] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [52] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] ( main:7::printf_uchar:19 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a 
Statement [60] *uctoa::buffer#11 = DIGITS[uctoa::value#2] [ printf_buffer uctoa::buffer#11 ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [61] uctoa::buffer#3 = ++ uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [62] *uctoa::buffer#3 = 0 [ printf_buffer ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [69] uctoa_append::buffer#0 = uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ uctoa::value#2 uctoa::value#6 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:54 [ uctoa::digit_value#0 ]
Statement [86] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2] [ uctoa_append::value#2 ] ( main:7::printf_uchar:19::uctoa:53::uctoa_append:72 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [89] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:7::printf_uchar:19::uctoa:53::uctoa_append:72 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:57 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [92] conio_line_text[conio_cursor_x] = cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte y 
Statement [93] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [95] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [103] cputs::c#1 = *cputs::s#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputs:81 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [109] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [110] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [111] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [115] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [124] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [125] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [129] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [130] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [131] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [133] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [135] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [139] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ memset::c#4 ]
Statement [140] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [142] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [144] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:30 [ memset::c#4 ]
Statement [1] conio_cursor_x = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [24] conio_cursor_x = gotoxy::x#2 [ gotoxy::y#4 ] ( gotoxy:14 [ gotoxy::y#4 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::y#4 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [26] gotoxy::$7 = (word)gotoxy::y#4 [ gotoxy::$7 ] ( gotoxy:14 [ gotoxy::$7 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$7 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [27] gotoxy::$8 = gotoxy::$7 << 2 [ gotoxy::$7 gotoxy::$8 ] ( gotoxy:14 [ gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [28] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ gotoxy::$9 ] ( gotoxy:14 [ gotoxy::$9 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$9 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [29] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ gotoxy::line_offset#0 ] ( gotoxy:14 [ gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [30] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ gotoxy::line_offset#0 gotoxy::$5 ] ( gotoxy:14 [ gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [31] conio_line_text = gotoxy::$5 [ gotoxy::line_offset#0 ] ( gotoxy:14 [ gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::line_offset#0 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [32] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ gotoxy::$6 ] ( gotoxy:14 [ gotoxy::$6 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer gotoxy::$6 ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [33] conio_line_color = gotoxy::$6 [ ] ( gotoxy:14 [ ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  conio_c64_init:5::gotoxy:14 [ printf_buffer ] { { gotoxy::y#2 = conio_c64_init::line#2 } }  ) always clobbers reg byte a 
Statement [38] conio_cursor_x = 0 [ conio_cursor_x ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [39] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [40] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [41] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::clrscr:17 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [45] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [46] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [48] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [49] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:7::clrscr:17 [ printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [52] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] ( main:7::printf_uchar:19 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a 
Statement [60] *uctoa::buffer#11 = DIGITS[uctoa::value#2] [ printf_buffer uctoa::buffer#11 ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [61] uctoa::buffer#3 = ++ uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::buffer#3 ] { }  ) always clobbers reg byte a 
Statement [62] *uctoa::buffer#3 = 0 [ printf_buffer ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer ] { }  ) always clobbers reg byte a reg byte y 
Statement [69] uctoa_append::buffer#0 = uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:7::printf_uchar:19::uctoa:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [86] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2] [ uctoa_append::value#2 ] ( main:7::printf_uchar:19::uctoa:53::uctoa_append:72 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [89] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:7::printf_uchar:19::uctoa:53::uctoa_append:72 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [92] conio_line_text[conio_cursor_x] = cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte y 
Statement [93] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [95] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [103] cputs::c#1 = *cputs::s#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputs:81 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [109] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [110] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100 [ conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100 [ cputs::s#0 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [111] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [115] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [124] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [125] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [129] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [130] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [131] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [133] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [135] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:117 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:117 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memcpy:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memcpy:119 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [139] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [140] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [142] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [144] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:121 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:97::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:97::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputc:79::cputln:100::cscroll:113::memset:123 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:7::printf_uchar:19::printf_number_buffer:55::cputs:81::cputc:108::cputln:100::cscroll:113::memset:123 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ gotoxy::y#4 gotoxy::y#2 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ uctoa::value#2 uctoa::value#6 uctoa::value#0 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:13 , 
Potential registers zp[1]:15 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:16 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ cputc::c#3 cputc::c#0 cputc::c#2 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:18 [ cputs::s#2 cputs::s#0 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ memcpy::source#2 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ memcpy::destination#2 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ memset::str#3 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ memset::c#4 ] : zp[1]:30 , reg byte x , 
Potential registers zp[2]:31 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ conio_cursor_x ] : zp[1]:33 , 
Potential registers zp[1]:34 [ conio_cursor_y ] : zp[1]:34 , 
Potential registers zp[2]:35 [ conio_line_text ] : zp[2]:35 , 
Potential registers zp[2]:37 [ conio_line_color ] : zp[2]:37 , 
Potential registers zp[2]:39 [ gotoxy::$7 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ gotoxy::$8 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ gotoxy::$9 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ gotoxy::line_offset#0 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ gotoxy::$5 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ gotoxy::$6 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ printf_number_buffer::buffer_sign#0 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:52 [ uctoa::buffer#3 ] : zp[2]:52 , 
Potential registers zp[1]:54 [ uctoa::digit_value#0 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[2]:55 [ uctoa_append::buffer#0 ] : zp[2]:55 , 
Potential registers zp[1]:57 [ uctoa_append::sub#0 ] : zp[1]:57 , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ uctoa_append::return#0 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ cputs::c#1 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:60 [ memcpy::src_end#0 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ memset::end#0 ] : zp[2]:62 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 301,250,000,004.25: zp[2]:24 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 202,333,333,337.67: zp[2]:26 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,625,000,000.25: zp[2]:60 [ memcpy::src_end#0 ] 0: zp[2]:20 [ memcpy::source#2 ] 0: zp[2]:22 [ memcpy::destination#2 ] 
Uplift Scope [memset] 335,666,666,672.33: zp[2]:31 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,833,333,333.67: zp[2]:62 [ memset::end#0 ] 14,285,714,285.86: zp[1]:30 [ memset::c#4 ] 0: zp[2]:28 [ memset::str#3 ] 
Uplift Scope [uctoa_append] 25,055,003.5: zp[1]:15 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,050,002.5: zp[1]:16 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,335,000.5: zp[1]:57 [ uctoa_append::sub#0 ] 20,002: zp[1]:58 [ uctoa_append::return#0 ] 13,750.25: zp[2]:55 [ uctoa_append::buffer#0 ] 
Uplift Scope [] 6,153,850.17: zp[1]:34 [ conio_cursor_y ] 4,420,004.18: zp[2]:37 [ conio_line_color ] 4,333,337.43: zp[2]:35 [ conio_line_text ] 416,672.5: zp[1]:33 [ conio_cursor_x ] 0: mem[12] [ printf_buffer ] 
Uplift Scope [cputc] 1,252,506: zp[1]:17 [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplift Scope [cputs] 200,002: zp[2]:18 [ cputs::s#2 cputs::s#0 ] 100,001: zp[1]:59 [ cputs::c#1 ] 
Uplift Scope [uctoa] 38,504: zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 31,836.67: zp[1]:11 [ uctoa::value#2 uctoa::value#6 uctoa::value#0 ] 23,079.23: zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ] 16,001.6: zp[1]:12 [ uctoa::started#2 uctoa::started#4 ] 6,000.6: zp[1]:54 [ uctoa::digit_value#0 ] 2,002: zp[2]:52 [ uctoa::buffer#3 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:9 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:4 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [gotoxy] 202: zp[2]:41 [ gotoxy::$8 ] 202: zp[2]:43 [ gotoxy::$9 ] 202: zp[2]:47 [ gotoxy::$5 ] 202: zp[2]:49 [ gotoxy::$6 ] 151.5: zp[2]:39 [ gotoxy::$7 ] 138.33: zp[1]:3 [ gotoxy::y#4 gotoxy::y#2 ] 101: zp[2]:45 [ gotoxy::line_offset#0 ] 
Uplift Scope [printf_number_buffer] 701: zp[1]:51 [ printf_number_buffer::buffer_sign#0 ] 
Uplift Scope [conio_c64_init] 33: zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_uchar] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [memcpy] best 24120 combination zp[2]:24 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:26 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:60 [ memcpy::src_end#0 ] zp[2]:20 [ memcpy::source#2 ] zp[2]:22 [ memcpy::destination#2 ] 
Uplifting [memset] best 24014 combination zp[2]:31 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:62 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:28 [ memset::str#3 ] 
Uplifting [uctoa_append] best 22791 combination reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ] zp[1]:57 [ uctoa_append::sub#0 ] reg byte x [ uctoa_append::return#0 ] zp[2]:55 [ uctoa_append::buffer#0 ] 
Uplifting [] best 22791 combination zp[1]:34 [ conio_cursor_y ] zp[2]:37 [ conio_line_color ] zp[2]:35 [ conio_line_text ] zp[1]:33 [ conio_cursor_x ] mem[12] [ printf_buffer ] 
Uplifting [cputc] best 22752 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplifting [cputs] best 22662 combination zp[2]:18 [ cputs::s#2 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [uctoa] best 22539 combination zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#0 ] zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ] zp[1]:12 [ uctoa::started#2 uctoa::started#4 ] zp[1]:54 [ uctoa::digit_value#0 ] zp[2]:52 [ uctoa::buffer#3 ] 
Uplifting [clrscr] best 20949 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [gotoxy] best 20936 combination zp[2]:41 [ gotoxy::$8 ] zp[2]:43 [ gotoxy::$9 ] zp[2]:47 [ gotoxy::$5 ] zp[2]:49 [ gotoxy::$6 ] zp[2]:39 [ gotoxy::$7 ] reg byte x [ gotoxy::y#4 gotoxy::y#2 ] zp[2]:45 [ gotoxy::line_offset#0 ] 
Uplifting [printf_number_buffer] best 20927 combination reg byte a [ printf_number_buffer::buffer_sign#0 ] 
Uplifting [conio_c64_init] best 20915 combination reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ] 
Uplifting [RADIX] best 20915 combination 
Uplifting [MOS6526_CIA] best 20915 combination 
Uplifting [MOS6569_VICII] best 20915 combination 
Uplifting [MOS6581_SID] best 20915 combination 
Uplifting [cputln] best 20915 combination 
Uplifting [cscroll] best 20915 combination 
Uplifting [printf_format_number] best 20915 combination 
Uplifting [printf_buffer_number] best 20915 combination 
Uplifting [printf_format_string] best 20915 combination 
Uplifting [printf_uchar] best 20915 combination 
Uplifting [main] best 20915 combination 
Uplifting [__start] best 20915 combination 
Attempting to uplift remaining variables inzp[1]:34 [ conio_cursor_y ]
Uplifting [] best 20915 combination zp[1]:34 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:57 [ uctoa_append::sub#0 ]
Uplifting [uctoa_append] best 20915 combination zp[1]:57 [ uctoa_append::sub#0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ conio_cursor_x ]
Uplifting [] best 20915 combination zp[1]:33 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ]
Uplifting [uctoa] best 20915 combination zp[1]:10 [ uctoa::digit#2 uctoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:12 [ uctoa::started#2 uctoa::started#4 ]
Uplifting [uctoa] best 20915 combination zp[1]:12 [ uctoa::started#2 uctoa::started#4 ] 
Attempting to uplift remaining variables inzp[1]:54 [ uctoa::digit_value#0 ]
Uplifting [uctoa] best 20915 combination zp[1]:54 [ uctoa::digit_value#0 ] 
Coalescing zero page register [ zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:52 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:55 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ memcpy::source#2 ] ] with [ zp[2]:24 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ memcpy::destination#2 ] ] with [ zp[2]:26 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ memset::str#3 ] ] with [ zp[2]:31 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ gotoxy::$7 ] ] with [ zp[2]:43 [ gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:45 [ gotoxy::line_offset#0 ] ] with [ zp[2]:49 [ gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[1]:54 [ uctoa::digit_value#0 ] ] with [ zp[1]:57 [ uctoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:39 [ gotoxy::$7 gotoxy::$9 ] ] with [ zp[2]:45 [ gotoxy::line_offset#0 gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[2]:18 [ cputs::s#2 cputs::s#0 ] ] with [ zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[2]:28 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:20 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ]
Coalescing zero page register [ zp[2]:62 [ memset::end#0 ] ] with [ zp[2]:22 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[2]:28 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:13 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 clrscr::line_text#5 clrscr::line_text#1 ] ]
Allocated (was zp[1]:10) zp[1]:2 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated (was zp[1]:12) zp[1]:3 [ uctoa::started#2 uctoa::started#4 ]
Allocated (was zp[2]:18) zp[2]:4 [ cputs::s#2 cputs::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[2]:28) zp[2]:6 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 clrscr::line_text#5 clrscr::line_text#1 ]
Allocated (was zp[1]:33) zp[1]:8 [ conio_cursor_x ]
Allocated (was zp[1]:34) zp[1]:9 [ conio_cursor_y ]
Allocated (was zp[2]:35) zp[2]:10 [ conio_line_text ]
Allocated (was zp[2]:37) zp[2]:12 [ conio_line_color ]
Allocated (was zp[2]:39) zp[2]:14 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
Allocated (was zp[2]:41) zp[2]:16 [ gotoxy::$8 ]
Allocated (was zp[2]:47) zp[2]:18 [ gotoxy::$5 ]
Allocated (was zp[1]:54) zp[1]:20 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
Allocated (was zp[2]:60) zp[2]:21 [ memcpy::src_end#0 ]
Allocated (was zp[2]:62) zp[2]:23 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf function call rewriting
// Print a char using %u
  // Upstart
  // Commodore 64 PRG executable file
.file [name="printf-14.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 8
  // The current cursor y-position
  .label conio_cursor_y = 9
  // The current text cursor line start
  .label conio_line_text = $a
  // The current color cursor line start
  .label conio_line_color = $c
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] call conio_c64_init 
    jsr conio_c64_init
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [7] call main 
    // [16] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [8] return 
    rts
}
  // conio_c64_init
// Set initial cursor position
conio_c64_init: {
    // Position cursor at current line
    .label BASIC_CURSOR_LINE = $d6
    // [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE -- vbuxx=_deref_pbuc1 
    ldx BASIC_CURSOR_LINE
    // [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2_from_conio_c64_init
    // [12] phi from conio_c64_init to conio_c64_init::@1 [phi:conio_c64_init->conio_c64_init::@1]
  __b1_from_conio_c64_init:
    // [12] phi conio_c64_init::line#2 = $19-1 [phi:conio_c64_init->conio_c64_init::@1#0] -- vbuxx=vbuc1 
    ldx #$19-1
    jmp __b1
    // [11] phi from conio_c64_init to conio_c64_init::@2 [phi:conio_c64_init->conio_c64_init::@2]
  __b2_from_conio_c64_init:
    jmp __b2
    // conio_c64_init::@2
  __b2:
    // [12] phi from conio_c64_init::@2 to conio_c64_init::@1 [phi:conio_c64_init::@2->conio_c64_init::@1]
  __b1_from___b2:
    // [12] phi conio_c64_init::line#2 = conio_c64_init::line#0 [phi:conio_c64_init::@2->conio_c64_init::@1#0] -- register_copy 
    jmp __b1
    // conio_c64_init::@1
  __b1:
    // [13] gotoxy::y#2 = conio_c64_init::line#2
    // [14] call gotoxy 
    jsr gotoxy
    jmp __breturn
    // conio_c64_init::@return
  __breturn:
    // [15] return 
    rts
}
  // main
main: {
    .label c = 7
    // [17] call clrscr 
    // [35] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [18] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [19] call printf_uchar 
    // [51] phi from main::@1 to printf_uchar [phi:main::@1->printf_uchar]
  printf_uchar_from___b1:
    jsr printf_uchar
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .const x = 0
    .label __5 = $12
    .label __6 = $e
    .label __7 = $e
    .label line_offset = $e
    .label __8 = $10
    .label __9 = $e
    // [21] if(gotoxy::y#2<$19+1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b3_from_gotoxy
    // [23] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [23] phi gotoxy::y#4 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [22] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [23] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [23] phi gotoxy::y#4 = gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [24] conio_cursor_x = gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [25] conio_cursor_y = gotoxy::y#4 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // [26] gotoxy::$7 = (word)gotoxy::y#4 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // [27] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [28] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [29] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [30] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z line_offset
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [31] conio_line_text = gotoxy::$5 -- pbuz1=pbuz2 
    lda.z __5
    sta.z conio_line_text
    lda.z __5+1
    sta.z conio_line_text+1
    // [32] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // [33] conio_line_color = gotoxy::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z conio_line_color
    lda.z __6+1
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [34] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 6
    .label line_cols = 4
    // [36] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [36] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [36] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [36] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [37] if(clrscr::l#2<$19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [38] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [39] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [40] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [41] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [42] return 
    rts
    // [43] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [43] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [44] if(clrscr::c#2<$28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [45] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [46] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [47] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [36] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [36] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [36] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [36] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [48] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [49] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // [50] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [43] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [43] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // printf_uchar
// Print an unsigned char using a specific format
printf_uchar: {
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [52] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [53] call uctoa 
  // Format number into buffer
    // [57] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [54] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [55] call printf_number_buffer 
  // Print using format
    // [76] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [56] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp(6) buffer)
uctoa: {
    .const max_digits = 3
    .label digit_value = $14
    .label buffer = 6
    .label digit = 2
    .label started = 3
    // [58] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [58] phi uctoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [58] phi uctoa::started#2 = 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [58] phi uctoa::value#2 = main::c [phi:uctoa->uctoa::@1#2] -- vbuxx=vbuc1 
    ldx #main.c
    // [58] phi uctoa::digit#2 = 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [59] if(uctoa::digit#2<uctoa::max_digits#1-1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [60] *uctoa::buffer#11 = DIGITS[uctoa::value#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [61] uctoa::buffer#3 = ++ uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [62] *uctoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [63] return 
    rts
    // uctoa::@2
  __b2:
    // [64] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_DECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [65] if(0!=uctoa::started#2) goto uctoa::@5 -- 0_neq_vbuz1_then_la1 
    lda.z started
    cmp #0
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [66] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [67] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [67] phi uctoa::buffer#14 = uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [67] phi uctoa::started#4 = uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [67] phi uctoa::value#6 = uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [68] uctoa::digit#1 = ++ uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [58] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [58] phi uctoa::buffer#11 = uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [58] phi uctoa::started#2 = uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [58] phi uctoa::value#2 = uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [58] phi uctoa::digit#2 = uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [69] uctoa_append::buffer#0 = uctoa::buffer#11
    // [70] uctoa_append::value#0 = uctoa::value#2
    // [71] uctoa_append::sub#0 = uctoa::digit_value#0
    // [72] call uctoa_append 
    // [83] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [73] uctoa_append::return#0 = uctoa_append::value#2
    jmp __b6
    // uctoa::@6
  __b6:
    // [74] uctoa::value#0 = uctoa_append::return#0
    // [75] uctoa::buffer#4 = ++ uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [67] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [67] phi uctoa::buffer#14 = uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [67] phi uctoa::started#4 = 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [67] phi uctoa::value#6 = uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [77] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [78] cputc::c#2 = printf_number_buffer::buffer_sign#0
    // [79] call cputc 
    // [90] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
  cputc_from___b3:
    // [90] phi cputc::c#3 = cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [80] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [81] call cputs 
    // [101] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
  cputs_from___b2:
    jsr cputs
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [82] return 
    rts
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp(6) buffer, byte register(X) value, byte zp($14) sub)
uctoa_append: {
    .label buffer = 6
    .label sub = $14
    // [84] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [84] phi uctoa_append::digit#2 = 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [84] phi uctoa_append::value#2 = uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [85] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [86] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [87] return 
    rts
    // uctoa_append::@2
  __b2:
    // [88] uctoa_append::digit#1 = ++ uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // [89] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [84] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [84] phi uctoa_append::digit#2 = uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [84] phi uctoa_append::value#2 = uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [91] if(cputc::c#3==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [92] conio_line_text[conio_cursor_x] = cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [93] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [94] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [95] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [96] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [97] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [98] return 
    rts
    // [99] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [100] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label s = 4
    // [102] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
  __b1_from_cputs:
    // [102] phi cputs::s#2 = printf_number_buffer::buffer_digits#0 [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<printf_number_buffer.buffer_digits
    sta.z s
    lda #>printf_number_buffer.buffer_digits
    sta.z s+1
    jmp __b1
    // cputs::@1
  __b1:
    // [103] cputs::c#1 = *cputs::s#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [104] cputs::s#0 = ++ cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [105] if(0!=cputs::c#1) goto cputs::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [106] return 
    rts
    // cputs::@2
  __b2:
    // [107] cputc::c#0 = cputs::c#1
    // [108] call cputc 
    // [90] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [90] phi cputc::c#3 = cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    // [102] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
  __b1_from___b2:
    // [102] phi cputs::s#2 = cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputln
// Print a newline
cputln: {
    // [109] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [110] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [111] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [112] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [113] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [114] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [115] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [116] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [117] call memcpy 
    // [128] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [128] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [128] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [118] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [119] call memcpy 
    // [128] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [128] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [128] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [120] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [121] call memset 
    // [138] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [138] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [138] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [122] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [123] call memset 
    // [138] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [138] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [138] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [124] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [125] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [126] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [127] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($17) destination, void* zp(6) source)
memcpy: {
    .label src_end = $15
    .label dst = $17
    .label src = 6
    .label source = 6
    .label destination = $17
    // [129] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    clc
    lda.z source
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [130] memcpy::src#4 = (byte*)memcpy::source#2
    // [131] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [132] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [132] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [132] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [133] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [134] return 
    rts
    // memcpy::@2
  __b2:
    // [135] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [136] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [137] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(6) str, byte register(X) c)
memset: {
    .label end = $17
    .label dst = 6
    .label str = 6
    jmp __b1
    // memset::@1
  __b1:
    // [139] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [140] memset::dst#4 = (byte*)memset::str#3
    // [141] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [141] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [142] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [143] return 
    rts
    // memset::@3
  __b3:
    // [144] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [145] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction ldy.z conio_cursor_x
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from_conio_c64_init with __b1
Replacing label __b3_from_gotoxy with __b2
Replacing label __b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from_cputc with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b2_from_conio_c64_init:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_main:
Removing instruction printf_uchar_from___b1:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __b4_from___b7:
Removing instruction uctoa_append_from___b5:
Removing instruction cputc_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction cputs_from___b2:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_conio_c64_init:
Removing instruction __breturn:
Removing instruction clrscr_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_gotoxy:
Removing instruction __breturn:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Removing instruction __b1:
Removing instruction uctoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_uctoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from_cputs:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* DIGITS[]  = "0123456789abcdef"z
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* RADIX_DECIMAL_VALUES_CHAR[]  = { $64, $a }
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void __start()
void clrscr()
byte clrscr::c
byte clrscr::c#1 reg byte y 20002.0
byte clrscr::c#2 reg byte y 12501.25
byte clrscr::l
byte clrscr::l#1 reg byte x 2002.0
byte clrscr::l#2 reg byte x 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:4 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:4 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:6 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:6 1714.7142857142858
void conio_c64_init()
const nomodify byte* conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte x 11.0
byte conio_c64_init::line#2 reg byte x 22.0
byte conio_cursor_x loadstore zp[1]:8 416672.5
byte conio_cursor_y loadstore zp[1]:9 6153850.173076923
byte* conio_line_color loadstore zp[2]:12 4420004.18
byte* conio_line_text loadstore zp[2]:10 4333337.431372548
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 200002.0
byte cputc::c#2 reg byte a 2002.0
byte cputc::c#3 reg byte a 1050502.0
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 100001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:4 50000.5
to_nomodify byte* cputs::s#2 s zp[2]:4 150001.5
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:18 202.0
byte*~ gotoxy::$6 zp[2]:14 202.0
word~ gotoxy::$7 zp[2]:14 151.5
word~ gotoxy::$8 zp[2]:16 202.0
word~ gotoxy::$9 zp[2]:14 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:14 101.0
byte gotoxy::x
const byte gotoxy::x#2 x = 0
byte gotoxy::y
byte gotoxy::y#2 reg byte x 71.0
byte gotoxy::y#4 reg byte x 67.33333333333333
void main()
const byte main::c = 7
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:23
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:23 1.00000000001E11
byte* memcpy::dst#2 dst zp[2]:23 1.0033333333466667E11
byte* memcpy::dst#4 dst zp[2]:23 2.000000002E9
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:6
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:6 2.00000000002E11
byte* memcpy::src#2 src zp[2]:6 1.0025000000125E11
byte* memcpy::src#4 src zp[2]:6 1.000000001E9
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:21 1.262500000025E10
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 1.4285714285857143E10
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2.00000000002E11
byte* memset::dst#2 dst zp[2]:6 1.3366666666833334E11
byte* memset::dst#4 dst zp[2]:6 2.000000002E9
byte* memset::end
byte* memset::end#0 end zp[2]:23 1.6833333333666668E10
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:6
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
const byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 701.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_min_length
byte printf_uchar::format_radix
byte printf_uchar::format_sign_always
byte printf_uchar::format_upper_case
byte printf_uchar::format_zero_padding
byte printf_uchar::uvalue
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:6 3500.4999999999995
byte* uctoa::buffer#14 buffer zp[2]:6 15001.5
byte* uctoa::buffer#3 buffer zp[2]:6 2002.0
byte* uctoa::buffer#4 buffer zp[2]:6 20002.0
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:2 20002.0
byte uctoa::digit#2 digit zp[1]:2 3077.230769230769
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:20 6000.6
byte* uctoa::digit_values
byte uctoa::max_digits
const byte uctoa::max_digits#1 max_digits = 3
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:3 6000.6
byte uctoa::started#4 started zp[1]:3 10001.0
byte uctoa::value
byte uctoa::value#0 reg byte x 10001.0
byte uctoa::value#2 reg byte x 6834.166666666666
byte uctoa::value#6 reg byte x 15001.5
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:6 13750.25
byte uctoa_append::digit
byte uctoa_append::digit#1 reg byte y 1.0000001E7
byte uctoa_append::digit#2 reg byte y 1.00500015E7
byte uctoa_append::return
byte uctoa_append::return#0 reg byte x 20002.0
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:20 3335000.5
byte uctoa_append::value
byte uctoa_append::value#0 reg byte x 36667.33333333333
byte uctoa_append::value#1 reg byte x 2.0000002E7
byte uctoa_append::value#2 reg byte x 5018334.166666666

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[1]:2 [ uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#0 ]
zp[1]:3 [ uctoa::started#2 uctoa::started#4 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
zp[2]:4 [ cputs::s#2 cputs::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[2]:6 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte x [ memset::c#4 ]
zp[1]:8 [ conio_cursor_x ]
zp[1]:9 [ conio_cursor_y ]
zp[2]:10 [ conio_line_text ]
zp[2]:12 [ conio_line_color ]
zp[2]:14 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:16 [ gotoxy::$8 ]
zp[2]:18 [ gotoxy::$5 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[1]:20 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
reg byte a [ cputs::c#1 ]
zp[2]:21 [ memcpy::src_end#0 ]
zp[2]:23 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 17550

  // File Comments
// Tests printf function call rewriting
// Print a char using %u
  // Upstart
  // Commodore 64 PRG executable file
.file [name="printf-14.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 8
  // The current cursor y-position
  .label conio_cursor_y = 9
  // The current text cursor line start
  .label conio_line_text = $a
  // The current color cursor line start
  .label conio_line_color = $c
.segment Code
  // __start
__start: {
    // __start::__init1
    // conio_cursor_x = 0
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // #pragma constructor_for(conio_c64_init, cputc, clrscr, cscroll)
    // [5] call conio_c64_init 
    jsr conio_c64_init
    // [6] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [7] call main 
    // [16] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [8] return 
    rts
}
  // conio_c64_init
// Set initial cursor position
conio_c64_init: {
    // Position cursor at current line
    .label BASIC_CURSOR_LINE = $d6
    // line = *BASIC_CURSOR_LINE
    // [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE -- vbuxx=_deref_pbuc1 
    ldx BASIC_CURSOR_LINE
    // if(line>=CONIO_HEIGHT)
    // [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b1
    // [12] phi from conio_c64_init to conio_c64_init::@1 [phi:conio_c64_init->conio_c64_init::@1]
    // [12] phi conio_c64_init::line#2 = $19-1 [phi:conio_c64_init->conio_c64_init::@1#0] -- vbuxx=vbuc1 
    ldx #$19-1
    // [11] phi from conio_c64_init to conio_c64_init::@2 [phi:conio_c64_init->conio_c64_init::@2]
    // conio_c64_init::@2
    // [12] phi from conio_c64_init::@2 to conio_c64_init::@1 [phi:conio_c64_init::@2->conio_c64_init::@1]
    // [12] phi conio_c64_init::line#2 = conio_c64_init::line#0 [phi:conio_c64_init::@2->conio_c64_init::@1#0] -- register_copy 
    // conio_c64_init::@1
  __b1:
    // gotoxy(0, line)
    // [13] gotoxy::y#2 = conio_c64_init::line#2
    // [14] call gotoxy 
    jsr gotoxy
    // conio_c64_init::@return
    // }
    // [15] return 
    rts
}
  // main
main: {
    .label c = 7
    // clrscr()
    // [17] call clrscr 
    // [35] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [18] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf("%u", c)
    // [19] call printf_uchar 
    // [51] phi from main::@1 to printf_uchar [phi:main::@1->printf_uchar]
    jsr printf_uchar
    // main::@return
    // }
    // [20] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .const x = 0
    .label __5 = $12
    .label __6 = $e
    .label __7 = $e
    .label line_offset = $e
    .label __8 = $10
    .label __9 = $e
    // if(y>CONIO_HEIGHT)
    // [21] if(gotoxy::y#2<$19+1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b2
    // [23] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [23] phi gotoxy::y#4 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [22] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [23] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [23] phi gotoxy::y#4 = gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [24] conio_cursor_x = gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [25] conio_cursor_y = gotoxy::y#4 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [26] gotoxy::$7 = (word)gotoxy::y#4 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // line_offset = (unsigned int)y*CONIO_WIDTH
    // [27] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [28] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [29] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // CONIO_SCREEN_TEXT + line_offset
    // [30] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z line_offset
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [31] conio_line_text = gotoxy::$5 -- pbuz1=pbuz2 
    lda.z __5
    sta.z conio_line_text
    lda.z __5+1
    sta.z conio_line_text+1
    // CONIO_SCREEN_COLORS + line_offset
    // [32] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [33] conio_line_color = gotoxy::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z conio_line_color
    lda.z __6+1
    sta.z conio_line_color+1
    // gotoxy::@return
    // }
    // [34] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 6
    .label line_cols = 4
    // [36] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [36] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [36] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [36] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [37] if(clrscr::l#2<$19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [38] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [39] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [40] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [41] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // clrscr::@return
    // }
    // [42] return 
    rts
    // [43] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [43] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [44] if(clrscr::c#2<$28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [45] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [46] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [47] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [36] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [36] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [36] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [36] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [48] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [49] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [50] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [43] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [43] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // printf_uchar
// Print an unsigned char using a specific format
printf_uchar: {
    // printf_uchar::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [52] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [53] call uctoa 
  // Format number into buffer
    // [57] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
    jsr uctoa
    // printf_uchar::@2
    // printf_number_buffer(printf_buffer, format)
    // [54] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [55] call printf_number_buffer 
  // Print using format
    // [76] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
    jsr printf_number_buffer
    // printf_uchar::@return
    // }
    // [56] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp(6) buffer)
uctoa: {
    .const max_digits = 3
    .label digit_value = $14
    .label buffer = 6
    .label digit = 2
    .label started = 3
    // [58] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
    // [58] phi uctoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [58] phi uctoa::started#2 = 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [58] phi uctoa::value#2 = main::c [phi:uctoa->uctoa::@1#2] -- vbuxx=vbuc1 
    ldx #main.c
    // [58] phi uctoa::digit#2 = 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [59] if(uctoa::digit#2<uctoa::max_digits#1-1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // uctoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [60] *uctoa::buffer#11 = DIGITS[uctoa::value#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [61] uctoa::buffer#3 = ++ uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [62] *uctoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // uctoa::@return
    // }
    // [63] return 
    rts
    // uctoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [64] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_DECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // if (started || value >= digit_value)
    // [65] if(0!=uctoa::started#2) goto uctoa::@5 -- 0_neq_vbuz1_then_la1 
    lda.z started
    cmp #0
    bne __b5
    // uctoa::@7
    // [66] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [67] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
    // [67] phi uctoa::buffer#14 = uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [67] phi uctoa::started#4 = uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [67] phi uctoa::value#6 = uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    // uctoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [68] uctoa::digit#1 = ++ uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [58] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
    // [58] phi uctoa::buffer#11 = uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [58] phi uctoa::started#2 = uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [58] phi uctoa::value#2 = uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [58] phi uctoa::digit#2 = uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // uctoa_append(buffer++, value, digit_value)
    // [69] uctoa_append::buffer#0 = uctoa::buffer#11
    // [70] uctoa_append::value#0 = uctoa::value#2
    // [71] uctoa_append::sub#0 = uctoa::digit_value#0
    // [72] call uctoa_append 
    // [83] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [73] uctoa_append::return#0 = uctoa_append::value#2
    // uctoa::@6
    // value = uctoa_append(buffer++, value, digit_value)
    // [74] uctoa::value#0 = uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [75] uctoa::buffer#4 = ++ uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [67] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
    // [67] phi uctoa::buffer#14 = uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [67] phi uctoa::started#4 = 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [67] phi uctoa::value#6 = uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // printf_number_buffer::@1
    // if(buffer.sign)
    // [77] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // printf_number_buffer::@3
    // cputc(buffer.sign)
    // [78] cputc::c#2 = printf_number_buffer::buffer_sign#0
    // [79] call cputc 
    // [90] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
    // [90] phi cputc::c#3 = cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [80] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
    // printf_number_buffer::@2
  __b2:
    // cputs(buffer.digits)
    // [81] call cputs 
    // [101] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
    jsr cputs
    // printf_number_buffer::@return
    // }
    // [82] return 
    rts
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp(6) buffer, byte register(X) value, byte zp($14) sub)
uctoa_append: {
    .label buffer = 6
    .label sub = $14
    // [84] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [84] phi uctoa_append::digit#2 = 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [84] phi uctoa_append::value#2 = uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [85] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [86] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [87] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [88] uctoa_append::digit#1 = ++ uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // value -= sub
    // [89] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [84] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [84] phi uctoa_append::digit#2 = uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [84] phi uctoa_append::value#2 = uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [91] if(cputc::c#3==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [92] conio_line_text[conio_cursor_x] = cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [93] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [94] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [95] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [96] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [97] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [98] return 
    rts
    // [99] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [100] call cputln 
    jsr cputln
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(4) s)
cputs: {
    .label s = 4
    // [102] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
    // [102] phi cputs::s#2 = printf_number_buffer::buffer_digits#0 [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<printf_number_buffer.buffer_digits
    sta.z s
    lda #>printf_number_buffer.buffer_digits
    sta.z s+1
    // cputs::@1
  __b1:
    // while(c=*s++)
    // [103] cputs::c#1 = *cputs::s#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [104] cputs::s#0 = ++ cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [105] if(0!=cputs::c#1) goto cputs::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [106] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [107] cputc::c#0 = cputs::c#1
    // [108] call cputc 
    // [90] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [90] phi cputc::c#3 = cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    // [102] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
    // [102] phi cputs::s#2 = cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [109] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [110] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [111] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [112] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [113] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [114] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [115] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [116] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [117] call memcpy 
    // [128] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [128] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [128] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [118] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [119] call memcpy 
    // [128] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [128] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [128] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [120] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [121] call memset 
    // [138] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [138] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [138] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [122] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [123] call memset 
    // [138] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [138] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [138] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [124] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [125] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [126] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [127] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($17) destination, void* zp(6) source)
memcpy: {
    .label src_end = $15
    .label dst = $17
    .label src = 6
    .label source = 6
    .label destination = $17
    // src_end = (char*)source+num
    // [129] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    clc
    lda.z source
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [130] memcpy::src#4 = (byte*)memcpy::source#2
    // [131] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [132] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [132] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [132] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [133] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [134] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [135] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [136] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [137] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(6) str, byte register(X) c)
memset: {
    .label end = $17
    .label dst = 6
    .label str = 6
    // memset::@1
    // end = (char*)str + num
    // [139] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [140] memset::dst#4 = (byte*)memset::str#3
    // [141] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [141] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [142] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [143] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [144] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [145] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

