
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::a#0 = 0
  main::b#0 = 0
  main::b#1 = $c
  main::a#1 = main::b#1
  main::screen[0] = main::a#1
  main::screen[1] = main::b#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
byte main::a
byte main::a#0
byte main::a#1
byte main::b
byte main::b#0
byte main::b#1
constant byte* main::screen = (byte*)$400

Adding number conversion cast (unumber) $c in main::b#1 = $c
Adding number conversion cast (unumber) 0 in main::screen[0] = main::a#1
Adding number conversion cast (unumber) 1 in main::screen[1] = main::b#1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::b#1 = (unumber)$c
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $c
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::a#1 = main::b#1 
Successful SSA optimization Pass2AliasElimination
Constant main::a#0 = 0
Constant main::b#0 = 0
Constant main::a#1 = $c
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::screen in [3] main::screen[0] = main::a#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::a#0
Eliminating unused constant main::b#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(main::screen+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::screen = main::a#1
  [1] *(main::screen+1) = main::a#1
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::a
byte main::b

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::screen = main::a#1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::screen+1) = main::a#1 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that a double-assignment works.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="double-assignment.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const a = $c
    .label screen = $400
    // [0] *main::screen = main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen
    // [1] *(main::screen+1) = main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #a
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
byte main::a
constant byte main::a#1 a = $c
byte main::b
constant byte* main::screen = (byte*) 1024



FINAL ASSEMBLER
Score: 16

  // File Comments
// Test that a double-assignment works.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="double-assignment.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const a = $c
    .label screen = $400
    // screen[0] = a
    // [0] *main::screen = main::a#1 -- _deref_pbuc1=vbuc2 
    lda #a
    sta screen
    // screen[1] = b
    // [1] *(main::screen+1) = main::a#1 -- _deref_pbuc1=vbuc2 
    sta screen+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

