
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  kickasm() {{ inc $d020
         }}
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) A[]  = kickasm {{ .byte 1, 2, 3
 }}
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

if() condition always true - replacing block destination [0] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) main::@1
Renumbering block main::@2 to main::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  kickasm() {{ inc $d020
         }}
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test inline KickAssembler code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // kickasm() {{ inc $d020          }}
    // KickAsm inline code
    inc $d020
        
    jmp __b1
}
  // File Data
// KickAsm data initializer
A:
.byte 1, 2, 3


REGISTER UPLIFT POTENTIAL REGISTERS

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 2620 combination 
Uplifting [] best 2620 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test inline KickAssembler code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // kickasm() {{ inc $d020          }}
    // KickAsm inline code
    inc $d020
        
    jmp __b1
}
  // File Data
// KickAsm data initializer
A:
.byte 1, 2, 3


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte*) A[]  = kickasm {{ .byte 1, 2, 3
 }}
(void()) main()
(label) main::@1



FINAL ASSEMBLER
Score: 2590

  // File Comments
// Test inline KickAssembler code
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // main::@1
  __b1:
    // kickasm
    // kickasm() {{ inc $d020          }}
    // KickAsm inline code
    inc $d020
        
    jmp __b1
}
  // File Data
// KickAsm data initializer
A:
.byte 1, 2, 3


