
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (byte) main::idx#0 ← (byte) 0
  (byte) main::a#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::idx#3 ← phi( main/(byte) main::idx#0 main::@3/(byte) main::idx#4 )
  (byte) main::a#4 ← phi( main/(byte) main::a#0 main::@3/(byte) main::a#1 )
  (byte) main::b#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) main::idx#2 ← phi( main::@1/(byte) main::idx#3 main::@2/(byte) main::idx#1 )
  (byte) main::b#2 ← phi( main::@1/(byte) main::b#0 main::@2/(byte) main::b#1 )
  (byte) main::a#2 ← phi( main::@1/(byte) main::a#4 main::@2/(byte) main::a#2 )
  (byte) main::c#0 ← (byte) main::a#2
  (byte) main::d#0 ← (byte) main::b#2
  (byte~) main::$0 ← (byte) main::b#2 + (byte) main::c#0
  (byte) main::e#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::d#0 + (byte) main::a#2
  (byte) main::f#0 ← (byte~) main::$1
  (byte~) main::$2 ← (byte) main::e#0 + (byte) main::f#0
  (byte) main::g#0 ← (byte~) main::$2
  *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) main::g#0
  (byte) main::idx#1 ← ++ (byte) main::idx#2
  (byte) main::b#1 ← (byte) main::b#2 + rangenext(0,5)
  (bool~) main::$3 ← (byte) main::b#1 != rangelast(0,5)
  if((bool~) main::$3) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::idx#4 ← phi( main::@2/(byte) main::idx#1 )
  (byte) main::a#3 ← phi( main::@2/(byte) main::a#2 )
  (byte) main::a#1 ← (byte) main::a#3 + rangenext(0,5)
  (bool~) main::$4 ← (byte) main::a#1 != rangelast(0,5)
  if((bool~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(bool~) main::$3
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::a#2
(byte) main::a#3
(byte) main::a#4
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#2
(byte) main::c
(byte) main::c#0
(byte) main::d
(byte) main::d#0
(byte) main::e
(byte) main::e#0
(byte) main::f
(byte) main::f#0
(byte) main::g
(byte) main::g#0
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::a#2 = main::c#0 main::a#3 
Alias main::d#0 = main::b#2 
Alias main::e#0 = main::$0 
Alias main::f#0 = main::$1 
Alias main::g#0 = main::$2 
Alias main::idx#1 = main::idx#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::a#2 (byte) main::a#4
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [9] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$3 [12] if((byte) main::b#1!=rangelast(0,5)) goto main::@2
Simple Condition (bool~) main::$4 [15] if((byte) main::a#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::a#0 = 0
Constant (const byte) main::b#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::b#1 ← ++ main::d#0 to ++
Resolved ranged comparison value [12] if(main::b#1!=rangelast(0,5)) goto main::@2 to (number) 6
Resolved ranged next value [13] main::a#1 ← ++ main::a#4 to ++
Resolved ranged comparison value [15] if(main::a#1!=rangelast(0,5)) goto main::@1 to (number) 6
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [8] if((byte) main::b#1!=(number) 6) goto main::@2
Adding number conversion cast (unumber) 6 in [10] if((byte) main::a#1!=(number) 6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::f#0 = main::e#0 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::a#0
Inlining constant with var siblings (const byte) main::b#0
Constant inlined main::a#0 = (byte) 0
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::b#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting main::@5(between main::@2 and main::@2)
Adding NOP phi() at start of main
CALL GRAPH

Created 4 initial phi equivalence classes
Coalesced [2] main::idx#6 ← main::idx#3
Coalesced [13] main::a#5 ← main::a#1
Coalesced [14] main::idx#5 ← main::idx#1
Coalesced [15] main::d#1 ← main::b#1
Coalesced (already) [16] main::idx#7 ← main::idx#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] (byte) main::idx#3 ← phi( main/(byte) 0 main::@3/(byte) main::idx#1 )
  [1] (byte) main::a#4 ← phi( main/(byte) 0 main::@3/(byte) main::a#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] (byte) main::idx#2 ← phi( main::@1/(byte) main::idx#3 main::@2/(byte) main::idx#1 )
  [2] (byte) main::d#0 ← phi( main::@1/(byte) 0 main::@2/(byte) main::b#1 )
  [3] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4
  [4] (byte) main::g#0 ← (byte) main::f#0 + (byte) main::f#0
  [5] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) main::g#0
  [6] (byte) main::idx#1 ← ++ (byte) main::idx#2
  [7] (byte) main::b#1 ← ++ (byte) main::d#0
  [8] if((byte) main::b#1!=(byte) 6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] (byte) main::a#1 ← ++ (byte) main::a#4
  [10] if((byte) main::a#1!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::a
(byte) main::a#1 16.5
(byte) main::a#4 15.375
(byte) main::b
(byte) main::b#1 151.5
(byte) main::c
(byte) main::d
(byte) main::d#0 60.599999999999994
(byte) main::e
(byte) main::f
(byte) main::f#0 303.0
(byte) main::g
(byte) main::g#0 202.0
(byte) main::idx
(byte) main::idx#1 42.599999999999994
(byte) main::idx#2 78.5
(byte) main::idx#3 22.0

Initial phi equivalence classes
[ main::a#4 main::a#1 ]
[ main::d#0 main::b#1 ]
[ main::idx#2 main::idx#3 main::idx#1 ]
Added variable main::f#0 to live range equivalence class [ main::f#0 ]
Added variable main::g#0 to live range equivalence class [ main::g#0 ]
Complete equivalence classes
[ main::a#4 main::a#1 ]
[ main::d#0 main::b#1 ]
[ main::idx#2 main::idx#3 main::idx#1 ]
[ main::f#0 ]
[ main::g#0 ]
Allocated zp[1]:2 [ main::a#4 main::a#1 ]
Allocated zp[1]:3 [ main::d#0 main::b#1 ]
Allocated zp[1]:4 [ main::idx#2 main::idx#3 main::idx#1 ]
Allocated zp[1]:5 [ main::f#0 ]
Allocated zp[1]:6 [ main::g#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests variable coalescing over assignments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label d = 3
    .label f = 5
    .label g = 6
    .label idx = 4
    .label b = 3
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [1] phi (byte) main::a#4 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi (byte) main::idx#3 = (byte) main::idx#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi (byte) main::a#4 = (byte) main::a#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi (byte) main::idx#2 = (byte) main::idx#3 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi (byte) main::d#0 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z d
    jmp __b2
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [2] phi (byte) main::idx#2 = (byte) main::idx#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [2] phi (byte) main::d#0 = (byte) main::b#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z d
    clc
    adc.z a
    sta.z f
    // [4] (byte) main::g#0 ← (byte) main::f#0 + (byte) main::f#0 -- vbuz1=vbuz2_plus_vbuz2 
    lda.z f
    asl
    sta.z g
    // [5] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) main::g#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z g
    ldy.z idx
    sta SCREEN,y
    // [6] (byte) main::idx#1 ← ++ (byte) main::idx#2 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [7] (byte) main::b#1 ← ++ (byte) main::d#0 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [8] if((byte) main::b#1!=(byte) 6) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z b
    bne __b2_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [9] (byte) main::a#1 ← ++ (byte) main::a#4 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [10] if((byte) main::a#1!=(byte) 6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z a
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4 [ main::a#4 main::d#0 main::idx#2 main::f#0 ] (  [ main::a#4 main::d#0 main::idx#2 main::f#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::a#4 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::d#0 main::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::idx#2 main::idx#3 main::idx#1 ]
Statement [4] (byte) main::g#0 ← (byte) main::f#0 + (byte) main::f#0 [ main::a#4 main::d#0 main::idx#2 main::g#0 ] (  [ main::a#4 main::d#0 main::idx#2 main::g#0 ] { }  ) always clobbers reg byte a 
Statement [3] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4 [ main::a#4 main::d#0 main::idx#2 main::f#0 ] (  [ main::a#4 main::d#0 main::idx#2 main::f#0 ] { }  ) always clobbers reg byte a 
Statement [4] (byte) main::g#0 ← (byte) main::f#0 + (byte) main::f#0 [ main::a#4 main::d#0 main::idx#2 main::g#0 ] (  [ main::a#4 main::d#0 main::idx#2 main::g#0 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::a#4 main::a#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::d#0 main::b#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::idx#2 main::idx#3 main::idx#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::f#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::g#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 303: zp[1]:5 [ main::f#0 ] 212.1: zp[1]:3 [ main::d#0 main::b#1 ] 202: zp[1]:6 [ main::g#0 ] 143.1: zp[1]:4 [ main::idx#2 main::idx#3 main::idx#1 ] 31.88: zp[1]:2 [ main::a#4 main::a#1 ] 
Uplift Scope [] 

Uplifting [main] best 3641 combination reg byte a [ main::f#0 ] reg byte y [ main::d#0 main::b#1 ] reg byte a [ main::g#0 ] reg byte x [ main::idx#2 main::idx#3 main::idx#1 ] zp[1]:2 [ main::a#4 main::a#1 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [] best 3641 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::a#4 main::a#1 ]
Uplifting [main] best 3641 combination zp[1]:2 [ main::a#4 main::a#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests variable coalescing over assignments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi (byte) main::a#4 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi (byte) main::idx#3 = (byte) main::idx#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi (byte) main::a#4 = (byte) main::a#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi (byte) main::idx#2 = (byte) main::idx#3 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi (byte) main::d#0 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [2] phi (byte) main::idx#2 = (byte) main::idx#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [2] phi (byte) main::d#0 = (byte) main::b#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4 -- vbuaa=vbuyy_plus_vbuz1 
    tya
    clc
    adc.z a
    // [4] (byte) main::g#0 ← (byte) main::f#0 + (byte) main::f#0 -- vbuaa=vbuaa_plus_vbuaa 
    asl
    // [5] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) main::g#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [6] (byte) main::idx#1 ← ++ (byte) main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] (byte) main::b#1 ← ++ (byte) main::d#0 -- vbuyy=_inc_vbuyy 
    iny
    // [8] if((byte) main::b#1!=(byte) 6) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b2_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [9] (byte) main::a#1 ← ++ (byte) main::a#4 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [10] if((byte) main::a#1!=(byte) 6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z a
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(byte) main::a
(byte) main::a#1 a zp[1]:2 16.5
(byte) main::a#4 a zp[1]:2 15.375
(byte) main::b
(byte) main::b#1 reg byte y 151.5
(byte) main::c
(byte) main::d
(byte) main::d#0 reg byte y 60.599999999999994
(byte) main::e
(byte) main::f
(byte) main::f#0 reg byte a 303.0
(byte) main::g
(byte) main::g#0 reg byte a 202.0
(byte) main::idx
(byte) main::idx#1 reg byte x 42.599999999999994
(byte) main::idx#2 reg byte x 78.5
(byte) main::idx#3 reg byte x 22.0

zp[1]:2 [ main::a#4 main::a#1 ]
reg byte y [ main::d#0 main::b#1 ]
reg byte x [ main::idx#2 main::idx#3 main::idx#1 ]
reg byte a [ main::f#0 ]
reg byte a [ main::g#0 ]


FINAL ASSEMBLER
Score: 2651

  // File Comments
// Tests variable coalescing over assignments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi (byte) main::a#4 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z a
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi (byte) main::idx#3 = (byte) main::idx#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi (byte) main::a#4 = (byte) main::a#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [2] phi (byte) main::idx#2 = (byte) main::idx#3 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi (byte) main::d#0 = (byte) 0 [phi:main::@1->main::@2#1] -- vbuyy=vbuc1 
    ldy #0
    // [2] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [2] phi (byte) main::idx#2 = (byte) main::idx#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [2] phi (byte) main::d#0 = (byte) main::b#1 [phi:main::@2->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // e = b+c
    // [3] (byte) main::f#0 ← (byte) main::d#0 + (byte) main::a#4 -- vbuaa=vbuyy_plus_vbuz1 
    tya
    clc
    adc.z a
    // g = e+f
    // [4] (byte) main::g#0 ← (byte) main::f#0 + (byte) main::f#0 -- vbuaa=vbuaa_plus_vbuaa 
    asl
    // SCREEN[idx++] = g
    // [5] *((const nomodify byte*) main::SCREEN + (byte) main::idx#2) ← (byte) main::g#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = g;
    // [6] (byte) main::idx#1 ← ++ (byte) main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( byte b: 0..5)
    // [7] (byte) main::b#1 ← ++ (byte) main::d#0 -- vbuyy=_inc_vbuyy 
    iny
    // [8] if((byte) main::b#1!=(byte) 6) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b2
    // main::@3
    // for( byte a: 0..5)
    // [9] (byte) main::a#1 ← ++ (byte) main::a#4 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [10] if((byte) main::a#1!=(byte) 6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z a
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data

