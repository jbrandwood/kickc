
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::b#0 = 0
  main::i#0 = 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::b#3 = phi( main/main::b#0, main::@2/main::b#1 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $a
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::b#1 = main::SCREEN[main::i#3]
  main::i#1 = ++ main::i#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  main::b#2 = phi( main::@1/main::b#3 )
  main::SCREEN[$3e7] = main::b#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
const byte* main::SCREEN[$400]  = (byte*)$400
byte main::b
byte main::b#0
byte main::b#1
byte main::b#2
byte main::b#3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3

Adding number conversion cast (unumber) $a in main::$0 = main::i#2 < $a
Adding number conversion cast (unumber) $3e7 in main::SCREEN[$3e7] = main::b#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $a
Simplifying constant integer cast $3e7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Finalized unsigned number type (word) $3e7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Alias main::b#2 = main::b#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(main::i#2<$a) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::b#0 = 0
Constant main::i#0 = 2
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [7] main::SCREEN[$3e7] = main::b#2
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [4] main::$1 = main::SCREEN + $3e7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$1 = main::SCREEN+$3e7
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings main::b#0
Inlining constant with var siblings main::i#0
Constant inlined main::$1 = main::SCREEN+$3e7
Constant inlined main::i#0 = 2
Constant inlined main::b#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (word) $400
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [7] main::i#4 = main::i#1
Coalesced [8] main::b#4 = main::b#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::b#2 = phi( main/0, main::@2/main::b#1 )
  [1] main::i#2 = phi( main/2, main::@2/main::i#1 )
  [2] if(main::i#2<$a) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *(main::SCREEN+$3e7) = main::b#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] main::b#1 = main::SCREEN[main::i#2]
  [6] main::i#1 = ++ main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::b
byte main::b#1 11.0
byte main::b#2 6.5
byte main::i
byte main::i#1 22.0
byte main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::b#2 main::b#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::b#2 main::b#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::b#2 main::b#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::b#2 main::b#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 36.67: zp[1]:2 [ main::i#2 main::i#1 ] 17.5: zp[1]:3 [ main::b#2 main::b#1 ] 
Uplift Scope [] 

Uplifting [main] best 253 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::b#2 main::b#1 ] 
Uplifting [] best 253 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test all types of pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // A constant pointer
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::b#2 = 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [1] phi main::i#2 = 2 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #2
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$a) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *(main::SCREEN+$3e7) = main::b#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$3e7
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] main::b#1 = main::SCREEN[main::i#2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda SCREEN,x
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::b#2 = main::b#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::SCREEN[$400]  = (byte*) 1024
byte main::b
byte main::b#1 reg byte a 11.0
byte main::b#2 reg byte a 6.5
byte main::i
byte main::i#1 reg byte x 22.0
byte main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::b#2 main::b#1 ]


FINAL ASSEMBLER
Score: 190

  // File Comments
// Test all types of pointers
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // A constant pointer
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::b#2 = 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [1] phi main::i#2 = 2 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #2
    // main::@1
  __b1:
    // while(i<10)
    // [2] if(main::i#2<$a) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b2
    // main::@3
    // SCREEN[999] = b
    // [3] *(main::SCREEN+$3e7) = main::b#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$3e7
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // b = SCREEN[i++]
    // [5] main::b#1 = main::SCREEN[main::i#2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda SCREEN,x
    // b = SCREEN[i++];
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::b#2 = main::b#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

