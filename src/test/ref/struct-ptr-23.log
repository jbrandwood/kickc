Fixing struct type size struct Person to 5
Fixing struct type size struct Person to 5
Fixing struct type size struct Person to 5
Fixing struct type SIZE_OF struct Person to 5
Fixing struct type SIZE_OF struct Person to 5
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#20 = phi( __start::@1/idx#21 )
  main::person#0 = persons
  print_person::person#0 = main::person#0
  call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  main::person#2 = phi( main/main::person#0 )
  idx#13 = phi( main/idx#9 )
  idx#0 = idx#13
  main::person#1 = main::person#2 + SIZEOF_STRUCT_PERSON
  print_person::person#1 = main::person#1
  call print_person 
  to:main::@2
main::@2: scope:[main]  from main::@1
  idx#14 = phi( main::@1/idx#9 )
  idx#1 = idx#14
  to:main::@return
main::@return: scope:[main]  from main::@2
  idx#15 = phi( main::@2/idx#1 )
  idx#2 = idx#15
  return 
  to:@return

void print_person(struct Person* print_person::person)
print_person: scope:[print_person]  from main main::@1
  idx#16 = phi( main/idx#20, main::@1/idx#0 )
  print_person::person#2 = phi( main/print_person::person#0, main::@1/print_person::person#1 )
  print_person::$5 = (byte*)print_person::person#2
  print_person::$1 = print_person::$5 + OFFSET_STRUCT_PERSON_ID
  print_person::$0 = '0' + *print_person::$1
  SCREEN[idx#16] = print_person::$0
  idx#3 = ++ idx#16
  SCREEN[idx#3] = ' '
  idx#4 = ++ idx#3
  print_person::$6 = (byte*)print_person::person#2
  print_person::$2 = print_person::$6 + OFFSET_STRUCT_PERSON_INITIALS
  SCREEN[idx#4] = print_person::$2[0]
  idx#5 = ++ idx#4
  print_person::$7 = (byte*)print_person::person#2
  print_person::$3 = print_person::$7 + OFFSET_STRUCT_PERSON_INITIALS
  SCREEN[idx#5] = print_person::$3[1]
  idx#6 = ++ idx#5
  print_person::$8 = (byte*)print_person::person#2
  print_person::$4 = print_person::$8 + OFFSET_STRUCT_PERSON_INITIALS
  SCREEN[idx#6] = print_person::$4[2]
  idx#7 = ++ idx#6
  SCREEN[idx#7] = ' '
  idx#8 = ++ idx#7
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person
  idx#17 = phi( print_person/idx#8 )
  idx#9 = idx#17
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#10 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#21 = phi( __start::__init1/idx#10 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#18 = phi( __start::@1/idx#2 )
  idx#11 = idx#18
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#19 = phi( __start::@2/idx#11 )
  idx#12 = idx#19
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_PERSON_ID = 0
const byte OFFSET_STRUCT_PERSON_INITIALS = 1
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_STRUCT_PERSON = 5
void __start()
byte idx
byte idx#0
byte idx#1
byte idx#10
byte idx#11
byte idx#12
byte idx#13
byte idx#14
byte idx#15
byte idx#16
byte idx#17
byte idx#18
byte idx#19
byte idx#2
byte idx#20
byte idx#21
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
struct Person* main::person
struct Person* main::person#0
struct Person* main::person#1
struct Person* main::person#2
const struct Person* persons[]  = { { id: 1, initials: "jgr" }, { id: 8, initials: "hbg" } }
void print_person(struct Person* print_person::person)
byte~ print_person::$0
byte*~ print_person::$1
byte*~ print_person::$2
byte*~ print_person::$3
byte*~ print_person::$4
byte*~ print_person::$5
byte*~ print_person::$6
byte*~ print_person::$7
byte*~ print_person::$8
struct Person* print_person::person
struct Person* print_person::person#0
struct Person* print_person::person#1
struct Person* print_person::person#2

Adding number conversion cast (unumber) 0 in SCREEN[idx#4] = print_person::$2[0]
Adding number conversion cast (unumber) 1 in SCREEN[idx#5] = print_person::$3[1]
Adding number conversion cast (unumber) 2 in SCREEN[idx#6] = print_person::$4[2]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::person#0 = main::person#2 
Alias idx#0 = idx#13 
Alias idx#1 = idx#14 idx#15 idx#2 
Alias idx#17 = idx#8 idx#9 
Alias idx#10 = idx#21 
Alias idx#11 = idx#18 idx#19 idx#12 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#20 idx#10
Identical Phi Values idx#0 idx#17
Identical Phi Values idx#1 idx#17
Identical Phi Values idx#11 idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant main::person#0 = persons
Constant idx#10 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant print_person::person#0 = main::person#0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [13] print_person::$0 = '0' + *print_person::$1  -- print_person::$5[OFFSET_STRUCT_PERSON_ID]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero print_person::$5 in [12] print_person::$1 = print_person::$5 + OFFSET_STRUCT_PERSON_ID
Simplifying expression containing zero print_person::$5 in [13] print_person::$0 = '0' + print_person::$5[OFFSET_STRUCT_PERSON_ID]
Simplifying expression containing zero print_person::$2 in [20] SCREEN[idx#4] = print_person::$2[0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable print_person::$1 and assignment [7] print_person::$1 = print_person::$5
Eliminating unused constant OFFSET_STRUCT_PERSON_ID
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [1] main::person#1 = main::person#0 + SIZEOF_STRUCT_PERSON
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::person#1 = main::person#0+SIZEOF_STRUCT_PERSON
Successful SSA optimization Pass2ConstantIdentification
Constant print_person::person#1 = main::person#1
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [14] SCREEN[idx#4] = *print_person::$2  -- print_person::$6[OFFSET_STRUCT_PERSON_INITIALS]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable print_person::$2 and assignment [11] print_person::$2 = print_person::$6 + OFFSET_STRUCT_PERSON_INITIALS
Successful SSA optimization PassNEliminateUnusedVars
Inlining Noop Cast [4] print_person::$5 = (byte*)print_person::person#2 keeping print_person::person#2
Inlining Noop Cast [10] print_person::$6 = (byte*)print_person::person#2 keeping print_person::person#2
Inlining Noop Cast [13] print_person::$7 = (byte*)print_person::person#2 keeping print_person::person#2
Inlining Noop Cast [17] print_person::$8 = (byte*)print_person::person#2 keeping print_person::person#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with different constant siblings main::person#0
Inlining constant with var siblings print_person::person#0
Inlining constant with var siblings print_person::person#1
Inlining constant with var siblings idx#10
Constant inlined idx#10 = 0
Constant inlined print_person::person#0 = persons
Constant inlined main::person#0 = persons
Constant inlined print_person::person#1 = main::person#1
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type 4
Finalized unsigned number type 4
Successful SSA optimization Pass2FinalizeAllNumbers
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print_person:1 print_person:3 

Created 2 initial phi equivalence classes
Coalesced [2] idx#22 = idx#17
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_person 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print_person(struct Person* print_person::person)
print_person: scope:[print_person]  from main main::@1
  [5] idx#16 = phi( main/0, main::@1/idx#17 )
  [5] print_person::person#2 = phi( main/persons, main::@1/main::person#1 )
  [6] print_person::$0 = '0' + *((byte*)print_person::person#2)
  [7] SCREEN[idx#16] = print_person::$0
  [8] idx#3 = ++ idx#16
  [9] SCREEN[idx#3] = ' '
  [10] idx#4 = ++ idx#3
  [11] SCREEN[idx#4] = ((byte*)print_person::person#2)[OFFSET_STRUCT_PERSON_INITIALS]
  [12] idx#5 = ++ idx#4
  [13] print_person::$3 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS
  [14] SCREEN[idx#5] = print_person::$3[1]
  [15] idx#6 = ++ idx#5
  [16] print_person::$4 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS
  [17] SCREEN[idx#6] = print_person::$4[2]
  [18] idx#7 = ++ idx#6
  [19] SCREEN[idx#7] = ' '
  [20] idx#17 = ++ idx#7
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person
  [21] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
byte idx#16 8.0
byte idx#17 3.25
byte idx#3 16.5
byte idx#4 16.5
byte idx#5 11.0
byte idx#6 11.0
byte idx#7 16.5
void main()
struct Person* main::person
void print_person(struct Person* print_person::person)
byte~ print_person::$0 22.0
byte*~ print_person::$3 22.0
byte*~ print_person::$4 22.0
struct Person* print_person::person
struct Person* print_person::person#2

Initial phi equivalence classes
[ print_person::person#2 ]
[ idx#16 idx#17 ]
Added variable print_person::$0 to live range equivalence class [ print_person::$0 ]
Added variable idx#3 to live range equivalence class [ idx#3 ]
Added variable idx#4 to live range equivalence class [ idx#4 ]
Added variable idx#5 to live range equivalence class [ idx#5 ]
Added variable print_person::$3 to live range equivalence class [ print_person::$3 ]
Added variable idx#6 to live range equivalence class [ idx#6 ]
Added variable print_person::$4 to live range equivalence class [ print_person::$4 ]
Added variable idx#7 to live range equivalence class [ idx#7 ]
Complete equivalence classes
[ print_person::person#2 ]
[ idx#16 idx#17 ]
[ print_person::$0 ]
[ idx#3 ]
[ idx#4 ]
[ idx#5 ]
[ print_person::$3 ]
[ idx#6 ]
[ print_person::$4 ]
[ idx#7 ]
Allocated zp[2]:2 [ print_person::person#2 ]
Allocated zp[1]:4 [ idx#16 idx#17 ]
Allocated zp[1]:5 [ print_person::$0 ]
Allocated zp[1]:6 [ idx#3 ]
Allocated zp[1]:7 [ idx#4 ]
Allocated zp[1]:8 [ idx#5 ]
Allocated zp[2]:9 [ print_person::$3 ]
Allocated zp[1]:11 [ idx#6 ]
Allocated zp[2]:12 [ print_person::$4 ]
Allocated zp[1]:14 [ idx#7 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] print_person::$0 = '0' + *((byte*)print_person::person#2) [ print_person::person#2 idx#16 print_person::$0 ] ( print_person:1 [ print_person::person#2 idx#16 print_person::$0 ] { }  print_person:3 [ print_person::person#2 idx#16 print_person::$0 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ idx#16 idx#17 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ idx#16 idx#17 ]
Statement [9] SCREEN[idx#3] = ' ' [ print_person::person#2 idx#3 ] ( print_person:1 [ print_person::person#2 idx#3 ] { }  print_person:3 [ print_person::person#2 idx#3 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ idx#3 ]
Statement [11] SCREEN[idx#4] = ((byte*)print_person::person#2)[OFFSET_STRUCT_PERSON_INITIALS] [ print_person::person#2 idx#4 ] ( print_person:1 [ print_person::person#2 idx#4 ] { }  print_person:3 [ print_person::person#2 idx#4 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ idx#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ idx#4 ]
Statement [13] print_person::$3 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS [ print_person::person#2 idx#5 print_person::$3 ] ( print_person:1 [ print_person::person#2 idx#5 print_person::$3 ] { }  print_person:3 [ print_person::person#2 idx#5 print_person::$3 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ idx#5 ]
Statement [14] SCREEN[idx#5] = print_person::$3[1] [ print_person::person#2 idx#5 ] ( print_person:1 [ print_person::person#2 idx#5 ] { }  print_person:3 [ print_person::person#2 idx#5 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ idx#5 ]
Statement [16] print_person::$4 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS [ idx#6 print_person::$4 ] ( print_person:1 [ idx#6 print_person::$4 ] { }  print_person:3 [ idx#6 print_person::$4 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ idx#6 ]
Statement [17] SCREEN[idx#6] = print_person::$4[2] [ idx#6 ] ( print_person:1 [ idx#6 ] { }  print_person:3 [ idx#6 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:11 [ idx#6 ]
Statement [19] SCREEN[idx#7] = ' ' [ idx#7 ] ( print_person:1 [ idx#7 ] { }  print_person:3 [ idx#7 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ idx#7 ]
Statement [6] print_person::$0 = '0' + *((byte*)print_person::person#2) [ print_person::person#2 idx#16 print_person::$0 ] ( print_person:1 [ print_person::person#2 idx#16 print_person::$0 ] { }  print_person:3 [ print_person::person#2 idx#16 print_person::$0 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [9] SCREEN[idx#3] = ' ' [ print_person::person#2 idx#3 ] ( print_person:1 [ print_person::person#2 idx#3 ] { }  print_person:3 [ print_person::person#2 idx#3 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Statement [11] SCREEN[idx#4] = ((byte*)print_person::person#2)[OFFSET_STRUCT_PERSON_INITIALS] [ print_person::person#2 idx#4 ] ( print_person:1 [ print_person::person#2 idx#4 ] { }  print_person:3 [ print_person::person#2 idx#4 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [13] print_person::$3 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS [ print_person::person#2 idx#5 print_person::$3 ] ( print_person:1 [ print_person::person#2 idx#5 print_person::$3 ] { }  print_person:3 [ print_person::person#2 idx#5 print_person::$3 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Statement [14] SCREEN[idx#5] = print_person::$3[1] [ print_person::person#2 idx#5 ] ( print_person:1 [ print_person::person#2 idx#5 ] { }  print_person:3 [ print_person::person#2 idx#5 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [16] print_person::$4 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS [ idx#6 print_person::$4 ] ( print_person:1 [ idx#6 print_person::$4 ] { }  print_person:3 [ idx#6 print_person::$4 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Statement [17] SCREEN[idx#6] = print_person::$4[2] [ idx#6 ] ( print_person:1 [ idx#6 ] { }  print_person:3 [ idx#6 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [19] SCREEN[idx#7] = ' ' [ idx#7 ] ( print_person:1 [ idx#7 ] { }  print_person:3 [ idx#7 ] { { idx#16 = idx#17 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ print_person::person#2 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ idx#16 idx#17 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ print_person::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ idx#3 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ idx#4 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ idx#5 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ print_person::$3 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ idx#6 ] : zp[1]:11 , reg byte x , 
Potential registers zp[2]:12 [ print_person::$4 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ idx#7 ] : zp[1]:14 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 16.5: zp[1]:6 [ idx#3 ] 16.5: zp[1]:7 [ idx#4 ] 16.5: zp[1]:14 [ idx#7 ] 11.25: zp[1]:4 [ idx#16 idx#17 ] 11: zp[1]:8 [ idx#5 ] 11: zp[1]:11 [ idx#6 ] 
Uplift Scope [print_person] 22: zp[1]:5 [ print_person::$0 ] 22: zp[2]:9 [ print_person::$3 ] 22: zp[2]:12 [ print_person::$4 ] 0: zp[2]:2 [ print_person::person#2 ] 
Uplift Scope [Person] 
Uplift Scope [main] 

Uplifting [] best 184 combination reg byte x [ idx#3 ] reg byte x [ idx#4 ] reg byte x [ idx#7 ] reg byte x [ idx#16 idx#17 ] reg byte x [ idx#5 ] zp[1]:11 [ idx#6 ] 
Limited combination testing to 100 combinations of 144 possible.
Uplifting [print_person] best 178 combination reg byte a [ print_person::$0 ] zp[2]:9 [ print_person::$3 ] zp[2]:12 [ print_person::$4 ] zp[2]:2 [ print_person::person#2 ] 
Uplifting [Person] best 178 combination 
Uplifting [main] best 178 combination 
Attempting to uplift remaining variables inzp[1]:11 [ idx#6 ]
Uplifting [] best 169 combination reg byte x [ idx#6 ] 
Coalescing zero page register [ zp[2]:2 [ print_person::person#2 ] ] with [ zp[2]:12 [ print_person::$4 ] ] - score: 1
Allocated (was zp[2]:9) zp[2]:4 [ print_person::$3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_PERSON = 5
  .const OFFSET_STRUCT_PERSON_INITIALS = 1
  .label SCREEN = $400
  // main
main: {
    .label person = persons+SIZEOF_STRUCT_PERSON
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
  print_person_from_main:
    // [5] phi idx#16 = 0 [phi:main->print_person#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi print_person::person#2 = persons [phi:main->print_person#1] -- pssz1=pssc1 
    lda #<persons
    sta.z print_person.person
    lda #>persons
    sta.z print_person.person+1
    jsr print_person
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
  print_person_from___b1:
    // [5] phi idx#16 = idx#17 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi print_person::person#2 = main::person#1 [phi:main::@1->print_person#1] -- pssz1=pssc1 
    lda #<person
    sta.z print_person.person
    lda #>person
    sta.z print_person.person+1
    jsr print_person
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_person
// print_person(struct Person* zp(2) person)
print_person: {
    .label __3 = 4
    .label __4 = 2
    .label person = 2
    // [6] print_person::$0 = '0' + *((byte*)print_person::person#2) -- vbuaa=vbuc1_plus__deref_pbuz1 
    lda #'0'
    clc
    ldy #0
    adc (person),y
    // [7] SCREEN[idx#16] = print_person::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [8] idx#3 = ++ idx#16 -- vbuxx=_inc_vbuxx 
    inx
    // [9] SCREEN[idx#3] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [10] idx#4 = ++ idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [11] SCREEN[idx#4] = ((byte*)print_person::person#2)[OFFSET_STRUCT_PERSON_INITIALS] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PERSON_INITIALS
    lda (person),y
    sta SCREEN,x
    // [12] idx#5 = ++ idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // [13] print_person::$3 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_INITIALS
    clc
    adc.z person
    sta.z __3
    lda #0
    adc.z person+1
    sta.z __3+1
    // [14] SCREEN[idx#5] = print_person::$3[1] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #1
    lda (__3),y
    sta SCREEN,x
    // [15] idx#6 = ++ idx#5 -- vbuxx=_inc_vbuxx 
    inx
    // [16] print_person::$4 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS -- pbuz1=pbuz1_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_INITIALS
    clc
    adc.z __4
    sta.z __4
    bcc !+
    inc.z __4+1
  !:
    // [17] SCREEN[idx#6] = print_person::$4[2] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #2
    lda (__4),y
    sta SCREEN,x
    // [18] idx#7 = ++ idx#6 -- vbuxx=_inc_vbuxx 
    inx
    // [19] SCREEN[idx#7] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [20] idx#17 = ++ idx#7 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // print_person::@return
  __breturn:
    // [21] return 
    rts
}
  // File Data
  persons: .byte 1
  .text "jgr"
  .byte 0, 8
  .text "hbg"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #OFFSET_STRUCT_PERSON_INITIALS with TYA
Removing instruction __b1_from_main:
Removing instruction print_person_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_person_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_PERSON_INITIALS = 1
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_STRUCT_PERSON = 5
byte idx
byte idx#16 reg byte x 8.0
byte idx#17 reg byte x 3.25
byte idx#3 reg byte x 16.5
byte idx#4 reg byte x 16.5
byte idx#5 reg byte x 11.0
byte idx#6 reg byte x 11.0
byte idx#7 reg byte x 16.5
void main()
struct Person* main::person
const struct Person* main::person#1 person = persons+SIZEOF_STRUCT_PERSON
const struct Person* persons[]  = { { id: 1, initials: "jgr" }, { id: 8, initials: "hbg" } }
void print_person(struct Person* print_person::person)
byte~ print_person::$0 reg byte a 22.0
byte*~ print_person::$3 zp[2]:4 22.0
byte*~ print_person::$4 zp[2]:2 22.0
struct Person* print_person::person
struct Person* print_person::person#2 person zp[2]:2

zp[2]:2 [ print_person::person#2 print_person::$4 ]
reg byte x [ idx#16 idx#17 ]
reg byte a [ print_person::$0 ]
reg byte x [ idx#3 ]
reg byte x [ idx#4 ]
reg byte x [ idx#5 ]
zp[2]:4 [ print_person::$3 ]
reg byte x [ idx#6 ]
reg byte x [ idx#7 ]


FINAL ASSEMBLER
Score: 159

  // File Comments
// Example of a struct containing an array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_PERSON = 5
  .const OFFSET_STRUCT_PERSON_INITIALS = 1
  .label SCREEN = $400
  // main
main: {
    .label person = persons+SIZEOF_STRUCT_PERSON
    // print_person(person)
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
    // [5] phi idx#16 = 0 [phi:main->print_person#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi print_person::person#2 = persons [phi:main->print_person#1] -- pssz1=pssc1 
    lda #<persons
    sta.z print_person.person
    lda #>persons
    sta.z print_person.person+1
    jsr print_person
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_person(person)
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
    // [5] phi idx#16 = idx#17 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi print_person::person#2 = main::person#1 [phi:main::@1->print_person#1] -- pssz1=pssc1 
    lda #<person
    sta.z print_person.person
    lda #>person
    sta.z print_person.person+1
    jsr print_person
    // main::@return
    // }
    // [4] return 
    rts
}
  // print_person
// print_person(struct Person* zp(2) person)
print_person: {
    .label __3 = 4
    .label __4 = 2
    .label person = 2
    // '0'+person->id
    // [6] print_person::$0 = '0' + *((byte*)print_person::person#2) -- vbuaa=vbuc1_plus__deref_pbuz1 
    lda #'0'
    clc
    ldy #0
    adc (person),y
    // SCREEN[idx++] = '0'+person->id
    // [7] SCREEN[idx#16] = print_person::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = '0'+person->id;
    // [8] idx#3 = ++ idx#16 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [9] SCREEN[idx#3] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [10] idx#4 = ++ idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = person->initials[0]
    // [11] SCREEN[idx#4] = ((byte*)print_person::person#2)[OFFSET_STRUCT_PERSON_INITIALS] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PERSON_INITIALS
    lda (person),y
    sta SCREEN,x
    // SCREEN[idx++] = person->initials[0];
    // [12] idx#5 = ++ idx#4 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = person->initials[1]
    // [13] print_person::$3 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS -- pbuz1=pbuz2_plus_vbuc1 
    tya
    clc
    adc.z person
    sta.z __3
    lda #0
    adc.z person+1
    sta.z __3+1
    // [14] SCREEN[idx#5] = print_person::$3[1] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #1
    lda (__3),y
    sta SCREEN,x
    // SCREEN[idx++] = person->initials[1];
    // [15] idx#6 = ++ idx#5 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = person->initials[2]
    // [16] print_person::$4 = (byte*)print_person::person#2 + OFFSET_STRUCT_PERSON_INITIALS -- pbuz1=pbuz1_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_INITIALS
    clc
    adc.z __4
    sta.z __4
    bcc !+
    inc.z __4+1
  !:
    // [17] SCREEN[idx#6] = print_person::$4[2] -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuc2 
    ldy #2
    lda (__4),y
    sta SCREEN,x
    // SCREEN[idx++] = person->initials[2];
    // [18] idx#7 = ++ idx#6 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [19] SCREEN[idx#7] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [20] idx#17 = ++ idx#7 -- vbuxx=_inc_vbuxx 
    inx
    // print_person::@return
    // }
    // [21] return 
    rts
}
  // File Data
  persons: .byte 1
  .text "jgr"
  .byte 0, 8
  .text "hbg"
  .byte 0

