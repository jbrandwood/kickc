
(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte) render_screen_showing ← (byte) 0
  [2] (volatile dword) score_bcd ← (dword) 0
  [3] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  [4] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS+(byte) $15
  to:_start::_init1_toSpritePtr1
_start::_init1_toSpritePtr1: scope:[_start]  from _start::_init1
  [5] phi()
  to:_start::_init1_@1
_start::_init1_@1: scope:[_start]  from _start::_init1_toSpritePtr1
  [6] (volatile byte) irq_sprite_ptr ← (const byte) _start::_init1_toSpritePtr1_return#0+(byte) 3
  [7] (volatile byte) irq_cnt ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1_@1
  [8] phi()
  [9] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [10] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [11] phi()
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main
  [12] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff
  [13] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:main::@8
main::@8: scope:[main]  from main::sid_rnd_init1
  asm { sei  }
  [15] call render_init 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [16] phi()
  [17] call sprites_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [18] phi()
  [19] call sprites_irq_init 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [20] phi()
  [21] call play_init 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [22] phi()
  [23] call play_spawn_current 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [24] phi()
  [25] call play_spawn_current 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [26] phi()
  [27] call render_playfield 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [28] (byte) current_ypos#97 ← (byte) current_ypos#5
  [29] (byte) current_xpos#118 ← (byte) current_xpos#100
  [30] (byte*) current_piece_gfx#111 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [31] (byte) current_piece_char#99 ← (byte) current_piece_char#4
  [32] call render_moving 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [33] (byte) next_piece_idx#79 ← (byte) play_spawn_current::piece_idx#2
  [34] call render_next 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [35] (byte*) current_piece#103 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [36] (byte*) current_piece_gfx#122 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  to:main::@1
main::@1: scope:[main]  from main::@17 main::@25 main::@6
  [37] (byte) level_bcd#10 ← phi( main::@17/(byte) 0 main::@25/(byte) level_bcd#18 main::@6/(byte) level_bcd#18 )
  [37] (byte) level#25 ← phi( main::@17/(byte) 0 main::@25/(byte) level#18 main::@6/(byte) level#18 )
  [37] (word) lines_bcd#20 ← phi( main::@17/(word) 0 main::@25/(word) lines_bcd#16 main::@6/(word) lines_bcd#16 )
  [37] (byte) current_movedown_counter#17 ← phi( main::@17/(byte) 0 main::@25/(byte) current_movedown_counter#15 main::@6/(byte) current_movedown_counter#15 )
  [37] (byte) keyboard_events_size#20 ← phi( main::@17/(byte) 0 main::@25/(byte) keyboard_events_size#17 main::@6/(byte) keyboard_events_size#17 )
  [37] (byte) next_piece_idx#23 ← phi( main::@17/(byte) play_spawn_current::piece_idx#2 main::@25/(byte) next_piece_idx#17 main::@6/(byte) next_piece_idx#17 )
  [37] (byte) game_over#22 ← phi( main::@17/(byte) game_over#53 main::@25/(byte) game_over#16 main::@6/(byte) game_over#16 )
  [37] (byte) current_ypos#10 ← phi( main::@17/(byte) current_ypos#5 main::@25/(byte) current_ypos#20 main::@6/(byte) current_ypos#20 )
  [37] (byte) current_xpos#13 ← phi( main::@17/(byte) current_xpos#100 main::@25/(byte) current_xpos#2 main::@6/(byte) current_xpos#2 )
  [37] (byte*) current_piece_gfx#12 ← phi( main::@17/(byte*) current_piece_gfx#122 main::@25/(byte*) current_piece_gfx#19 main::@6/(byte*) current_piece_gfx#19 )
  [37] (byte) current_orientation#12 ← phi( main::@17/(byte) 0 main::@25/(byte) current_orientation#18 main::@6/(byte) current_orientation#18 )
  [37] (byte) current_piece_char#23 ← phi( main::@17/(byte) current_piece_char#4 main::@25/(byte) current_piece_char#17 main::@6/(byte) current_piece_char#17 )
  [37] (byte*) current_piece#23 ← phi( main::@17/(byte*) current_piece#103 main::@25/(byte*) current_piece#16 main::@6/(byte*) current_piece#16 )
  [37] (byte) current_movedown_slow#13 ← phi( main::@17/(byte) current_movedown_slow#0 main::@25/(byte) current_movedown_slow#22 main::@6/(byte) current_movedown_slow#22 )
  [37] (byte) render_screen_render#19 ← phi( main::@17/(byte) $20 main::@25/(byte) render_screen_render#12 main::@6/(byte) render_screen_render#19 )
  [37] (byte) render_screen_show#17 ← phi( main::@17/(byte) 0 main::@25/(byte) render_screen_show#14 main::@6/(byte) render_screen_show#17 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [38] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [39] phi()
  [40] call render_show 
  to:main::@18
main::@18: scope:[main]  from main::@3
  [41] phi()
  [42] call keyboard_event_scan 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [43] phi()
  [44] call keyboard_event_get 
  [45] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@20
main::@20: scope:[main]  from main::@19
  [46] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [47] if((byte) game_over#22==(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@20 main::@5
  [48] *((const nomodify byte*) BORDER_COLOR) ← ++ *((const nomodify byte*) BORDER_COLOR)
  to:main::@5
main::@4: scope:[main]  from main::@20
  [49] (byte) play_movement::key_event#0 ← (byte) main::key_event#0
  [50] call play_movement 
  [51] (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@21
main::@21: scope:[main]  from main::@4
  [52] (byte) main::render#1 ← (byte) play_movement::return#3
  to:main::@6
main::@6: scope:[main]  from main::@21
  [53] if((byte) main::render#1==(byte) 0) goto main::@1
  to:main::@7
main::@7: scope:[main]  from main::@6
  [54] (byte) render_screen_render#63 ← (byte) render_screen_render#19
  [55] call render_playfield 
  to:main::@22
main::@22: scope:[main]  from main::@7
  [56] (byte) current_ypos#98 ← (byte) current_ypos#20
  [57] (byte) render_screen_render#64 ← (byte) render_screen_render#19
  [58] (byte) current_xpos#119 ← (byte) current_xpos#2
  [59] (byte*) current_piece_gfx#112 ← (byte*) current_piece_gfx#19
  [60] (byte) current_piece_char#100 ← (byte) current_piece_char#17
  [61] call render_moving 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [62] (byte) render_screen_render#65 ← (byte) render_screen_render#19
  [63] (byte) next_piece_idx#80 ← (byte) next_piece_idx#17
  [64] call render_next 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [65] phi()
  [66] call render_score 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [67] phi()
  [68] call render_screen_swap 
  to:main::@1

(void()) render_screen_swap()
render_screen_swap: scope:[render_screen_swap]  from main::@25
  [69] (byte) render_screen_render#12 ← (byte) render_screen_render#19 ^ (byte) $20
  [70] (byte) render_screen_show#14 ← (byte) render_screen_show#17 ^ (byte) $20
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [71] return 
  to:@return

(void()) render_score()
render_score: scope:[render_score]  from main::@24
  [72] if((byte) render_screen_render#19==(byte) 0) goto render_score::@1
  to:render_score::@2
render_score::@1: scope:[render_score]  from render_score
  [73] phi()
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score render_score::@1
  [74] (byte*) render_score::screen#3 ← phi( render_score::@1/(const nomodify byte*) PLAYFIELD_SCREEN_1 render_score/(const nomodify byte*) PLAYFIELD_SCREEN_2 )
  [75] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
  [76] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes+(byte) 2)
  [77] call render_bcd 
  to:render_score::@3
render_score::@3: scope:[render_score]  from render_score::@2
  [78] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
  [79] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes+(byte) 1)
  [80] call render_bcd 
  to:render_score::@4
render_score::@4: scope:[render_score]  from render_score::@3
  [81] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
  [82] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes)
  [83] call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@4
  [84] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#16
  [85] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
  [86] call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  [87] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#16
  [88] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
  [89] call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  [90] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
  [91] (byte) render_bcd::bcd#5 ← (byte) level_bcd#18
  [92] call render_bcd 
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@7
  [93] return 
  to:@return

(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
render_bcd: scope:[render_bcd]  from render_score::@2 render_score::@3 render_score::@4 render_score::@5 render_score::@6 render_score::@7
  [94] (byte) render_bcd::bcd#6 ← phi( render_score::@2/(byte) render_bcd::bcd#0 render_score::@3/(byte) render_bcd::bcd#1 render_score::@4/(byte) render_bcd::bcd#2 render_score::@5/(byte) render_bcd::bcd#3 render_score::@6/(byte) render_bcd::bcd#4 render_score::@7/(byte) render_bcd::bcd#5 )
  [94] (byte) render_bcd::only_low#6 ← phi( render_score::@2/(byte) 0 render_score::@3/(byte) 0 render_score::@4/(byte) 0 render_score::@5/(byte) 1 render_score::@6/(byte) 0 render_score::@7/(byte) 0 )
  [94] (word) render_bcd::offset#6 ← phi( render_score::@2/(const word) render_score::score_offset render_score::@3/(const word) render_score::score_offset+(byte) 2 render_score::@4/(const word) render_score::score_offset+(byte) 4 render_score::@5/(const word) render_score::lines_offset render_score::@6/(const word) render_score::lines_offset+(byte) 1 render_score::@7/(const word) render_score::level_offset )
  [94] (byte*) render_bcd::screen#6 ← phi( render_score::@2/(byte*) render_bcd::screen#0 render_score::@3/(byte*) render_bcd::screen#1 render_score::@4/(byte*) render_bcd::screen#2 render_score::@5/(byte*) render_bcd::screen#3 render_score::@6/(byte*) render_bcd::screen#4 render_score::@7/(byte*) render_bcd::screen#5 )
  [95] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  [96] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@2: scope:[render_bcd]  from render_bcd
  [97] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4
  [98] (byte~) render_bcd::$6 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$5
  [99] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6
  [100] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0
  to:render_bcd::@1
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  [101] (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  [102] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f
  [103] (byte~) render_bcd::$4 ← (const nomodify byte) render_bcd::ZERO_CHAR + (byte~) render_bcd::$3
  [104] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4
  to:render_bcd::@return
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  [105] return 
  to:@return

(void()) render_next()
render_next: scope:[render_next]  from main::@16 main::@23
  [106] (byte) next_piece_idx#13 ← phi( main::@16/(byte) next_piece_idx#79 main::@23/(byte) next_piece_idx#80 )
  [106] (byte) render_screen_render#16 ← phi( main::@16/(byte) $20 main::@23/(byte) render_screen_render#65 )
  [107] if((byte) render_screen_render#16==(byte) 0) goto render_next::@1
  to:render_next::@2
render_next::@1: scope:[render_next]  from render_next
  [108] phi()
  to:render_next::@2
render_next::@2: scope:[render_next]  from render_next render_next::@1
  [109] (byte*) render_next::screen_next_area#11 ← phi( render_next::@1/(const nomodify byte*) PLAYFIELD_SCREEN_1+(const word) render_next::next_area_offset render_next/(const nomodify byte*) PLAYFIELD_SCREEN_2+(const word) render_next::next_area_offset )
  [110] (byte~) render_next::$6 ← (byte) next_piece_idx#13 << (byte) 1
  [111] (byte) render_next::next_piece_char#0 ← *((const byte*) PIECES_NEXT_CHARS + (byte) next_piece_idx#13)
  [112] (byte*) render_next::next_piece_gfx#8 ← (byte*)*((const word*) PIECES + (byte~) render_next::$6)
  to:render_next::@3
render_next::@3: scope:[render_next]  from render_next::@2 render_next::@8
  [113] (byte) render_next::l#7 ← phi( render_next::@2/(byte) 0 render_next::@8/(byte) render_next::l#1 )
  [113] (byte*) render_next::screen_next_area#10 ← phi( render_next::@2/(byte*) render_next::screen_next_area#11 render_next::@8/(byte*) render_next::screen_next_area#4 )
  [113] (byte*) render_next::next_piece_gfx#3 ← phi( render_next::@2/(byte*) render_next::next_piece_gfx#8 render_next::@8/(byte*) render_next::next_piece_gfx#1 )
  to:render_next::@4
render_next::@4: scope:[render_next]  from render_next::@3 render_next::@6
  [114] (byte) render_next::c#2 ← phi( render_next::@3/(byte) 0 render_next::@6/(byte) render_next::c#1 )
  [114] (byte*) render_next::screen_next_area#5 ← phi( render_next::@3/(byte*) render_next::screen_next_area#10 render_next::@6/(byte*) render_next::screen_next_area#3 )
  [114] (byte*) render_next::next_piece_gfx#2 ← phi( render_next::@3/(byte*) render_next::next_piece_gfx#3 render_next::@6/(byte*) render_next::next_piece_gfx#1 )
  [115] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2)
  [116] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2
  [117] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5
  to:render_next::@7
render_next::@7: scope:[render_next]  from render_next::@4
  [118] *((byte*) render_next::screen_next_area#5) ← (byte) 0
  to:render_next::@6
render_next::@6: scope:[render_next]  from render_next::@5 render_next::@7
  [119] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5
  [120] (byte) render_next::c#1 ← ++ (byte) render_next::c#2
  [121] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4
  to:render_next::@8
render_next::@8: scope:[render_next]  from render_next::@6
  [122] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24
  [123] (byte) render_next::l#1 ← ++ (byte) render_next::l#7
  [124] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3
  to:render_next::@return
render_next::@return: scope:[render_next]  from render_next::@8
  [125] return 
  to:@return
render_next::@5: scope:[render_next]  from render_next::@4
  [126] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0
  to:render_next::@6

(void()) render_moving()
render_moving: scope:[render_moving]  from main::@15 main::@22
  [127] (byte) current_piece_char#70 ← phi( main::@15/(byte) current_piece_char#99 main::@22/(byte) current_piece_char#100 )
  [127] (byte*) current_piece_gfx#66 ← phi( main::@15/(byte*) current_piece_gfx#111 main::@22/(byte*) current_piece_gfx#112 )
  [127] (byte) current_xpos#61 ← phi( main::@15/(byte) current_xpos#118 main::@22/(byte) current_xpos#119 )
  [127] (byte) render_screen_render#35 ← phi( main::@15/(byte) $20 main::@22/(byte) render_screen_render#64 )
  [127] (byte) current_ypos#14 ← phi( main::@15/(byte) current_ypos#97 main::@22/(byte) current_ypos#98 )
  [128] (byte) render_moving::ypos#0 ← (byte) current_ypos#14
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  [129] (byte) render_moving::l#4 ← phi( render_moving/(byte) 0 render_moving::@3/(byte) render_moving::l#1 )
  [129] (byte) render_moving::i#3 ← phi( render_moving/(byte) 0 render_moving::@3/(byte) render_moving::i#8 )
  [129] (byte) render_moving::ypos#2 ← phi( render_moving/(byte) render_moving::ypos#0 render_moving::@3/(byte) render_moving::ypos#1 )
  [130] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2
  to:render_moving::@7
render_moving::@7: scope:[render_moving]  from render_moving::@1
  [131] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@7
  [132] (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#2 render_moving::@7/(byte) render_moving::i#1 )
  [133] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2
  [134] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4
  [135] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1
  to:render_moving::@return
render_moving::@return: scope:[render_moving]  from render_moving::@3
  [136] return 
  to:@return
render_moving::@2: scope:[render_moving]  from render_moving::@1
  [137] (byte~) render_moving::$1 ← (byte) render_screen_render#35 + (byte) render_moving::ypos#2
  [138] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1
  [139] (byte*) render_moving::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_moving::$6)
  [140] (byte) render_moving::xpos#0 ← (byte) current_xpos#61
  to:render_moving::@4
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  [141] (byte) render_moving::c#2 ← phi( render_moving::@2/(byte) 0 render_moving::@5/(byte) render_moving::c#1 )
  [141] (byte) render_moving::xpos#2 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  [141] (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#3 render_moving::@5/(byte) render_moving::i#2 )
  [142] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#66 + (byte) render_moving::i#4)
  [143] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4
  [144] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5
  to:render_moving::@6
render_moving::@6: scope:[render_moving]  from render_moving::@4
  [145] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#70
  to:render_moving::@5
render_moving::@5: scope:[render_moving]  from render_moving::@4 render_moving::@6
  [146] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  [147] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2
  [148] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4
  to:render_moving::@3

(void()) render_playfield()
render_playfield: scope:[render_playfield]  from main::@14 main::@7
  [149] (byte) render_screen_render#24 ← phi( main::@14/(byte) $20 main::@7/(byte) render_screen_render#63 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [150] (byte) render_playfield::i#3 ← phi( render_playfield/(const nomodify byte) PLAYFIELD_COLS*(byte) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [150] (byte) render_playfield::l#2 ← phi( render_playfield/(byte) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [151] (byte~) render_playfield::$0 ← (byte) render_screen_render#24 + (byte) render_playfield::l#2
  [152] (byte~) render_playfield::$3 ← (byte~) render_playfield::$0 << (byte) 1
  [153] (byte*) render_playfield::screen_line#0 ← *((const byte**) screen_lines_1 + (byte~) render_playfield::$3)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [154] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [154] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [154] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [155] *((byte*) render_playfield::screen_line#2) ← *((const byte*) playfield + (byte) render_playfield::i#2)
  [156] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [157] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [158] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [159] if((byte) render_playfield::c#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [160] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [161] if((byte) render_playfield::l#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [162] return 
  to:@return

(byte()) play_movement((byte) play_movement::key_event)
play_movement: scope:[play_movement]  from main::@4
  [163] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0
  [164] call play_move_down 
  [165] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@2
play_movement::@2: scope:[play_movement]  from play_movement
  [166] (byte) play_movement::render#1 ← (byte) play_move_down::return#0
  [167] if((byte) game_over#16==(byte) 0) goto play_movement::@1
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@2 play_movement::@4
  [168] (byte) current_xpos#2 ← phi( play_movement::@2/(byte) current_xpos#23 play_movement::@4/(byte) current_xpos#27 )
  [168] (byte*) current_piece_gfx#19 ← phi( play_movement::@2/(byte*) current_piece_gfx#21 play_movement::@4/(byte*) current_piece_gfx#22 )
  [168] (byte) current_orientation#18 ← phi( play_movement::@2/(byte) current_orientation#21 play_movement::@4/(byte) current_orientation#26 )
  [168] (byte) play_movement::return#2 ← phi( play_movement::@2/(byte) play_movement::render#1 play_movement::@4/(byte) play_movement::return#0 )
  [169] return 
  to:@return
play_movement::@1: scope:[play_movement]  from play_movement::@2
  [170] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0
  [171] call play_move_leftright 
  [172] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@3
play_movement::@3: scope:[play_movement]  from play_movement::@1
  [173] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
  [174] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3
  [175] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0
  [176] call play_move_rotate 
  [177] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@4
play_movement::@4: scope:[play_movement]  from play_movement::@3
  [178] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
  [179] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4
  to:play_movement::@return

(byte()) play_move_rotate((byte) play_move_rotate::key_event)
play_move_rotate: scope:[play_move_rotate]  from play_movement::@3
  [180] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_Z) goto play_move_rotate::@1
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate
  [181] if((byte) play_move_rotate::key_event#0==(const nomodify byte) KEY_X) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@4 play_move_rotate::@5 play_move_rotate::@6
  [182] (byte*) current_piece_gfx#22 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#21 play_move_rotate::@4/(byte*) current_piece_gfx#21 play_move_rotate::@5/(byte*) current_piece_gfx#6 )
  [182] (byte) current_orientation#26 ← phi( play_move_rotate::@6/(byte) current_orientation#21 play_move_rotate::@4/(byte) current_orientation#21 play_move_rotate::@5/(byte) current_orientation#6 )
  [182] (byte) play_move_rotate::return#2 ← phi( play_move_rotate::@6/(byte) 0 play_move_rotate::@4/(byte) 0 play_move_rotate::@5/(byte) 1 )
  [183] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@4
  [184] (byte~) play_move_rotate::$5 ← (byte) current_orientation#21 + (byte) $10
  [185] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f
  to:play_move_rotate::@3
play_move_rotate::@3: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [186] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [187] (byte) play_collision::xpos#3 ← (byte) current_xpos#27
  [188] (byte) play_collision::ypos#3 ← (byte) current_ypos#20
  [189] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [190] (byte*) current_piece#101 ← (byte*) current_piece#16
  [191] call play_collision 
  [192] (byte) play_collision::return#14 ← (byte) play_collision::return#15
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate::@3
  [193] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
  [194] if((byte~) play_move_rotate::$2!=(const nomodify byte) COLLISION_NONE) goto play_move_rotate::@return
  to:play_move_rotate::@5
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@6
  [195] (byte) current_orientation#6 ← (byte) play_move_rotate::orientation#3
  [196] (byte*) current_piece_gfx#6 ← (byte*) current_piece#16 + (byte) current_orientation#6
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [197] (byte~) play_move_rotate::$7 ← (byte) current_orientation#21 - (byte) $10
  [198] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f
  to:play_move_rotate::@3

(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
play_collision: scope:[play_collision]  from play_move_down::@8 play_move_leftright::@1 play_move_leftright::@3 play_move_rotate::@3 play_spawn_current
  [199] (byte) play_collision::xpos#6 ← phi( play_move_down::@8/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@3/(byte) play_collision::xpos#2 play_move_rotate::@3/(byte) play_collision::xpos#3 play_spawn_current/(byte) play_collision::xpos#4 )
  [199] (byte) play_collision::yp#0 ← phi( play_move_down::@8/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@3/(byte) play_collision::ypos#2 play_move_rotate::@3/(byte) play_collision::ypos#3 play_spawn_current/(byte) play_collision::ypos#4 )
  [199] (byte) play_collision::orientation#5 ← phi( play_move_down::@8/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@3/(byte) play_collision::orientation#2 play_move_rotate::@3/(byte) play_collision::orientation#3 play_spawn_current/(byte) 0 )
  [199] (byte*) current_piece#18 ← phi( play_move_down::@8/(byte*) current_piece#98 play_move_leftright::@1/(byte*) current_piece#99 play_move_leftright::@3/(byte*) current_piece#100 play_move_rotate::@3/(byte*) current_piece#101 play_spawn_current/(byte*) current_piece#102 )
  [200] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#18 + (byte) play_collision::orientation#5
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@9
  [201] (byte) play_collision::l#6 ← phi( play_collision/(byte) 0 play_collision::@9/(byte) play_collision::l#1 )
  [201] (byte) play_collision::i#3 ← phi( play_collision/(byte) 0 play_collision::@9/(byte) play_collision::i#10 )
  [201] (byte) play_collision::yp#2 ← phi( play_collision/(byte) play_collision::yp#0 play_collision::@9/(byte) play_collision::yp#1 )
  [202] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1
  [203] (byte*) play_collision::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_collision::$14)
  [204] (byte) play_collision::xp#8 ← (byte) play_collision::xpos#6
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@10
  [205] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte) 0 play_collision::@10/(byte) play_collision::c#1 )
  [205] (byte) play_collision::xp#2 ← phi( play_collision::@1/(byte) play_collision::xp#8 play_collision::@10/(byte) play_collision::xp#1 )
  [205] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@10/(byte) play_collision::i#12 )
  [206] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [207] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3
  to:play_collision::@7
play_collision::@7: scope:[play_collision]  from play_collision::@2
  [208] if((byte) play_collision::yp#2<(const nomodify byte) PLAYFIELD_LINES) goto play_collision::@4
  to:play_collision::@return
play_collision::@4: scope:[play_collision]  from play_collision::@7
  [209] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80
  [210] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [211] if((byte) play_collision::xp#2<(const nomodify byte) PLAYFIELD_COLS) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [212] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@7 play_collision::@8
  [213] (byte) play_collision::return#15 ← phi( play_collision::@7/(const nomodify byte) COLLISION_BOTTOM play_collision::@8/(const nomodify byte) COLLISION_NONE play_collision::@4/(const nomodify byte) COLLISION_LEFT play_collision::@5/(const nomodify byte) COLLISION_RIGHT play_collision::@6/(const nomodify byte) COLLISION_PLAYFIELD )
  [214] return 
  to:@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [215] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2
  [216] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [217] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@3
  [218] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2
  [219] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [220] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9
  to:play_collision::@return
play_collision::@9: scope:[play_collision]  from play_collision::@8
  [221] (byte) play_collision::i#10 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@10: scope:[play_collision]  from play_collision::@3
  [222] (byte) play_collision::i#12 ← (byte) play_collision::i#1
  to:play_collision::@2

(byte()) play_move_leftright((byte) play_move_leftright::key_event)
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  [223] if((byte) play_move_leftright::key_event#0==(const nomodify byte) KEY_COMMA) goto play_move_leftright::@1
  to:play_move_leftright::@2
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright
  [224] if((byte) play_move_leftright::key_event#0!=(const nomodify byte) KEY_DOT) goto play_move_leftright::@return
  to:play_move_leftright::@3
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@2
  [225] (byte) play_collision::xpos#2 ← (byte) current_xpos#23 + (byte) 1
  [226] (byte) play_collision::ypos#2 ← (byte) current_ypos#20
  [227] (byte) play_collision::orientation#2 ← (byte) current_orientation#21
  [228] (byte*) current_piece#100 ← (byte*) current_piece#16
  [229] call play_collision 
  [230] (byte) play_collision::return#13 ← (byte) play_collision::return#15
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@3
  [231] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  [232] if((byte~) play_move_leftright::$4!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return
  to:play_move_leftright::@4
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@7
  [233] (byte) current_xpos#5 ← ++ (byte) current_xpos#23
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@4 play_move_leftright::@5 play_move_leftright::@6 play_move_leftright::@7
  [234] (byte) current_xpos#27 ← phi( play_move_leftright::@2/(byte) current_xpos#23 play_move_leftright::@4/(byte) current_xpos#5 play_move_leftright::@5/(byte) current_xpos#7 play_move_leftright::@6/(byte) current_xpos#23 play_move_leftright::@7/(byte) current_xpos#23 )
  [234] (byte) play_move_leftright::return#2 ← phi( play_move_leftright::@2/(byte) 0 play_move_leftright::@4/(byte) 1 play_move_leftright::@5/(byte) 1 play_move_leftright::@6/(byte) 0 play_move_leftright::@7/(byte) 0 )
  [235] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [236] (byte) play_collision::xpos#1 ← (byte) current_xpos#23 - (byte) 1
  [237] (byte) play_collision::ypos#1 ← (byte) current_ypos#20
  [238] (byte) play_collision::orientation#1 ← (byte) current_orientation#21
  [239] (byte*) current_piece#99 ← (byte*) current_piece#16
  [240] call play_collision 
  [241] (byte) play_collision::return#1 ← (byte) play_collision::return#15
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright::@1
  [242] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [243] if((byte~) play_move_leftright::$8!=(const nomodify byte) COLLISION_NONE) goto play_move_leftright::@return
  to:play_move_leftright::@5
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@6
  [244] (byte) current_xpos#7 ← -- (byte) current_xpos#23
  to:play_move_leftright::@return

(byte()) play_move_down((byte) play_move_down::key_event)
play_move_down: scope:[play_move_down]  from play_movement
  [245] (byte) current_movedown_counter#13 ← ++ (byte) current_movedown_counter#17
  [246] if((byte) play_move_down::key_event#0!=(const nomodify byte) KEY_SPACE) goto play_move_down::@1
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down
  [247] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@4
  [248] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte) 0 play_move_down::@4/(byte) 1 )
  [249] call keyboard_event_pressed 
  [250] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@1
  [251] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [252] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2
  to:play_move_down::@5
play_move_down::@5: scope:[play_move_down]  from play_move_down::@12
  [253] if((byte) current_movedown_counter#13<(const nomodify byte) current_movedown_fast) goto play_move_down::@2
  to:play_move_down::@6
play_move_down::@6: scope:[play_move_down]  from play_move_down::@5
  [254] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@12 play_move_down::@5 play_move_down::@6
  [255] (byte) play_move_down::movedown#7 ← phi( play_move_down::@12/(byte) play_move_down::movedown#10 play_move_down::@5/(byte) play_move_down::movedown#10 play_move_down::@6/(byte) play_move_down::movedown#2 )
  [256] if((byte) current_movedown_counter#13<(byte) current_movedown_slow#13) goto play_move_down::@3
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@2
  [257] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@3
play_move_down::@3: scope:[play_move_down]  from play_move_down::@2 play_move_down::@7
  [258] (byte) play_move_down::movedown#6 ← phi( play_move_down::@2/(byte) play_move_down::movedown#7 play_move_down::@7/(byte) play_move_down::movedown#3 )
  [259] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down::@3
  [260] (byte) play_collision::ypos#0 ← (byte) current_ypos#10 + (byte) 1
  [261] (byte) play_collision::xpos#0 ← (byte) current_xpos#13
  [262] (byte) play_collision::orientation#0 ← (byte) current_orientation#12
  [263] (byte*) current_piece#98 ← (byte*) current_piece#23
  [264] call play_collision 
  [265] (byte) play_collision::return#0 ← (byte) play_collision::return#15
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@8
  [266] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [267] if((byte~) play_move_down::$12==(const nomodify byte) COLLISION_NONE) goto play_move_down::@10
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@13
  [268] phi()
  [269] call play_lock_current 
  to:play_move_down::@14
play_move_down::@14: scope:[play_move_down]  from play_move_down::@9
  [270] phi()
  [271] call play_remove_lines 
  [272] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#7
  to:play_move_down::@15
play_move_down::@15: scope:[play_move_down]  from play_move_down::@14
  [273] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
  [274] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  [275] call play_update_score 
  to:play_move_down::@16
play_move_down::@16: scope:[play_move_down]  from play_move_down::@15
  [276] phi()
  [277] call play_spawn_current 
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@16
  [278] (byte*) current_piece#95 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [279] (byte*) current_piece_gfx#116 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17
  [280] (byte) next_piece_idx#32 ← phi( play_move_down::@10/(byte) next_piece_idx#23 play_move_down::@17/(byte) play_spawn_current::piece_idx#2 )
  [280] (byte) game_over#29 ← phi( play_move_down::@10/(byte) game_over#22 play_move_down::@17/(byte) game_over#53 )
  [280] (byte) current_xpos#45 ← phi( play_move_down::@10/(byte) current_xpos#13 play_move_down::@17/(byte) current_xpos#100 )
  [280] (byte*) current_piece_gfx#37 ← phi( play_move_down::@10/(byte*) current_piece_gfx#12 play_move_down::@17/(byte*) current_piece_gfx#116 )
  [280] (byte) current_orientation#39 ← phi( play_move_down::@10/(byte) current_orientation#12 play_move_down::@17/(byte) 0 )
  [280] (byte) current_piece_char#31 ← phi( play_move_down::@10/(byte) current_piece_char#23 play_move_down::@17/(byte) current_piece_char#4 )
  [280] (byte*) current_piece#30 ← phi( play_move_down::@10/(byte*) current_piece#23 play_move_down::@17/(byte*) current_piece#95 )
  [280] (byte) level_bcd#33 ← phi( play_move_down::@10/(byte) level_bcd#10 play_move_down::@17/(byte) level_bcd#20 )
  [280] (byte) current_movedown_slow#39 ← phi( play_move_down::@10/(byte) current_movedown_slow#13 play_move_down::@17/(byte) current_movedown_slow#24 )
  [280] (byte) level#35 ← phi( play_move_down::@10/(byte) level#25 play_move_down::@17/(byte) level#20 )
  [280] (word) lines_bcd#28 ← phi( play_move_down::@10/(word) lines_bcd#20 play_move_down::@17/(word) lines_bcd#18 )
  [280] (byte) current_ypos#40 ← phi( play_move_down::@10/(byte) current_ypos#2 play_move_down::@17/(byte) current_ypos#5 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@11 play_move_down::@3
  [281] (byte) next_piece_idx#17 ← phi( play_move_down::@11/(byte) next_piece_idx#32 play_move_down::@3/(byte) next_piece_idx#23 )
  [281] (byte) game_over#16 ← phi( play_move_down::@11/(byte) game_over#29 play_move_down::@3/(byte) game_over#22 )
  [281] (byte) current_xpos#23 ← phi( play_move_down::@11/(byte) current_xpos#45 play_move_down::@3/(byte) current_xpos#13 )
  [281] (byte*) current_piece_gfx#21 ← phi( play_move_down::@11/(byte*) current_piece_gfx#37 play_move_down::@3/(byte*) current_piece_gfx#12 )
  [281] (byte) current_orientation#21 ← phi( play_move_down::@11/(byte) current_orientation#39 play_move_down::@3/(byte) current_orientation#12 )
  [281] (byte) current_piece_char#17 ← phi( play_move_down::@11/(byte) current_piece_char#31 play_move_down::@3/(byte) current_piece_char#23 )
  [281] (byte*) current_piece#16 ← phi( play_move_down::@11/(byte*) current_piece#30 play_move_down::@3/(byte*) current_piece#23 )
  [281] (byte) level_bcd#18 ← phi( play_move_down::@11/(byte) level_bcd#33 play_move_down::@3/(byte) level_bcd#10 )
  [281] (byte) current_movedown_slow#22 ← phi( play_move_down::@11/(byte) current_movedown_slow#39 play_move_down::@3/(byte) current_movedown_slow#13 )
  [281] (byte) level#18 ← phi( play_move_down::@11/(byte) level#35 play_move_down::@3/(byte) level#25 )
  [281] (word) lines_bcd#16 ← phi( play_move_down::@11/(word) lines_bcd#28 play_move_down::@3/(word) lines_bcd#20 )
  [281] (byte) current_ypos#20 ← phi( play_move_down::@11/(byte) current_ypos#40 play_move_down::@3/(byte) current_ypos#10 )
  [281] (byte) current_movedown_counter#15 ← phi( play_move_down::@11/(byte) 0 play_move_down::@3/(byte) current_movedown_counter#13 )
  [281] (byte) play_move_down::return#3 ← phi( play_move_down::@11/(byte) 1 play_move_down::@3/(byte) 0 )
  [282] return 
  to:@return
play_move_down::@10: scope:[play_move_down]  from play_move_down::@13
  [283] (byte) current_ypos#2 ← ++ (byte) current_ypos#10
  to:play_move_down::@11

(void()) play_spawn_current()
play_spawn_current: scope:[play_spawn_current]  from main::@12 main::@13 play_move_down::@16
  [284] (byte) game_over#66 ← phi( main::@12/(byte) 0 main::@13/(byte) game_over#53 play_move_down::@16/(byte) game_over#22 )
  [284] (byte) next_piece_idx#18 ← phi( main::@12/(byte) 0 main::@13/(byte) play_spawn_current::piece_idx#2 play_move_down::@16/(byte) next_piece_idx#23 )
  [285] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#18
  [286] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1
  [287] (byte) current_piece_char#4 ← *((const byte*) PIECES_CHARS + (byte) play_spawn_current::current_piece_idx#0)
  [288] (byte) current_xpos#100 ← *((const byte*) PIECES_START_X + (byte) play_spawn_current::current_piece_idx#0)
  [289] (byte) current_ypos#5 ← *((const byte*) PIECES_START_Y + (byte) play_spawn_current::current_piece_idx#0)
  [290] (byte) play_collision::xpos#4 ← (byte) current_xpos#100
  [291] (byte) play_collision::ypos#4 ← (byte) current_ypos#5
  [292] (byte*) current_piece#102 ← (byte*)*((const word*) PIECES + (byte~) play_spawn_current::$7)
  [293] call play_collision 
  [294] (byte) play_collision::return#10 ← (byte) play_collision::return#15
  to:play_spawn_current::@4
play_spawn_current::@4: scope:[play_spawn_current]  from play_spawn_current
  [295] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
  [296] if((byte~) play_spawn_current::$1!=(const nomodify byte) COLLISION_PLAYFIELD) goto play_spawn_current::@5
  to:play_spawn_current::@1
play_spawn_current::@5: scope:[play_spawn_current]  from play_spawn_current::@4
  [297] phi()
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current::@4 play_spawn_current::@5
  [298] (byte) game_over#53 ← phi( play_spawn_current::@4/(byte) 1 play_spawn_current::@5/(byte) game_over#66 )
  to:play_spawn_current::@2
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1 play_spawn_current::@3
  [299] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current::@1/(byte) 7 play_spawn_current::@3/(byte) play_spawn_current::piece_idx#1 )
  [300] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@2
  [301] return 
  to:@return
play_spawn_current::sid_rnd1: scope:[play_spawn_current]  from play_spawn_current::@2
  [302] (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1
  [303] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7
  to:play_spawn_current::@2

(void()) play_update_score((byte) play_update_score::removed)
play_update_score: scope:[play_update_score]  from play_move_down::@15
  [304] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return
  to:play_update_score::@1
play_update_score::@1: scope:[play_update_score]  from play_update_score
  [305] (byte~) play_update_score::$2 ← < (word) lines_bcd#20
  [306] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0
  [307] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2
  [308] (dword) play_update_score::add_bcd#0 ← *((const dword*) score_add_bcd + (byte~) play_update_score::$9)
  asm { sed  }
  [310] (word) lines_bcd#31 ← (word) lines_bcd#20 + (byte) play_update_score::removed#0
  [311] (volatile dword) score_bcd ← (volatile dword) score_bcd + (dword) play_update_score::add_bcd#0
  asm { cld  }
  [313] (byte~) play_update_score::$4 ← < (word) lines_bcd#31
  [314] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0
  [315] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
  to:play_update_score::@2
play_update_score::@2: scope:[play_update_score]  from play_update_score::@1
  [316] phi()
  [317] call play_increase_level 
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@1 play_update_score::@2
  [318] (byte) level_bcd#20 ← phi( play_update_score/(byte) level_bcd#10 play_update_score::@1/(byte) level_bcd#10 play_update_score::@2/(byte) level_bcd#63 )
  [318] (byte) current_movedown_slow#24 ← phi( play_update_score/(byte) current_movedown_slow#13 play_update_score::@1/(byte) current_movedown_slow#13 play_update_score::@2/(byte) current_movedown_slow#67 )
  [318] (byte) level#20 ← phi( play_update_score/(byte) level#25 play_update_score::@1/(byte) level#25 play_update_score::@2/(byte) level#22 )
  [318] (word) lines_bcd#18 ← phi( play_update_score/(word) lines_bcd#20 play_update_score::@1/(word) lines_bcd#31 play_update_score::@2/(word) lines_bcd#31 )
  [319] return 
  to:@return

(void()) play_increase_level()
play_increase_level: scope:[play_increase_level]  from play_update_score::@2
  [320] (byte) level#22 ← ++ (byte) level#25
  [321] if((byte) level#22>=(byte) $1d+(byte) 1) goto play_increase_level::@1
  to:play_increase_level::@3
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level
  [322] (byte) current_movedown_slow#9 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS + (byte) level#22)
  to:play_increase_level::@1
play_increase_level::@1: scope:[play_increase_level]  from play_increase_level play_increase_level::@3
  [323] (byte) current_movedown_slow#67 ← phi( play_increase_level/(byte) 1 play_increase_level::@3/(byte) current_movedown_slow#9 )
  [324] (byte) level_bcd#22 ← ++ (byte) level_bcd#10
  [325] (byte~) play_increase_level::$1 ← (byte) level_bcd#22 & (byte) $f
  [326] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2
  to:play_increase_level::@4
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level::@1
  [327] (byte) level_bcd#7 ← (byte) level_bcd#22 + (byte) 6
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level::@1 play_increase_level::@4
  [328] (byte) level_bcd#63 ← phi( play_increase_level::@1/(byte) level_bcd#22 play_increase_level::@4/(byte) level_bcd#7 )
  asm { sed  }
  to:play_increase_level::@5
play_increase_level::@5: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@5
  [330] (byte) play_increase_level::b#2 ← phi( play_increase_level::@2/(byte) 0 play_increase_level::@5/(byte) play_increase_level::b#1 )
  [331] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2
  [332] *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) ← *((const dword*) score_add_bcd + (byte~) play_increase_level::$5) + *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_increase_level::$5)
  [333] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2
  [334] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5
  to:play_increase_level::@6
play_increase_level::@6: scope:[play_increase_level]  from play_increase_level::@5
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@6
  [336] return 
  to:@return

(byte()) play_remove_lines()
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@14
  [337] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@6
  [338] (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte) 0 play_remove_lines::@6/(byte) play_remove_lines::removed#7 )
  [338] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte) 0 play_remove_lines::@6/(byte) play_remove_lines::y#1 )
  [338] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 play_remove_lines::@6/(byte) play_remove_lines::w#11 )
  [338] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const nomodify byte) PLAYFIELD_LINES*(const nomodify byte) PLAYFIELD_COLS-(byte) 1 play_remove_lines::@6/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [339] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [339] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [339] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [339] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [340] (byte) play_remove_lines::c#0 ← *((const byte*) playfield + (byte) play_remove_lines::r#2)
  [341] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [342] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9
  to:play_remove_lines::@3
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@2
  [343] phi()
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@9
  [344] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@9/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte) 0 )
  [345] *((const byte*) playfield + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [346] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [347] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [348] if((byte) play_remove_lines::x#1!=(const nomodify byte) PLAYFIELD_COLS-(byte) 1+(byte) 1) goto play_remove_lines::@2
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@3
  [349] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4
  [350] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const nomodify byte) PLAYFIELD_COLS
  [351] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11
  to:play_remove_lines::@6
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@5
  [352] (byte) play_remove_lines::removed#7 ← phi( play_remove_lines::@4/(byte) play_remove_lines::removed#11 play_remove_lines::@5/(byte) play_remove_lines::removed#1 )
  [352] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#1 play_remove_lines::@5/(byte) play_remove_lines::w#2 )
  [353] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [354] if((byte) play_remove_lines::y#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_remove_lines::@1
  to:play_remove_lines::@7
play_remove_lines::@7: scope:[play_remove_lines]  from play_remove_lines::@6 play_remove_lines::@8
  [355] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@6/(byte) play_remove_lines::w#11 play_remove_lines::@8/(byte) play_remove_lines::w#3 )
  [356] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@7
  [357] return 
  to:@return
play_remove_lines::@8: scope:[play_remove_lines]  from play_remove_lines::@7
  [358] *((const byte*) playfield + (byte) play_remove_lines::w#6) ← (byte) 0
  [359] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@7

(void()) play_lock_current()
play_lock_current: scope:[play_lock_current]  from play_move_down::@9
  [360] (byte) play_lock_current::yp#0 ← (byte) current_ypos#10
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@6
  [361] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte) 0 play_lock_current::@6/(byte) play_lock_current::l#1 )
  [361] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte) 0 play_lock_current::@6/(byte) play_lock_current::i#7 )
  [361] (byte) play_lock_current::yp#2 ← phi( play_lock_current/(byte) play_lock_current::yp#0 play_lock_current::@6/(byte) play_lock_current::yp#1 )
  [362] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1
  [363] (byte*) play_lock_current::playfield_line#0 ← *((const byte**) playfield_lines + (byte~) play_lock_current::$4)
  [364] (byte) play_lock_current::xp#0 ← (byte) current_xpos#13
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@7
  [365] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte) 0 play_lock_current::@7/(byte) play_lock_current::c#1 )
  [365] (byte) play_lock_current::xp#2 ← phi( play_lock_current::@1/(byte) play_lock_current::xp#0 play_lock_current::@7/(byte) play_lock_current::xp#1 )
  [365] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@7/(byte) play_lock_current::i#9 )
  [366] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [367] if(*((byte*) current_piece_gfx#12 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [368] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#23
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [369] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2
  [370] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [371] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [372] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2
  [373] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [374] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [375] return 
  to:@return
play_lock_current::@6: scope:[play_lock_current]  from play_lock_current::@5
  [376] (byte) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@3
  [377] (byte) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3 play_move_down::@1
  [378] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@1/(const nomodify byte) KEY_RSHIFT keyboard_event_scan::@17/(const nomodify byte) KEY_LSHIFT keyboard_event_scan::@2/(const nomodify byte) KEY_CTRL keyboard_event_scan::@3/(const nomodify byte) KEY_COMMODORE play_move_down::@1/(const nomodify byte) KEY_SPACE )
  [379] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3
  [380] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte*) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  [381] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7
  [382] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [383] return 
  to:@return

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from main::@19
  [384] if((byte) keyboard_events_size#14==(byte) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [385] (byte) keyboard_events_size#3 ← -- (byte) keyboard_events_size#14
  [386] (byte) keyboard_event_get::return#1 ← *((const byte*) keyboard_events + (byte) keyboard_events_size#3)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [387] (byte) keyboard_events_size#17 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 keyboard_event_get::@1/(byte) keyboard_events_size#3 )
  [387] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [388] return 
  to:@return

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@18
  [389] phi()
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [390] (byte) keyboard_events_size#32 ← phi( keyboard_event_scan/(byte) keyboard_events_size#20 keyboard_event_scan::@8/(byte) keyboard_events_size#14 )
  [390] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#13 )
  [390] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [391] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [392] call keyboard_matrix_read 
  [393] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [394] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [395] if((byte) keyboard_event_scan::row_scan#0!=*((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [396] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [397] (byte) keyboard_events_size#14 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#31 keyboard_event_scan::@16/(byte) keyboard_events_size#32 )
  [397] (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [398] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [399] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [400] phi()
  [401] call keyboard_event_pressed 
  [402] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [403] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [404] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [405] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [406] phi()
  [407] call keyboard_event_pressed 
  [408] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [409] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [410] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [411] phi()
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [412] phi()
  [413] call keyboard_event_pressed 
  [414] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [415] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [416] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [417] phi()
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [418] phi()
  [419] call keyboard_event_pressed 
  [420] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [421] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
  [422] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [423] phi()
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [424] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [425] (byte) keyboard_events_size#11 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#31 keyboard_event_scan::@19/(byte) keyboard_events_size#32 )
  [425] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [425] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte) 0 )
  [426] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2)
  [427] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [428] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [429] if((byte) keyboard_events_size#11==(byte) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [430] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte*) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [431] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [432] *((const byte*) keyboard_events + (byte) keyboard_events_size#11) ← (byte) keyboard_event_scan::keycode#10
  [433] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#11
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [434] (byte) keyboard_events_size#31 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#11 keyboard_event_scan::@11/(byte) keyboard_events_size#0 keyboard_event_scan::@12/(byte) keyboard_events_size#11 keyboard_event_scan::@14/(byte) keyboard_events_size#1 )
  [435] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10
  [436] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [437] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [438] *((const byte*) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [439] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40
  [440] *((const byte*) keyboard_events + (byte) keyboard_events_size#11) ← (byte~) keyboard_event_scan::$23
  [441] (byte) keyboard_events_size#0 ← ++ (byte) keyboard_events_size#11
  to:keyboard_event_scan::@10

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [442] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
  [443] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [444] return 
  to:@return

(void()) render_show()
render_show: scope:[render_show]  from main::@3
  [445] if((byte) render_screen_show#17==(byte) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [446] phi()
  to:render_show::@1
render_show::@1: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [447] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [448] *((const nomodify byte*) D018) ← (byte) render_show::d018val#3
  [449] *((const nomodify byte*) BG_COLOR1) ← *((const byte*) PIECES_COLORS_1 + (byte) level#25)
  [450] *((const nomodify byte*) BG_COLOR2) ← *((const byte*) PIECES_COLORS_2 + (byte) level#25)
  [451] (volatile byte) render_screen_showing ← (byte) render_screen_show#17
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@1
  [452] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [453] phi()
  to:render_show::@1

(void()) play_init()
play_init: scope:[play_init]  from main::@11
  [454] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [455] (byte) play_init::idx#2 ← phi( play_init/(byte) 0 play_init::@1/(byte) play_init::idx#1 )
  [455] (byte*) play_init::pli#2 ← phi( play_init/(const byte*) playfield play_init::@1/(byte*) play_init::pli#1 )
  [455] (byte) play_init::j#2 ← phi( play_init/(byte) 0 play_init::@1/(byte) play_init::j#1 )
  [456] (byte~) play_init::$2 ← (byte) play_init::j#2 << (byte) 1
  [457] *((const byte**) playfield_lines + (byte~) play_init::$2) ← (byte*) play_init::pli#2
  [458] *((const byte*) playfield_lines_idx + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [459] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const nomodify byte) PLAYFIELD_COLS
  [460] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const nomodify byte) PLAYFIELD_COLS
  [461] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [462] if((byte) play_init::j#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  [463] *((const byte*) playfield_lines_idx+(const nomodify byte) PLAYFIELD_LINES) ← (const nomodify byte) PLAYFIELD_COLS*(const nomodify byte) PLAYFIELD_LINES
  [464] (byte) current_movedown_slow#0 ← *((const to_nomodify byte*) MOVEDOWN_SLOW_SPEEDS)
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@2 play_init::@3
  [465] (byte) play_init::b#2 ← phi( play_init::@2/(byte) 0 play_init::@3/(byte) play_init::b#1 )
  [466] (byte~) play_init::$3 ← (byte) play_init::b#2 << (byte) 2
  [467] *((const dword*) score_add_bcd + (byte~) play_init::$3) ← *((const to_nomodify dword*) SCORE_BASE_BCD + (byte~) play_init::$3)
  [468] (byte) play_init::b#1 ← ++ (byte) play_init::b#2
  [469] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@3
  [470] return 
  to:@return

(void()) sprites_irq_init()
sprites_irq_init: scope:[sprites_irq_init]  from main::@10
  asm { sei  }
  [472] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  asm { ldaCIA1_INTERRUPT  }
  [474] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [475] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [476] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [477] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) & (byte) $7f
  [478] *((const nomodify byte*) RASTER) ← (const nomodify byte) IRQ_RASTER_FIRST
  [479] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [480] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [482] return 
  to:@return

(void()) sprites_init()
sprites_init: scope:[sprites_init]  from main::@9
  [483] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $f
  [484] *((const nomodify byte*) SPRITES_MC) ← (byte) 0
  [485] *((const nomodify byte*) SPRITES_EXPAND_Y) ← *((const nomodify byte*) SPRITES_MC)
  [486] *((const nomodify byte*) SPRITES_EXPAND_X) ← *((const nomodify byte*) SPRITES_EXPAND_Y)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [487] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte)(number) $18+(number) $f*(number) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [487] (byte) sprites_init::s#2 ← phi( sprites_init/(byte) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [488] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1
  [489] *((const nomodify byte*) SPRITES_XPOS + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [490] *((const nomodify byte*) SPRITES_COLOR + (byte) sprites_init::s#2) ← (const nomodify byte) BLACK
  [491] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18
  [492] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [493] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [494] return 
  to:@return

(void()) render_init()
render_init: scope:[render_init]  from main::@8
  [495] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [496] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [497] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [498] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [499] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_ECM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  [500] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  [501] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  [502] *((const nomodify byte*) BG_COLOR1) ← *((const byte*) PIECES_COLORS_1)
  [503] *((const nomodify byte*) BG_COLOR2) ← *((const byte*) PIECES_COLORS_2)
  [504] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREY
  [505] call render_screen_original 
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@2
  [506] phi()
  [507] call render_screen_original 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@3
  [508] (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@3/(const nomodify byte*) PLAYFIELD_SCREEN_2+(byte)(number) 2*(number) $28+(byte) $10 )
  [508] (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@3/(const nomodify byte*) PLAYFIELD_SCREEN_1+(byte)(number) 2*(number) $28+(byte) $10 )
  [508] (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@3/(byte) 0 )
  [509] (byte~) render_init::$5 ← (byte) render_init::i#2 << (byte) 1
  [510] *((const byte**) screen_lines_1 + (byte~) render_init::$5) ← (byte*) render_init::li_1#2
  [511] *((const byte**) screen_lines_2 + (byte~) render_init::$5) ← (byte*) render_init::li_2#2
  [512] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28
  [513] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28
  [514] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [515] if((byte) render_init::i#1!=(const nomodify byte) PLAYFIELD_LINES-(byte) 1+(byte) 1) goto render_init::@1
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@1
  [516] return 
  to:@return

(void()) render_screen_original((byte*) render_screen_original::screen)
render_screen_original: scope:[render_screen_original]  from render_init::@2 render_init::@3
  [517] (byte*) render_screen_original::screen#9 ← phi( render_init::@2/(const nomodify byte*) PLAYFIELD_SCREEN_1 render_init::@3/(const nomodify byte*) PLAYFIELD_SCREEN_2 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@5
  [518] (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte) 0 render_screen_original::@5/(byte) render_screen_original::y#1 )
  [518] (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(const to_nomodify byte*) PLAYFIELD_COLORS_ORIGINAL+(byte)(number) $20*(number) 2 render_screen_original::@5/(byte*) render_screen_original::ocols#1 )
  [518] (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(const to_nomodify byte*) PLAYFIELD_SCREEN_ORIGINAL+(byte)(number) $20*(number) 2 render_screen_original::@5/(byte*) render_screen_original::oscr#1 )
  [518] (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(const nomodify byte*) COLS render_screen_original::@5/(byte*) render_screen_original::cols#3 )
  [518] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@5/(byte*) render_screen_original::screen#10 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [519] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [519] (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  [519] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [520] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE
  [521] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [522] *((byte*) render_screen_original::cols#4) ← (const nomodify byte) BLACK
  [523] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  [524] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [525] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@3
  [526] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@3/(byte) render_screen_original::x#2 )
  [526] (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@3/(byte*) render_screen_original::cols#2 )
  [526] (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#4 render_screen_original::@3/(byte*) render_screen_original::ocols#1 )
  [526] (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@3/(byte*) render_screen_original::screen#3 )
  [526] (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#4 render_screen_original::@3/(byte*) render_screen_original::oscr#1 )
  [527] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  [528] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  [529] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  [530] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  [531] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  [532] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  [533] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [534] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@4
  [535] (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#2 render_screen_original::@4/(byte) render_screen_original::x#3 )
  [535] (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::cols#2 render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  [535] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#3 render_screen_original::@4/(byte*) render_screen_original::screen#10 )
  [536] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE
  [537] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7
  [538] *((byte*) render_screen_original::cols#6) ← (const nomodify byte) BLACK
  [539] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  [540] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  [541] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4
  [542] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6
  [543] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@5
  [544] return 
  to:@return

interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [546] (byte) sprites_irq::ypos#0 ← (volatile byte) irq_sprite_ypos
  [547] *((const nomodify byte*) SPRITES_YPOS) ← (byte) sprites_irq::ypos#0
  [548] *((const nomodify byte*) SPRITES_YPOS+(byte) 2) ← (byte) sprites_irq::ypos#0
  [549] *((const nomodify byte*) SPRITES_YPOS+(byte) 4) ← (byte) sprites_irq::ypos#0
  [550] *((const nomodify byte*) SPRITES_YPOS+(byte) 6) ← (byte) sprites_irq::ypos#0
  [551] (byte~) sprites_irq::$0 ← (volatile byte) irq_raster_next + (byte) 1
  [552] (volatile byte) sprites_irq::raster_sprite_gfx_modify ← (byte~) sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  [553] if(*((const nomodify byte*) RASTER)<(volatile byte) sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [554] (byte) sprites_irq::ptr#0 ← (volatile byte) irq_sprite_ptr
  [555] if((volatile byte) render_screen_showing==(byte) 0) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  [556] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2) ← (byte) sprites_irq::ptr#0
  [557] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [558] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 1) ← (byte) sprites_irq::ptr#3
  [559] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 2) ← (byte) sprites_irq::ptr#3
  [560] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [561] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_2+(byte) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  [562] (volatile byte) irq_cnt ← ++ (volatile byte) irq_cnt
  [563] if((volatile byte) irq_cnt==(byte) 9) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  [564] if((volatile byte) irq_cnt==(byte) $a) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  [565] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $14
  [566] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15
  [567] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  [568] *((const nomodify byte*) RASTER) ← (volatile byte) irq_raster_next
  [569] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  [570] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  [571] (volatile byte) irq_cnt ← (byte) 0
  [572] (volatile byte) irq_raster_next ← (const nomodify byte) IRQ_RASTER_FIRST
  [573] (volatile byte) irq_sprite_ypos ← (volatile byte) irq_sprite_ypos + (byte) $15
  [574] (volatile byte) irq_sprite_ptr ← (volatile byte) irq_sprite_ptr + (byte) 3
  to:sprites_irq::@5
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  [575] (volatile byte) irq_raster_next ← (volatile byte) irq_raster_next + (byte) $15
  [576] (volatile byte) irq_sprite_ypos ← (const nomodify byte) SPRITES_FIRST_YPOS
  to:sprites_irq::toSpritePtr1
sprites_irq::toSpritePtr1: scope:[sprites_irq]  from sprites_irq::@3
  [577] phi()
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr1
  [578] (volatile byte) irq_sprite_ptr ← (const byte) sprites_irq::toSpritePtr1_return#0
  to:sprites_irq::@5
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  [579] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1) ← (byte) sprites_irq::ptr#0
  [580] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [581] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 1) ← (byte) sprites_irq::ptr#1
  [582] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 2) ← (byte) sprites_irq::ptr#1
  [583] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [584] *((const nomodify byte*) PLAYFIELD_SPRITE_PTRS_1+(byte) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2
