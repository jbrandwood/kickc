constant const word COUNT = $4000
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte* const SCREEN = (byte*) 1024
constant const byte SQRT_COUNT = $80
void main()
byte*~ main::$16 zp[2]:12 22.0
word main::i
word main::i#10 i_1 zp[2]:4 6.111111111111112
word main::i#12 i zp[2]:10 24.6
word main::i#2 i zp[2]:10 11.0
word main::i#3 i_1 zp[2]:4 22.0
word main::j
word main::j#0 j zp[2]:6 16.5
word main::j#1 j zp[2]:6 202.0
word main::j#2 j zp[2]:6 78.5
byte* main::s
byte* main::s#0 s zp[2]:8 22.0
byte* main::s#1 s zp[2]:8 101.0
byte* main::s#2 s zp[2]:8 104.66666666666666
byte* main::sieve_i
byte* main::sieve_i#1 sieve_i zp[2]:2 22.0
byte* main::sieve_i#2 sieve_i zp[2]:2 3.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
constant byte memset::c#0 c = 0
byte* memset::dst
byte* memset::dst#1 dst zp[2]:12 202.0
byte* memset::dst#2 dst zp[2]:12 134.66666666666666
byte* memset::end
constant byte* memset::end#0 end = (byte*)memset::str#0+COUNT
word memset::num
void* memset::return
void* memset::str
constant void* memset::str#0 str = (void*)sieve
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 2002.0
byte print_char::ch#1 reg byte a 2002.0
byte print_char::ch#3 reg byte a 12003.0
byte* print_char_cursor
byte* print_char_cursor#20 print_char_cursor zp[2]:10 11007.5
byte* print_char_cursor#21 print_char_cursor zp[2]:10 794.6428571428571
byte* print_char_cursor#28 print_char_cursor zp[2]:10 401.00000000000006
byte* print_char_cursor#29 print_char_cursor zp[2]:10 20.5
byte* print_char_cursor#35 print_char_cursor zp[2]:10 16.5
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 202.0
byte print_uchar::b#1 reg byte x 202.0
byte print_uchar::b#2 reg byte x 551.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:4 71.0
constant byte* sieve = (byte*) 4096

zp[2]:2 [ main::sieve_i#2 main::sieve_i#1 ]
zp[2]:4 [ main::i#10 main::i#3 print_uint::w#0 ]
zp[2]:6 [ main::j#2 main::j#1 main::j#0 ]
zp[2]:8 [ main::s#2 main::s#1 main::s#0 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 ]
zp[2]:10 [ print_char_cursor#20 print_char_cursor#29 print_char_cursor#35 print_char_cursor#21 print_char_cursor#28 main::i#12 main::i#2 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:12 [ main::$16 memset::dst#2 memset::dst#1 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
