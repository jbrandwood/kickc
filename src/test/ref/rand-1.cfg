
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] conio_textcolor = LIGHT_BLUE
  [6] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [7] phi()
  [8] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [10] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [11] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [12] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [13] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [14] gotoxy::y#2 = conio_c64_init::line#2
  [15] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [16] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [17] phi()
  [18] call clrscr 
  to:main::@6
main::@6: scope:[main]  from main
  [19] phi()
  [20] call textcolor 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [21] phi()
  [22] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [23] phi()
  [24] call rand 
  [25] rand::return#2 = rand::return#0
  to:main::@9
main::@9: scope:[main]  from main::@8
  [26] main::first#0 = rand::return#2
  [27] call textcolor 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [28] main::rnd#5 = main::first#0
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@11
  [29] main::rnd#2 = phi( main::@10/main::rnd#5, main::@11/main::rnd#1 )
  [29] main::row#3 = phi( main::@10/1, main::@11/main::row#7 )
  [29] main::col#3 = phi( main::@10/3, main::@11/main::col#7 )
  [29] main::cnt#2 = phi( main::@10/0, main::@11/main::cnt#1 )
  [30] main::cnt#1 = ++ main::cnt#2
  [31] main::$18 = (byte)main::cnt#1
  [32] if(main::$18!=0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [33] gotoxy::x#3 = main::col#3
  [34] gotoxy::y#3 = main::row#3
  [35] call gotoxy 
  to:main::@12
main::@12: scope:[main]  from main::@3
  [36] printf_uint::uvalue#0 = main::rnd#2
  [37] call printf_uint 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [38] main::row#1 = ++ main::row#3
  [39] if(main::row#1!=$19) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@13
  [40] main::col#1 = main::col#3 + 6
  [41] if(main::col#1<$28-5+1) goto main::@17
  to:main::@2
main::@17: scope:[main]  from main::@4
  [42] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@13 main::@17 main::@4
  [43] main::row#7 = phi( main::@1/main::row#3, main::@13/main::row#1, main::@17/1, main::@4/1 )
  [43] main::col#7 = phi( main::@1/main::col#3, main::@13/main::col#3, main::@17/main::col#1, main::@4/3 )
  [44] call rand 
  [45] rand::return#3 = rand::return#0
  to:main::@11
main::@11: scope:[main]  from main::@2
  [46] main::rnd#1 = rand::return#3
  [47] if(main::rnd#1!=main::first#0) goto main::@1
  to:main::@5
main::@5: scope:[main]  from main::@11
  [48] phi()
  [49] call gotoxy 
  to:main::@14
main::@14: scope:[main]  from main::@5
  [50] phi()
  [51] call textcolor 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [52] phi()
  [53] call cputs 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [54] printf_ulong::uvalue#0 = main::cnt#1
  [55] call printf_ulong 
  to:main::@return
main::@return: scope:[main]  from main::@16
  [56] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 main::@3 main::@5
  [57] gotoxy::x#5 = phi( conio_c64_init::@1/0, main::@3/gotoxy::x#3, main::@5/$1c )
  [57] gotoxy::y#5 = phi( conio_c64_init::@1/gotoxy::y#2, main::@3/gotoxy::y#3, main::@5/0 )
  [58] if(gotoxy::y#5<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [59] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [60] gotoxy::y#6 = phi( gotoxy::@3/gotoxy::y#5, gotoxy/0 )
  [61] if(gotoxy::x#5<$28) goto gotoxy::@4
  to:gotoxy::@2
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  [62] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  [63] gotoxy::x#6 = phi( gotoxy::@4/gotoxy::x#5, gotoxy::@1/0 )
  [64] conio_cursor_x = gotoxy::x#6
  [65] conio_cursor_y = gotoxy::y#6
  [66] gotoxy::$7 = (word)gotoxy::y#6
  [67] gotoxy::$8 = gotoxy::$7 << 2
  [68] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [69] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [70] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [71] conio_line_text = gotoxy::$5
  [72] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [73] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [74] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [75] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [76] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [76] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [76] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [77] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [78] conio_cursor_x = 0
  [79] conio_cursor_y = 0
  [80] conio_line_text = DEFAULT_SCREEN
  [81] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [82] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [83] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [84] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [85] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [86] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [87] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [88] clrscr::line_text#5[clrscr::c#2] = ' '
  [89] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor
  [90] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

byte textcolor(byte textcolor::color)
textcolor: scope:[textcolor]  from main::@14 main::@6 main::@9
  [91] textcolor::color#3 = phi( main::@9/LIGHT_BLUE, main::@14/WHITE, main::@6/WHITE )
  [92] conio_textcolor = textcolor::color#3
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [93] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@15 main::@7 printf_number_buffer::@5
  [94] cputs::s#5 = phi( main::@15/main::s1, main::@7/main::s, printf_number_buffer::@5/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [95] cputs::s#4 = phi( cputs/cputs::s#5, cputs::@2/cputs::s#0 )
  [96] cputs::c#1 = *cputs::s#4
  [97] cputs::s#0 = ++ cputs::s#4
  [98] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [99] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [100] cputc::c#0 = cputs::c#1
  [101] call cputc 
  to:cputs::@1

word rand()
rand: scope:[rand]  from main::@2 main::@8
  [102] rand_state#10 = phi( main::@2/rand_state#11, main::@8/1 )
  [103] rand::$0 = rand_state#10 << 7
  [104] rand_state#0 = rand_state#10 ^ rand::$0
  [105] rand::$1 = rand_state#0 >> 9
  [106] rand_state#1 = rand_state#0 ^ rand::$1
  [107] rand::$2 = rand_state#1 << 8
  [108] rand_state#11 = rand_state#1 ^ rand::$2
  [109] rand::return#0 = rand_state#11
  to:rand::@return
rand::@return: scope:[rand]  from rand
  [110] return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@12
  [111] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [112] *((byte*)&printf_buffer) = 0
  [113] utoa::value#1 = printf_uint::uvalue#0
  [114] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [115] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer)
  [116] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [117] return 
  to:@return

void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@16
  [118] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [119] *((byte*)&printf_buffer) = 0
  [120] ultoa::value#1 = printf_ulong::uvalue#0
  [121] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [122] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [123] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [124] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [125] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  [126] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [127] conio_line_text[conio_cursor_x] = cputc::c#3
  [128] conio_line_color[conio_cursor_x] = conio_textcolor
  [129] conio_cursor_x = ++ conio_cursor_x
  [130] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [131] phi()
  [132] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [133] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [134] phi()
  [135] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [136] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [137] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [137] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [137] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [137] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [138] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [139] utoa::$11 = (byte)utoa::value#2
  [140] *utoa::buffer#11 = DIGITS[utoa::$11]
  [141] utoa::buffer#3 = ++ utoa::buffer#11
  [142] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [143] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [144] utoa::$10 = utoa::digit#2 << 1
  [145] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [146] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [147] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [148] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [148] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [148] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [149] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [150] utoa_append::buffer#0 = utoa::buffer#11
  [151] utoa_append::value#0 = utoa::value#2
  [152] utoa_append::sub#0 = utoa::digit_value#0
  [153] call utoa_append 
  [154] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [155] utoa::value#0 = utoa_append::return#0
  [156] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2 printf_ulong::@2
  [157] printf_number_buffer::format_upper_case#10 = phi( printf_uint::@2/printf_uint::format_upper_case#0, printf_ulong::@2/printf_ulong::format_upper_case#0 )
  [157] printf_number_buffer::buffer_sign#10 = phi( printf_uint::@2/printf_number_buffer::buffer_sign#1, printf_ulong::@2/printf_number_buffer::buffer_sign#0 )
  [157] printf_number_buffer::format_zero_padding#10 = phi( printf_uint::@2/printf_uint::format_zero_padding#0, printf_ulong::@2/printf_ulong::format_zero_padding#0 )
  [157] printf_number_buffer::format_justify_left#10 = phi( printf_uint::@2/printf_uint::format_justify_left#0, printf_ulong::@2/printf_ulong::format_justify_left#0 )
  [157] printf_number_buffer::format_min_length#2 = phi( printf_uint::@2/printf_uint::format_min_length#0, printf_ulong::@2/printf_ulong::format_min_length#0 )
  [158] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [159] phi()
  [160] call strlen 
  [161] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [162] printf_number_buffer::$19 = strlen::return#2
  [163] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [164] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [165] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [166] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [167] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2
  [168] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [169] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [170] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [171] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [172] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [173] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [174] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [175] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [176] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [177] cputc::c#2 = printf_number_buffer::buffer_sign#10
  [178] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [179] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [180] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [181] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [182] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [183] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [184] phi()
  [185] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [186] phi()
  [187] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [188] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [189] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [190] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [191] printf_padding::length#2 = (byte)printf_number_buffer::padding#10
  [192] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [193] return 
  to:@return

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [194] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [195] ultoa::buffer#11 = phi( ultoa::@4/ultoa::buffer#14, ultoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [195] ultoa::started#2 = phi( ultoa::@4/ultoa::started#4, ultoa/0 )
  [195] ultoa::value#2 = phi( ultoa::@4/ultoa::value#6, ultoa/ultoa::value#1 )
  [195] ultoa::digit#2 = phi( ultoa::@4/ultoa::digit#1, ultoa/0 )
  [196] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [197] ultoa::$11 = (byte)ultoa::value#2
  [198] *ultoa::buffer#11 = DIGITS[ultoa::$11]
  [199] ultoa::buffer#3 = ++ ultoa::buffer#11
  [200] *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [201] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [202] ultoa::$10 = ultoa::digit#2 << 2
  [203] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10]
  [204] if(0!=ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [205] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [206] ultoa::buffer#14 = phi( ultoa::@7/ultoa::buffer#11, ultoa::@6/ultoa::buffer#4 )
  [206] ultoa::started#4 = phi( ultoa::@7/ultoa::started#2, ultoa::@6/1 )
  [206] ultoa::value#6 = phi( ultoa::@7/ultoa::value#2, ultoa::@6/ultoa::value#0 )
  [207] ultoa::digit#1 = ++ ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [208] ultoa_append::buffer#0 = ultoa::buffer#11
  [209] ultoa_append::value#0 = ultoa::value#2
  [210] ultoa_append::sub#0 = ultoa::digit_value#0
  [211] call ultoa_append 
  [212] ultoa_append::return#0 = ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [213] ultoa::value#0 = ultoa_append::return#0
  [214] ultoa::buffer#4 = ++ ultoa::buffer#11
  to:ultoa::@4

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [215] conio_line_text = conio_line_text + $28
  [216] conio_line_color = conio_line_color + $28
  [217] conio_cursor_x = 0
  [218] conio_cursor_y = ++ conio_cursor_y
  [219] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [220] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [221] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [222] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [222] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [223] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [224] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [225] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [226] utoa_append::digit#1 = ++ utoa_append::digit#2
  [227] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [228] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [229] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [229] strlen::str#2 = phi( strlen/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [230] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [231] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [232] strlen::len#1 = ++ strlen::len#2
  [233] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [234] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [234] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [235] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [236] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [237] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [238] cputc::c#1 = printf_padding::pad#5
  [239] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [240] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [241] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [242] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [243] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [244] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [245] toupper::ch#0 = *strupr::src#2
  [246] call toupper 
  [247] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [248] strupr::$0 = toupper::return#3
  [249] *strupr::src#2 = strupr::$0
  [250] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [251] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [252] ultoa_append::digit#2 = phi( ultoa_append/0, ultoa_append::@2/ultoa_append::digit#1 )
  [252] ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#0, ultoa_append::@2/ultoa_append::value#1 )
  [253] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [254] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2]
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [255] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [256] ultoa_append::digit#1 = ++ ultoa_append::digit#2
  [257] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0
  to:ultoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [258] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [259] phi()
  [260] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [261] phi()
  [262] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [263] phi()
  [264] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [265] memset::c#1 = conio_textcolor
  [266] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [267] conio_line_text = conio_line_text - $28
  [268] conio_line_color = conio_line_color - $28
  [269] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [270] return 
  to:@return

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [271] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [272] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [273] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [274] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [275] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [276] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [276] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [277] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [278] memcpy::src#4 = (byte*)memcpy::source#2
  [279] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [280] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [280] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [281] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [282] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [283] *memcpy::dst#2 = *memcpy::src#2
  [284] memcpy::dst#1 = ++ memcpy::dst#2
  [285] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [286] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/memset::c#1 )
  [286] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [287] memset::end#0 = (byte*)memset::str#3 + $28
  [288] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [289] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [290] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [291] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [292] *memset::dst#2 = memset::c#4
  [293] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
