Added struct type cast to parameter value list call printf_uint (word) main::pct (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) HEXADECIMAL } 
Inlined call call _init 
Eliminating unused variable with no statement (void~) main::$0

CONTROL FLOW GRAPH SSA

(void()) cputs((byte*) cputs::str)
cputs: scope:[cputs]  from main main::@2
  (byte*) screen#27 ← phi( main/(byte*) screen#25 main::@2/(byte*) screen#8 )
  (byte*) cputs::str#5 ← phi( main/(byte*) cputs::str#1 main::@2/(byte*) cputs::str#2 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  (byte*) screen#24 ← phi( cputs/(byte*) screen#27 cputs::@2/(byte*) screen#0 )
  (byte*) cputs::str#3 ← phi( cputs/(byte*) cputs::str#5 cputs::@2/(byte*) cputs::str#0 )
  (bool~) cputs::$0 ← (number) 0 != *((byte*) cputs::str#3)
  if((bool~) cputs::$0) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (byte*) screen#14 ← phi( cputs::@1/(byte*) screen#24 )
  (byte*) cputs::str#4 ← phi( cputs::@1/(byte*) cputs::str#3 )
  *((byte*) screen#14) ← *((byte*) cputs::str#4)
  (byte*) screen#0 ← ++ (byte*) screen#14
  (byte*) cputs::str#0 ← ++ (byte*) cputs::str#4
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  (byte*) screen#15 ← phi( cputs::@1/(byte*) screen#24 )
  (byte*) screen#1 ← (byte*) screen#15
  return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@1
  (byte*) screen#16 ← phi( main::@1/(byte*) screen#7 )
  (word) printf_uint::uvalue#1 ← phi( main::@1/(word) printf_uint::uvalue#0 )
  (byte~) printf_uint::$0 ← > (word) printf_uint::uvalue#1
  (byte~) printf_uint::$1 ← (byte~) printf_uint::$0 >> (number) 4
  *((byte*) screen#16) ← *((const to_nomodify byte*) printf_hextab + (byte~) printf_uint::$1)
  (byte*) screen#2 ← ++ (byte*) screen#16
  (byte~) printf_uint::$2 ← > (word) printf_uint::uvalue#1
  (number~) printf_uint::$3 ← (byte~) printf_uint::$2 & (number) $f
  *((byte*) screen#2) ← *((const to_nomodify byte*) printf_hextab + (number~) printf_uint::$3)
  (byte*) screen#3 ← ++ (byte*) screen#2
  (byte~) printf_uint::$4 ← < (word) printf_uint::uvalue#1
  (byte~) printf_uint::$5 ← (byte~) printf_uint::$4 >> (number) 4
  *((byte*) screen#3) ← *((const to_nomodify byte*) printf_hextab + (byte~) printf_uint::$5)
  (byte*) screen#4 ← ++ (byte*) screen#3
  (byte~) printf_uint::$6 ← < (word) printf_uint::uvalue#1
  (number~) printf_uint::$7 ← (byte~) printf_uint::$6 & (number) $f
  *((byte*) screen#4) ← *((const to_nomodify byte*) printf_hextab + (number~) printf_uint::$7)
  (byte*) screen#5 ← ++ (byte*) screen#4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint
  (byte*) screen#17 ← phi( printf_uint/(byte*) screen#5 )
  (byte*) screen#6 ← (byte*) screen#17
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) screen#25 ← phi( _start::@1/(byte*) screen#26 )
  (byte*) cputs::str#1 ← (const byte*) main::str
  call cputs 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#18 ← phi( main/(byte*) screen#1 )
  (byte*) screen#7 ← (byte*) screen#18
  (word) printf_uint::uvalue#0 ← (const word) main::pct
  (byte) printf_uint::format_min_length#0 ← (byte) 0
  (byte) printf_uint::format_justify_left#0 ← (byte) 0
  (byte) printf_uint::format_sign_always#0 ← (byte) 0
  (byte) printf_uint::format_zero_padding#0 ← (byte) 0
  (byte) printf_uint::format_upper_case#0 ← (byte) 0
  (byte) printf_uint::format_radix#0 ← (const byte) HEXADECIMAL
  call printf_uint 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#19 ← phi( main::@1/(byte*) screen#6 )
  (byte*) screen#8 ← (byte*) screen#19
  (byte*) cputs::str#2 ← (const byte*) main::str1
  call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) screen#20 ← phi( main::@2/(byte*) screen#1 )
  (byte*) screen#9 ← (byte*) screen#20
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte*) screen#21 ← phi( main::@3/(byte*) screen#9 )
  (byte*) screen#10 ← (byte*) screen#21
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) screen#11 ← (byte*)(number) $400
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) screen#26 ← phi( _start::_init1/(byte*) screen#11 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) screen#22 ← phi( _start::@1/(byte*) screen#10 )
  (byte*) screen#12 ← (byte*) screen#22
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) screen#23 ← phi( _start::@2/(byte*) screen#12 )
  (byte*) screen#13 ← (byte*) screen#23
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) HEXADECIMAL = (number) $10
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) cputs((byte*) cputs::str)
(bool~) cputs::$0
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte*) cputs::str
(byte*) cputs::str#0
(byte*) cputs::str#1
(byte*) cputs::str#2
(byte*) cputs::str#3
(byte*) cputs::str#4
(byte*) cputs::str#5
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const word) main::pct = (word) $156
(const byte*) main::str[(byte) $e]  = (byte*) "Commodore is "
(const byte*) main::str1[(byte) 6]  = (byte*) " cool"
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(const to_nomodify byte*) printf_hextab[]  = (byte*) "0123456789abcdef"z
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(byte~) printf_uint::$0
(byte~) printf_uint::$1
(byte~) printf_uint::$2
(number~) printf_uint::$3
(byte~) printf_uint::$4
(byte~) printf_uint::$5
(byte~) printf_uint::$6
(number~) printf_uint::$7
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_justify_left#0
(byte) printf_uint::format_min_length
(byte) printf_uint::format_min_length#0
(byte) printf_uint::format_radix
(byte) printf_uint::format_radix#0
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_sign_always#0
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_upper_case#0
(byte) printf_uint::format_zero_padding
(byte) printf_uint::format_zero_padding#0
(word) printf_uint::uvalue
(word) printf_uint::uvalue#0
(word) printf_uint::uvalue#1
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#11
(byte*) screen#12
(byte*) screen#13
(byte*) screen#14
(byte*) screen#15
(byte*) screen#16
(byte*) screen#17
(byte*) screen#18
(byte*) screen#19
(byte*) screen#2
(byte*) screen#20
(byte*) screen#21
(byte*) screen#22
(byte*) screen#23
(byte*) screen#24
(byte*) screen#25
(byte*) screen#26
(byte*) screen#27
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

Adding number conversion cast (unumber) 0 in (bool~) cputs::$0 ← (number) 0 != *((byte*) cputs::str#3)
Adding number conversion cast (unumber) 4 in (byte~) printf_uint::$1 ← (byte~) printf_uint::$0 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) printf_uint::$3 ← (byte~) printf_uint::$2 & (number) $f
Adding number conversion cast (unumber) printf_uint::$3 in (number~) printf_uint::$3 ← (byte~) printf_uint::$2 & (unumber)(number) $f
Adding number conversion cast (unumber) 4 in (byte~) printf_uint::$5 ← (byte~) printf_uint::$4 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) printf_uint::$7 ← (byte~) printf_uint::$6 & (number) $f
Adding number conversion cast (unumber) printf_uint::$7 in (number~) printf_uint::$7 ← (byte~) printf_uint::$6 & (unumber)(number) $f
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) printf_uint::$3 ← (byte~) printf_uint::$2 & (byte) $f
Inferred type updated to byte in (unumber~) printf_uint::$7 ← (byte~) printf_uint::$6 & (byte) $f
Alias cputs::str#3 = cputs::str#4 
Alias screen#1 = screen#14 screen#24 screen#15 
Alias screen#17 = screen#5 screen#6 
Alias screen#18 = screen#7 
Alias screen#19 = screen#8 
Alias screen#10 = screen#9 screen#20 screen#21 
Alias screen#11 = screen#26 
Alias screen#12 = screen#22 screen#23 screen#13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) printf_uint::uvalue#1 (word) printf_uint::uvalue#0
Identical Phi Values (byte*) screen#16 (byte*) screen#18
Identical Phi Values (byte*) screen#25 (byte*) screen#11
Identical Phi Values (byte*) screen#18 (byte*) screen#1
Identical Phi Values (byte*) screen#19 (byte*) screen#17
Identical Phi Values (byte*) screen#10 (byte*) screen#1
Identical Phi Values (byte*) screen#12 (byte*) screen#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [16] (byte~) printf_uint::$2 ← > (word) printf_uint::uvalue#0
Identified duplicate assignment right side [24] (byte~) printf_uint::$6 ← < (word) printf_uint::uvalue#0
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) cputs::$0 [3] if((byte) 0!=*((byte*) cputs::str#3)) goto cputs::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) cputs::str#1 = main::str
Constant (const word) printf_uint::uvalue#0 = main::pct
Constant (const byte) printf_uint::format_min_length#0 = 0
Constant (const byte) printf_uint::format_justify_left#0 = 0
Constant (const byte) printf_uint::format_sign_always#0 = 0
Constant (const byte) printf_uint::format_zero_padding#0 = 0
Constant (const byte) printf_uint::format_upper_case#0 = 0
Constant (const byte) printf_uint::format_radix#0 = HEXADECIMAL
Constant (const byte*) cputs::str#2 = main::str1
Constant (const byte*) screen#11 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) printf_uint::format_min_length#0
Eliminating unused constant (const byte) printf_uint::format_justify_left#0
Eliminating unused constant (const byte) printf_uint::format_sign_always#0
Eliminating unused constant (const byte) printf_uint::format_zero_padding#0
Eliminating unused constant (const byte) printf_uint::format_upper_case#0
Eliminating unused constant (const byte) printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) HEXADECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias printf_uint::$2 = printf_uint::$0 
Alias printf_uint::$6 = printf_uint::$4 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [7] (byte~) printf_uint::$2 ← > (const word) printf_uint::uvalue#0
Constant right-side identified [14] (byte~) printf_uint::$6 ← < (const word) printf_uint::uvalue#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) printf_uint::$2 = >printf_uint::uvalue#0
Constant (const byte) printf_uint::$6 = <printf_uint::uvalue#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] (byte~) printf_uint::$1 ← (const byte) printf_uint::$2 >> (byte) 4
Constant right-side identified [10] (byte~) printf_uint::$3 ← (const byte) printf_uint::$2 & (byte) $f
Constant right-side identified [13] (byte~) printf_uint::$5 ← (const byte) printf_uint::$6 >> (byte) 4
Constant right-side identified [16] (byte~) printf_uint::$7 ← (const byte) printf_uint::$6 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) printf_uint::$1 = printf_uint::$2>>4
Constant (const byte) printf_uint::$3 = printf_uint::$2&$f
Constant (const byte) printf_uint::$5 = printf_uint::$6>>4
Constant (const byte) printf_uint::$7 = printf_uint::$6&$f
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const byte) printf_uint::$2>>(byte) 4 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero printf_hextab in [8] *((byte*) screen#1) ← *((const to_nomodify byte*) printf_hextab + (const byte) printf_uint::$1)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) printf_uint::$1
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) cputs::str#1
Inlining constant with var siblings (const byte*) cputs::str#2
Inlining constant with var siblings (const byte*) screen#11
Constant inlined cputs::str#1 = (const byte*) main::str
Constant inlined cputs::str#2 = (const byte*) main::str1
Constant inlined screen#11 = (byte*) 1024
Constant inlined printf_uint::$3 = >(const word) main::pct&(byte) $f
Constant inlined printf_uint::uvalue#0 = (const word) main::pct
Constant inlined printf_uint::$2 = >(const word) main::pct
Constant inlined printf_uint::$5 = <(const word) main::pct>>(byte) 4
Constant inlined printf_uint::$7 = <(const word) main::pct&(byte) $f
Constant inlined printf_uint::$6 = <(const word) main::pct
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(printf_hextab+>main::pct&$f)
Consolidated array index constant in *(printf_hextab+<main::pct>>4)
Consolidated array index constant in *(printf_hextab+<main::pct&$f)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [main] to cputs:1 printf_uint:3 cputs:5 

Created 4 initial phi equivalence classes
Coalesced [4] screen#28 ← screen#17
Coalesced [9] cputs::str#6 ← cputs::str#5
Coalesced [10] screen#29 ← screen#27
Coalesced [17] cputs::str#7 ← cputs::str#0
Coalesced [18] screen#30 ← screen#0
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call cputs 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call printf_uint 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

(void()) cputs((byte*) cputs::str)
cputs: scope:[cputs]  from main main::@2
  [7] (byte*) screen#27 ← phi( main/(byte*) 1024 main::@2/(byte*) screen#17 )
  [7] (byte*) cputs::str#5 ← phi( main/(const byte*) main::str main::@2/(const byte*) main::str1 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [8] (byte*) screen#1 ← phi( cputs/(byte*) screen#27 cputs::@2/(byte*) screen#0 )
  [8] (byte*) cputs::str#3 ← phi( cputs/(byte*) cputs::str#5 cputs::@2/(byte*) cputs::str#0 )
  [9] if((byte) 0!=*((byte*) cputs::str#3)) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [10] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [11] *((byte*) screen#1) ← *((byte*) cputs::str#3)
  [12] (byte*) screen#0 ← ++ (byte*) screen#1
  [13] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#3
  to:cputs::@1

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@1
  [14] *((byte*) screen#1) ← *((const to_nomodify byte*) printf_hextab)
  [15] (byte*) screen#2 ← ++ (byte*) screen#1
  [16] *((byte*) screen#2) ← *((const to_nomodify byte*) printf_hextab+>(const word) main::pct&(byte) $f)
  [17] (byte*) screen#3 ← ++ (byte*) screen#2
  [18] *((byte*) screen#3) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct>>(byte) 4)
  [19] (byte*) screen#4 ← ++ (byte*) screen#3
  [20] *((byte*) screen#4) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct&(byte) $f)
  [21] (byte*) screen#17 ← ++ (byte*) screen#4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint
  [22] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) cputs((byte*) cputs::str)
(byte*) cputs::str
(byte*) cputs::str#0 202.0
(byte*) cputs::str#3 103.75
(byte*) cputs::str#5 11.0
(void()) main()
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(byte*) screen
(byte*) screen#0 101.0
(byte*) screen#1 48.0
(byte*) screen#17 3.25
(byte*) screen#2 16.5
(byte*) screen#27 13.0
(byte*) screen#3 16.5
(byte*) screen#4 16.5

Initial phi equivalence classes
[ cputs::str#3 cputs::str#5 cputs::str#0 ]
[ screen#1 screen#27 screen#17 screen#0 ]
Added variable screen#2 to live range equivalence class [ screen#2 ]
Added variable screen#3 to live range equivalence class [ screen#3 ]
Added variable screen#4 to live range equivalence class [ screen#4 ]
Complete equivalence classes
[ cputs::str#3 cputs::str#5 cputs::str#0 ]
[ screen#1 screen#27 screen#17 screen#0 ]
[ screen#2 ]
[ screen#3 ]
[ screen#4 ]
Allocated zp[2]:2 [ cputs::str#3 cputs::str#5 cputs::str#0 ]
Allocated zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ]
Allocated zp[2]:6 [ screen#2 ]
Allocated zp[2]:8 [ screen#3 ]
Allocated zp[2]:10 [ screen#4 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests printf function call rewriting
// A simple number - with the printf-sub funtions in the same file.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 4
  .label screen_1 = 6
  .label screen_2 = 8
  .label screen_3 = $a
  // main
main: {
    .label pct = $156
    // [1] call cputs 
    // [7] phi from main to cputs [phi:main->cputs]
  cputs_from_main:
    // [7] phi (byte*) screen#27 = (byte*) 1024 [phi:main->cputs#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [7] phi (byte*) cputs::str#5 = (const byte*) main::str [phi:main->cputs#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z cputs.str
    lda #>str
    sta.z cputs.str+1
    jsr cputs
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call printf_uint 
    jsr printf_uint
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call cputs 
    // [7] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [7] phi (byte*) screen#27 = (byte*) screen#17 [phi:main::@2->cputs#0] -- register_copy 
    // [7] phi (byte*) cputs::str#5 = (const byte*) main::str1 [phi:main::@2->cputs#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z cputs.str
    lda #>str1
    sta.z cputs.str+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
    str: .text "Commodore is "
    .byte 0
    str1: .text " cool"
    .byte 0
}
  // cputs
// cputs(byte* zp(2) str)
cputs: {
    .label str = 2
    // [8] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [8] phi (byte*) screen#1 = (byte*) screen#27 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [8] phi (byte*) cputs::str#3 = (byte*) cputs::str#5 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [9] if((byte) 0!=*((byte*) cputs::str#3)) goto cputs::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [10] return 
    rts
    // cputs::@2
  __b2:
    // [11] *((byte*) screen#1) ← *((byte*) cputs::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (screen),y
    // [12] (byte*) screen#0 ← ++ (byte*) screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // printf_uint
// Print an unsigned int using a specific format
// Always prints hexadecimals - ignores min_length and flags
printf_uint: {
    // [14] *((byte*) screen#1) ← *((const to_nomodify byte*) printf_hextab) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab
    ldy #0
    sta (screen),y
    // [15] (byte*) screen#2 ← ++ (byte*) screen#1 -- pbuz1=_inc_pbuz2 
    lda.z screen
    clc
    adc #1
    sta.z screen_1
    lda.z screen+1
    adc #0
    sta.z screen_1+1
    // [16] *((byte*) screen#2) ← *((const to_nomodify byte*) printf_hextab+>(const word) main::pct&(byte) $f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((>main.pct)&$f)
    ldy #0
    sta (screen_1),y
    // [17] (byte*) screen#3 ← ++ (byte*) screen#2 -- pbuz1=_inc_pbuz2 
    lda.z screen_1
    clc
    adc #1
    sta.z screen_2
    lda.z screen_1+1
    adc #0
    sta.z screen_2+1
    // [18] *((byte*) screen#3) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct>>(byte) 4) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)>>4)
    ldy #0
    sta (screen_2),y
    // [19] (byte*) screen#4 ← ++ (byte*) screen#3 -- pbuz1=_inc_pbuz2 
    lda.z screen_2
    clc
    adc #1
    sta.z screen_3
    lda.z screen_2+1
    adc #0
    sta.z screen_3+1
    // [20] *((byte*) screen#4) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct&(byte) $f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)&$f)
    ldy #0
    sta (screen_3),y
    // [21] (byte*) screen#17 ← ++ (byte*) screen#4 -- pbuz1=_inc_pbuz2 
    lda.z screen_3
    clc
    adc #1
    sta.z screen
    lda.z screen_3+1
    adc #0
    sta.z screen+1
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [22] return 
    rts
}
  // File Data
  printf_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] if((byte) 0!=*((byte*) cputs::str#3)) goto cputs::@2 [ cputs::str#3 screen#1 ] ( cputs:1 [ cputs::str#3 screen#1 ] { }  cputs:5 [ cputs::str#3 screen#1 ] { { screen#17 = screen#27 } }  ) always clobbers reg byte a reg byte y 
Statement [11] *((byte*) screen#1) ← *((byte*) cputs::str#3) [ cputs::str#3 screen#1 ] ( cputs:1 [ cputs::str#3 screen#1 ] { }  cputs:5 [ cputs::str#3 screen#1 ] { { screen#17 = screen#27 } }  ) always clobbers reg byte a reg byte y 
Statement [14] *((byte*) screen#1) ← *((const to_nomodify byte*) printf_hextab) [ screen#1 ] ( printf_uint:3 [ screen#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [15] (byte*) screen#2 ← ++ (byte*) screen#1 [ screen#2 ] ( printf_uint:3 [ screen#2 ] { }  ) always clobbers reg byte a 
Statement [16] *((byte*) screen#2) ← *((const to_nomodify byte*) printf_hextab+>(const word) main::pct&(byte) $f) [ screen#2 ] ( printf_uint:3 [ screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [17] (byte*) screen#3 ← ++ (byte*) screen#2 [ screen#3 ] ( printf_uint:3 [ screen#3 ] { }  ) always clobbers reg byte a 
Statement [18] *((byte*) screen#3) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct>>(byte) 4) [ screen#3 ] ( printf_uint:3 [ screen#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [19] (byte*) screen#4 ← ++ (byte*) screen#3 [ screen#4 ] ( printf_uint:3 [ screen#4 ] { }  ) always clobbers reg byte a 
Statement [20] *((byte*) screen#4) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct&(byte) $f) [ screen#4 ] ( printf_uint:3 [ screen#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [21] (byte*) screen#17 ← ++ (byte*) screen#4 [ screen#17 ] ( printf_uint:3 [ screen#17 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ cputs::str#3 cputs::str#5 cputs::str#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ screen#2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ screen#3 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ screen#4 ] : zp[2]:10 , 

REGISTER UPLIFT SCOPES
Uplift Scope [cputs] 316.75: zp[2]:2 [ cputs::str#3 cputs::str#5 cputs::str#0 ] 
Uplift Scope [] 165.25: zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] 16.5: zp[2]:6 [ screen#2 ] 16.5: zp[2]:8 [ screen#3 ] 16.5: zp[2]:10 [ screen#4 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_uint] 
Uplift Scope [main] 

Uplifting [cputs] best 813 combination zp[2]:2 [ cputs::str#3 cputs::str#5 cputs::str#0 ] 
Uplifting [] best 813 combination zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] zp[2]:6 [ screen#2 ] zp[2]:8 [ screen#3 ] zp[2]:10 [ screen#4 ] 
Uplifting [RADIX] best 813 combination 
Uplifting [printf_format_number] best 813 combination 
Uplifting [printf_uint] best 813 combination 
Uplifting [main] best 813 combination 
Coalescing zero page register [ zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] ] with [ zp[2]:6 [ screen#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 ] ] with [ zp[2]:10 [ screen#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 screen#4 ] ] with [ zp[2]:8 [ screen#3 ] ] - score: 2

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf function call rewriting
// A simple number - with the printf-sub funtions in the same file.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 4
  // main
main: {
    .label pct = $156
    // [1] call cputs 
    // [7] phi from main to cputs [phi:main->cputs]
  cputs_from_main:
    // [7] phi (byte*) screen#27 = (byte*) 1024 [phi:main->cputs#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [7] phi (byte*) cputs::str#5 = (const byte*) main::str [phi:main->cputs#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z cputs.str
    lda #>str
    sta.z cputs.str+1
    jsr cputs
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call printf_uint 
    jsr printf_uint
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call cputs 
    // [7] phi from main::@2 to cputs [phi:main::@2->cputs]
  cputs_from___b2:
    // [7] phi (byte*) screen#27 = (byte*) screen#17 [phi:main::@2->cputs#0] -- register_copy 
    // [7] phi (byte*) cputs::str#5 = (const byte*) main::str1 [phi:main::@2->cputs#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z cputs.str
    lda #>str1
    sta.z cputs.str+1
    jsr cputs
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
    str: .text "Commodore is "
    .byte 0
    str1: .text " cool"
    .byte 0
}
  // cputs
// cputs(byte* zp(2) str)
cputs: {
    .label str = 2
    // [8] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [8] phi (byte*) screen#1 = (byte*) screen#27 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [8] phi (byte*) cputs::str#3 = (byte*) cputs::str#5 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [9] if((byte) 0!=*((byte*) cputs::str#3)) goto cputs::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [10] return 
    rts
    // cputs::@2
  __b2:
    // [11] *((byte*) screen#1) ← *((byte*) cputs::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (screen),y
    // [12] (byte*) screen#0 ← ++ (byte*) screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // printf_uint
// Print an unsigned int using a specific format
// Always prints hexadecimals - ignores min_length and flags
printf_uint: {
    // [14] *((byte*) screen#1) ← *((const to_nomodify byte*) printf_hextab) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab
    ldy #0
    sta (screen),y
    // [15] (byte*) screen#2 ← ++ (byte*) screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [16] *((byte*) screen#2) ← *((const to_nomodify byte*) printf_hextab+>(const word) main::pct&(byte) $f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((>main.pct)&$f)
    ldy #0
    sta (screen),y
    // [17] (byte*) screen#3 ← ++ (byte*) screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] *((byte*) screen#3) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct>>(byte) 4) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)>>4)
    ldy #0
    sta (screen),y
    // [19] (byte*) screen#4 ← ++ (byte*) screen#3 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [20] *((byte*) screen#4) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct&(byte) $f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)&$f)
    ldy #0
    sta (screen),y
    // [21] (byte*) screen#17 ← ++ (byte*) screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [22] return 
    rts
}
  // File Data
  printf_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction cputs_from___b2:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction cputs_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) cputs((byte*) cputs::str)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte*) cputs::str
(byte*) cputs::str#0 str zp[2]:2 202.0
(byte*) cputs::str#3 str zp[2]:2 103.75
(byte*) cputs::str#5 str zp[2]:2 11.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const word) main::pct = (word) $156
(const byte*) main::str[(byte) $e]  = (byte*) "Commodore is "
(const byte*) main::str1[(byte) 6]  = (byte*) " cool"
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(const to_nomodify byte*) printf_hextab[]  = (byte*) "0123456789abcdef"z
(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
(label) printf_uint::@return
(struct printf_format_number) printf_uint::format
(byte) printf_uint::format_justify_left
(byte) printf_uint::format_min_length
(byte) printf_uint::format_radix
(byte) printf_uint::format_sign_always
(byte) printf_uint::format_upper_case
(byte) printf_uint::format_zero_padding
(word) printf_uint::uvalue
(byte*) screen
(byte*) screen#0 screen zp[2]:4 101.0
(byte*) screen#1 screen zp[2]:4 48.0
(byte*) screen#17 screen zp[2]:4 3.25
(byte*) screen#2 screen zp[2]:4 16.5
(byte*) screen#27 screen zp[2]:4 13.0
(byte*) screen#3 screen zp[2]:4 16.5
(byte*) screen#4 screen zp[2]:4 16.5

zp[2]:2 [ cputs::str#3 cputs::str#5 cputs::str#0 ]
zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 screen#4 screen#3 ]


FINAL ASSEMBLER
Score: 697

  // File Comments
// Tests printf function call rewriting
// A simple number - with the printf-sub funtions in the same file.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 4
  // main
main: {
    .label pct = $156
    // printf("Commodore is %x cool", pct)
    // [1] call cputs 
    // [7] phi from main to cputs [phi:main->cputs]
    // [7] phi (byte*) screen#27 = (byte*) 1024 [phi:main->cputs#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [7] phi (byte*) cputs::str#5 = (const byte*) main::str [phi:main->cputs#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z cputs.str
    lda #>str
    sta.z cputs.str+1
    jsr cputs
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf("Commodore is %x cool", pct)
    // [3] call printf_uint 
    jsr printf_uint
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf("Commodore is %x cool", pct)
    // [5] call cputs 
    // [7] phi from main::@2 to cputs [phi:main::@2->cputs]
    // [7] phi (byte*) screen#27 = (byte*) screen#17 [phi:main::@2->cputs#0] -- register_copy 
    // [7] phi (byte*) cputs::str#5 = (const byte*) main::str1 [phi:main::@2->cputs#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z cputs.str
    lda #>str1
    sta.z cputs.str+1
    jsr cputs
    // main::@return
    // }
    // [6] return 
    rts
    str: .text "Commodore is "
    .byte 0
    str1: .text " cool"
    .byte 0
}
  // cputs
// cputs(byte* zp(2) str)
cputs: {
    .label str = 2
    // [8] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [8] phi (byte*) screen#1 = (byte*) screen#27 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [8] phi (byte*) cputs::str#3 = (byte*) cputs::str#5 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    // cputs::@1
  __b1:
    // while(*str)
    // [9] if((byte) 0!=*((byte*) cputs::str#3)) goto cputs::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [10] return 
    rts
    // cputs::@2
  __b2:
    // *screen++ = *str++
    // [11] *((byte*) screen#1) ← *((byte*) cputs::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (screen),y
    // *screen++ = *str++;
    // [12] (byte*) screen#0 ← ++ (byte*) screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] (byte*) cputs::str#0 ← ++ (byte*) cputs::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // printf_uint
// Print an unsigned int using a specific format
// Always prints hexadecimals - ignores min_length and flags
printf_uint: {
    // *screen++ = printf_hextab[(>uvalue)>>4]
    // [14] *((byte*) screen#1) ← *((const to_nomodify byte*) printf_hextab) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[(>uvalue)>>4];
    // [15] (byte*) screen#2 ← ++ (byte*) screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen++ = printf_hextab[(>uvalue)&0xf]
    // [16] *((byte*) screen#2) ← *((const to_nomodify byte*) printf_hextab+>(const word) main::pct&(byte) $f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((>main.pct)&$f)
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[(>uvalue)&0xf];
    // [17] (byte*) screen#3 ← ++ (byte*) screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen++ = printf_hextab[(<uvalue)>>4]
    // [18] *((byte*) screen#3) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct>>(byte) 4) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)>>4)
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[(<uvalue)>>4];
    // [19] (byte*) screen#4 ← ++ (byte*) screen#3 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen++ = printf_hextab[(<uvalue)&0xf]
    // [20] *((byte*) screen#4) ← *((const to_nomodify byte*) printf_hextab+<(const word) main::pct&(byte) $f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)&$f)
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[(<uvalue)&0xf];
    // [21] (byte*) screen#17 ← ++ (byte*) screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // printf_uint::@return
    // }
    // [22] return 
    rts
}
  // File Data
  printf_hextab: .text "0123456789abcdef"

