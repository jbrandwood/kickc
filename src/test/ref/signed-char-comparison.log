Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (signed byte) main::dy#0 ← (signed byte) -$80
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (signed byte) main::dy#2 ← phi( main/(signed byte) main::dy#0 main::@2/(signed byte) main::dy#1 )
  (signed byte) debug::dy#0 ← (signed byte) main::dy#2
  call debug 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed byte) main::dy#3 ← phi( main::@1/(signed byte) main::dy#2 )
  (signed byte) main::dy#1 ← (signed byte) main::dy#3 + rangenext(-$80,$7f)
  (bool~) main::$1 ← (signed byte) main::dy#1 != rangelast(-$80,$7f)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) debug((signed byte) debug::dy)
debug: scope:[debug]  from main::@1
  (signed byte) debug::dy#1 ← phi( main::@1/(signed byte) debug::dy#0 )
  (byte) debug::i#0 ← (byte)(signed byte) debug::dy#1
  (bool~) debug::$0 ← (signed byte) debug::dy#1 > (number) -$78
  (bool~) debug::$1 ← ! (bool~) debug::$0
  if((bool~) debug::$1) goto debug::@return
  to:debug::@1
debug::@1: scope:[debug]  from debug
  (byte) debug::i#1 ← phi( debug/(byte) debug::i#0 )
  *((const byte*) SCREEN + (byte) debug::i#1) ← (number) $a
  to:debug::@return
debug::@return: scope:[debug]  from debug debug::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) debug((signed byte) debug::dy)
(bool~) debug::$0
(bool~) debug::$1
(label) debug::@1
(label) debug::@return
(signed byte) debug::dy
(signed byte) debug::dy#0
(signed byte) debug::dy#1
(byte) debug::i
(byte) debug::i#0
(byte) debug::i#1
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::dy
(signed byte) main::dy#0
(signed byte) main::dy#1
(signed byte) main::dy#2
(signed byte) main::dy#3

Adding number conversion cast (snumber) -$78 in (bool~) debug::$0 ← (signed byte) debug::dy#1 > (number) -$78
Adding number conversion cast (unumber) $a in *((const byte*) SCREEN + (byte) debug::i#1) ← (number) $a
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const byte*) SCREEN + (byte) debug::i#1) ← (unumber)(number) $a
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast -$78
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized signed number type (signed byte) -$78
Finalized unsigned number type (byte) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [12] (bool~) debug::$1 ← (signed byte) debug::dy#1 <= (signed byte) -$78 from [11] (bool~) debug::$0 ← (signed byte) debug::dy#1 > (signed byte) -$78
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::dy#2 = main::dy#3 
Alias debug::i#0 = debug::i#1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (signed byte) debug::dy#1 (signed byte) debug::dy#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [6] if((signed byte) main::dy#1!=rangelast(-$80,$7f)) goto main::@1
Simple Condition (bool~) debug::$1 [11] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const signed byte) main::dy#0 = -$80
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] main::dy#1 ← ++ main::dy#2 to ++
Resolved ranged comparison value [6] if(main::dy#1!=rangelast(-$80,$7f)) goto main::@1 to (number) -$80
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (snumber) -$80 in [4] if((signed byte) main::dy#1!=(number) -$80) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast -$80
Successful SSA optimization PassNCastSimplification
Finalized signed number type (signed byte) -$80
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [6] (byte) debug::i#0 ← (byte)(signed byte) debug::dy#0 keeping debug::dy#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const signed byte) main::dy#0
Constant inlined main::dy#0 = (signed byte) -$80
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to debug:3 

Created 1 initial phi equivalence classes
Coalesced [7] main::dy#4 ← main::dy#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (signed byte) main::dy#2 ← phi( main/(signed byte) -$80 main::@2/(signed byte) main::dy#1 )
  [2] (signed byte) debug::dy#0 ← (signed byte) main::dy#2
  [3] call debug 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] (signed byte) main::dy#1 ← ++ (signed byte) main::dy#2
  [5] if((signed byte) main::dy#1!=(signed byte) -$80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

(void()) debug((signed byte) debug::dy)
debug: scope:[debug]  from main::@1
  [7] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return
  to:debug::@1
debug::@1: scope:[debug]  from debug
  [8] *((const byte*) SCREEN + (byte)(signed byte) debug::dy#0) ← (byte) $a
  to:debug::@return
debug::@return: scope:[debug]  from debug debug::@1
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) debug((signed byte) debug::dy)
(signed byte) debug::dy
(signed byte) debug::dy#0 56.0
(byte) debug::i
(void()) main()
(signed byte) main::dy
(signed byte) main::dy#1 16.5
(signed byte) main::dy#2 11.0

Initial phi equivalence classes
[ main::dy#2 main::dy#1 ]
Added variable debug::dy#0 to live range equivalence class [ debug::dy#0 ]
Complete equivalence classes
[ main::dy#2 main::dy#1 ]
[ debug::dy#0 ]
Allocated zp[1]:2 [ main::dy#2 main::dy#1 ]
Allocated zp[1]:3 [ debug::dy#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates problem with > comparison of signed chars.
// Reported by Danny Spijksma
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label dy = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (signed byte) main::dy#2 = (signed byte) -$80 [phi:main->main::@1#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z dy
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (signed byte) main::dy#2 = (signed byte) main::dy#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (signed byte) debug::dy#0 ← (signed byte) main::dy#2 -- vbsz1=vbsz2 
    lda.z dy
    sta.z debug.dy
    // [3] call debug 
    jsr debug
    jmp __b2
    // main::@2
  __b2:
    // [4] (signed byte) main::dy#1 ← ++ (signed byte) main::dy#2 -- vbsz1=_inc_vbsz1 
    inc.z dy
    // [5] if((signed byte) main::dy#1!=(signed byte) -$80) goto main::@1 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z dy
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // debug
// debug(signed byte zp(3) dy)
debug: {
    .label dy = 3
    // [7] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return -- vbsz1_le_vbsc1_then_la1 
    lda #-$78
    sec
    sbc.z dy
    bvc !+
    eor #$80
  !:
    bpl __breturn
    jmp __b1
    // debug::@1
  __b1:
    // [8] *((const byte*) SCREEN + (byte)(signed byte) debug::dy#0) ← (byte) $a -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #$a
    ldy.z dy
    sta SCREEN,y
    jmp __breturn
    // debug::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return [ debug::dy#0 ] ( debug:3 [ main::dy#2 debug::dy#0 ] { { debug::dy#0 = main::dy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::dy#2 main::dy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ debug::dy#0 ]
Statement [8] *((const byte*) SCREEN + (byte)(signed byte) debug::dy#0) ← (byte) $a [ ] ( debug:3 [ main::dy#2 ] { { debug::dy#0 = main::dy#2 } }  ) always clobbers reg byte a 
Statement [7] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return [ debug::dy#0 ] ( debug:3 [ main::dy#2 debug::dy#0 ] { { debug::dy#0 = main::dy#2 } }  ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN + (byte)(signed byte) debug::dy#0) ← (byte) $a [ ] ( debug:3 [ main::dy#2 ] { { debug::dy#0 = main::dy#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::dy#2 main::dy#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ debug::dy#0 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [debug] 56: zp[1]:3 [ debug::dy#0 ] 
Uplift Scope [main] 27.5: zp[1]:2 [ main::dy#2 main::dy#1 ] 
Uplift Scope [] 

Uplifting [debug] best 425 combination reg byte x [ debug::dy#0 ] 
Uplifting [main] best 305 combination reg byte x [ main::dy#2 main::dy#1 ] 
Uplifting [] best 305 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates problem with > comparison of signed chars.
// Reported by Danny Spijksma
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (signed byte) main::dy#2 = (signed byte) -$80 [phi:main->main::@1#0] -- vbsxx=vbsc1 
    ldx #-$80
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (signed byte) main::dy#2 = (signed byte) main::dy#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (signed byte) debug::dy#0 ← (signed byte) main::dy#2
    // [3] call debug 
    jsr debug
    jmp __b2
    // main::@2
  __b2:
    // [4] (signed byte) main::dy#1 ← ++ (signed byte) main::dy#2 -- vbsxx=_inc_vbsxx 
    inx
    // [5] if((signed byte) main::dy#1!=(signed byte) -$80) goto main::@1 -- vbsxx_neq_vbsc1_then_la1 
    cpx #-$80
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // debug
// debug(signed byte register(X) dy)
debug: {
    // [7] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return -- vbsxx_le_vbsc1_then_la1 
    txa
    sec
    sbc #-$78
    beq __breturn
    bvc !+
    eor #$80
  !:
    bmi __breturn
    jmp __b1
    // debug::@1
  __b1:
    // [8] *((const byte*) SCREEN + (byte)(signed byte) debug::dy#0) ← (byte) $a -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$a
    sta SCREEN,x
    jmp __breturn
    // debug::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN = (byte*) 1024
(void()) debug((signed byte) debug::dy)
(label) debug::@1
(label) debug::@return
(signed byte) debug::dy
(signed byte) debug::dy#0 reg byte x 56.0
(byte) debug::i
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::dy
(signed byte) main::dy#1 reg byte x 16.5
(signed byte) main::dy#2 reg byte x 11.0

reg byte x [ main::dy#2 main::dy#1 ]
reg byte x [ debug::dy#0 ]


FINAL ASSEMBLER
Score: 179

  // File Comments
// Illustrates problem with > comparison of signed chars.
// Reported by Danny Spijksma
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (signed byte) main::dy#2 = (signed byte) -$80 [phi:main->main::@1#0] -- vbsxx=vbsc1 
    ldx #-$80
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (signed byte) main::dy#2 = (signed byte) main::dy#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // debug(dy)
    // [2] (signed byte) debug::dy#0 ← (signed byte) main::dy#2
    // [3] call debug 
    jsr debug
    // main::@2
    // for(signed char dy:-128..127)
    // [4] (signed byte) main::dy#1 ← ++ (signed byte) main::dy#2 -- vbsxx=_inc_vbsxx 
    inx
    // [5] if((signed byte) main::dy#1!=(signed byte) -$80) goto main::@1 -- vbsxx_neq_vbsc1_then_la1 
    cpx #-$80
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // debug
// debug(signed byte register(X) dy)
debug: {
    // if (dy > -120)
    // [7] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return -- vbsxx_le_vbsc1_then_la1 
    txa
    sec
    sbc #-$78
    beq __breturn
    bvc !+
    eor #$80
  !:
    bmi __breturn
    // debug::@1
    // SCREEN[i] = 10
    // [8] *((const byte*) SCREEN + (byte)(signed byte) debug::dy#0) ← (byte) $a -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$a
    sta SCREEN,x
    // debug::@return
  __breturn:
    // }
    // [9] return 
    rts
}
  // File Data

