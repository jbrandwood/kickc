// Experiments with malloc()

void main() {
    unsigned char* buf1 = (unsigned char*) malloc(100);
    unsigned char* buf2 = (unsigned char*) malloc(100);
    for(unsigned char i:0..99) {
        buf1[i] = i;
        buf2[i] = 255-i;
    }
    free(buf1);
    free(buf2);
    unsigned char* screen = 0x0400;
    screen[0] = *buf1;
    screen[1] = *buf2;
}

// Start of the heap used by malloc()
unsigned char* HEAP_START = 0xc000;

// Head of the heap. Moved forward for each malloc()
unsigned char* heap_head = HEAP_START;

// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
unsigned char* malloc(unsigned int size) {
    unsigned char* mem = heap_head;
    heap_head+= size;
    return mem;
}

// A block of memory previously allocated by a call to malloc is deallocated, making it available again for further allocations.
// If ptr is a null pointer, the function does nothing.
void free(unsigned char* ptr) {
}