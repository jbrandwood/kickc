Inlined call call __init
Eliminating unused variable with no statement memset::$2
Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

void print_ln()
print_ln: scope:[print_ln]  from main::@5
  print_char_cursor#48 = phi( main::@5/print_char_cursor#19 )
  print_line_cursor#19 = phi( main::@5/print_line_cursor#21 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#25 = phi( print_ln/print_char_cursor#48, print_ln::@1/print_char_cursor#25 )
  print_line_cursor#10 = phi( print_ln/print_line_cursor#19, print_ln::@1/print_line_cursor#0 )
  print_ln::$0 = print_line_cursor#10 + $28
  print_line_cursor#0 = print_ln::$0
  print_ln::$1 = print_line_cursor#0 < print_char_cursor#25
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#11 = phi( print_ln::@1/print_line_cursor#0 )
  print_char_cursor#0 = print_line_cursor#11
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#26 = phi( print_ln::@2/print_char_cursor#0 )
  print_line_cursor#12 = phi( print_ln::@2/print_line_cursor#11 )
  print_line_cursor#1 = print_line_cursor#12
  print_char_cursor#1 = print_char_cursor#26
  return 
  to:@return

void print_sint(int w)
print_sint: scope:[print_sint]  from main::@1 main::@4
  print_char_cursor#57 = phi( main::@1/print_char_cursor#55, main::@4/print_char_cursor#18 )
  print_sint::w#3 = phi( main::@1/print_sint::w#1, main::@4/print_sint::w#2 )
  print_sint::$0 = print_sint::w#3 < 0
  if(print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  print_sint::w#6 = phi( print_sint/print_sint::w#3 )
  print_char_cursor#49 = phi( print_sint/print_char_cursor#57 )
  print_char::ch#0 = '-'
  call print_char
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  print_sint::w#4 = phi( print_sint::@1/print_sint::w#6 )
  print_char_cursor#27 = phi( print_sint::@1/print_char_cursor#13 )
  print_char_cursor#2 = print_char_cursor#27
  print_sint::$4 = - print_sint::w#4
  print_sint::w#0 = print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  print_sint::w#8 = phi( print_sint/print_sint::w#3 )
  print_char_cursor#50 = phi( print_sint/print_char_cursor#57 )
  print_char::ch#1 = ' '
  call print_char
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  print_sint::w#7 = phi( print_sint::@3/print_sint::w#8 )
  print_char_cursor#28 = phi( print_sint::@3/print_char_cursor#13 )
  print_char_cursor#3 = print_char_cursor#28
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  print_char_cursor#51 = phi( print_sint::@4/print_char_cursor#2, print_sint::@5/print_char_cursor#3 )
  print_sint::w#5 = phi( print_sint::@4/print_sint::w#0, print_sint::@5/print_sint::w#7 )
  print_uint::w#0 = (unsigned int)print_sint::w#5
  call print_uint
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  print_char_cursor#29 = phi( print_sint::@2/print_char_cursor#8 )
  print_char_cursor#4 = print_char_cursor#29
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  print_char_cursor#30 = phi( print_sint::@6/print_char_cursor#4 )
  print_char_cursor#5 = print_char_cursor#30
  return 
  to:@return

void print_uint(unsigned int w)
print_uint: scope:[print_uint]  from print_sint::@2
  print_char_cursor#52 = phi( print_sint::@2/print_char_cursor#51 )
  print_uint::w#1 = phi( print_sint::@2/print_uint::w#0 )
  print_uint::$0 = byte1  print_uint::w#1
  print_uchar::b#0 = print_uint::$0
  call print_uchar
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  print_uint::w#2 = phi( print_uint/print_uint::w#1 )
  print_char_cursor#31 = phi( print_uint/print_char_cursor#11 )
  print_char_cursor#6 = print_char_cursor#31
  print_uint::$2 = byte0  print_uint::w#2
  print_uchar::b#1 = print_uint::$2
  call print_uchar
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  print_char_cursor#32 = phi( print_uint::@1/print_char_cursor#11 )
  print_char_cursor#7 = print_char_cursor#32
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  print_char_cursor#33 = phi( print_uint::@2/print_char_cursor#7 )
  print_char_cursor#8 = print_char_cursor#33
  return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  print_char_cursor#53 = phi( print_uint/print_char_cursor#52, print_uint::@1/print_char_cursor#6 )
  print_uchar::b#2 = phi( print_uint/print_uchar::b#0, print_uint::@1/print_uchar::b#1 )
  print_uchar::$0 = print_uchar::b#2 >> 4
  print_char::ch#2 = print_hextab[print_uchar::$0]
  call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::b#3 = phi( print_uchar/print_uchar::b#2 )
  print_char_cursor#34 = phi( print_uchar/print_char_cursor#13 )
  print_char_cursor#9 = print_char_cursor#34
  print_uchar::$2 = print_uchar::b#3 & $f
  print_char::ch#3 = print_hextab[print_uchar::$2]
  call print_char
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  print_char_cursor#35 = phi( print_uchar::@1/print_char_cursor#13 )
  print_char_cursor#10 = print_char_cursor#35
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  print_char_cursor#36 = phi( print_uchar::@2/print_char_cursor#10 )
  print_char_cursor#11 = print_char_cursor#36
  return 
  to:@return

void print_char(char ch)
print_char: scope:[print_char]  from main::@3 print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  print_char_cursor#37 = phi( main::@3/print_char_cursor#17, print_sint::@1/print_char_cursor#49, print_sint::@3/print_char_cursor#50, print_uchar/print_char_cursor#53, print_uchar::@1/print_char_cursor#9 )
  print_char::ch#5 = phi( main::@3/print_char::ch#4, print_sint::@1/print_char::ch#0, print_sint::@3/print_char::ch#1, print_uchar/print_char::ch#2, print_uchar::@1/print_char::ch#3 )
  *print_char_cursor#37 = print_char::ch#5
  print_char_cursor#12 = ++ print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#38 = phi( print_char/print_char_cursor#12 )
  print_char_cursor#13 = print_char_cursor#38
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main
  print_screen#2 = phi( main/print_screen#5 )
  memset::str#0 = (void *)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset
  memset::return#0 = memset::return#2
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#2 = print_screen#3
  print_char_cursor#14 = print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#39 = phi( print_cls::@1/print_char_cursor#14 )
  print_line_cursor#13 = phi( print_cls::@1/print_line_cursor#2 )
  print_line_cursor#3 = print_line_cursor#13
  print_char_cursor#15 = print_char_cursor#39
  return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#1 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (char *)memset::str#2
  memset::end#0 = memset::$4 + memset::num#2
  memset::dst#0 = ((char *)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#1 )
  memset::return#2 = memset::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#54 = phi( __start::@1/print_char_cursor#56 )
  print_line_cursor#20 = phi( __start::@1/print_line_cursor#22 )
  print_screen#5 = phi( __start::@1/print_screen#7 )
  main::w1#0 = $4d2
  call print_cls
  to:main::@2
main::@2: scope:[main]  from main
  main::w1#3 = phi( main/main::w1#0 )
  print_char_cursor#40 = phi( main/print_char_cursor#15 )
  print_line_cursor#14 = phi( main/print_line_cursor#3 )
  print_line_cursor#4 = print_line_cursor#14
  print_char_cursor#16 = print_char_cursor#40
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@6
  main::i#6 = phi( main::@2/main::i#0, main::@6/main::i#1 )
  print_line_cursor#25 = phi( main::@2/print_line_cursor#4, main::@6/print_line_cursor#5 )
  print_char_cursor#55 = phi( main::@2/print_char_cursor#16, main::@6/print_char_cursor#20 )
  main::w1#2 = phi( main::@2/main::w1#3, main::@6/main::w1#4 )
  main::w2#0 = main::w1#2 - $5b
  main::$2 = main::w2#0 - $29
  main::w1#1 = main::$2
  print_sint::w#1 = main::w1#1
  call print_sint
  to:main::@3
main::@3: scope:[main]  from main::@1
  main::w1#7 = phi( main::@1/main::w1#1 )
  main::i#5 = phi( main::@1/main::i#6 )
  print_line_cursor#24 = phi( main::@1/print_line_cursor#25 )
  main::w2#2 = phi( main::@1/main::w2#0 )
  print_char_cursor#41 = phi( main::@1/print_char_cursor#5 )
  print_char_cursor#17 = print_char_cursor#41
  print_char::ch#4 = ' '
  call print_char
  to:main::@4
main::@4: scope:[main]  from main::@3
  main::w1#6 = phi( main::@3/main::w1#7 )
  main::i#4 = phi( main::@3/main::i#5 )
  print_line_cursor#23 = phi( main::@3/print_line_cursor#24 )
  main::w2#1 = phi( main::@3/main::w2#2 )
  print_char_cursor#42 = phi( main::@3/print_char_cursor#13 )
  print_char_cursor#18 = print_char_cursor#42
  print_sint::w#2 = main::w2#1
  call print_sint
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::w1#5 = phi( main::@4/main::w1#6 )
  main::i#3 = phi( main::@4/main::i#4 )
  print_line_cursor#21 = phi( main::@4/print_line_cursor#23 )
  print_char_cursor#43 = phi( main::@4/print_char_cursor#5 )
  print_char_cursor#19 = print_char_cursor#43
  call print_ln
  to:main::@6
main::@6: scope:[main]  from main::@5
  main::w1#4 = phi( main::@5/main::w1#5 )
  main::i#2 = phi( main::@5/main::i#3 )
  print_char_cursor#44 = phi( main::@5/print_char_cursor#1 )
  print_line_cursor#15 = phi( main::@5/print_line_cursor#1 )
  print_line_cursor#5 = print_line_cursor#15
  print_char_cursor#20 = print_char_cursor#44
  main::i#1 = main::i#2 + rangenext(0,$a)
  main::$7 = main::i#1 != rangelast(0,$a)
  if(main::$7) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  print_char_cursor#45 = phi( main::@6/print_char_cursor#20 )
  print_line_cursor#16 = phi( main::@6/print_line_cursor#5 )
  print_line_cursor#6 = print_line_cursor#16
  print_char_cursor#21 = print_char_cursor#45
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (char *)$400
  print_line_cursor#7 = print_screen#0
  print_char_cursor#22 = print_line_cursor#7
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#7 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#56 = phi( __start::__init1/print_char_cursor#22 )
  print_line_cursor#22 = phi( __start::__init1/print_line_cursor#7 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#7 )
  print_char_cursor#46 = phi( __start::@1/print_char_cursor#21 )
  print_line_cursor#17 = phi( __start::@1/print_line_cursor#6 )
  print_line_cursor#8 = print_line_cursor#17
  print_char_cursor#23 = print_char_cursor#46
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#47 = phi( __start::@2/print_char_cursor#23 )
  print_line_cursor#18 = phi( __start::@2/print_line_cursor#8 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  print_screen#1 = print_screen#4
  print_line_cursor#9 = print_line_cursor#18
  print_char_cursor#24 = print_char_cursor#47
  return 
  to:@return

SYMBOL TABLE SSA
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void __start()
void main()
number main::$2
bool main::$7
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::i#6
int main::w1
int main::w1#0
int main::w1#1
int main::w1#2
int main::w1#3
int main::w1#4
int main::w1#5
int main::w1#6
int main::w1#7
int main::w2
int main::w2#0
int main::w2#1
int main::w2#2
void * memset(void *str , char c , unsigned int num)
bool memset::$0
bool memset::$1
bool memset::$3
char *memset::$4
char memset::c
char memset::c#0
char memset::c#1
char memset::c#2
char memset::c#3
char memset::c#4
char *memset::dst
char *memset::dst#0
char *memset::dst#1
char *memset::dst#2
char *memset::dst#3
char *memset::end
char *memset::end#0
char *memset::end#1
char *memset::end#2
unsigned int memset::num
unsigned int memset::num#0
unsigned int memset::num#1
unsigned int memset::num#2
void *memset::return
void *memset::return#0
void *memset::return#1
void *memset::return#2
void *memset::return#3
void *memset::str
void *memset::str#0
void *memset::str#1
void *memset::str#2
void *memset::str#3
void *memset::str#4
void *memset::str#5
void print_char(char ch)
char print_char::ch
char print_char::ch#0
char print_char::ch#1
char print_char::ch#2
char print_char::ch#3
char print_char::ch#4
char print_char::ch#5
char *print_char_cursor
char *print_char_cursor#0
char *print_char_cursor#1
char *print_char_cursor#10
char *print_char_cursor#11
char *print_char_cursor#12
char *print_char_cursor#13
char *print_char_cursor#14
char *print_char_cursor#15
char *print_char_cursor#16
char *print_char_cursor#17
char *print_char_cursor#18
char *print_char_cursor#19
char *print_char_cursor#2
char *print_char_cursor#20
char *print_char_cursor#21
char *print_char_cursor#22
char *print_char_cursor#23
char *print_char_cursor#24
char *print_char_cursor#25
char *print_char_cursor#26
char *print_char_cursor#27
char *print_char_cursor#28
char *print_char_cursor#29
char *print_char_cursor#3
char *print_char_cursor#30
char *print_char_cursor#31
char *print_char_cursor#32
char *print_char_cursor#33
char *print_char_cursor#34
char *print_char_cursor#35
char *print_char_cursor#36
char *print_char_cursor#37
char *print_char_cursor#38
char *print_char_cursor#39
char *print_char_cursor#4
char *print_char_cursor#40
char *print_char_cursor#41
char *print_char_cursor#42
char *print_char_cursor#43
char *print_char_cursor#44
char *print_char_cursor#45
char *print_char_cursor#46
char *print_char_cursor#47
char *print_char_cursor#48
char *print_char_cursor#49
char *print_char_cursor#5
char *print_char_cursor#50
char *print_char_cursor#51
char *print_char_cursor#52
char *print_char_cursor#53
char *print_char_cursor#54
char *print_char_cursor#55
char *print_char_cursor#56
char *print_char_cursor#57
char *print_char_cursor#6
char *print_char_cursor#7
char *print_char_cursor#8
char *print_char_cursor#9
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0
char *print_line_cursor#1
char *print_line_cursor#10
char *print_line_cursor#11
char *print_line_cursor#12
char *print_line_cursor#13
char *print_line_cursor#14
char *print_line_cursor#15
char *print_line_cursor#16
char *print_line_cursor#17
char *print_line_cursor#18
char *print_line_cursor#19
char *print_line_cursor#2
char *print_line_cursor#20
char *print_line_cursor#21
char *print_line_cursor#22
char *print_line_cursor#23
char *print_line_cursor#24
char *print_line_cursor#25
char *print_line_cursor#3
char *print_line_cursor#4
char *print_line_cursor#5
char *print_line_cursor#6
char *print_line_cursor#7
char *print_line_cursor#8
char *print_line_cursor#9
void print_ln()
char *print_ln::$0
bool print_ln::$1
char *print_screen
char *print_screen#0
char *print_screen#1
char *print_screen#2
char *print_screen#3
char *print_screen#4
char *print_screen#5
char *print_screen#6
char *print_screen#7
void print_sint(int w)
bool print_sint::$0
int print_sint::$4
int print_sint::w
int print_sint::w#0
int print_sint::w#1
int print_sint::w#2
int print_sint::w#3
int print_sint::w#4
int print_sint::w#5
int print_sint::w#6
int print_sint::w#7
int print_sint::w#8
void print_uchar(char b)
char print_uchar::$0
number print_uchar::$2
char print_uchar::b
char print_uchar::b#0
char print_uchar::b#1
char print_uchar::b#2
char print_uchar::b#3
void print_uint(unsigned int w)
char print_uint::$0
char print_uint::$2
unsigned int print_uint::w
unsigned int print_uint::w#0
unsigned int print_uint::w#1
unsigned int print_uint::w#2

Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#10 + $28
Adding number conversion cast (snumber) 0 in print_sint::$0 = print_sint::w#3 < 0
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::b#2 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::b#3 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::b#3 & (unumber)$f
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (snumber) $5b in main::w2#0 = main::w1#2 - $5b
Adding number conversion cast (snumber) $29 in main::$2 = main::w2#0 - $29
Adding number conversion cast (snumber) main::$2 in main::$2 = main::w2#0 - (snumber)$29
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast memset::dst#0 = (char *)memset::str#2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast $5b
Simplifying constant integer cast $29
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Finalized signed number type (signed char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (unsigned int) $3e8
Finalized unsigned number type (char) 0
Finalized signed number type (signed char) $5b
Finalized signed number type (signed char) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in print_uchar::$2 = print_uchar::b#3 & $f
Inferred type updated to int in main::$2 = main::w2#0 - $29
Inversing boolean not [84] memset::$1 = memset::num#1 <= 0 from [83] memset::$0 = memset::num#1 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#11 print_char_cursor#0 print_line_cursor#12 print_char_cursor#26 print_line_cursor#1 print_char_cursor#1 
Alias print_char_cursor#49 = print_char_cursor#57 print_char_cursor#50 
Alias print_sint::w#3 = print_sint::w#6 print_sint::w#4 print_sint::w#8 print_sint::w#7 
Alias print_char_cursor#2 = print_char_cursor#27 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#28 = print_char_cursor#3 
Alias print_char_cursor#29 = print_char_cursor#4 print_char_cursor#30 print_char_cursor#5 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#1 = print_uint::w#2 
Alias print_char_cursor#31 = print_char_cursor#6 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#32 = print_char_cursor#7 print_char_cursor#33 print_char_cursor#8 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#34 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#35 print_char_cursor#36 print_char_cursor#11 
Alias print_char_cursor#12 = print_char_cursor#38 print_char_cursor#13 
Alias print_line_cursor#13 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#14 print_char_cursor#39 print_line_cursor#3 print_char_cursor#15 
Alias memset::return#1 = memset::str#1 memset::return#3 memset::return#2 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias main::w1#0 = main::w1#3 
Alias print_line_cursor#14 = print_line_cursor#4 
Alias print_char_cursor#16 = print_char_cursor#40 
Alias main::w1#1 = main::$2 main::w1#7 main::w1#6 main::w1#5 main::w1#4 
Alias main::w2#0 = main::w2#2 main::w2#1 
Alias print_line_cursor#21 = print_line_cursor#24 print_line_cursor#25 print_line_cursor#23 
Alias main::i#2 = main::i#5 main::i#6 main::i#4 main::i#3 
Alias print_char_cursor#17 = print_char_cursor#41 
Alias print_char_cursor#18 = print_char_cursor#42 
Alias print_char_cursor#19 = print_char_cursor#43 
Alias print_line_cursor#15 = print_line_cursor#5 print_line_cursor#16 print_line_cursor#6 
Alias print_char_cursor#20 = print_char_cursor#44 print_char_cursor#45 print_char_cursor#21 
Alias print_screen#0 = print_line_cursor#7 print_char_cursor#22 print_line_cursor#22 print_char_cursor#56 print_screen#7 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#17 = print_line_cursor#8 print_line_cursor#18 print_line_cursor#9 
Alias print_char_cursor#23 = print_char_cursor#46 print_char_cursor#47 print_char_cursor#24 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values print_line_cursor#19 print_line_cursor#21
Identical Phi Values print_char_cursor#48 print_char_cursor#19
Identical Phi Values print_char_cursor#25 print_char_cursor#48
Identical Phi Values print_char_cursor#2 print_char_cursor#12
Identical Phi Values print_char_cursor#28 print_char_cursor#12
Identical Phi Values print_char_cursor#29 print_char_cursor#32
Identical Phi Values print_uint::w#1 print_uint::w#0
Identical Phi Values print_char_cursor#52 print_char_cursor#51
Identical Phi Values print_char_cursor#31 print_char_cursor#10
Identical Phi Values print_char_cursor#32 print_char_cursor#10
Identical Phi Values print_char_cursor#34 print_char_cursor#12
Identical Phi Values print_char_cursor#10 print_char_cursor#12
Identical Phi Values print_line_cursor#13 print_screen#5
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_screen#5 print_screen#0
Identical Phi Values print_line_cursor#20 print_screen#0
Identical Phi Values print_char_cursor#54 print_screen#0
Identical Phi Values print_line_cursor#14 print_line_cursor#13
Identical Phi Values print_char_cursor#16 print_line_cursor#13
Identical Phi Values print_char_cursor#17 print_char_cursor#29
Identical Phi Values print_char_cursor#18 print_char_cursor#12
Identical Phi Values print_char_cursor#19 print_char_cursor#29
Identical Phi Values print_line_cursor#15 print_line_cursor#0
Identical Phi Values print_char_cursor#20 print_line_cursor#0
Identical Phi Values print_line_cursor#17 print_line_cursor#15
Identical Phi Values print_char_cursor#23 print_char_cursor#20
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#51 print_char_cursor#12
Identical Phi Values memset::return#1 memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#53 print_char_cursor#12
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print_ln::$1 [4] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1
Simple Condition print_sint::$0 [8] if(print_sint::w#3<0) goto print_sint::@1
Simple Condition memset::$1 [52] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [59] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$7 [84] if(main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant print_char::ch#0 = '-'
Constant print_char::ch#1 = ' '
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant main::w1#0 = $4d2
Constant main::i#0 = 0
Constant print_char::ch#4 = ' '
Constant print_screen#0 = (char *) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant memset::str#0 = (void *)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::return#0 = memset::str#0
Constant memset::$4 = (char *)memset::str#0
Constant memset::dst#0 = (char *)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [52] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [82] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [84] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Eliminating unused constant memset::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [49] if(main::i#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [32] memset::end#0 = memset::$4 + memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings print_char::ch#0
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings print_char::ch#4
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings main::w1#0
Inlining constant with var siblings main::i#0
Constant inlined print_char::ch#4 = ' '
Constant inlined memset::$4 = (char *)memset::str#0
Constant inlined print_char::ch#1 = ' '
Constant inlined print_char::ch#0 = '-'
Constant inlined main::i#0 = 0
Constant inlined memset::dst#0 = (char *)memset::str#0
Constant inlined main::w1#0 = $4d2
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@7(between main::@6 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_sint::@6
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
CALL GRAPH
Calls in [main] to print_cls:1 print_sint:9 print_char:11 print_sint:15 print_ln:17 
Calls in [print_cls] to memset:26 
Calls in [print_sint] to print_char:32 print_uint:36 print_char:40 
Calls in [print_uint] to print_uchar:65 print_uchar:68 
Calls in [print_uchar] to print_char:76 print_char:81 

Created 12 initial phi equivalence classes
Coalesced [7] print_sint::w#9 = print_sint::w#1
Coalesced [8] print_char_cursor#58 = print_char_cursor#55
Coalesced [10] print_char_cursor#60 = print_char_cursor#12
Coalesced [13] print_sint::w#10 = print_sint::w#2
Coalesced [14] print_char_cursor#59 = print_char_cursor#12
Coalesced [21] main::w1#8 = main::w1#1
Not coalescing [22] print_char_cursor#65 = print_line_cursor#0
Coalesced [23] print_line_cursor#28 = print_line_cursor#0
Coalesced [24] main::i#7 = main::i#1
Coalesced (already) [31] print_char_cursor#62 = print_char_cursor#49
Coalesced [33] print_sint::w#12 = print_sint::w#3
Coalesced (already) [39] print_char_cursor#61 = print_char_cursor#49
Coalesced [42] print_sint::w#11 = print_sint::w#0
Coalesced [47] print_line_cursor#26 = print_line_cursor#21
Coalesced (already) [53] print_line_cursor#27 = print_line_cursor#0
Coalesced [62] memset::dst#4 = memset::dst#1
Coalesced [64] print_uchar::b#4 = print_uchar::b#0
Coalesced [67] print_uchar::b#5 = print_uchar::b#1
Coalesced [74] print_char::ch#6 = print_char::ch#2
Coalesced (already) [75] print_char_cursor#63 = print_char_cursor#12
Coalesced [79] print_char::ch#7 = print_char::ch#3
Coalesced (already) [80] print_char_cursor#64 = print_char_cursor#12
Coalesced down to 8 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label print_cls::@1
Culled Empty Block label print_sint::@5
Culled Empty Block label print_sint::@6
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_uint::@2
Culled Empty Block label print_uchar::@2
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [2] main::i#2 = phi( main/0, main::@6/main::i#1 )
  [2] print_line_cursor#21 = phi( main/print_screen#0, main::@6/print_line_cursor#0 )
  [2] print_char_cursor#55 = phi( main/print_screen#0, main::@6/print_char_cursor#65 )
  [2] main::w1#2 = phi( main/$4d2, main::@6/main::w1#1 )
  [3] main::w2#0 = main::w1#2 - $5b
  [4] main::w1#1 = main::w2#0 - $29
  [5] print_sint::w#1 = main::w1#1
  [6] call print_sint
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] phi()
  [8] call print_char
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] print_sint::w#2 = main::w2#0
  [10] call print_sint
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] phi()
  [12] call print_ln
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] main::i#1 = ++ main::i#2
  [14] if(main::i#1!=$b) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [15] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [16] print_char_cursor#65 = print_line_cursor#0
  to:main::@1

void print_cls()
print_cls: scope:[print_cls]  from main
  [17] phi()
  [18] call memset
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [19] return 
  to:@return

void print_sint(int w)
print_sint: scope:[print_sint]  from main::@1 main::@3
  [20] print_char_cursor#49 = phi( main::@1/print_char_cursor#55, main::@3/print_char_cursor#12 )
  [20] print_sint::w#3 = phi( main::@1/print_sint::w#1, main::@3/print_sint::w#2 )
  [21] if(print_sint::w#3<0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [22] phi()
  [23] call print_char
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [24] print_sint::w#5 = phi( print_sint::@4/print_sint::w#0, print_sint::@3/print_sint::w#3 )
  [25] print_uint::w#0 = (unsigned int)print_sint::w#5
  [26] call print_uint
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [27] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [28] phi()
  [29] call print_char
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [30] print_sint::w#0 = - print_sint::w#3
  to:print_sint::@2

void print_char(char ch)
print_char: scope:[print_char]  from main::@2 print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  [31] print_char_cursor#37 = phi( main::@2/print_char_cursor#12, print_sint::@1/print_char_cursor#49, print_sint::@3/print_char_cursor#49, print_uchar/print_char_cursor#12, print_uchar::@1/print_char_cursor#12 )
  [31] print_char::ch#5 = phi( main::@2/' ', print_sint::@1/'-', print_sint::@3/' ', print_uchar/print_char::ch#2, print_uchar::@1/print_char::ch#3 )
  [32] *print_char_cursor#37 = print_char::ch#5
  [33] print_char_cursor#12 = ++ print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [34] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from main::@4
  [35] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [36] print_line_cursor#10 = phi( print_ln/print_line_cursor#21, print_ln::@1/print_line_cursor#0 )
  [37] print_line_cursor#0 = print_line_cursor#10 + $28
  [38] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [39] return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from print_cls
  [40] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [41] memset::dst#2 = phi( memset/(char *)memset::str#0, memset::@2/memset::dst#1 )
  [42] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [43] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [44] *memset::dst#2 = memset::c#0
  [45] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_uint(unsigned int w)
print_uint: scope:[print_uint]  from print_sint::@2
  [46] print_uchar::b#0 = byte1  print_uint::w#0
  [47] call print_uchar
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [48] print_uchar::b#1 = byte0  print_uint::w#0
  [49] call print_uchar
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [50] return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [51] print_uchar::b#2 = phi( print_uint/print_uchar::b#0, print_uint::@1/print_uchar::b#1 )
  [52] print_uchar::$0 = print_uchar::b#2 >> 4
  [53] print_char::ch#2 = print_hextab[print_uchar::$0]
  [54] call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [55] print_uchar::$2 = print_uchar::b#2 & $f
  [56] print_char::ch#3 = print_hextab[print_uchar::$2]
  [57] call print_char
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [58] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 11.0
char main::i#2 // 2.0
int main::w1
int main::w1#1 // 2.75
int main::w1#2 // 22.0
int main::w2
int main::w2#0 // 5.5
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // 2002.0
char *memset::dst#2 // 1334.6666666666667
char *memset::end
unsigned int memset::num
void *memset::return
void *memset::str
void print_char(char ch)
char print_char::ch
char print_char::ch#2 // 20002.0
char print_char::ch#3 // 20002.0
char print_char::ch#5 // 120003.0
char *print_char_cursor
char *print_char_cursor#12 // 4063.3125
char *print_char_cursor#37 // 110108.5
char *print_char_cursor#49 // 56.0
char *print_char_cursor#55 // 5.5
char *print_char_cursor#65 // 22.0
void print_cls()
char *print_line_cursor
char *print_line_cursor#0 // 4289.285714285714
char *print_line_cursor#10 // 20103.0
char *print_line_cursor#21 // 10.181818181818182
void print_ln()
char *print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // 202.0
int print_sint::w#1 // 22.0
int print_sint::w#2 // 22.0
int print_sint::w#3 // 54.16666666666666
int print_sint::w#5 // 202.0
void print_uchar(char b)
char print_uchar::$0 // 20002.0
char print_uchar::$2 // 20002.0
char print_uchar::b
char print_uchar::b#0 // 2002.0
char print_uchar::b#1 // 2002.0
char print_uchar::b#2 // 5501.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // 701.0

Initial phi equivalence classes
[ main::w1#2 main::w1#1 ]
[ main::i#2 main::i#1 ]
[ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ]
[ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ]
[ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
[ memset::dst#2 memset::dst#1 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Added variable main::w2#0 to live range equivalence class [ main::w2#0 ]
Added variable print_uint::w#0 to live range equivalence class [ print_uint::w#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ main::w1#2 main::w1#1 ]
[ main::i#2 main::i#1 ]
[ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ]
[ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ]
[ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
[ memset::dst#2 memset::dst#1 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ main::w2#0 ]
[ print_uint::w#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[1]:2 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
Allocated zp[2]:3 [ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ]
Allocated zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
Allocated zp[1]:7 [ print_uchar::$0 ]
Allocated zp[1]:8 [ print_uchar::$2 ]
Allocated zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[2]:10 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:12 [ print_uint::w#0 ]
Allocated zp[2]:14 [ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ]
Allocated zp[2]:16 [ main::w1#2 main::w1#1 ]
Allocated zp[1]:18 [ main::i#2 main::i#1 ]
Allocated zp[2]:19 [ main::w2#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::w2#0 = main::w1#2 - $5b [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w2#0 ] (  [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w2#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ main::i#2 main::i#1 ]
Statement [4] main::w1#1 = main::w2#0 - $29 [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 ] (  [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [5] print_sint::w#1 = main::w1#1 [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#1 ] (  [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#1 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [9] print_sint::w#2 = main::w2#0 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#2 print_char_cursor#12 ] (  [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#2 print_char_cursor#12 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [16] print_char_cursor#65 = print_line_cursor#0 [ main::w1#1 print_char_cursor#65 print_line_cursor#0 main::i#1 ] (  [ main::w1#1 print_char_cursor#65 print_line_cursor#0 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [21] if(print_sint::w#3<0) goto print_sint::@1 [ print_sint::w#3 print_char_cursor#49 ] ( print_sint:6 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#3 print_char_cursor#49 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  print_sint:10 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#3 print_char_cursor#49 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [25] print_uint::w#0 = (unsigned int)print_sint::w#5 [ print_char_cursor#12 print_uint::w#0 ] ( print_sint:6 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_uint::w#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  print_sint:10 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_uint::w#0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [30] print_sint::w#0 = - print_sint::w#3 [ print_char_cursor#12 print_sint::w#0 ] ( print_sint:6 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_sint::w#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  print_sint:10 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_sint::w#0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [32] *print_char_cursor#37 = print_char::ch#5 [ print_char_cursor#37 ] ( print_char:8 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#37 ] { { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:6::print_char:23 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#37 = print_char_cursor#49 print_char_cursor#55 } }  print_sint:10::print_char:23 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } }  print_sint:6::print_char:29 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#37 = print_char_cursor#49 print_char_cursor#55 } }  print_sint:10::print_char:29 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } }  print_sint:6::print_uint:26::print_uchar:47::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:47::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:18 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [37] print_line_cursor#0 = print_line_cursor#10 + $28 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:12 [ main::i#2 main::w1#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [38] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:12 [ main::i#2 main::w1#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [42] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:18 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [44] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:18 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [52] print_uchar::$0 = print_uchar::b#2 >> 4 [ print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] ( print_sint:6::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [55] print_uchar::$2 = print_uchar::b#2 & $f [ print_char_cursor#12 print_uchar::$2 ] ( print_sint:6::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [3] main::w2#0 = main::w1#2 - $5b [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w2#0 ] (  [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w2#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [4] main::w1#1 = main::w2#0 - $29 [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 ] (  [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [5] print_sint::w#1 = main::w1#1 [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#1 ] (  [ print_char_cursor#55 print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#1 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [9] print_sint::w#2 = main::w2#0 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#2 print_char_cursor#12 ] (  [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#2 print_char_cursor#12 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [16] print_char_cursor#65 = print_line_cursor#0 [ main::w1#1 print_char_cursor#65 print_line_cursor#0 main::i#1 ] (  [ main::w1#1 print_char_cursor#65 print_line_cursor#0 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [21] if(print_sint::w#3<0) goto print_sint::@1 [ print_sint::w#3 print_char_cursor#49 ] ( print_sint:6 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#3 print_char_cursor#49 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  print_sint:10 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#3 print_char_cursor#49 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [25] print_uint::w#0 = (unsigned int)print_sint::w#5 [ print_char_cursor#12 print_uint::w#0 ] ( print_sint:6 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_uint::w#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  print_sint:10 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_uint::w#0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [30] print_sint::w#0 = - print_sint::w#3 [ print_char_cursor#12 print_sint::w#0 ] ( print_sint:6 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_sint::w#0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } }  print_sint:10 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_sint::w#0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 } }  ) always clobbers reg byte a 
Statement [32] *print_char_cursor#37 = print_char::ch#5 [ print_char_cursor#37 ] ( print_char:8 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#37 ] { { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:6::print_char:23 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#37 = print_char_cursor#49 print_char_cursor#55 } }  print_sint:10::print_char:23 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } }  print_sint:6::print_char:29 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#37 = print_char_cursor#49 print_char_cursor#55 } }  print_sint:10::print_char:29 [ print_line_cursor#21 main::i#2 main::w1#1 print_sint::w#3 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } }  print_sint:6::print_uint:26::print_uchar:47::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49::print_char:54 [ print_line_cursor#21 main::i#2 main::w1#1 print_uchar::b#2 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:47::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#37 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49::print_char:57 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#37 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  ) always clobbers reg byte y 
Statement [37] print_line_cursor#0 = print_line_cursor#10 + $28 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:12 [ main::i#2 main::w1#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [38] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:12 [ main::i#2 main::w1#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [42] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:18 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [44] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:18 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [52] print_uchar::$0 = print_uchar::b#2 >> 4 [ print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] ( print_sint:6::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [55] print_uchar::$2 = print_uchar::b#2 & $f [ print_char_cursor#12 print_uchar::$2 ] ( print_sint:6::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_uint::w#0 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:47 [ print_line_cursor#21 main::i#2 main::w1#1 print_uint::w#0 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  print_sint:6::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = print_sint::w#3 main::w1#1 } { print_char_cursor#49 = print_char_cursor#55 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#37 } }  print_sint:10::print_uint:26::print_uchar:49 [ print_line_cursor#21 main::i#2 main::w1#1 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#2 = print_sint::w#3 main::w2#0 } { print_char_cursor#12 = print_char_cursor#49 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } }  ) always clobbers reg byte a 
Potential registers zp[2]:16 [ main::w1#2 main::w1#1 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ main::i#2 main::i#1 ] : zp[1]:18 , reg byte x , 
Potential registers zp[2]:14 [ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ] : zp[2]:14 , 
Potential registers zp[1]:2 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ] : zp[2]:5 , 
Potential registers zp[2]:10 [ memset::dst#2 memset::dst#1 ] : zp[2]:10 , 
Potential registers zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:19 [ main::w2#0 ] : zp[2]:19 , 
Potential registers zp[2]:12 [ print_uint::w#0 ] : zp[2]:12 , 
Potential registers zp[1]:7 [ print_uchar::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ print_uchar::$2 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 160,007: zp[1]:2 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [] 114,255.31: zp[2]:3 [ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ] 24,402.47: zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ] 
Uplift Scope [print_uchar] 20,002: zp[1]:7 [ print_uchar::$0 ] 20,002: zp[1]:8 [ print_uchar::$2 ] 9,505: zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [memset] 3,336.67: zp[2]:10 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_uint] 701: zp[2]:12 [ print_uint::w#0 ] 
Uplift Scope [print_sint] 502.17: zp[2]:14 [ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ] 
Uplift Scope [main] 24.75: zp[2]:16 [ main::w1#2 main::w1#1 ] 13: zp[1]:18 [ main::i#2 main::i#1 ] 5.5: zp[2]:19 [ main::w2#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [RADIX] 

Uplifting [print_char] best 6487 combination reg byte a [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] 
Uplifting [] best 6487 combination zp[2]:3 [ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ] zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ] 
Uplifting [print_uchar] best 6469 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [memset] best 6469 combination zp[2]:10 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_uint] best 6469 combination zp[2]:12 [ print_uint::w#0 ] 
Uplifting [print_sint] best 6469 combination zp[2]:14 [ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ] 
Uplifting [main] best 6469 combination zp[2]:16 [ main::w1#2 main::w1#1 ] zp[1]:18 [ main::i#2 main::i#1 ] zp[2]:19 [ main::w2#0 ] 
Uplifting [print_ln] best 6469 combination 
Uplifting [print_cls] best 6469 combination 
Uplifting [RADIX] best 6469 combination 
Attempting to uplift remaining variables inzp[1]:18 [ main::i#2 main::i#1 ]
Uplifting [main] best 6469 combination zp[1]:18 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:14 [ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 ] ] with [ zp[2]:12 [ print_uint::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:14 [ print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 print_uint::w#0 ] ]
Allocated (was zp[2]:3) zp[2]:2 [ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ]
Allocated (was zp[2]:5) zp[2]:4 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
Allocated (was zp[2]:10) zp[2]:6 [ memset::dst#2 memset::dst#1 print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 print_uint::w#0 ]
Allocated (was zp[2]:16) zp[2]:8 [ main::w1#2 main::w1#1 ]
Allocated (was zp[1]:18) zp[1]:10 [ main::i#2 main::i#1 ]
Allocated (was zp[2]:19) zp[2]:11 [ main::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests subtracting bytes from signed words
  // Upstart
  // Commodore 64 PRG executable file
.file [name="test-signed-word-minus-byte.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 4
  .label print_char_cursor = 2
.segment Code
  // main
main: {
    .label w2 = $b
    .label w1 = 8
    .label i = $a
    // [1] call print_cls
    // [17] phi from main to print_cls [phi:main->print_cls] -- call_phi_near 
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [2] phi print_line_cursor#21 = print_screen#0 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [2] phi print_char_cursor#55 = print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi main::w1#2 = $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta.z w1
    lda #>$4d2
    sta.z w1+1
    jmp __b1
    // main::@1
  __b1:
    // [3] main::w2#0 = main::w1#2 - $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w1
    sec
    sbc #$5b
    sta.z w2
    lda.z w1+1
    sbc #>$5b
    sta.z w2+1
    // [4] main::w1#1 = main::w2#0 - $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w2
    sec
    sbc #$29
    sta.z w1
    lda.z w2+1
    sbc #>$29
    sta.z w1+1
    // [5] print_sint::w#1 = main::w1#1 -- vwsz1=vwsz2 
    lda.z w1
    sta.z print_sint.w
    lda.z w1+1
    sta.z print_sint.w+1
    // [6] call print_sint
    // [20] phi from main::@1 to print_sint [phi:main::@1->print_sint]
  print_sint_from___b1:
    // [20] phi print_char_cursor#49 = print_char_cursor#55 [phi:main::@1->print_sint#0] -- register_copy 
    // [20] phi print_sint::w#3 = print_sint::w#1 [phi:main::@1->print_sint#1] -- call_phi_near 
    jsr print_sint
    // [7] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [8] call print_char
    // [31] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from___b2:
    // [31] phi print_char_cursor#37 = print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = ' ' [phi:main::@2->print_char#1] -- call_phi_near 
    lda #' '
    jsr print_char
    jmp __b3
    // main::@3
  __b3:
    // [9] print_sint::w#2 = main::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sint.w
    lda.z w2+1
    sta.z print_sint.w+1
    // [10] call print_sint
    // [20] phi from main::@3 to print_sint [phi:main::@3->print_sint]
  print_sint_from___b3:
    // [20] phi print_char_cursor#49 = print_char_cursor#12 [phi:main::@3->print_sint#0] -- register_copy 
    // [20] phi print_sint::w#3 = print_sint::w#2 [phi:main::@3->print_sint#1] -- call_phi_near 
    jsr print_sint
    // [11] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [12] call print_ln
    // [35] phi from main::@4 to print_ln [phi:main::@4->print_ln] -- call_phi_near 
  print_ln_from___b4:
    jsr print_ln
    jmp __b5
    // main::@5
  __b5:
    // [13] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] if(main::i#1!=$b) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne __b6
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
    // main::@6
  __b6:
    // [16] print_char_cursor#65 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [2] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [2] phi main::i#2 = main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [2] phi print_line_cursor#21 = print_line_cursor#0 [phi:main::@6->main::@1#1] -- register_copy 
    // [2] phi print_char_cursor#55 = print_char_cursor#65 [phi:main::@6->main::@1#2] -- register_copy 
    // [2] phi main::w1#2 = main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [18] call memset
    // [40] phi from print_cls to memset [phi:print_cls->memset] -- call_phi_near 
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [19] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// void print_sint(__zp(6) int w)
print_sint: {
    .label w = 6
    // [21] if(print_sint::w#3<0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [22] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [23] call print_char
    // [31] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [31] phi print_char_cursor#37 = print_char_cursor#49 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = ' ' [phi:print_sint::@3->print_char#1] -- call_phi_near 
    lda #' '
    jsr print_char
    // [24] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [24] phi print_sint::w#5 = print_sint::w#3 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [25] print_uint::w#0 = (unsigned int)print_sint::w#5
    // [26] call print_uint -- call_phi_near 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [27] return 
    rts
    // [28] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [29] call print_char
    // [31] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [31] phi print_char_cursor#37 = print_char_cursor#49 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = '-' [phi:print_sint::@1->print_char#1] -- call_phi_near 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [30] print_sint::w#0 = - print_sint::w#3 -- vwsz1=_neg_vwsz1 
    lda #0
    sec
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// void print_char(__register(A) char ch)
print_char: {
    // [32] *print_char_cursor#37 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [33] print_char_cursor#12 = ++ print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [34] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [36] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [36] phi print_line_cursor#10 = print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [37] print_line_cursor#0 = print_line_cursor#10 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [38] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [39] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(void *str, char c, unsigned int num)
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 6
    // [41] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [41] phi memset::dst#2 = (char *)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [42] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [43] return 
    rts
    // memset::@2
  __b2:
    // [44] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [45] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [41] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [41] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_uint
// Print a unsigned int as HEX
// void print_uint(__zp(6) unsigned int w)
print_uint: {
    .label w = 6
    // [46] print_uchar::b#0 = byte1  print_uint::w#0 -- vbuxx=_byte1_vwuz1 
    ldx.z w+1
    // [47] call print_uchar
    // [51] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [51] phi print_uchar::b#2 = print_uchar::b#0 [phi:print_uint->print_uchar#0] -- call_phi_near 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [48] print_uchar::b#1 = byte0  print_uint::w#0 -- vbuxx=_byte0_vwuz1 
    ldx.z w
    // [49] call print_uchar
    // [51] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [51] phi print_uchar::b#2 = print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- call_phi_near 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [50] return 
    rts
}
  // print_uchar
// Print a char as HEX
// void print_uchar(__register(X) char b)
print_uchar: {
    // [52] print_uchar::$0 = print_uchar::b#2 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [53] print_char::ch#2 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [54] call print_char
  // Table of hexadecimal digits
    // [31] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [31] phi print_char_cursor#37 = print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = print_char::ch#2 [phi:print_uchar->print_char#1] -- call_phi_near 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [55] print_uchar::$2 = print_uchar::b#2 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [56] print_char::ch#3 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [57] call print_char
    // [31] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [31] phi print_char_cursor#37 = print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- call_phi_near 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [58] return 
    rts
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b2_from___b1:
Removing instruction print_char_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_ln_from___b4:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_cls_from_main:
Removing instruction __b1_from_main:
Removing instruction print_sint_from___b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_sint_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from___b6:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void main()
char main::i
char main::i#1 // i zp[1]:10 11.0
char main::i#2 // i zp[1]:10 2.0
int main::w1
int main::w1#1 // w1 zp[2]:8 2.75
int main::w1#2 // w1 zp[2]:8 22.0
int main::w2
int main::w2#0 // w2 zp[2]:11 5.5
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:6 2002.0
char *memset::dst#2 // dst zp[2]:6 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
void print_char(char ch)
char print_char::ch
char print_char::ch#2 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 20002.0
char print_char::ch#5 // reg byte a 120003.0
char *print_char_cursor
char *print_char_cursor#12 // print_char_cursor zp[2]:2 4063.3125
char *print_char_cursor#37 // print_char_cursor zp[2]:2 110108.5
char *print_char_cursor#49 // print_char_cursor zp[2]:2 56.0
char *print_char_cursor#55 // print_char_cursor zp[2]:2 5.5
char *print_char_cursor#65 // print_char_cursor zp[2]:2 22.0
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:4 4289.285714285714
char *print_line_cursor#10 // print_line_cursor zp[2]:4 20103.0
char *print_line_cursor#21 // print_line_cursor zp[2]:4 10.181818181818182
void print_ln()
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // w zp[2]:6 202.0
int print_sint::w#1 // w zp[2]:6 22.0
int print_sint::w#2 // w zp[2]:6 22.0
int print_sint::w#3 // w zp[2]:6 54.16666666666666
int print_sint::w#5 // w zp[2]:6 202.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 20002.0
char print_uchar::$2 // reg byte x 20002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 2002.0
char print_uchar::b#1 // reg byte x 2002.0
char print_uchar::b#2 // reg byte x 5501.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:6 701.0

zp[2]:8 [ main::w1#2 main::w1#1 ]
zp[1]:10 [ main::i#2 main::i#1 ]
reg byte a [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
zp[2]:2 [ print_char_cursor#37 print_char_cursor#49 print_char_cursor#55 print_char_cursor#65 print_char_cursor#12 ]
zp[2]:4 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 print_sint::w#5 print_sint::w#0 print_sint::w#3 print_sint::w#1 print_sint::w#2 print_uint::w#0 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:11 [ main::w2#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 5638

  // File Comments
// Tests subtracting bytes from signed words
  // Upstart
  // Commodore 64 PRG executable file
.file [name="test-signed-word-minus-byte.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 4
  .label print_char_cursor = 2
.segment Code
  // main
main: {
    .label w2 = $b
    .label w1 = 8
    .label i = $a
    // print_cls()
    // [1] call print_cls
    // [17] phi from main to print_cls [phi:main->print_cls] -- call_phi_near 
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [2] phi print_line_cursor#21 = print_screen#0 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [2] phi print_char_cursor#55 = print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi main::w1#2 = $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta.z w1
    lda #>$4d2
    sta.z w1+1
    // main::@1
  __b1:
    // signed word w2 = w1 - 91
    // [3] main::w2#0 = main::w1#2 - $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w1
    sec
    sbc #$5b
    sta.z w2
    lda.z w1+1
    sbc #>$5b
    sta.z w2+1
    // w1 = w2 - 41
    // [4] main::w1#1 = main::w2#0 - $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z w2
    sec
    sbc #$29
    sta.z w1
    lda.z w2+1
    sbc #>$29
    sta.z w1+1
    // print_sint(w1)
    // [5] print_sint::w#1 = main::w1#1 -- vwsz1=vwsz2 
    lda.z w1
    sta.z print_sint.w
    lda.z w1+1
    sta.z print_sint.w+1
    // [6] call print_sint
    // [20] phi from main::@1 to print_sint [phi:main::@1->print_sint]
    // [20] phi print_char_cursor#49 = print_char_cursor#55 [phi:main::@1->print_sint#0] -- register_copy 
    // [20] phi print_sint::w#3 = print_sint::w#1 [phi:main::@1->print_sint#1] -- call_phi_near 
    jsr print_sint
    // [7] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print_char(' ')
    // [8] call print_char
    // [31] phi from main::@2 to print_char [phi:main::@2->print_char]
    // [31] phi print_char_cursor#37 = print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = ' ' [phi:main::@2->print_char#1] -- call_phi_near 
    lda #' '
    jsr print_char
    // main::@3
    // print_sint(w2)
    // [9] print_sint::w#2 = main::w2#0 -- vwsz1=vwsz2 
    lda.z w2
    sta.z print_sint.w
    lda.z w2+1
    sta.z print_sint.w+1
    // [10] call print_sint
    // [20] phi from main::@3 to print_sint [phi:main::@3->print_sint]
    // [20] phi print_char_cursor#49 = print_char_cursor#12 [phi:main::@3->print_sint#0] -- register_copy 
    // [20] phi print_sint::w#3 = print_sint::w#2 [phi:main::@3->print_sint#1] -- call_phi_near 
    jsr print_sint
    // [11] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // print_ln()
    // [12] call print_ln
    // [35] phi from main::@4 to print_ln [phi:main::@4->print_ln] -- call_phi_near 
    jsr print_ln
    // main::@5
    // for( byte i: 0..10 )
    // [13] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] if(main::i#1!=$b) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne __b6
    // main::@return
    // }
    // [15] return 
    rts
    // main::@6
  __b6:
    // [16] print_char_cursor#65 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [2] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [2] phi main::i#2 = main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [2] phi print_line_cursor#21 = print_line_cursor#0 [phi:main::@6->main::@1#1] -- register_copy 
    // [2] phi print_char_cursor#55 = print_char_cursor#65 [phi:main::@6->main::@1#2] -- register_copy 
    // [2] phi main::w1#2 = main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [18] call memset
    // [40] phi from print_cls to memset [phi:print_cls->memset] -- call_phi_near 
    jsr memset
    // print_cls::@return
    // }
    // [19] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// void print_sint(__zp(6) int w)
print_sint: {
    .label w = 6
    // if(w<0)
    // [21] if(print_sint::w#3<0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [22] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [23] call print_char
    // [31] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [31] phi print_char_cursor#37 = print_char_cursor#49 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = ' ' [phi:print_sint::@3->print_char#1] -- call_phi_near 
    lda #' '
    jsr print_char
    // [24] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [24] phi print_sint::w#5 = print_sint::w#3 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [25] print_uint::w#0 = (unsigned int)print_sint::w#5
    // [26] call print_uint -- call_phi_near 
    jsr print_uint
    // print_sint::@return
    // }
    // [27] return 
    rts
    // [28] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [29] call print_char
    // [31] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [31] phi print_char_cursor#37 = print_char_cursor#49 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = '-' [phi:print_sint::@1->print_char#1] -- call_phi_near 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [30] print_sint::w#0 = - print_sint::w#3 -- vwsz1=_neg_vwsz1 
    lda #0
    sec
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_char
// Print a single char
// void print_char(__register(A) char ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [32] *print_char_cursor#37 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [33] print_char_cursor#12 = ++ print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [34] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [36] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [36] phi print_line_cursor#10 = print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [37] print_line_cursor#0 = print_line_cursor#10 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [38] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [39] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(void *str, char c, unsigned int num)
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 6
    // [41] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [41] phi memset::dst#2 = (char *)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [42] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [43] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [44] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [45] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [41] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [41] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_uint
// Print a unsigned int as HEX
// void print_uint(__zp(6) unsigned int w)
print_uint: {
    .label w = 6
    // print_uchar(BYTE1(w))
    // [46] print_uchar::b#0 = byte1  print_uint::w#0 -- vbuxx=_byte1_vwuz1 
    ldx.z w+1
    // [47] call print_uchar
    // [51] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [51] phi print_uchar::b#2 = print_uchar::b#0 [phi:print_uint->print_uchar#0] -- call_phi_near 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(BYTE0(w))
    // [48] print_uchar::b#1 = byte0  print_uint::w#0 -- vbuxx=_byte0_vwuz1 
    ldx.z w
    // [49] call print_uchar
    // [51] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [51] phi print_uchar::b#2 = print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- call_phi_near 
    jsr print_uchar
    // print_uint::@return
    // }
    // [50] return 
    rts
}
  // print_uchar
// Print a char as HEX
// void print_uchar(__register(X) char b)
print_uchar: {
    // b>>4
    // [52] print_uchar::$0 = print_uchar::b#2 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [53] print_char::ch#2 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [54] call print_char
  // Table of hexadecimal digits
    // [31] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [31] phi print_char_cursor#37 = print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = print_char::ch#2 [phi:print_uchar->print_char#1] -- call_phi_near 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [55] print_uchar::$2 = print_uchar::b#2 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [56] print_char::ch#3 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [57] call print_char
    // [31] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [31] phi print_char_cursor#37 = print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [31] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- call_phi_near 
    jsr print_char
    // print_uchar::@return
    // }
    // [58] return 
    rts
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"

