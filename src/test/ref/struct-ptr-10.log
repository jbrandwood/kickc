Constantified RValue points[main::$2] = (struct Point){ 2, (char)main::i }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$2 = main::i#2 * SIZEOF_STRUCT_POINT
  main::$4 = (char *)points + main::$2
  main::$4[OFFSET_STRUCT_POINT_X] = 2
  main::$5 = (char *)points + main::$2
  main::$5[OFFSET_STRUCT_POINT_Y] = (char)main::i#2
  main::i#1 = main::i#2 + rangenext(0,$1f3)
  main::$0 = main::i#1 != rangelast(0,$1f3)
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::i1#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::i1#2 = phi( main::@2/main::i1#0, main::@3/main::i1#1 )
  main::$3 = main::i1#2 * SIZEOF_STRUCT_POINT
  main::SCREEN[main::$3] = memcpy(points[main::$3], struct Point, SIZEOF_STRUCT_POINT)
  main::i1#1 = main::i1#2 + rangenext(0,$1f3)
  main::$1 = main::i1#1 != rangelast(0,$1f3)
  if(main::$1) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char OFFSET_STRUCT_POINT_X = 0
__constant char OFFSET_STRUCT_POINT_Y = 1
__constant char SIZEOF_STRUCT_POINT = 2
void __start()
void main()
bool main::$0
bool main::$1
unsigned int main::$2
unsigned int main::$3
char *main::$4
char *main::$5
__constant struct Point * const main::SCREEN = (struct Point *)$400
unsigned int main::i
unsigned int main::i#0
unsigned int main::i#1
unsigned int main::i#2
unsigned int main::i1
unsigned int main::i1#0
unsigned int main::i1#1
unsigned int main::i1#2
__constant struct Point points[$1f4] = { fill( $1f4, 0) }

Simplifying constant pointer cast (struct Point *) 1024
Successful SSA optimization PassNCastSimplification
Identified duplicate assignment right side [5] main::$5 = (char *)points + main::$2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$0 [9] if(main::i#1!=rangelast(0,$1f3)) goto main::@1
Simple Condition main::$1 [16] if(main::i1#1!=rangelast(0,$1f3)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [9] if(main::i#1!=rangelast(0,$1f3)) goto main::@1 to $1f4
Resolved ranged next value [14] main::i1#1 = ++ main::i1#2 to ++
Resolved ranged comparison value [16] if(main::i1#1!=rangelast(0,$1f3)) goto main::@3 to $1f4
De-inlining pointer[w] to *(pointer+w)   [13] main::SCREEN[main::$3] = memcpy(points[main::$3], struct Point, SIZEOF_STRUCT_POINT)
De-inlining pointer[w] to *(pointer+w)   [13] main::SCREEN[main::$3] = memcpy(*main::$6, struct Point, SIZEOF_STRUCT_POINT)
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying expression containing zero main::$4 in [4] main::$4[OFFSET_STRUCT_POINT_X] = 2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $1f4 in [7] if(main::i#1!=$1f4) goto main::@1
Adding number conversion cast (unumber) $1f4 in [14] if(main::i1#1!=$1f4) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $1f4
Simplifying constant integer cast $1f4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (unsigned int) $1f4
Finalized unsigned number type (unsigned int) $1f4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$5 = main::$4 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [1] main::$2 = main::i#2 * SIZEOF_STRUCT_POINT
Rewriting multiplication to use shift [8] main::$3 = main::i1#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::i1#0
Constant inlined main::i#0 = 0
Constant inlined main::i1#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (unsigned int) $1f4
Finalized unsigned number type (unsigned int) $1f4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [17] main::i1#3 = main::i1#1
Coalesced [18] main::i#3 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@5
Culled Empty Block label main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$2 = main::i#2 << 1
  [3] main::$5 = (char *)points + main::$2
  [4] *main::$5 = 2
  [5] main::$5[OFFSET_STRUCT_POINT_Y] = (char)main::i#2
  [6] main::i#1 = ++ main::i#2
  [7] if(main::i#1!=$1f4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [8] main::i1#2 = phi( main::@1/0, main::@2/main::i1#1 )
  [9] main::$3 = main::i1#2 << 1
  [10] main::$6 = points + main::$3
  [11] main::$7 = main::SCREEN + main::$3
  [12] *main::$7 = memcpy(*main::$6, struct Point, SIZEOF_STRUCT_POINT)
  [13] main::i1#1 = ++ main::i1#2
  [14] if(main::i1#1!=$1f4) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
unsigned int main::$2 // 22.0
unsigned int main::$3 // 16.5
char *main::$5 // 16.5
struct Point *main::$6 // 5.5
struct Point *main::$7 // 22.0
unsigned int main::i
unsigned int main::i#1 // 16.5
unsigned int main::i#2 // 6.6000000000000005
unsigned int main::i1
unsigned int main::i1#1 // 16.5
unsigned int main::i1#2 // 6.6000000000000005

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::$2 ]
[ main::$5 ]
[ main::$3 ]
[ main::$6 ]
[ main::$7 ]
Allocated zp[2]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:4 [ main::i1#2 main::i1#1 ]
Allocated zp[2]:6 [ main::$2 ]
Allocated zp[2]:8 [ main::$5 ]
Allocated zp[2]:10 [ main::$3 ]
Allocated zp[2]:12 [ main::$6 ]
Allocated zp[2]:14 [ main::$7 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$2 = main::i#2 << 1 [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Statement [3] main::$5 = (char *)points + main::$2 [ main::i#2 main::$5 ] (  [ main::i#2 main::$5 ] { }  ) always clobbers reg byte a 
Statement [4] *main::$5 = 2 [ main::i#2 main::$5 ] (  [ main::i#2 main::$5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [5] main::$5[OFFSET_STRUCT_POINT_Y] = (char)main::i#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] if(main::i#1!=$1f4) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Statement [9] main::$3 = main::i1#2 << 1 [ main::i1#2 main::$3 ] (  [ main::i1#2 main::$3 ] { }  ) always clobbers reg byte a 
Statement [10] main::$6 = points + main::$3 [ main::i1#2 main::$3 main::$6 ] (  [ main::i1#2 main::$3 main::$6 ] { }  ) always clobbers reg byte a 
Statement [11] main::$7 = main::SCREEN + main::$3 [ main::i1#2 main::$6 main::$7 ] (  [ main::i1#2 main::$6 main::$7 ] { }  ) always clobbers reg byte a 
Statement [12] *main::$7 = memcpy(*main::$6, struct Point, SIZEOF_STRUCT_POINT) [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [14] if(main::i1#1!=$1f4) goto main::@2 [ main::i1#1 ] (  [ main::i1#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::i#2 main::i#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::i1#2 main::i1#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::$2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::$5 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ main::$3 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ main::$6 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ main::$7 ] : zp[2]:14 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 23.1: zp[2]:2 [ main::i#2 main::i#1 ] 23.1: zp[2]:4 [ main::i1#2 main::i1#1 ] 22: zp[2]:6 [ main::$2 ] 22: zp[2]:14 [ main::$7 ] 16.5: zp[2]:8 [ main::$5 ] 16.5: zp[2]:10 [ main::$3 ] 5.5: zp[2]:12 [ main::$6 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 2176 combination zp[2]:2 [ main::i#2 main::i#1 ] zp[2]:4 [ main::i1#2 main::i1#1 ] zp[2]:6 [ main::$2 ] zp[2]:14 [ main::$7 ] zp[2]:8 [ main::$5 ] zp[2]:10 [ main::$3 ] zp[2]:12 [ main::$6 ] 
Uplifting [Point] best 2176 combination 
Uplifting [] best 2176 combination 
Coalescing zero page register [ zp[2]:6 [ main::$2 ] ] with [ zp[2]:8 [ main::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ main::$3 ] ] with [ zp[2]:14 [ main::$7 ] ] - score: 1
Allocated (was zp[2]:10) zp[2]:8 [ main::$3 main::$7 ]
Allocated (was zp[2]:12) zp[2]:10 [ main::$6 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  array with 256+ structs
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-10.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label __2 = 6
    .label __3 = 8
    .label __5 = 6
    .label i = 2
    .label i1 = 4
    .label __6 = $a
    .label __7 = 8
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$2 = main::i#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i
    asl
    sta.z __2
    lda.z i+1
    rol
    sta.z __2+1
    // [3] main::$5 = (char *)points + main::$2 -- pbuz1=pbuc1_plus_vwuz1 
    lda.z __5
    clc
    adc #<points
    sta.z __5
    lda.z __5+1
    adc #>points
    sta.z __5+1
    // [4] *main::$5 = 2 -- _deref_pbuz1=vbuc1 
    lda #2
    ldy #0
    sta (__5),y
    // [5] main::$5[OFFSET_STRUCT_POINT_Y] = (char)main::i#2 -- pbuz1_derefidx_vbuc1=_byte_vwuz2 
    ldy #OFFSET_STRUCT_POINT_Y
    lda.z i
    sta (__5),y
    // [6] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [7] if(main::i#1!=$1f4) goto main::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$1f4
    bne __b1_from___b1
    lda.z i
    cmp #<$1f4
    bne __b1_from___b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [8] phi main::i1#2 = 0 [phi:main::@1->main::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i1
    lda #>0
    sta.z i1+1
    jmp __b2
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [8] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [9] main::$3 = main::i1#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i1
    asl
    sta.z __3
    lda.z i1+1
    rol
    sta.z __3+1
    // [10] main::$6 = points + main::$3 -- pssz1=pssc1_plus_vwuz2 
    lda.z __3
    clc
    adc #<points
    sta.z __6
    lda.z __3+1
    adc #>points
    sta.z __6+1
    // [11] main::$7 = main::SCREEN + main::$3 -- pssz1=pssc1_plus_vwuz1 
    lda.z __7
    clc
    adc #<SCREEN
    sta.z __7
    lda.z __7+1
    adc #>SCREEN
    sta.z __7+1
    // [12] *main::$7 = memcpy(*main::$6, struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssz1=_deref_pssz2_memcpy_vbuc1 
    ldy #0
  !:
    lda (__6),y
    sta (__7),y
    iny
    cpy #SIZEOF_STRUCT_POINT
    bne !-
    // [13] main::i1#1 = ++ main::i1#2 -- vwuz1=_inc_vwuz1 
    inc.z i1
    bne !+
    inc.z i1+1
  !:
    // [14] if(main::i1#1!=$1f4) goto main::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i1+1
    cmp #>$1f4
    bne __b2_from___b2
    lda.z i1
    cmp #<$1f4
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data
.segment Data
  points: .fill 2*$1f4, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char OFFSET_STRUCT_POINT_Y = 1
__constant char SIZEOF_STRUCT_POINT = 2
void main()
unsigned int main::$2 // zp[2]:6 22.0
unsigned int main::$3 // zp[2]:8 16.5
char *main::$5 // zp[2]:6 16.5
struct Point *main::$6 // zp[2]:10 5.5
struct Point *main::$7 // zp[2]:8 22.0
__constant struct Point * const main::SCREEN = (struct Point *) 1024
unsigned int main::i
unsigned int main::i#1 // i zp[2]:2 16.5
unsigned int main::i#2 // i zp[2]:2 6.6000000000000005
unsigned int main::i1
unsigned int main::i1#1 // i1 zp[2]:4 16.5
unsigned int main::i1#2 // i1 zp[2]:4 6.6000000000000005
__constant struct Point points[$1f4] = { fill( $1f4, 0) }

zp[2]:2 [ main::i#2 main::i#1 ]
zp[2]:4 [ main::i1#2 main::i1#1 ]
zp[2]:6 [ main::$2 main::$5 ]
zp[2]:8 [ main::$3 main::$7 ]
zp[2]:10 [ main::$6 ]


FINAL ASSEMBLER
Score: 1986

  // File Comments
// Minimal struct -  array with 256+ structs
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-10.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label __2 = 6
    .label __3 = 8
    .label __5 = 6
    .label i = 2
    .label i1 = 4
    .label __6 = $a
    .label __7 = 8
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // points[i] = { 2, (byte)i }
    // [2] main::$2 = main::i#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i
    asl
    sta.z __2
    lda.z i+1
    rol
    sta.z __2+1
    // [3] main::$5 = (char *)points + main::$2 -- pbuz1=pbuc1_plus_vwuz1 
    lda.z __5
    clc
    adc #<points
    sta.z __5
    lda.z __5+1
    adc #>points
    sta.z __5+1
    // [4] *main::$5 = 2 -- _deref_pbuz1=vbuc1 
    lda #2
    ldy #0
    sta (__5),y
    // [5] main::$5[OFFSET_STRUCT_POINT_Y] = (char)main::i#2 -- pbuz1_derefidx_vbuc1=_byte_vwuz2 
    ldy #OFFSET_STRUCT_POINT_Y
    lda.z i
    sta (__5),y
    // for( word i: 0..499)
    // [6] main::i#1 = ++ main::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [7] if(main::i#1!=$1f4) goto main::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$1f4
    bne __b1
    lda.z i
    cmp #<$1f4
    bne __b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [8] phi main::i1#2 = 0 [phi:main::@1->main::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i1
    sta.z i1+1
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [8] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // SCREEN[i] = points[i]
    // [9] main::$3 = main::i1#2 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i1
    asl
    sta.z __3
    lda.z i1+1
    rol
    sta.z __3+1
    // [10] main::$6 = points + main::$3 -- pssz1=pssc1_plus_vwuz2 
    lda.z __3
    clc
    adc #<points
    sta.z __6
    lda.z __3+1
    adc #>points
    sta.z __6+1
    // [11] main::$7 = main::SCREEN + main::$3 -- pssz1=pssc1_plus_vwuz1 
    lda.z __7
    clc
    adc #<SCREEN
    sta.z __7
    lda.z __7+1
    adc #>SCREEN
    sta.z __7+1
    // [12] *main::$7 = memcpy(*main::$6, struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssz1=_deref_pssz2_memcpy_vbuc1 
    ldy #0
  !:
    lda (__6),y
    sta (__7),y
    iny
    cpy #SIZEOF_STRUCT_POINT
    bne !-
    // for( word i: 0..499)
    // [13] main::i1#1 = ++ main::i1#2 -- vwuz1=_inc_vwuz1 
    inc.z i1
    bne !+
    inc.z i1+1
  !:
    // [14] if(main::i1#1!=$1f4) goto main::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i1+1
    cmp #>$1f4
    bne __b2
    lda.z i1
    cmp #<$1f4
    bne __b2
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data
.segment Data
  points: .fill 2*$1f4, 0

