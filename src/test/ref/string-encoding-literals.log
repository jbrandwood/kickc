
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *main::D018 = $16
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  (main::SCREEN+$28*0)[main::i#2] = petscii_mixed[main::i#2]
  (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2]
  (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2]
  (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2]
  (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2]
  (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2]
  (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2]
  (main::SCREEN+$28*7)[main::i#2] = atascii[main::i#2]
  (main::SCREEN+$28*8)[main::i#2] = screencode_atari[main::i#2]
  (main::SCREEN+$28*9)[main::i#2] = standard[main::i#2]
  (main::SCREEN+$28*$a)[main::i#2] = no_null[main::i#2]
  main::i#1 = main::i#2 + rangenext(0,7)
  main::$0 = main::i#1 != rangelast(0,7)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
const byte* ascii[]  = "abcABC7"as
const byte* atascii[]  = "abcABC8"at
void main()
bool~ main::$0
const nomodify byte* main::D018 = (byte*)$d018
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
const byte* no_null[]  = "abcABC1"z
const byte* petscii_mixed[]  = "abcABC1"pm
const byte* petscii_standard[]  = "abcABC3"pm
const byte* petscii_upper[]  = "abcABC2"pu
const byte* screencode_atari[]  = "abcABC9"sa
const byte* screencode_mixed[]  = "abcABC4"
const byte* screencode_standard[]  = "abcABC6"
const byte* screencode_upper[]  = "abcABC5"su
const byte* standard[]  = "abcABC0"

Adding number conversion cast (unumber) $16 in *main::D018 = $16
Adding number conversion cast (unumber) $28*0 in (main::SCREEN+$28*0)[main::i#2] = petscii_mixed[main::i#2]
Adding number conversion cast (unumber) $28*1 in (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2]
Adding number conversion cast (unumber) $28*2 in (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2]
Adding number conversion cast (unumber) $28*3 in (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2]
Adding number conversion cast (unumber) $28*4 in (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2]
Adding number conversion cast (unumber) $28*5 in (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2]
Adding number conversion cast (unumber) $28*6 in (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2]
Adding number conversion cast (unumber) $28*7 in (main::SCREEN+$28*7)[main::i#2] = atascii[main::i#2]
Adding number conversion cast (unumber) $28*8 in (main::SCREEN+$28*8)[main::i#2] = screencode_atari[main::i#2]
Adding number conversion cast (unumber) $28*9 in (main::SCREEN+$28*9)[main::i#2] = standard[main::i#2]
Adding number conversion cast (unumber) $28*$a in (main::SCREEN+$28*$a)[main::i#2] = no_null[main::i#2]
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *main::D018 = (unumber)$16
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast $16
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $16
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [16] if(main::i#1!=rangelast(0,7)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [14] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [16] if(main::i#1!=rangelast(0,7)) goto main::@1 to 8
Simplifying constant evaluating to zero (byte)$28*0 in [3] (main::SCREEN+(byte)$28*0)[main::i#2] = petscii_mixed[main::i#2]
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [3] (main::SCREEN+0)[main::i#2] = petscii_mixed[main::i#2]
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [14] if(main::i#1!=8) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $28*1
Simplifying constant integer cast $28*2
Simplifying constant integer cast $28*3
Simplifying constant integer cast $28*4
Simplifying constant integer cast $28*5
Simplifying constant integer cast $28*6
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [16] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::D018 = $16
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2]
  [3] (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2]
  [4] (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2]
  [5] (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2]
  [6] (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2]
  [7] (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2]
  [8] (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2]
  [9] (main::SCREEN+(word)$28*7)[main::i#2] = atascii[main::i#2]
  [10] (main::SCREEN+(word)$28*8)[main::i#2] = screencode_atari[main::i#2]
  [11] (main::SCREEN+(word)$28*9)[main::i#2] = standard[main::i#2]
  [12] (main::SCREEN+(word)$28*$a)[main::i#2] = no_null[main::i#2]
  [13] main::i#1 = ++ main::i#2
  [14] if(main::i#1!=8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 22.000000000000004

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::D018 = $16 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [9] (main::SCREEN+(word)$28*7)[main::i#2] = atascii[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] (main::SCREEN+(word)$28*8)[main::i#2] = screencode_atari[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [11] (main::SCREEN+(word)$28*9)[main::i#2] = standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [12] (main::SCREEN+(word)$28*$a)[main::i#2] = no_null[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [0] *main::D018 = $16 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [9] (main::SCREEN+(word)$28*7)[main::i#2] = atascii[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] (main::SCREEN+(word)$28*8)[main::i#2] = screencode_atari[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [11] (main::SCREEN+(word)$28*9)[main::i#2] = standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [12] (main::SCREEN+(word)$28*$a)[main::i#2] = no_null[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 1232 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 1232 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test string encoding via literals
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-encoding-literals.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label D018 = $d018
    // [0] *main::D018 = $16 -- _deref_pbuc1=vbuc2 
    lda #$16
    sta D018
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_mixed,x
    sta SCREEN,x
    // [3] (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_upper,x
    sta SCREEN+$28*1,x
    // [4] (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_standard,x
    sta SCREEN+$28*2,x
    // [5] (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_mixed,x
    sta SCREEN+$28*3,x
    // [6] (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_upper,x
    sta SCREEN+$28*4,x
    // [7] (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_standard,x
    sta SCREEN+$28*5,x
    // [8] (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda ascii,x
    sta SCREEN+$28*6,x
    // [9] (main::SCREEN+(word)$28*7)[main::i#2] = atascii[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda atascii,x
    sta SCREEN+$28*7,x
    // [10] (main::SCREEN+(word)$28*8)[main::i#2] = screencode_atari[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_atari,x
    sta SCREEN+$28*8,x
    // [11] (main::SCREEN+(word)$28*9)[main::i#2] = standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda standard,x
    sta SCREEN+$28*9,x
    // [12] (main::SCREEN+(word)$28*$a)[main::i#2] = no_null[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda no_null,x
    sta SCREEN+$28*$a,x
    // [13] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data
.segment Data
  no_null: .text "abcABC1"
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
.encoding "ascii"
  ascii: .text "abcABC7"
  .byte 0
.encoding "ascii"
  atascii: .text "abcABC8"
  .byte 0
.encoding "ascii"
  screencode_atari: .text @"abc\$21\$22\$23\$19"
  .byte 0
.encoding "screencode_mixed"
  standard: .text "abcABC0"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte* ascii[]  = "abcABC7"as
const byte* atascii[]  = "abcABC8"at
void main()
const nomodify byte* main::D018 = (byte*) 53272
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 22.000000000000004
const byte* no_null[]  = "abcABC1"z
const byte* petscii_mixed[]  = "abcABC1"pm
const byte* petscii_standard[]  = "abcABC3"pm
const byte* petscii_upper[]  = "abcABC2"pu
const byte* screencode_atari[]  = "abcABC9"sa
const byte* screencode_mixed[]  = "abcABC4"
const byte* screencode_standard[]  = "abcABC6"
const byte* screencode_upper[]  = "abcABC5"su
const byte* standard[]  = "abcABC0"

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 1142

  // File Comments
// Test string encoding via literals
  // Upstart
  // Commodore 64 PRG executable file
.file [name="string-encoding-literals.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label D018 = $d018
    // *D018 = 0x16
    // [0] *main::D018 = $16 -- _deref_pbuc1=vbuc2 
    lda #$16
    sta D018
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (SCREEN+40*0)[i] = petscii_mixed[i]
    // [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_mixed,x
    sta SCREEN,x
    // (SCREEN+40*1)[i] = petscii_upper[i]
    // [3] (main::SCREEN+$28*1)[main::i#2] = petscii_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_upper,x
    sta SCREEN+$28*1,x
    // (SCREEN+40*2)[i] = petscii_standard[i]
    // [4] (main::SCREEN+$28*2)[main::i#2] = petscii_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_standard,x
    sta SCREEN+$28*2,x
    // (SCREEN+40*3)[i] = screencode_mixed[i]
    // [5] (main::SCREEN+$28*3)[main::i#2] = screencode_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_mixed,x
    sta SCREEN+$28*3,x
    // (SCREEN+40*4)[i] = screencode_upper[i]
    // [6] (main::SCREEN+$28*4)[main::i#2] = screencode_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_upper,x
    sta SCREEN+$28*4,x
    // (SCREEN+40*5)[i] = screencode_standard[i]
    // [7] (main::SCREEN+$28*5)[main::i#2] = screencode_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_standard,x
    sta SCREEN+$28*5,x
    // (SCREEN+40*6)[i] = ascii[i]
    // [8] (main::SCREEN+$28*6)[main::i#2] = ascii[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda ascii,x
    sta SCREEN+$28*6,x
    // (SCREEN+40*7)[i] = atascii[i]
    // [9] (main::SCREEN+(word)$28*7)[main::i#2] = atascii[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda atascii,x
    sta SCREEN+$28*7,x
    // (SCREEN+40*8)[i] = screencode_atari[i]
    // [10] (main::SCREEN+(word)$28*8)[main::i#2] = screencode_atari[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_atari,x
    sta SCREEN+$28*8,x
    // (SCREEN+40*9)[i] = standard[i]
    // [11] (main::SCREEN+(word)$28*9)[main::i#2] = standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda standard,x
    sta SCREEN+$28*9,x
    // (SCREEN+40*10)[i] = no_null[i]
    // [12] (main::SCREEN+(word)$28*$a)[main::i#2] = no_null[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda no_null,x
    sta SCREEN+$28*$a,x
    // for( char i: 0..7 )
    // [13] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data
.segment Data
  no_null: .text "abcABC1"
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
.encoding "ascii"
  ascii: .text "abcABC7"
  .byte 0
.encoding "ascii"
  atascii: .text "abcABC8"
  .byte 0
.encoding "ascii"
  screencode_atari: .text @"abc\$21\$22\$23\$19"
  .byte 0
.encoding "screencode_mixed"
  standard: .text "abcABC0"
  .byte 0

