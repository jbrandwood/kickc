__constant const char BLUE = 6
char CONIO_SCREEN_BANK
char CONIO_SCREEN_BANK#13 // CONIO_SCREEN_BANK zp[1]:39 6250000.0625
char *CONIO_SCREEN_TEXT
char *CONIO_SCREEN_TEXT#15 // CONIO_SCREEN_TEXT zp[2]:15 1.8703722222222778E12
__constant char DIGITS[] = "0123456789abcdef"z
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_HEXADECIMAL_VALUES[] = { $1000, $100, $10 }
__constant char RADIX_HEXADECIMAL_VALUES_CHAR[] = { $10 }
__constant unsigned long RADIX_HEXADECIMAL_VALUES_LONG[] = { $10000000, $1000000, $100000, $10000, $1000, $100, $10 }
__constant char SIZEOF_POINTER = 2
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant char SIZEOF_UNSIGNED_INT = 2
__constant char SIZEOF_UNSIGNED_LONG = 4
__constant unsigned int STACK_BASE = $103
__constant const char VERA_ADDRSEL = 1
__constant char * const VERA_ADDRX_H = (char *) 40738
__constant char * const VERA_ADDRX_L = (char *) 40736
__constant char * const VERA_ADDRX_M = (char *) 40737
__constant char * const VERA_CTRL = (char *) 40741
__constant char * const VERA_DATA0 = (char *) 40739
__constant char * const VERA_DATA1 = (char *) 40740
__constant char * const VERA_DC_HSCALE = (char *) 40746
__constant char * const VERA_DC_VSCALE = (char *) 40747
__constant const char VERA_INC_1 = $10
__constant char * const VERA_L0_CONFIG = (char *) 40749
__constant char * const VERA_L0_MAPBASE = (char *) 40750
__constant char * const VERA_L0_TILEBASE = (char *) 40751
__constant char * const VERA_L1_CONFIG = (char *) 40756
__constant char * const VERA_L1_MAPBASE = (char *) 40757
__constant char * const VERA_L1_TILEBASE = (char *) 40758
__constant const char VERA_LAYER_CONFIG_256C = 8
__constant const unsigned int VERA_LAYER_HEIGHT[4] = { $20, $40, $80, $100 }
__constant const char VERA_LAYER_HEIGHT_64 = $40
__constant const char VERA_LAYER_HEIGHT_MASK = $c0
__constant const char VERA_LAYER_TILEBASE_MASK = $fc
__constant const unsigned int VERA_LAYER_WIDTH[4] = { $20, $40, $80, $100 }
__constant const char VERA_LAYER_WIDTH_128 = $20
__constant const char VERA_LAYER_WIDTH_MASK = $30
__constant const char WHITE = 1
void __start()
void clearline()
char clearline::$1 // reg byte a 2.000000000002E12
char clearline::$2 // reg byte a 2.000000000002E12
char clearline::$5 // reg byte a 2.000000000002E12
char *clearline::addr
char *clearline::addr#0 // addr zp[2]:10 1.000000000001E12
unsigned int clearline::c
unsigned int clearline::c#1 // c zp[2]:2 2.000000000000002E15
unsigned int clearline::c#2 // c zp[2]:2 7.500000000000008E14
char clearline::color
char clearline::color#0 // reg byte x 1.668333333333337E14
__constant char conio_cursor_x[2] = { 0, 0 }
__constant char conio_cursor_y[2] = { 0, 0 }
__loadstore unsigned int conio_height // zp[2]:35 6.250000065E7
__constant unsigned int conio_line_text[2] = { 0, 0 }
__loadstore char conio_rowshift // zp[1]:19 4.9310344827637933E11
__loadstore unsigned int conio_rowskip // zp[2]:17 5.4054594594651355E11
__loadstore volatile char conio_screen_height // zp[1]:34 6.59340659489011E8
__loadstore char conio_screen_layer // zp[1]:28 1.4496624474805906E10
__loadstore volatile char conio_screen_width // zp[1]:14 4.609217050691272E12
__constant char conio_scroll_enable[2] = { 1, 1 }
__loadstore unsigned int conio_width // zp[2]:41 617284.5925925926
void conio_x16_init()
__constant char * const conio_x16_init::BASIC_CURSOR_LINE = (char *) 214
char conio_x16_init::line
char conio_x16_init::line#0 // line zp[1]:66 2.1999999999999997
char conio_x16_init::line#1 // line zp[1]:66 22.0
char conio_x16_init::line#3 // line zp[1]:66 33.0
__stackcall void cputc(char c)
char cputc::$15 // reg byte a 2.00000002E8
unsigned int cputc::$16 // zp[2]:2 2.00000002E8
char cputc::$2 // reg byte a 2.00000002E8
char cputc::$4 // reg byte a 2.00000002E8
char cputc::$5 // reg byte a 2.00000002E8
char cputc::$6 // reg byte a 2.00000002E8
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // c zp[1]:29 1.7647059E7
char cputc::color
char cputc::color#0 // reg byte x 1.428571442857143E7
char *cputc::conio_addr
char *cputc::conio_addr#0 // conio_addr zp[2]:8 1.00000001E8
char *cputc::conio_addr#1 // conio_addr zp[2]:8 6.0000000599999994E7
char cputc::scroll_enable
char cputc::scroll_enable#0 // reg byte a 2.00000002E8
void cputln()
char cputln::$2 // reg byte a 2.000000002E9
char cputln::$3 // reg byte a 2.000000002E9
unsigned int cputln::temp
unsigned int cputln::temp#0 // temp zp[2]:8 2.000000002E9
unsigned int cputln::temp#1 // temp zp[2]:8 1.000000001E9
void cscroll()
void gotoxy(char x , char y)
char gotoxy::$5 // reg byte a 2.00000000002E11
unsigned int gotoxy::$6 // zp[2]:20 2.00000000002E11
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:20 1.00000000001E11
char gotoxy::x
char gotoxy::y
char gotoxy::y#1 // reg byte x 22.0
char gotoxy::y#2 // reg byte x 2.0000000002E10
char gotoxy::y#3 // reg byte x 7.000000000466667E10
char gotoxy::y#4 // reg byte x 4.00000000004E10
void insertup()
char insertup::$3 // reg byte a 2.00000000000002E14
char insertup::cy
char insertup::cy#0 // cy zp[1]:13 8.341666666666834E12
char insertup::i
char insertup::i#1 // reg byte x 2.00000000000002E14
char insertup::i#2 // reg byte x 4.444444444444489E13
unsigned int insertup::line
unsigned int insertup::line#0 // line zp[2]:6 2.00000000000002E14
char *insertup::start
char *insertup::start#0 // start zp[2]:6 1.00000000000001E14
char insertup::width
char insertup::width#0 // width zp[1]:12 9.100000000000182E12
void main()
unsigned long main::$1 // zp[4]:53 202.0
char main::$10 // reg byte a 202.0
char main::$11 // reg byte a 202.0
unsigned int main::$13 // zp[2]:22 202.0
unsigned int main::$15 // zp[2]:51 202.0
char main::$3 // reg byte a 202.0
char main::$4 // zp[1]:40 67.33333333333333
char main::$5 // reg byte a 202.0
char main::$6 // reg byte a 202.0
char main::$8 // reg byte a 202.0
char main::$9 // zp[1]:65 67.33333333333333
char main::bankbeg
char main::bankbeg#0 // bankbeg zp[1]:40 8.08
char main::bankend
char main::bankend#0 // bankend zp[1]:65 8.416666666666666
unsigned int main::beg
unsigned int main::beg#0 // beg zp[2]:22 67.33333333333333
unsigned int main::beg#1 // beg zp[2]:22 8.782608695652174
__constant const unsigned int main::borderbeg = $a000
unsigned long main::calcbeg
unsigned long main::calcend
unsigned long main::calcend#0 // calcend zp[4]:53 19.423076923076923
unsigned int main::end
unsigned int main::end#0 // end zp[2]:51 101.0
unsigned int main::end#1 // end zp[2]:51 7.769230769230769
__constant unsigned int main::inc = $123
unsigned long main::num
unsigned long main::num#1 // num zp[4]:61 151.5
unsigned long main::num#10 // num zp[4]:61 8.244897959183673
__constant char main::s[6] = "cbeg="
__constant char main::s1[7] = ", add="
__constant char main::s2[8] = ", cend="
__constant char main::s3[8] = ", bbeg="
__constant char main::s4[8] = ", bend="
__constant char main::s5[7] = ", beg="
__constant char main::s6[7] = ", end="
__constant char main::s7[2] = "
"
unsigned long main::src1
unsigned long main::src1#1 // src1 zp[4]:57 202.0
unsigned long main::src1#10 // src1 zp[4]:57 16.16
void memcpy_in_vram(char dest_bank , void *dest , char dest_increment , char src_bank , void *src , char src_increment , unsigned int num)
char memcpy_in_vram::$0 // reg byte a 2.000000000000002E15
char memcpy_in_vram::$1 // reg byte a 2.000000000000002E15
char memcpy_in_vram::$3 // reg byte a 2.000000000000002E15
char memcpy_in_vram::$4 // reg byte a 2.000000000000002E15
void *memcpy_in_vram::dest
void *memcpy_in_vram::dest#0 // dest zp[2]:6 1.909090909090912E14
char memcpy_in_vram::dest_bank
char memcpy_in_vram::dest_increment
unsigned int memcpy_in_vram::i
unsigned int memcpy_in_vram::i#1 // i zp[2]:2 2.0E19
unsigned int memcpy_in_vram::i#2 // i zp[2]:2 1.0E19
unsigned int memcpy_in_vram::num
unsigned int memcpy_in_vram::num#0 // num zp[2]:4 5.8824117647058829E17
void *memcpy_in_vram::src
char *memcpy_in_vram::src#0 // src zp[2]:10 1.6666666666666834E13
char memcpy_in_vram::src_bank
char memcpy_in_vram::src_increment
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // reg byte a 2002.0
char printf_number_buffer::buffer_sign#1 // reg byte a 2002.0
char printf_number_buffer::buffer_sign#10 // reg byte a 11502.5
char printf_number_buffer::buffer_sign#2 // reg byte a 2002.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1.0000001E7
void (*printf_str::putc)(char)
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:37 4000000.4
const char *printf_str::s#10 // s zp[2]:37 1.5050002E7
const char *printf_str::s#11 // s zp[2]:37 100001.0
void printf_uchar(void (*putc)(char) , char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uchar::format
char printf_uchar::format_justify_left
char printf_uchar::format_min_length
char printf_uchar::format_radix
char printf_uchar::format_sign_always
char printf_uchar::format_upper_case
char printf_uchar::format_zero_padding
void (*printf_uchar::putc)(char)
char printf_uchar::uvalue
char printf_uchar::uvalue#0 // reg byte x 202.0
char printf_uchar::uvalue#1 // reg byte x 202.0
char printf_uchar::uvalue#2 // reg byte x 601.5
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#0 // uvalue zp[2]:22 202.0
unsigned int printf_uint::uvalue#1 // uvalue zp[2]:22 202.0
unsigned int printf_uint::uvalue#2 // uvalue zp[2]:22 601.5
void printf_ulong(void (*putc)(char) , unsigned long uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_ulong::format
char printf_ulong::format_justify_left
char printf_ulong::format_min_length
char printf_ulong::format_radix
char printf_ulong::format_sign_always
char printf_ulong::format_upper_case
char printf_ulong::format_zero_padding
void (*printf_ulong::putc)(char)
unsigned long printf_ulong::uvalue
unsigned long printf_ulong::uvalue#0 // uvalue zp[4]:24 202.0
unsigned long printf_ulong::uvalue#1 // uvalue zp[4]:24 202.0
unsigned long printf_ulong::uvalue#2 // uvalue zp[4]:24 202.0
unsigned long printf_ulong::uvalue#3 // uvalue zp[4]:24 652.0
void screenlayer(char layer)
unsigned int screenlayer::$2 // zp[2]:20 202.0
char screenlayer::$3 // reg byte a 202.0
unsigned int screenlayer::$4 // zp[2]:49 202.0
unsigned int screenlayer::$5 // zp[2]:43 202.0
char screenlayer::layer
__constant char screenlayer::layer#0 = 1 // layer
char screenlayer::vera_layer_get_height1_$0 // reg byte a 202.0
char screenlayer::vera_layer_get_height1_$1 // reg byte a 202.0
char screenlayer::vera_layer_get_height1_$2 // reg byte a 202.0
char screenlayer::vera_layer_get_height1_$3 // reg byte a 202.0
char *screenlayer::vera_layer_get_height1_config
char *screenlayer::vera_layer_get_height1_config#0 // vera_layer_get_height1_config zp[2]:47 202.0
char screenlayer::vera_layer_get_height1_layer
char screenlayer::vera_layer_get_height1_layer#0 // reg byte a 202.0
unsigned int screenlayer::vera_layer_get_height1_return
unsigned int screenlayer::vera_layer_get_height1_return#0 // vera_layer_get_height1_return zp[2]:43 202.0
unsigned int screenlayer::vera_layer_get_height1_return#1 // vera_layer_get_height1_return zp[2]:43 202.0
char screenlayer::vera_layer_get_width1_$0 // reg byte a 202.0
char screenlayer::vera_layer_get_width1_$1 // reg byte a 202.0
char screenlayer::vera_layer_get_width1_$2 // reg byte a 202.0
char screenlayer::vera_layer_get_width1_$3 // reg byte a 202.0
char *screenlayer::vera_layer_get_width1_config
char *screenlayer::vera_layer_get_width1_config#0 // vera_layer_get_width1_config zp[2]:45 202.0
char screenlayer::vera_layer_get_width1_layer
char screenlayer::vera_layer_get_width1_layer#0 // reg byte a 202.0
unsigned int screenlayer::vera_layer_get_width1_return
unsigned int screenlayer::vera_layer_get_width1_return#0 // vera_layer_get_width1_return zp[2]:20 202.0
unsigned int screenlayer::vera_layer_get_width1_return#1 // vera_layer_get_width1_return zp[2]:20 202.0
void screensize(char *x , char *y)
char screensize::$1 // reg byte a 202.0
char screensize::$3 // reg byte a 202.0
char screensize::hscale
char screensize::hscale#0 // reg byte a 202.0
char screensize::vscale
char screensize::vscale#0 // reg byte a 202.0
char *screensize::x
__constant char *screensize::x#0 = &conio_screen_width // x
char *screensize::y
__constant char *screensize::y#0 = &conio_screen_height // y
void uctoa(char value , char *buffer , char radix)
char *uctoa::buffer
char *uctoa::buffer#11 // buffer zp[2]:37 335000.50000000006
char *uctoa::buffer#14 // buffer zp[2]:37 1500001.5
char *uctoa::buffer#3 // buffer zp[2]:37 20002.0
char *uctoa::buffer#4 // buffer zp[2]:37 2000002.0
char uctoa::digit
char uctoa::digit#1 // digit zp[1]:13 2000002.0
char uctoa::digit#2 // digit zp[1]:13 307692.6153846154
char uctoa::digit_value
char uctoa::digit_value#0 // digit_value zp[1]:29 600000.6000000001
char *uctoa::digit_values
char uctoa::max_digits
char uctoa::radix
char uctoa::started
char uctoa::started#2 // started zp[1]:40 600000.6000000001
char uctoa::started#4 // started zp[1]:40 1000001.0
char uctoa::value
char uctoa::value#0 // reg byte x 1000001.0
char uctoa::value#1 // reg byte x 5501.0
char uctoa::value#2 // reg byte x 670001.0000000001
char uctoa::value#6 // reg byte x 1500001.5
char uctoa_append(char *buffer , char value , char sub)
char *uctoa_append::buffer
char *uctoa_append::buffer#0 // buffer zp[2]:37 1375000.25
char uctoa_append::digit
char uctoa_append::digit#1 // reg byte y 1.0000000001E10
char uctoa_append::digit#2 // reg byte y 1.00050000015E10
char uctoa_append::return
char uctoa_append::return#0 // reg byte x 2000002.0
char uctoa_append::sub
char uctoa_append::sub#0 // sub zp[1]:29 3.3335000005E9
char uctoa_append::value
char uctoa_append::value#0 // reg byte x 3666667.333333333
char uctoa_append::value#1 // reg byte x 2.0000000002E10
char uctoa_append::value#2 // reg byte x 5.001833334166666E9
void ultoa(unsigned long value , char *buffer , char radix)
char ultoa::$10 // reg byte a 2000002.0
char ultoa::$11 // reg byte a 20002.0
char *ultoa::buffer
char *ultoa::buffer#11 // buffer zp[2]:37 287143.2857142857
char *ultoa::buffer#14 // buffer zp[2]:37 1500001.5
char *ultoa::buffer#3 // buffer zp[2]:37 20002.0
char *ultoa::buffer#4 // buffer zp[2]:37 2000002.0
char ultoa::digit
char ultoa::digit#1 // digit zp[1]:13 2000002.0
char ultoa::digit#2 // digit zp[1]:13 285714.5714285714
unsigned long ultoa::digit_value
unsigned long ultoa::digit_value#0 // digit_value zp[4]:30 600000.6000000001
unsigned long *ultoa::digit_values
char ultoa::max_digits
char ultoa::radix
char ultoa::started
char ultoa::started#2 // reg byte x 500000.5
char ultoa::started#4 // reg byte x 1000001.0
unsigned long ultoa::value
unsigned long ultoa::value#0 // value zp[4]:24 1000001.0
unsigned long ultoa::value#1 // value zp[4]:24 5501.0
unsigned long ultoa::value#2 // value zp[4]:24 572857.857142857
unsigned long ultoa::value#6 // value zp[4]:24 1500001.5
unsigned long ultoa_append(char *buffer , unsigned long value , unsigned long sub)
char *ultoa_append::buffer
char *ultoa_append::buffer#0 // buffer zp[2]:37 1375000.25
char ultoa_append::digit
char ultoa_append::digit#1 // reg byte x 1.0000000001E10
char ultoa_append::digit#2 // reg byte x 1.00050000015E10
unsigned long ultoa_append::return
unsigned long ultoa_append::return#0 // return zp[4]:24 2000002.0
unsigned long ultoa_append::sub
unsigned long ultoa_append::sub#0 // sub zp[4]:30 3.3335000005E9
unsigned long ultoa_append::value
unsigned long ultoa_append::value#0 // value zp[4]:24 3666667.333333333
unsigned long ultoa_append::value#1 // value zp[4]:24 2.0000000002E10
unsigned long ultoa_append::value#2 // value zp[4]:24 5.001833334166666E9
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 2000002.0
char utoa::$11 // reg byte x 20002.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:37 287143.2857142857
char *utoa::buffer#14 // buffer zp[2]:37 1500001.5
char *utoa::buffer#3 // buffer zp[2]:37 20002.0
char *utoa::buffer#4 // buffer zp[2]:37 2000002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:40 2000002.0
char utoa::digit#2 // digit zp[1]:40 285714.5714285714
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:8 600000.6000000001
unsigned int *utoa::digit_values
char utoa::max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte x 500000.5
char utoa::started#4 // reg byte x 1000001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:22 1000001.0
unsigned int utoa::value#1 // value zp[2]:22 5501.0
unsigned int utoa::value#2 // value zp[2]:22 572857.857142857
unsigned int utoa::value#6 // value zp[2]:22 1500001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:37 1375000.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1.0000000001E10
char utoa_append::digit#2 // reg byte x 1.00050000015E10
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:22 2000002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:8 3.3335000005E9
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:22 3666667.333333333
unsigned int utoa_append::value#1 // value zp[2]:22 2.0000000002E10
unsigned int utoa_append::value#2 // value zp[2]:22 5.001833334166666E9
__constant char vera_layer_backcolor[2] = { BLUE, BLUE }
__constant char *vera_layer_config[2] = { VERA_L0_CONFIG, VERA_L1_CONFIG }
char vera_layer_get_color(char layer)
char vera_layer_get_color::$0 // reg byte a 2.0000000000002E13
char vera_layer_get_color::$1 // reg byte a 2.0000000000002E13
char vera_layer_get_color::$3 // reg byte a 2.0000000000002E13
char *vera_layer_get_color::addr
char *vera_layer_get_color::addr#0 // addr zp[2]:8 2.0000000000002E13
char vera_layer_get_color::layer
char vera_layer_get_color::layer#0 // reg byte x 2.00000002E8
char vera_layer_get_color::layer#1 // reg byte x 2.000000000002E12
char vera_layer_get_color::layer#2 // reg byte x 6.833350000000999E12
char vera_layer_get_color::return
char vera_layer_get_color::return#0 // reg byte a 2.0000000000002E13
char vera_layer_get_color::return#1 // reg byte a 2.0000000000002E13
char vera_layer_get_color::return#2 // reg byte a 5.250025000001E12
char vera_layer_get_color::return#3 // reg byte a 2.00000002E8
char vera_layer_get_color::return#4 // reg byte a 2.000000000002E12
char vera_layer_get_rowshift(char layer)
char vera_layer_get_rowshift::layer
char vera_layer_get_rowshift::layer#0 // reg byte x 1102.0
char vera_layer_get_rowshift::return
char vera_layer_get_rowshift::return#0 // reg byte a 367.33333333333337
char vera_layer_get_rowshift::return#2 // reg byte a 202.0
unsigned int vera_layer_get_rowskip(char layer)
char vera_layer_get_rowskip::$0 // reg byte a 2002.0
char vera_layer_get_rowskip::layer
char vera_layer_get_rowskip::layer#0 // reg byte a 1102.0
unsigned int vera_layer_get_rowskip::return
unsigned int vera_layer_get_rowskip::return#0 // return zp[2]:49 367.33333333333337
unsigned int vera_layer_get_rowskip::return#2 // return zp[2]:49 202.0
__constant char *vera_layer_mapbase[2] = { VERA_L0_MAPBASE, VERA_L1_MAPBASE }
void vera_layer_mode_text(char layer , unsigned long mapbase_address , unsigned long tilebase_address , unsigned int mapwidth , unsigned int mapheight , char tilewidth , char tileheight , unsigned int color_mode)
unsigned int vera_layer_mode_text::color_mode
char vera_layer_mode_text::layer
__constant char vera_layer_mode_text::layer#0 = 1 // layer
unsigned long vera_layer_mode_text::mapbase_address
__constant unsigned long vera_layer_mode_text::mapbase_address#0 = 0 // mapbase_address
unsigned int vera_layer_mode_text::mapheight
unsigned int vera_layer_mode_text::mapwidth
unsigned long vera_layer_mode_text::tilebase_address
__constant unsigned long vera_layer_mode_text::tilebase_address#0 = $f800 // tilebase_address
char vera_layer_mode_text::tileheight
char vera_layer_mode_text::tilewidth
void vera_layer_mode_tile(char layer , unsigned long mapbase_address , unsigned long tilebase_address , unsigned int mapwidth , unsigned int mapheight , char tilewidth , char tileheight , char color_depth)
char vera_layer_mode_tile::color_depth
char vera_layer_mode_tile::config
__constant char vera_layer_mode_tile::config#10 = VERA_LAYER_WIDTH_128|VERA_LAYER_HEIGHT_64 // config
char vera_layer_mode_tile::layer
char vera_layer_mode_tile::mapbase
__constant char vera_layer_mode_tile::mapbase#0 = 0 // mapbase
unsigned long vera_layer_mode_tile::mapbase_address
unsigned int vera_layer_mode_tile::mapheight
unsigned int vera_layer_mode_tile::mapwidth
char vera_layer_mode_tile::tilebase
unsigned long vera_layer_mode_tile::tilebase_address
__constant unsigned long vera_layer_mode_tile::tilebase_address#0 = vera_layer_mode_text::tilebase_address#0>>1 // tilebase_address
char vera_layer_mode_tile::tileheight
char vera_layer_mode_tile::tilewidth
__constant char vera_layer_rowshift[2] = { 0, 0 }
__constant unsigned int vera_layer_rowskip[2] = { 0, 0 }
char vera_layer_set_backcolor(char layer , char color)
char vera_layer_set_backcolor::color
char vera_layer_set_backcolor::layer
__constant char vera_layer_set_backcolor::layer#0 = 1 // layer
char vera_layer_set_backcolor::old
char vera_layer_set_backcolor::return
void vera_layer_set_config(char layer , char config)
char *vera_layer_set_config::addr
char *vera_layer_set_config::addr#0 // addr zp[2]:47 20002.0
char vera_layer_set_config::config
char vera_layer_set_config::layer
void vera_layer_set_mapbase(char layer , char mapbase)
char vera_layer_set_mapbase::$0 // reg byte a 20002.0
char *vera_layer_set_mapbase::addr
char *vera_layer_set_mapbase::addr#0 // addr zp[2]:45 20002.0
char vera_layer_set_mapbase::layer
char vera_layer_set_mapbase::layer#3 // reg byte a 10001.0
char vera_layer_set_mapbase::mapbase
char vera_layer_set_mapbase::mapbase#3 // reg byte x 3333.6666666666665
void vera_layer_set_text_color_mode(char layer , char color_mode)
char *vera_layer_set_text_color_mode::addr
char *vera_layer_set_text_color_mode::addr#0 // addr zp[2]:49 2502.5
char vera_layer_set_text_color_mode::color_mode
char vera_layer_set_text_color_mode::layer
char vera_layer_set_textcolor(char layer , char color)
char vera_layer_set_textcolor::color
char vera_layer_set_textcolor::layer
__constant char vera_layer_set_textcolor::layer#0 = 1 // layer
char vera_layer_set_textcolor::old
char vera_layer_set_textcolor::return
void vera_layer_set_tilebase(char layer , char tilebase)
char *vera_layer_set_tilebase::addr
char *vera_layer_set_tilebase::addr#0 // addr zp[2]:43 20002.0
char vera_layer_set_tilebase::layer
char vera_layer_set_tilebase::tilebase
__constant char vera_layer_textcolor[2] = { WHITE, WHITE }
__constant char *vera_layer_tilebase[2] = { VERA_L0_TILEBASE, VERA_L1_TILEBASE }
__constant unsigned long vera_mapbase_address[2] = { 0, 0 }
__constant char vera_mapbase_bank[2] = { 0, 0 }
__constant unsigned int vera_mapbase_offset[2] = { 0, 0 }
__constant unsigned long vera_tilebase_address[2] = { 0, 0 }
__constant char vera_tilebase_bank[2] = { 0, 0 }
__constant unsigned int vera_tilebase_offset[2] = { 0, 0 }

zp[1]:66 [ conio_x16_init::line#3 conio_x16_init::line#1 conio_x16_init::line#0 ]
zp[2]:15 [ CONIO_SCREEN_TEXT#15 ]
zp[1]:39 [ CONIO_SCREEN_BANK#13 ]
zp[4]:57 [ main::src1#10 main::src1#1 ]
zp[4]:61 [ main::num#10 main::num#1 ]
reg byte a [ vera_layer_set_mapbase::layer#3 ]
reg byte x [ vera_layer_set_mapbase::mapbase#3 ]
reg byte x [ gotoxy::y#4 gotoxy::y#3 gotoxy::y#1 gotoxy::y#2 ]
reg byte x [ vera_layer_get_color::layer#2 vera_layer_get_color::layer#1 vera_layer_get_color::layer#0 ]
reg byte a [ vera_layer_get_color::return#2 vera_layer_get_color::return#0 vera_layer_get_color::return#1 ]
zp[4]:24 [ printf_ulong::uvalue#3 printf_ulong::uvalue#0 printf_ulong::uvalue#1 printf_ulong::uvalue#2 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 ]
zp[2]:22 [ printf_uint::uvalue#2 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 main::beg#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 main::$13 main::beg#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte a [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:37 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 printf_str::s#10 printf_str::s#11 printf_str::s#0 ]
reg byte x [ insertup::i#2 insertup::i#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:14 [ conio_screen_width ]
zp[1]:34 [ conio_screen_height ]
zp[1]:28 [ conio_screen_layer ]
zp[2]:41 [ conio_width ]
zp[2]:35 [ conio_height ]
zp[1]:19 [ conio_rowshift ]
zp[2]:17 [ conio_rowskip ]
reg byte a [ vera_layer_get_color::return#3 ]
reg byte x [ cputc::color#0 ]
reg byte a [ cputc::$15 ]
reg byte a [ cputc::$2 ]
reg byte a [ cputc::$4 ]
reg byte a [ cputc::$5 ]
reg byte a [ cputc::$6 ]
reg byte a [ cputc::scroll_enable#0 ]
zp[2]:2 [ cputc::$16 memcpy_in_vram::i#2 memcpy_in_vram::i#1 clearline::c#2 clearline::c#1 ]
zp[4]:53 [ main::$1 main::calcend#0 ]
reg byte a [ main::$3 ]
zp[1]:40 [ main::$4 main::bankbeg#0 utoa::digit#2 utoa::digit#1 uctoa::started#2 uctoa::started#4 ]
reg byte a [ main::$5 ]
reg byte a [ main::$6 ]
reg byte a [ main::$8 ]
zp[1]:65 [ main::$9 main::bankend#0 ]
reg byte a [ main::$10 ]
reg byte a [ main::$11 ]
zp[2]:51 [ main::$15 main::end#0 main::end#1 ]
reg byte a [ screensize::hscale#0 ]
reg byte a [ screensize::$1 ]
reg byte a [ screensize::vscale#0 ]
reg byte a [ screensize::$3 ]
reg byte a [ screenlayer::vera_layer_get_width1_layer#0 ]
reg byte a [ screenlayer::vera_layer_get_width1_$2 ]
reg byte a [ screenlayer::vera_layer_get_width1_$0 ]
reg byte a [ screenlayer::vera_layer_get_width1_$1 ]
reg byte a [ screenlayer::vera_layer_get_width1_$3 ]
reg byte x [ vera_layer_get_rowshift::layer#0 ]
reg byte a [ vera_layer_get_rowshift::return#2 ]
reg byte a [ screenlayer::$3 ]
reg byte a [ vera_layer_get_rowskip::layer#0 ]
reg byte a [ screenlayer::vera_layer_get_height1_layer#0 ]
reg byte a [ screenlayer::vera_layer_get_height1_$2 ]
reg byte a [ screenlayer::vera_layer_get_height1_$0 ]
reg byte a [ screenlayer::vera_layer_get_height1_$1 ]
reg byte a [ screenlayer::vera_layer_get_height1_$3 ]
reg byte a [ vera_layer_set_mapbase::$0 ]
zp[2]:45 [ vera_layer_set_mapbase::addr#0 screenlayer::vera_layer_get_width1_config#0 ]
zp[2]:20 [ gotoxy::$6 gotoxy::line_offset#0 screenlayer::vera_layer_get_width1_return#0 screenlayer::vera_layer_get_width1_return#1 screenlayer::$2 ]
reg byte a [ gotoxy::$5 ]
reg byte a [ vera_layer_get_color::$3 ]
reg byte a [ vera_layer_get_color::$0 ]
reg byte a [ vera_layer_get_color::$1 ]
reg byte a [ cputln::$2 ]
reg byte a [ cputln::$3 ]
reg byte a [ printf_str::c#1 ]
zp[2]:49 [ vera_layer_set_text_color_mode::addr#0 vera_layer_get_rowskip::return#2 screenlayer::$4 vera_layer_get_rowskip::return#0 ]
reg byte a [ vera_layer_get_rowshift::return#0 ]
reg byte a [ vera_layer_get_rowskip::$0 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:30 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
zp[1]:29 [ uctoa::digit_value#0 uctoa_append::sub#0 cputc::c#0 ]
reg byte x [ uctoa_append::return#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:8 [ utoa::digit_value#0 utoa_append::sub#0 cputc::conio_addr#0 cputc::conio_addr#1 cputln::temp#0 cputln::temp#1 vera_layer_get_color::addr#0 ]
zp[2]:47 [ vera_layer_set_config::addr#0 screenlayer::vera_layer_get_height1_config#0 ]
zp[2]:43 [ vera_layer_set_tilebase::addr#0 screenlayer::vera_layer_get_height1_return#0 screenlayer::vera_layer_get_height1_return#1 screenlayer::$5 ]
zp[1]:13 [ insertup::cy#0 uctoa::digit#2 uctoa::digit#1 ultoa::digit#2 ultoa::digit#1 ]
zp[1]:12 [ insertup::width#0 ]
reg byte a [ insertup::$3 ]
zp[2]:6 [ insertup::line#0 insertup::start#0 memcpy_in_vram::dest#0 ]
zp[2]:4 [ memcpy_in_vram::num#0 ]
reg byte a [ clearline::$5 ]
zp[2]:10 [ clearline::addr#0 memcpy_in_vram::src#0 ]
reg byte a [ clearline::$1 ]
reg byte a [ clearline::$2 ]
reg byte a [ vera_layer_get_color::return#4 ]
reg byte x [ clearline::color#0 ]
reg byte a [ memcpy_in_vram::$0 ]
reg byte a [ memcpy_in_vram::$1 ]
reg byte a [ memcpy_in_vram::$3 ]
reg byte a [ memcpy_in_vram::$4 ]
mem[12] [ printf_buffer ]
