Resolved forward reference LOGO256_RED to LOGO256_RED
Resolved forward reference LOGO256_GREEN to LOGO256_GREEN
Resolved forward reference LOGO256_BLUE to LOGO256_BLUE
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  LOGO256_BLUE#4 = phi( __start::@1/LOGO256_BLUE#6 )
  LOGO256_GREEN#4 = phi( __start::@1/LOGO256_GREEN#6 )
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  LOGO256_BLUE#2 = phi( main/LOGO256_BLUE#4, main::@1/LOGO256_BLUE#2 )
  LOGO256_GREEN#2 = phi( main/LOGO256_GREEN#4, main::@1/LOGO256_GREEN#2 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  (main::SCREEN+$28*0)[main::i#2] = LOGO256_RED[main::i#2]
  (main::SCREEN+$28*8)[main::i#2] = LOGO256_GREEN#2[main::i#2]
  (main::SCREEN+$28*$10)[main::i#2] = LOGO256_BLUE#2[main::i#2]
  main::i#1 = main::i#2 + rangenext(0,$ff)
  main::$0 = main::i#1 != rangelast(0,$ff)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  __start::__init1_$0 = LOGO256_RED + $100
  LOGO256_GREEN#0 = __start::__init1_$0
  __start::__init1_$1 = LOGO256_GREEN#0 + $100
  LOGO256_BLUE#0 = __start::__init1_$1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  LOGO256_BLUE#6 = phi( __start::__init1/LOGO256_BLUE#0 )
  LOGO256_GREEN#6 = phi( __start::__init1/LOGO256_GREEN#0 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  LOGO256_BLUE#5 = phi( __start::@1/LOGO256_BLUE#6 )
  LOGO256_GREEN#5 = phi( __start::@1/LOGO256_GREEN#6 )
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  LOGO256_BLUE#3 = phi( __start::@2/LOGO256_BLUE#5 )
  LOGO256_GREEN#3 = phi( __start::@2/LOGO256_GREEN#5 )
  LOGO256_GREEN#1 = LOGO256_GREEN#3
  LOGO256_BLUE#1 = LOGO256_BLUE#3
  return 
  to:@return

SYMBOL TABLE SSA
const byte* LOGO256[]  = kickasm {{ #import "xmega65graphics.asm"
    .var logo256 = LoadPicture("mega65-256.png")
    .var palette256 = getPalette(logo256)
    .print "width: "+logo256.width + " height: "+logo256.height + " colors: "+palette256.keys().size()
    // Output the graphics
    .for (var x=0; x<logo256.width; x++)
	    .for (var y=0; y<logo256.height; y++)
		    .byte getFullcolourByte(logo256, palette256, x, y)
    // Output the RGB-values of the palette
    .fill 256, getPaletteRed(palette256,i)
    .fill 256, getPaletteGreen(palette256,i)
    .fill 256, getPaletteBlue(palette256,i)
 }}
byte* LOGO256_BLUE
byte* LOGO256_BLUE#0
byte* LOGO256_BLUE#1
byte* LOGO256_BLUE#2
byte* LOGO256_BLUE#3
byte* LOGO256_BLUE#4
byte* LOGO256_BLUE#5
byte* LOGO256_BLUE#6
byte* LOGO256_GREEN
byte* LOGO256_GREEN#0
byte* LOGO256_GREEN#1
byte* LOGO256_GREEN#2
byte* LOGO256_GREEN#3
byte* LOGO256_GREEN#4
byte* LOGO256_GREEN#5
byte* LOGO256_GREEN#6
const byte* LOGO256_RED = LOGO256+$80*$80
void __start()
byte*~ __start::__init1_$0
byte*~ __start::__init1_$1
void main()
bool~ main::$0
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2

Adding number conversion cast (unumber) $80*$80 in 
Adding number conversion cast (unumber) $28*0 in (main::SCREEN+$28*0)[main::i#2] = LOGO256_RED[main::i#2]
Adding number conversion cast (unumber) $28*8 in (main::SCREEN+$28*8)[main::i#2] = LOGO256_GREEN#2[main::i#2]
Adding number conversion cast (unumber) $28*$10 in (main::SCREEN+$28*$10)[main::i#2] = LOGO256_BLUE#2[main::i#2]
Adding number conversion cast (unumber) $100 in __start::__init1_$0 = LOGO256_RED + $100
Adding number conversion cast (unumber) $100 in __start::__init1_$1 = LOGO256_GREEN#0 + $100
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $100
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $100
Finalized unsigned number type $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias LOGO256_GREEN#0 = __start::__init1_$0 LOGO256_GREEN#6 LOGO256_GREEN#5 LOGO256_GREEN#3 LOGO256_GREEN#1 
Alias LOGO256_BLUE#0 = __start::__init1_$1 LOGO256_BLUE#6 LOGO256_BLUE#5 LOGO256_BLUE#3 LOGO256_BLUE#1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values LOGO256_GREEN#4 LOGO256_GREEN#0
Identical Phi Values LOGO256_BLUE#4 LOGO256_BLUE#0
Identical Phi Values LOGO256_GREEN#2 LOGO256_GREEN#4
Identical Phi Values LOGO256_BLUE#2 LOGO256_BLUE#4
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$0 [8] if(main::i#1!=rangelast(0,$ff)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [10] LOGO256_GREEN#0 = LOGO256_RED + $100
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant LOGO256_GREEN#0 = LOGO256_RED+$100
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [8] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to 0
Simplifying constant evaluating to zero (byte)$28*0 in [3] (main::SCREEN+(byte)$28*0)[main::i#2] = LOGO256_RED[main::i#2]
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [3] (main::SCREEN+0)[main::i#2] = LOGO256_RED[main::i#2]
Successful SSA optimization PassNSimplifyExpressionWithZero
Adding number conversion cast (unumber) 0 in if(main::i#1!=0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [7] LOGO256_BLUE#0 = LOGO256_GREEN#0 + $100
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant LOGO256_BLUE#0 = LOGO256_GREEN#0+$100
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type $80
Finalized unsigned number type $80
Finalized unsigned number type $28
Finalized unsigned number type 8
Finalized unsigned number type $28
Finalized unsigned number type $10
Successful SSA optimization Pass2FinalizeAllNumbers
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::SCREEN[main::i#2] = LOGO256_RED[main::i#2]
  [3] (main::SCREEN+(word)$28*8)[main::i#2] = LOGO256_GREEN#0[main::i#2]
  [4] (main::SCREEN+(word)$28*$10)[main::i#2] = LOGO256_BLUE#0[main::i#2]
  [5] main::i#1 = ++ main::i#2
  [6] if(main::i#1!=0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte* LOGO256_BLUE
byte* LOGO256_GREEN
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::SCREEN[main::i#2] = LOGO256_RED[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] (main::SCREEN+(word)$28*8)[main::i#2] = LOGO256_GREEN#0[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (main::SCREEN+(word)$28*$10)[main::i#2] = LOGO256_BLUE#0[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::SCREEN[main::i#2] = LOGO256_RED[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] (main::SCREEN+(word)$28*8)[main::i#2] = LOGO256_GREEN#0[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (main::SCREEN+(word)$28*$10)[main::i#2] = LOGO256_BLUE#0[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 466 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 466 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Import an XMega65 8bit-per-color logo
// Fill the palette values into
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Create pointers to the palette RGBs in the logo (assumes dimensions are 128x128)
  .label LOGO256_RED = LOGO256+$80*$80
  .label LOGO256_GREEN = LOGO256_RED+$100
  .label LOGO256_BLUE = LOGO256_GREEN+$100
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::SCREEN[main::i#2] = LOGO256_RED[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda LOGO256_RED,x
    sta SCREEN,x
    // [3] (main::SCREEN+(word)$28*8)[main::i#2] = LOGO256_GREEN#0[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda LOGO256_GREEN,x
    sta SCREEN+$28*8,x
    // [4] (main::SCREEN+(word)$28*$10)[main::i#2] = LOGO256_BLUE#0[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda LOGO256_BLUE,x
    sta SCREEN+$28*$10,x
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data
// Import a 128x128 8bit-per-color logo using inline KickAsm
LOGO256:
#import "xmega65graphics.asm"
    .var logo256 = LoadPicture("mega65-256.png")
    .var palette256 = getPalette(logo256)
    .print "width: "+logo256.width + " height: "+logo256.height + " colors: "+palette256.keys().size()
    // Output the graphics
    .for (var x=0; x<logo256.width; x++)
	    .for (var y=0; y<logo256.height; y++)
		    .byte getFullcolourByte(logo256, palette256, x, y)
    // Output the RGB-values of the palette
    .fill 256, getPaletteRed(palette256,i)
    .fill 256, getPaletteGreen(palette256,i)
    .fill 256, getPaletteBlue(palette256,i)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte* LOGO256[]  = kickasm {{ #import "xmega65graphics.asm"
    .var logo256 = LoadPicture("mega65-256.png")
    .var palette256 = getPalette(logo256)
    .print "width: "+logo256.width + " height: "+logo256.height + " colors: "+palette256.keys().size()
    // Output the graphics
    .for (var x=0; x<logo256.width; x++)
	    .for (var y=0; y<logo256.height; y++)
		    .byte getFullcolourByte(logo256, palette256, x, y)
    // Output the RGB-values of the palette
    .fill 256, getPaletteRed(palette256,i)
    .fill 256, getPaletteGreen(palette256,i)
    .fill 256, getPaletteBlue(palette256,i)
 }}
byte* LOGO256_BLUE
const byte* LOGO256_BLUE#0 LOGO256_BLUE = LOGO256_GREEN#0+$100
byte* LOGO256_GREEN
const byte* LOGO256_GREEN#0 LOGO256_GREEN = LOGO256_RED+$100
const byte* LOGO256_RED = LOGO256+(word)$80*$80
void main()
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 376

  // File Comments
// Import an XMega65 8bit-per-color logo
// Fill the palette values into
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Create pointers to the palette RGBs in the logo (assumes dimensions are 128x128)
  .label LOGO256_RED = LOGO256+$80*$80
  .label LOGO256_GREEN = LOGO256_RED+$100
  .label LOGO256_BLUE = LOGO256_GREEN+$100
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (SCREEN+40*0)[i] = LOGO256_RED[i]
    // [2] main::SCREEN[main::i#2] = LOGO256_RED[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda LOGO256_RED,x
    sta SCREEN,x
    // (SCREEN+40*8)[i] = LOGO256_GREEN[i]
    // [3] (main::SCREEN+(word)$28*8)[main::i#2] = LOGO256_GREEN#0[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda LOGO256_GREEN,x
    sta SCREEN+$28*8,x
    // (SCREEN+40*16)[i] = LOGO256_BLUE[i]
    // [4] (main::SCREEN+(word)$28*$10)[main::i#2] = LOGO256_BLUE#0[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda LOGO256_BLUE,x
    sta SCREEN+$28*$10,x
    // for(byte i:0..0xff)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data
// Import a 128x128 8bit-per-color logo using inline KickAsm
LOGO256:
#import "xmega65graphics.asm"
    .var logo256 = LoadPicture("mega65-256.png")
    .var palette256 = getPalette(logo256)
    .print "width: "+logo256.width + " height: "+logo256.height + " colors: "+palette256.keys().size()
    // Output the graphics
    .for (var x=0; x<logo256.width; x++)
	    .for (var y=0; y<logo256.height; y++)
		    .byte getFullcolourByte(logo256, palette256, x, y)
    // Output the RGB-values of the palette
    .fill 256, getPaletteRed(palette256,i)
    .fill 256, getPaletteGreen(palette256,i)
    .fill 256, getPaletteBlue(palette256,i)


