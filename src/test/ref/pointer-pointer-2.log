Setting inferred volatile on symbol affected by address-of main::$0 = call nexttext &main::text 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  textid#18 = phi( __start::@1/textid#17 )
  main::screen#0 = (byte*)$400
  main::text = (byte*) 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::i#6 = phi( main/main::i#0, main::@4/main::i#1 )
  main::screen#5 = phi( main/main::screen#0, main::@4/main::screen#6 )
  textid#13 = phi( main/textid#18, main::@4/textid#14 )
  nexttext::textp#0 = &main::text
  call nexttext 
  to:main::@5
main::@5: scope:[main]  from main::@1
  main::i#5 = phi( main::@1/main::i#6 )
  main::screen#4 = phi( main::@1/main::screen#5 )
  textid#7 = phi( main::@1/textid#3 )
  textid#0 = textid#7
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@5
  textid#19 = phi( main::@3/textid#20, main::@5/textid#0 )
  main::i#3 = phi( main::@3/main::i#4, main::@5/main::i#5 )
  main::screen#3 = phi( main::@3/main::screen#1, main::@5/main::screen#4 )
  main::$2 = 0 != *main::text
  if(main::$2) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  textid#20 = phi( main::@2/textid#19 )
  main::i#4 = phi( main::@2/main::i#3 )
  main::screen#2 = phi( main::@2/main::screen#3 )
  *main::screen#2 = *main::text
  main::screen#1 = ++ main::screen#2
  main::text = ++ main::text
  to:main::@2
main::@4: scope:[main]  from main::@2
  main::screen#6 = phi( main::@2/main::screen#3 )
  textid#14 = phi( main::@2/textid#19 )
  main::i#2 = phi( main::@2/main::i#3 )
  main::i#1 = main::i#2 + rangenext(0,$14)
  main::$1 = main::i#1 != rangelast(0,$14)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  textid#8 = phi( main::@4/textid#14 )
  textid#1 = textid#8
  return 
  to:@return

void nexttext(byte** nexttext::textp)
nexttext: scope:[nexttext]  from main::@1
  nexttext::textp#3 = phi( main::@1/nexttext::textp#0 )
  textid#9 = phi( main::@1/textid#13 )
  nexttext::$0 = textid#9 & 1
  nexttext::$1 = nexttext::$0 == 0
  textid#2 = ++ textid#9
  if(nexttext::$1) goto nexttext::@1
  to:nexttext::@2
nexttext::@1: scope:[nexttext]  from nexttext
  textid#15 = phi( nexttext/textid#2 )
  nexttext::textp#1 = phi( nexttext/nexttext::textp#3 )
  *nexttext::textp#1 = text1
  to:nexttext::@return
nexttext::@2: scope:[nexttext]  from nexttext
  textid#16 = phi( nexttext/textid#2 )
  nexttext::textp#2 = phi( nexttext/nexttext::textp#3 )
  *nexttext::textp#2 = text2
  to:nexttext::@return
nexttext::@return: scope:[nexttext]  from nexttext::@1 nexttext::@2
  textid#10 = phi( nexttext::@1/textid#15, nexttext::@2/textid#16 )
  textid#3 = textid#10
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  textid#4 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  textid#17 = phi( __start::__init1/textid#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  textid#11 = phi( __start::@1/textid#1 )
  textid#5 = textid#11
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  textid#12 = phi( __start::@2/textid#5 )
  textid#6 = textid#12
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$1
bool~ main::$2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::i#6
byte* main::screen
byte* main::screen#0
byte* main::screen#1
byte* main::screen#2
byte* main::screen#3
byte* main::screen#4
byte* main::screen#5
byte* main::screen#6
volatile byte* main::text loadstore
void nexttext(byte** nexttext::textp)
number~ nexttext::$0
bool~ nexttext::$1
byte** nexttext::textp
byte** nexttext::textp#0
byte** nexttext::textp#1
byte** nexttext::textp#2
byte** nexttext::textp#3
const byte* text1[]  = "camelot "
const byte* text2[]  = "rex "
byte textid
byte textid#0
byte textid#1
byte textid#10
byte textid#11
byte textid#12
byte textid#13
byte textid#14
byte textid#15
byte textid#16
byte textid#17
byte textid#18
byte textid#19
byte textid#2
byte textid#20
byte textid#3
byte textid#4
byte textid#5
byte textid#6
byte textid#7
byte textid#8
byte textid#9

Adding number conversion cast (unumber) 0 in main::$2 = 0 != *main::text
Adding number conversion cast (unumber) 1 in nexttext::$0 = textid#9 & 1
Adding number conversion cast (unumber) nexttext::$0 in nexttext::$0 = textid#9 & (unumber)1
Adding number conversion cast (unumber) 0 in nexttext::$1 = nexttext::$0 == 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in nexttext::$0 = textid#9 & 1
Alias main::screen#4 = main::screen#5 
Alias main::i#5 = main::i#6 
Alias textid#0 = textid#7 
Alias main::screen#2 = main::screen#3 main::screen#6 
Alias main::i#2 = main::i#4 main::i#3 
Alias textid#1 = textid#20 textid#19 textid#14 textid#8 
Alias nexttext::textp#1 = nexttext::textp#3 nexttext::textp#2 
Alias textid#15 = textid#2 textid#16 
Alias textid#10 = textid#3 
Alias textid#17 = textid#4 
Alias textid#11 = textid#5 textid#12 textid#6 
Successful SSA optimization Pass2AliasElimination
Alias textid#10 = textid#15 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values textid#18 textid#17
Identical Phi Values textid#0 textid#10
Identical Phi Values main::i#2 main::i#5
Identical Phi Values textid#1 textid#0
Identical Phi Values textid#9 textid#13
Identical Phi Values nexttext::textp#1 nexttext::textp#0
Identical Phi Values textid#11 textid#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$2 [10] if(0!=*main::text) goto main::@3
Simple Condition main::$1 [16] if(main::i#1!=rangelast(0,$14)) goto main::@1
Simple Condition nexttext::$1 [22] if(nexttext::$0==0) goto nexttext::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::screen#0 = (byte*) 1024
Constant main::i#0 = 0
Constant nexttext::textp#0 = &main::text
Constant textid#17 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [14] main::i#1 = ++ main::i#5 to ++
Resolved ranged comparison value [16] if(main::i#1!=rangelast(0,$14)) goto main::@1 to $15
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $15 in [9] if(main::i#1!=$15) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $15
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $15
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::screen#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings textid#17
Constant inlined main::screen#0 = (byte*) 1024
Constant inlined main::i#0 = 0
Constant inlined textid#17 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@6(between main::@4 and main::@1)
CALL GRAPH
Calls in [main] to nexttext:2 

Created 4 initial phi equivalence classes
Coalesced [3] main::screen#9 = main::screen#4
Coalesced [9] textid#21 = textid#10
Coalesced (already) [10] main::screen#7 = main::screen#2
Coalesced [11] main::i#7 = main::i#1
Coalesced [15] main::screen#8 = main::screen#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@5
Culled Empty Block label main::@6

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::text = (byte*) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] main::i#5 = phi( main/0, main::@4/main::i#1 )
  [1] main::screen#4 = phi( main/(byte*) 1024, main::@4/main::screen#2 )
  [1] textid#13 = phi( main/0, main::@4/textid#10 )
  [2] call nexttext 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [3] main::screen#2 = phi( main::@3/main::screen#1, main::@1/main::screen#4 )
  [4] if(0!=*main::text) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [5] main::i#1 = ++ main::i#5
  [6] if(main::i#1!=$15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [7] return 
  to:@return
main::@3: scope:[main]  from main::@2
  [8] *main::screen#2 = *main::text
  [9] main::screen#1 = ++ main::screen#2
  [10] main::text = ++ main::text
  to:main::@2

void nexttext(byte** nexttext::textp)
nexttext: scope:[nexttext]  from main::@1
  [11] nexttext::$0 = textid#13 & 1
  [12] textid#10 = ++ textid#13
  [13] if(nexttext::$0==0) goto nexttext::@1
  to:nexttext::@2
nexttext::@2: scope:[nexttext]  from nexttext
  [14] *nexttext::textp#0 = text2
  to:nexttext::@return
nexttext::@return: scope:[nexttext]  from nexttext::@1 nexttext::@2
  [15] return 
  to:@return
nexttext::@1: scope:[nexttext]  from nexttext
  [16] *nexttext::textp#0 = text1
  to:nexttext::@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#5 3.142857142857143
byte* main::screen
byte* main::screen#1 101.0
byte* main::screen#2 65.0
byte* main::screen#4 11.0
volatile byte* main::text loadstore 40.6
void nexttext(byte** nexttext::textp)
byte~ nexttext::$0 101.0
byte** nexttext::textp
byte textid
byte textid#10 8.615384615384615
byte textid#13 106.5

Initial phi equivalence classes
[ textid#13 textid#10 ]
[ main::screen#4 main::screen#2 main::screen#1 ]
[ main::i#5 main::i#1 ]
Added variable main::text to live range equivalence class [ main::text ]
Added variable nexttext::$0 to live range equivalence class [ nexttext::$0 ]
Complete equivalence classes
[ textid#13 textid#10 ]
[ main::screen#4 main::screen#2 main::screen#1 ]
[ main::i#5 main::i#1 ]
[ main::text ]
[ nexttext::$0 ]
Allocated zp[1]:2 [ textid#13 textid#10 ]
Allocated zp[2]:3 [ main::screen#4 main::screen#2 main::screen#1 ]
Allocated zp[1]:5 [ main::i#5 main::i#1 ]
Allocated zp[2]:6 [ main::text ]
Allocated zp[1]:8 [ nexttext::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::text = (byte*) 0 [ main::text ] (  [ main::text ] { }  ) always clobbers reg byte a 
Statement [4] if(0!=*main::text) goto main::@3 [ main::text main::i#5 textid#10 main::screen#2 ] (  [ main::text main::i#5 textid#10 main::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::i#5 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::i#5 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ textid#13 textid#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ textid#13 textid#10 ]
Statement [8] *main::screen#2 = *main::text [ main::text main::i#5 textid#10 main::screen#2 ] (  [ main::text main::i#5 textid#10 main::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [11] nexttext::$0 = textid#13 & 1 [ textid#13 nexttext::$0 ] ( nexttext:2 [ main::text main::screen#4 main::i#5 textid#13 nexttext::$0 ] { }  ) always clobbers reg byte a 
Statement [14] *nexttext::textp#0 = text2 [ textid#10 ] ( nexttext:2 [ main::text main::screen#4 main::i#5 textid#10 ] { }  ) always clobbers reg byte a 
Statement [16] *nexttext::textp#0 = text1 [ textid#10 ] ( nexttext:2 [ main::text main::screen#4 main::i#5 textid#10 ] { }  ) always clobbers reg byte a 
Statement [0] main::text = (byte*) 0 [ main::text ] (  [ main::text ] { }  ) always clobbers reg byte a 
Statement [4] if(0!=*main::text) goto main::@3 [ main::text main::i#5 textid#10 main::screen#2 ] (  [ main::text main::i#5 textid#10 main::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [8] *main::screen#2 = *main::text [ main::text main::i#5 textid#10 main::screen#2 ] (  [ main::text main::i#5 textid#10 main::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [11] nexttext::$0 = textid#13 & 1 [ textid#13 nexttext::$0 ] ( nexttext:2 [ main::text main::screen#4 main::i#5 textid#13 nexttext::$0 ] { }  ) always clobbers reg byte a 
Statement [14] *nexttext::textp#0 = text2 [ textid#10 ] ( nexttext:2 [ main::text main::screen#4 main::i#5 textid#10 ] { }  ) always clobbers reg byte a 
Statement [16] *nexttext::textp#0 = text1 [ textid#10 ] ( nexttext:2 [ main::text main::screen#4 main::i#5 textid#10 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ textid#13 textid#10 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ main::screen#4 main::screen#2 main::screen#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::i#5 main::i#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ main::text ] : zp[2]:6 , 
Potential registers zp[1]:8 [ nexttext::$0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 177: zp[2]:3 [ main::screen#4 main::screen#2 main::screen#1 ] 40.6: zp[2]:6 [ main::text ] 19.64: zp[1]:5 [ main::i#5 main::i#1 ] 
Uplift Scope [] 115.12: zp[1]:2 [ textid#13 textid#10 ] 
Uplift Scope [nexttext] 101: zp[1]:8 [ nexttext::$0 ] 

Uplifting [main] best 6606 combination zp[2]:3 [ main::screen#4 main::screen#2 main::screen#1 ] zp[2]:6 [ main::text ] reg byte x [ main::i#5 main::i#1 ] 
Uplifting [] best 6606 combination zp[1]:2 [ textid#13 textid#10 ] 
Uplifting [nexttext] best 6600 combination reg byte a [ nexttext::$0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ textid#13 textid#10 ]
Uplifting [] best 6600 combination zp[1]:2 [ textid#13 textid#10 ] 
Allocated (was zp[2]:6) zp[2]:5 [ main::text ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests pointer to pointer in a more complex setup
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label textid = 2
  // main
main: {
    .label text = 5
    .label screen = 3
    // [0] main::text = (byte*) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z text
    lda #>0
    sta.z text+1
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#5 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::screen#4 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi textid#13 = 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z textid
    jmp __b1
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi main::i#5 = main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi main::screen#4 = main::screen#2 [phi:main::@4->main::@1#1] -- register_copy 
    // [1] phi textid#13 = textid#10 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] call nexttext 
    jsr nexttext
    // [3] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [3] phi main::screen#2 = main::screen#4 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [4] if(0!=*main::text) goto main::@3 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (text),y
    cmp #0
    bne __b3
    jmp __b4
    // main::@4
  __b4:
    // [5] main::i#1 = ++ main::i#5 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=$15) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne __b1_from___b4
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@3
  __b3:
    // [8] *main::screen#2 = *main::text -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (text),y
    ldy #0
    sta (screen),y
    // [9] main::screen#1 = ++ main::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [10] main::text = ++ main::text -- pbuz1=_inc_pbuz1 
    inc.z text
    bne !+
    inc.z text+1
  !:
    jmp __b2_from___b3
}
  // nexttext
// Choose the next text to show - by updating the text pointer pointed to by the passed pointer to a pointer
nexttext: {
    .label textp = main.text
    // [11] nexttext::$0 = textid#13 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z textid
    // [12] textid#10 = ++ textid#13 -- vbuz1=_inc_vbuz1 
    inc.z textid
    // [13] if(nexttext::$0==0) goto nexttext::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    jmp __b2
    // nexttext::@2
  __b2:
    // [14] *nexttext::textp#0 = text2 -- _deref_qbuc1=pbuc2 
    lda #<text2
    sta.z textp
    lda #>text2
    sta.z textp+1
    jmp __breturn
    // nexttext::@return
  __breturn:
    // [15] return 
    rts
    // nexttext::@1
  __b1:
    // [16] *nexttext::textp#0 = text1 -- _deref_qbuc1=pbuc2 
    lda #<text1
    sta.z textp
    lda #>text1
    sta.z textp+1
    jmp __breturn
}
  // File Data
  text1: .text "camelot "
  .byte 0
  text2: .text "rex "
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#5 reg byte x 3.142857142857143
byte* main::screen
byte* main::screen#1 screen zp[2]:3 101.0
byte* main::screen#2 screen zp[2]:3 65.0
byte* main::screen#4 screen zp[2]:3 11.0
volatile byte* main::text loadstore zp[2]:5 40.6
void nexttext(byte** nexttext::textp)
byte~ nexttext::$0 reg byte a 101.0
byte** nexttext::textp
const byte** nexttext::textp#0 textp = &main::text
const byte* text1[]  = "camelot "
const byte* text2[]  = "rex "
byte textid
byte textid#10 textid zp[1]:2 8.615384615384615
byte textid#13 textid zp[1]:2 106.5

zp[1]:2 [ textid#13 textid#10 ]
zp[2]:3 [ main::screen#4 main::screen#2 main::screen#1 ]
reg byte x [ main::i#5 main::i#1 ]
zp[2]:5 [ main::text ]
reg byte a [ nexttext::$0 ]


FINAL ASSEMBLER
Score: 5705

  // File Comments
// Tests pointer to pointer in a more complex setup
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label textid = 2
  // main
main: {
    .label text = 5
    .label screen = 3
    // text
    // [0] main::text = (byte*) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z text
    sta.z text+1
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#5 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    tax
    // [1] phi main::screen#4 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi textid#13 = 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    txa
    sta.z textid
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [1] phi main::i#5 = main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi main::screen#4 = main::screen#2 [phi:main::@4->main::@1#1] -- register_copy 
    // [1] phi textid#13 = textid#10 [phi:main::@4->main::@1#2] -- register_copy 
    // main::@1
  __b1:
    // nexttext(&text)
    // [2] call nexttext 
    jsr nexttext
    // [3] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
    // [3] phi main::screen#2 = main::screen#4 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // while(*text)
    // [4] if(0!=*main::text) goto main::@3 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (text),y
    cmp #0
    bne __b3
    // main::@4
    // for(byte i: 0..20)
    // [5] main::i#1 = ++ main::i#5 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=$15) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
    // main::@3
  __b3:
    // *screen++ = *text++
    // [8] *main::screen#2 = *main::text -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (text),y
    sta (screen),y
    // *screen++ = *text++;
    // [9] main::screen#1 = ++ main::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [10] main::text = ++ main::text -- pbuz1=_inc_pbuz1 
    inc.z text
    bne !+
    inc.z text+1
  !:
    jmp __b2
}
  // nexttext
// Choose the next text to show - by updating the text pointer pointed to by the passed pointer to a pointer
nexttext: {
    .label textp = main.text
    // textid++&1
    // [11] nexttext::$0 = textid#13 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z textid
    // if((textid++&1)==0)
    // [12] textid#10 = ++ textid#13 -- vbuz1=_inc_vbuz1 
    inc.z textid
    // [13] if(nexttext::$0==0) goto nexttext::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // nexttext::@2
    // *textp = text2
    // [14] *nexttext::textp#0 = text2 -- _deref_qbuc1=pbuc2 
    lda #<text2
    sta.z textp
    lda #>text2
    sta.z textp+1
    // nexttext::@return
    // }
    // [15] return 
    rts
    // nexttext::@1
  __b1:
    // *textp = text1
    // [16] *nexttext::textp#0 = text1 -- _deref_qbuc1=pbuc2 
    lda #<text1
    sta.z textp
    lda #>text1
    sta.z textp+1
    rts
}
  // File Data
  text1: .text "camelot "
  .byte 0
  text2: .text "rex "
  .byte 0

