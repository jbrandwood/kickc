
void main()
main: scope:[main]  from
  [0] phi()
  [1] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [2] main::x#4 = phi( main::@3/main::x#1, main/0 )
  [2] main::screen#5 = phi( main::@3/main::screen#2, main/SCREEN+$28+1 )
  [2] main::ch#3 = phi( main::@3/main::ch#1, main/0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [3] main::y#2 = phi( main::@1/0, main::@2/main::y#1 )
  [3] main::screen#3 = phi( main::@1/main::screen#5, main::@2/main::screen#1 )
  [3] main::ch#2 = phi( main::@1/main::ch#3, main::@2/main::ch#1 )
  [4] *main::screen#3 = main::ch#2
  [5] main::screen#1 = ++ main::screen#3
  [6] main::ch#1 = ++ main::ch#2
  [7] main::y#1 = ++ main::y#2
  [8] if(main::y#1!=$10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] main::screen#2 = main::screen#1 + $28-$10
  [10] main::x#1 = ++ main::x#4
  [11] if(main::x#1!=$10) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main
  [13] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [14] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [15] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [16] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [17] *memset::dst#2 = memset::c#0
  [18] memset::dst#1 = ++ memset::dst#2
  to:memset::@1
