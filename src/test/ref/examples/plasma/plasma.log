Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call main::$3 = call toD018 SCREEN1 CHARSET 
Inlined call main::$5 = call toD018 SCREEN2 CHARSET 
Inlined call call sid_rnd_init 
Inlined call makecharset::$6 = call sid_rnd 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from makecharset::@10
  print_char_cursor#12 = phi( makecharset::@10/print_char_cursor#22 )
  print_char::ch#1 = phi( makecharset::@10/print_char::ch#0 )
  *print_char_cursor#12 = print_char::ch#1
  print_char_cursor#0 = ++ print_char_cursor#12
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#13 = phi( print_char/print_char_cursor#0 )
  print_char_cursor#1 = print_char_cursor#13
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from makecharset::@12
  print_screen#2 = phi( makecharset::@12/print_screen#5 )
  memset::str#0 = (void*)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#0 = print_screen#3
  print_char_cursor#2 = print_line_cursor#0
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#14 = phi( print_cls::@1/print_char_cursor#2 )
  print_line_cursor#9 = phi( print_cls::@1/print_line_cursor#0 )
  print_line_cursor#1 = print_line_cursor#9
  print_char_cursor#3 = print_char_cursor#14
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_screen#12 = phi( __start::@1/print_screen#8 )
  c2B#38 = phi( __start::@1/c2B#22 )
  c2A#38 = phi( __start::@1/c2A#22 )
  c1B#38 = phi( __start::@1/c1B#21 )
  c1A#38 = phi( __start::@1/c1A#21 )
  print_char_cursor#33 = phi( __start::@1/print_char_cursor#27 )
  print_line_cursor#25 = phi( __start::@1/print_line_cursor#20 )
  asm { sei  }
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLUE
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLUE
  main::col#0 = COLS
  to:main::@1
main::@1: scope:[main]  from main main::@1
  print_screen#11 = phi( main/print_screen#12, main::@1/print_screen#11 )
  c2B#34 = phi( main/c2B#38, main::@1/c2B#34 )
  c2A#34 = phi( main/c2A#38, main::@1/c2A#34 )
  c1B#33 = phi( main/c1B#38, main::@1/c1B#33 )
  c1A#33 = phi( main/c1A#38, main::@1/c1A#33 )
  print_char_cursor#28 = phi( main/print_char_cursor#33, main::@1/print_char_cursor#28 )
  print_line_cursor#21 = phi( main/print_line_cursor#25, main::@1/print_line_cursor#21 )
  main::col#2 = phi( main/main::col#0, main::@1/main::col#1 )
  *main::col#2 = BLACK
  main::col#1 = main::col#2 + rangenext(COLS,COLS+$3e8)
  main::$1 = main::col#1 != rangelast(COLS,COLS+$3e8)
  if(main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  print_screen#10 = phi( main::@1/print_screen#11 )
  c2B#30 = phi( main::@1/c2B#34 )
  c2A#30 = phi( main::@1/c2A#34 )
  c1B#28 = phi( main::@1/c1B#33 )
  c1A#28 = phi( main::@1/c1A#33 )
  print_char_cursor#23 = phi( main::@1/print_char_cursor#28 )
  print_line_cursor#16 = phi( main::@1/print_line_cursor#21 )
  makecharset::charset#0 = CHARSET
  call makecharset 
  to:main::@7
main::@7: scope:[main]  from main::@2
  c2B#24 = phi( main::@2/c2B#30 )
  c2A#24 = phi( main::@2/c2A#30 )
  c1B#23 = phi( main::@2/c1B#28 )
  c1A#23 = phi( main::@2/c1A#28 )
  print_char_cursor#15 = phi( main::@2/print_char_cursor#8 )
  print_line_cursor#10 = phi( main::@2/print_line_cursor#5 )
  print_line_cursor#2 = print_line_cursor#10
  print_char_cursor#4 = print_char_cursor#15
  to:main::@3
main::@3: scope:[main]  from main::@6 main::@7
  c2B#18 = phi( main::@6/c2B#23, main::@7/c2B#24 )
  c2A#18 = phi( main::@6/c2A#23, main::@7/c2A#24 )
  c1B#18 = phi( main::@6/c1B#22, main::@7/c1B#23 )
  c1A#18 = phi( main::@6/c1A#22, main::@7/c1A#23 )
  print_char_cursor#24 = phi( main::@6/print_char_cursor#29, main::@7/print_char_cursor#4 )
  print_line_cursor#17 = phi( main::@6/print_line_cursor#22, main::@7/print_line_cursor#2 )
  if(true) goto main::@4
  to:main::@return
main::@4: scope:[main]  from main::@3
  print_char_cursor#52 = phi( main::@3/print_char_cursor#24 )
  print_line_cursor#46 = phi( main::@3/print_line_cursor#17 )
  c2B#16 = phi( main::@3/c2B#18 )
  c2A#16 = phi( main::@3/c2A#18 )
  c1B#16 = phi( main::@3/c1B#18 )
  c1A#16 = phi( main::@3/c1A#18 )
  doplasma::screen#0 = SCREEN1
  call doplasma 
  to:main::@8
main::@8: scope:[main]  from main::@4
  print_char_cursor#50 = phi( main::@4/print_char_cursor#52 )
  print_line_cursor#44 = phi( main::@4/print_line_cursor#46 )
  c2B#8 = phi( main::@4/c2B#4 )
  c2A#8 = phi( main::@4/c2A#4 )
  c1B#8 = phi( main::@4/c1B#4 )
  c1A#8 = phi( main::@4/c1A#4 )
  c1A#0 = c1A#8
  c1B#0 = c1B#8
  c2A#0 = c2A#8
  c2B#0 = c2B#8
  main::toD0181_screen#0 = SCREEN1
  main::toD0181_gfx#0 = CHARSET
  to:main::toD0181
main::toD0181: scope:[main]  from main::@8
  print_char_cursor#48 = phi( main::@8/print_char_cursor#50 )
  print_line_cursor#41 = phi( main::@8/print_line_cursor#44 )
  c2B#31 = phi( main::@8/c2B#0 )
  c2A#31 = phi( main::@8/c2A#0 )
  c1B#29 = phi( main::@8/c1B#0 )
  c1A#29 = phi( main::@8/c1A#0 )
  main::toD0181_gfx#1 = phi( main::@8/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@8/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  print_char_cursor#45 = phi( main::toD0181/print_char_cursor#48 )
  print_line_cursor#38 = phi( main::toD0181/print_line_cursor#41 )
  c2B#25 = phi( main::toD0181/c2B#31 )
  c2A#25 = phi( main::toD0181/c2A#31 )
  c1B#24 = phi( main::toD0181/c1B#29 )
  c1A#24 = phi( main::toD0181/c1A#29 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@5
main::@5: scope:[main]  from main::toD0181_@return
  print_char_cursor#42 = phi( main::toD0181_@return/print_char_cursor#45 )
  print_line_cursor#36 = phi( main::toD0181_@return/print_line_cursor#38 )
  c2B#17 = phi( main::toD0181_@return/c2B#25 )
  c2A#17 = phi( main::toD0181_@return/c2A#25 )
  c1B#17 = phi( main::toD0181_@return/c1B#24 )
  c1A#17 = phi( main::toD0181_@return/c1A#24 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$3 = main::toD0181_return#3
  *D018 = main::$3
  doplasma::screen#1 = SCREEN2
  call doplasma 
  to:main::@9
main::@9: scope:[main]  from main::@5
  print_char_cursor#40 = phi( main::@5/print_char_cursor#42 )
  print_line_cursor#33 = phi( main::@5/print_line_cursor#36 )
  c2B#9 = phi( main::@5/c2B#4 )
  c2A#9 = phi( main::@5/c2A#4 )
  c1B#9 = phi( main::@5/c1B#4 )
  c1A#9 = phi( main::@5/c1A#4 )
  c1A#1 = c1A#9
  c1B#1 = c1B#9
  c2A#1 = c2A#9
  c2B#1 = c2B#9
  main::toD0182_screen#0 = SCREEN2
  main::toD0182_gfx#0 = CHARSET
  to:main::toD0182
main::toD0182: scope:[main]  from main::@9
  c2B#35 = phi( main::@9/c2B#1 )
  c2A#35 = phi( main::@9/c2A#1 )
  c1B#34 = phi( main::@9/c1B#1 )
  c1A#34 = phi( main::@9/c1A#1 )
  print_char_cursor#37 = phi( main::@9/print_char_cursor#40 )
  print_line_cursor#30 = phi( main::@9/print_line_cursor#33 )
  main::toD0182_gfx#1 = phi( main::@9/main::toD0182_gfx#0 )
  main::toD0182_screen#1 = phi( main::@9/main::toD0182_screen#0 )
  main::toD0182_$7 = (word)main::toD0182_screen#1
  main::toD0182_$0 = main::toD0182_$7 & $3fff
  main::toD0182_$1 = main::toD0182_$0 * 4
  main::toD0182_$2 = > main::toD0182_$1
  main::toD0182_$3 = > (word)main::toD0182_gfx#1
  main::toD0182_$4 = main::toD0182_$3 / 4
  main::toD0182_$5 = main::toD0182_$4 & $f
  main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
  main::toD0182_return#0 = main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  c2B#32 = phi( main::toD0182/c2B#35 )
  c2A#32 = phi( main::toD0182/c2A#35 )
  c1B#30 = phi( main::toD0182/c1B#34 )
  c1A#30 = phi( main::toD0182/c1A#34 )
  print_char_cursor#34 = phi( main::toD0182/print_char_cursor#37 )
  print_line_cursor#26 = phi( main::toD0182/print_line_cursor#30 )
  main::toD0182_return#2 = phi( main::toD0182/main::toD0182_return#0 )
  main::toD0182_return#1 = main::toD0182_return#2
  to:main::@6
main::@6: scope:[main]  from main::toD0182_@return
  c2B#23 = phi( main::toD0182_@return/c2B#32 )
  c2A#23 = phi( main::toD0182_@return/c2A#32 )
  c1B#22 = phi( main::toD0182_@return/c1B#30 )
  c1A#22 = phi( main::toD0182_@return/c1A#30 )
  print_char_cursor#29 = phi( main::toD0182_@return/print_char_cursor#34 )
  print_line_cursor#22 = phi( main::toD0182_@return/print_line_cursor#26 )
  main::toD0182_return#3 = phi( main::toD0182_@return/main::toD0182_return#1 )
  main::$5 = main::toD0182_return#3
  *D018 = main::$5
  to:main::@3
main::@return: scope:[main]  from main::@3
  c2B#10 = phi( main::@3/c2B#18 )
  c2A#10 = phi( main::@3/c2A#18 )
  c1B#10 = phi( main::@3/c1B#18 )
  c1A#10 = phi( main::@3/c1A#18 )
  print_char_cursor#16 = phi( main::@3/print_char_cursor#24 )
  print_line_cursor#11 = phi( main::@3/print_line_cursor#17 )
  print_line_cursor#3 = print_line_cursor#11
  print_char_cursor#5 = print_char_cursor#16
  c1A#2 = c1A#10
  c1B#2 = c1B#10
  c2A#2 = c2A#10
  c2B#2 = c2B#10
  return 
  to:@return

void doplasma(byte* doplasma::screen)
doplasma: scope:[doplasma]  from main::@4 main::@5
  doplasma::screen#13 = phi( main::@4/doplasma::screen#0, main::@5/doplasma::screen#1 )
  c2B#26 = phi( main::@4/c2B#16, main::@5/c2B#17 )
  c2A#26 = phi( main::@4/c2A#16, main::@5/c2A#17 )
  c1B#11 = phi( main::@4/c1B#16, main::@5/c1B#17 )
  c1A#11 = phi( main::@4/c1A#16, main::@5/c1A#17 )
  doplasma::c1a#0 = c1A#11
  doplasma::c1b#0 = c1B#11
  doplasma::i#0 = 0
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  doplasma::screen#12 = phi( doplasma/doplasma::screen#13, doplasma::@2/doplasma::screen#14 )
  c2B#19 = phi( doplasma/c2B#26, doplasma::@2/c2B#27 )
  c2A#19 = phi( doplasma/c2A#26, doplasma::@2/c2A#27 )
  c1B#19 = phi( doplasma/c1B#11, doplasma::@2/c1B#25 )
  c1A#19 = phi( doplasma/c1A#11, doplasma::@2/c1A#25 )
  doplasma::c1b#3 = phi( doplasma/doplasma::c1b#0, doplasma::@2/doplasma::c1b#1 )
  doplasma::c1a#3 = phi( doplasma/doplasma::c1a#0, doplasma::@2/doplasma::c1a#1 )
  doplasma::i#2 = phi( doplasma/doplasma::i#0, doplasma::@2/doplasma::i#1 )
  doplasma::$0 = doplasma::i#2 < $19
  if(doplasma::$0) goto doplasma::@2
  to:doplasma::@3
doplasma::@2: scope:[doplasma]  from doplasma::@1
  doplasma::screen#14 = phi( doplasma::@1/doplasma::screen#12 )
  c2B#27 = phi( doplasma::@1/c2B#19 )
  c2A#27 = phi( doplasma::@1/c2A#19 )
  c1B#25 = phi( doplasma::@1/c1B#19 )
  c1A#25 = phi( doplasma::@1/c1A#19 )
  doplasma::i#3 = phi( doplasma::@1/doplasma::i#2 )
  doplasma::c1b#2 = phi( doplasma::@1/doplasma::c1b#3 )
  doplasma::c1a#2 = phi( doplasma::@1/doplasma::c1a#3 )
  doplasma::$1 = SINTABLE[doplasma::c1a#2] + SINTABLE[doplasma::c1b#2]
  doplasma::ybuf[doplasma::i#3] = doplasma::$1
  doplasma::c1a#1 = doplasma::c1a#2 + 4
  doplasma::c1b#1 = doplasma::c1b#2 + 9
  doplasma::i#1 = ++ doplasma::i#3
  to:doplasma::@1
doplasma::@3: scope:[doplasma]  from doplasma::@1
  doplasma::screen#10 = phi( doplasma::@1/doplasma::screen#12 )
  c2B#11 = phi( doplasma::@1/c2B#19 )
  c2A#11 = phi( doplasma::@1/c2A#19 )
  c1B#12 = phi( doplasma::@1/c1B#19 )
  c1A#12 = phi( doplasma::@1/c1A#19 )
  c1A#3 = c1A#12 + 3
  c1B#3 = c1B#12 - 5
  doplasma::c2a#0 = c2A#11
  doplasma::c2b#0 = c2B#11
  doplasma::i1#0 = 0
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3 doplasma::@5
  doplasma::screen#9 = phi( doplasma::@3/doplasma::screen#10, doplasma::@5/doplasma::screen#11 )
  c1B#31 = phi( doplasma::@3/c1B#3, doplasma::@5/c1B#35 )
  c1A#31 = phi( doplasma::@3/c1A#3, doplasma::@5/c1A#35 )
  c2B#20 = phi( doplasma::@3/c2B#11, doplasma::@5/c2B#28 )
  c2A#20 = phi( doplasma::@3/c2A#11, doplasma::@5/c2A#28 )
  doplasma::c2b#3 = phi( doplasma::@3/doplasma::c2b#0, doplasma::@5/doplasma::c2b#1 )
  doplasma::c2a#3 = phi( doplasma::@3/doplasma::c2a#0, doplasma::@5/doplasma::c2a#1 )
  doplasma::i1#2 = phi( doplasma::@3/doplasma::i1#0, doplasma::@5/doplasma::i1#1 )
  doplasma::$2 = doplasma::i1#2 < $28
  if(doplasma::$2) goto doplasma::@5
  to:doplasma::@6
doplasma::@5: scope:[doplasma]  from doplasma::@4
  doplasma::screen#11 = phi( doplasma::@4/doplasma::screen#9 )
  c1B#35 = phi( doplasma::@4/c1B#31 )
  c1A#35 = phi( doplasma::@4/c1A#31 )
  c2B#28 = phi( doplasma::@4/c2B#20 )
  c2A#28 = phi( doplasma::@4/c2A#20 )
  doplasma::i1#3 = phi( doplasma::@4/doplasma::i1#2 )
  doplasma::c2b#2 = phi( doplasma::@4/doplasma::c2b#3 )
  doplasma::c2a#2 = phi( doplasma::@4/doplasma::c2a#3 )
  doplasma::$3 = SINTABLE[doplasma::c2a#2] + SINTABLE[doplasma::c2b#2]
  doplasma::xbuf[doplasma::i1#3] = doplasma::$3
  doplasma::c2a#1 = doplasma::c2a#2 + 3
  doplasma::c2b#1 = doplasma::c2b#2 + 7
  doplasma::i1#1 = ++ doplasma::i1#3
  to:doplasma::@4
doplasma::@6: scope:[doplasma]  from doplasma::@4
  doplasma::screen#8 = phi( doplasma::@4/doplasma::screen#9 )
  c1B#27 = phi( doplasma::@4/c1B#31 )
  c1A#27 = phi( doplasma::@4/c1A#31 )
  c2B#12 = phi( doplasma::@4/c2B#20 )
  c2A#12 = phi( doplasma::@4/c2A#20 )
  c2A#3 = c2A#12 + 2
  c2B#3 = c2B#12 - 3
  doplasma::ii#0 = 0
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@11 doplasma::@6
  doplasma::screen#7 = phi( doplasma::@11/doplasma::screen#2, doplasma::@6/doplasma::screen#8 )
  c2B#21 = phi( doplasma::@11/c2B#29, doplasma::@6/c2B#3 )
  c2A#21 = phi( doplasma::@11/c2A#29, doplasma::@6/c2A#3 )
  c1B#20 = phi( doplasma::@11/c1B#26, doplasma::@6/c1B#27 )
  c1A#20 = phi( doplasma::@11/c1A#26, doplasma::@6/c1A#27 )
  doplasma::ii#2 = phi( doplasma::@11/doplasma::ii#1, doplasma::@6/doplasma::ii#0 )
  doplasma::$4 = doplasma::ii#2 < $19
  if(doplasma::$4) goto doplasma::@8
  to:doplasma::@return
doplasma::@8: scope:[doplasma]  from doplasma::@7
  c2B#37 = phi( doplasma::@7/c2B#21 )
  c2A#37 = phi( doplasma::@7/c2A#21 )
  c1B#37 = phi( doplasma::@7/c1B#20 )
  c1A#37 = phi( doplasma::@7/c1A#20 )
  doplasma::screen#6 = phi( doplasma::@7/doplasma::screen#7 )
  doplasma::ii#6 = phi( doplasma::@7/doplasma::ii#2 )
  doplasma::i2#0 = 0
  to:doplasma::@9
doplasma::@9: scope:[doplasma]  from doplasma::@10 doplasma::@8
  c2B#33 = phi( doplasma::@10/c2B#36, doplasma::@8/c2B#37 )
  c2A#33 = phi( doplasma::@10/c2A#36, doplasma::@8/c2A#37 )
  c1B#32 = phi( doplasma::@10/c1B#36, doplasma::@8/c1B#37 )
  c1A#32 = phi( doplasma::@10/c1A#36, doplasma::@8/c1A#37 )
  doplasma::screen#5 = phi( doplasma::@10/doplasma::screen#3, doplasma::@8/doplasma::screen#6 )
  doplasma::ii#5 = phi( doplasma::@10/doplasma::ii#3, doplasma::@8/doplasma::ii#6 )
  doplasma::i2#2 = phi( doplasma::@10/doplasma::i2#1, doplasma::@8/doplasma::i2#0 )
  doplasma::$5 = doplasma::i2#2 < $28
  if(doplasma::$5) goto doplasma::@10
  to:doplasma::@11
doplasma::@10: scope:[doplasma]  from doplasma::@9
  c2B#36 = phi( doplasma::@9/c2B#33 )
  c2A#36 = phi( doplasma::@9/c2A#33 )
  c1B#36 = phi( doplasma::@9/c1B#32 )
  c1A#36 = phi( doplasma::@9/c1A#32 )
  doplasma::screen#3 = phi( doplasma::@9/doplasma::screen#5 )
  doplasma::ii#3 = phi( doplasma::@9/doplasma::ii#5 )
  doplasma::i2#3 = phi( doplasma::@9/doplasma::i2#2 )
  doplasma::$6 = doplasma::xbuf[doplasma::i2#3] + doplasma::ybuf[doplasma::ii#3]
  doplasma::screen#3[doplasma::i2#3] = doplasma::$6
  doplasma::i2#1 = ++ doplasma::i2#3
  to:doplasma::@9
doplasma::@11: scope:[doplasma]  from doplasma::@9
  c2B#29 = phi( doplasma::@9/c2B#33 )
  c2A#29 = phi( doplasma::@9/c2A#33 )
  c1B#26 = phi( doplasma::@9/c1B#32 )
  c1A#26 = phi( doplasma::@9/c1A#32 )
  doplasma::ii#4 = phi( doplasma::@9/doplasma::ii#5 )
  doplasma::screen#4 = phi( doplasma::@9/doplasma::screen#5 )
  doplasma::screen#2 = doplasma::screen#4 + $28
  doplasma::ii#1 = ++ doplasma::ii#4
  to:doplasma::@7
doplasma::@return: scope:[doplasma]  from doplasma::@7
  c2B#13 = phi( doplasma::@7/c2B#21 )
  c2A#13 = phi( doplasma::@7/c2A#21 )
  c1B#13 = phi( doplasma::@7/c1B#20 )
  c1A#13 = phi( doplasma::@7/c1A#20 )
  c1A#4 = c1A#13
  c1B#4 = c1B#13
  c2A#4 = c2A#13
  c2B#4 = c2B#13
  return 
  to:@return

void makecharset(byte* makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  makecharset::charset#19 = phi( main::@2/makecharset::charset#0 )
  print_char_cursor#35 = phi( main::@2/print_char_cursor#23 )
  print_line_cursor#27 = phi( main::@2/print_line_cursor#16 )
  print_screen#9 = phi( main::@2/print_screen#10 )
  to:makecharset::sid_rnd_init1
makecharset::sid_rnd_init1: scope:[makecharset]  from makecharset
  makecharset::charset#17 = phi( makecharset/makecharset::charset#19 )
  print_char_cursor#30 = phi( makecharset/print_char_cursor#35 )
  print_line_cursor#23 = phi( makecharset/print_line_cursor#27 )
  print_screen#7 = phi( makecharset/print_screen#9 )
  *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff
  *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::sid_rnd_init1
  makecharset::charset#14 = phi( makecharset::sid_rnd_init1/makecharset::charset#17 )
  print_char_cursor#25 = phi( makecharset::sid_rnd_init1/print_char_cursor#30 )
  print_line_cursor#18 = phi( makecharset::sid_rnd_init1/print_line_cursor#23 )
  print_screen#5 = phi( makecharset::sid_rnd_init1/print_screen#7 )
  call print_cls 
  to:makecharset::@14
makecharset::@14: scope:[makecharset]  from makecharset::@12
  makecharset::charset#13 = phi( makecharset::@12/makecharset::charset#14 )
  print_char_cursor#17 = phi( makecharset::@12/print_char_cursor#3 )
  print_line_cursor#12 = phi( makecharset::@12/print_line_cursor#1 )
  print_line_cursor#4 = print_line_cursor#12
  print_char_cursor#6 = print_char_cursor#17
  makecharset::c#0 = 0
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@11 makecharset::@14
  makecharset::charset#10 = phi( makecharset::@11/makecharset::charset#12, makecharset::@14/makecharset::charset#13 )
  print_char_cursor#26 = phi( makecharset::@11/print_char_cursor#31, makecharset::@14/print_char_cursor#6 )
  print_line_cursor#19 = phi( makecharset::@11/print_line_cursor#24, makecharset::@14/print_line_cursor#4 )
  makecharset::c#2 = phi( makecharset::@11/makecharset::c#1, makecharset::@14/makecharset::c#0 )
  makecharset::$2 = makecharset::c#2 < $100
  if(makecharset::$2) goto makecharset::@2
  to:makecharset::@return
makecharset::@2: scope:[makecharset]  from makecharset::@1
  print_line_cursor#34 = phi( makecharset::@1/print_line_cursor#19 )
  print_char_cursor#38 = phi( makecharset::@1/print_char_cursor#26 )
  makecharset::charset#8 = phi( makecharset::@1/makecharset::charset#10 )
  makecharset::c#3 = phi( makecharset::@1/makecharset::c#2 )
  makecharset::$3 = < makecharset::c#3
  makecharset::s#0 = SINTABLE[makecharset::$3]
  makecharset::i#0 = 0
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@7
  makecharset::s#7 = phi( makecharset::@2/makecharset::s#0, makecharset::@7/makecharset::s#9 )
  print_line_cursor#31 = phi( makecharset::@2/print_line_cursor#34, makecharset::@7/print_line_cursor#35 )
  print_char_cursor#36 = phi( makecharset::@2/print_char_cursor#38, makecharset::@7/print_char_cursor#39 )
  makecharset::charset#5 = phi( makecharset::@2/makecharset::charset#8, makecharset::@7/makecharset::charset#1 )
  makecharset::c#7 = phi( makecharset::@2/makecharset::c#3, makecharset::@7/makecharset::c#5 )
  makecharset::i#2 = phi( makecharset::@2/makecharset::i#0, makecharset::@7/makecharset::i#1 )
  makecharset::$4 = makecharset::i#2 < 8
  if(makecharset::$4) goto makecharset::@4
  to:makecharset::@5
makecharset::@4: scope:[makecharset]  from makecharset::@3
  print_line_cursor#39 = phi( makecharset::@3/print_line_cursor#31 )
  print_char_cursor#43 = phi( makecharset::@3/print_char_cursor#36 )
  makecharset::s#5 = phi( makecharset::@3/makecharset::s#7 )
  makecharset::charset#3 = phi( makecharset::@3/makecharset::charset#5 )
  makecharset::i#5 = phi( makecharset::@3/makecharset::i#2 )
  makecharset::c#10 = phi( makecharset::@3/makecharset::c#7 )
  makecharset::b#0 = 0
  makecharset::ii#0 = 0
  to:makecharset::@6
makecharset::@5: scope:[makecharset]  from makecharset::@3
  makecharset::charset#16 = phi( makecharset::@3/makecharset::charset#5 )
  print_line_cursor#29 = phi( makecharset::@3/print_line_cursor#31 )
  print_char_cursor#32 = phi( makecharset::@3/print_char_cursor#36 )
  makecharset::c#4 = phi( makecharset::@3/makecharset::c#7 )
  makecharset::$12 = makecharset::c#4 & 7
  makecharset::$13 = makecharset::$12 == 0
  makecharset::$14 = ! makecharset::$13
  if(makecharset::$14) goto makecharset::@11
  to:makecharset::@10
makecharset::@6: scope:[makecharset]  from makecharset::@4 makecharset::@8
  print_line_cursor#37 = phi( makecharset::@4/print_line_cursor#39, makecharset::@8/print_line_cursor#40 )
  print_char_cursor#41 = phi( makecharset::@4/print_char_cursor#43, makecharset::@8/print_char_cursor#44 )
  makecharset::s#4 = phi( makecharset::@4/makecharset::s#5, makecharset::@8/makecharset::s#6 )
  makecharset::charset#2 = phi( makecharset::@4/makecharset::charset#3, makecharset::@8/makecharset::charset#4 )
  makecharset::b#4 = phi( makecharset::@4/makecharset::b#0, makecharset::@8/makecharset::b#6 )
  makecharset::i#4 = phi( makecharset::@4/makecharset::i#5, makecharset::@8/makecharset::i#6 )
  makecharset::c#8 = phi( makecharset::@4/makecharset::c#10, makecharset::@8/makecharset::c#11 )
  makecharset::ii#2 = phi( makecharset::@4/makecharset::ii#0, makecharset::@8/makecharset::ii#1 )
  makecharset::$5 = makecharset::ii#2 < 8
  if(makecharset::$5) goto makecharset::sid_rnd1
  to:makecharset::@7
makecharset::sid_rnd1: scope:[makecharset]  from makecharset::@6
  print_line_cursor#47 = phi( makecharset::@6/print_line_cursor#37 )
  print_char_cursor#51 = phi( makecharset::@6/print_char_cursor#41 )
  makecharset::charset#11 = phi( makecharset::@6/makecharset::charset#2 )
  makecharset::i#10 = phi( makecharset::@6/makecharset::i#4 )
  makecharset::c#16 = phi( makecharset::@6/makecharset::c#8 )
  makecharset::b#8 = phi( makecharset::@6/makecharset::b#4 )
  makecharset::ii#7 = phi( makecharset::@6/makecharset::ii#2 )
  makecharset::s#3 = phi( makecharset::@6/makecharset::s#4 )
  makecharset::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:makecharset::sid_rnd1_@return
makecharset::sid_rnd1_@return: scope:[makecharset]  from makecharset::sid_rnd1
  print_line_cursor#45 = phi( makecharset::sid_rnd1/print_line_cursor#47 )
  print_char_cursor#49 = phi( makecharset::sid_rnd1/print_char_cursor#51 )
  makecharset::charset#9 = phi( makecharset::sid_rnd1/makecharset::charset#11 )
  makecharset::i#9 = phi( makecharset::sid_rnd1/makecharset::i#10 )
  makecharset::c#15 = phi( makecharset::sid_rnd1/makecharset::c#16 )
  makecharset::b#7 = phi( makecharset::sid_rnd1/makecharset::b#8 )
  makecharset::ii#6 = phi( makecharset::sid_rnd1/makecharset::ii#7 )
  makecharset::s#2 = phi( makecharset::sid_rnd1/makecharset::s#3 )
  makecharset::sid_rnd1_return#2 = phi( makecharset::sid_rnd1/makecharset::sid_rnd1_return#0 )
  makecharset::sid_rnd1_return#1 = makecharset::sid_rnd1_return#2
  to:makecharset::@13
makecharset::@13: scope:[makecharset]  from makecharset::sid_rnd1_@return
  print_line_cursor#42 = phi( makecharset::sid_rnd1_@return/print_line_cursor#45 )
  print_char_cursor#46 = phi( makecharset::sid_rnd1_@return/print_char_cursor#49 )
  makecharset::charset#6 = phi( makecharset::sid_rnd1_@return/makecharset::charset#9 )
  makecharset::i#7 = phi( makecharset::sid_rnd1_@return/makecharset::i#9 )
  makecharset::c#13 = phi( makecharset::sid_rnd1_@return/makecharset::c#15 )
  makecharset::b#5 = phi( makecharset::sid_rnd1_@return/makecharset::b#7 )
  makecharset::ii#5 = phi( makecharset::sid_rnd1_@return/makecharset::ii#6 )
  makecharset::s#1 = phi( makecharset::sid_rnd1_@return/makecharset::s#2 )
  makecharset::sid_rnd1_return#3 = phi( makecharset::sid_rnd1_@return/makecharset::sid_rnd1_return#1 )
  makecharset::$6 = makecharset::sid_rnd1_return#3
  makecharset::$7 = makecharset::$6 & $ff
  makecharset::$8 = makecharset::$7 > makecharset::s#1
  makecharset::$9 = ! makecharset::$8
  if(makecharset::$9) goto makecharset::@8
  to:makecharset::@9
makecharset::@7: scope:[makecharset]  from makecharset::@6
  makecharset::s#9 = phi( makecharset::@6/makecharset::s#4 )
  print_line_cursor#35 = phi( makecharset::@6/print_line_cursor#37 )
  print_char_cursor#39 = phi( makecharset::@6/print_char_cursor#41 )
  makecharset::charset#1 = phi( makecharset::@6/makecharset::charset#2 )
  makecharset::b#2 = phi( makecharset::@6/makecharset::b#4 )
  makecharset::i#3 = phi( makecharset::@6/makecharset::i#4 )
  makecharset::c#5 = phi( makecharset::@6/makecharset::c#8 )
  makecharset::$10 = makecharset::c#5 * 8
  makecharset::$11 = makecharset::$10 + makecharset::i#3
  makecharset::charset#1[makecharset::$11] = makecharset::b#2
  makecharset::i#1 = ++ makecharset::i#3
  to:makecharset::@3
makecharset::@8: scope:[makecharset]  from makecharset::@13 makecharset::@9
  print_line_cursor#40 = phi( makecharset::@13/print_line_cursor#42, makecharset::@9/print_line_cursor#43 )
  print_char_cursor#44 = phi( makecharset::@13/print_char_cursor#46, makecharset::@9/print_char_cursor#47 )
  makecharset::s#6 = phi( makecharset::@13/makecharset::s#1, makecharset::@9/makecharset::s#8 )
  makecharset::charset#4 = phi( makecharset::@13/makecharset::charset#6, makecharset::@9/makecharset::charset#7 )
  makecharset::b#6 = phi( makecharset::@13/makecharset::b#5, makecharset::@9/makecharset::b#1 )
  makecharset::i#6 = phi( makecharset::@13/makecharset::i#7, makecharset::@9/makecharset::i#8 )
  makecharset::c#11 = phi( makecharset::@13/makecharset::c#13, makecharset::@9/makecharset::c#14 )
  makecharset::ii#3 = phi( makecharset::@13/makecharset::ii#5, makecharset::@9/makecharset::ii#4 )
  makecharset::ii#1 = ++ makecharset::ii#3
  to:makecharset::@6
makecharset::@9: scope:[makecharset]  from makecharset::@13
  print_line_cursor#43 = phi( makecharset::@13/print_line_cursor#42 )
  print_char_cursor#47 = phi( makecharset::@13/print_char_cursor#46 )
  makecharset::s#8 = phi( makecharset::@13/makecharset::s#1 )
  makecharset::charset#7 = phi( makecharset::@13/makecharset::charset#6 )
  makecharset::i#8 = phi( makecharset::@13/makecharset::i#7 )
  makecharset::c#14 = phi( makecharset::@13/makecharset::c#13 )
  makecharset::ii#4 = phi( makecharset::@13/makecharset::ii#5 )
  makecharset::b#3 = phi( makecharset::@13/makecharset::b#5 )
  makecharset::b#1 = makecharset::b#3 | makecharset::bittab[makecharset::ii#4]
  to:makecharset::@8
makecharset::@11: scope:[makecharset]  from makecharset::@15 makecharset::@5
  makecharset::charset#12 = phi( makecharset::@15/makecharset::charset#15, makecharset::@5/makecharset::charset#16 )
  print_char_cursor#31 = phi( makecharset::@15/print_char_cursor#7, makecharset::@5/print_char_cursor#32 )
  print_line_cursor#24 = phi( makecharset::@15/print_line_cursor#28, makecharset::@5/print_line_cursor#29 )
  makecharset::c#6 = phi( makecharset::@15/makecharset::c#9, makecharset::@5/makecharset::c#4 )
  makecharset::c#1 = ++ makecharset::c#6
  to:makecharset::@1
makecharset::@10: scope:[makecharset]  from makecharset::@5
  makecharset::charset#18 = phi( makecharset::@5/makecharset::charset#16 )
  print_line_cursor#32 = phi( makecharset::@5/print_line_cursor#29 )
  makecharset::c#12 = phi( makecharset::@5/makecharset::c#4 )
  print_char_cursor#22 = phi( makecharset::@5/print_char_cursor#32 )
  print_char::ch#0 = '.'
  call print_char 
  to:makecharset::@15
makecharset::@15: scope:[makecharset]  from makecharset::@10
  makecharset::charset#15 = phi( makecharset::@10/makecharset::charset#18 )
  print_line_cursor#28 = phi( makecharset::@10/print_line_cursor#32 )
  makecharset::c#9 = phi( makecharset::@10/makecharset::c#12 )
  print_char_cursor#18 = phi( makecharset::@10/print_char_cursor#1 )
  print_char_cursor#7 = print_char_cursor#18
  to:makecharset::@11
makecharset::@return: scope:[makecharset]  from makecharset::@1
  print_char_cursor#19 = phi( makecharset::@1/print_char_cursor#26 )
  print_line_cursor#13 = phi( makecharset::@1/print_line_cursor#19 )
  print_line_cursor#5 = print_line_cursor#13
  print_char_cursor#8 = print_char_cursor#19
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (byte*)$400
  print_line_cursor#6 = print_screen#0
  print_char_cursor#9 = print_line_cursor#6
  c1A#5 = 0
  c1B#5 = 0
  c2A#5 = 0
  c2B#5 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#8 = phi( __start::__init1/print_screen#0 )
  c2B#22 = phi( __start::__init1/c2B#5 )
  c2A#22 = phi( __start::__init1/c2A#5 )
  c1B#21 = phi( __start::__init1/c1B#5 )
  c1A#21 = phi( __start::__init1/c1A#5 )
  print_char_cursor#27 = phi( __start::__init1/print_char_cursor#9 )
  print_line_cursor#20 = phi( __start::__init1/print_line_cursor#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#8 )
  c2B#14 = phi( __start::@1/c2B#2 )
  c2A#14 = phi( __start::@1/c2A#2 )
  c1B#14 = phi( __start::@1/c1B#2 )
  c1A#14 = phi( __start::@1/c1A#2 )
  print_char_cursor#20 = phi( __start::@1/print_char_cursor#5 )
  print_line_cursor#14 = phi( __start::@1/print_line_cursor#3 )
  print_line_cursor#7 = print_line_cursor#14
  print_char_cursor#10 = print_char_cursor#20
  c1A#6 = c1A#14
  c1B#6 = c1B#14
  c2A#6 = c2A#14
  c2B#6 = c2B#14
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  c2B#15 = phi( __start::@2/c2B#6 )
  c2A#15 = phi( __start::@2/c2A#6 )
  c1B#15 = phi( __start::@2/c1B#6 )
  c1A#15 = phi( __start::@2/c1A#6 )
  print_char_cursor#21 = phi( __start::@2/print_char_cursor#10 )
  print_line_cursor#15 = phi( __start::@2/print_line_cursor#7 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  print_screen#1 = print_screen#4
  print_line_cursor#8 = print_line_cursor#15
  print_char_cursor#11 = print_char_cursor#21
  c1A#7 = c1A#15
  c1B#7 = c1B#15
  c2A#7 = c2A#15
  c2B#7 = c2B#15
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte BLACK = 0
const nomodify byte BLUE = 6
const nomodify byte* CHARSET = (byte*)$2000
const nomodify byte* COLS = (byte*)$d800
const nomodify byte* D018 = (byte*)$d018
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
const byte OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
const byte OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* SCREEN1 = (byte*)$2800
const nomodify byte* SCREEN2 = (byte*)$2c00
const nomodify struct MOS6581_SID* SID = (struct MOS6581_SID*)$d400
const nomodify byte SID_CONTROL_NOISE = $80
const to_nomodify byte* SINTABLE[$100]  = kickasm {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(2*PI*i/256))
 }}
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
void __start()
byte c1A
byte c1A#0
byte c1A#1
byte c1A#10
byte c1A#11
byte c1A#12
byte c1A#13
byte c1A#14
byte c1A#15
byte c1A#16
byte c1A#17
byte c1A#18
byte c1A#19
byte c1A#2
byte c1A#20
byte c1A#21
byte c1A#22
byte c1A#23
byte c1A#24
byte c1A#25
byte c1A#26
byte c1A#27
byte c1A#28
byte c1A#29
byte c1A#3
byte c1A#30
byte c1A#31
byte c1A#32
byte c1A#33
byte c1A#34
byte c1A#35
byte c1A#36
byte c1A#37
byte c1A#38
byte c1A#4
byte c1A#5
byte c1A#6
byte c1A#7
byte c1A#8
byte c1A#9
byte c1B
byte c1B#0
byte c1B#1
byte c1B#10
byte c1B#11
byte c1B#12
byte c1B#13
byte c1B#14
byte c1B#15
byte c1B#16
byte c1B#17
byte c1B#18
byte c1B#19
byte c1B#2
byte c1B#20
byte c1B#21
byte c1B#22
byte c1B#23
byte c1B#24
byte c1B#25
byte c1B#26
byte c1B#27
byte c1B#28
byte c1B#29
byte c1B#3
byte c1B#30
byte c1B#31
byte c1B#32
byte c1B#33
byte c1B#34
byte c1B#35
byte c1B#36
byte c1B#37
byte c1B#38
byte c1B#4
byte c1B#5
byte c1B#6
byte c1B#7
byte c1B#8
byte c1B#9
byte c2A
byte c2A#0
byte c2A#1
byte c2A#10
byte c2A#11
byte c2A#12
byte c2A#13
byte c2A#14
byte c2A#15
byte c2A#16
byte c2A#17
byte c2A#18
byte c2A#19
byte c2A#2
byte c2A#20
byte c2A#21
byte c2A#22
byte c2A#23
byte c2A#24
byte c2A#25
byte c2A#26
byte c2A#27
byte c2A#28
byte c2A#29
byte c2A#3
byte c2A#30
byte c2A#31
byte c2A#32
byte c2A#33
byte c2A#34
byte c2A#35
byte c2A#36
byte c2A#37
byte c2A#38
byte c2A#4
byte c2A#5
byte c2A#6
byte c2A#7
byte c2A#8
byte c2A#9
byte c2B
byte c2B#0
byte c2B#1
byte c2B#10
byte c2B#11
byte c2B#12
byte c2B#13
byte c2B#14
byte c2B#15
byte c2B#16
byte c2B#17
byte c2B#18
byte c2B#19
byte c2B#2
byte c2B#20
byte c2B#21
byte c2B#22
byte c2B#23
byte c2B#24
byte c2B#25
byte c2B#26
byte c2B#27
byte c2B#28
byte c2B#29
byte c2B#3
byte c2B#30
byte c2B#31
byte c2B#32
byte c2B#33
byte c2B#34
byte c2B#35
byte c2B#36
byte c2B#37
byte c2B#38
byte c2B#4
byte c2B#5
byte c2B#6
byte c2B#7
byte c2B#8
byte c2B#9
void doplasma(byte* doplasma::screen)
bool~ doplasma::$0
byte~ doplasma::$1
bool~ doplasma::$2
byte~ doplasma::$3
bool~ doplasma::$4
bool~ doplasma::$5
byte~ doplasma::$6
byte doplasma::c1a
byte doplasma::c1a#0
byte doplasma::c1a#1
byte doplasma::c1a#2
byte doplasma::c1a#3
byte doplasma::c1b
byte doplasma::c1b#0
byte doplasma::c1b#1
byte doplasma::c1b#2
byte doplasma::c1b#3
byte doplasma::c2a
byte doplasma::c2a#0
byte doplasma::c2a#1
byte doplasma::c2a#2
byte doplasma::c2a#3
byte doplasma::c2b
byte doplasma::c2b#0
byte doplasma::c2b#1
byte doplasma::c2b#2
byte doplasma::c2b#3
byte doplasma::i
byte doplasma::i#0
byte doplasma::i#1
byte doplasma::i#2
byte doplasma::i#3
byte doplasma::i1
byte doplasma::i1#0
byte doplasma::i1#1
byte doplasma::i1#2
byte doplasma::i1#3
byte doplasma::i2
byte doplasma::i2#0
byte doplasma::i2#1
byte doplasma::i2#2
byte doplasma::i2#3
byte doplasma::ii
byte doplasma::ii#0
byte doplasma::ii#1
byte doplasma::ii#2
byte doplasma::ii#3
byte doplasma::ii#4
byte doplasma::ii#5
byte doplasma::ii#6
byte* doplasma::screen
byte* doplasma::screen#0
byte* doplasma::screen#1
byte* doplasma::screen#10
byte* doplasma::screen#11
byte* doplasma::screen#12
byte* doplasma::screen#13
byte* doplasma::screen#14
byte* doplasma::screen#2
byte* doplasma::screen#3
byte* doplasma::screen#4
byte* doplasma::screen#5
byte* doplasma::screen#6
byte* doplasma::screen#7
byte* doplasma::screen#8
byte* doplasma::screen#9
const byte* doplasma::xbuf[$28]  = { fill( $28, 0) }
const byte* doplasma::ybuf[$19]  = { fill( $19, 0) }
void main()
bool~ main::$1
byte~ main::$3
byte~ main::$5
byte* main::col
byte* main::col#0
byte* main::col#1
byte* main::col#2
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
number~ main::toD0182_$0
number~ main::toD0182_$1
number~ main::toD0182_$2
byte~ main::toD0182_$3
number~ main::toD0182_$4
number~ main::toD0182_$5
number~ main::toD0182_$6
word~ main::toD0182_$7
byte* main::toD0182_gfx
byte* main::toD0182_gfx#0
byte* main::toD0182_gfx#1
byte main::toD0182_return
byte main::toD0182_return#0
byte main::toD0182_return#1
byte main::toD0182_return#2
byte main::toD0182_return#3
byte* main::toD0182_screen
byte* main::toD0182_screen#0
byte* main::toD0182_screen#1
void makecharset(byte* makecharset::charset)
number~ makecharset::$10
number~ makecharset::$11
number~ makecharset::$12
bool~ makecharset::$13
bool~ makecharset::$14
bool~ makecharset::$2
byte~ makecharset::$3
bool~ makecharset::$4
bool~ makecharset::$5
byte~ makecharset::$6
number~ makecharset::$7
bool~ makecharset::$8
bool~ makecharset::$9
byte makecharset::b
byte makecharset::b#0
byte makecharset::b#1
byte makecharset::b#2
byte makecharset::b#3
byte makecharset::b#4
byte makecharset::b#5
byte makecharset::b#6
byte makecharset::b#7
byte makecharset::b#8
const to_nomodify byte* makecharset::bittab[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
word makecharset::c
word makecharset::c#0
word makecharset::c#1
word makecharset::c#10
word makecharset::c#11
word makecharset::c#12
word makecharset::c#13
word makecharset::c#14
word makecharset::c#15
word makecharset::c#16
word makecharset::c#2
word makecharset::c#3
word makecharset::c#4
word makecharset::c#5
word makecharset::c#6
word makecharset::c#7
word makecharset::c#8
word makecharset::c#9
byte* makecharset::charset
byte* makecharset::charset#0
byte* makecharset::charset#1
byte* makecharset::charset#10
byte* makecharset::charset#11
byte* makecharset::charset#12
byte* makecharset::charset#13
byte* makecharset::charset#14
byte* makecharset::charset#15
byte* makecharset::charset#16
byte* makecharset::charset#17
byte* makecharset::charset#18
byte* makecharset::charset#19
byte* makecharset::charset#2
byte* makecharset::charset#3
byte* makecharset::charset#4
byte* makecharset::charset#5
byte* makecharset::charset#6
byte* makecharset::charset#7
byte* makecharset::charset#8
byte* makecharset::charset#9
byte makecharset::i
byte makecharset::i#0
byte makecharset::i#1
byte makecharset::i#10
byte makecharset::i#2
byte makecharset::i#3
byte makecharset::i#4
byte makecharset::i#5
byte makecharset::i#6
byte makecharset::i#7
byte makecharset::i#8
byte makecharset::i#9
byte makecharset::ii
byte makecharset::ii#0
byte makecharset::ii#1
byte makecharset::ii#2
byte makecharset::ii#3
byte makecharset::ii#4
byte makecharset::ii#5
byte makecharset::ii#6
byte makecharset::ii#7
byte makecharset::s
byte makecharset::s#0
byte makecharset::s#1
byte makecharset::s#2
byte makecharset::s#3
byte makecharset::s#4
byte makecharset::s#5
byte makecharset::s#6
byte makecharset::s#7
byte makecharset::s#8
byte makecharset::s#9
byte makecharset::sid_rnd1_return
byte makecharset::sid_rnd1_return#0
byte makecharset::sid_rnd1_return#1
byte makecharset::sid_rnd1_return#2
byte makecharset::sid_rnd1_return#3
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#51
byte* print_char_cursor#52
byte* print_char_cursor#6
byte* print_char_cursor#7
byte* print_char_cursor#8
byte* print_char_cursor#9
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#19
byte* print_line_cursor#2
byte* print_line_cursor#20
byte* print_line_cursor#21
byte* print_line_cursor#22
byte* print_line_cursor#23
byte* print_line_cursor#24
byte* print_line_cursor#25
byte* print_line_cursor#26
byte* print_line_cursor#27
byte* print_line_cursor#28
byte* print_line_cursor#29
byte* print_line_cursor#3
byte* print_line_cursor#30
byte* print_line_cursor#31
byte* print_line_cursor#32
byte* print_line_cursor#33
byte* print_line_cursor#34
byte* print_line_cursor#35
byte* print_line_cursor#36
byte* print_line_cursor#37
byte* print_line_cursor#38
byte* print_line_cursor#39
byte* print_line_cursor#4
byte* print_line_cursor#40
byte* print_line_cursor#41
byte* print_line_cursor#42
byte* print_line_cursor#43
byte* print_line_cursor#44
byte* print_line_cursor#45
byte* print_line_cursor#46
byte* print_line_cursor#47
byte* print_line_cursor#5
byte* print_line_cursor#6
byte* print_line_cursor#7
byte* print_line_cursor#8
byte* print_line_cursor#9
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#10
byte* print_screen#11
byte* print_screen#12
byte* print_screen#2
byte* print_screen#3
byte* print_screen#4
byte* print_screen#5
byte* print_screen#6
byte* print_screen#7
byte* print_screen#8
byte* print_screen#9

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) $3e8 in main::col#1 = main::col#2 + rangenext(COLS,COLS+$3e8)
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) $3fff in main::toD0182_$0 = main::toD0182_$7 & $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in main::toD0182_$0 = main::toD0182_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0182_$1 = main::toD0182_$0 * 4
Adding number conversion cast (unumber) main::toD0182_$1 in main::toD0182_$1 = main::toD0182_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0182_$2 in main::toD0182_$2 = > main::toD0182_$1
Adding number conversion cast (unumber) 4 in main::toD0182_$4 = main::toD0182_$3 / 4
Adding number conversion cast (unumber) main::toD0182_$4 in main::toD0182_$4 = main::toD0182_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0182_$5 = main::toD0182_$4 & $f
Adding number conversion cast (unumber) main::toD0182_$5 in main::toD0182_$5 = main::toD0182_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0182_$6 in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Adding number conversion cast (unumber) $19 in doplasma::$0 = doplasma::i#2 < $19
Adding number conversion cast (unumber) 4 in doplasma::c1a#1 = doplasma::c1a#2 + 4
Adding number conversion cast (unumber) 9 in doplasma::c1b#1 = doplasma::c1b#2 + 9
Adding number conversion cast (unumber) 3 in c1A#3 = c1A#12 + 3
Adding number conversion cast (unumber) 5 in c1B#3 = c1B#12 - 5
Adding number conversion cast (unumber) $28 in doplasma::$2 = doplasma::i1#2 < $28
Adding number conversion cast (unumber) 3 in doplasma::c2a#1 = doplasma::c2a#2 + 3
Adding number conversion cast (unumber) 7 in doplasma::c2b#1 = doplasma::c2b#2 + 7
Adding number conversion cast (unumber) 2 in c2A#3 = c2A#12 + 2
Adding number conversion cast (unumber) 3 in c2B#3 = c2B#12 - 3
Adding number conversion cast (unumber) $19 in doplasma::$4 = doplasma::ii#2 < $19
Adding number conversion cast (unumber) $28 in doplasma::$5 = doplasma::i2#2 < $28
Adding number conversion cast (unumber) $28 in doplasma::screen#2 = doplasma::screen#4 + $28
Adding number conversion cast (unumber) $ffff in *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff
Adding number conversion cast (unumber) $100 in makecharset::$2 = makecharset::c#2 < $100
Adding number conversion cast (unumber) 8 in makecharset::$4 = makecharset::i#2 < 8
Adding number conversion cast (unumber) 7 in makecharset::$12 = makecharset::c#4 & 7
Adding number conversion cast (unumber) makecharset::$12 in makecharset::$12 = makecharset::c#4 & (unumber)7
Adding number conversion cast (unumber) 0 in makecharset::$13 = makecharset::$12 == 0
Adding number conversion cast (unumber) 8 in makecharset::$5 = makecharset::ii#2 < 8
Adding number conversion cast (unumber) $ff in makecharset::$7 = makecharset::$6 & $ff
Adding number conversion cast (unumber) makecharset::$7 in makecharset::$7 = makecharset::$6 & (unumber)$ff
Adding number conversion cast (unumber) 8 in makecharset::$10 = makecharset::c#5 * 8
Adding number conversion cast (unumber) makecharset::$10 in makecharset::$10 = makecharset::c#5 * (unumber)8
Adding number conversion cast (unumber) makecharset::$11 in makecharset::$11 = makecharset::$10 + makecharset::i#3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = (unumber)$ffff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6581_SID*) 54272
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 10240
Simplifying constant pointer cast (byte*) 11264
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $19
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast 3
Simplifying constant integer cast 5
Simplifying constant integer cast $28
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $ffff
Simplifying constant integer cast $100
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to word in main::toD0182_$0 = main::toD0182_$7 & $3fff
Inferred type updated to word in main::toD0182_$1 = main::toD0182_$0 * 4
Inferred type updated to byte in main::toD0182_$2 = > main::toD0182_$1
Inferred type updated to byte in main::toD0182_$4 = main::toD0182_$3 / 4
Inferred type updated to byte in main::toD0182_$5 = main::toD0182_$4 & $f
Inferred type updated to byte in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Inferred type updated to byte in makecharset::$12 = makecharset::c#4 & 7
Inferred type updated to byte in makecharset::$7 = makecharset::$6 & $ff
Inferred type updated to word in makecharset::$10 = makecharset::c#5 * 8
Inferred type updated to word in makecharset::$11 = makecharset::$10 + makecharset::i#3
Inversing boolean not [2] memset::$1 = memset::num#1 <= 0 from [1] memset::$0 = memset::num#1 > 0
Inversing boolean not [193] makecharset::$14 = makecharset::$12 != 0 from [192] makecharset::$13 = makecharset::$12 == 0
Inversing boolean not [206] makecharset::$9 = makecharset::$7 <= makecharset::s#1 from [205] makecharset::$8 = makecharset::$7 > makecharset::s#1
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_char_cursor#0 = print_char_cursor#13 print_char_cursor#1 
Alias print_line_cursor#0 = print_screen#3 print_screen#2 print_char_cursor#2 print_line_cursor#9 print_char_cursor#14 print_line_cursor#1 print_char_cursor#3 
Alias print_line_cursor#16 = print_line_cursor#21 
Alias print_char_cursor#23 = print_char_cursor#28 
Alias c1A#23 = c1A#28 c1A#33 
Alias c1B#23 = c1B#28 c1B#33 
Alias c2A#24 = c2A#30 c2A#34 
Alias c2B#24 = c2B#30 c2B#34 
Alias print_screen#10 = print_screen#11 
Alias print_line_cursor#10 = print_line_cursor#2 
Alias print_char_cursor#15 = print_char_cursor#4 
Alias c1A#10 = c1A#16 c1A#18 c1A#2 
Alias c1B#10 = c1B#16 c1B#18 c1B#2 
Alias c2A#10 = c2A#16 c2A#18 c2A#2 
Alias c2B#10 = c2B#16 c2B#18 c2B#2 
Alias print_line_cursor#11 = print_line_cursor#46 print_line_cursor#17 print_line_cursor#44 print_line_cursor#41 print_line_cursor#38 print_line_cursor#36 print_line_cursor#33 print_line_cursor#30 print_line_cursor#26 print_line_cursor#22 print_line_cursor#3 
Alias print_char_cursor#16 = print_char_cursor#52 print_char_cursor#24 print_char_cursor#50 print_char_cursor#48 print_char_cursor#45 print_char_cursor#42 print_char_cursor#40 print_char_cursor#37 print_char_cursor#34 print_char_cursor#29 print_char_cursor#5 
Alias c1A#0 = c1A#8 c1A#29 c1A#24 c1A#17 
Alias c1B#0 = c1B#8 c1B#29 c1B#24 c1B#17 
Alias c2A#0 = c2A#8 c2A#31 c2A#25 c2A#17 
Alias c2B#0 = c2B#8 c2B#31 c2B#25 c2B#17 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$3 
Alias c1A#1 = c1A#9 c1A#34 c1A#30 c1A#22 
Alias c1B#1 = c1B#9 c1B#34 c1B#30 c1B#22 
Alias c2A#1 = c2A#9 c2A#35 c2A#32 c2A#23 
Alias c2B#1 = c2B#9 c2B#35 c2B#32 c2B#23 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$5 
Alias doplasma::c1a#2 = doplasma::c1a#3 
Alias doplasma::c1b#2 = doplasma::c1b#3 
Alias doplasma::i#2 = doplasma::i#3 
Alias c1A#12 = c1A#25 c1A#19 
Alias c1B#12 = c1B#25 c1B#19 
Alias c2A#11 = c2A#27 c2A#19 
Alias c2B#11 = c2B#27 c2B#19 
Alias doplasma::screen#10 = doplasma::screen#14 doplasma::screen#12 
Alias doplasma::c2a#2 = doplasma::c2a#3 
Alias doplasma::c2b#2 = doplasma::c2b#3 
Alias doplasma::i1#2 = doplasma::i1#3 
Alias c2A#12 = c2A#28 c2A#20 
Alias c2B#12 = c2B#28 c2B#20 
Alias c1A#27 = c1A#35 c1A#31 
Alias c1B#27 = c1B#35 c1B#31 
Alias doplasma::screen#11 = doplasma::screen#9 doplasma::screen#8 
Alias doplasma::ii#2 = doplasma::ii#6 
Alias doplasma::screen#6 = doplasma::screen#7 
Alias c1A#13 = c1A#37 c1A#20 c1A#4 
Alias c1B#13 = c1B#37 c1B#20 c1B#4 
Alias c2A#13 = c2A#37 c2A#21 c2A#4 
Alias c2B#13 = c2B#37 c2B#21 c2B#4 
Alias doplasma::i2#2 = doplasma::i2#3 
Alias doplasma::ii#3 = doplasma::ii#5 doplasma::ii#4 
Alias doplasma::screen#3 = doplasma::screen#5 doplasma::screen#4 
Alias c1A#26 = c1A#36 c1A#32 
Alias c1B#26 = c1B#36 c1B#32 
Alias c2A#29 = c2A#36 c2A#33 
Alias c2B#29 = c2B#36 c2B#33 
Alias print_screen#5 = print_screen#7 print_screen#9 
Alias print_line_cursor#18 = print_line_cursor#23 print_line_cursor#27 
Alias print_char_cursor#25 = print_char_cursor#30 print_char_cursor#35 
Alias makecharset::charset#13 = makecharset::charset#17 makecharset::charset#19 makecharset::charset#14 
Alias print_line_cursor#12 = print_line_cursor#4 
Alias print_char_cursor#17 = print_char_cursor#6 
Alias makecharset::c#2 = makecharset::c#3 
Alias makecharset::charset#10 = makecharset::charset#8 
Alias print_char_cursor#19 = print_char_cursor#38 print_char_cursor#26 print_char_cursor#8 
Alias print_line_cursor#13 = print_line_cursor#34 print_line_cursor#19 print_line_cursor#5 
Alias makecharset::c#10 = makecharset::c#7 makecharset::c#4 makecharset::c#12 makecharset::c#9 
Alias makecharset::i#2 = makecharset::i#5 
Alias makecharset::charset#15 = makecharset::charset#3 makecharset::charset#5 makecharset::charset#16 makecharset::charset#18 
Alias makecharset::s#5 = makecharset::s#7 
Alias print_char_cursor#22 = print_char_cursor#43 print_char_cursor#36 print_char_cursor#32 
Alias print_line_cursor#28 = print_line_cursor#39 print_line_cursor#31 print_line_cursor#29 print_line_cursor#32 
Alias makecharset::s#1 = makecharset::s#3 makecharset::s#4 makecharset::s#2 makecharset::s#9 makecharset::s#8 
Alias makecharset::ii#2 = makecharset::ii#7 makecharset::ii#6 makecharset::ii#5 makecharset::ii#4 
Alias makecharset::b#2 = makecharset::b#8 makecharset::b#4 makecharset::b#7 makecharset::b#5 makecharset::b#3 
Alias makecharset::c#13 = makecharset::c#16 makecharset::c#8 makecharset::c#15 makecharset::c#5 makecharset::c#14 
Alias makecharset::i#10 = makecharset::i#4 makecharset::i#9 makecharset::i#7 makecharset::i#3 makecharset::i#8 
Alias makecharset::charset#1 = makecharset::charset#11 makecharset::charset#2 makecharset::charset#9 makecharset::charset#6 makecharset::charset#7 
Alias print_char_cursor#39 = print_char_cursor#51 print_char_cursor#41 print_char_cursor#49 print_char_cursor#46 print_char_cursor#47 
Alias print_line_cursor#35 = print_line_cursor#47 print_line_cursor#37 print_line_cursor#45 print_line_cursor#42 print_line_cursor#43 
Alias makecharset::sid_rnd1_return#0 = makecharset::sid_rnd1_return#2 makecharset::sid_rnd1_return#1 makecharset::sid_rnd1_return#3 makecharset::$6 
Alias print_char_cursor#18 = print_char_cursor#7 
Alias print_screen#0 = print_line_cursor#6 print_char_cursor#9 print_line_cursor#20 print_char_cursor#27 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias c1A#21 = c1A#5 
Alias c1B#21 = c1B#5 
Alias c2A#22 = c2A#5 
Alias c2B#22 = c2B#5 
Alias print_line_cursor#14 = print_line_cursor#7 print_line_cursor#15 print_line_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#20 print_char_cursor#21 print_char_cursor#11 
Alias c1A#14 = c1A#6 c1A#15 c1A#7 
Alias c1B#14 = c1B#6 c1B#15 c1B#7 
Alias c2A#14 = c2A#6 c2A#15 c2A#7 
Alias c2B#14 = c2B#6 c2B#15 c2B#7 
Successful SSA optimization Pass2AliasElimination
Alias makecharset::ii#2 = makecharset::ii#3 
Alias makecharset::c#11 = makecharset::c#13 
Alias makecharset::i#10 = makecharset::i#6 
Alias makecharset::charset#1 = makecharset::charset#4 
Alias makecharset::s#1 = makecharset::s#6 
Alias print_char_cursor#39 = print_char_cursor#44 
Alias print_line_cursor#35 = print_line_cursor#40 
Alias makecharset::c#10 = makecharset::c#6 
Alias print_line_cursor#24 = print_line_cursor#28 
Alias makecharset::charset#12 = makecharset::charset#15 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_char::ch#1 print_char::ch#0
Identical Phi Values print_char_cursor#12 print_char_cursor#22
Identical Phi Values print_line_cursor#0 print_screen#5
Identical Phi Values print_line_cursor#25 print_screen#0
Identical Phi Values print_char_cursor#33 print_screen#0
Identical Phi Values c1A#38 c1A#21
Identical Phi Values c1B#38 c1B#21
Identical Phi Values c2A#38 c2A#22
Identical Phi Values c2B#38 c2B#22
Identical Phi Values print_screen#12 print_screen#0
Identical Phi Values print_line_cursor#16 print_line_cursor#25
Identical Phi Values print_char_cursor#23 print_char_cursor#33
Identical Phi Values c1A#23 c1A#38
Identical Phi Values c1B#23 c1B#38
Identical Phi Values c2A#24 c2A#38
Identical Phi Values c2B#24 c2B#38
Identical Phi Values print_screen#10 print_screen#12
Identical Phi Values print_line_cursor#10 print_line_cursor#13
Identical Phi Values print_char_cursor#15 print_char_cursor#19
Identical Phi Values print_line_cursor#11 print_line_cursor#10
Identical Phi Values print_char_cursor#16 print_char_cursor#15
Identical Phi Values c1A#0 c1A#13
Identical Phi Values c1B#0 c1B#13
Identical Phi Values c2A#0 c2A#13
Identical Phi Values c2B#0 c2B#13
Identical Phi Values c1A#1 c1A#13
Identical Phi Values c1B#1 c1B#13
Identical Phi Values c2A#1 c2A#13
Identical Phi Values c2B#1 c2B#13
Identical Phi Values c1A#12 c1A#11
Identical Phi Values c1B#12 c1B#11
Identical Phi Values c2A#11 c2A#26
Identical Phi Values c2B#11 c2B#26
Identical Phi Values doplasma::screen#10 doplasma::screen#13
Identical Phi Values c2A#12 c2A#11
Identical Phi Values c2B#12 c2B#11
Identical Phi Values c1A#27 c1A#3
Identical Phi Values c1B#27 c1B#3
Identical Phi Values doplasma::screen#11 doplasma::screen#10
Identical Phi Values doplasma::ii#3 doplasma::ii#2
Identical Phi Values doplasma::screen#3 doplasma::screen#6
Identical Phi Values c1A#26 c1A#13
Identical Phi Values c1B#26 c1B#13
Identical Phi Values c2A#29 c2A#13
Identical Phi Values c2B#29 c2B#13
Identical Phi Values print_screen#5 print_screen#10
Identical Phi Values print_line_cursor#18 print_line_cursor#16
Identical Phi Values print_char_cursor#25 print_char_cursor#23
Identical Phi Values makecharset::charset#13 makecharset::charset#0
Identical Phi Values print_line_cursor#12 print_line_cursor#0
Identical Phi Values print_char_cursor#17 print_line_cursor#0
Identical Phi Values makecharset::c#11 makecharset::c#10
Identical Phi Values makecharset::i#10 makecharset::i#2
Identical Phi Values makecharset::charset#1 makecharset::charset#12
Identical Phi Values makecharset::s#1 makecharset::s#5
Identical Phi Values print_char_cursor#39 print_char_cursor#22
Identical Phi Values print_line_cursor#35 print_line_cursor#24
Identical Phi Values print_char_cursor#18 print_char_cursor#0
Identical Phi Values print_line_cursor#14 print_line_cursor#11
Identical Phi Values print_char_cursor#10 print_char_cursor#16
Identical Phi Values c1A#14 c1A#10
Identical Phi Values c1B#14 c1B#10
Identical Phi Values c2A#14 c2A#10
Identical Phi Values c2B#14 c2B#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values c1A#13 c1A#3
Identical Phi Values c1B#13 c1B#3
Identical Phi Values c2A#13 c2A#3
Identical Phi Values c2B#13 c2B#3
Identical Phi Values makecharset::c#10 makecharset::c#2
Identical Phi Values makecharset::charset#12 makecharset::charset#10
Identical Phi Values print_char_cursor#22 print_char_cursor#19
Identical Phi Values print_line_cursor#24 print_line_cursor#13
Identical Phi Values makecharset::s#5 makecharset::s#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_line_cursor#13 print_screen#0
Identical Phi Values makecharset::charset#10 makecharset::charset#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memset::$1 [2] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$1 [33] if(main::col#1!=rangelast(COLS,COLS+$3e8)) goto main::@1
Simple Condition doplasma::$0 [74] if(doplasma::i#2<$19) goto doplasma::@2
Simple Condition doplasma::$2 [87] if(doplasma::i1#2<$28) goto doplasma::@5
Simple Condition doplasma::$4 [98] if(doplasma::ii#2<$19) goto doplasma::@8
Simple Condition doplasma::$5 [102] if(doplasma::i2#2<$28) goto doplasma::@10
Simple Condition makecharset::$2 [117] if(makecharset::c#2<$100) goto makecharset::@2
Simple Condition makecharset::$4 [123] if(makecharset::i#2<8) goto makecharset::@4
Simple Condition makecharset::$14 [128] if(makecharset::$12!=0) goto makecharset::@11
Simple Condition makecharset::$5 [131] if(makecharset::ii#2<8) goto makecharset::sid_rnd1
Simple Condition makecharset::$9 [135] if(makecharset::$7<=makecharset::s#0) goto makecharset::@8
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant main::col#0 = COLS
Constant makecharset::charset#0 = CHARSET
Constant doplasma::screen#0 = SCREEN1
Constant main::toD0181_screen#0 = SCREEN1
Constant main::toD0181_gfx#0 = CHARSET
Constant doplasma::screen#1 = SCREEN2
Constant main::toD0182_screen#0 = SCREEN2
Constant main::toD0182_gfx#0 = CHARSET
Constant doplasma::i#0 = 0
Constant doplasma::i1#0 = 0
Constant doplasma::ii#0 = 0
Constant doplasma::i2#0 = 0
Constant makecharset::c#0 = 0
Constant makecharset::i#0 = 0
Constant makecharset::b#0 = 0
Constant makecharset::ii#0 = 0
Constant print_char::ch#0 = '.'
Constant print_screen#0 = (byte*) 1024
Constant c1A#21 = 0
Constant c1B#21 = 0
Constant c2A#22 = 0
Constant c2B#22 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::str#0 = (void*)print_screen#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant main::toD0182_$7 = (word)main::toD0182_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [48] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [62] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [2] if(memset::num#0<=0) goto memset::@1
if() condition always true - replacing block destination [38] if(true) goto main::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [31] main::col#1 = ++ main::col#2 to ++
Resolved ranged comparison value [33] if(main::col#1!=rangelast(COLS,COLS+$3e8)) goto main::@1 to (byte*)COLS+$3e8+1
De-inlining pointer[w] to *(pointer+w)   [138] makecharset::charset#0[makecharset::$11] = makecharset::b#2
Successful SSA optimization Pass2DeInlineWordDerefIdx
Eliminating unused constant memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 1 in [17] if(main::col#1!=(byte*)COLS+$3e8+1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast COLS+$3e8+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] memset::end#0 = memset::$4 + memset::num#0
Constant right-side identified [21] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [24] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [30] main::toD0182_$0 = main::toD0182_$7 & $3fff
Constant right-side identified [33] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::toD0182_$0 = main::toD0182_$7&$3fff
Constant main::toD0182_$3 = >(word)main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [22] main::toD0181_$4 = main::toD0181_$3 / 4
Constant right-side identified [27] main::toD0182_$1 = main::toD0182_$0 * 4
Constant right-side identified [29] main::toD0182_$4 = main::toD0182_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Constant main::toD0182_$1 = main::toD0182_$0*4
Constant main::toD0182_$4 = main::toD0182_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [21] main::toD0181_$5 = main::toD0181_$4 & $f
Constant right-side identified [25] main::toD0182_$2 = > main::toD0182_$1
Constant right-side identified [26] main::toD0182_$5 = main::toD0182_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Constant main::toD0182_$2 = >main::toD0182_$1
Constant main::toD0182_$5 = main::toD0182_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Constant right-side identified [23] main::toD0182_return#0 = main::toD0182_$2 | main::toD0182_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [72] makecharset::$10 = makecharset::c#2 * 8
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings main::col#0
Inlining constant with var siblings doplasma::screen#0
Inlining constant with var siblings doplasma::screen#1
Inlining constant with var siblings doplasma::i#0
Inlining constant with var siblings doplasma::i1#0
Inlining constant with var siblings doplasma::ii#0
Inlining constant with var siblings doplasma::i2#0
Inlining constant with var siblings makecharset::c#0
Inlining constant with var siblings makecharset::i#0
Inlining constant with var siblings makecharset::b#0
Inlining constant with var siblings makecharset::ii#0
Inlining constant with var siblings c1A#21
Inlining constant with var siblings c1B#21
Inlining constant with var siblings c2A#22
Inlining constant with var siblings c2B#22
Constant inlined main::toD0181_screen#0 = SCREEN1
Constant inlined main::toD0181_gfx#0 = CHARSET
Constant inlined main::col#0 = COLS
Constant inlined doplasma::i#0 = 0
Constant inlined main::toD0182_$4 = >(word)CHARSET/4
Constant inlined main::toD0182_$5 = >(word)CHARSET/4&$f
Constant inlined main::toD0182_$7 = (word)SCREEN2
Constant inlined main::toD0182_$0 = (word)SCREEN2&$3fff
Constant inlined doplasma::i2#0 = 0
Constant inlined main::toD0182_$1 = (word)SCREEN2&$3fff*4
Constant inlined doplasma::i1#0 = 0
Constant inlined main::toD0182_$2 = >(word)SCREEN2&$3fff*4
Constant inlined c1B#21 = 0
Constant inlined main::toD0182_$3 = >(word)CHARSET
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined c2B#22 = 0
Constant inlined main::toD0181_$7 = (word)SCREEN1
Constant inlined main::toD0182_gfx#0 = CHARSET
Constant inlined main::toD0181_$2 = >(word)SCREEN1&$3fff*4
Constant inlined main::toD0181_$1 = (word)SCREEN1&$3fff*4
Constant inlined main::toD0181_$0 = (word)SCREEN1&$3fff
Constant inlined doplasma::ii#0 = 0
Constant inlined main::toD0181_$5 = >(word)CHARSET/4&$f
Constant inlined main::toD0181_$4 = >(word)CHARSET/4
Constant inlined main::toD0181_$3 = >(word)CHARSET
Constant inlined makecharset::ii#0 = 0
Constant inlined c1A#21 = 0
Constant inlined makecharset::i#0 = 0
Constant inlined makecharset::charset#0 = CHARSET
Constant inlined doplasma::screen#0 = SCREEN1
Constant inlined main::toD0182_screen#0 = SCREEN2
Constant inlined doplasma::screen#1 = SCREEN2
Constant inlined makecharset::b#0 = 0
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined makecharset::c#0 = 0
Constant inlined c2A#22 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@10(between main::@1 and main::@1)
Added new block during phi lifting makecharset::@16(between makecharset::@13 and makecharset::@8)
Added new block during phi lifting makecharset::@17(between makecharset::@5 and makecharset::@11)
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@12
Adding NOP phi() at start of makecharset::@14
Adding NOP phi() at start of makecharset::@10
Adding NOP phi() at start of makecharset::@4
Adding NOP phi() at start of makecharset::sid_rnd1_@return
Adding NOP phi() at start of doplasma::@8
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [main] to makecharset:8 doplasma:15 doplasma:24 
Calls in [makecharset] to print_cls:38 print_char:50 
Calls in [print_cls] to memset:126 

Created 27 initial phi equivalence classes
Coalesced [11] c1A#40 = c1A#10
Coalesced [12] c1B#40 = c1B#10
Coalesced [13] c2A#40 = c2A#10
Coalesced [14] c2B#40 = c2B#10
Coalesced [20] c1A#41 = c1A#3
Coalesced [21] c1B#41 = c1B#3
Coalesced [22] c2A#41 = c2A#3
Coalesced [23] c2B#41 = c2B#3
Coalesced (already) [29] c1A#39 = c1A#3
Coalesced (already) [30] c1B#39 = c1B#3
Coalesced (already) [31] c2A#39 = c2A#3
Coalesced (already) [32] c2B#39 = c2B#3
Coalesced [33] main::col#3 = main::col#1
Coalesced [51] print_char_cursor#54 = print_char_cursor#0
Coalesced [54] makecharset::c#17 = makecharset::c#1
Coalesced [55] print_char_cursor#53 = print_char_cursor#31
Coalesced (already) [56] print_char_cursor#55 = print_char_cursor#19
Coalesced [65] makecharset::i#11 = makecharset::i#1
Coalesced [71] makecharset::b#11 = makecharset::b#1
Coalesced [74] makecharset::ii#8 = makecharset::ii#1
Coalesced [75] makecharset::b#9 = makecharset::b#6
Coalesced (already) [76] makecharset::b#10 = makecharset::b#2
Coalesced [80] doplasma::c1a#4 = doplasma::c1a#0
Coalesced [81] doplasma::c1b#4 = doplasma::c1b#0
Coalesced [88] doplasma::c2a#4 = doplasma::c2a#0
Coalesced [89] doplasma::c2b#4 = doplasma::c2b#0
Coalesced [94] doplasma::screen#16 = doplasma::screen#13
Coalesced [103] doplasma::ii#7 = doplasma::ii#1
Coalesced [104] doplasma::screen#15 = doplasma::screen#2
Coalesced [108] doplasma::i2#4 = doplasma::i2#1
Coalesced [114] doplasma::i1#4 = doplasma::i1#1
Coalesced [115] doplasma::c2a#5 = doplasma::c2a#1
Coalesced [116] doplasma::c2b#5 = doplasma::c2b#1
Coalesced [122] doplasma::i#4 = doplasma::i#1
Coalesced [123] doplasma::c1a#5 = doplasma::c1a#1
Coalesced [124] doplasma::c1b#5 = doplasma::c1b#1
Coalesced [140] memset::dst#4 = memset::dst#1
Coalesced down to 20 phi equivalence classes
Culled Empty Block label main::@7
Culled Empty Block label main::@8
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@9
Culled Empty Block label main::toD0182_@return
Culled Empty Block label main::@10
Culled Empty Block label makecharset::@14
Culled Empty Block label makecharset::@15
Culled Empty Block label makecharset::@17
Culled Empty Block label makecharset::@4
Culled Empty Block label makecharset::sid_rnd1_@return
Culled Empty Block label makecharset::@16
Culled Empty Block label doplasma::@8
Culled Empty Block label print_cls::@1
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block doplasma::@9 to doplasma::@8
Renumbering block doplasma::@10 to doplasma::@9
Renumbering block doplasma::@11 to doplasma::@10
Renumbering block makecharset::@5 to makecharset::@4
Renumbering block makecharset::@6 to makecharset::@5
Renumbering block makecharset::@7 to makecharset::@6
Renumbering block makecharset::@8 to makecharset::@7
Renumbering block makecharset::@9 to makecharset::@8
Renumbering block makecharset::@10 to makecharset::@9
Renumbering block makecharset::@11 to makecharset::@10
Renumbering block makecharset::@12 to makecharset::@11
Renumbering block makecharset::@13 to makecharset::@12
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@11
Adding NOP phi() at start of makecharset::@9
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLUE
  [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLUE
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [3] main::col#2 = phi( main/COLS, main::@1/main::col#1 )
  [4] *main::col#2 = BLACK
  [5] main::col#1 = ++ main::col#2
  [6] if(main::col#1!=COLS+$3e8+1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] phi()
  [8] call makecharset 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [9] c2B#10 = phi( main::@6/c2B#3, main::@2/0 )
  [9] c2A#10 = phi( main::@6/c2A#3, main::@2/0 )
  [9] c1B#10 = phi( main::@6/c1B#3, main::@2/0 )
  [9] c1A#10 = phi( main::@6/c1A#3, main::@2/0 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] phi()
  [11] call doplasma 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@4
  [12] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [13] *D018 = main::toD0181_return#0
  [14] call doplasma 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@5
  [15] phi()
  to:main::@6
main::@6: scope:[main]  from main::toD0182
  [16] *D018 = main::toD0182_return#0
  to:main::@3

void makecharset(byte* makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  [17] phi()
  to:makecharset::sid_rnd_init1
makecharset::sid_rnd_init1: scope:[makecharset]  from makecharset
  [18] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff
  [19] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::sid_rnd_init1
  [20] phi()
  [21] call print_cls 
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@10 makecharset::@11
  [22] print_char_cursor#19 = phi( makecharset::@10/print_char_cursor#31, makecharset::@11/print_screen#0 )
  [22] makecharset::c#2 = phi( makecharset::@10/makecharset::c#1, makecharset::@11/0 )
  [23] if(makecharset::c#2<$100) goto makecharset::@2
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@1
  [24] return 
  to:@return
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [25] makecharset::$3 = < makecharset::c#2
  [26] makecharset::s#0 = SINTABLE[makecharset::$3]
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@6
  [27] makecharset::i#2 = phi( makecharset::@2/0, makecharset::@6/makecharset::i#1 )
  [28] if(makecharset::i#2<8) goto makecharset::@5
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [29] makecharset::$12 = makecharset::c#2 & 7
  [30] if(makecharset::$12!=0) goto makecharset::@10
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@4
  [31] phi()
  [32] call print_char 
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@4 makecharset::@9
  [33] print_char_cursor#31 = phi( makecharset::@9/print_char_cursor#0, makecharset::@4/print_char_cursor#19 )
  [34] makecharset::c#1 = ++ makecharset::c#2
  to:makecharset::@1
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [35] makecharset::b#2 = phi( makecharset::@3/0, makecharset::@7/makecharset::b#6 )
  [35] makecharset::ii#2 = phi( makecharset::@3/0, makecharset::@7/makecharset::ii#1 )
  [36] if(makecharset::ii#2<8) goto makecharset::sid_rnd1
  to:makecharset::@6
makecharset::@6: scope:[makecharset]  from makecharset::@5
  [37] makecharset::$10 = makecharset::c#2 << 3
  [38] makecharset::$11 = makecharset::$10 + makecharset::i#2
  [39] makecharset::$16 = CHARSET + makecharset::$11
  [40] *makecharset::$16 = makecharset::b#2
  [41] makecharset::i#1 = ++ makecharset::i#2
  to:makecharset::@3
makecharset::sid_rnd1: scope:[makecharset]  from makecharset::@5
  [42] makecharset::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::sid_rnd1
  [43] makecharset::$7 = makecharset::sid_rnd1_return#0 & $ff
  [44] if(makecharset::$7<=makecharset::s#0) goto makecharset::@7
  to:makecharset::@8
makecharset::@8: scope:[makecharset]  from makecharset::@12
  [45] makecharset::b#1 = makecharset::b#2 | makecharset::bittab[makecharset::ii#2]
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@12 makecharset::@8
  [46] makecharset::b#6 = phi( makecharset::@12/makecharset::b#2, makecharset::@8/makecharset::b#1 )
  [47] makecharset::ii#1 = ++ makecharset::ii#2
  to:makecharset::@5

void doplasma(byte* doplasma::screen)
doplasma: scope:[doplasma]  from main::@4 main::@5
  [48] doplasma::screen#13 = phi( main::@4/SCREEN1, main::@5/SCREEN2 )
  [48] c2B#26 = phi( main::@4/c2B#10, main::@5/c2B#3 )
  [48] c2A#26 = phi( main::@4/c2A#10, main::@5/c2A#3 )
  [48] c1B#11 = phi( main::@4/c1B#10, main::@5/c1B#3 )
  [48] c1A#11 = phi( main::@4/c1A#10, main::@5/c1A#3 )
  [49] doplasma::c1a#0 = c1A#11
  [50] doplasma::c1b#0 = c1B#11
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  [51] doplasma::c1b#2 = phi( doplasma/doplasma::c1b#0, doplasma::@2/doplasma::c1b#1 )
  [51] doplasma::c1a#2 = phi( doplasma/doplasma::c1a#0, doplasma::@2/doplasma::c1a#1 )
  [51] doplasma::i#2 = phi( doplasma/0, doplasma::@2/doplasma::i#1 )
  [52] if(doplasma::i#2<$19) goto doplasma::@2
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@1
  [53] c1A#3 = c1A#11 + 3
  [54] c1B#3 = c1B#11 - 5
  [55] doplasma::c2a#0 = c2A#26
  [56] doplasma::c2b#0 = c2B#26
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3 doplasma::@5
  [57] doplasma::c2b#2 = phi( doplasma::@3/doplasma::c2b#0, doplasma::@5/doplasma::c2b#1 )
  [57] doplasma::c2a#2 = phi( doplasma::@3/doplasma::c2a#0, doplasma::@5/doplasma::c2a#1 )
  [57] doplasma::i1#2 = phi( doplasma::@3/0, doplasma::@5/doplasma::i1#1 )
  [58] if(doplasma::i1#2<$28) goto doplasma::@5
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@4
  [59] c2A#3 = c2A#26 + 2
  [60] c2B#3 = c2B#26 - 3
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@10 doplasma::@6
  [61] doplasma::screen#6 = phi( doplasma::@10/doplasma::screen#2, doplasma::@6/doplasma::screen#13 )
  [61] doplasma::ii#2 = phi( doplasma::@10/doplasma::ii#1, doplasma::@6/0 )
  [62] if(doplasma::ii#2<$19) goto doplasma::@8
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  [63] return 
  to:@return
doplasma::@8: scope:[doplasma]  from doplasma::@7 doplasma::@9
  [64] doplasma::i2#2 = phi( doplasma::@9/doplasma::i2#1, doplasma::@7/0 )
  [65] if(doplasma::i2#2<$28) goto doplasma::@9
  to:doplasma::@10
doplasma::@10: scope:[doplasma]  from doplasma::@8
  [66] doplasma::screen#2 = doplasma::screen#6 + $28
  [67] doplasma::ii#1 = ++ doplasma::ii#2
  to:doplasma::@7
doplasma::@9: scope:[doplasma]  from doplasma::@8
  [68] doplasma::$6 = doplasma::xbuf[doplasma::i2#2] + doplasma::ybuf[doplasma::ii#2]
  [69] doplasma::screen#6[doplasma::i2#2] = doplasma::$6
  [70] doplasma::i2#1 = ++ doplasma::i2#2
  to:doplasma::@8
doplasma::@5: scope:[doplasma]  from doplasma::@4
  [71] doplasma::$3 = SINTABLE[doplasma::c2a#2] + SINTABLE[doplasma::c2b#2]
  [72] doplasma::xbuf[doplasma::i1#2] = doplasma::$3
  [73] doplasma::c2a#1 = doplasma::c2a#2 + 3
  [74] doplasma::c2b#1 = doplasma::c2b#2 + 7
  [75] doplasma::i1#1 = ++ doplasma::i1#2
  to:doplasma::@4
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [76] doplasma::$1 = SINTABLE[doplasma::c1a#2] + SINTABLE[doplasma::c1b#2]
  [77] doplasma::ybuf[doplasma::i#2] = doplasma::$1
  [78] doplasma::c1a#1 = doplasma::c1a#2 + 4
  [79] doplasma::c1b#1 = doplasma::c1b#2 + 9
  [80] doplasma::i#1 = ++ doplasma::i#2
  to:doplasma::@1

void print_cls()
print_cls: scope:[print_cls]  from makecharset::@11
  [81] phi()
  [82] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [83] return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from makecharset::@9
  [84] *print_char_cursor#19 = print_char::ch#0
  [85] print_char_cursor#0 = ++ print_char_cursor#19
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [86] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  [87] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [88] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [89] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [90] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [91] *memset::dst#2 = memset::c#0
  [92] memset::dst#1 = ++ memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
byte c1A
byte c1A#10 11.0
byte c1A#11 22.4
byte c1A#3 4.241379310344827
byte c1B
byte c1B#10 11.0
byte c1B#11 20.363636363636363
byte c1B#3 4.392857142857143
byte c2A
byte c2A#10 11.0
byte c2A#26 10.666666666666666
byte c2A#3 6.833333333333333
byte c2B
byte c2B#10 11.0
byte c2B#26 10.181818181818182
byte c2B#3 7.235294117647059
void doplasma(byte* doplasma::screen)
byte~ doplasma::$1 20002.0
byte~ doplasma::$3 20002.0
byte~ doplasma::$6 200002.0
byte doplasma::c1a
byte doplasma::c1a#0 101.0
byte doplasma::c1a#1 6667.333333333333
byte doplasma::c1a#2 7526.0
byte doplasma::c1b
byte doplasma::c1b#0 202.0
byte doplasma::c1b#1 10001.0
byte doplasma::c1b#2 6020.8
byte doplasma::c2a
byte doplasma::c2a#0 101.0
byte doplasma::c2a#1 6667.333333333333
byte doplasma::c2a#2 7526.0
byte doplasma::c2b
byte doplasma::c2b#0 202.0
byte doplasma::c2b#1 10001.0
byte doplasma::c2b#2 6020.8
byte doplasma::i
byte doplasma::i#1 20002.0
byte doplasma::i#2 6667.333333333333
byte doplasma::i1
byte doplasma::i1#1 20002.0
byte doplasma::i1#2 6667.333333333333
byte doplasma::i2
byte doplasma::i2#1 200002.0
byte doplasma::i2#2 125001.25
byte doplasma::ii
byte doplasma::ii#1 20002.0
byte doplasma::ii#2 16250.5
byte* doplasma::screen
byte* doplasma::screen#13 4.391304347826087
byte* doplasma::screen#2 10001.0
byte* doplasma::screen#6 17157.714285714286
void main()
byte* main::col
byte* main::col#1 16.5
byte* main::col#2 16.5
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
byte* main::toD0182_screen
void makecharset(byte* makecharset::charset)
word~ makecharset::$10 2002.0
word~ makecharset::$11 2002.0
byte~ makecharset::$12 202.0
byte*~ makecharset::$16 2002.0
byte~ makecharset::$3 202.0
byte~ makecharset::$7 20002.0
byte makecharset::b
byte makecharset::b#1 20002.0
byte makecharset::b#2 3875.5
byte makecharset::b#6 15001.5
word makecharset::c
word makecharset::c#1 202.0
word makecharset::c#2 62.75
byte* makecharset::charset
byte makecharset::i
byte makecharset::i#1 2002.0
byte makecharset::i#2 286.0
byte makecharset::ii
byte makecharset::ii#1 20002.0
byte makecharset::ii#2 5714.857142857143
byte makecharset::s
byte makecharset::s#0 631.375
byte makecharset::sid_rnd1_return
byte makecharset::sid_rnd1_return#0 20002.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 20002.0
byte* memset::dst#2 13334.666666666666
byte* memset::end
word memset::num
void* memset::return
void* memset::str
void print_char(byte print_char::ch)
byte print_char::ch
byte* print_char_cursor
byte* print_char_cursor#0 367.33333333333337
byte* print_char_cursor#19 95.82608695652173
byte* print_char_cursor#31 151.5
void print_cls()
byte* print_line_cursor
byte* print_screen

Initial phi equivalence classes
[ main::col#2 main::col#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ]
[ makecharset::i#2 makecharset::i#1 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
[ c1A#11 c1A#10 c1A#3 ]
[ c1B#11 c1B#10 c1B#3 ]
[ c2A#26 c2A#10 c2A#3 ]
[ c2B#26 c2B#10 c2B#3 ]
[ doplasma::i#2 doplasma::i#1 ]
[ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
[ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
[ doplasma::i1#2 doplasma::i1#1 ]
[ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
[ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
[ doplasma::ii#2 doplasma::ii#1 ]
[ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ]
[ doplasma::i2#2 doplasma::i2#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable makecharset::$3 to live range equivalence class [ makecharset::$3 ]
Added variable makecharset::s#0 to live range equivalence class [ makecharset::s#0 ]
Added variable makecharset::$12 to live range equivalence class [ makecharset::$12 ]
Added variable makecharset::$10 to live range equivalence class [ makecharset::$10 ]
Added variable makecharset::$11 to live range equivalence class [ makecharset::$11 ]
Added variable makecharset::$16 to live range equivalence class [ makecharset::$16 ]
Added variable makecharset::sid_rnd1_return#0 to live range equivalence class [ makecharset::sid_rnd1_return#0 ]
Added variable makecharset::$7 to live range equivalence class [ makecharset::$7 ]
Added variable doplasma::$6 to live range equivalence class [ doplasma::$6 ]
Added variable doplasma::$3 to live range equivalence class [ doplasma::$3 ]
Added variable doplasma::$1 to live range equivalence class [ doplasma::$1 ]
Complete equivalence classes
[ main::col#2 main::col#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ]
[ makecharset::i#2 makecharset::i#1 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
[ c1A#11 c1A#10 c1A#3 ]
[ c1B#11 c1B#10 c1B#3 ]
[ c2A#26 c2A#10 c2A#3 ]
[ c2B#26 c2B#10 c2B#3 ]
[ doplasma::i#2 doplasma::i#1 ]
[ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
[ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
[ doplasma::i1#2 doplasma::i1#1 ]
[ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
[ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
[ doplasma::ii#2 doplasma::ii#1 ]
[ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ]
[ doplasma::i2#2 doplasma::i2#1 ]
[ memset::dst#2 memset::dst#1 ]
[ makecharset::$3 ]
[ makecharset::s#0 ]
[ makecharset::$12 ]
[ makecharset::$10 ]
[ makecharset::$11 ]
[ makecharset::$16 ]
[ makecharset::sid_rnd1_return#0 ]
[ makecharset::$7 ]
[ doplasma::$6 ]
[ doplasma::$3 ]
[ doplasma::$1 ]
Allocated zp[2]:2 [ main::col#2 main::col#1 ]
Allocated zp[2]:4 [ makecharset::c#2 makecharset::c#1 ]
Allocated zp[2]:6 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ]
Allocated zp[1]:8 [ makecharset::i#2 makecharset::i#1 ]
Allocated zp[1]:9 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated zp[1]:10 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Allocated zp[1]:11 [ c1A#11 c1A#10 c1A#3 ]
Allocated zp[1]:12 [ c1B#11 c1B#10 c1B#3 ]
Allocated zp[1]:13 [ c2A#26 c2A#10 c2A#3 ]
Allocated zp[1]:14 [ c2B#26 c2B#10 c2B#3 ]
Allocated zp[1]:15 [ doplasma::i#2 doplasma::i#1 ]
Allocated zp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Allocated zp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Allocated zp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ]
Allocated zp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Allocated zp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Allocated zp[1]:21 [ doplasma::ii#2 doplasma::ii#1 ]
Allocated zp[2]:22 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ]
Allocated zp[1]:24 [ doplasma::i2#2 doplasma::i2#1 ]
Allocated zp[2]:25 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:27 [ makecharset::$3 ]
Allocated zp[1]:28 [ makecharset::s#0 ]
Allocated zp[1]:29 [ makecharset::$12 ]
Allocated zp[2]:30 [ makecharset::$10 ]
Allocated zp[2]:32 [ makecharset::$11 ]
Allocated zp[2]:34 [ makecharset::$16 ]
Allocated zp[1]:36 [ makecharset::sid_rnd1_return#0 ]
Allocated zp[1]:37 [ makecharset::$7 ]
Allocated zp[1]:38 [ doplasma::$6 ]
Allocated zp[1]:39 [ doplasma::$3 ]
Allocated zp[1]:40 [ doplasma::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLUE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLUE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *main::col#2 = BLACK [ main::col#2 ] (  [ main::col#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] if(main::col#1!=COLS+$3e8+1) goto main::@1 [ main::col#1 ] (  [ main::col#1 ] { }  ) always clobbers reg byte a 
Statement [13] *D018 = main::toD0181_return#0 [ c1A#3 c1B#3 c2A#3 c2B#3 ] (  [ c1A#3 c1B#3 c2A#3 c2B#3 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ c1A#11 c1A#10 c1A#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ c1B#11 c1B#10 c1B#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ c2A#26 c2A#10 c2A#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ c2B#26 c2B#10 c2B#3 ]
Statement [16] *D018 = main::toD0182_return#0 [ c1A#3 c1B#3 c2A#3 c2B#3 ] (  [ c1A#3 c1B#3 c2A#3 c2B#3 ] { }  ) always clobbers reg byte a 
Statement [18] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff [ ] ( makecharset:8 [ ] { }  ) always clobbers reg byte a 
Statement [19] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE [ ] ( makecharset:8 [ ] { }  ) always clobbers reg byte a 
Statement [23] if(makecharset::c#2<$100) goto makecharset::@2 [ makecharset::c#2 print_char_cursor#19 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 ] { }  ) always clobbers reg byte a 
Statement [29] makecharset::$12 = makecharset::c#2 & 7 [ makecharset::c#2 print_char_cursor#19 makecharset::$12 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::$12 ] { }  ) always clobbers reg byte a 
Statement [37] makecharset::$10 = makecharset::c#2 << 3 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$10 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$10 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ makecharset::s#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Statement [38] makecharset::$11 = makecharset::$10 + makecharset::i#2 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$11 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$11 ] { }  ) always clobbers reg byte a 
Statement [39] makecharset::$16 = CHARSET + makecharset::$11 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$16 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$16 ] { }  ) always clobbers reg byte a 
Statement [40] *makecharset::$16 = makecharset::b#2 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:28 [ makecharset::s#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ makecharset::i#2 makecharset::i#1 ]
Statement [45] makecharset::b#1 = makecharset::b#2 | makecharset::bittab[makecharset::ii#2] [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::ii#2 makecharset::b#1 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::ii#2 makecharset::b#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ makecharset::ii#2 makecharset::ii#1 ]
Statement [53] c1A#3 = c1A#11 + 3 [ c1A#3 c1B#11 c2A#26 c2B#26 doplasma::screen#13 ] ( doplasma:11 [ c1A#3 c1B#11 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#11 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [54] c1B#3 = c1B#11 - 5 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [60] c2B#3 = c2B#26 - 3 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::screen#13 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::screen#13 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::screen#13 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [66] doplasma::screen#2 = doplasma::screen#6 + $28 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#2 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#2 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#2 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ doplasma::ii#2 doplasma::ii#1 ]
Statement [68] doplasma::$6 = doplasma::xbuf[doplasma::i2#2] + doplasma::ybuf[doplasma::ii#2] [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#6 doplasma::i2#2 doplasma::$6 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#6 doplasma::i2#2 doplasma::$6 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#6 doplasma::i2#2 doplasma::$6 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ doplasma::i2#2 doplasma::i2#1 ]
Statement [71] doplasma::$3 = SINTABLE[doplasma::c2a#2] + SINTABLE[doplasma::c2b#2] [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#2 doplasma::c2b#2 doplasma::$3 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#2 doplasma::c2b#2 doplasma::$3 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#2 doplasma::c2b#2 doplasma::$3 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Statement [73] doplasma::c2a#1 = doplasma::c2a#2 + 3 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2b#2 doplasma::c2a#1 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2b#2 doplasma::c2a#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2b#2 doplasma::c2a#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [74] doplasma::c2b#1 = doplasma::c2b#2 + 7 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [76] doplasma::$1 = SINTABLE[doplasma::c1a#2] + SINTABLE[doplasma::c1b#2] [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#2 doplasma::c1b#2 doplasma::$1 ] ( doplasma:11 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#2 doplasma::c1b#2 doplasma::$1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#2 doplasma::c1b#2 doplasma::$1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:15 [ doplasma::i#2 doplasma::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Statement [78] doplasma::c1a#1 = doplasma::c1a#2 + 4 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1b#2 doplasma::c1a#1 ] ( doplasma:11 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1b#2 doplasma::c1a#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1b#2 doplasma::c1a#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [79] doplasma::c1b#1 = doplasma::c1b#2 + 9 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] ( doplasma:11 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [84] *print_char_cursor#19 = print_char::ch#0 [ print_char_cursor#19 ] ( makecharset:8::print_char:32 [ makecharset::c#2 print_char_cursor#19 ] { }  ) always clobbers reg byte a reg byte y 
Statement [89] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( makecharset:8::print_cls:21::memset:82 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [91] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( makecharset:8::print_cls:21::memset:82 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLUE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLUE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *main::col#2 = BLACK [ main::col#2 ] (  [ main::col#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] if(main::col#1!=COLS+$3e8+1) goto main::@1 [ main::col#1 ] (  [ main::col#1 ] { }  ) always clobbers reg byte a 
Statement [13] *D018 = main::toD0181_return#0 [ c1A#3 c1B#3 c2A#3 c2B#3 ] (  [ c1A#3 c1B#3 c2A#3 c2B#3 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [16] *D018 = main::toD0182_return#0 [ c1A#3 c1B#3 c2A#3 c2B#3 ] (  [ c1A#3 c1B#3 c2A#3 c2B#3 ] { }  ) always clobbers reg byte a 
Statement [18] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff [ ] ( makecharset:8 [ ] { }  ) always clobbers reg byte a 
Statement [19] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE [ ] ( makecharset:8 [ ] { }  ) always clobbers reg byte a 
Statement [23] if(makecharset::c#2<$100) goto makecharset::@2 [ makecharset::c#2 print_char_cursor#19 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 ] { }  ) always clobbers reg byte a 
Statement [29] makecharset::$12 = makecharset::c#2 & 7 [ makecharset::c#2 print_char_cursor#19 makecharset::$12 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::$12 ] { }  ) always clobbers reg byte a 
Statement [37] makecharset::$10 = makecharset::c#2 << 3 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$10 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$10 ] { }  ) always clobbers reg byte a 
Statement [38] makecharset::$11 = makecharset::$10 + makecharset::i#2 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$11 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$11 ] { }  ) always clobbers reg byte a 
Statement [39] makecharset::$16 = CHARSET + makecharset::$11 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$16 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::b#2 makecharset::$16 ] { }  ) always clobbers reg byte a 
Statement [40] *makecharset::$16 = makecharset::b#2 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [45] makecharset::b#1 = makecharset::b#2 | makecharset::bittab[makecharset::ii#2] [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::ii#2 makecharset::b#1 ] ( makecharset:8 [ makecharset::c#2 print_char_cursor#19 makecharset::s#0 makecharset::i#2 makecharset::ii#2 makecharset::b#1 ] { }  ) always clobbers reg byte a 
Statement [53] c1A#3 = c1A#11 + 3 [ c1A#3 c1B#11 c2A#26 c2B#26 doplasma::screen#13 ] ( doplasma:11 [ c1A#3 c1B#11 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#11 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [54] c1B#3 = c1B#11 - 5 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [60] c2B#3 = c2B#26 - 3 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::screen#13 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::screen#13 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::screen#13 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [66] doplasma::screen#2 = doplasma::screen#6 + $28 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#2 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#2 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#2 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [68] doplasma::$6 = doplasma::xbuf[doplasma::i2#2] + doplasma::ybuf[doplasma::ii#2] [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#6 doplasma::i2#2 doplasma::$6 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#6 doplasma::i2#2 doplasma::$6 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#3 c2B#3 doplasma::ii#2 doplasma::screen#6 doplasma::i2#2 doplasma::$6 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [71] doplasma::$3 = SINTABLE[doplasma::c2a#2] + SINTABLE[doplasma::c2b#2] [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#2 doplasma::c2b#2 doplasma::$3 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#2 doplasma::c2b#2 doplasma::$3 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#2 doplasma::c2b#2 doplasma::$3 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [73] doplasma::c2a#1 = doplasma::c2a#2 + 3 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2b#2 doplasma::c2a#1 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2b#2 doplasma::c2a#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2b#2 doplasma::c2a#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [74] doplasma::c2b#1 = doplasma::c2b#2 + 7 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] ( doplasma:11 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#3 c1B#3 c2A#26 c2B#26 doplasma::screen#13 doplasma::i1#2 doplasma::c2a#1 doplasma::c2b#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [76] doplasma::$1 = SINTABLE[doplasma::c1a#2] + SINTABLE[doplasma::c1b#2] [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#2 doplasma::c1b#2 doplasma::$1 ] ( doplasma:11 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#2 doplasma::c1b#2 doplasma::$1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#2 doplasma::c1b#2 doplasma::$1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [78] doplasma::c1a#1 = doplasma::c1a#2 + 4 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1b#2 doplasma::c1a#1 ] ( doplasma:11 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1b#2 doplasma::c1a#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1b#2 doplasma::c1a#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [79] doplasma::c1b#1 = doplasma::c1b#2 + 9 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] ( doplasma:11 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] { { c1A#10 = c1A#11 } { c1B#10 = c1B#11 } { c2A#10 = c2A#26 } { c2B#10 = c2B#26 } }  doplasma:14 [ c1A#11 c1B#11 c2A#26 c2B#26 doplasma::screen#13 doplasma::i#2 doplasma::c1a#1 doplasma::c1b#1 ] { { c1A#11 = c1A#3 } { c1B#11 = c1B#3 } { c2A#26 = c2A#3 } { c2B#26 = c2B#3 } }  ) always clobbers reg byte a 
Statement [84] *print_char_cursor#19 = print_char::ch#0 [ print_char_cursor#19 ] ( makecharset:8::print_char:32 [ makecharset::c#2 print_char_cursor#19 ] { }  ) always clobbers reg byte a reg byte y 
Statement [89] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( makecharset:8::print_cls:21::memset:82 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [91] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( makecharset:8::print_cls:21::memset:82 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::col#2 main::col#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ makecharset::c#2 makecharset::c#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ makecharset::i#2 makecharset::i#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ makecharset::ii#2 makecharset::ii#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ c1A#11 c1A#10 c1A#3 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ c1B#11 c1B#10 c1B#3 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ c2A#26 c2A#10 c2A#3 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ c2B#26 c2B#10 c2B#3 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ doplasma::i#2 doplasma::i#1 ] : zp[1]:15 , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] : zp[1]:17 , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ doplasma::ii#2 doplasma::ii#1 ] : zp[1]:21 , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ doplasma::i2#2 doplasma::i2#1 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ memset::dst#2 memset::dst#1 ] : zp[2]:25 , 
Potential registers zp[1]:27 [ makecharset::$3 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ makecharset::s#0 ] : zp[1]:28 , reg byte x , 
Potential registers zp[1]:29 [ makecharset::$12 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ makecharset::$10 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ makecharset::$11 ] : zp[2]:32 , 
Potential registers zp[2]:34 [ makecharset::$16 ] : zp[2]:34 , 
Potential registers zp[1]:36 [ makecharset::sid_rnd1_return#0 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ makecharset::$7 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ doplasma::$6 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:39 [ doplasma::$3 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:40 [ doplasma::$1 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [doplasma] 325,003.25: zp[1]:24 [ doplasma::i2#2 doplasma::i2#1 ] 200,002: zp[1]:38 [ doplasma::$6 ] 36,252.5: zp[1]:21 [ doplasma::ii#2 doplasma::ii#1 ] 27,163.11: zp[2]:22 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ] 26,669.33: zp[1]:15 [ doplasma::i#2 doplasma::i#1 ] 26,669.33: zp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ] 20,002: zp[1]:39 [ doplasma::$3 ] 20,002: zp[1]:40 [ doplasma::$1 ] 16,223.8: zp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] 16,223.8: zp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 14,294.33: zp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] 14,294.33: zp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 
Uplift Scope [makecharset] 38,879: zp[1]:10 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] 25,716.86: zp[1]:9 [ makecharset::ii#2 makecharset::ii#1 ] 20,002: zp[1]:36 [ makecharset::sid_rnd1_return#0 ] 20,002: zp[1]:37 [ makecharset::$7 ] 2,288: zp[1]:8 [ makecharset::i#2 makecharset::i#1 ] 2,002: zp[2]:30 [ makecharset::$10 ] 2,002: zp[2]:32 [ makecharset::$11 ] 2,002: zp[2]:34 [ makecharset::$16 ] 631.38: zp[1]:28 [ makecharset::s#0 ] 264.75: zp[2]:4 [ makecharset::c#2 makecharset::c#1 ] 202: zp[1]:27 [ makecharset::$3 ] 202: zp[1]:29 [ makecharset::$12 ] 
Uplift Scope [memset] 33,336.67: zp[2]:25 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [] 614.66: zp[2]:6 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ] 37.64: zp[1]:11 [ c1A#11 c1A#10 c1A#3 ] 35.76: zp[1]:12 [ c1B#11 c1B#10 c1B#3 ] 28.5: zp[1]:13 [ c2A#26 c2A#10 c2A#3 ] 28.42: zp[1]:14 [ c2B#26 c2B#10 c2B#3 ] 
Uplift Scope [main] 33: zp[2]:2 [ main::col#2 main::col#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_char] 
Uplift Scope [print_cls] 

Uplifting [doplasma] best 144144 combination reg byte y [ doplasma::i2#2 doplasma::i2#1 ] reg byte a [ doplasma::$6 ] reg byte x [ doplasma::ii#2 doplasma::ii#1 ] zp[2]:22 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ] zp[1]:15 [ doplasma::i#2 doplasma::i#1 ] zp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ] zp[1]:39 [ doplasma::$3 ] zp[1]:40 [ doplasma::$1 ] zp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] zp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] zp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] zp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 
Limited combination testing to 100 combinations of 419904 possible.
Uplifting [makecharset] best 121044 combination reg byte y [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] reg byte x [ makecharset::ii#2 makecharset::ii#1 ] reg byte a [ makecharset::sid_rnd1_return#0 ] zp[1]:37 [ makecharset::$7 ] zp[1]:8 [ makecharset::i#2 makecharset::i#1 ] zp[2]:30 [ makecharset::$10 ] zp[2]:32 [ makecharset::$11 ] zp[2]:34 [ makecharset::$16 ] zp[1]:28 [ makecharset::s#0 ] zp[2]:4 [ makecharset::c#2 makecharset::c#1 ] zp[1]:27 [ makecharset::$3 ] zp[1]:29 [ makecharset::$12 ] 
Limited combination testing to 100 combinations of 9216 possible.
Uplifting [memset] best 121044 combination zp[2]:25 [ memset::dst#2 memset::dst#1 ] 
Uplifting [] best 121044 combination zp[2]:6 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ] zp[1]:11 [ c1A#11 c1A#10 c1A#3 ] zp[1]:12 [ c1B#11 c1B#10 c1B#3 ] zp[1]:13 [ c2A#26 c2A#10 c2A#3 ] zp[1]:14 [ c2B#26 c2B#10 c2B#3 ] 
Uplifting [main] best 121044 combination zp[2]:2 [ main::col#2 main::col#1 ] 
Uplifting [MOS6526_CIA] best 121044 combination 
Uplifting [MOS6569_VICII] best 121044 combination 
Uplifting [MOS6581_SID] best 121044 combination 
Uplifting [RADIX] best 121044 combination 
Uplifting [print_char] best 121044 combination 
Uplifting [print_cls] best 121044 combination 
Attempting to uplift remaining variables inzp[1]:15 [ doplasma::i#2 doplasma::i#1 ]
Uplifting [doplasma] best 121044 combination zp[1]:15 [ doplasma::i#2 doplasma::i#1 ] 
Attempting to uplift remaining variables inzp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ]
Uplifting [doplasma] best 121044 combination zp[1]:18 [ doplasma::i1#2 doplasma::i1#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ makecharset::$7 ]
Uplifting [makecharset] best 121044 combination zp[1]:37 [ makecharset::$7 ] 
Attempting to uplift remaining variables inzp[1]:39 [ doplasma::$3 ]
Uplifting [doplasma] best 120444 combination reg byte a [ doplasma::$3 ] 
Attempting to uplift remaining variables inzp[1]:40 [ doplasma::$1 ]
Uplifting [doplasma] best 119844 combination reg byte a [ doplasma::$1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Uplifting [doplasma] best 119844 combination zp[1]:17 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ] 
Attempting to uplift remaining variables inzp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Uplifting [doplasma] best 119844 combination zp[1]:20 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ] 
Attempting to uplift remaining variables inzp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Uplifting [doplasma] best 119844 combination zp[1]:16 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ] 
Attempting to uplift remaining variables inzp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Uplifting [doplasma] best 119844 combination zp[1]:19 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ] 
Attempting to uplift remaining variables inzp[1]:8 [ makecharset::i#2 makecharset::i#1 ]
Uplifting [makecharset] best 119844 combination zp[1]:8 [ makecharset::i#2 makecharset::i#1 ] 
Attempting to uplift remaining variables inzp[1]:28 [ makecharset::s#0 ]
Uplifting [makecharset] best 119844 combination zp[1]:28 [ makecharset::s#0 ] 
Attempting to uplift remaining variables inzp[1]:27 [ makecharset::$3 ]
Uplifting [makecharset] best 119784 combination reg byte x [ makecharset::$3 ] 
Attempting to uplift remaining variables inzp[1]:29 [ makecharset::$12 ]
Uplifting [makecharset] best 119724 combination reg byte a [ makecharset::$12 ] 
Attempting to uplift remaining variables inzp[1]:11 [ c1A#11 c1A#10 c1A#3 ]
Uplifting [] best 119724 combination zp[1]:11 [ c1A#11 c1A#10 c1A#3 ] 
Attempting to uplift remaining variables inzp[1]:12 [ c1B#11 c1B#10 c1B#3 ]
Uplifting [] best 119724 combination zp[1]:12 [ c1B#11 c1B#10 c1B#3 ] 
Attempting to uplift remaining variables inzp[1]:13 [ c2A#26 c2A#10 c2A#3 ]
Uplifting [] best 119724 combination zp[1]:13 [ c2A#26 c2A#10 c2A#3 ] 
Attempting to uplift remaining variables inzp[1]:14 [ c2B#26 c2B#10 c2B#3 ]
Uplifting [] best 119724 combination zp[1]:14 [ c2B#26 c2B#10 c2B#3 ] 
Coalescing zero page register [ zp[2]:30 [ makecharset::$10 ] ] with [ zp[2]:32 [ makecharset::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ makecharset::$10 makecharset::$11 ] ] with [ zp[2]:34 [ makecharset::$16 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 ] ] with [ zp[2]:2 [ main::col#2 main::col#1 ] ]
Coalescing zero page register [ zp[1]:11 [ c1A#11 c1A#10 c1A#3 ] ] with [ zp[1]:8 [ makecharset::i#2 makecharset::i#1 ] ]
Coalescing zero page register [ zp[2]:22 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 ] ] with [ zp[2]:4 [ makecharset::c#2 makecharset::c#1 ] ]
Coalescing zero page register [ zp[1]:28 [ makecharset::s#0 ] ] with [ zp[1]:12 [ c1B#11 c1B#10 c1B#3 ] ]
Coalescing zero page register [ zp[2]:30 [ makecharset::$10 makecharset::$11 makecharset::$16 ] ] with [ zp[2]:25 [ memset::dst#2 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:37 [ makecharset::$7 ] ] with [ zp[1]:13 [ c2A#26 c2A#10 c2A#3 ] ]
Allocated (was zp[2]:6) zp[2]:2 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 main::col#2 main::col#1 ]
Allocated (was zp[1]:11) zp[1]:4 [ c1A#11 c1A#10 c1A#3 makecharset::i#2 makecharset::i#1 ]
Allocated (was zp[1]:14) zp[1]:5 [ c2B#26 c2B#10 c2B#3 ]
Allocated (was zp[1]:15) zp[1]:6 [ doplasma::i#2 doplasma::i#1 ]
Allocated (was zp[1]:16) zp[1]:7 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
Allocated (was zp[1]:17) zp[1]:8 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
Allocated (was zp[1]:18) zp[1]:9 [ doplasma::i1#2 doplasma::i1#1 ]
Allocated (was zp[1]:19) zp[1]:10 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
Allocated (was zp[1]:20) zp[1]:11 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
Allocated (was zp[2]:22) zp[2]:12 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 makecharset::c#2 makecharset::c#1 ]
Allocated (was zp[1]:28) zp[1]:14 [ makecharset::s#0 c1B#11 c1B#10 c1B#3 ]
Allocated (was zp[2]:30) zp[2]:15 [ makecharset::$10 makecharset::$11 makecharset::$16 memset::dst#2 memset::dst#1 ]
Allocated (was zp[1]:37) zp[1]:17 [ makecharset::$7 c2A#26 c2A#10 c2A#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A KickC version of the plasma routine from the CC65 samples
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .label D018 = $d018
  // The SID MOS 6581/8580
  .label SID = $d400
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  .label SCREEN1 = $2800
  .label SCREEN2 = $2c00
  .label CHARSET = $2000
  .label print_screen = $400
  .label print_char_cursor = 2
  // Plasma state variables
  .label c1A = 4
  .label c1B = $e
  .label c2A = $11
  .label c2B = 5
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
    // asm { sei  }
    sei
    // [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [3] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [3] phi main::col#2 = COLS [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    jmp __b1
    // [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [3] phi main::col#2 = main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [4] *main::col#2 = BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
    // [5] main::col#1 = ++ main::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [6] if(main::col#1!=COLS+$3e8+1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z col+1
    cmp #>COLS+$3e8+1
    bne __b1_from___b1
    lda.z col
    cmp #<COLS+$3e8+1
    bne __b1_from___b1
    // [7] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [8] call makecharset 
    // [17] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from___b2:
    jsr makecharset
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [9] phi c2B#10 = 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c2B
    // [9] phi c2A#10 = 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c2A
    // [9] phi c1B#10 = 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z c1B
    // [9] phi c1A#10 = 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c1A
    jmp __b3
  // Show double-buffered plasma
    // main::@3
  __b3:
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [11] call doplasma 
    // [48] phi from main::@4 to doplasma [phi:main::@4->doplasma]
  doplasma_from___b4:
    // [48] phi doplasma::screen#13 = SCREEN1 [phi:main::@4->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z doplasma.screen
    lda #>SCREEN1
    sta.z doplasma.screen+1
    // [48] phi c2B#26 = c2B#10 [phi:main::@4->doplasma#1] -- register_copy 
    // [48] phi c2A#26 = c2A#10 [phi:main::@4->doplasma#2] -- register_copy 
    // [48] phi c1B#11 = c1B#10 [phi:main::@4->doplasma#3] -- register_copy 
    // [48] phi c1A#11 = c1A#10 [phi:main::@4->doplasma#4] -- register_copy 
    jsr doplasma
    // [12] phi from main::@4 to main::toD0181 [phi:main::@4->main::toD0181]
  toD0181_from___b4:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b5
    // main::@5
  __b5:
    // [13] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [14] call doplasma 
    // [48] phi from main::@5 to doplasma [phi:main::@5->doplasma]
  doplasma_from___b5:
    // [48] phi doplasma::screen#13 = SCREEN2 [phi:main::@5->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z doplasma.screen
    lda #>SCREEN2
    sta.z doplasma.screen+1
    // [48] phi c2B#26 = c2B#3 [phi:main::@5->doplasma#1] -- register_copy 
    // [48] phi c2A#26 = c2A#3 [phi:main::@5->doplasma#2] -- register_copy 
    // [48] phi c1B#11 = c1B#3 [phi:main::@5->doplasma#3] -- register_copy 
    // [48] phi c1A#11 = c1A#3 [phi:main::@5->doplasma#4] -- register_copy 
    jsr doplasma
    // [15] phi from main::@5 to main::toD0182 [phi:main::@5->main::toD0182]
  toD0182_from___b5:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b6
    // main::@6
  __b6:
    // [16] *D018 = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    // [9] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  __b3_from___b6:
    // [9] phi c2B#10 = c2B#3 [phi:main::@6->main::@3#0] -- register_copy 
    // [9] phi c2A#10 = c2A#3 [phi:main::@6->main::@3#1] -- register_copy 
    // [9] phi c1B#10 = c1B#3 [phi:main::@6->main::@3#2] -- register_copy 
    // [9] phi c1A#10 = c1A#3 [phi:main::@6->main::@3#3] -- register_copy 
    jmp __b3
}
  // makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label __7 = $11
    .label __10 = $f
    .label __11 = $f
    .label s = $e
    .label i = 4
    .label c = $c
    .label __16 = $f
    jmp sid_rnd_init1
    // makecharset::sid_rnd_init1
  sid_rnd_init1:
    // [18] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // [19] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [20] phi from makecharset::sid_rnd_init1 to makecharset::@11 [phi:makecharset::sid_rnd_init1->makecharset::@11]
  __b11_from_sid_rnd_init1:
    jmp __b11
    // makecharset::@11
  __b11:
    // [21] call print_cls 
    // [81] phi from makecharset::@11 to print_cls [phi:makecharset::@11->print_cls]
  print_cls_from___b11:
    jsr print_cls
    // [22] phi from makecharset::@11 to makecharset::@1 [phi:makecharset::@11->makecharset::@1]
  __b1_from___b11:
    // [22] phi print_char_cursor#19 = print_screen#0 [phi:makecharset::@11->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [22] phi makecharset::c#2 = 0 [phi:makecharset::@11->makecharset::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z c
    lda #>0
    sta.z c+1
    jmp __b1
    // makecharset::@1
  __b1:
    // [23] if(makecharset::c#2<$100) goto makecharset::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$100
    bcc __b2
    bne !+
    lda.z c
    cmp #<$100
    bcc __b2
  !:
    jmp __breturn
    // makecharset::@return
  __breturn:
    // [24] return 
    rts
    // makecharset::@2
  __b2:
    // [25] makecharset::$3 = < makecharset::c#2 -- vbuxx=_lo_vwuz1 
    ldx.z c
    // [26] makecharset::s#0 = SINTABLE[makecharset::$3] -- vbuz1=pbuc1_derefidx_vbuxx 
    lda SINTABLE,x
    sta.z s
    // [27] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
  __b3_from___b2:
    // [27] phi makecharset::i#2 = 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // makecharset::@3
  __b3:
    // [28] if(makecharset::i#2<8) goto makecharset::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b5_from___b3
    jmp __b4
    // makecharset::@4
  __b4:
    // [29] makecharset::$12 = makecharset::c#2 & 7 -- vbuaa=vwuz1_band_vbuc1 
    lda #7
    and.z c
    // [30] if(makecharset::$12!=0) goto makecharset::@10 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b10_from___b4
    // [31] phi from makecharset::@4 to makecharset::@9 [phi:makecharset::@4->makecharset::@9]
  __b9_from___b4:
    jmp __b9
    // makecharset::@9
  __b9:
    // [32] call print_char 
    jsr print_char
    // [33] phi from makecharset::@4 makecharset::@9 to makecharset::@10 [phi:makecharset::@4/makecharset::@9->makecharset::@10]
  __b10_from___b4:
  __b10_from___b9:
    // [33] phi print_char_cursor#31 = print_char_cursor#19 [phi:makecharset::@4/makecharset::@9->makecharset::@10#0] -- register_copy 
    jmp __b10
    // makecharset::@10
  __b10:
    // [34] makecharset::c#1 = ++ makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [22] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
  __b1_from___b10:
    // [22] phi print_char_cursor#19 = print_char_cursor#31 [phi:makecharset::@10->makecharset::@1#0] -- register_copy 
    // [22] phi makecharset::c#2 = makecharset::c#1 [phi:makecharset::@10->makecharset::@1#1] -- register_copy 
    jmp __b1
    // [35] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
  __b5_from___b3:
    // [35] phi makecharset::b#2 = 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuyy=vbuc1 
    ldy #0
    // [35] phi makecharset::ii#2 = 0 [phi:makecharset::@3->makecharset::@5#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // makecharset::@5
  __b5:
    // [36] if(makecharset::ii#2<8) goto makecharset::sid_rnd1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc sid_rnd1
    jmp __b6
    // makecharset::@6
  __b6:
    // [37] makecharset::$10 = makecharset::c#2 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z c
    asl
    sta.z __10
    lda.z c+1
    rol
    sta.z __10+1
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    // [38] makecharset::$11 = makecharset::$10 + makecharset::i#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __11
    sta.z __11
    bcc !+
    inc.z __11+1
  !:
    // [39] makecharset::$16 = CHARSET + makecharset::$11 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __16
    adc #<CHARSET
    sta.z __16
    lda.z __16+1
    adc #>CHARSET
    sta.z __16+1
    // [40] *makecharset::$16 = makecharset::b#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__16),y
    // [41] makecharset::i#1 = ++ makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [27] phi from makecharset::@6 to makecharset::@3 [phi:makecharset::@6->makecharset::@3]
  __b3_from___b6:
    // [27] phi makecharset::i#2 = makecharset::i#1 [phi:makecharset::@6->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::sid_rnd1
  sid_rnd1:
    // [42] makecharset::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    jmp __b12
    // makecharset::@12
  __b12:
    // [43] makecharset::$7 = makecharset::sid_rnd1_return#0 & $ff -- vbuz1=vbuaa_band_vbuc1 
    and #$ff
    sta.z __7
    // [44] if(makecharset::$7<=makecharset::s#0) goto makecharset::@7 -- vbuz1_le_vbuz2_then_la1 
    lda.z s
    cmp.z __7
    bcs __b7_from___b12
    jmp __b8
    // makecharset::@8
  __b8:
    // [45] makecharset::b#1 = makecharset::b#2 | makecharset::bittab[makecharset::ii#2] -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
    // [46] phi from makecharset::@12 makecharset::@8 to makecharset::@7 [phi:makecharset::@12/makecharset::@8->makecharset::@7]
  __b7_from___b12:
  __b7_from___b8:
    // [46] phi makecharset::b#6 = makecharset::b#2 [phi:makecharset::@12/makecharset::@8->makecharset::@7#0] -- register_copy 
    jmp __b7
    // makecharset::@7
  __b7:
    // [47] makecharset::ii#1 = ++ makecharset::ii#2 -- vbuxx=_inc_vbuxx 
    inx
    // [35] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
  __b5_from___b7:
    // [35] phi makecharset::b#2 = makecharset::b#6 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    // [35] phi makecharset::ii#2 = makecharset::ii#1 [phi:makecharset::@7->makecharset::@5#1] -- register_copy 
    jmp __b5
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // doplasma
// Render plasma to the passed screen
// doplasma(byte* zp($c) screen)
doplasma: {
    .label c1a = 7
    .label c1b = 8
    .label i = 6
    .label c2a = $a
    .label c2b = $b
    .label i1 = 9
    .label screen = $c
    // [49] doplasma::c1a#0 = c1A#11 -- vbuz1=vbuz2 
    lda.z c1A
    sta.z c1a
    // [50] doplasma::c1b#0 = c1B#11 -- vbuz1=vbuz2 
    lda.z c1B
    sta.z c1b
    // [51] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
  __b1_from_doplasma:
    // [51] phi doplasma::c1b#2 = doplasma::c1b#0 [phi:doplasma->doplasma::@1#0] -- register_copy 
    // [51] phi doplasma::c1a#2 = doplasma::c1a#0 [phi:doplasma->doplasma::@1#1] -- register_copy 
    // [51] phi doplasma::i#2 = 0 [phi:doplasma->doplasma::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // doplasma::@1
  __b1:
    // [52] if(doplasma::i#2<$19) goto doplasma::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$19
    bcc __b2
    jmp __b3
    // doplasma::@3
  __b3:
    // [53] c1A#3 = c1A#11 + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1A
    axs #-[3]
    stx.z c1A
    // [54] c1B#3 = c1B#11 - 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z c1B
    axs #5
    stx.z c1B
    // [55] doplasma::c2a#0 = c2A#26 -- vbuz1=vbuz2 
    lda.z c2A
    sta.z c2a
    // [56] doplasma::c2b#0 = c2B#26 -- vbuz1=vbuz2 
    lda.z c2B
    sta.z c2b
    // [57] phi from doplasma::@3 to doplasma::@4 [phi:doplasma::@3->doplasma::@4]
  __b4_from___b3:
    // [57] phi doplasma::c2b#2 = doplasma::c2b#0 [phi:doplasma::@3->doplasma::@4#0] -- register_copy 
    // [57] phi doplasma::c2a#2 = doplasma::c2a#0 [phi:doplasma::@3->doplasma::@4#1] -- register_copy 
    // [57] phi doplasma::i1#2 = 0 [phi:doplasma::@3->doplasma::@4#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b4
    // doplasma::@4
  __b4:
    // [58] if(doplasma::i1#2<$28) goto doplasma::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #$28
    bcc __b5
    jmp __b6
    // doplasma::@6
  __b6:
    // [59] c2A#3 = c2A#26 + 2 -- vbuz1=vbuz1_plus_2 
    lda.z c2A
    clc
    adc #2
    sta.z c2A
    // [60] c2B#3 = c2B#26 - 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z c2B
    axs #3
    stx.z c2B
    // [61] phi from doplasma::@6 to doplasma::@7 [phi:doplasma::@6->doplasma::@7]
  __b7_from___b6:
    // [61] phi doplasma::screen#6 = doplasma::screen#13 [phi:doplasma::@6->doplasma::@7#0] -- register_copy 
    // [61] phi doplasma::ii#2 = 0 [phi:doplasma::@6->doplasma::@7#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b7
    // doplasma::@7
  __b7:
    // [62] if(doplasma::ii#2<$19) goto doplasma::@8 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b8_from___b7
    jmp __breturn
    // doplasma::@return
  __breturn:
    // [63] return 
    rts
    // [64] phi from doplasma::@7 to doplasma::@8 [phi:doplasma::@7->doplasma::@8]
  __b8_from___b7:
    // [64] phi doplasma::i2#2 = 0 [phi:doplasma::@7->doplasma::@8#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b8
    // doplasma::@8
  __b8:
    // [65] if(doplasma::i2#2<$28) goto doplasma::@9 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b9
    jmp __b10
    // doplasma::@10
  __b10:
    // [66] doplasma::screen#2 = doplasma::screen#6 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [67] doplasma::ii#1 = ++ doplasma::ii#2 -- vbuxx=_inc_vbuxx 
    inx
    // [61] phi from doplasma::@10 to doplasma::@7 [phi:doplasma::@10->doplasma::@7]
  __b7_from___b10:
    // [61] phi doplasma::screen#6 = doplasma::screen#2 [phi:doplasma::@10->doplasma::@7#0] -- register_copy 
    // [61] phi doplasma::ii#2 = doplasma::ii#1 [phi:doplasma::@10->doplasma::@7#1] -- register_copy 
    jmp __b7
    // doplasma::@9
  __b9:
    // [68] doplasma::$6 = doplasma::xbuf[doplasma::i2#2] + doplasma::ybuf[doplasma::ii#2] -- vbuaa=pbuc1_derefidx_vbuyy_plus_pbuc2_derefidx_vbuxx 
    lda xbuf,y
    clc
    adc ybuf,x
    // [69] doplasma::screen#6[doplasma::i2#2] = doplasma::$6 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (screen),y
    // [70] doplasma::i2#1 = ++ doplasma::i2#2 -- vbuyy=_inc_vbuyy 
    iny
    // [64] phi from doplasma::@9 to doplasma::@8 [phi:doplasma::@9->doplasma::@8]
  __b8_from___b9:
    // [64] phi doplasma::i2#2 = doplasma::i2#1 [phi:doplasma::@9->doplasma::@8#0] -- register_copy 
    jmp __b8
    // doplasma::@5
  __b5:
    // [71] doplasma::$3 = SINTABLE[doplasma::c2a#2] + SINTABLE[doplasma::c2b#2] -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c2a
    lda SINTABLE,y
    ldy.z c2b
    clc
    adc SINTABLE,y
    // [72] doplasma::xbuf[doplasma::i1#2] = doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i1
    sta xbuf,y
    // [73] doplasma::c2a#1 = doplasma::c2a#2 + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2a
    axs #-[3]
    stx.z c2a
    // [74] doplasma::c2b#1 = doplasma::c2b#2 + 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2b
    axs #-[7]
    stx.z c2b
    // [75] doplasma::i1#1 = ++ doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [57] phi from doplasma::@5 to doplasma::@4 [phi:doplasma::@5->doplasma::@4]
  __b4_from___b5:
    // [57] phi doplasma::c2b#2 = doplasma::c2b#1 [phi:doplasma::@5->doplasma::@4#0] -- register_copy 
    // [57] phi doplasma::c2a#2 = doplasma::c2a#1 [phi:doplasma::@5->doplasma::@4#1] -- register_copy 
    // [57] phi doplasma::i1#2 = doplasma::i1#1 [phi:doplasma::@5->doplasma::@4#2] -- register_copy 
    jmp __b4
    // doplasma::@2
  __b2:
    // [76] doplasma::$1 = SINTABLE[doplasma::c1a#2] + SINTABLE[doplasma::c1b#2] -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c1a
    lda SINTABLE,y
    ldy.z c1b
    clc
    adc SINTABLE,y
    // [77] doplasma::ybuf[doplasma::i#2] = doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta ybuf,y
    // [78] doplasma::c1a#1 = doplasma::c1a#2 + 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1a
    axs #-[4]
    stx.z c1a
    // [79] doplasma::c1b#1 = doplasma::c1b#2 + 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1b
    axs #-[9]
    stx.z c1b
    // [80] doplasma::i#1 = ++ doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [51] phi from doplasma::@2 to doplasma::@1 [phi:doplasma::@2->doplasma::@1]
  __b1_from___b2:
    // [51] phi doplasma::c1b#2 = doplasma::c1b#1 [phi:doplasma::@2->doplasma::@1#0] -- register_copy 
    // [51] phi doplasma::c1a#2 = doplasma::c1a#1 [phi:doplasma::@2->doplasma::@1#1] -- register_copy 
    // [51] phi doplasma::i#2 = doplasma::i#1 [phi:doplasma::@2->doplasma::@1#2] -- register_copy 
    jmp __b1
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [82] call memset 
    // [87] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [83] return 
    rts
}
  // print_char
// Print a single char
print_char: {
    .const ch = '.'
    // [84] *print_char_cursor#19 = print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
    // [85] print_char_cursor#0 = ++ print_char_cursor#19 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [86] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $f
    // [88] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [88] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [89] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [90] return 
    rts
    // memset::@2
  __b2:
    // [91] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [92] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [88] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [88] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  .align $100
SINTABLE:
.for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(2*PI*i/256))


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp toD0181
Removing instruction jmp __b5
Removing instruction jmp toD0182
Removing instruction jmp __b6
Removing instruction jmp sid_rnd_init1
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b12
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #BLUE
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b3 with __b4
Replacing label __b10_from___b4 with __b10
Replacing label __b7_from___b12 with __b7
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction makecharset_from___b2:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction doplasma_from___b4:
Removing instruction toD0181_from___b4:
Removing instruction toD0181:
Removing instruction toD0182_from___b5:
Removing instruction toD0182:
Removing instruction __b11_from_sid_rnd_init1:
Removing instruction print_cls_from___b11:
Removing instruction __b9_from___b4:
Removing instruction __b10_from___b4:
Removing instruction __b10_from___b9:
Removing instruction __b7_from___b12:
Removing instruction __b7_from___b8:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction doplasma_from___b5:
Removing instruction __b6:
Removing instruction __b3_from___b6:
Removing instruction sid_rnd_init1:
Removing instruction __b11:
Removing instruction __b1_from___b11:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b4:
Removing instruction __b9:
Removing instruction __b1_from___b10:
Removing instruction __b6:
Removing instruction __b3_from___b6:
Removing instruction __b12:
Removing instruction __b8:
Removing instruction __b5_from___b7:
Removing instruction __b1_from_doplasma:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction __b6:
Removing instruction __b7_from___b6:
Removing instruction __breturn:
Removing instruction __b10:
Removing instruction __b7_from___b10:
Removing instruction __b8_from___b9:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b2:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b5_from___b3 to __b4
Relabelling long label __b8_from___b7 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte BLACK = 0
const nomodify byte BLUE = 6
const nomodify byte* CHARSET = (byte*) 8192
const nomodify byte* COLS = (byte*) 55296
const nomodify byte* D018 = (byte*) 53272
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
const byte OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
const byte OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte* SCREEN1 = (byte*) 10240
const nomodify byte* SCREEN2 = (byte*) 11264
const nomodify struct MOS6581_SID* SID = (struct MOS6581_SID*) 54272
const nomodify byte SID_CONTROL_NOISE = $80
const to_nomodify byte* SINTABLE[$100]  = kickasm {{ .for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(2*PI*i/256))
 }}
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
byte c1A
byte c1A#10 c1A zp[1]:4 11.0
byte c1A#11 c1A zp[1]:4 22.4
byte c1A#3 c1A zp[1]:4 4.241379310344827
byte c1B
byte c1B#10 c1B zp[1]:14 11.0
byte c1B#11 c1B zp[1]:14 20.363636363636363
byte c1B#3 c1B zp[1]:14 4.392857142857143
byte c2A
byte c2A#10 c2A zp[1]:17 11.0
byte c2A#26 c2A zp[1]:17 10.666666666666666
byte c2A#3 c2A zp[1]:17 6.833333333333333
byte c2B
byte c2B#10 c2B zp[1]:5 11.0
byte c2B#26 c2B zp[1]:5 10.181818181818182
byte c2B#3 c2B zp[1]:5 7.235294117647059
void doplasma(byte* doplasma::screen)
byte~ doplasma::$1 reg byte a 20002.0
byte~ doplasma::$3 reg byte a 20002.0
byte~ doplasma::$6 reg byte a 200002.0
byte doplasma::c1a
byte doplasma::c1a#0 c1a zp[1]:7 101.0
byte doplasma::c1a#1 c1a zp[1]:7 6667.333333333333
byte doplasma::c1a#2 c1a zp[1]:7 7526.0
byte doplasma::c1b
byte doplasma::c1b#0 c1b zp[1]:8 202.0
byte doplasma::c1b#1 c1b zp[1]:8 10001.0
byte doplasma::c1b#2 c1b zp[1]:8 6020.8
byte doplasma::c2a
byte doplasma::c2a#0 c2a zp[1]:10 101.0
byte doplasma::c2a#1 c2a zp[1]:10 6667.333333333333
byte doplasma::c2a#2 c2a zp[1]:10 7526.0
byte doplasma::c2b
byte doplasma::c2b#0 c2b zp[1]:11 202.0
byte doplasma::c2b#1 c2b zp[1]:11 10001.0
byte doplasma::c2b#2 c2b zp[1]:11 6020.8
byte doplasma::i
byte doplasma::i#1 i zp[1]:6 20002.0
byte doplasma::i#2 i zp[1]:6 6667.333333333333
byte doplasma::i1
byte doplasma::i1#1 i1 zp[1]:9 20002.0
byte doplasma::i1#2 i1 zp[1]:9 6667.333333333333
byte doplasma::i2
byte doplasma::i2#1 reg byte y 200002.0
byte doplasma::i2#2 reg byte y 125001.25
byte doplasma::ii
byte doplasma::ii#1 reg byte x 20002.0
byte doplasma::ii#2 reg byte x 16250.5
byte* doplasma::screen
byte* doplasma::screen#13 screen zp[2]:12 4.391304347826087
byte* doplasma::screen#2 screen zp[2]:12 10001.0
byte* doplasma::screen#6 screen zp[2]:12 17157.714285714286
const byte* doplasma::xbuf[$28]  = { fill( $28, 0) }
const byte* doplasma::ybuf[$19]  = { fill( $19, 0) }
void main()
byte* main::col
byte* main::col#1 col zp[2]:2 16.5
byte* main::col#2 col zp[2]:2 16.5
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)SCREEN1&$3fff*4|>(word)CHARSET/4&$f
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
const byte main::toD0182_return#0 toD0182_return = >(word)SCREEN2&$3fff*4|>(word)CHARSET/4&$f
byte* main::toD0182_screen
void makecharset(byte* makecharset::charset)
word~ makecharset::$10 zp[2]:15 2002.0
word~ makecharset::$11 zp[2]:15 2002.0
byte~ makecharset::$12 reg byte a 202.0
byte*~ makecharset::$16 zp[2]:15 2002.0
byte~ makecharset::$3 reg byte x 202.0
byte~ makecharset::$7 zp[1]:17 20002.0
byte makecharset::b
byte makecharset::b#1 reg byte y 20002.0
byte makecharset::b#2 reg byte y 3875.5
byte makecharset::b#6 reg byte y 15001.5
const to_nomodify byte* makecharset::bittab[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
word makecharset::c
word makecharset::c#1 c zp[2]:12 202.0
word makecharset::c#2 c zp[2]:12 62.75
byte* makecharset::charset
byte makecharset::i
byte makecharset::i#1 i zp[1]:4 2002.0
byte makecharset::i#2 i zp[1]:4 286.0
byte makecharset::ii
byte makecharset::ii#1 reg byte x 20002.0
byte makecharset::ii#2 reg byte x 5714.857142857143
byte makecharset::s
byte makecharset::s#0 s zp[1]:14 631.375
byte makecharset::sid_rnd1_return
byte makecharset::sid_rnd1_return#0 reg byte a 20002.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:15 20002.0
byte* memset::dst#2 dst zp[2]:15 13334.666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
const byte print_char::ch#0 ch = '.'
byte* print_char_cursor
byte* print_char_cursor#0 print_char_cursor zp[2]:2 367.33333333333337
byte* print_char_cursor#19 print_char_cursor zp[2]:2 95.82608695652173
byte* print_char_cursor#31 print_char_cursor zp[2]:2 151.5
void print_cls()
byte* print_line_cursor
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024

zp[2]:2 [ print_char_cursor#19 print_char_cursor#31 print_char_cursor#0 main::col#2 main::col#1 ]
reg byte x [ makecharset::ii#2 makecharset::ii#1 ]
reg byte y [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
zp[1]:4 [ c1A#11 c1A#10 c1A#3 makecharset::i#2 makecharset::i#1 ]
zp[1]:5 [ c2B#26 c2B#10 c2B#3 ]
zp[1]:6 [ doplasma::i#2 doplasma::i#1 ]
zp[1]:7 [ doplasma::c1a#2 doplasma::c1a#0 doplasma::c1a#1 ]
zp[1]:8 [ doplasma::c1b#2 doplasma::c1b#0 doplasma::c1b#1 ]
zp[1]:9 [ doplasma::i1#2 doplasma::i1#1 ]
zp[1]:10 [ doplasma::c2a#2 doplasma::c2a#0 doplasma::c2a#1 ]
zp[1]:11 [ doplasma::c2b#2 doplasma::c2b#0 doplasma::c2b#1 ]
reg byte x [ doplasma::ii#2 doplasma::ii#1 ]
zp[2]:12 [ doplasma::screen#6 doplasma::screen#2 doplasma::screen#13 makecharset::c#2 makecharset::c#1 ]
reg byte y [ doplasma::i2#2 doplasma::i2#1 ]
reg byte x [ makecharset::$3 ]
zp[1]:14 [ makecharset::s#0 c1B#11 c1B#10 c1B#3 ]
reg byte a [ makecharset::$12 ]
zp[2]:15 [ makecharset::$10 makecharset::$11 makecharset::$16 memset::dst#2 memset::dst#1 ]
reg byte a [ makecharset::sid_rnd1_return#0 ]
zp[1]:17 [ makecharset::$7 c2A#26 c2A#10 c2A#3 ]
reg byte a [ doplasma::$6 ]
reg byte a [ doplasma::$3 ]
reg byte a [ doplasma::$1 ]


FINAL ASSEMBLER
Score: 95730

  // File Comments
// A KickC version of the plasma routine from the CC65 samples
// (w)2001 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz.
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/plasma.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  // The colors of the C64
  .const BLACK = 0
  .const BLUE = 6
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .label D018 = $d018
  // The SID MOS 6581/8580
  .label SID = $d400
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  .label SCREEN1 = $2800
  .label SCREEN2 = $2c00
  .label CHARSET = $2000
  .label print_screen = $400
  .label print_char_cursor = 2
  // Plasma state variables
  .label c1A = 4
  .label c1B = $e
  .label c2A = $11
  .label c2B = 5
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    .label col = 2
    // asm
    // asm { sei  }
    sei
    // VICII->BORDER_COLOR = BLUE
    // [1] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // VICII->BG_COLOR = BLUE
    // [2] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLUE -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [3] phi from main to main::@1 [phi:main->main::@1]
    // [3] phi main::col#2 = COLS [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [3] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [3] phi main::col#2 = main::col#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // *col = BLACK
    // [4] *main::col#2 = BLACK -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (col),y
    // for(char* col : COLS..COLS+1000)
    // [5] main::col#1 = ++ main::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [6] if(main::col#1!=COLS+$3e8+1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z col+1
    cmp #>COLS+$3e8+1
    bne __b1
    lda.z col
    cmp #<COLS+$3e8+1
    bne __b1
    // [7] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // makecharset(CHARSET)
    // [8] call makecharset 
    // [17] phi from main::@2 to makecharset [phi:main::@2->makecharset]
    jsr makecharset
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [9] phi c2B#10 = 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c2B
    // [9] phi c2A#10 = 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    sta.z c2A
    // [9] phi c1B#10 = 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    sta.z c1B
    // [9] phi c1A#10 = 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    sta.z c1A
  // Show double-buffered plasma
    // main::@3
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
  __b4:
    // doplasma(SCREEN1)
    // [11] call doplasma 
    // [48] phi from main::@4 to doplasma [phi:main::@4->doplasma]
    // [48] phi doplasma::screen#13 = SCREEN1 [phi:main::@4->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z doplasma.screen
    lda #>SCREEN1
    sta.z doplasma.screen+1
    // [48] phi c2B#26 = c2B#10 [phi:main::@4->doplasma#1] -- register_copy 
    // [48] phi c2A#26 = c2A#10 [phi:main::@4->doplasma#2] -- register_copy 
    // [48] phi c1B#11 = c1B#10 [phi:main::@4->doplasma#3] -- register_copy 
    // [48] phi c1A#11 = c1A#10 [phi:main::@4->doplasma#4] -- register_copy 
    jsr doplasma
    // [12] phi from main::@4 to main::toD0181 [phi:main::@4->main::toD0181]
    // main::toD0181
    // main::@5
    // *D018 = toD018(SCREEN1, CHARSET)
    // [13] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // doplasma(SCREEN2)
    // [14] call doplasma 
    // [48] phi from main::@5 to doplasma [phi:main::@5->doplasma]
    // [48] phi doplasma::screen#13 = SCREEN2 [phi:main::@5->doplasma#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z doplasma.screen
    lda #>SCREEN2
    sta.z doplasma.screen+1
    // [48] phi c2B#26 = c2B#3 [phi:main::@5->doplasma#1] -- register_copy 
    // [48] phi c2A#26 = c2A#3 [phi:main::@5->doplasma#2] -- register_copy 
    // [48] phi c1B#11 = c1B#3 [phi:main::@5->doplasma#3] -- register_copy 
    // [48] phi c1A#11 = c1A#3 [phi:main::@5->doplasma#4] -- register_copy 
    jsr doplasma
    // [15] phi from main::@5 to main::toD0182 [phi:main::@5->main::toD0182]
    // main::toD0182
    // main::@6
    // *D018 = toD018(SCREEN2, CHARSET)
    // [16] *D018 = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    // [9] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
    // [9] phi c2B#10 = c2B#3 [phi:main::@6->main::@3#0] -- register_copy 
    // [9] phi c2A#10 = c2A#3 [phi:main::@6->main::@3#1] -- register_copy 
    // [9] phi c1B#10 = c1B#3 [phi:main::@6->main::@3#2] -- register_copy 
    // [9] phi c1A#10 = c1A#3 [phi:main::@6->main::@3#3] -- register_copy 
    jmp __b4
}
  // makecharset
// Make a plasma-friendly charset where the chars are randomly filled
makecharset: {
    .label __7 = $11
    .label __10 = $f
    .label __11 = $f
    .label s = $e
    .label i = 4
    .label c = $c
    .label __16 = $f
    // makecharset::sid_rnd_init1
    // SID->CH3_FREQ = 0xffff
    // [18] *((word*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) = $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // SID->CH3_CONTROL = SID_CONTROL_NOISE
    // [19] *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) = SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [20] phi from makecharset::sid_rnd_init1 to makecharset::@11 [phi:makecharset::sid_rnd_init1->makecharset::@11]
    // makecharset::@11
    // print_cls()
    // [21] call print_cls 
    // [81] phi from makecharset::@11 to print_cls [phi:makecharset::@11->print_cls]
    jsr print_cls
    // [22] phi from makecharset::@11 to makecharset::@1 [phi:makecharset::@11->makecharset::@1]
    // [22] phi print_char_cursor#19 = print_screen#0 [phi:makecharset::@11->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [22] phi makecharset::c#2 = 0 [phi:makecharset::@11->makecharset::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z c
    sta.z c+1
    // makecharset::@1
  __b1:
    // for (unsigned int c = 0; c < 0x100; ++c)
    // [23] if(makecharset::c#2<$100) goto makecharset::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$100
    bcc __b2
    bne !+
    lda.z c
    cmp #<$100
    bcc __b2
  !:
    // makecharset::@return
    // }
    // [24] return 
    rts
    // makecharset::@2
  __b2:
    // <c
    // [25] makecharset::$3 = < makecharset::c#2 -- vbuxx=_lo_vwuz1 
    ldx.z c
    // s = SINTABLE[<c]
    // [26] makecharset::s#0 = SINTABLE[makecharset::$3] -- vbuz1=pbuc1_derefidx_vbuxx 
    lda SINTABLE,x
    sta.z s
    // [27] phi from makecharset::@2 to makecharset::@3 [phi:makecharset::@2->makecharset::@3]
    // [27] phi makecharset::i#2 = 0 [phi:makecharset::@2->makecharset::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // makecharset::@3
  __b3:
    // for ( char i = 0; i < 8; ++i)
    // [28] if(makecharset::i#2<8) goto makecharset::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b4
    // makecharset::@4
    // c & 0x07
    // [29] makecharset::$12 = makecharset::c#2 & 7 -- vbuaa=vwuz1_band_vbuc1 
    lda #7
    and.z c
    // if ((c & 0x07) == 0)
    // [30] if(makecharset::$12!=0) goto makecharset::@10 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b10
    // [31] phi from makecharset::@4 to makecharset::@9 [phi:makecharset::@4->makecharset::@9]
    // makecharset::@9
    // print_char('.')
    // [32] call print_char 
    jsr print_char
    // [33] phi from makecharset::@4 makecharset::@9 to makecharset::@10 [phi:makecharset::@4/makecharset::@9->makecharset::@10]
    // [33] phi print_char_cursor#31 = print_char_cursor#19 [phi:makecharset::@4/makecharset::@9->makecharset::@10#0] -- register_copy 
    // makecharset::@10
  __b10:
    // for (unsigned int c = 0; c < 0x100; ++c)
    // [34] makecharset::c#1 = ++ makecharset::c#2 -- vwuz1=_inc_vwuz1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [22] phi from makecharset::@10 to makecharset::@1 [phi:makecharset::@10->makecharset::@1]
    // [22] phi print_char_cursor#19 = print_char_cursor#31 [phi:makecharset::@10->makecharset::@1#0] -- register_copy 
    // [22] phi makecharset::c#2 = makecharset::c#1 [phi:makecharset::@10->makecharset::@1#1] -- register_copy 
    jmp __b1
    // [35] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
  __b4:
    // [35] phi makecharset::b#2 = 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuyy=vbuc1 
    ldy #0
    // [35] phi makecharset::ii#2 = 0 [phi:makecharset::@3->makecharset::@5#1] -- vbuxx=vbuc1 
    ldx #0
    // makecharset::@5
  __b5:
    // for (char ii = 0; ii < 8; ++ii)
    // [36] if(makecharset::ii#2<8) goto makecharset::sid_rnd1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc sid_rnd1
    // makecharset::@6
    // c*8
    // [37] makecharset::$10 = makecharset::c#2 << 3 -- vwuz1=vwuz2_rol_3 
    lda.z c
    asl
    sta.z __10
    lda.z c+1
    rol
    sta.z __10+1
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    // (c*8) + i
    // [38] makecharset::$11 = makecharset::$10 + makecharset::i#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __11
    sta.z __11
    bcc !+
    inc.z __11+1
  !:
    // charset[(c*8) + i] = b
    // [39] makecharset::$16 = CHARSET + makecharset::$11 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __16
    adc #<CHARSET
    sta.z __16
    lda.z __16+1
    adc #>CHARSET
    sta.z __16+1
    // [40] *makecharset::$16 = makecharset::b#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__16),y
    // for ( char i = 0; i < 8; ++i)
    // [41] makecharset::i#1 = ++ makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [27] phi from makecharset::@6 to makecharset::@3 [phi:makecharset::@6->makecharset::@3]
    // [27] phi makecharset::i#2 = makecharset::i#1 [phi:makecharset::@6->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::sid_rnd1
  sid_rnd1:
    // return SID->CH3_OSC;
    // [42] makecharset::sid_rnd1_return#0 = *((byte*)SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    // makecharset::@12
    // sid_rnd() & 0xFF
    // [43] makecharset::$7 = makecharset::sid_rnd1_return#0 & $ff -- vbuz1=vbuaa_band_vbuc1 
    and #$ff
    sta.z __7
    // if ((sid_rnd() & 0xFF) > s)
    // [44] if(makecharset::$7<=makecharset::s#0) goto makecharset::@7 -- vbuz1_le_vbuz2_then_la1 
    lda.z s
    cmp.z __7
    bcs __b7
    // makecharset::@8
    // b |= bittab[ii]
    // [45] makecharset::b#1 = makecharset::b#2 | makecharset::bittab[makecharset::ii#2] -- vbuyy=vbuyy_bor_pbuc1_derefidx_vbuxx 
    tya
    ora bittab,x
    tay
    // [46] phi from makecharset::@12 makecharset::@8 to makecharset::@7 [phi:makecharset::@12/makecharset::@8->makecharset::@7]
    // [46] phi makecharset::b#6 = makecharset::b#2 [phi:makecharset::@12/makecharset::@8->makecharset::@7#0] -- register_copy 
    // makecharset::@7
  __b7:
    // for (char ii = 0; ii < 8; ++ii)
    // [47] makecharset::ii#1 = ++ makecharset::ii#2 -- vbuxx=_inc_vbuxx 
    inx
    // [35] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
    // [35] phi makecharset::b#2 = makecharset::b#6 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    // [35] phi makecharset::ii#2 = makecharset::ii#1 [phi:makecharset::@7->makecharset::@5#1] -- register_copy 
    jmp __b5
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // doplasma
// Render plasma to the passed screen
// doplasma(byte* zp($c) screen)
doplasma: {
    .label c1a = 7
    .label c1b = 8
    .label i = 6
    .label c2a = $a
    .label c2b = $b
    .label i1 = 9
    .label screen = $c
    // c1a = c1A
    // [49] doplasma::c1a#0 = c1A#11 -- vbuz1=vbuz2 
    lda.z c1A
    sta.z c1a
    // c1b = c1B
    // [50] doplasma::c1b#0 = c1B#11 -- vbuz1=vbuz2 
    lda.z c1B
    sta.z c1b
    // [51] phi from doplasma to doplasma::@1 [phi:doplasma->doplasma::@1]
    // [51] phi doplasma::c1b#2 = doplasma::c1b#0 [phi:doplasma->doplasma::@1#0] -- register_copy 
    // [51] phi doplasma::c1a#2 = doplasma::c1a#0 [phi:doplasma->doplasma::@1#1] -- register_copy 
    // [51] phi doplasma::i#2 = 0 [phi:doplasma->doplasma::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // doplasma::@1
  __b1:
    // for (char i = 0; i < 25; ++i)
    // [52] if(doplasma::i#2<$19) goto doplasma::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$19
    bcc __b2
    // doplasma::@3
    // c1A += 3
    // [53] c1A#3 = c1A#11 + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1A
    axs #-[3]
    stx.z c1A
    // c1B -= 5
    // [54] c1B#3 = c1B#11 - 5 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z c1B
    axs #5
    stx.z c1B
    // c2a = c2A
    // [55] doplasma::c2a#0 = c2A#26 -- vbuz1=vbuz2 
    lda.z c2A
    sta.z c2a
    // c2b = c2B
    // [56] doplasma::c2b#0 = c2B#26 -- vbuz1=vbuz2 
    lda.z c2B
    sta.z c2b
    // [57] phi from doplasma::@3 to doplasma::@4 [phi:doplasma::@3->doplasma::@4]
    // [57] phi doplasma::c2b#2 = doplasma::c2b#0 [phi:doplasma::@3->doplasma::@4#0] -- register_copy 
    // [57] phi doplasma::c2a#2 = doplasma::c2a#0 [phi:doplasma::@3->doplasma::@4#1] -- register_copy 
    // [57] phi doplasma::i1#2 = 0 [phi:doplasma::@3->doplasma::@4#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    // doplasma::@4
  __b4:
    // for (char i = 0; i < 40; ++i)
    // [58] if(doplasma::i1#2<$28) goto doplasma::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i1
    cmp #$28
    bcc __b5
    // doplasma::@6
    // c2A += 2
    // [59] c2A#3 = c2A#26 + 2 -- vbuz1=vbuz1_plus_2 
    lda.z c2A
    clc
    adc #2
    sta.z c2A
    // c2B -= 3
    // [60] c2B#3 = c2B#26 - 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z c2B
    axs #3
    stx.z c2B
    // [61] phi from doplasma::@6 to doplasma::@7 [phi:doplasma::@6->doplasma::@7]
    // [61] phi doplasma::screen#6 = doplasma::screen#13 [phi:doplasma::@6->doplasma::@7#0] -- register_copy 
    // [61] phi doplasma::ii#2 = 0 [phi:doplasma::@6->doplasma::@7#1] -- vbuxx=vbuc1 
    ldx #0
    // doplasma::@7
  __b7:
    // for (char ii = 0; ii < 25; ++ii)
    // [62] if(doplasma::ii#2<$19) goto doplasma::@8 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3
    // doplasma::@return
    // }
    // [63] return 
    rts
    // [64] phi from doplasma::@7 to doplasma::@8 [phi:doplasma::@7->doplasma::@8]
  __b3:
    // [64] phi doplasma::i2#2 = 0 [phi:doplasma::@7->doplasma::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // doplasma::@8
  __b8:
    // for (char i = 0; i < 40; ++i)
    // [65] if(doplasma::i2#2<$28) goto doplasma::@9 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b9
    // doplasma::@10
    // screen += 40
    // [66] doplasma::screen#2 = doplasma::screen#6 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // for (char ii = 0; ii < 25; ++ii)
    // [67] doplasma::ii#1 = ++ doplasma::ii#2 -- vbuxx=_inc_vbuxx 
    inx
    // [61] phi from doplasma::@10 to doplasma::@7 [phi:doplasma::@10->doplasma::@7]
    // [61] phi doplasma::screen#6 = doplasma::screen#2 [phi:doplasma::@10->doplasma::@7#0] -- register_copy 
    // [61] phi doplasma::ii#2 = doplasma::ii#1 [phi:doplasma::@10->doplasma::@7#1] -- register_copy 
    jmp __b7
    // doplasma::@9
  __b9:
    // xbuf[i] + ybuf[ii]
    // [68] doplasma::$6 = doplasma::xbuf[doplasma::i2#2] + doplasma::ybuf[doplasma::ii#2] -- vbuaa=pbuc1_derefidx_vbuyy_plus_pbuc2_derefidx_vbuxx 
    lda xbuf,y
    clc
    adc ybuf,x
    // screen[i] = (xbuf[i] + ybuf[ii])
    // [69] doplasma::screen#6[doplasma::i2#2] = doplasma::$6 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (screen),y
    // for (char i = 0; i < 40; ++i)
    // [70] doplasma::i2#1 = ++ doplasma::i2#2 -- vbuyy=_inc_vbuyy 
    iny
    // [64] phi from doplasma::@9 to doplasma::@8 [phi:doplasma::@9->doplasma::@8]
    // [64] phi doplasma::i2#2 = doplasma::i2#1 [phi:doplasma::@9->doplasma::@8#0] -- register_copy 
    jmp __b8
    // doplasma::@5
  __b5:
    // SINTABLE[c2a] + SINTABLE[c2b]
    // [71] doplasma::$3 = SINTABLE[doplasma::c2a#2] + SINTABLE[doplasma::c2b#2] -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c2a
    lda SINTABLE,y
    ldy.z c2b
    clc
    adc SINTABLE,y
    // xbuf[i] = (SINTABLE[c2a] + SINTABLE[c2b])
    // [72] doplasma::xbuf[doplasma::i1#2] = doplasma::$3 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i1
    sta xbuf,y
    // c2a += 3
    // [73] doplasma::c2a#1 = doplasma::c2a#2 + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2a
    axs #-[3]
    stx.z c2a
    // c2b += 7
    // [74] doplasma::c2b#1 = doplasma::c2b#2 + 7 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c2b
    axs #-[7]
    stx.z c2b
    // for (char i = 0; i < 40; ++i)
    // [75] doplasma::i1#1 = ++ doplasma::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [57] phi from doplasma::@5 to doplasma::@4 [phi:doplasma::@5->doplasma::@4]
    // [57] phi doplasma::c2b#2 = doplasma::c2b#1 [phi:doplasma::@5->doplasma::@4#0] -- register_copy 
    // [57] phi doplasma::c2a#2 = doplasma::c2a#1 [phi:doplasma::@5->doplasma::@4#1] -- register_copy 
    // [57] phi doplasma::i1#2 = doplasma::i1#1 [phi:doplasma::@5->doplasma::@4#2] -- register_copy 
    jmp __b4
    // doplasma::@2
  __b2:
    // SINTABLE[c1a] + SINTABLE[c1b]
    // [76] doplasma::$1 = SINTABLE[doplasma::c1a#2] + SINTABLE[doplasma::c1b#2] -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc1_derefidx_vbuz2 
    ldy.z c1a
    lda SINTABLE,y
    ldy.z c1b
    clc
    adc SINTABLE,y
    // ybuf[i] = (SINTABLE[c1a] + SINTABLE[c1b])
    // [77] doplasma::ybuf[doplasma::i#2] = doplasma::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z i
    sta ybuf,y
    // c1a += 4
    // [78] doplasma::c1a#1 = doplasma::c1a#2 + 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1a
    axs #-[4]
    stx.z c1a
    // c1b += 9
    // [79] doplasma::c1b#1 = doplasma::c1b#2 + 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c1b
    axs #-[9]
    stx.z c1b
    // for (char i = 0; i < 25; ++i)
    // [80] doplasma::i#1 = ++ doplasma::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [51] phi from doplasma::@2 to doplasma::@1 [phi:doplasma::@2->doplasma::@1]
    // [51] phi doplasma::c1b#2 = doplasma::c1b#1 [phi:doplasma::@2->doplasma::@1#0] -- register_copy 
    // [51] phi doplasma::c1a#2 = doplasma::c1a#1 [phi:doplasma::@2->doplasma::@1#1] -- register_copy 
    // [51] phi doplasma::i#2 = doplasma::i#1 [phi:doplasma::@2->doplasma::@1#2] -- register_copy 
    jmp __b1
    xbuf: .fill $28, 0
    ybuf: .fill $19, 0
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [82] call memset 
    // [87] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [83] return 
    rts
}
  // print_char
// Print a single char
print_char: {
    .const ch = '.'
    // *(print_char_cursor++) = ch
    // [84] *print_char_cursor#19 = print_char::ch#0 -- _deref_pbuz1=vbuc1 
    lda #ch
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [85] print_char_cursor#0 = ++ print_char_cursor#19 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [86] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $f
    // [88] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [88] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [89] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [90] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [91] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [92] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [88] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [88] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  .align $100
SINTABLE:
.for(var i=0;i<$100;i++)
        .byte round(127.5+127.5*sin(2*PI*i/256))


