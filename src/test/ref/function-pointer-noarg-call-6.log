
CONTROL FLOW GRAPH SSA

void fn1()
fn1: scope:[fn1]  from
  fn1::screen#0 = (byte*)$400
  to:fn1::@1
fn1::@1: scope:[fn1]  from fn1 fn1::@2
  fn1::screen#2 = phi( fn1/fn1::screen#0, fn1::@2/fn1::screen#1 )
  fn1::$0 = fn1::screen#2 < $400+$3e8
  if(fn1::$0) goto fn1::@2
  to:fn1::@return
fn1::@2: scope:[fn1]  from fn1::@1
  fn1::screen#3 = phi( fn1::@1/fn1::screen#2 )
  *fn1::screen#3 = ++ *fn1::screen#3
  fn1::screen#1 = ++ fn1::screen#3
  to:fn1::@1
fn1::@return: scope:[fn1]  from fn1::@1
  return 
  to:@return

void main()
main: scope:[main]  from __start
  main::cols#0 = (byte*)$d800
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::cols#2 = phi( main/main::cols#0, main::@2/main::cols#1 )
  main::$0 = main::cols#2 < $d800+$3e8
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::cols#3 = phi( main::@1/main::cols#2 )
  call *main::cls 
  *main::cols#3 = ++ *main::cols#3
  main::cols#1 = ++ main::cols#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void fn1()
bool~ fn1::$0
label fn1::@1
label fn1::@2
label fn1::@return
byte* fn1::screen
byte* fn1::screen#0
byte* fn1::screen#1
byte* fn1::screen#2
byte* fn1::screen#3
void main()
bool~ main::$0
label main::@1
label main::@2
label main::@return
const void()* main::cls = &fn1
byte* main::cols
byte* main::cols#0
byte* main::cols#1
byte* main::cols#2
byte* main::cols#3

Adding number conversion cast (unumber) $400+$3e8 in fn1::$0 = fn1::screen#2 < $400+$3e8
Adding number conversion cast (unumber) $d800+$3e8 in main::$0 = main::cols#2 < $d800+$3e8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Successful SSA optimization PassNCastSimplification
Alias fn1::screen#2 = fn1::screen#3 
Alias main::cols#2 = main::cols#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition fn1::$0 [3] if(fn1::screen#2<(word)$400+$3e8) goto fn1::@2
Simple Condition main::$0 [10] if(main::cols#2<(word)$d800+$3e8) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant fn1::screen#0 = (byte*) 1024
Constant main::cols#0 = (byte*) 55296
Successful SSA optimization Pass2ConstantIdentification
Replacing constant pointer function [11] call fn1 
Successful SSA optimization Pass2ConstantCallPointerIdentification
Eliminating unused constant main::cls
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings fn1::screen#0
Inlining constant with var siblings main::cols#0
Constant inlined fn1::screen#0 = (byte*) 1024
Constant inlined main::cols#0 = (byte*) 55296
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of fn1
CALL GRAPH
Calls in [main] to fn1:5 

Created 2 initial phi equivalence classes
Coalesced [8] main::cols#4 = main::cols#1
Coalesced [15] fn1::screen#4 = fn1::screen#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of fn1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::cols#2 = phi( main/(byte*) 55296, main::@2/main::cols#1 )
  [2] if(main::cols#2<(word)$d800+$3e8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call fn1 
  [6] *main::cols#2 = ++ *main::cols#2
  [7] main::cols#1 = ++ main::cols#2
  to:main::@1

__stackcall void fn1()
fn1: scope:[fn1]  from main::@2
  [8] phi()
  to:fn1::@1
fn1::@1: scope:[fn1]  from fn1 fn1::@2
  [9] fn1::screen#2 = phi( fn1/(byte*) 1024, fn1::@2/fn1::screen#1 )
  [10] if(fn1::screen#2<(word)$400+$3e8) goto fn1::@2
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1::@1
  [11] return 
  to:@return
fn1::@2: scope:[fn1]  from fn1::@1
  [12] *fn1::screen#2 = ++ *fn1::screen#2
  [13] fn1::screen#1 = ++ fn1::screen#2
  to:fn1::@1


VARIABLE REGISTER WEIGHTS
__stackcall void fn1()
byte* fn1::screen
byte* fn1::screen#1 20002.0
byte* fn1::screen#2 16668.333333333332
void main()
byte* main::cols
byte* main::cols#1 22.0
byte* main::cols#2 11.0

Initial phi equivalence classes
[ main::cols#2 main::cols#1 ]
[ fn1::screen#2 fn1::screen#1 ]
Complete equivalence classes
[ main::cols#2 main::cols#1 ]
[ fn1::screen#2 fn1::screen#1 ]
Allocated zp[2]:2 [ main::cols#2 main::cols#1 ]
Allocated zp[2]:4 [ fn1::screen#2 fn1::screen#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(main::cols#2<(word)$d800+$3e8) goto main::@2 [ main::cols#2 ] (  [ main::cols#2 ] { }  ) always clobbers reg byte a 
Statement [6] *main::cols#2 = ++ *main::cols#2 [ main::cols#2 ] (  [ main::cols#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] if(fn1::screen#2<(word)$400+$3e8) goto fn1::@2 [ fn1::screen#2 ] ( fn1:5 [ main::cols#2 fn1::screen#2 ] { }  ) always clobbers reg byte a 
Statement [12] *fn1::screen#2 = ++ *fn1::screen#2 [ fn1::screen#2 ] ( fn1:5 [ main::cols#2 fn1::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ main::cols#2 main::cols#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ fn1::screen#2 fn1::screen#1 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [fn1] 36,670.33: zp[2]:4 [ fn1::screen#2 fn1::screen#1 ] 
Uplift Scope [main] 33: zp[2]:2 [ main::cols#2 main::cols#1 ] 
Uplift Scope [] 

Uplifting [fn1] best 7637 combination zp[2]:4 [ fn1::screen#2 fn1::screen#1 ] 
Uplifting [main] best 7637 combination zp[2]:2 [ main::cols#2 main::cols#1 ] 
Uplifting [] best 7637 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label cols = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::cols#2 = (byte*) 55296 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$d800
    sta.z cols
    lda #>$d800
    sta.z cols+1
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::cols#2<(word)$d800+$3e8) goto main::@2 -- pbuz1_lt_vwuc1_then_la1 
    lda.z cols+1
    cmp #>$d800+$3e8
    bcc __b2_from___b1
    bne !+
    lda.z cols
    cmp #<$d800+$3e8
    bcc __b2_from___b1
  !:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call fn1 
    jsr fn1
    // [6] *main::cols#2 = ++ *main::cols#2 -- _deref_pbuz1=_inc__deref_pbuz1 
    ldy #0
    lda (cols),y
    clc
    adc #1
    ldy #0
    sta (cols),y
    // [7] main::cols#1 = ++ main::cols#2 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::cols#2 = main::cols#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // fn1
fn1: {
    .label screen = 4
    // [9] phi from fn1 to fn1::@1 [phi:fn1->fn1::@1]
  __b1_from_fn1:
    // [9] phi fn1::screen#2 = (byte*) 1024 [phi:fn1->fn1::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    jmp __b1
    // fn1::@1
  __b1:
    // [10] if(fn1::screen#2<(word)$400+$3e8) goto fn1::@2 -- pbuz1_lt_vwuc1_then_la1 
    lda.z screen+1
    cmp #>$400+$3e8
    bcc __b2
    bne !+
    lda.z screen
    cmp #<$400+$3e8
    bcc __b2
  !:
    jmp __breturn
    // fn1::@return
  __breturn:
    // [11] return 
    rts
    // fn1::@2
  __b2:
    // [12] *fn1::screen#2 = ++ *fn1::screen#2 -- _deref_pbuz1=_inc__deref_pbuz1 
    ldy #0
    lda (screen),y
    clc
    adc #1
    ldy #0
    sta (screen),y
    // [13] fn1::screen#1 = ++ fn1::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [9] phi from fn1::@2 to fn1::@1 [phi:fn1::@2->fn1::@1]
  __b1_from___b2:
    // [9] phi fn1::screen#2 = fn1::screen#1 [phi:fn1::@2->fn1::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Removing instruction __b2_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_fn1:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__stackcall void fn1()
label fn1::@1
label fn1::@2
label fn1::@return
byte* fn1::screen
byte* fn1::screen#1 screen zp[2]:4 20002.0
byte* fn1::screen#2 screen zp[2]:4 16668.333333333332
void main()
label main::@1
label main::@2
label main::@return
byte* main::cols
byte* main::cols#1 cols zp[2]:2 22.0
byte* main::cols#2 cols zp[2]:2 11.0

zp[2]:2 [ main::cols#2 main::cols#1 ]
zp[2]:4 [ fn1::screen#2 fn1::screen#1 ]


FINAL ASSEMBLER
Score: 6727

  // File Comments
// Tests calling into a function pointer with local variables
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label cols = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::cols#2 = (byte*) 55296 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$d800
    sta.z cols
    lda #>$d800
    sta.z cols+1
    // main::@1
  __b1:
    // for(byte* cols = $d800; cols<$d800+1000;cols++)
    // [2] if(main::cols#2<(word)$d800+$3e8) goto main::@2 -- pbuz1_lt_vwuc1_then_la1 
    lda.z cols+1
    cmp #>$d800+$3e8
    bcc __b2
    bne !+
    lda.z cols
    cmp #<$d800+$3e8
    bcc __b2
  !:
    // main::@return
    // }
    // [3] return 
    rts
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // (*cls)()
    // [5] call fn1 
    jsr fn1
    // (*cols)++;
    // [6] *main::cols#2 = ++ *main::cols#2 -- _deref_pbuz1=_inc__deref_pbuz1 
    ldy #0
    lda (cols),y
    clc
    adc #1
    sta (cols),y
    // for(byte* cols = $d800; cols<$d800+1000;cols++)
    // [7] main::cols#1 = ++ main::cols#2 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::cols#2 = main::cols#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // fn1
fn1: {
    .label screen = 4
    // [9] phi from fn1 to fn1::@1 [phi:fn1->fn1::@1]
    // [9] phi fn1::screen#2 = (byte*) 1024 [phi:fn1->fn1::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // fn1::@1
  __b1:
    // for(byte* screen=$400;screen<$400+1000;screen++)
    // [10] if(fn1::screen#2<(word)$400+$3e8) goto fn1::@2 -- pbuz1_lt_vwuc1_then_la1 
    lda.z screen+1
    cmp #>$400+$3e8
    bcc __b2
    bne !+
    lda.z screen
    cmp #<$400+$3e8
    bcc __b2
  !:
    // fn1::@return
    // }
    // [11] return 
    rts
    // fn1::@2
  __b2:
    // (*screen)++;
    // [12] *fn1::screen#2 = ++ *fn1::screen#2 -- _deref_pbuz1=_inc__deref_pbuz1 
    ldy #0
    lda (screen),y
    clc
    adc #1
    sta (screen),y
    // for(byte* screen=$400;screen<$400+1000;screen++)
    // [13] fn1::screen#1 = ++ fn1::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [9] phi from fn1::@2 to fn1::@1 [phi:fn1::@2->fn1::@1]
    // [9] phi fn1::screen#2 = fn1::screen#1 [phi:fn1::@2->fn1::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

