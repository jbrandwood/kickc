Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  print2::at#0 = screen
  print2::msg#0 = main::msg
  call print2
  to:main::@1
main::@1: scope:[main]  from main
  main::$1 = screen + $50
  print2::at#1 = main::$1
  print2::msg#1 = main::msg1
  call print2
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void print2(char *at , char *msg)
print2: scope:[print2]  from main main::@1
  print2::at#4 = phi( main/print2::at#0, main::@1/print2::at#1 )
  print2::msg#4 = phi( main/print2::msg#0, main::@1/print2::msg#1 )
  print2::j#0 = 0
  print2::i#0 = 0
  to:print2::@1
print2::@1: scope:[print2]  from print2 print2::@3
  print2::j#4 = phi( print2/print2::j#0, print2::@3/print2::j#1 )
  print2::at#3 = phi( print2/print2::at#4, print2::@3/print2::at#5 )
  print2::i#2 = phi( print2/print2::i#0, print2::@3/print2::i#1 )
  print2::msg#2 = phi( print2/print2::msg#4, print2::@3/print2::msg#5 )
  print2::$1 = 0 != print2::msg#2[print2::i#2]
  if(print2::$1) goto print2::@2
  to:print2::@return
print2::@2: scope:[print2]  from print2::@1
  print2::i#3 = phi( print2::@1/print2::i#2 )
  print2::msg#3 = phi( print2::@1/print2::msg#2 )
  print2::j#2 = phi( print2::@1/print2::j#4 )
  print2::at#2 = phi( print2::@1/print2::at#3 )
  print_char::at#0 = print2::at#2
  print_char::idx#0 = print2::j#2
  print_char::ch#0 = print2::msg#3[print2::i#3]
  call print_char
  to:print2::@3
print2::@3: scope:[print2]  from print2::@2
  print2::at#5 = phi( print2::@2/print2::at#2 )
  print2::msg#5 = phi( print2::@2/print2::msg#3 )
  print2::i#4 = phi( print2::@2/print2::i#3 )
  print2::j#3 = phi( print2::@2/print2::j#2 )
  print2::j#1 = print2::j#3 + 2
  print2::i#1 = ++ print2::i#4
  to:print2::@1
print2::@return: scope:[print2]  from print2::@1
  return 
  to:@return

void print_char(char *at , char idx , char ch)
print_char: scope:[print_char]  from print2::@2
  print_char::idx#1 = phi( print2::@2/print_char::idx#0 )
  print_char::at#1 = phi( print2::@2/print_char::at#0 )
  print_char::ch#1 = phi( print2::@2/print_char::ch#0 )
  print_char::at#1[print_char::idx#1] = print_char::ch#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
char *main::$1
__constant char main::msg[6] = "hello"
__constant char main::msg1[6] = "world"
void print2(char *at , char *msg)
bool print2::$1
char *print2::at
char *print2::at#0
char *print2::at#1
char *print2::at#2
char *print2::at#3
char *print2::at#4
char *print2::at#5
char print2::i
char print2::i#0
char print2::i#1
char print2::i#2
char print2::i#3
char print2::i#4
char print2::j
char print2::j#0
char print2::j#1
char print2::j#2
char print2::j#3
char print2::j#4
char *print2::msg
char *print2::msg#0
char *print2::msg#1
char *print2::msg#2
char *print2::msg#3
char *print2::msg#4
char *print2::msg#5
void print_char(char *at , char idx , char ch)
char *print_char::at
char *print_char::at#0
char *print_char::at#1
char print_char::ch
char print_char::ch#0
char print_char::ch#1
char print_char::idx
char print_char::idx#0
char print_char::idx#1
__constant char *screen = (char *)$400

Adding number conversion cast (unumber) $50 in main::$1 = screen + $50
Adding number conversion cast (unumber) 0 in print2::$1 = 0 != print2::msg#2[print2::i#2]
Adding number conversion cast (unumber) 2 in print2::j#1 = print2::j#3 + 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $50
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $50
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias print2::at#1 = main::$1 
Alias print2::at#2 = print2::at#3 print2::at#5 
Alias print2::j#2 = print2::j#4 print2::j#3 
Alias print2::msg#2 = print2::msg#3 print2::msg#5 
Alias print2::i#2 = print2::i#3 print2::i#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values print2::msg#2 print2::msg#4
Identical Phi Values print2::at#2 print2::at#4
Identical Phi Values print_char::ch#1 print_char::ch#0
Identical Phi Values print_char::at#1 print_char::at#0
Identical Phi Values print_char::idx#1 print_char::idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print2::$1 [12] if(0!=print2::msg#4[print2::i#2]) goto print2::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [3] print2::at#1 = screen + $50
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant print2::at#0 = screen
Constant print2::msg#0 = main::msg
Constant print2::at#1 = screen+$50
Constant print2::msg#1 = main::msg1
Constant print2::j#0 = 0
Constant print2::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print2::at#0
Inlining constant with var siblings print2::msg#0
Inlining constant with var siblings print2::at#1
Inlining constant with var siblings print2::msg#1
Inlining constant with var siblings print2::j#0
Inlining constant with var siblings print2::i#0
Constant inlined print2::at#1 = screen+$50
Constant inlined print2::at#0 = screen
Constant inlined print2::msg#1 = main::msg1
Constant inlined print2::j#0 = 0
Constant inlined print2::msg#0 = main::msg
Constant inlined print2::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print2:1 print2:3 
Calls in [print2] to print_char:13 

Created 4 initial phi equivalence classes
Coalesced [16] print2::i#5 = print2::i#1
Coalesced [17] print2::j#5 = print2::j#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print2
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void print2(char *at , char *msg)
print2: scope:[print2]  from main main::@1
  [5] print2::at#4 = phi( main/screen, main::@1/screen+$50 )
  [5] print2::msg#4 = phi( main/main::msg, main::@1/main::msg1 )
  to:print2::@1
print2::@1: scope:[print2]  from print2 print2::@3
  [6] print2::j#2 = phi( print2/0, print2::@3/print2::j#1 )
  [6] print2::i#2 = phi( print2/0, print2::@3/print2::i#1 )
  [7] if(0!=print2::msg#4[print2::i#2]) goto print2::@2
  to:print2::@return
print2::@return: scope:[print2]  from print2::@1
  [8] return 
  to:@return
print2::@2: scope:[print2]  from print2::@1
  [9] print_char::at#0 = print2::at#4
  [10] print_char::idx#0 = print2::j#2
  [11] print_char::ch#0 = print2::msg#4[print2::i#2]
  [12] call print_char
  to:print2::@3
print2::@3: scope:[print2]  from print2::@2
  [13] print2::j#1 = print2::j#2 + 2
  [14] print2::i#1 = ++ print2::i#2
  to:print2::@1

void print_char(char *at , char idx , char ch)
print_char: scope:[print_char]  from print2::@2
  [15] print_char::at#0[print_char::idx#0] = print_char::ch#0
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void print2(char *at , char *msg)
char *print2::at
char *print2::at#4 // 11.222222222222221
char print2::i
char print2::i#1 // 202.0
char print2::i#2 // 57.714285714285715
char print2::j
char print2::j#1 // 101.0
char print2::j#2 // 50.5
char *print2::msg
char *print2::msg#4 // 22.444444444444443
void print_char(char *at , char idx , char ch)
char *print_char::at
char *print_char::at#0 // 367.33333333333337
char print_char::ch
char print_char::ch#0 // 1102.0
char print_char::idx
char print_char::idx#0 // 551.0

Initial phi equivalence classes
[ print2::msg#4 ]
[ print2::at#4 ]
[ print2::i#2 print2::i#1 ]
[ print2::j#2 print2::j#1 ]
Added variable print_char::at#0 to live range equivalence class [ print_char::at#0 ]
Added variable print_char::idx#0 to live range equivalence class [ print_char::idx#0 ]
Added variable print_char::ch#0 to live range equivalence class [ print_char::ch#0 ]
Complete equivalence classes
[ print2::msg#4 ]
[ print2::at#4 ]
[ print2::i#2 print2::i#1 ]
[ print2::j#2 print2::j#1 ]
[ print_char::at#0 ]
[ print_char::idx#0 ]
[ print_char::ch#0 ]
Allocated zp[1]:2 [ print_char::ch#0 ]
Allocated zp[1]:3 [ print_char::idx#0 ]
Allocated zp[2]:4 [ print_char::at#0 ]
Allocated zp[1]:6 [ print2::i#2 print2::i#1 ]
Allocated zp[1]:7 [ print2::j#2 print2::j#1 ]
Allocated zp[2]:8 [ print2::msg#4 ]
Allocated zp[2]:10 [ print2::at#4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] if(0!=print2::msg#4[print2::i#2]) goto print2::@2 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 ] ( print2:1 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 ] { }  print2:3 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ print2::i#2 print2::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ print2::j#2 print2::j#1 ]
Statement [9] print_char::at#0 = print2::at#4 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 ] ( print2:1 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  print2:3 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  ) always clobbers reg byte a 
Statement [11] print_char::ch#0 = print2::msg#4[print2::i#2] [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 print_char::idx#0 print_char::ch#0 ] ( print2:1 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 print_char::idx#0 print_char::ch#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  print2:3 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 print_char::idx#0 print_char::ch#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ print_char::idx#0 ]
Statement [7] if(0!=print2::msg#4[print2::i#2]) goto print2::@2 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 ] ( print2:1 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 ] { }  print2:3 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 ] { }  ) always clobbers reg byte a 
Statement [9] print_char::at#0 = print2::at#4 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 ] ( print2:1 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  print2:3 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  ) always clobbers reg byte a 
Statement [11] print_char::ch#0 = print2::msg#4[print2::i#2] [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 print_char::idx#0 print_char::ch#0 ] ( print2:1 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 print_char::idx#0 print_char::ch#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  print2:3 [ print2::msg#4 print2::at#4 print2::i#2 print2::j#2 print_char::at#0 print_char::idx#0 print_char::ch#0 ] { { print_char::at#0 = print2::at#4 } { print_char::idx#0 = print2::j#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:8 [ print2::msg#4 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ print2::at#4 ] : zp[2]:10 , 
Potential registers zp[1]:6 [ print2::i#2 print2::i#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ print2::j#2 print2::j#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ print_char::at#0 ] : zp[2]:4 , 
Potential registers zp[1]:3 [ print_char::idx#0 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ print_char::ch#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 1,102: zp[1]:2 [ print_char::ch#0 ] 551: zp[1]:3 [ print_char::idx#0 ] 367.33: zp[2]:4 [ print_char::at#0 ] 
Uplift Scope [print2] 259.71: zp[1]:6 [ print2::i#2 print2::i#1 ] 151.5: zp[1]:7 [ print2::j#2 print2::j#1 ] 22.44: zp[2]:8 [ print2::msg#4 ] 11.22: zp[2]:10 [ print2::at#4 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print_char] best 886 combination reg byte a [ print_char::ch#0 ] reg byte x [ print_char::idx#0 ] zp[2]:4 [ print_char::at#0 ] 
Uplifting [print2] best 766 combination zp[1]:6 [ print2::i#2 print2::i#1 ] reg byte x [ print2::j#2 print2::j#1 ] zp[2]:8 [ print2::msg#4 ] zp[2]:10 [ print2::at#4 ] 
Uplifting [main] best 766 combination 
Uplifting [] best 766 combination 
Attempting to uplift remaining variables inzp[1]:6 [ print2::i#2 print2::i#1 ]
Uplifting [print2] best 766 combination zp[1]:6 [ print2::i#2 print2::i#1 ] 
Coalescing zero page register [ zp[2]:10 [ print2::at#4 ] ] with [ zp[2]:4 [ print_char::at#0 ] ] - score: 1
Allocated (was zp[2]:10) zp[2]:2 [ print2::at#4 print_char::at#0 ]
Allocated (was zp[1]:6) zp[1]:4 [ print2::i#2 print2::i#1 ]
Allocated (was zp[2]:8) zp[2]:5 [ print2::msg#4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as register on a specific ZP address
  // Upstart
  // Commodore 64 PRG executable file
.file [name="var-register-zp-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = $400
.segment Code
  // main
main: {
    // [1] call print2
    // [5] phi from main to print2 [phi:main->print2]
  print2_from_main:
    // [5] phi print2::at#4 = screen [phi:main->print2#0] -- pbuz1=pbuc1 
    lda #<screen
    sta.z print2.at
    lda #>screen
    sta.z print2.at+1
    // [5] phi print2::msg#4 = main::msg [phi:main->print2#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print2.msg
    lda #>msg
    sta.z print2.msg+1
    jsr print2
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print2
    // [5] phi from main::@1 to print2 [phi:main::@1->print2]
  print2_from___b1:
    // [5] phi print2::at#4 = screen+$50 [phi:main::@1->print2#0] -- pbuz1=pbuc1 
    lda #<screen+$50
    sta.z print2.at
    lda #>screen+$50
    sta.z print2.at+1
    // [5] phi print2::msg#4 = main::msg1 [phi:main::@1->print2#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print2.msg
    lda #>msg1
    sta.z print2.msg+1
    jsr print2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
  .segment Data
    msg: .text "hello"
    .byte 0
    msg1: .text "world"
    .byte 0
}
.segment Code
  // print2
// void print2(__zp(2) char *at, __zp(5) char *msg)
print2: {
    .label i = 4
    .label msg = 5
    .label at = 2
    // [6] phi from print2 to print2::@1 [phi:print2->print2::@1]
  __b1_from_print2:
    // [6] phi print2::j#2 = 0 [phi:print2->print2::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi print2::i#2 = 0 [phi:print2->print2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // print2::@1
  __b1:
    // [7] if(0!=print2::msg#4[print2::i#2]) goto print2::@2 -- 0_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print2::@return
  __breturn:
    // [8] return 
    rts
    // print2::@2
  __b2:
    // [9] print_char::at#0 = print2::at#4
    // [10] print_char::idx#0 = print2::j#2
    // [11] print_char::ch#0 = print2::msg#4[print2::i#2] -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (msg),y
    // [12] call print_char
    jsr print_char
    jmp __b3
    // print2::@3
  __b3:
    // [13] print2::j#1 = print2::j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [14] print2::i#1 = ++ print2::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [6] phi from print2::@3 to print2::@1 [phi:print2::@3->print2::@1]
  __b1_from___b3:
    // [6] phi print2::j#2 = print2::j#1 [phi:print2::@3->print2::@1#0] -- register_copy 
    // [6] phi print2::i#2 = print2::i#1 [phi:print2::@3->print2::@1#1] -- register_copy 
    jmp __b1
}
  // print_char
// void print_char(__zp(2) char *at, __register(X) char idx, __register(A) char ch)
print_char: {
    .label at = 2
    // [15] print_char::at#0[print_char::idx#0] = print_char::ch#0 -- pbuz1_derefidx_vbuxx=vbuaa 
    stx.z $ff
    ldy.z $ff
    sta (at),y
    jmp __breturn
    // print_char::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Removing instruction __b1_from_main:
Removing instruction print2_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print2_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_print2:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
__constant char main::msg[6] = "hello"
__constant char main::msg1[6] = "world"
void print2(char *at , char *msg)
char *print2::at
char *print2::at#4 // at zp[2]:2 11.222222222222221
char print2::i
char print2::i#1 // i zp[1]:4 202.0
char print2::i#2 // i zp[1]:4 57.714285714285715
char print2::j
char print2::j#1 // reg byte x 101.0
char print2::j#2 // reg byte x 50.5
char *print2::msg
char *print2::msg#4 // msg zp[2]:5 22.444444444444443
void print_char(char *at , char idx , char ch)
char *print_char::at
char *print_char::at#0 // at zp[2]:2 367.33333333333337
char print_char::ch
char print_char::ch#0 // reg byte a 1102.0
char print_char::idx
char print_char::idx#0 // reg byte x 551.0
__constant char *screen = (char *) 1024

zp[2]:5 [ print2::msg#4 ]
zp[2]:2 [ print2::at#4 print_char::at#0 ]
zp[1]:4 [ print2::i#2 print2::i#1 ]
reg byte x [ print2::j#2 print2::j#1 ]
reg byte x [ print_char::idx#0 ]
reg byte a [ print_char::ch#0 ]


FINAL ASSEMBLER
Score: 547

  // File Comments
// Test declaring a variable as register on a specific ZP address
  // Upstart
  // Commodore 64 PRG executable file
.file [name="var-register-zp-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = $400
.segment Code
  // main
main: {
    // print2(screen, "hello")
    // [1] call print2
    // [5] phi from main to print2 [phi:main->print2]
    // [5] phi print2::at#4 = screen [phi:main->print2#0] -- pbuz1=pbuc1 
    lda #<screen
    sta.z print2.at
    lda #>screen
    sta.z print2.at+1
    // [5] phi print2::msg#4 = main::msg [phi:main->print2#1] -- pbuz1=pbuc1 
    lda #<msg
    sta.z print2.msg
    lda #>msg
    sta.z print2.msg+1
    jsr print2
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print2(screen+80, "world")
    // [3] call print2
    // [5] phi from main::@1 to print2 [phi:main::@1->print2]
    // [5] phi print2::at#4 = screen+$50 [phi:main::@1->print2#0] -- pbuz1=pbuc1 
    lda #<screen+$50
    sta.z print2.at
    lda #>screen+$50
    sta.z print2.at+1
    // [5] phi print2::msg#4 = main::msg1 [phi:main::@1->print2#1] -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print2.msg
    lda #>msg1
    sta.z print2.msg+1
    jsr print2
    // main::@return
    // }
    // [4] return 
    rts
  .segment Data
    msg: .text "hello"
    .byte 0
    msg1: .text "world"
    .byte 0
}
.segment Code
  // print2
// void print2(__zp(2) char *at, __zp(5) char *msg)
print2: {
    .label i = 4
    .label msg = 5
    .label at = 2
    // [6] phi from print2 to print2::@1 [phi:print2->print2::@1]
    // [6] phi print2::j#2 = 0 [phi:print2->print2::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi print2::i#2 = 0 [phi:print2->print2::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z i
    // print2::@1
  __b1:
    // for(byte i=0; msg[i]; i++)
    // [7] if(0!=print2::msg#4[print2::i#2]) goto print2::@2 -- 0_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (msg),y
    cmp #0
    bne __b2
    // print2::@return
    // }
    // [8] return 
    rts
    // print2::@2
  __b2:
    // print_char(at, j, msg[i])
    // [9] print_char::at#0 = print2::at#4
    // [10] print_char::idx#0 = print2::j#2
    // [11] print_char::ch#0 = print2::msg#4[print2::i#2] -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (msg),y
    // [12] call print_char
    jsr print_char
    // print2::@3
    // j += 2
    // [13] print2::j#1 = print2::j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // for(byte i=0; msg[i]; i++)
    // [14] print2::i#1 = ++ print2::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [6] phi from print2::@3 to print2::@1 [phi:print2::@3->print2::@1]
    // [6] phi print2::j#2 = print2::j#1 [phi:print2::@3->print2::@1#0] -- register_copy 
    // [6] phi print2::i#2 = print2::i#1 [phi:print2::@3->print2::@1#1] -- register_copy 
    jmp __b1
}
  // print_char
// void print_char(__zp(2) char *at, __register(X) char idx, __register(A) char ch)
print_char: {
    .label at = 2
    // at[idx] = ch
    // [15] print_char::at#0[print_char::idx#0] = print_char::ch#0 -- pbuz1_derefidx_vbuxx=vbuaa 
    stx.z $ff
    ldy.z $ff
    sta (at),y
    // print_char::@return
    // }
    // [16] return 
    rts
}
  // File Data

