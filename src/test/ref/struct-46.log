Fixing struct type size struct netconfig to 96
Fixing struct type size struct netconfig to 96
Fixing struct type size struct netconfig to 96
Fixing struct type SIZE_OF struct netconfig to 96
Fixing struct type SIZE_OF struct netconfig to 96
Inlined call call __init 
Removing C-classic struct-unwound assignment main::x = struct-unwound {*(&main::x)}
Removing C-classic struct-unwound assignment main::a = struct-unwound {*(&main::a)}
Removing C-classic struct-unwound assignment main::b = struct-unwound {*(&main::b)}

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  *(&main::x) = memset(struct other, SIZEOF_STRUCT_OTHER)
  *(&main::a) = memcpy(*(&$0), struct netconfig, SIZEOF_STRUCT_NETCONFIG)
  main::$0 = OUT + 0
  *main::$0 = ((byte*)&main::a+OFFSET_STRUCT_NETCONFIG_SSID)[0]
  *(&main::b) = memset(struct netconfig, SIZEOF_STRUCT_NETCONFIG)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
constant struct netconfig $0 = { ssid: "123", password: "abc" }
constant byte OFFSET_STRUCT_NETCONFIG_SSID = 0
constant const byte* OUT = (byte*)$8000
constant byte SIZEOF_STRUCT_NETCONFIG = $60
constant byte SIZEOF_STRUCT_OTHER = 2
void __start()
void main()
const byte*~ main::$0
struct netconfig main::a loadstore
struct netconfig main::b loadstore
struct other main::x loadstore

Adding number conversion cast (unumber) 0 in main::$0 = OUT + 0
Adding number conversion cast (unumber) 0 in *main::$0 = ((byte*)&main::a+OFFSET_STRUCT_NETCONFIG_SSID)[0]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 32768
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [2] main::$0 = OUT + 0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = OUT+0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero OUT in 
Simplifying expression containing zero (byte*)&main::a+OFFSET_STRUCT_NETCONFIG_SSID in [3] *main::$0 = ((byte*)&main::a+OFFSET_STRUCT_NETCONFIG_SSID)[0]
Simplifying expression containing zero (byte*)&main::a in [3] *main::$0 = *((byte*)&main::a+OFFSET_STRUCT_NETCONFIG_SSID)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_NETCONFIG_SSID
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$0 = OUT
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *(&main::x) = memset(struct other, SIZEOF_STRUCT_OTHER)
  [1] *(&main::a) = memcpy(*(&$0), struct netconfig, SIZEOF_STRUCT_NETCONFIG)
  [2] *OUT = *((byte*)&main::a)
  [3] *(&main::b) = memset(struct netconfig, SIZEOF_STRUCT_NETCONFIG)
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
struct netconfig main::a loadstore
struct netconfig main::b loadstore
struct other main::x loadstore

Initial phi equivalence classes
Added variable main::x to live range equivalence class [ main::x ]
Added variable main::a to live range equivalence class [ main::a ]
Added variable main::b to live range equivalence class [ main::b ]
Complete equivalence classes
[ main::x ]
[ main::a ]
[ main::b ]
Allocated mem[2] [ main::x ]
Allocated mem[96] [ main::a ]
Allocated mem[96] [ main::b ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(&main::x) = memset(struct other, SIZEOF_STRUCT_OTHER) [ main::a main::b ] (  [ main::a main::b ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] *(&main::a) = memcpy(*(&$0), struct netconfig, SIZEOF_STRUCT_NETCONFIG) [ main::a main::b ] (  [ main::a main::b ] { }  ) always clobbers reg byte a reg byte y 
Statement [2] *OUT = *((byte*)&main::a) [ main::b ] (  [ main::b ] { }  ) always clobbers reg byte a 
Statement [3] *(&main::b) = memset(struct netconfig, SIZEOF_STRUCT_NETCONFIG) [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Potential registers mem[2] [ main::x ] : mem[2] , 
Potential registers mem[96] [ main::a ] : mem[96] , 
Potential registers mem[96] [ main::b ] : mem[96] , 

REGISTER UPLIFT SCOPES
Uplift Scope [netconfig] 
Uplift Scope [other] 
Uplift Scope [main] 0: mem[2] [ main::x ] 0: mem[96] [ main::a ] 0: mem[96] [ main::b ] 
Uplift Scope [] 

Uplifting [netconfig] best 59 combination 
Uplifting [other] best 59 combination 
Uplifting [main] best 59 combination mem[2] [ main::x ] mem[96] [ main::a ] mem[96] [ main::b ] 
Uplifting [] best 59 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// https://gitlab.com/camelot/kickc/-/issues/587
// Creating variable instances of structs with array members fails to compile
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-46.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_OTHER = 2
  .const SIZEOF_STRUCT_NETCONFIG = $60
  .label OUT = $8000
.segment Code
  // main
main: {
    // [0] *(&main::x) = memset(struct other, SIZEOF_STRUCT_OTHER) -- _deref_pssc1=_memset_vbuc2 
    ldy #SIZEOF_STRUCT_OTHER
    lda #0
  !:
    dey
    sta x,y
    bne !-
    // [1] *(&main::a) = memcpy(*(&$0), struct netconfig, SIZEOF_STRUCT_NETCONFIG) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_NETCONFIG
  !:
    lda __0-1,y
    sta a-1,y
    dey
    bne !-
    // [2] *OUT = *((byte*)&main::a) -- _deref_pbuc1=_deref_pbuc2 
    lda a
    sta OUT
    // [3] *(&main::b) = memset(struct netconfig, SIZEOF_STRUCT_NETCONFIG) -- _deref_pssc1=_memset_vbuc2 
    ldy #SIZEOF_STRUCT_NETCONFIG
    lda #0
  !:
    dey
    sta b,y
    bne !-
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
  .segment Data
    x: .fill SIZEOF_STRUCT_OTHER, 0
    a: .fill SIZEOF_STRUCT_NETCONFIG, 0
    b: .fill SIZEOF_STRUCT_NETCONFIG, 0
}
  // File Data
  __0: .text "123"
  .byte 0
  .fill $1c, 0
  .text "abc"
  .byte 0
  .fill $3c, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant struct netconfig $0 = { ssid: "123", password: "abc" }
constant const byte* OUT = (byte*) 32768
constant byte SIZEOF_STRUCT_NETCONFIG = $60
constant byte SIZEOF_STRUCT_OTHER = 2
void main()
struct netconfig main::a loadstore mem[96]
struct netconfig main::b loadstore mem[96]
struct other main::x loadstore mem[2]

mem[2] [ main::x ]
mem[96] [ main::a ]
mem[96] [ main::b ]


FINAL ASSEMBLER
Score: 56

  // File Comments
// https://gitlab.com/camelot/kickc/-/issues/587
// Creating variable instances of structs with array members fails to compile
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-46.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_OTHER = 2
  .const SIZEOF_STRUCT_NETCONFIG = $60
  .label OUT = $8000
.segment Code
  // main
main: {
    // Other x
    // [0] *(&main::x) = memset(struct other, SIZEOF_STRUCT_OTHER) -- _deref_pssc1=_memset_vbuc2 
    ldy #SIZEOF_STRUCT_OTHER
    lda #0
  !:
    dey
    sta x,y
    bne !-
    // NetConfig a = {"123", "abc"}
    // [1] *(&main::a) = memcpy(*(&$0), struct netconfig, SIZEOF_STRUCT_NETCONFIG) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_NETCONFIG
  !:
    lda __0-1,y
    sta a-1,y
    dey
    bne !-
    // *(OUT + 0) = a.ssid[0]
    // [2] *OUT = *((byte*)&main::a) -- _deref_pbuc1=_deref_pbuc2 
    lda a
    sta OUT
    // NetConfig b
    // [3] *(&main::b) = memset(struct netconfig, SIZEOF_STRUCT_NETCONFIG) -- _deref_pssc1=_memset_vbuc2 
    ldy #SIZEOF_STRUCT_NETCONFIG
    lda #0
  !:
    dey
    sta b,y
    bne !-
    // main::@return
    // }
    // [4] return 
    rts
  .segment Data
    x: .fill SIZEOF_STRUCT_OTHER, 0
    a: .fill SIZEOF_STRUCT_NETCONFIG, 0
    b: .fill SIZEOF_STRUCT_NETCONFIG, 0
}
  // File Data
  __0: .text "123"
  .byte 0
  .fill $1c, 0
  .text "abc"
  .byte 0
  .fill $3c, 0

