
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) GREEN
  [3] call test_bytes 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call test_sbytes 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

(void()) test_sbytes()
test_sbytes: scope:[test_sbytes]  from main::@2
  [7] phi()
  [8] call assert_sbyte 
  to:test_sbytes::@1
test_sbytes::@1: scope:[test_sbytes]  from test_sbytes
  [9] phi()
  [10] call assert_sbyte 
  to:test_sbytes::@2
test_sbytes::@2: scope:[test_sbytes]  from test_sbytes::@1
  [11] phi()
  [12] call assert_sbyte 
  to:test_sbytes::@3
test_sbytes::@3: scope:[test_sbytes]  from test_sbytes::@2
  [13] phi()
  [14] call assert_sbyte 
  to:test_sbytes::@4
test_sbytes::@4: scope:[test_sbytes]  from test_sbytes::@3
  [15] phi()
  [16] call assert_sbyte 
  to:test_sbytes::@return
test_sbytes::@return: scope:[test_sbytes]  from test_sbytes::@4
  [17] return 
  to:@return

(void()) assert_sbyte((byte*) assert_sbyte::msg , (signed byte) assert_sbyte::b , (signed byte) assert_sbyte::c)
assert_sbyte: scope:[assert_sbyte]  from test_sbytes test_sbytes::@1 test_sbytes::@2 test_sbytes::@3 test_sbytes::@4
  [18] (signed byte) assert_sbyte::c#5 ← phi( test_sbytes/(signed byte) 0 test_sbytes::@1/(signed byte) 2 test_sbytes::@2/(signed byte) -2 test_sbytes::@3/(signed byte) 2 test_sbytes::@4/(signed byte) 2 )
  [18] (signed byte) assert_sbyte::b#5 ← phi( test_sbytes/(const signed byte) test_sbytes::bb test_sbytes::@1/(const signed byte) test_sbytes::bc#0 test_sbytes::@2/(const signed byte) test_sbytes::bd#0 test_sbytes::@3/(const signed byte) test_sbytes::be#0 test_sbytes::@4/(const signed byte) test_sbytes::bf )
  [18] (byte*) assert_sbyte::msg#5 ← phi( test_sbytes/(const byte*) msg test_sbytes::@1/(const byte*) msg1 test_sbytes::@2/(const byte*) test_sbytes::msg2 test_sbytes::@3/(const byte*) test_sbytes::msg3 test_sbytes::@4/(const byte*) test_sbytes::msg4 )
  [19] (byte*) print_str::str#5 ← (byte*) assert_sbyte::msg#5
  [20] (byte*) print_char_cursor#92 ← (byte*) print_line_cursor#0
  [21] call print_str 
  to:assert_sbyte::@4
assert_sbyte::@4: scope:[assert_sbyte]  from assert_sbyte
  [22] phi()
  [23] call print_str 
  to:assert_sbyte::@5
assert_sbyte::@5: scope:[assert_sbyte]  from assert_sbyte::@4
  [24] if((signed byte) assert_sbyte::b#5!=(signed byte) assert_sbyte::c#5) goto assert_sbyte::@1
  to:assert_sbyte::@3
assert_sbyte::@3: scope:[assert_sbyte]  from assert_sbyte::@5
  [25] phi()
  [26] call print_str 
  to:assert_sbyte::@2
assert_sbyte::@2: scope:[assert_sbyte]  from assert_sbyte::@1 assert_sbyte::@3
  [27] phi()
  [28] call print_ln 
  to:assert_sbyte::@return
assert_sbyte::@return: scope:[assert_sbyte]  from assert_sbyte::@2
  [29] return 
  to:@return
assert_sbyte::@1: scope:[assert_sbyte]  from assert_sbyte::@5
  [30] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED
  [31] call print_str 
  to:assert_sbyte::@2

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from assert_byte assert_byte::@1 assert_byte::@3 assert_byte::@4 assert_sbyte assert_sbyte::@1 assert_sbyte::@3 assert_sbyte::@4
  [32] (byte*) print_char_cursor#87 ← phi( assert_byte/(byte*) print_char_cursor#77 assert_byte::@1/(byte*) print_char_cursor#1 assert_byte::@3/(byte*) print_char_cursor#1 assert_byte::@4/(byte*) print_char_cursor#1 assert_sbyte/(byte*) print_char_cursor#92 assert_sbyte::@1/(byte*) print_char_cursor#1 assert_sbyte::@3/(byte*) print_char_cursor#1 assert_sbyte::@4/(byte*) print_char_cursor#1 )
  [32] (byte*) print_str::str#12 ← phi( assert_byte/(byte*) print_str::str#1 assert_byte::@1/(const byte*) str1 assert_byte::@3/(const byte*) str2 assert_byte::@4/(const byte*) str assert_sbyte/(byte*) print_str::str#5 assert_sbyte::@1/(const byte*) str1 assert_sbyte::@3/(const byte*) str2 assert_sbyte::@4/(const byte*) str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [33] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#87 print_str::@3/(byte*) print_char_cursor#4 )
  [33] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#12 print_str::@3/(byte*) print_str::str#0 )
  [34] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [35] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [36] (byte) print_char::ch#0 ← *((byte*) print_str::str#10)
  [37] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [38] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  to:print_str::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  [39] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#0
  [40] (byte*) print_char_cursor#4 ← ++ (byte*) print_char_cursor#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [41] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from assert_byte::@2 assert_sbyte::@2
  [42] (byte*) print_line_cursor#49 ← phi( assert_byte::@2/(byte*) print_line_cursor#52 assert_sbyte::@2/(byte*) print_line_cursor#0 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [43] (byte*) print_line_cursor#25 ← phi( print_ln/(byte*) print_line_cursor#49 print_ln::@1/(byte*) print_line_cursor#0 )
  [44] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#25 + (byte) $28
  [45] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#1) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [46] return 
  to:@return

(void()) test_bytes()
test_bytes: scope:[test_bytes]  from main::@1
  [47] phi()
  [48] call assert_byte 
  to:test_bytes::@1
test_bytes::@1: scope:[test_bytes]  from test_bytes
  [49] (byte*) print_char_cursor#98 ← (byte*) print_line_cursor#0
  [50] call assert_byte 
  to:test_bytes::@2
test_bytes::@2: scope:[test_bytes]  from test_bytes::@1
  [51] (byte*) print_char_cursor#99 ← (byte*) print_line_cursor#0
  [52] call assert_byte 
  to:test_bytes::@return
test_bytes::@return: scope:[test_bytes]  from test_bytes::@2
  [53] return 
  to:@return

(void()) assert_byte((byte*) assert_byte::msg , (byte) assert_byte::b , (byte) assert_byte::c)
assert_byte: scope:[assert_byte]  from test_bytes test_bytes::@1 test_bytes::@2
  [54] (byte*) print_line_cursor#52 ← phi( test_bytes/(const byte*) print_screen#0 test_bytes::@1/(byte*) print_line_cursor#0 test_bytes::@2/(byte*) print_line_cursor#0 )
  [54] (byte) assert_byte::c#3 ← phi( test_bytes/(byte) 0 test_bytes::@1/(byte) 2 test_bytes::@2/(byte) $fe )
  [54] (byte) assert_byte::b#3 ← phi( test_bytes/(const byte) test_bytes::bb test_bytes::@1/(const byte) test_bytes::bc#0 test_bytes::@2/(const byte) test_bytes::bd#0 )
  [54] (byte*) print_char_cursor#77 ← phi( test_bytes/(const byte*) print_screen#0 test_bytes::@1/(byte*) print_char_cursor#98 test_bytes::@2/(byte*) print_char_cursor#99 )
  [54] (byte*) assert_byte::msg#3 ← phi( test_bytes/(const byte*) msg test_bytes::@1/(const byte*) msg1 test_bytes::@2/(const byte*) test_bytes::msg2 )
  [55] (byte*) print_str::str#1 ← (byte*) assert_byte::msg#3
  [56] call print_str 
  to:assert_byte::@4
assert_byte::@4: scope:[assert_byte]  from assert_byte
  [57] phi()
  [58] call print_str 
  to:assert_byte::@5
assert_byte::@5: scope:[assert_byte]  from assert_byte::@4
  [59] if((byte) assert_byte::b#3!=(byte) assert_byte::c#3) goto assert_byte::@1
  to:assert_byte::@3
assert_byte::@3: scope:[assert_byte]  from assert_byte::@5
  [60] phi()
  [61] call print_str 
  to:assert_byte::@2
assert_byte::@2: scope:[assert_byte]  from assert_byte::@1 assert_byte::@3
  [62] phi()
  [63] call print_ln 
  to:assert_byte::@return
assert_byte::@return: scope:[assert_byte]  from assert_byte::@2
  [64] return 
  to:@return
assert_byte::@1: scope:[assert_byte]  from assert_byte::@5
  [65] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) RED
  [66] call print_str 
  to:assert_byte::@2

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [67] phi()
  [68] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [69] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [70] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [71] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [72] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [73] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [74] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [75] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
