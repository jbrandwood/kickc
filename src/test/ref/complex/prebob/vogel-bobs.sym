(label) @1
(label) @begin
(label) @end
(const byte*) BOB_CHARSET = (byte*) 8192
(const byte*) BOB_SCREEN = (byte*) 10240
(const byte) BOB_SHIFTS_X = (byte) 4
(const byte) BOB_SHIFTS_Y = (byte) 8
(const byte) BOB_SUBTABLE_SIZE = (const byte) BOB_SHIFTS_X*(const byte) BOB_SHIFTS_Y
(const byte*) BOB_TABLES[(number) 9*(number) 8*(number) 4]  = { fill( 9*8*4, 0) }
(const byte*) BORDERCOL = (byte*) 53280
(const byte*) CHARSET_BASIC = (byte*) 4096
(const byte*) CIA1_PORT_A = (byte*) 56320
(const byte*) CIA1_PORT_B = (byte*) 56321
(const byte*) CIA2_PORT_A = (byte*) 56576
(const byte*) CIA2_PORT_A_DDR = (byte*) 56578
(const signed byte*) COS = (const signed byte*) SIN+(byte) $40
(const byte*) D018 = (byte*) 53272
(const byte) KEY_SPACE = (byte) $3c
(const word*) MUL40[(number) $20]  = { fill( $20, 0) }
(const byte) NUM_BOBS = (byte) $14
(const byte*) PROTO_BOB[(number) 3*(number) 3*(number) 8]  = kickasm {{ .var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RASTER = (byte*) 53266
(const byte**) RENDERBOB_CLEANUP[(const byte) NUM_BOBS]  = { fill( NUM_BOBS, 0) }
(const byte*) SCREEN_BASIC = (byte*) 1024
(const signed byte*) SIN[(number) $140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
(const byte) SIZEOF_POINTER = (byte) 2
(byte()) bobCharsetFindOrAddGlyph((byte*) bobCharsetFindOrAddGlyph::bob_glyph)
(label) bobCharsetFindOrAddGlyph::@1
(label) bobCharsetFindOrAddGlyph::@2
(label) bobCharsetFindOrAddGlyph::@3
(label) bobCharsetFindOrAddGlyph::@4
(label) bobCharsetFindOrAddGlyph::@5
(label) bobCharsetFindOrAddGlyph::@6
(label) bobCharsetFindOrAddGlyph::@7
(label) bobCharsetFindOrAddGlyph::@8
(label) bobCharsetFindOrAddGlyph::@9
(label) bobCharsetFindOrAddGlyph::@return
(byte*) bobCharsetFindOrAddGlyph::bob_glyph
(byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 bob_glyph zp[2]:6 2002.0
(byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 bob_glyph zp[2]:6 7400.200000000001
(byte) bobCharsetFindOrAddGlyph::found
(byte) bobCharsetFindOrAddGlyph::found#2 reg byte a 10001.0
(byte*) bobCharsetFindOrAddGlyph::glyph_cursor
(byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 glyph_cursor zp[2]:17 20002.0
(byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 glyph_cursor zp[2]:17 10000.307692307691
(byte) bobCharsetFindOrAddGlyph::glyph_id
(byte) bobCharsetFindOrAddGlyph::glyph_id#1 reg byte x 10001.0
(byte) bobCharsetFindOrAddGlyph::glyph_id#11 reg byte x 1937.75
(byte) bobCharsetFindOrAddGlyph::i
(byte) bobCharsetFindOrAddGlyph::i#1 reg byte y 200002.0
(byte) bobCharsetFindOrAddGlyph::i#2 reg byte y 166668.3333333333
(byte) bobCharsetFindOrAddGlyph::i1
(byte) bobCharsetFindOrAddGlyph::i1#1 reg byte y 20002.0
(byte) bobCharsetFindOrAddGlyph::i1#2 reg byte y 16668.333333333332
(byte) bobCharsetFindOrAddGlyph::return
(byte) bobCharsetFindOrAddGlyph::return#1 reg byte a 2002.0
(byte) bob_charset_next_id
(byte) bob_charset_next_id#14 bob_charset_next_id zp[1]:13 12.0
(byte) bob_charset_next_id#16 bob_charset_next_id zp[1]:13 1000.5454545454544
(byte) bob_charset_next_id#21 bob_charset_next_id zp[1]:13 275.5
(byte) bob_charset_next_id#23 bob_charset_next_id zp[1]:13 1400.3333333333335
(byte) bob_charset_next_id#30 bob_charset_next_id zp[1]:13 37.33333333333333
(byte) bob_charset_next_id#8 bob_charset_next_id zp[1]:13 4.0
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 reg byte a 4.0
(label) keyboard_key_pressed::@1
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(const byte) keyboard_key_pressed::colidx#0 colidx = (const byte) KEY_SPACE&(byte) 7
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 reg byte a 6.0
(byte) keyboard_key_pressed::return#2 reg byte a 22.0
(byte) keyboard_key_pressed::return#3 reg byte a 22.0
(byte) keyboard_key_pressed::rowidx
(const byte) keyboard_key_pressed::rowidx#0 rowidx = (const byte) KEY_SPACE>>(byte) 3
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 1.3333333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(void()) main()
(signed word~) main::$10 zp[2]:11 202.0
(signed word~) main::$12 zp[2]:11 202.0
(signed word~) main::$13 zp[2]:11 202.0
(byte~) main::$19 reg byte a 22.0
(byte~) main::$21 reg byte a 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::a
(byte) main::a#1 a zp[1]:4 28.857142857142858
(byte) main::a#2 a zp[1]:4 25.9375
(byte) main::a#6 a zp[1]:4 22.0
(byte) main::angle
(byte) main::angle#1 angle zp[1]:2 3.6666666666666665
(byte) main::angle#8 angle zp[1]:2 1.1785714285714286
(byte) main::i
(byte) main::i#1 i zp[1]:5 151.5
(byte) main::i#2 i zp[1]:5 9.619047619047619
(signed byte) main::r
(signed byte) main::r#1 r zp[1]:3 33.666666666666664
(signed byte) main::r#2 r zp[1]:3 23.764705882352942
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) BOB_SCREEN&(word) $3fff*(byte) 4|>(word)(const byte*) BOB_CHARSET/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::toD0182
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(const byte) main::toD0182_return#0 toD0182_return = >(word)(const byte*) SCREEN_BASIC&(word) $3fff*(byte) 4|>(word)(const byte*) CHARSET_BASIC/(byte) 4&(byte) $f
(byte*) main::toD0182_screen
(label) main::vicSelectGfxBank1
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3
(label) main::vicSelectGfxBank2
(label) main::vicSelectGfxBank2_@1
(byte*) main::vicSelectGfxBank2_gfx
(label) main::vicSelectGfxBank2_toDd001
(byte*) main::vicSelectGfxBank2_toDd001_gfx
(byte) main::vicSelectGfxBank2_toDd001_return
(const byte) main::vicSelectGfxBank2_toDd001_return#0 vicSelectGfxBank2_toDd001_return = (byte) 3
(signed word) main::x
(signed word) main::x#0 x zp[2]:8 18.363636363636363
(signed word) main::y
(signed word) main::y#0 y zp[2]:11 40.4
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) 0
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:6 22.0
(byte*) memset::dst#2 dst zp[2]:6 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) BOB_SCREEN
(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
(label) mulf8s::@1
(label) mulf8s::@2
(label) mulf8s::@return
(signed byte) mulf8s::a
(signed byte) mulf8s::a#0 reg byte a 101.0
(signed byte) mulf8s::a#1 reg byte a 101.0
(signed byte) mulf8s::b
(signed byte) mulf8s::b#0 reg byte x 202.0
(signed byte) mulf8s::b#1 reg byte x 202.0
(signed byte) mulf8s::b#2 reg byte x 68.0
(label) mulf8s::mulf8s_prepare1
(signed byte) mulf8s::mulf8s_prepare1_a
(signed byte) mulf8s::mulf8s_prepare1_a#0 reg byte a 202.0
(signed word) mulf8s::return
(signed word) mulf8s::return#0 return zp[2]:11 51.0
(signed word) mulf8s::return#2 return zp[2]:11 202.0
(signed word) mulf8s::return#3 return zp[2]:11 202.0
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$12 reg byte a 4.0
(byte~) mulf8s_prepared::$15 reg byte a 4.0
(byte~) mulf8s_prepared::$16 reg byte a 4.0
(byte~) mulf8s_prepared::$8 reg byte a 4.0
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@5
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0 b zp[1]:14 0.4
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 m zp[2]:11 2.0
(word) mulf8s_prepared::m#1 m zp[2]:11 4.0
(word) mulf8s_prepared::m#2 m zp[2]:11 4.0
(word) mulf8s_prepared::m#4 m zp[2]:11 1.3333333333333333
(word) mulf8s_prepared::m#5 m zp[2]:11 2.5
(const signed byte*) mulf8s_prepared::memA = (signed byte*) 253
(signed word) mulf8s_prepared::return
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#0 reg byte a 4.0
(const byte*) mulf8u_prepare::memA = (byte*) 253
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0 reg byte a 4.0
(const byte*) mulf8u_prepared::memB = (byte*) 255
(const byte*) mulf8u_prepared::resL = (byte*) 254
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 return zp[2]:11 1.3333333333333333
(word) mulf8u_prepared::return#2 return zp[2]:11 4.0
(void()) mulf_init()
(byte~) mulf_init::$1 reg byte a 22.0
(byte~) mulf_init::$4 reg byte a 22.0
(byte~) mulf_init::$5 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 c zp[1]:13 2.5384615384615383
(byte) mulf_init::c#2 c zp[1]:13 11.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp[1]:14 4.125
(byte) mulf_init::dir#4 dir zp[1]:14 11.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp[2]:11 11.0
(word) mulf_init::sqr#2 sqr zp[2]:11 22.0
(word) mulf_init::sqr#3 sqr zp[2]:11 9.166666666666666
(word) mulf_init::sqr#4 sqr zp[2]:11 5.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp[2]:15 7.333333333333333
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp[2]:15 2.75
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp[2]:6 22.0
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp[2]:6 3.142857142857143
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp[2]:8 3.6666666666666665
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp[2]:8 8.25
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp[2]:17 22.0
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp[2]:17 4.888888888888889
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 reg byte x 11.0
(byte) mulf_init::x_2#2 reg byte x 5.5
(byte) mulf_init::x_2#3 reg byte x 6.6000000000000005
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 6.6000000000000005
(byte) mulf_init::x_255#2 reg byte x 8.8
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(void()) prepareBobs()
(byte~) prepareBobs::$6 reg byte a 2002.0
(label) prepareBobs::@1
(label) prepareBobs::@10
(label) prepareBobs::@11
(label) prepareBobs::@12
(label) prepareBobs::@13
(label) prepareBobs::@2
(label) prepareBobs::@3
(label) prepareBobs::@4
(label) prepareBobs::@5
(label) prepareBobs::@6
(label) prepareBobs::@7
(label) prepareBobs::@8
(label) prepareBobs::@9
(label) prepareBobs::@return
(byte*) prepareBobs::bob_glyph
(byte*) prepareBobs::bob_glyph#1 bob_glyph zp[2]:6 500.5
(byte*) prepareBobs::bob_glyph#2 bob_glyph zp[2]:6 429.0
(byte*) prepareBobs::bob_table
(byte*) prepareBobs::bob_table#0 bob_table zp[2]:15 202.0
(byte*) prepareBobs::bob_table#1 bob_table zp[2]:15 667.3333333333334
(byte*) prepareBobs::bob_table#2 bob_table zp[2]:15 388.0
(byte) prepareBobs::bob_table_idx
(byte) prepareBobs::bob_table_idx#1 bob_table_idx zp[1]:4 40.4
(byte) prepareBobs::bob_table_idx#12 bob_table_idx zp[1]:4 19.11764705882353
(byte) prepareBobs::bob_table_idx#6 bob_table_idx zp[1]:4 11.0
(byte) prepareBobs::cell
(byte) prepareBobs::cell#1 cell zp[1]:10 2002.0
(byte) prepareBobs::cell#2 cell zp[1]:10 300.29999999999995
(byte) prepareBobs::shift_x
(byte) prepareBobs::shift_x#1 shift_x zp[1]:5 202.0
(byte) prepareBobs::shift_x#2 shift_x zp[1]:5 16.833333333333332
(byte) prepareBobs::shift_y
(byte) prepareBobs::shift_y#1 shift_y zp[1]:2 22.0
(byte) prepareBobs::shift_y#2 shift_y zp[1]:2 1.4347826086956523
(byte*) progress_cursor
(byte*) progress_cursor#15 progress_cursor zp[2]:11 11.0
(byte*) progress_cursor#17 progress_cursor zp[2]:11 201.4
(byte*) progress_cursor#24 progress_cursor zp[2]:11 71.11764705882355
(byte*) progress_cursor#31 progress_cursor zp[2]:11 37.33333333333333
(byte*) progress_cursor#8 progress_cursor zp[2]:11 4.0
(byte) progress_idx
(byte) progress_idx#10 progress_idx zp[1]:3 201.0
(byte) progress_idx#16 progress_idx zp[1]:3 11.0
(byte) progress_idx#25 progress_idx zp[1]:3 86.07142857142856
(byte) progress_idx#31 progress_idx zp[1]:3 37.33333333333333
(byte) progress_idx#8 progress_idx zp[1]:3 3.0
(void()) progress_inc()
(label) progress_inc::@1
(label) progress_inc::@2
(label) progress_inc::@return
(const byte*) progress_inc::progress_chars[]  = { (byte) $20, (byte) $65, (byte) $74, (byte) $75, (byte) $61, (byte) $f6, (byte) $e7, (byte) $ea, (byte) $e0 }
(void()) progress_init((byte*) progress_init::line)
(label) progress_init::@return
(byte*) progress_init::line
(void()) renderBob((byte) renderBob::xpos , (byte) renderBob::ypos)
(byte*~) renderBob::$2 zp[2]:11 4.0
(byte~) renderBob::$4 reg byte a 4.0
(byte~) renderBob::$5 zp[1]:13 2.0
(byte~) renderBob::$6 reg byte a 4.0
(byte~) renderBob::$8 reg byte a 4.0
(label) renderBob::@return
(byte) renderBob::bob_table_idx
(byte) renderBob::bob_table_idx#0 reg byte x 1.8181818181818186
(byte*) renderBob::screen
(byte*) renderBob::screen#0 screen zp[2]:11 1.4666666666666666
(byte) renderBob::x_char_offset
(byte) renderBob::x_char_offset#0 x_char_offset zp[1]:10 0.8
(byte) renderBob::xpos
(byte) renderBob::xpos#0 xpos zp[1]:14 10.499999999999998
(byte) renderBob::y_char_offset
(byte) renderBob::y_char_offset#0 reg byte a 4.0
(word) renderBob::y_offset
(word) renderBob::y_offset#0 y_offset zp[2]:11 4.0
(byte) renderBob::ypos
(byte) renderBob::ypos#0 reg byte x 15.000000000000002
(void()) renderBobCleanup()
(byte~) renderBobCleanup::$1 reg byte a 202.0
(label) renderBobCleanup::@1
(label) renderBobCleanup::@return
(byte) renderBobCleanup::i
(byte) renderBobCleanup::i#1 reg byte x 151.5
(byte) renderBobCleanup::i#2 reg byte x 25.25
(byte*) renderBobCleanup::screen
(byte*) renderBobCleanup::screen#0 screen zp[2]:15 112.22222222222223
(byte**) renderBobCleanupNext
(byte**) renderBobCleanupNext#13 renderBobCleanupNext zp[2]:6 7.357142857142858
(byte**) renderBobCleanupNext#17 renderBobCleanupNext zp[2]:6 3.3870967741935485
(void()) renderBobInit()
(word~) renderBobInit::$0 zp[2]:15 16.5
(word~) renderBobInit::$1 zp[2]:15 11.0
(byte~) renderBobInit::$4 reg byte a 22.0
(byte~) renderBobInit::$5 reg byte a 22.0
(word~) renderBobInit::$6 zp[2]:17 22.0
(word~) renderBobInit::$7 zp[2]:15 22.0
(label) renderBobInit::@1
(label) renderBobInit::@2
(label) renderBobInit::@return
(byte) renderBobInit::i
(byte) renderBobInit::i#1 reg byte x 16.5
(byte) renderBobInit::i#2 reg byte x 11.0
(byte) renderBobInit::y
(byte) renderBobInit::y#1 reg byte x 16.5
(byte) renderBobInit::y#2 reg byte x 4.714285714285714
(void()) shiftProtoBobDown()
(label) shiftProtoBobDown::@1
(label) shiftProtoBobDown::@2
(label) shiftProtoBobDown::@3
(label) shiftProtoBobDown::@return
(byte) shiftProtoBobDown::i
(byte) shiftProtoBobDown::i#1 reg byte x 202.0
(byte) shiftProtoBobDown::i#2 reg byte x 161.6
(void()) shiftProtoBobRight()
(byte~) shiftProtoBobRight::$1 reg byte a 2002.0
(byte~) shiftProtoBobRight::$5 reg byte a 2002.0
(byte~) shiftProtoBobRight::$6 reg byte a 2002.0
(label) shiftProtoBobRight::@1
(label) shiftProtoBobRight::@2
(label) shiftProtoBobRight::@3
(label) shiftProtoBobRight::@4
(label) shiftProtoBobRight::@5
(label) shiftProtoBobRight::@6
(label) shiftProtoBobRight::@7
(label) shiftProtoBobRight::@return
(byte) shiftProtoBobRight::carry
(byte) shiftProtoBobRight::carry#1 carry zp[1]:14 111.22222222222223
(byte) shiftProtoBobRight::carry#10 reg byte y 2002.0
(byte) shiftProtoBobRight::carry#2 reg byte y 286.0
(byte) shiftProtoBobRight::i
(byte) shiftProtoBobRight::i#1 i zp[1]:10 1001.0
(byte) shiftProtoBobRight::i#2 i zp[1]:10 231.0
(byte) shiftProtoBobRight::j
(byte) shiftProtoBobRight::j#1 reg byte x 2002.0
(byte) shiftProtoBobRight::j#10 reg byte x 1001.0
(byte) shiftProtoBobRight::j#2 reg byte x 2002.0
(byte) shiftProtoBobRight::j#3 reg byte x 700.7
(byte) shiftProtoBobRight::new_carry

reg byte a [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
reg byte x [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
reg byte x [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
reg byte x [ renderBobInit::y#2 renderBobInit::y#1 ]
reg byte x [ renderBobInit::i#2 renderBobInit::i#1 ]
zp[1]:2 [ prepareBobs::shift_y#2 prepareBobs::shift_y#1 main::angle#8 main::angle#1 ]
zp[1]:3 [ progress_idx#16 progress_idx#31 progress_idx#25 progress_idx#10 progress_idx#8 main::r#2 main::r#1 ]
zp[1]:4 [ prepareBobs::bob_table_idx#6 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 main::a#2 main::a#6 main::a#1 ]
zp[1]:5 [ prepareBobs::shift_x#2 prepareBobs::shift_x#1 main::i#2 main::i#1 ]
reg byte x [ bobCharsetFindOrAddGlyph::glyph_id#11 bobCharsetFindOrAddGlyph::glyph_id#1 ]
reg byte y [ bobCharsetFindOrAddGlyph::i1#2 bobCharsetFindOrAddGlyph::i1#1 ]
reg byte y [ bobCharsetFindOrAddGlyph::i#2 bobCharsetFindOrAddGlyph::i#1 ]
reg byte a [ bobCharsetFindOrAddGlyph::found#2 ]
reg byte x [ shiftProtoBobRight::j#3 shiftProtoBobRight::j#10 shiftProtoBobRight::j#2 shiftProtoBobRight::j#1 ]
reg byte y [ shiftProtoBobRight::carry#2 shiftProtoBobRight::carry#10 ]
reg byte x [ shiftProtoBobDown::i#2 shiftProtoBobDown::i#1 ]
zp[2]:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 bobCharsetFindOrAddGlyph::bob_glyph#10 bobCharsetFindOrAddGlyph::bob_glyph#1 memset::dst#2 memset::dst#1 renderBobCleanupNext#17 renderBobCleanupNext#13 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[2]:8 [ main::x#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
reg byte x [ renderBob::ypos#0 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$19 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ main::$21 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
zp[1]:10 [ renderBob::x_char_offset#0 shiftProtoBobRight::i#2 shiftProtoBobRight::i#1 prepareBobs::cell#2 prepareBobs::cell#1 ]
reg byte a [ renderBob::y_char_offset#0 ]
reg byte a [ renderBob::$8 ]
zp[2]:11 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 progress_cursor#15 progress_cursor#31 progress_cursor#24 progress_cursor#17 progress_cursor#8 mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 main::$10 mulf8s::return#3 main::$12 mulf8u_prepared::return#0 main::$13 main::y#0 ]
reg byte a [ renderBob::$4 ]
zp[1]:13 [ renderBob::$5 mulf_init::c#2 mulf_init::c#1 bob_charset_next_id#23 bob_charset_next_id#14 bob_charset_next_id#16 bob_charset_next_id#30 bob_charset_next_id#21 bob_charset_next_id#8 ]
reg byte a [ renderBob::$6 ]
reg byte x [ renderBob::bob_table_idx#0 ]
reg byte a [ mulf8u_prepare::a#0 ]
zp[1]:14 [ mulf8s_prepared::b#0 renderBob::xpos#0 mulf_init::dir#2 mulf_init::dir#4 shiftProtoBobRight::carry#1 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$8 ]
reg byte a [ mulf8s_prepared::$15 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ mulf8s_prepared::$16 ]
reg byte a [ renderBobCleanup::$1 ]
zp[2]:15 [ renderBobInit::$0 renderBobInit::$7 renderBobInit::$1 renderBobCleanup::screen#0 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ]
zp[2]:17 [ renderBobInit::$6 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 bobCharsetFindOrAddGlyph::glyph_cursor#11 bobCharsetFindOrAddGlyph::glyph_cursor#1 ]
reg byte a [ renderBobInit::$4 ]
reg byte a [ renderBobInit::$5 ]
reg byte a [ bobCharsetFindOrAddGlyph::return#1 ]
reg byte a [ prepareBobs::$6 ]
reg byte a [ shiftProtoBobRight::$1 ]
reg byte a [ shiftProtoBobRight::$5 ]
reg byte a [ shiftProtoBobRight::$6 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
