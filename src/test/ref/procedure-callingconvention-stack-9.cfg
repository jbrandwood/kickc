@begin: scope:[]  from
  [0] (byte) val ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] callexecute main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

__stackcall (void()) printother()
printother: scope:[printother]  from
  [4] phi()
  to:printother::@1
printother::@1: scope:[printother]  from printother printother::@1
  [5] (byte) printother::i#2 ← phi( printother/(byte) 0 printother::@1/(byte) printother::i#1 )
  [6] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) printother::i#2) ← ++ *((const nomodify byte*) SCREEN+(byte) $28 + (byte) printother::i#2)
  [7] (byte) printother::i#1 ← ++ (byte) printother::i#2
  [8] if((byte) printother::i#1!=(byte) 6) goto printother::@1
  to:printother::@return
printother::@return: scope:[printother]  from printother::@1
  [9] return 
  to:@return

__stackcall (void()) incval()
incval: scope:[incval]  from
  [10] (byte) val ← ++ (byte) val
  to:incval::@return
incval::@return: scope:[incval]  from incval
  [11] return 
  to:@return

__stackcall (void()) printval()
printval: scope:[printval]  from
  [12] *((const nomodify byte*) SCREEN) ← (byte) val
  to:printval::@return
printval::@return: scope:[printval]  from printval
  [13] return 
  to:@return

__stackcall (void()) ival()
ival: scope:[ival]  from
  [14] phi()
  [15] callexecute incval 
  to:ival::@return
ival::@return: scope:[ival]  from ival
  [16] return 
  to:@return

__stackcall (void()) pval()
pval: scope:[pval]  from
  [17] phi()
  [18] callexecute printval 
  to:pval::@return
pval::@return: scope:[pval]  from pval
  [19] return 
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [20] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [21] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [22] callexecute pval 
  [23] callexecute printother 
  [24] callexecute ival 
  [25] (byte) main::i#1 ← ++ (byte) main::i#2
  [26] if((byte) main::i#1!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [27] return 
  to:@return
