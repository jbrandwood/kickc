@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2
  [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0
  [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0
  [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call setupRasterIrq 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [14] (byte*) main::dst#2 ← phi( main::@2/(const byte[$3e8]) SCREEN_COPY#0 main::@3/(byte*) main::dst#1 )
  [14] (byte*) main::src#2 ← phi( main::@2/(const byte*) SCREEN#0 main::@3/(byte*) main::src#1 )
  [15] *((byte*) main::dst#2) ← *((byte*) main::src#2)
  [16] (byte*) main::src#1 ← ++ (byte*) main::src#2
  [17] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [19] phi()
  [20] call initSquareTables 
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@6
  [21] phi()
  [22] call getCharToProcess 
  [23] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1
  [24] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1
  [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1
  to:main::@8
main::@8: scope:[main]  from main::@5
  [26] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  [27] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0
  [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0
  [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@7 main::@8
  [30] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7)
  to:main::@7
main::@6: scope:[main]  from main::@8
  [31] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0
  [32] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0
  [34] call startProcessing 
  to:main::@5
startProcessing: scope:[startProcessing]  from main::@6
  [35] phi()
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@6
  [36] (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) $ff startProcessing::@6/(byte~) startProcessing::freeIdx#7 )
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  [37] (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) 0 startProcessing::@3/(byte) startProcessing::i#1 )
  [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2
  [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@2 startProcessing::@7
  [40] (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@7/(byte~) startProcessing::freeIdx#8 startProcessing::@2/(byte) startProcessing::i#2 )
  [41] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@6
  to:startProcessing::@5
startProcessing::@5: scope:[startProcessing]  from startProcessing::@4
  [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2
  [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0
  [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0
  [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@5
  [46] return 
  to:@return
startProcessing::@6: scope:[startProcessing]  from startProcessing::@4
  [47] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2
  to:startProcessing::@1
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  [48] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2
  [49] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2
  to:startProcessing::@7
startProcessing::@7: scope:[startProcessing]  from startProcessing::@3
  [50] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6
  to:startProcessing::@4
getCharToProcess: scope:[getCharToProcess]  from main::@5
  [51] phi()
  to:getCharToProcess::@1
getCharToProcess::@1: scope:[getCharToProcess]  from getCharToProcess getCharToProcess::@9
  [52] (byte) getCharToProcess::closest_y#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_y#1 )
  [52] (byte) getCharToProcess::closest_x#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_x#1 )
  [52] (word) getCharToProcess::closest_dist#8 ← phi( getCharToProcess/(const word) NOT_FOUND#0 getCharToProcess::@9/(word~) getCharToProcess::closest_dist#10 )
  [52] (byte) getCharToProcess::y#7 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::y#1 )
  [52] (byte*) getCharToProcess::screen_line#4 ← phi( getCharToProcess/(const byte[$3e8]) SCREEN_COPY#0 getCharToProcess::@9/(byte*) getCharToProcess::screen_line#1 )
  to:getCharToProcess::@2
getCharToProcess::@2: scope:[getCharToProcess]  from getCharToProcess::@1 getCharToProcess::@10
  [53] (byte) getCharToProcess::closest_y#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_y#9 getCharToProcess::@10/(byte) getCharToProcess::return_y#1 )
  [53] (byte) getCharToProcess::closest_x#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_x#9 getCharToProcess::@10/(byte) getCharToProcess::return_x#1 )
  [53] (word) getCharToProcess::closest_dist#2 ← phi( getCharToProcess::@1/(word) getCharToProcess::closest_dist#8 getCharToProcess::@10/(word~) getCharToProcess::closest_dist#12 )
  [53] (byte) getCharToProcess::x#2 ← phi( getCharToProcess::@1/(byte) 0 getCharToProcess::@10/(byte) getCharToProcess::x#1 )
  [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11
  to:getCharToProcess::@4
getCharToProcess::@4: scope:[getCharToProcess]  from getCharToProcess::@2
  [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1
  [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1
  [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14)
  [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12
  to:getCharToProcess::@5
getCharToProcess::@5: scope:[getCharToProcess]  from getCharToProcess::@4
  [59] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2
  [60] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7
  to:getCharToProcess::@3
getCharToProcess::@3: scope:[getCharToProcess]  from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5
  [61] (byte) getCharToProcess::return_y#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_y#7 getCharToProcess::@12/(byte) getCharToProcess::closest_y#7 getCharToProcess::@5/(byte~) getCharToProcess::return_y#7 )
  [61] (byte) getCharToProcess::return_x#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_x#7 getCharToProcess::@12/(byte) getCharToProcess::closest_x#7 getCharToProcess::@5/(byte~) getCharToProcess::return_x#7 )
  [61] (word) getCharToProcess::return_dist#1 ← phi( getCharToProcess::@11/(word~) getCharToProcess::return_dist#5 getCharToProcess::@12/(word~) getCharToProcess::return_dist#6 getCharToProcess::@5/(word) getCharToProcess::dist#0 )
  [62] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2
  [63] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10
  to:getCharToProcess::@6
getCharToProcess::@6: scope:[getCharToProcess]  from getCharToProcess::@3
  [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28
  [65] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7
  [66] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9
  to:getCharToProcess::@7
getCharToProcess::@7: scope:[getCharToProcess]  from getCharToProcess::@6
  [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return
  to:getCharToProcess::@8
getCharToProcess::@8: scope:[getCharToProcess]  from getCharToProcess::@7
  [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1
  [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2
  [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9
  [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3
  [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10
  [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' '
  to:getCharToProcess::@return
getCharToProcess::@return: scope:[getCharToProcess]  from getCharToProcess::@7 getCharToProcess::@8
  [74] return 
  to:@return
getCharToProcess::@9: scope:[getCharToProcess]  from getCharToProcess::@6
  [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1
  to:getCharToProcess::@1
getCharToProcess::@10: scope:[getCharToProcess]  from getCharToProcess::@3
  [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1
  to:getCharToProcess::@2
getCharToProcess::@12: scope:[getCharToProcess]  from getCharToProcess::@4
  [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
getCharToProcess::@11: scope:[getCharToProcess]  from getCharToProcess::@2
  [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
initSquareTables: scope:[initSquareTables]  from main::@4
  [79] phi()
  to:initSquareTables::@1
initSquareTables::@1: scope:[initSquareTables]  from initSquareTables initSquareTables::@9
  [80] (byte) initSquareTables::x#2 ← phi( initSquareTables/(byte) 0 initSquareTables::@9/(byte) initSquareTables::x#1 )
  [81] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2
  to:initSquareTables::@3
initSquareTables::@3: scope:[initSquareTables]  from initSquareTables::@1
  [82] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14
  to:initSquareTables::@4
initSquareTables::@4: scope:[initSquareTables]  from initSquareTables::@2 initSquareTables::@3
  [83] (byte) initSquareTables::x_dist#0 ← phi( initSquareTables::@2/(byte~) initSquareTables::$4 initSquareTables::@3/(byte~) initSquareTables::$2 )
  [84] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0
  [85] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  [86] call mul8u 
  [87] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:initSquareTables::@9
initSquareTables::@9: scope:[initSquareTables]  from initSquareTables::@4
  [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2
  [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1
  [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6
  [91] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2
  [92] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1
  to:initSquareTables::@5
initSquareTables::@5: scope:[initSquareTables]  from initSquareTables::@10 initSquareTables::@9
  [93] (byte) initSquareTables::y#2 ← phi( initSquareTables::@10/(byte) initSquareTables::y#1 initSquareTables::@9/(byte) 0 )
  [94] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6
  to:initSquareTables::@7
initSquareTables::@7: scope:[initSquareTables]  from initSquareTables::@5
  [95] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c
  to:initSquareTables::@8
initSquareTables::@8: scope:[initSquareTables]  from initSquareTables::@6 initSquareTables::@7
  [96] (byte) initSquareTables::y_dist#0 ← phi( initSquareTables::@6/(byte~) initSquareTables::$12 initSquareTables::@7/(byte~) initSquareTables::$10 )
  [97] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0
  [98] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  [99] call mul8u 
  [100] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:initSquareTables::@10
initSquareTables::@10: scope:[initSquareTables]  from initSquareTables::@8
  [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3
  [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1
  [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14
  [104] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2
  [105] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5
  to:initSquareTables::@return
initSquareTables::@return: scope:[initSquareTables]  from initSquareTables::@10
  [106] return 
  to:@return
initSquareTables::@6: scope:[initSquareTables]  from initSquareTables::@5
  [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2
  to:initSquareTables::@8
initSquareTables::@2: scope:[initSquareTables]  from initSquareTables::@1
  [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2
  to:initSquareTables::@4
mul8u: scope:[mul8u]  from initSquareTables::@4 initSquareTables::@8
  [109] (byte) mul8u::a#6 ← phi( initSquareTables::@8/(byte) mul8u::a#2 initSquareTables::@4/(byte) mul8u::a#1 )
  [109] (word) mul8u::mb#0 ← phi( initSquareTables::@8/(byte) mul8u::b#1 initSquareTables::@4/(byte) mul8u::b#0 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [110] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [110] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [110] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [111] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [112] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [113] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [114] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [116] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [117] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [118] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
setupRasterIrq: scope:[setupRasterIrq]  from main::@2
  asm { sei  }
  [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  to:setupRasterIrq::@1
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1
  [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0
  [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  [128] return 
  to:@return
irqBottom: scope:[irqBottom]  from
  [129] phi()
  to:irqBottom::@1
irqBottom::@1: scope:[irqBottom]  from irqBottom irqBottom::@1
  [130] (byte) irqBottom::i#2 ← phi( irqBottom/(byte) 0 irqBottom::@1/(byte) irqBottom::i#1 )
  [131] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2
  [132] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1
  to:irqBottom::@2
irqBottom::@2: scope:[irqBottom]  from irqBottom::@1
  [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  [135] call processChars 
  to:irqBottom::@3
irqBottom::@3: scope:[irqBottom]  from irqBottom::@2
  [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0
  [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop()
  [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@return: scope:[irqBottom]  from irqBottom::@3
  [141] return 
  to:@return
processChars: scope:[processChars]  from irqBottom::@2
  [142] phi()
  to:processChars::@1
processChars::@1: scope:[processChars]  from processChars processChars::@2
  [143] (byte) processChars::i#2 ← phi( processChars/(byte) 0 processChars::@2/(byte) processChars::i#1 )
  [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2
  [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2
  to:processChars::@5
processChars::@5: scope:[processChars]  from processChars::@1
  [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2
  [147] (byte) processChars::processing_x#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$15)
  [148] (byte) processChars::processing_y#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) processChars::$15)
  [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0
  [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2
  [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3
  [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3
  [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4
  [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0
  [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0
  [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2
  [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7
  [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3
  [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8
  [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3
  to:processChars::@6
processChars::@6: scope:[processChars]  from processChars::@5
  [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4
  to:processChars::@7
processChars::@7: scope:[processChars]  from processChars::@6
  [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0)
  to:processChars::@2
processChars::@2: scope:[processChars]  from processChars::@1 processChars::@3 processChars::@4 processChars::@7
  [163] (byte) processChars::i#1 ← ++ (byte) processChars::i#2
  [164] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1
  to:processChars::@return
processChars::@return: scope:[processChars]  from processChars::@2
  [165] return 
  to:@return
processChars::@4: scope:[processChars]  from processChars::@6
  [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0)
  to:processChars::@2
processChars::@3: scope:[processChars]  from processChars::@5
  [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2
  [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0
  to:processChars::@2
irqTop: scope:[irqTop]  from
  [169] phi()
  to:irqTop::@1
irqTop::@1: scope:[irqTop]  from irqTop irqTop::@1
  [170] (byte) irqTop::i#2 ← phi( irqTop/(byte) 0 irqTop::@1/(byte) irqTop::i#1 )
  [171] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2
  [172] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1
  to:irqTop::@2
irqTop::@2: scope:[irqTop]  from irqTop::@1
  [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  to:irqTop::@3
irqTop::@3: scope:[irqTop]  from irqTop::@2 irqTop::@3
  [175] (byte) irqTop::i1#2 ← phi( irqTop::@2/(byte) 0 irqTop::@3/(byte) irqTop::i1#1 )
  [176] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2
  [177] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@3
  to:irqTop::@4
irqTop::@4: scope:[irqTop]  from irqTop::@3
  [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0
  [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom()
  [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@return: scope:[irqTop]  from irqTop::@4
  [183] return 
  to:@return
