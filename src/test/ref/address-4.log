Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::$0 = main::i < 8
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::$1 = main::i * SIZEOF_WORD
  SCREEN[main::$1] = main::ch
  main::i = ++ main::i
  main::$2 = main::i * SIZEOF_WORD
  SCREEN[main::$2] = main::ch
  main::i = ++ main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
constant word* SCREEN = (word*)$400
constant byte SIZEOF_WORD = 2
void __start()
void main()
bool~ main::$0
byte~ main::$1
byte~ main::$2
constant const word main::ch = $102
byte main::i loadstore !zp[-1]:2

Adding number conversion cast (unumber) 8 in main::$0 = main::i < 8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [2] if(main::i<8) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Rewriting multiplication to use shift [2] main::$1 = main::i * SIZEOF_WORD
Rewriting multiplication to use shift [5] main::$2 = main::i * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::i = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] if(main::i<8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [3] main::$1 = main::i << 1
  [4] SCREEN[main::$1] = main::ch
  [5] main::i = ++ main::i
  [6] main::$2 = main::i << 1
  [7] SCREEN[main::$2] = main::ch
  [8] main::i = ++ main::i
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$1 22.0
byte~ main::$2 22.0
byte main::i loadstore !zp[-1]:2 9.875

Initial phi equivalence classes
Added variable main::i to live range equivalence class [ main::i ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::i ]
[ main::$1 ]
[ main::$2 ]
Allocated zp[1]:3 [ main::$1 ]
Allocated zp[1]:4 [ main::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::i = 0 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [1] if(main::i<8) goto main::@2 [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [3] main::$1 = main::i << 1 [ main::i main::$1 ] (  [ main::i main::$1 ] { }  ) always clobbers reg byte a 
Statement [4] SCREEN[main::$1] = main::ch [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Statement [6] main::$2 = main::i << 1 [ main::i main::$2 ] (  [ main::i main::$2 ] { }  ) always clobbers reg byte a 
Statement [7] SCREEN[main::$2] = main::ch [ main::i ] (  [ main::i ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::$1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:3 [ main::$1 ] 22: zp[1]:4 [ main::$2 ] 9.88: zp[1]:2 [ main::i ] 
Uplift Scope [] 

Uplifting [main] best 669 combination reg byte a [ main::$1 ] reg byte a [ main::$2 ] zp[1]:2 [ main::i ] 
Uplifting [] best 669 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i ]
Uplifting [main] best 669 combination zp[1]:2 [ main::i ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as at a hard-coded address
// Incrementing a load/store variable will result in cause two *SIZEOF's
  // Upstart
  // Commodore 64 PRG executable file
.file [name="address-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .const ch = $102
    .label i = 2
    // [0] main::i = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [1] if(main::i<8) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    // main::@2
  __b2:
    // [3] main::$1 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [4] SCREEN[main::$1] = main::ch -- pwuc1_derefidx_vbuaa=vwuc2 
    tay
    lda #<ch
    sta SCREEN,y
    lda #>ch
    sta SCREEN+1,y
    // [5] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    // [6] main::$2 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [7] SCREEN[main::$2] = main::ch -- pwuc1_derefidx_vbuaa=vwuc2 
    tay
    lda #<ch
    sta SCREEN,y
    lda #>ch
    sta SCREEN+1,y
    // [8] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant word* SCREEN = (word*) 1024
void main()
byte~ main::$1 reg byte a 22.0
byte~ main::$2 reg byte a 22.0
constant const word main::ch = $102
byte main::i loadstore !zp[-1]:2 zp[1]:2 9.875

zp[1]:2 [ main::i ]
reg byte a [ main::$1 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 636

  // File Comments
// Test declaring a variable as at a hard-coded address
// Incrementing a load/store variable will result in cause two *SIZEOF's
  // Upstart
  // Commodore 64 PRG executable file
.file [name="address-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .const ch = $102
    .label i = 2
    // __address(0x2) char i=0
    // [0] main::i = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // while(i<8)
    // [1] if(main::i<8) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b2
    // main::@return
    // }
    // [2] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i++] = ch
    // [3] main::$1 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [4] SCREEN[main::$1] = main::ch -- pwuc1_derefidx_vbuaa=vwuc2 
    tay
    lda #<ch
    sta SCREEN,y
    lda #>ch
    sta SCREEN+1,y
    // SCREEN[i++] = ch;
    // [5] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    // SCREEN[i++] = ch
    // [6] main::$2 = main::i << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [7] SCREEN[main::$2] = main::ch -- pwuc1_derefidx_vbuaa=vwuc2 
    tay
    lda #<ch
    sta SCREEN,y
    lda #>ch
    sta SCREEN+1,y
    // SCREEN[i++] = ch;
    // [8] main::i = ++ main::i -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __b1
}
  // File Data

