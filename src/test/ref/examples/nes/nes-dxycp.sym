__constant struct RICOH_2A03 *APU = (struct RICOH_2A03 *) 16384
__constant char * const FR_COUNTER = (char *) 16407
__constant char * const MEMORY = (char *) 0
__constant char MESSAGE[$40] = "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"z
__constant char OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
__constant char OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
__constant char OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
__constant char OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
__constant char OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
__constant char OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
__constant char OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
__constant char OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
__constant char OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
__constant char OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
__constant char OFFSET_STRUCT_SPRITEDATA_TILE = 1
__constant char OFFSET_STRUCT_SPRITEDATA_X = 3
__constant char PALETTE[$20] = { 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f }
__constant struct RICOH_2C02 *PPU = (struct RICOH_2C02 *) 8192
__constant char * const PPU_ATTRIBUTE_TABLE_0 = (char *) 9152
__constant char * const PPU_NAME_TABLE_0 = (char *) 8192
__constant char * const PPU_PALETTE = (char *) 16128
__constant volatile char * const PPU_PPUSTATUS = (char *) 8194
__constant const char SINTABLE_184[$ef] = kickasm {{ .fill 239, round(71.5+71.5*sin(2*PI*i/239))
 }}
__constant const char SINTABLE_240[$100] = kickasm {{ .fill $100, round(115.5+107.5*sin(2*PI*i/256))
 }}
__constant const char SINTABLE_64[$59] = kickasm {{ .fill 89, round(52.5+52.5*sin(2*PI*i/89))
 }}
__constant char SIZEOF_CHAR = 1
__constant struct SpriteData SPRITE_BUFFER[$100] = { fill( $100, 0) }
__constant char TILES[] = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
__constant void (*VECTORS[])() = { &vblank, &main, 0 }
void __start()
void main()
char main::$7 // reg byte y 126.25
char main::initNES1_i
char main::initNES1_i#1 // reg byte x 151.5
char main::initNES1_i#2 // reg byte x 112.22222222222223
char main::initNES1_waitForVBlank1_$0 // reg byte a 202.0
char main::initNES1_waitForVBlank2_$0 // reg byte a 202.0
char main::s
char main::s#1 // reg byte x 202.0
char main::s#2 // reg byte x 72.14285714285714
void ppuDataFill(void * const ppuData , char val , unsigned int size)
unsigned int ppuDataFill::i
unsigned int ppuDataFill::i#1 // i zp[2]:10 2002.0
unsigned int ppuDataFill::i#2 // i zp[2]:10 1001.0
void * const ppuDataFill::ppuData
char ppuDataFill::ppuDataPrepare1_$0 // reg byte a 202.0
char ppuDataFill::ppuDataPrepare1_$1 // reg byte a 202.0
void * const ppuDataFill::ppuDataPrepare1_ppuData
void * const ppuDataFill::ppuDataPrepare1_ppuData#0 // ppuDataPrepare1_ppuData zp[2]:6 67.33333333333333
char ppuDataFill::ppuDataPut1_val
unsigned int ppuDataFill::size
unsigned int ppuDataFill::size#3 // size zp[2]:8 111.22222222222223
char ppuDataFill::val
char ppuDataFill::val#4 // reg byte x 111.22222222222223
void ppuDataTransfer(void * const ppuData , void * const cpuData , unsigned int size)
void * const ppuDataTransfer::cpuData
__constant void * const ppuDataTransfer::cpuData#0 = (void * const )PALETTE // cpuData
char *ppuDataTransfer::cpuSrc
char *ppuDataTransfer::cpuSrc#1 // cpuSrc zp[2]:8 1001.0
char *ppuDataTransfer::cpuSrc#2 // cpuSrc zp[2]:8 750.75
unsigned int ppuDataTransfer::i
unsigned int ppuDataTransfer::i#1 // i zp[2]:6 2002.0
unsigned int ppuDataTransfer::i#2 // i zp[2]:6 600.5999999999999
void * const ppuDataTransfer::ppuData
__constant void * const ppuDataTransfer::ppuData#0 = (void * const )PPU_PALETTE // ppuData
void * const ppuDataTransfer::ppuDataPrepare1_ppuData
char ppuDataTransfer::ppuDataPut1_val
char ppuDataTransfer::ppuDataPut1_val#0 // reg byte a 2002.0
unsigned int ppuDataTransfer::size
__constant unsigned int ppuDataTransfer::size#0 = $20*SIZEOF_CHAR // size
char readJoy1()
char readJoy1::$1 // zp[1]:16 101.0
char readJoy1::$2 // reg byte a 202.0
char readJoy1::i
char readJoy1::i#1 // reg byte x 202.0
char readJoy1::i#2 // reg byte x 60.599999999999994
char readJoy1::joy
char readJoy1::joy#1 // reg byte a 101.0
char readJoy1::joy#2 // reg byte a 51.0
char readJoy1::return
char readJoy1::return#2 // reg byte a 4.0
__interrupt(hardware_all) void vblank()
char vblank::$10 // reg byte x 4.0
char vblank::$12 // reg byte x 4.0
char vblank::$14 // reg byte a 22.0
char vblank::$17 // zp[1]:4 22.0
char vblank::$19 // zp[1]:4 22.0
char vblank::$23 // zp[1]:5 22.0
char vblank::$25 // zp[1]:5 22.0
char vblank::$28 // zp[1]:15 8.25
char vblank::$5 // reg byte x 4.0
char vblank::$7 // reg byte x 4.0
char vblank::joy
char vblank::joy#0 // reg byte a 4.0
struct SpriteData *vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
char vblank::s
char vblank::s#1 // s zp[1]:2 22.0
char vblank::s#2 // s zp[1]:2 2.933333333333333
char vblank::x_idx
char vblank::x_idx#0 // x_idx zp[1]:4 0.6666666666666666
char vblank::x_idx#1 // x_idx zp[1]:4 5.5
char vblank::x_idx#2 // x_idx zp[1]:4 7.125
char vblank::x_idx_2
char vblank::x_idx_2#0 // x_idx_2 zp[1]:5 4.0
char vblank::x_idx_2#1 // x_idx_2 zp[1]:5 16.5
char vblank::x_idx_2#2 // x_idx_2 zp[1]:5 4.75
char vblank::y_idx
char vblank::y_idx#0 // y_idx zp[1]:3 0.3333333333333333
char vblank::y_idx#1 // y_idx zp[1]:3 1.8333333333333333
char vblank::y_idx#2 // y_idx zp[1]:3 8.75
__loadstore volatile char x_sin_idx // zp[1]:13 0.7692307692307693
__loadstore volatile char x_sin_idx_2 // zp[1]:14 0.5555555555555556
__loadstore volatile char y_sin_idx // zp[1]:12 0.8

reg byte x [ vblank::$7 vblank::$5 ]
reg byte x [ vblank::$12 vblank::$10 ]
zp[1]:2 [ vblank::s#2 vblank::s#1 ]
zp[1]:3 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
zp[1]:4 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
zp[1]:5 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::s#2 main::s#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
zp[2]:6 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[2]:8 [ ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
reg byte x [ ppuDataFill::val#4 ]
zp[2]:10 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
zp[1]:12 [ y_sin_idx ]
zp[1]:13 [ x_sin_idx ]
zp[1]:14 [ x_sin_idx_2 ]
reg byte a [ readJoy1::return#2 ]
reg byte a [ vblank::joy#0 ]
zp[1]:15 [ vblank::$28 ]
reg byte a [ vblank::$14 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte y [ main::$7 ]
zp[1]:16 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
