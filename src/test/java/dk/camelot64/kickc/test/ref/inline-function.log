PARSING src/test/java/dk/camelot64/kickc/test/kc/inline-function.kc
// Test inline function
// Splits screen so upper half is lower case and lower half lower case

byte* RASTER = $d012;
byte* D018 = $d018;
byte* BGCOL = $d021;

byte* screen = $0400;
byte* charset1 = $1000;
byte* charset2 = $1800;

void main() {
    asm { sei }
    while(true) {
        while(*RASTER!=$ff) {}
        //*D018 = toD018(screen, charset1);
        *D018 = (byte)(((word)screen/$40)|((word)charset1/$400));
        *BGCOL = $6;
        while(*RASTER!=$62) {}
        //*D018 = toD018(screen, charset1);
        *D018 = (byte)(((word)screen/$40)|((word)charset2/$400));
        *BGCOL = $b;
    }
}

/*
inline byte toD018( byte* screen, byte* charset) {
    return (byte)(((word)screen/$40)|((word)charset/$400));
}
*/
SYMBOLS
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) D018
(byte*) RASTER
(byte*) charset1
(byte*) charset2
(void()) main()
(bool~) main::$0
(word~) main::$1
(word~) main::$10
(word/signed dword/dword~) main::$11
(word/dword~) main::$12
(byte~) main::$13
(word/signed dword/dword~) main::$2
(word~) main::$3
(word/signed dword/dword~) main::$4
(word/dword~) main::$5
(byte~) main::$6
(bool~) main::$7
(word~) main::$8
(word/signed dword/dword~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte*) screen

Promoting word/dword/signed dword to byte* in RASTER ← ((byte*)) 53266
Promoting word/dword/signed dword to byte* in D018 ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in BGCOL ← ((byte*)) 53281
Promoting word/signed word/dword/signed dword to byte* in screen ← ((byte*)) 1024
Promoting word/signed word/dword/signed dword to byte* in charset1 ← ((byte*)) 4096
Promoting word/signed word/dword/signed dword to byte* in charset2 ← ((byte*)) 6144
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) screen ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) charset1 ← ((byte*)) (word/signed word/dword/signed dword) 4096
  (byte*) charset2 ← ((byte*)) (word/signed word/dword/signed dword) 6144
  to:@1
main: scope:[main]  from
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@9
  if(true) goto main::@2
  to:main::@10
main::@2: scope:[main]  from main::@1 main::@11
  to:main::@4
main::@10: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@10 main::@18
  to:main::@return
main::@11: scope:[main]  from
  to:main::@2
main::@4: scope:[main]  from main::@2 main::@5
  (bool~) main::$0 ← *((byte*) RASTER) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) main::$0) goto main::@5
  to:main::@12
main::@5: scope:[main]  from main::@13 main::@4
  to:main::@4
main::@12: scope:[main]  from main::@4
  to:main::@6
main::@6: scope:[main]  from main::@12 main::@14
  (word~) main::$1 ← ((word)) (byte*) screen
  (word/signed dword/dword~) main::$2 ← (word~) main::$1 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) main::$3 ← ((word)) (byte*) charset1
  (word/signed dword/dword~) main::$4 ← (word~) main::$3 / (word/signed word/dword/signed dword) 1024
  (word/dword~) main::$5 ← (word/signed dword/dword~) main::$2 | (word/signed dword/dword~) main::$4
  (byte~) main::$6 ← ((byte)) (word/dword~) main::$5
  *((byte*) D018) ← (byte~) main::$6
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 6
  to:main::@7
main::@13: scope:[main]  from
  to:main::@5
main::@14: scope:[main]  from
  to:main::@6
main::@7: scope:[main]  from main::@6 main::@8
  (bool~) main::$7 ← *((byte*) RASTER) != (byte/signed byte/word/signed word/dword/signed dword) 98
  if((bool~) main::$7) goto main::@8
  to:main::@15
main::@8: scope:[main]  from main::@16 main::@7
  to:main::@7
main::@15: scope:[main]  from main::@7
  to:main::@9
main::@9: scope:[main]  from main::@15 main::@17
  (word~) main::$8 ← ((word)) (byte*) screen
  (word/signed dword/dword~) main::$9 ← (word~) main::$8 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) main::$10 ← ((word)) (byte*) charset2
  (word/signed dword/dword~) main::$11 ← (word~) main::$10 / (word/signed word/dword/signed dword) 1024
  (word/dword~) main::$12 ← (word/signed dword/dword~) main::$9 | (word/signed dword/dword~) main::$11
  (byte~) main::$13 ← ((byte)) (word/dword~) main::$12
  *((byte*) D018) ← (byte~) main::$13
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 11
  to:main::@1
main::@16: scope:[main]  from
  to:main::@8
main::@17: scope:[main]  from
  to:main::@9
main::@18: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@10
Removing empty block main::@3
Removing empty block main::@11
Removing empty block main::@12
Removing empty block main::@13
Removing empty block main::@14
Removing empty block main::@15
Removing empty block main::@16
Removing empty block main::@17
Removing empty block main::@18
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) D018#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) charset1#0 ← ((byte*)) (word/signed word/dword/signed dword) 4096
  (byte*) charset2#0 ← ((byte*)) (word/signed word/dword/signed dword) 6144
  to:@1
main: scope:[main]  from @1
  (byte*) charset2#9 ← phi( @1/(byte*) charset2#10 )
  (byte*) BGCOL#9 ← phi( @1/(byte*) BGCOL#10 )
  (byte*) D018#9 ← phi( @1/(byte*) D018#10 )
  (byte*) charset1#6 ← phi( @1/(byte*) charset1#8 )
  (byte*) screen#9 ← phi( @1/(byte*) screen#10 )
  (byte*) RASTER#8 ← phi( @1/(byte*) RASTER#10 )
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@9
  (byte*) charset2#8 ← phi( main/(byte*) charset2#9 main::@9/(byte*) charset2#1 )
  (byte*) BGCOL#8 ← phi( main/(byte*) BGCOL#9 main::@9/(byte*) BGCOL#2 )
  (byte*) D018#8 ← phi( main/(byte*) D018#9 main::@9/(byte*) D018#2 )
  (byte*) charset1#5 ← phi( main/(byte*) charset1#6 main::@9/(byte*) charset1#7 )
  (byte*) screen#8 ← phi( main/(byte*) screen#9 main::@9/(byte*) screen#2 )
  (byte*) RASTER#7 ← phi( main/(byte*) RASTER#8 main::@9/(byte*) RASTER#9 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) charset2#6 ← phi( main::@1/(byte*) charset2#8 )
  (byte*) BGCOL#5 ← phi( main::@1/(byte*) BGCOL#8 )
  (byte*) D018#5 ← phi( main::@1/(byte*) D018#8 )
  (byte*) charset1#3 ← phi( main::@1/(byte*) charset1#5 )
  (byte*) screen#5 ← phi( main::@1/(byte*) screen#8 )
  (byte*) RASTER#3 ← phi( main::@1/(byte*) RASTER#7 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  (byte*) charset2#5 ← phi( main::@2/(byte*) charset2#6 main::@5/(byte*) charset2#7 )
  (byte*) BGCOL#3 ← phi( main::@2/(byte*) BGCOL#5 main::@5/(byte*) BGCOL#6 )
  (byte*) D018#3 ← phi( main::@2/(byte*) D018#5 main::@5/(byte*) D018#6 )
  (byte*) charset1#2 ← phi( main::@2/(byte*) charset1#3 main::@5/(byte*) charset1#4 )
  (byte*) screen#3 ← phi( main::@2/(byte*) screen#5 main::@5/(byte*) screen#6 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@5/(byte*) RASTER#4 )
  (bool~) main::$0 ← *((byte*) RASTER#1) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) main::$0) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte*) charset2#7 ← phi( main::@4/(byte*) charset2#5 )
  (byte*) BGCOL#6 ← phi( main::@4/(byte*) BGCOL#3 )
  (byte*) D018#6 ← phi( main::@4/(byte*) D018#3 )
  (byte*) charset1#4 ← phi( main::@4/(byte*) charset1#2 )
  (byte*) screen#6 ← phi( main::@4/(byte*) screen#3 )
  (byte*) RASTER#4 ← phi( main::@4/(byte*) RASTER#1 )
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte*) charset2#3 ← phi( main::@4/(byte*) charset2#5 )
  (byte*) RASTER#5 ← phi( main::@4/(byte*) RASTER#1 )
  (byte*) BGCOL#1 ← phi( main::@4/(byte*) BGCOL#3 )
  (byte*) D018#1 ← phi( main::@4/(byte*) D018#3 )
  (byte*) charset1#1 ← phi( main::@4/(byte*) charset1#2 )
  (byte*) screen#1 ← phi( main::@4/(byte*) screen#3 )
  (word~) main::$1 ← ((word)) (byte*) screen#1
  (word/signed dword/dword~) main::$2 ← (word~) main::$1 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) main::$3 ← ((word)) (byte*) charset1#1
  (word/signed dword/dword~) main::$4 ← (word~) main::$3 / (word/signed word/dword/signed dword) 1024
  (word/dword~) main::$5 ← (word/signed dword/dword~) main::$2 | (word/signed dword/dword~) main::$4
  (byte~) main::$6 ← ((byte)) (word/dword~) main::$5
  *((byte*) D018#1) ← (byte~) main::$6
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word/dword/signed dword) 6
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@8
  (byte*) charset1#9 ← phi( main::@6/(byte*) charset1#1 main::@8/(byte*) charset1#10 )
  (byte*) BGCOL#4 ← phi( main::@6/(byte*) BGCOL#1 main::@8/(byte*) BGCOL#7 )
  (byte*) D018#4 ← phi( main::@6/(byte*) D018#1 main::@8/(byte*) D018#7 )
  (byte*) charset2#2 ← phi( main::@6/(byte*) charset2#3 main::@8/(byte*) charset2#4 )
  (byte*) screen#4 ← phi( main::@6/(byte*) screen#1 main::@8/(byte*) screen#7 )
  (byte*) RASTER#2 ← phi( main::@6/(byte*) RASTER#5 main::@8/(byte*) RASTER#6 )
  (bool~) main::$7 ← *((byte*) RASTER#2) != (byte/signed byte/word/signed word/dword/signed dword) 98
  if((bool~) main::$7) goto main::@8
  to:main::@9
main::@8: scope:[main]  from main::@7
  (byte*) charset1#10 ← phi( main::@7/(byte*) charset1#9 )
  (byte*) BGCOL#7 ← phi( main::@7/(byte*) BGCOL#4 )
  (byte*) D018#7 ← phi( main::@7/(byte*) D018#4 )
  (byte*) charset2#4 ← phi( main::@7/(byte*) charset2#2 )
  (byte*) screen#7 ← phi( main::@7/(byte*) screen#4 )
  (byte*) RASTER#6 ← phi( main::@7/(byte*) RASTER#2 )
  to:main::@7
main::@9: scope:[main]  from main::@7
  (byte*) charset1#7 ← phi( main::@7/(byte*) charset1#9 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#2 )
  (byte*) BGCOL#2 ← phi( main::@7/(byte*) BGCOL#4 )
  (byte*) D018#2 ← phi( main::@7/(byte*) D018#4 )
  (byte*) charset2#1 ← phi( main::@7/(byte*) charset2#2 )
  (byte*) screen#2 ← phi( main::@7/(byte*) screen#4 )
  (word~) main::$8 ← ((word)) (byte*) screen#2
  (word/signed dword/dword~) main::$9 ← (word~) main::$8 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (word~) main::$10 ← ((word)) (byte*) charset2#1
  (word/signed dword/dword~) main::$11 ← (word~) main::$10 / (word/signed word/dword/signed dword) 1024
  (word/dword~) main::$12 ← (word/signed dword/dword~) main::$9 | (word/signed dword/dword~) main::$11
  (byte~) main::$13 ← ((byte)) (word/dword~) main::$12
  *((byte*) D018#2) ← (byte~) main::$13
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word/dword/signed dword) 11
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) charset2#10 ← phi( @begin/(byte*) charset2#0 )
  (byte*) BGCOL#10 ← phi( @begin/(byte*) BGCOL#0 )
  (byte*) D018#10 ← phi( @begin/(byte*) D018#0 )
  (byte*) charset1#8 ← phi( @begin/(byte*) charset1#0 )
  (byte*) screen#10 ← phi( @begin/(byte*) screen#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#10
(byte*) BGCOL#2
(byte*) BGCOL#3
(byte*) BGCOL#4
(byte*) BGCOL#5
(byte*) BGCOL#6
(byte*) BGCOL#7
(byte*) BGCOL#8
(byte*) BGCOL#9
(byte*) D018
(byte*) D018#0
(byte*) D018#1
(byte*) D018#10
(byte*) D018#2
(byte*) D018#3
(byte*) D018#4
(byte*) D018#5
(byte*) D018#6
(byte*) D018#7
(byte*) D018#8
(byte*) D018#9
(byte*) RASTER
(byte*) RASTER#0
(byte*) RASTER#1
(byte*) RASTER#10
(byte*) RASTER#2
(byte*) RASTER#3
(byte*) RASTER#4
(byte*) RASTER#5
(byte*) RASTER#6
(byte*) RASTER#7
(byte*) RASTER#8
(byte*) RASTER#9
(byte*) charset1
(byte*) charset1#0
(byte*) charset1#1
(byte*) charset1#10
(byte*) charset1#2
(byte*) charset1#3
(byte*) charset1#4
(byte*) charset1#5
(byte*) charset1#6
(byte*) charset1#7
(byte*) charset1#8
(byte*) charset1#9
(byte*) charset2
(byte*) charset2#0
(byte*) charset2#1
(byte*) charset2#10
(byte*) charset2#2
(byte*) charset2#3
(byte*) charset2#4
(byte*) charset2#5
(byte*) charset2#6
(byte*) charset2#7
(byte*) charset2#8
(byte*) charset2#9
(void()) main()
(bool~) main::$0
(word~) main::$1
(word~) main::$10
(word/signed dword/dword~) main::$11
(word/dword~) main::$12
(byte~) main::$13
(word/signed dword/dword~) main::$2
(word~) main::$3
(word/signed dword/dword~) main::$4
(word/dword~) main::$5
(byte~) main::$6
(bool~) main::$7
(word~) main::$8
(word/signed dword/dword~) main::$9
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: RASTER#8 RASTER#10
Not aliassing across scopes: screen#9 screen#10
Not aliassing across scopes: charset1#6 charset1#8
Not aliassing across scopes: D018#9 D018#10
Not aliassing across scopes: BGCOL#9 BGCOL#10
Not aliassing across scopes: charset2#9 charset2#10
Alias (byte*) RASTER#3 = (byte*) RASTER#7 
Alias (byte*) screen#5 = (byte*) screen#8 
Alias (byte*) charset1#3 = (byte*) charset1#5 
Alias (byte*) D018#5 = (byte*) D018#8 
Alias (byte*) BGCOL#5 = (byte*) BGCOL#8 
Alias (byte*) charset2#6 = (byte*) charset2#8 
Alias (byte*) RASTER#1 = (byte*) RASTER#4 (byte*) RASTER#5 
Alias (byte*) screen#1 = (byte*) screen#6 (byte*) screen#3 
Alias (byte*) charset1#1 = (byte*) charset1#4 (byte*) charset1#2 
Alias (byte*) D018#1 = (byte*) D018#6 (byte*) D018#3 
Alias (byte*) BGCOL#1 = (byte*) BGCOL#6 (byte*) BGCOL#3 
Alias (byte*) charset2#3 = (byte*) charset2#7 (byte*) charset2#5 
Alias (byte*) RASTER#2 = (byte*) RASTER#6 (byte*) RASTER#9 
Alias (byte*) screen#2 = (byte*) screen#7 (byte*) screen#4 
Alias (byte*) charset2#1 = (byte*) charset2#4 (byte*) charset2#2 
Alias (byte*) D018#2 = (byte*) D018#7 (byte*) D018#4 
Alias (byte*) BGCOL#2 = (byte*) BGCOL#7 (byte*) BGCOL#4 
Alias (byte*) charset1#10 = (byte*) charset1#9 (byte*) charset1#7 
Alias (byte*) RASTER#0 = (byte*) RASTER#10 
Alias (byte*) screen#0 = (byte*) screen#10 
Alias (byte*) charset1#0 = (byte*) charset1#8 
Alias (byte*) D018#0 = (byte*) D018#10 
Alias (byte*) BGCOL#0 = (byte*) BGCOL#10 
Alias (byte*) charset2#0 = (byte*) charset2#10 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: RASTER#8 RASTER#0
Not aliassing across scopes: screen#9 screen#0
Not aliassing across scopes: charset1#6 charset1#0
Not aliassing across scopes: D018#9 D018#0
Not aliassing across scopes: BGCOL#9 BGCOL#0
Not aliassing across scopes: charset2#9 charset2#0
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte*) screen#1
Self Phi Eliminated (byte*) charset1#1
Self Phi Eliminated (byte*) D018#1
Self Phi Eliminated (byte*) BGCOL#1
Self Phi Eliminated (byte*) charset2#3
Self Phi Eliminated (byte*) RASTER#2
Self Phi Eliminated (byte*) screen#2
Self Phi Eliminated (byte*) charset2#1
Self Phi Eliminated (byte*) D018#2
Self Phi Eliminated (byte*) BGCOL#2
Self Phi Eliminated (byte*) charset1#10
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) RASTER#8 (byte*) RASTER#0
Redundant Phi (byte*) screen#9 (byte*) screen#0
Redundant Phi (byte*) charset1#6 (byte*) charset1#0
Redundant Phi (byte*) D018#9 (byte*) D018#0
Redundant Phi (byte*) BGCOL#9 (byte*) BGCOL#0
Redundant Phi (byte*) charset2#9 (byte*) charset2#0
Redundant Phi (byte*) RASTER#1 (byte*) RASTER#3
Redundant Phi (byte*) screen#1 (byte*) screen#5
Redundant Phi (byte*) charset1#1 (byte*) charset1#3
Redundant Phi (byte*) D018#1 (byte*) D018#5
Redundant Phi (byte*) BGCOL#1 (byte*) BGCOL#5
Redundant Phi (byte*) charset2#3 (byte*) charset2#6
Redundant Phi (byte*) RASTER#2 (byte*) RASTER#1
Redundant Phi (byte*) screen#2 (byte*) screen#1
Redundant Phi (byte*) charset2#1 (byte*) charset2#3
Redundant Phi (byte*) D018#2 (byte*) D018#1
Redundant Phi (byte*) BGCOL#2 (byte*) BGCOL#1
Redundant Phi (byte*) charset1#10 (byte*) charset1#1
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$0 if(*((byte*) RASTER#3)!=(byte/word/signed word/dword/signed dword) 255) goto main::@5
Simple Condition (bool~) main::$7 if(*((byte*) RASTER#3)!=(byte/signed byte/word/signed word/dword/signed dword) 98) goto main::@8
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) D018#0 = ((byte*))53272
Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte*) screen#0 = ((byte*))1024
Constant (const byte*) charset1#0 = ((byte*))4096
Constant (const byte*) charset2#0 = ((byte*))6144
Succesful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@2
Succesful SSA optimization Pass2ConstantIfs
Eliminating Noop Cast (word~) main::$1 ← ((word)) (byte*) screen#5
Eliminating Noop Cast (word~) main::$3 ← ((word)) (byte*) charset1#3
Eliminating Noop Cast (word~) main::$8 ← ((word)) (byte*) screen#5
Eliminating Noop Cast (word~) main::$10 ← ((word)) (byte*) charset2#6
Succesful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Succesful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@8
Succesful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (byte*) RASTER#3
Self Phi Eliminated (byte*) screen#5
Self Phi Eliminated (byte*) charset1#3
Self Phi Eliminated (byte*) D018#5
Self Phi Eliminated (byte*) BGCOL#5
Self Phi Eliminated (byte*) charset2#6
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) RASTER#3 (const byte*) RASTER#0
Redundant Phi (byte*) screen#5 (const byte*) screen#0
Redundant Phi (byte*) charset1#3 (const byte*) charset1#0
Redundant Phi (byte*) D018#5 (const byte*) D018#0
Redundant Phi (byte*) BGCOL#5 (const byte*) BGCOL#0
Redundant Phi (byte*) charset2#6 (const byte*) charset2#0
Succesful SSA optimization Pass2RedundantPhiElimination
Constant (const word/signed dword/dword) main::$2 = (word)screen#0/64
Constant (const word/signed dword/dword) main::$4 = (word)charset1#0/1024
Constant (const word/signed dword/dword) main::$9 = (word)screen#0/64
Constant (const word/signed dword/dword) main::$11 = (word)charset2#0/1024
Succesful SSA optimization Pass2ConstantIdentification
Constant (const word/dword) main::$5 = main::$2|main::$4
Constant (const word/dword) main::$12 = main::$9|main::$11
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$6 = ((byte))main::$5
Constant (const byte) main::$13 = ((byte))main::$12
Succesful SSA optimization Pass2ConstantIdentification
Culled Empty Block (label) main::@1
Succesful SSA optimization Pass2CullEmptyBlocks
OPTIMIZING CONTROL FLOW GRAPH
Constant inlined main::$2 = (word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined main::$5 = (word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024
Constant inlined main::$12 = (word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024
Constant inlined main::$6 = ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024
Constant inlined main::$13 = ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024
Constant inlined main::$4 = (word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024
Constant inlined main::$9 = (word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined main::$11 = (word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@4 main::@6 main::@7 main::@9 
Block Sequence Planned @begin @1 @end main main::@4 main::@6 main::@7 main::@9 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@4 main::@6 main::@7 main::@9 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  asm { sei  }
  to:main::@4
main::@4: scope:[main]  from main main::@4 main::@9
  [5] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:2 [ ] )
  to:main::@6
main::@6: scope:[main]  from main::@4
  [6] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] )
  [7] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2 [ ] )
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  [8] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 98) goto main::@7 [ ] ( main:2 [ ] )
  to:main::@9
main::@9: scope:[main]  from main::@7
  [9] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] )
  [10] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 11 [ ] ( main:2 [ ] )
  to:main::@4

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@4 dominated by  @1 @begin main main::@4 
main::@6 dominated by  @1 @begin main main::@6 main::@4 
main::@7 dominated by  @1 main::@7 @begin main main::@6 main::@4 
main::@9 dominated by  main::@9 @1 main::@7 @begin main main::@6 main::@4 

NATURAL LOOPS
Found back edge: Loop head: main::@4 tails: main::@4 blocks: null
Found back edge: Loop head: main::@7 tails: main::@7 blocks: null
Found back edge: Loop head: main::@4 tails: main::@9 blocks: null
Populated: Loop head: main::@4 tails: main::@4 blocks: main::@4 
Populated: Loop head: main::@7 tails: main::@7 blocks: main::@7 
Populated: Loop head: main::@4 tails: main::@9 blocks: main::@9 main::@7 main::@6 main::@4 
Loop head: main::@4 tails: main::@4 blocks: main::@4 
Loop head: main::@7 tails: main::@7 blocks: main::@7 
Loop head: main::@4 tails: main::@9 blocks: main::@9 main::@7 main::@6 main::@4 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 3 loops in scope [main]
  Loop head: main::@4 tails: main::@4 blocks: main::@4 
  Loop head: main::@7 tails: main::@7 blocks: main::@7 
  Loop head: main::@4 tails: main::@9 blocks: main::@9 main::@7 main::@6 main::@4 
Loop head: main::@4 tails: main::@4 blocks: main::@4  depth: 2
Loop head: main::@7 tails: main::@7 blocks: main::@7  depth: 2
Loop head: main::@4 tails: main::@9 blocks: main::@9 main::@7 main::@6 main::@4  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) D018
(byte*) RASTER
(byte*) charset1
(byte*) charset2
(void()) main()
(byte*) screen

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label D018 = $d018
  .label BGCOL = $d021
  .label screen = $400
  .label charset1 = $1000
  .label charset2 = $1800
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
    jmp b4
  //SEG10 main::@4
  b4:
  //SEG11 [5] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG12 main::@6
  b6:
  //SEG13 [6] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #screen/$40|charset1/$400
    sta D018
  //SEG14 [7] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #6
    sta BGCOL
    jmp b7
  //SEG15 main::@7
  b7:
  //SEG16 [8] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 98) goto main::@7 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$62
    bne b7
    jmp b9
  //SEG17 main::@9
  b9:
  //SEG18 [9] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #screen/$40|charset2/$400
    sta D018
  //SEG19 [10] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 11 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$b
    sta BGCOL
    jmp b4
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 98) goto main::@7 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 11 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 2617 combination 
Uplifting [] best 2617 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label D018 = $d018
  .label BGCOL = $d021
  .label screen = $400
  .label charset1 = $1000
  .label charset2 = $1800
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
    jmp b4
  //SEG10 main::@4
  b4:
  //SEG11 [5] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG12 main::@6
  b6:
  //SEG13 [6] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #screen/$40|charset1/$400
    sta D018
  //SEG14 [7] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #6
    sta BGCOL
    jmp b7
  //SEG15 main::@7
  b7:
  //SEG16 [8] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 98) goto main::@7 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$62
    bne b7
    jmp b9
  //SEG17 main::@9
  b9:
  //SEG18 [9] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #screen/$40|charset2/$400
    sta D018
  //SEG19 [10] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 11 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$b
    sta BGCOL
    jmp b4
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b9
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b6:
Removing instruction b9:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) 53281
(byte*) D018
(const byte*) D018#0 D018 = ((byte*))(word/dword/signed dword) 53272
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte*) charset1
(const byte*) charset1#0 charset1 = ((byte*))(word/signed word/dword/signed dword) 4096
(byte*) charset2
(const byte*) charset2#0 charset2 = ((byte*))(word/signed word/dword/signed dword) 6144
(void()) main()
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@9
(byte*) screen
(const byte*) screen#0 screen = ((byte*))(word/signed word/dword/signed dword) 1024



FINAL ASSEMBLER
Score: 1978

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label D018 = $d018
  .label BGCOL = $d021
  .label screen = $400
  .label charset1 = $1000
  .label charset2 = $1800
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
  //SEG10 main::@4
  b4:
  //SEG11 [5] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG12 main::@6
  //SEG13 [6] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset1#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #screen/$40|charset1/$400
    sta D018
  //SEG14 [7] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 6 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #6
    sta BGCOL
  //SEG15 main::@7
  b7:
  //SEG16 [8] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 98) goto main::@7 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$62
    bne b7
  //SEG17 main::@9
  //SEG18 [9] *((const byte*) D018#0) ← ((byte))(word)(const byte*) screen#0/(byte/signed byte/word/signed word/dword/signed dword) 64|(word)(const byte*) charset2#0/(word/signed word/dword/signed dword) 1024 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #screen/$40|charset2/$400
    sta D018
  //SEG19 [10] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 11 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$b
    sta BGCOL
    jmp b4
}

