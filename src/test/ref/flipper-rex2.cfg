@begin: scope:[]  from
  [0] phi()
  to:@4
@4: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @4
  [3] phi()
main: scope:[main]  from @4
  [4] phi()
  [5] call prepare 
  to:main::@3
main::@3: scope:[main]  from main main::@10 main::@3 main::@6
  [6] (byte) main::c#4 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) $19 main::@6/(byte) main::c#1 main::@10/(byte/signed byte/word/signed word/dword/signed dword) $19 )
  [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $fe) goto main::@3
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@5
  [8] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) $ff) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@5
  [9] (byte) main::c#1 ← -- (byte) main::c#4
  [10] if((byte) main::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  [11] phi()
  [12] call flip 
  to:main::@10
main::@10: scope:[main]  from main::@7
  [13] phi()
  [14] call plot 
  to:main::@3
plot: scope:[plot]  from main::@10
  [15] phi()
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  [16] (byte) plot::y#4 ← phi( plot/(byte/signed byte/word/signed word/dword/signed dword) $10 plot::@3/(byte) plot::y#1 )
  [16] (byte*) plot::line#4 ← phi( plot/(const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 5*(byte/signed byte/word/signed word/dword/signed dword) $28+(byte/signed byte/word/signed word/dword/signed dword) $c plot::@3/(byte*) plot::line#1 )
  [16] (byte) plot::i#3 ← phi( plot/(byte/signed byte/word/signed word/dword/signed dword) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  [17] (byte) plot::x#2 ← phi( plot::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 plot::@2/(byte) plot::x#1 )
  [17] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← *((const byte[$10*$10]) buffer1#0 + (byte) plot::i#2)
  [19] (byte) plot::i#1 ← ++ (byte) plot::i#2
  [20] (byte) plot::x#1 ← ++ (byte) plot::x#2
  [21] if((byte) plot::x#1<(byte/signed byte/word/signed word/dword/signed dword) $10) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [23] (byte) plot::y#1 ← -- (byte) plot::y#4
  [24] if((byte) plot::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [25] return 
  to:@return
flip: scope:[flip]  from main::@7
  [26] phi()
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@3
  [27] (byte) flip::r#4 ← phi( flip/(byte/signed byte/word/signed word/dword/signed dword) $10 flip::@3/(byte) flip::r#1 )
  [27] (byte) flip::dstIdx#5 ← phi( flip/(byte/signed byte/word/signed word/dword/signed dword) $f flip::@3/(byte) flip::dstIdx#2 )
  [27] (byte) flip::srcIdx#3 ← phi( flip/(byte/signed byte/word/signed word/dword/signed dword) 0 flip::@3/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  [28] (byte) flip::c#2 ← phi( flip::@1/(byte/signed byte/word/signed word/dword/signed dword) $10 flip::@2/(byte) flip::c#1 )
  [28] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  [28] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  [29] *((const byte[$10*$10]) buffer2#0 + (byte) flip::dstIdx#3) ← *((const byte[$10*$10]) buffer1#0 + (byte) flip::srcIdx#2)
  [30] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  [31] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte/signed byte/word/signed word/dword/signed dword) $10
  [32] (byte) flip::c#1 ← -- (byte) flip::c#2
  [33] if((byte) flip::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto flip::@2
  to:flip::@3
flip::@3: scope:[flip]  from flip::@2
  [34] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  [35] (byte) flip::r#1 ← -- (byte) flip::r#4
  [36] if((byte) flip::r#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@3 flip::@5
  [37] (byte) flip::i#2 ← phi( flip::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 flip::@5/(byte) flip::i#1 )
  [38] *((const byte[$10*$10]) buffer1#0 + (byte) flip::i#2) ← *((const byte[$10*$10]) buffer2#0 + (byte) flip::i#2)
  [39] (byte) flip::i#1 ← ++ (byte) flip::i#2
  [40] if((byte) flip::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto flip::@5
  to:flip::@return
flip::@return: scope:[flip]  from flip::@5
  [41] return 
  to:@return
prepare: scope:[prepare]  from main
  [42] phi()
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  [43] (byte) prepare::i#2 ← phi( prepare/(byte/signed byte/word/signed word/dword/signed dword) 0 prepare::@1/(byte) prepare::i#1 )
  [44] *((const byte[$10*$10]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  [45] (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  [46] if((byte) prepare::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [47] return 
  to:@return
