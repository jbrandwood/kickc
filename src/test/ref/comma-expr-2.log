
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (byte) main::c#0 ← (byte) 0
  (byte) main::c#1 ← (number) 1+(number) 3
  *((const nomodify byte*) main::SCREEN + (number) 0) ← (byte) main::c#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(byte) main::c
(byte) main::c#0
(byte) main::c#1

Adding number conversion cast (unumber) 1+3 in (byte) main::c#1 ← (number) 1+(number) 3
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← (byte) main::c#1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::c#1 ← (unumber)(number) 1+(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] (byte) main::c#1 ← (unumber)(number) 1+(number) 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::c#0 = 0
Constant (const byte) main::c#1 = (unumber)1+3
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [2] *((const nomodify byte*) main::SCREEN + (byte) 0) ← (const byte) main::c#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::c#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::c#1
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::c

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests simple comma-expressions (without parenthesis)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const c = 1+3
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::c#1 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::c#1 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests simple comma-expressions (without parenthesis)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const c = 1+3
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::c#1 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(byte) main::c
(const byte) main::c#1 c = (byte)(number) 1+(number) 3



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests simple comma-expressions (without parenthesis)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const c = 1+3
    .label SCREEN = $400
    // SCREEN[1,0] = c
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::c#1 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

