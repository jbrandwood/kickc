@begin: scope:[]  from
  [0] (byte) col#0 ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  [5] (byte) col#12 ← phi( main/(byte) col#0 main::@2/(byte) col#12 main::@3/(byte) col#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] if((byte) col#12<(byte) $a+(byte) 1) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] (byte) col#1 ← (byte) 0
  to:main::@1

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [9] *((const byte*) BGCOL) ← (byte) col#0
  [10] if((byte) col#0==(byte) 0) goto irq::@return
  to:irq::@1
irq::@1: scope:[irq]  from irq
  [11] (byte) col#3 ← ++ (byte) col#0
  to:irq::@return
irq::@return: scope:[irq]  from irq irq::@1
  [12] (byte) col#10 ← phi( irq/(byte) col#0 irq::@1/(byte) col#3 )
  [13] return 
  to:@return
