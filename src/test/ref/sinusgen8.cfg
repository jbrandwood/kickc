@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call sin8s_gen 
  to:main::@4
main::@4: scope:[main]  from main
  [6] phi()
  [7] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@6
  [8] (byte*) print_char_cursor#45 ← phi( main::@4/(const byte*) print_line_cursor#0 main::@6/(byte*) print_char_cursor#2 )
  [8] (byte) main::i#2 ← phi( main::@4/(byte) 0 main::@6/(byte) main::i#1 )
  [9] (signed byte) main::sb#0 ← *((const signed byte[$c0]) main::sintab2#0 + (byte) main::i#2) - (signed byte)*((const byte[]) main::sintabref#0 + (byte) main::i#2)
  [10] if((signed byte) main::sb#0<(signed byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [11] phi()
  [12] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [13] (byte*) print_char_cursor#44 ← phi( main::@1/(byte*) print_char_cursor#45 main::@3/(byte*) print_char_cursor#2 )
  [14] (signed byte) print_sbyte::b#1 ← (signed byte) main::sb#0
  [15] call print_sbyte 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [16] phi()
  [17] call print_str 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [18] (byte) main::i#1 ← ++ (byte) main::i#2
  [19] if((byte) main::i#1!=(byte) $c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  [20] return 
  to:@return
print_str: scope:[print_str]  from main::@3 main::@5
  [21] (byte*) print_char_cursor#47 ← phi( main::@3/(byte*) print_char_cursor#45 main::@5/(byte*) print_char_cursor#10 )
  [21] (byte*) print_str::str#5 ← phi( main::@3/(const string) main::str1 main::@5/(const string) main::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [22] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#47 print_str::@2/(byte*) print_char_cursor#1 )
  [22] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [24] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [25] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3)
  [26] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_sbyte: scope:[print_sbyte]  from main::@2
  [28] if((signed byte) print_sbyte::b#1<(signed byte) 0) goto print_sbyte::@1
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte
  [29] phi()
  [30] call print_char 
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte::@3 print_sbyte::@4
  [31] (signed byte) print_sbyte::b#4 ← phi( print_sbyte::@4/(signed byte) print_sbyte::b#0 print_sbyte::@3/(signed byte) print_sbyte::b#1 )
  [32] (byte) print_byte::b#0 ← (byte)(signed byte) print_sbyte::b#4
  [33] call print_byte 
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@2
  [34] return 
  to:@return
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte
  [35] phi()
  [36] call print_char 
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@1
  [37] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#1
  to:print_sbyte::@2
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@1 print_sbyte::@3
  [38] (byte*) print_char_cursor#29 ← phi( print_byte/(byte*) print_char_cursor#10 print_byte::@1/(byte*) print_char_cursor#10 print_sbyte::@1/(byte*) print_char_cursor#44 print_sbyte::@3/(byte*) print_char_cursor#44 )
  [38] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@1/(byte) '-' print_sbyte::@3/(byte) ' ' )
  [39] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#4
  [40] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [41] return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@2
  [42] (byte~) print_byte::$0 ← (byte) print_byte::b#0 >> (byte) 4
  [43] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [44] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [45] (byte~) print_byte::$2 ← (byte) print_byte::b#0 & (byte) $f
  [46] (byte) print_char::ch#3 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [47] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [48] return 
  to:@return
print_cls: scope:[print_cls]  from main::@4
  [49] phi()
  [50] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [51] return 
  to:@return
memset: scope:[memset]  from print_cls
  [52] phi()
  to:memset::@2
memset::@2: scope:[memset]  from memset memset::@1
  [53] (byte*) memset::dst#4 ← phi( memset::@1/(byte*) memset::dst#1 memset/(byte*)(const void*) memset::str#0 )
  [54] *((byte*) memset::dst#4) ← (const byte) memset::c#0
  [55] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#4
  to:memset::@1
memset::@1: scope:[memset]  from memset::@2
  [56] if((byte*) memset::dst#1!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [57] return 
  to:@return
sin8s_gen: scope:[sin8s_gen]  from main
  [58] phi()
  [59] call div16u 
  [60] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  [61] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  to:sin8s_gen::@2
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1 sin8s_gen::@3
  [62] (signed byte*) sin8s_gen::sintab#7 ← phi( sin8s_gen::@1/(signed byte*) sin8s_gen::sintab#0 sin8s_gen::@3/(const signed byte[$c0]) main::sintab2#0 )
  [62] (word) sin8s_gen::x#5 ← phi( sin8s_gen::@1/(word) sin8s_gen::x#1 sin8s_gen::@3/(byte) 0 )
  [62] (word) sin8s_gen::i#5 ← phi( sin8s_gen::@1/(word) sin8s_gen::i#1 sin8s_gen::@3/(byte) 0 )
  [63] (word) sin8s::x#0 ← (word) sin8s_gen::x#5
  [64] call sin8s 
  [65] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  [66] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
  [67] *((signed byte*) sin8s_gen::sintab#7) ← (signed byte~) sin8s_gen::$2
  [68] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#7
  [69] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#5 + (word) sin8s_gen::step#0
  [70] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#5
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@4
  [71] if((word) sin8s_gen::i#1<(const word) main::wavelength#0) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  [72] return 
  to:@return
sin8s: scope:[sin8s]  from sin8s_gen::@2
  [73] if((word) sin8s::x#0<(const word) PI_u4f12#0) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [74] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const word) PI_u4f12#0
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [75] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [75] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#0 sin8s::@5/(word) sin8s::x#1 )
  [76] if((word) sin8s::x#4<(const word) PI_HALF_u4f12#0) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [77] (word) sin8s::x#2 ← (const word) PI_u4f12#0 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [78] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  [79] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [80] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [81] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [82] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [83] call mulu8_sel 
  [84] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [85] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [86] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [87] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [88] call mulu8_sel 
  [89] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [90] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [91] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [92] call mulu8_sel 
  [93] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [94] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [95] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [96] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [97] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [98] call mulu8_sel 
  [99] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [100] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [101] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [102] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [103] call mulu8_sel 
  [104] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [105] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [106] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [107] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [108] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [109] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [110] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [111] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [112] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [113] (signed byte) sin8s::return#1 ← phi( sin8s::@14/(signed byte~) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [114] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [115] (signed byte~) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [116] (byte) mulu8_sel::select#5 ← phi( sin8s::@9/(byte) 1 sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 )
  [116] (byte) mulu8_sel::v2#5 ← phi( sin8s::@9/(byte) mulu8_sel::v2#1 sin8s::@10/(const byte) sin8s::DIV_6#0 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 )
  [116] (byte) mulu8_sel::v1#5 ← phi( sin8s::@9/(byte) mulu8_sel::v1#1 sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 )
  [117] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  [118] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  [119] call mul8u 
  [120] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [121] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  [122] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [123] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [124] return 
  to:@return
mul8u: scope:[mul8u]  from mulu8_sel
  [125] phi()
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [126] (word) mul8u::mb#2 ← phi( mul8u/(byte) mul8u::b#0 mul8u::@3/(word) mul8u::mb#1 )
  [126] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [126] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [127] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [128] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [129] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [130] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [131] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [132] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [133] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [134] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
div16u: scope:[div16u]  from sin8s_gen
  [135] phi()
  [136] call divr16u 
  [137] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [138] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [139] return 
  to:@return
divr16u: scope:[divr16u]  from div16u
  [140] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [141] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [141] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [141] (word) divr16u::dividend#2 ← phi( divr16u/(const word) PI2_u4f12#0 divr16u::@3/(word) divr16u::dividend#0 )
  [141] (word) divr16u::rem#4 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#9 )
  [142] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [143] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [144] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [145] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [146] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [147] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [148] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [149] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [150] if((word) divr16u::rem#5<(const word) main::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [151] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [152] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (const word) main::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [153] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [153] (word) divr16u::rem#9 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [154] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [155] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [156] return 
  to:@return
