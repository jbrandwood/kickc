(label) @1
(label) @begin
(label) @end
(const nomodify byte*) BORDERCOL = (byte*) 53280
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const nomodify dword*) CIA2_TIMER_AB = (dword*) 56580
(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = (byte) $40
(const nomodify byte) CIA_TIMER_CONTROL_START = (byte) 1
(const nomodify dword) CLOCKS_PER_INIT = (dword) $12
(const byte*) COS = (const byte*) SIN+(byte) $40
(const nomodify byte) GREEN = (byte) 5
(const nomodify byte) LIGHT_BLUE = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte*) RASTER = (byte*) 53266
(const byte*) SCREEN = (byte*) 1024
(const byte*) SIN[(number) $140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
(const byte*) SPRITE = (byte*) 12288
(const nomodify byte*) SPRITES_COLS = (byte*) 53287
(const nomodify byte*) SPRITES_ENABLE = (byte*) 53269
(const nomodify byte*) SPRITES_XMSB = (byte*) 53264
(const nomodify byte*) SPRITES_XPOS = (byte*) 53248
(const nomodify byte*) SPRITES_YPOS = (byte*) 53249
(void()) anim()
(signed word~) anim::$10 zp[2]:3 20002.0
(signed word~) anim::$11 zp[2]:3 20002.0
(signed word~) anim::$12 zp[2]:3 20002.0
(byte~) anim::$14 reg byte a 10001.0
(byte~) anim::$17 reg byte a 20002.0
(byte~) anim::$21 reg byte a 20002.0
(byte~) anim::$24 reg byte a 20002.0
(dword~) anim::$26 zp[4]:19 2002.0
(signed word~) anim::$4 zp[2]:3 20002.0
(signed word~) anim::$6 zp[2]:3 20002.0
(signed word~) anim::$9 zp[2]:3 20002.0
(label) anim::@1
(label) anim::@10
(label) anim::@11
(label) anim::@12
(label) anim::@13
(label) anim::@14
(label) anim::@15
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(byte) anim::angle
(byte) anim::angle#1 angle zp[1]:7 250.25
(byte) anim::angle#9 angle zp[1]:7 44.48888888888889
(signed byte) anim::cos_a
(dword) anim::cyclecount
(dword) anim::cyclecount#0 cyclecount zp[4]:19 2002.0
(byte) anim::i
(byte) anim::i#1 i zp[1]:10 15001.5
(byte) anim::i#10 i zp[1]:10 1315.921052631579
(byte) anim::i2
(byte) anim::i2#0 reg byte x 10001.0
(label) anim::mulf8s_prepare1
(signed byte) anim::mulf8s_prepare1_a
(label) anim::mulf8s_prepare2
(signed byte) anim::mulf8s_prepare2_a
(signed byte) anim::sin_a
(byte) anim::sprite_msb
(byte) anim::sprite_msb#1 sprite_msb zp[1]:2 10001.0
(byte) anim::sprite_msb#10 sprite_msb zp[1]:2 740.8148148148148
(byte) anim::sprite_msb#2 sprite_msb zp[1]:2 20002.0
(byte) anim::sprite_msb#5 sprite_msb zp[1]:2 3444.8888888888887
(signed byte) anim::x
(signed byte) anim::x#0 x zp[1]:11 1579.1052631578946
(signed word) anim::xpos
(signed word) anim::xpos#0 xpos zp[2]:17 3333.6666666666665
(signed word) anim::xr
(signed word) anim::xr#0 xr zp[2]:13 1818.3636363636363
(signed word) anim::xr#1 xr zp[2]:13 3333.6666666666665
(signed byte) anim::y
(signed byte) anim::y#0 y zp[1]:12 2307.9230769230767
(byte) anim::ypos
(byte) anim::ypos#0 reg byte y 5000.5
(signed word) anim::yr
(signed word) anim::yr#0 yr zp[2]:15 1666.8333333333333
(signed word) anim::yr#1 yr zp[2]:15 2500.25
(dword()) clock()
(label) clock::@return
(dword) clock::return
(dword) clock::return#0 return zp[4]:19 3667.333333333333
(dword) clock::return#2 return zp[4]:19 2002.0
(void()) clock_start()
(label) clock_start::@return
(void()) init()
(label) init::@1
(label) init::@2
(label) init::@return
(byte) init::i
(byte) init::i#1 reg byte x 1501.5
(byte) init::i#2 reg byte x 1334.6666666666667
(byte*) init::sprites_ptr
(const byte*) init::sprites_ptr#0 sprites_ptr = (const byte*) SCREEN+(word) $3f8
(void()) main()
(label) main::@1
(label) main::@return
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$11 reg byte a 200002.0
(byte~) mulf8s_prepared::$12 reg byte a 200002.0
(byte~) mulf8s_prepared::$6 reg byte a 200002.0
(byte~) mulf8s_prepared::$9 reg byte a 200002.0
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@5
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0 reg byte y 20002.0
(signed byte) mulf8s_prepared::b#1 reg byte y 20002.0
(signed byte) mulf8s_prepared::b#2 reg byte y 20002.0
(signed byte) mulf8s_prepared::b#3 reg byte y 20002.0
(signed byte) mulf8s_prepared::b#4 reg byte y 14000.5
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 m zp[2]:3 100001.0
(word) mulf8s_prepared::m#1 m zp[2]:3 200002.0
(word) mulf8s_prepared::m#2 m zp[2]:3 200002.0
(word) mulf8s_prepared::m#4 m zp[2]:3 33333.666666666664
(word) mulf8s_prepared::m#5 m zp[2]:3 125001.25
(const nomodify signed byte*) mulf8s_prepared::memA = (signed byte*) 253
(signed word) mulf8s_prepared::return
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#2 reg byte a 120003.0
(byte) mulf8u_prepare::a#3 reg byte a 20002.0
(byte) mulf8u_prepare::a#4 reg byte a 20002.0
(const nomodify byte*) mulf8u_prepare::memA = (byte*) 253
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0 reg byte a 1100002.0
(const nomodify byte*) mulf8u_prepared::memB = (byte*) 255
(const nomodify byte*) mulf8u_prepared::resL = (byte*) 254
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 return zp[2]:3 366667.3333333334
(word) mulf8u_prepared::return#2 return zp[2]:3 200002.0
(void()) mulf_init()
(byte~) mulf_init::$1 reg byte a 20002.0
(byte~) mulf_init::$4 reg byte a 20002.0
(byte~) mulf_init::$5 reg byte a 20002.0
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 c zp[1]:7 2307.9230769230767
(byte) mulf_init::c#2 c zp[1]:7 10001.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp[1]:10 3750.375
(byte) mulf_init::dir#4 dir zp[1]:10 10001.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp[2]:17 10001.0
(word) mulf_init::sqr#2 sqr zp[2]:17 20002.0
(word) mulf_init::sqr#3 sqr zp[2]:17 8334.166666666666
(word) mulf_init::sqr#4 sqr zp[2]:17 5000.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp[2]:8 6667.333333333333
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp[2]:8 2500.25
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp[2]:5 20002.0
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp[2]:5 2857.4285714285716
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp[2]:15 3333.6666666666665
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp[2]:15 7500.75
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp[2]:13 20002.0
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp[2]:13 4444.888888888889
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 reg byte x 10001.0
(byte) mulf_init::x_2#2 reg byte x 5000.5
(byte) mulf_init::x_2#3 reg byte x 6000.6
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 6000.6
(byte) mulf_init::x_255#2 reg byte x 8000.8
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0 at zp[2]:8 2000002.0
(byte*) print_char_at::at#1 at zp[2]:8 1000001.0
(byte*) print_char_at::at#2 at zp[2]:8 1.2000003E7
(byte) print_char_at::ch
(byte) print_char_at::ch#0 reg byte x 1000001.0
(byte) print_char_at::ch#1 reg byte x 2000002.0
(byte) print_char_at::ch#2 reg byte x 1.2000003E7
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
(byte~) print_uchar_at::$0 reg byte a 2000002.0
(byte~) print_uchar_at::$2 reg byte y 1000001.0
(label) print_uchar_at::@1
(label) print_uchar_at::@return
(byte*) print_uchar_at::at
(byte*) print_uchar_at::at#0 at zp[2]:5 200002.0
(byte*) print_uchar_at::at#1 at zp[2]:5 200002.0
(byte*) print_uchar_at::at#2 at zp[2]:5 366667.3333333334
(byte) print_uchar_at::b
(byte) print_uchar_at::b#0 b zp[1]:11 100001.0
(byte) print_uchar_at::b#1 b zp[1]:11 100001.0
(byte) print_uchar_at::b#2 b zp[1]:11 440000.80000000005
(void()) print_uint_at((word) print_uint_at::w , (byte*) print_uint_at::at)
(label) print_uint_at::@1
(label) print_uint_at::@return
(byte*) print_uint_at::at
(byte*) print_uint_at::at#2 at zp[2]:5 40000.4
(word) print_uint_at::w
(word) print_uint_at::w#0 w zp[2]:3 20002.0
(word) print_uint_at::w#1 w zp[2]:3 20002.0
(word) print_uint_at::w#2 w zp[2]:3 55001.0
(void()) print_ulong_at((dword) print_ulong_at::dw , (byte*) print_ulong_at::at)
(label) print_ulong_at::@1
(label) print_ulong_at::@return
(byte*) print_ulong_at::at
(dword) print_ulong_at::dw
(dword) print_ulong_at::dw#0 dw zp[4]:19 7001.0
(const signed byte*) xs[(number) 8]  = { (signed byte) -$46, (signed byte) -$46, (signed byte) -$46, (signed byte) 0, (signed byte) 0, (signed byte) $46, (signed byte) $46, (signed byte) $46 }
(const signed byte*) ys[(number) 8]  = { (signed byte) -$46, (signed byte) 0, (signed byte) $46, (signed byte) -$46, (signed byte) $46, (signed byte) -$46, (signed byte) 0, (signed byte) $46 }

zp[1]:2 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
zp[2]:3 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
reg byte x [ init::i#2 init::i#1 ]
zp[2]:5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ]
zp[1]:7 [ mulf_init::c#2 mulf_init::c#1 anim::angle#9 anim::angle#1 ]
zp[2]:8 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:10 [ mulf_init::dir#2 mulf_init::dir#4 anim::i#10 anim::i#1 ]
zp[1]:11 [ anim::x#0 print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
zp[1]:12 [ anim::y#0 ]
zp[2]:13 [ anim::xr#0 anim::xr#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
zp[2]:15 [ anim::yr#0 anim::yr#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
reg byte a [ anim::$14 ]
zp[2]:17 [ anim::xpos#0 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
reg byte a [ anim::$17 ]
reg byte a [ anim::$21 ]
reg byte y [ anim::ypos#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$24 ]
zp[4]:19 [ clock::return#2 anim::$26 clock::return#0 anim::cyclecount#0 print_ulong_at::dw#0 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
