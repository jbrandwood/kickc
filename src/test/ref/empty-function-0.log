Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) v#12 ← phi( __start::@1/(byte) v#13 )
  call set 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) v#7 ← phi( main/(byte) v#3 )
  (byte) v#0 ← (byte) v#7
  *((const nomodify byte*) SCREEN + (number) 0) ← (byte) v#0
  to:main::@return
main::@return: scope:[main]  from main::@1
  (byte) v#8 ← phi( main::@1/(byte) v#0 )
  (byte) v#1 ← (byte) v#8
  return 
  to:@return

(void()) set()
set: scope:[set]  from main
  (byte) v#2 ← (number) 7
  to:set::@return
set::@return: scope:[set]  from set
  (byte) v#9 ← phi( set/(byte) v#2 )
  (byte) v#3 ← (byte) v#9
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) v#4 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) v#13 ← phi( __start::__init1/(byte) v#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) v#10 ← phi( __start::@1/(byte) v#1 )
  (byte) v#5 ← (byte) v#10
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) v#11 ← phi( __start::@2/(byte) v#5 )
  (byte) v#6 ← (byte) v#11
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(label) main::@1
(label) main::@return
(void()) set()
(label) set::@return
(byte) v
(byte) v#0
(byte) v#1
(byte) v#10
(byte) v#11
(byte) v#12
(byte) v#13
(byte) v#2
(byte) v#3
(byte) v#4
(byte) v#5
(byte) v#6
(byte) v#7
(byte) v#8
(byte) v#9

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (byte) v#0
Adding number conversion cast (unumber) 7 in (byte) v#2 ← (number) 7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) v#2 ← (unumber)(number) 7
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias v#0 = v#7 v#8 v#1 
Alias v#2 = v#9 v#3 
Alias v#13 = v#4 
Alias v#10 = v#5 v#11 v#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) v#12 (byte) v#13
Identical Phi Values (byte) v#0 (byte) v#2
Identical Phi Values (byte) v#10 (byte) v#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) v#2 = 7
Constant (const byte) v#13 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [3] *((const nomodify byte*) SCREEN + (byte) 0) ← (const byte) v#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) v#13
Successful SSA optimization PassNEliminateUnusedVars
Removing call to empty procedure [0] call set 
Removing unused procedure set
Removing unused procedure block set
Removing unused procedure block set::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [1] *((const nomodify byte*) SCREEN) ← (const byte) v#2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) v

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test removal of empty function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const v = 7
  .label SCREEN = $400
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [1] *((const nomodify byte*) SCREEN) ← (const byte) v#2 -- _deref_pbuc1=vbuc2 
    lda #v
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *((const nomodify byte*) SCREEN) ← (const byte) v#2 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test removal of empty function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const v = 7
  .label SCREEN = $400
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [1] *((const nomodify byte*) SCREEN) ← (const byte) v#2 -- _deref_pbuc1=vbuc2 
    lda #v
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@return
(byte) v
(const byte) v#2 v = (byte) 7



FINAL ASSEMBLER
Score: 12

  // File Comments
// Test removal of empty function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const v = 7
  .label SCREEN = $400
  // main
main: {
    // main::@1
    // SCREEN[0] = v
    // [1] *((const nomodify byte*) SCREEN) ← (const byte) v#2 -- _deref_pbuc1=vbuc2 
    lda #v
    sta SCREEN
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

