byte i=10;
byte s=0;
do {
  if(i>5) {
    s=s+i;
  }
  i--;
} while (i>0)
Adding pre/post-modifier (byte) i ← -- (byte) i
PROGRAM
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
@1:
  (boolean~) $0 ← (byte) i > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  (byte~) $2 ← (byte) s + (byte) i
  (byte) s ← (byte~) $2
@2:
  (byte) i ← -- (byte) i
  (boolean~) $3 ← (byte) i > (byte) 0
  if((boolean~) $3) goto @1

SYMBOLS
(boolean~) $0
(boolean~) $1
(byte~) $2
(boolean~) $3
(label) @1
(label) @2
(byte) i
(byte) s

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
  to:@1
@1: scope:[]  from @2 @begin
  (boolean~) $0 ← (byte) i > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) i ← -- (byte) i
  (boolean~) $3 ← (byte) i > (byte) 0
  if((boolean~) $3) goto @1
  to:@4
@3: scope:[]  from @1
  (byte~) $2 ← (byte) s + (byte) i
  (byte) s ← (byte~) $2
  to:@2
@4: scope:[]  from @2
  to:@end
@end: scope:[]  from @4

Removing empty block @4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
  to:@1
@1: scope:[]  from @2 @begin
  (boolean~) $0 ← (byte) i > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) i ← -- (byte) i
  (boolean~) $3 ← (byte) i > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte~) $2 ← (byte) s + (byte) i
  (byte) s ← (byte~) $2
  to:@2
@end: scope:[]  from @2

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
  to:@1
@1: scope:[]  from @2 @begin
  (boolean~) $0 ← (byte) i > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) i ← -- (byte) i
  (boolean~) $3 ← (byte) i > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte~) $2 ← (byte) s + (byte) i
  (byte) s ← (byte~) $2
  to:@2
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) i#0 ← (byte) 10
  (byte) s#0 ← (byte) 0
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#3 ← phi( @2/(byte) s#4 @begin/(byte) s#0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) i#0 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#3 @3/(byte) s#1 )
  (byte) i#3 ← phi( @1/(byte) i#2 @3/(byte) i#4 )
  (byte) i#1 ← -- (byte) i#3
  (boolean~) $3 ← (byte) i#1 > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) i#4 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $2 ← (byte) s#2 + (byte) i#4
  (byte) s#1 ← (byte~) $2
  to:@2
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte) i#0 ← (byte) 10
  (byte) s#0 ← (byte) 0
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#3 ← phi( @2/(byte) s#4 @begin/(byte) s#0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) i#0 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#3 @3/(byte) s#1 )
  (byte) i#3 ← phi( @1/(byte) i#2 @3/(byte) i#4 )
  (byte) i#1 ← -- (byte) i#3
  (boolean~) $3 ← (byte) i#1 > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) i#4 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $2 ← (byte) s#2 + (byte) i#4
  (byte) s#1 ← (byte~) $2
  to:@2
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(boolean~) $0
(boolean~) $1
(byte~) $2
(boolean~) $3
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(byte) i
(byte) i#0
(byte) i#1
(byte) i#2
(byte) i#3
(byte) i#4
(byte) s
(byte) s#0
(byte) s#1
(byte) s#2
(byte) s#3
(byte) s#4

Constant (byte) i#0 (byte) 10
Constant (byte) s#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#3 ← phi( @2/(byte) s#4 @begin/(byte) 0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) 10 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  (boolean~) $1 ← ! (boolean~) $0
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#3 @3/(byte) s#1 )
  (byte) i#3 ← phi( @1/(byte) i#2 @3/(byte) i#4 )
  (byte) i#1 ← -- (byte) i#3
  (boolean~) $3 ← (byte) i#1 > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) i#4 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $2 ← (byte) s#2 + (byte) i#4
  (byte) s#1 ← (byte~) $2
  to:@2
@end: scope:[]  from @2

Inversing boolean not (boolean~) $1 ← (byte) i#2 <= (byte) 5 from (boolean~) $0 ← (byte) i#2 > (byte) 5
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#3 ← phi( @2/(byte) s#4 @begin/(byte) 0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) 10 )
  (boolean~) $1 ← (byte) i#2 <= (byte) 5
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#3 @3/(byte) s#1 )
  (byte) i#3 ← phi( @1/(byte) i#2 @3/(byte) i#4 )
  (byte) i#1 ← -- (byte) i#3
  (boolean~) $3 ← (byte) i#1 > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) i#4 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $2 ← (byte) s#2 + (byte) i#4
  (byte) s#1 ← (byte~) $2
  to:@2
@end: scope:[]  from @2

Alias (byte) s#2 = (byte) s#3 
Alias (byte) i#2 = (byte) i#4 
Alias (byte) s#1 = (byte~) $2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#2 ← phi( @2/(byte) s#4 @begin/(byte) 0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) 10 )
  (boolean~) $1 ← (byte) i#2 <= (byte) 5
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#2 @3/(byte) s#1 )
  (byte) i#3 ← phi( @1/(byte) i#2 @3/(byte) i#2 )
  (byte) i#1 ← -- (byte) i#3
  (boolean~) $3 ← (byte) i#1 > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  to:@2
@end: scope:[]  from @2

Redundant Phi (byte) i#3 (byte) i#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#2 ← phi( @2/(byte) s#4 @begin/(byte) 0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) 10 )
  (boolean~) $1 ← (byte) i#2 <= (byte) 5
  if((boolean~) $1) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#2 @3/(byte) s#1 )
  (byte) i#1 ← -- (byte) i#2
  (boolean~) $3 ← (byte) i#1 > (byte) 0
  if((boolean~) $3) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  to:@2
@end: scope:[]  from @2

Simple Condition (boolean~) $1 if((byte) i#2<=(byte) 5) goto @2
Simple Condition (boolean~) $3 if((byte) i#1>(byte) 0) goto @1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @2 @begin
  (byte) s#2 ← phi( @2/(byte) s#4 @begin/(byte) 0 )
  (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) 10 )
  if((byte) i#2<=(byte) 5) goto @2
  to:@3
@2: scope:[]  from @1 @3
  (byte) s#4 ← phi( @1/(byte) s#2 @3/(byte) s#1 )
  (byte) i#1 ← -- (byte) i#2
  if((byte) i#1>(byte) 0) goto @1
  to:@end
@3: scope:[]  from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  to:@2
@end: scope:[]  from @2

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(byte) i
(byte) i#1
(byte) i#2
(byte) s
(byte) s#1
(byte) s#2
(byte) s#4

Block Sequence Planned @begin @1 @3 @2 @end 
Added new block during phi lifting @5(between @2 and @1)
Added new block during phi lifting @6(between @1 and @2)
Block Sequence Planned @begin @1 @3 @2 @end @5 @6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @5 @begin
  (byte) s#2 ← phi( @5/(byte~) s#5 @begin/(byte) 0 )
  (byte) i#2 ← phi( @5/(byte~) i#5 @begin/(byte) 10 )
  if((byte) i#2<=(byte) 5) goto @6
  to:@3
@3: scope:[]  from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  (byte~) s#7 ← (byte) s#1
  to:@2
@2: scope:[]  from @3 @6
  (byte) s#4 ← phi( @6/(byte~) s#6 @3/(byte~) s#7 )
  (byte) i#1 ← -- (byte) i#2
  if((byte) i#1>(byte) 0) goto @5
  to:@end
@end: scope:[]  from @2
@5: scope:[]  from @2
  (byte~) i#5 ← (byte) i#1
  (byte~) s#5 ← (byte) s#4
  to:@1
@6: scope:[]  from @1
  (byte~) s#6 ← (byte) s#2
  to:@2

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @5 @begin
  [0] (byte) s#2 ← phi( @5/(byte~) s#5 @begin/(byte) 0 ) [ i#2 s#2 ]
  [0] (byte) i#2 ← phi( @5/(byte~) i#5 @begin/(byte) 10 ) [ i#2 s#2 ]
  [1] if((byte) i#2<=(byte) 5) goto @6 [ i#2 s#2 ]
  to:@3
@3: scope:[]  from @1
  [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ]
  [3] (byte~) s#7 ← (byte) s#1 [ i#2 s#7 ]
  to:@2
@2: scope:[]  from @3 @6
  [4] (byte) s#4 ← phi( @6/(byte~) s#6 @3/(byte~) s#7 ) [ i#2 s#4 ]
  [5] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ]
  [6] if((byte) i#1>(byte) 0) goto @5 [ i#1 s#4 ]
  to:@end
@end: scope:[]  from @2
@5: scope:[]  from @2
  [7] (byte~) i#5 ← (byte) i#1 [ i#5 s#4 ]
  [8] (byte~) s#5 ← (byte) s#4 [ i#5 s#5 ]
  to:@1
@6: scope:[]  from @1
  [9] (byte~) s#6 ← (byte) s#2 [ i#2 s#6 ]
  to:@2

Created 3 initial phi equivalence classes
Coalesced [3] s#7 ← s#1
Coalesced [7] i#5 ← i#1
Coalesced [8] s#5 ← s#4
Coalesced (already) [9] s#6 ← s#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Block Sequence Planned @begin @1 @3 @2 @end 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @2 @begin
  [0] (byte) s#2 ← phi( @2/(byte) s#4 @begin/(byte) 0 ) [ i#2 s#2 ]
  [0] (byte) i#2 ← phi( @2/(byte) i#1 @begin/(byte) 10 ) [ i#2 s#2 ]
  [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ]
  to:@3
@3: scope:[]  from @1
  [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ]
  to:@2
@2: scope:[]  from @1 @3
  [3] (byte) s#4 ← phi( @1/(byte) s#2 @3/(byte) s#1 ) [ s#4 i#2 ]
  [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ]
  [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ]
  to:@end
@end: scope:[]  from @2

CALL GRAPH

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@3 dominated by  @1 @3 @begin 
@2 dominated by  @1 @2 @begin 
@end dominated by  @1 @2 @end @begin 

Found back edge: Loop head: @1 tails: @2 blocks: null
Populated: Loop head: @1 tails: @2 blocks: @2 @1 @3 
NATURAL LOOPS
Loop head: @1 tails: @2 blocks: @2 @1 @3 

Found 1 loops in scope []
  Loop head: @1 tails: @2 blocks: @2 @1 @3 
NATURAL LOOPS WITH DEPTH
Loop head: @1 tails: @2 blocks: @2 @1 @3  depth: 1


VARIABLE REGISTER WEIGHTS
(byte) i
(byte) i#1 16.5
(byte) i#2 11.0
(byte) s
(byte) s#1 22.0
(byte) s#2 16.5
(byte) s#4 11.0

Initial phi equivalence classes
[ i#2 i#1 ]
[ s#2 s#4 s#1 ]
Complete equivalence classes
[ i#2 i#1 ]
[ s#2 s#4 s#1 ]
Allocated zp ZP_BYTE:2 [ i#2 i#1 ]
Allocated zp ZP_BYTE:3 [ s#2 s#4 s#1 ]
INITIAL ASM
//SEG0 Global ZP labels
  .label i = 2
  .label s = 3
//SEG1 @begin
bbegin:
//SEG2 [0] phi from @begin to @1
b1_from_bbegin:
//SEG3 [0] phi (byte) s#2 = (byte) 0 -- zpby1=coby1 
  lda #$0
  sta s
//SEG4 [0] phi (byte) i#2 = (byte) 10 -- zpby1=coby1 
  lda #$a
  sta i
  jmp b1
//SEG5 [0] phi from @2 to @1
b1_from_b2:
//SEG6 [0] phi (byte) s#2 = (byte) s#4 -- register_copy 
//SEG7 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
  jmp b1
//SEG8 @1
b1:
//SEG9 [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ] -- zpby1_le_coby1_then_la1 
  lda i
  cmp #$5
  bcc b2_from_b1
  beq b2_from_b1
  jmp b3
//SEG10 @3
b3:
//SEG11 [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ] -- zpby1=zpby1_plus_zpby2 
  lda s
  clc
  adc i
  sta s
//SEG12 [3] phi from @1 @3 to @2
b2_from_b1:
b2_from_b3:
//SEG13 [3] phi (byte) s#4 = (byte) s#2 -- register_copy 
  jmp b2
//SEG14 @2
b2:
//SEG15 [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ] -- zpby1=_dec_zpby1 
  dec i
//SEG16 [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ] -- zpby1_gt_0_then_la1 
  lda i
  bne b1_from_b2
  jmp bend
//SEG17 @end
bend:

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ i#2 i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ s#2 s#4 s#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 49.5: zp ZP_BYTE:3 [ s#2 s#4 s#1 ] 27.5: zp ZP_BYTE:2 [ i#2 i#1 ] 

Uplifting [] best 405 combination reg byte a [ s#2 s#4 s#1 ] reg byte x [ i#2 i#1 ] 
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp bend
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] phi from @begin to @1
b1_from_bbegin:
//SEG3 [0] phi (byte) s#2 = (byte) 0 -- aby=coby1 
  lda #$0
//SEG4 [0] phi (byte) i#2 = (byte) 10 -- xby=coby1 
  ldx #$a
  jmp b1
//SEG5 [0] phi from @2 to @1
b1_from_b2:
//SEG6 [0] phi (byte) s#2 = (byte) s#4 -- register_copy 
//SEG7 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG8 @1
b1:
//SEG9 [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ] -- xby_le_coby1_then_la1 
  cpx #$5
  bcc b2_from_b1
  beq b2_from_b1
//SEG10 @3
b3:
//SEG11 [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ] -- aby=aby_plus_xby 
  stx $ff
  clc
  adc $ff
//SEG12 [3] phi from @1 @3 to @2
b2_from_b1:
b2_from_b3:
//SEG13 [3] phi (byte) s#4 = (byte) s#2 -- register_copy 
//SEG14 @2
b2:
//SEG15 [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ] -- xby=_dec_xby 
  dex
//SEG16 [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ] -- xby_gt_0_then_la1 
  cpx #$0
  bne b1_from_b2
//SEG17 @end
bend:

Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) s#2 = (byte) 0 -- aby=coby1 
  lda #$0
//SEG4 [0] phi (byte) i#2 = (byte) 10 -- xby=coby1 
  ldx #$a
  jmp b1
//SEG5 [0] phi from @2 to @1
//SEG6 [0] phi (byte) s#2 = (byte) s#4 -- register_copy 
//SEG7 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG8 @1
b1:
//SEG9 [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ] -- xby_le_coby1_then_la1 
  cpx #$5
  bcc b2
  beq b2
//SEG10 @3
b3:
//SEG11 [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ] -- aby=aby_plus_xby 
  stx $ff
  clc
  adc $ff
//SEG12 [3] phi from @1 @3 to @2
//SEG13 [3] phi (byte) s#4 = (byte) s#2 -- register_copy 
//SEG14 @2
b2:
//SEG15 [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ] -- xby=_dec_xby 
  dex
//SEG16 [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ] -- xby_gt_0_then_la1 
  cpx #$0
  bne b1
//SEG17 @end
bend:

Removing instruction bbegin:
Removing instruction b3:
Removing instruction bend:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) s#2 = (byte) 0 -- aby=coby1 
  lda #$0
//SEG4 [0] phi (byte) i#2 = (byte) 10 -- xby=coby1 
  ldx #$a
  jmp b1
//SEG5 [0] phi from @2 to @1
//SEG6 [0] phi (byte) s#2 = (byte) s#4 -- register_copy 
//SEG7 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG8 @1
b1:
//SEG9 [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ] -- xby_le_coby1_then_la1 
  cpx #$5
  bcc b2
  beq b2
//SEG10 @3
//SEG11 [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ] -- aby=aby_plus_xby 
  stx $ff
  clc
  adc $ff
//SEG12 [3] phi from @1 @3 to @2
//SEG13 [3] phi (byte) s#4 = (byte) s#2 -- register_copy 
//SEG14 @2
b2:
//SEG15 [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ] -- xby=_dec_xby 
  dex
//SEG16 [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ] -- xby_gt_0_then_la1 
  cpx #$0
  bne b1
//SEG17 @end

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) s#2 = (byte) 0 -- aby=coby1 
  lda #$0
//SEG4 [0] phi (byte) i#2 = (byte) 10 -- xby=coby1 
  ldx #$a
//SEG5 [0] phi from @2 to @1
//SEG6 [0] phi (byte) s#2 = (byte) s#4 -- register_copy 
//SEG7 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG8 @1
b1:
//SEG9 [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ] -- xby_le_coby1_then_la1 
  cpx #$5
  bcc b2
  beq b2
//SEG10 @3
//SEG11 [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ] -- aby=aby_plus_xby 
  stx $ff
  clc
  adc $ff
//SEG12 [3] phi from @1 @3 to @2
//SEG13 [3] phi (byte) s#4 = (byte) s#2 -- register_copy 
//SEG14 @2
b2:
//SEG15 [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ] -- xby=_dec_xby 
  dex
//SEG16 [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ] -- xby_gt_0_then_la1 
  cpx #$0
  bne b1
//SEG17 @end

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(byte) i
(byte) i#1 reg byte x 16.5
(byte) i#2 reg byte x 11.0
(byte) s
(byte) s#1 reg byte a 22.0
(byte) s#2 reg byte a 16.5
(byte) s#4 reg byte a 11.0

reg byte x [ i#2 i#1 ]
reg byte a [ s#2 s#4 s#1 ]

FINAL CODE
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] phi from @begin to @1
//SEG3 [0] phi (byte) s#2 = (byte) 0 -- aby=coby1 
  lda #$0
//SEG4 [0] phi (byte) i#2 = (byte) 10 -- xby=coby1 
  ldx #$a
//SEG5 [0] phi from @2 to @1
//SEG6 [0] phi (byte) s#2 = (byte) s#4 -- register_copy 
//SEG7 [0] phi (byte) i#2 = (byte) i#1 -- register_copy 
//SEG8 @1
b1:
//SEG9 [1] if((byte) i#2<=(byte) 5) goto @2 [ i#2 s#2 ] -- xby_le_coby1_then_la1 
  cpx #$5
  bcc b2
  beq b2
//SEG10 @3
//SEG11 [2] (byte) s#1 ← (byte) s#2 + (byte) i#2 [ i#2 s#1 ] -- aby=aby_plus_xby 
  stx $ff
  clc
  adc $ff
//SEG12 [3] phi from @1 @3 to @2
//SEG13 [3] phi (byte) s#4 = (byte) s#2 -- register_copy 
//SEG14 @2
b2:
//SEG15 [4] (byte) i#1 ← -- (byte) i#2 [ i#1 s#4 ] -- xby=_dec_xby 
  dex
//SEG16 [5] if((byte) i#1>(byte) 0) goto @1 [ i#1 s#4 ] -- xby_gt_0_then_la1 
  cpx #$0
  bne b1
//SEG17 @end

