Inlined call (byte*~) init_points::$0 ← call getPoint (byte) init_points::i 
Inlined call (byte*~) init_points::$1 ← call pointXpos (byte*) init_points::point 
Inlined call (byte*~) init_points::$2 ← call pointYpos (byte*) init_points::point 
Inlined call (byte*~) print_points::$1 ← call getPoint (byte) print_points::i 
Inlined call (byte*~) print_points::$2 ← call pointXpos (byte*) print_points::point 
Inlined call (byte*~) print_points::$5 ← call pointYpos (byte*) print_points::point 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_points::@6
  (byte*) print_char_cursor#51 ← phi( print_points::@6/(byte*) print_char_cursor#14 )
  (byte*) print_str::str#5 ← phi( print_points::@6/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#43 ← phi( print_str/(byte*) print_char_cursor#51 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#42 ← phi( print_str::@1/(byte*) print_char_cursor#43 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#22 ← phi( print_str::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#22
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#23 ← phi( print_str::@1/(byte*) print_char_cursor#43 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#23
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_points::@8
  (byte*) print_char_cursor#44 ← phi( print_points::@8/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#23 ← phi( print_points::@8/(byte*) print_line_cursor#26 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#24 ← phi( print_ln/(byte*) print_char_cursor#44 print_ln::@1/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#23 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#24
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#13 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#2 ← (byte*) print_line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#25 ← phi( print_ln::@2/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#14 ← phi( print_ln::@2/(byte*) print_line_cursor#13 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#25
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_points::@3 print_points::@4
  (byte*) print_char_cursor#45 ← phi( print_points::@3/(byte*) print_char_cursor#48 print_points::@4/(byte*) print_char_cursor#49 )
  (byte) print_uchar::b#2 ← phi( print_points::@3/(byte) print_uchar::b#0 print_points::@4/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#26 ← phi( print_uchar/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#26
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#27 ← phi( print_uchar::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#27
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#28 ← phi( print_uchar::@2/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#28
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1
  (byte*) print_char_cursor#29 ← phi( print_str::@2/(byte*) print_char_cursor#42 print_uchar/(byte*) print_char_cursor#45 print_uchar::@1/(byte*) print_char_cursor#4 )
  (byte) print_char::ch#3 ← phi( print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 )
  *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3
  (byte*) print_char_cursor#7 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#30 ← phi( print_char/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from print_points
  (byte*) print_screen#2 ← phi( print_points/(byte*) print_screen#5 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#2
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#3 ← phi( print_cls/(byte*) print_screen#2 )
  (byte*) print_line_cursor#2 ← (byte*) print_screen#3
  (byte*) print_char_cursor#9 ← (byte*) print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#31 ← phi( print_cls::@1/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#15 ← phi( print_cls::@1/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#31
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) print_screen#9 ← phi( _start::@1/(byte*) print_screen#8 )
  (byte*) print_char_cursor#52 ← phi( _start::@1/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#28 ← phi( _start::@1/(byte*) print_line_cursor#27 )
  call init_points 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_screen#7 ← phi( main/(byte*) print_screen#9 )
  (byte*) print_char_cursor#46 ← phi( main/(byte*) print_char_cursor#52 )
  (byte*) print_line_cursor#24 ← phi( main/(byte*) print_line_cursor#28 )
  call print_points 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_char_cursor#32 ← phi( main::@1/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#16 ← phi( main::@1/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#32
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) print_char_cursor#33 ← phi( main::@2/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#17 ← phi( main::@2/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#17
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#33
  return 
  to:@return

(void()) init_points()
init_points: scope:[init_points]  from main
  (byte) init_points::pos#0 ← (byte) $a
  (byte) init_points::i#0 ← (byte) 0
  to:init_points::@1
init_points::@1: scope:[init_points]  from init_points init_points::@4
  (byte) init_points::pos#12 ← phi( init_points/(byte) init_points::pos#0 init_points::@4/(byte) init_points::pos#2 )
  (byte) init_points::i#2 ← phi( init_points/(byte) init_points::i#0 init_points::@4/(byte) init_points::i#1 )
  (byte) init_points::getPoint1_idx#0 ← (byte) init_points::i#2
  to:init_points::getPoint1
init_points::getPoint1: scope:[init_points]  from init_points::@1
  (byte) init_points::i#11 ← phi( init_points::@1/(byte) init_points::i#2 )
  (byte) init_points::pos#11 ← phi( init_points::@1/(byte) init_points::pos#12 )
  (byte) init_points::getPoint1_idx#1 ← phi( init_points::@1/(byte) init_points::getPoint1_idx#0 )
  (byte~) init_points::getPoint1_$0 ← (byte) init_points::getPoint1_idx#1 * (const nomodify byte) SIZEOF_POINT
  (byte*~) init_points::getPoint1_$1 ← (const byte*) points + (byte~) init_points::getPoint1_$0
  (byte*) init_points::getPoint1_return#0 ← (byte*~) init_points::getPoint1_$1
  to:init_points::getPoint1_@return
init_points::getPoint1_@return: scope:[init_points]  from init_points::getPoint1
  (byte) init_points::i#10 ← phi( init_points::getPoint1/(byte) init_points::i#11 )
  (byte) init_points::pos#10 ← phi( init_points::getPoint1/(byte) init_points::pos#11 )
  (byte*) init_points::getPoint1_return#2 ← phi( init_points::getPoint1/(byte*) init_points::getPoint1_return#0 )
  (byte*) init_points::getPoint1_return#1 ← (byte*) init_points::getPoint1_return#2
  to:init_points::@2
init_points::@2: scope:[init_points]  from init_points::getPoint1_@return
  (byte) init_points::i#9 ← phi( init_points::getPoint1_@return/(byte) init_points::i#10 )
  (byte) init_points::pos#9 ← phi( init_points::getPoint1_@return/(byte) init_points::pos#10 )
  (byte*) init_points::getPoint1_return#3 ← phi( init_points::getPoint1_@return/(byte*) init_points::getPoint1_return#1 )
  (byte*~) init_points::$0 ← (byte*) init_points::getPoint1_return#3
  (byte*) init_points::point#0 ← (byte*~) init_points::$0
  (byte*) init_points::pointXpos1_point#0 ← (byte*) init_points::point#0
  to:init_points::pointXpos1
init_points::pointXpos1: scope:[init_points]  from init_points::@2
  (byte) init_points::i#8 ← phi( init_points::@2/(byte) init_points::i#9 )
  (byte*) init_points::point#3 ← phi( init_points::@2/(byte*) init_points::point#0 )
  (byte) init_points::pos#7 ← phi( init_points::@2/(byte) init_points::pos#9 )
  (byte*) init_points::pointXpos1_point#1 ← phi( init_points::@2/(byte*) init_points::pointXpos1_point#0 )
  (byte*~) init_points::pointXpos1_$0 ← (byte*) init_points::pointXpos1_point#1 + (number) 0
  (byte*) init_points::pointXpos1_return#0 ← (byte*)(byte*~) init_points::pointXpos1_$0
  to:init_points::pointXpos1_@return
init_points::pointXpos1_@return: scope:[init_points]  from init_points::pointXpos1
  (byte) init_points::i#7 ← phi( init_points::pointXpos1/(byte) init_points::i#8 )
  (byte*) init_points::point#2 ← phi( init_points::pointXpos1/(byte*) init_points::point#3 )
  (byte) init_points::pos#5 ← phi( init_points::pointXpos1/(byte) init_points::pos#7 )
  (byte*) init_points::pointXpos1_return#2 ← phi( init_points::pointXpos1/(byte*) init_points::pointXpos1_return#0 )
  (byte*) init_points::pointXpos1_return#1 ← (byte*) init_points::pointXpos1_return#2
  to:init_points::@3
init_points::@3: scope:[init_points]  from init_points::pointXpos1_@return
  (byte) init_points::i#6 ← phi( init_points::pointXpos1_@return/(byte) init_points::i#7 )
  (byte*) init_points::point#1 ← phi( init_points::pointXpos1_@return/(byte*) init_points::point#2 )
  (byte) init_points::pos#3 ← phi( init_points::pointXpos1_@return/(byte) init_points::pos#5 )
  (byte*) init_points::pointXpos1_return#3 ← phi( init_points::pointXpos1_@return/(byte*) init_points::pointXpos1_return#1 )
  (byte*~) init_points::$1 ← (byte*) init_points::pointXpos1_return#3
  *((byte*~) init_points::$1) ← (byte) init_points::pos#3
  (byte) init_points::pos#1 ← (byte) init_points::pos#3 + (number) $a
  (byte*) init_points::pointYpos1_point#0 ← (byte*) init_points::point#1
  to:init_points::pointYpos1
init_points::pointYpos1: scope:[init_points]  from init_points::@3
  (byte) init_points::i#5 ← phi( init_points::@3/(byte) init_points::i#6 )
  (byte) init_points::pos#8 ← phi( init_points::@3/(byte) init_points::pos#1 )
  (byte*) init_points::pointYpos1_point#1 ← phi( init_points::@3/(byte*) init_points::pointYpos1_point#0 )
  (byte*~) init_points::pointYpos1_$0 ← (byte*) init_points::pointYpos1_point#1 + (number) 1
  (byte*) init_points::pointYpos1_return#0 ← (byte*)(byte*~) init_points::pointYpos1_$0
  to:init_points::pointYpos1_@return
init_points::pointYpos1_@return: scope:[init_points]  from init_points::pointYpos1
  (byte) init_points::i#4 ← phi( init_points::pointYpos1/(byte) init_points::i#5 )
  (byte) init_points::pos#6 ← phi( init_points::pointYpos1/(byte) init_points::pos#8 )
  (byte*) init_points::pointYpos1_return#2 ← phi( init_points::pointYpos1/(byte*) init_points::pointYpos1_return#0 )
  (byte*) init_points::pointYpos1_return#1 ← (byte*) init_points::pointYpos1_return#2
  to:init_points::@4
init_points::@4: scope:[init_points]  from init_points::pointYpos1_@return
  (byte) init_points::i#3 ← phi( init_points::pointYpos1_@return/(byte) init_points::i#4 )
  (byte) init_points::pos#4 ← phi( init_points::pointYpos1_@return/(byte) init_points::pos#6 )
  (byte*) init_points::pointYpos1_return#3 ← phi( init_points::pointYpos1_@return/(byte*) init_points::pointYpos1_return#1 )
  (byte*~) init_points::$2 ← (byte*) init_points::pointYpos1_return#3
  *((byte*~) init_points::$2) ← (byte) init_points::pos#4
  (byte) init_points::pos#2 ← (byte) init_points::pos#4 + (number) $a
  (byte) init_points::i#1 ← (byte) init_points::i#3 + rangenext(0,NUM_POINTS-1)
  (bool~) init_points::$3 ← (byte) init_points::i#1 != rangelast(0,NUM_POINTS-1)
  if((bool~) init_points::$3) goto init_points::@1
  to:init_points::@return
init_points::@return: scope:[init_points]  from init_points::@4
  return 
  to:@return

(void()) print_points()
print_points: scope:[print_points]  from main::@1
  (byte*) print_char_cursor#47 ← phi( main::@1/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#25 ← phi( main::@1/(byte*) print_line_cursor#24 )
  (byte*) print_screen#5 ← phi( main::@1/(byte*) print_screen#7 )
  call print_cls 
  to:print_points::@5
print_points::@5: scope:[print_points]  from print_points
  (byte*) print_char_cursor#34 ← phi( print_points/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#18 ← phi( print_points/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#34
  (byte) print_points::i#0 ← (byte) 0
  to:print_points::@1
print_points::@1: scope:[print_points]  from print_points::@5 print_points::@9
  (byte*) print_line_cursor#40 ← phi( print_points::@5/(byte*) print_line_cursor#6 print_points::@9/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#60 ← phi( print_points::@5/(byte*) print_char_cursor#13 print_points::@9/(byte*) print_char_cursor#17 )
  (byte) print_points::i#2 ← phi( print_points::@5/(byte) print_points::i#0 print_points::@9/(byte) print_points::i#1 )
  (byte) print_points::getPoint1_idx#0 ← (byte) print_points::i#2
  to:print_points::getPoint1
print_points::getPoint1: scope:[print_points]  from print_points::@1
  (byte) print_points::i#15 ← phi( print_points::@1/(byte) print_points::i#2 )
  (byte*) print_line_cursor#39 ← phi( print_points::@1/(byte*) print_line_cursor#40 )
  (byte*) print_char_cursor#59 ← phi( print_points::@1/(byte*) print_char_cursor#60 )
  (byte) print_points::getPoint1_idx#1 ← phi( print_points::@1/(byte) print_points::getPoint1_idx#0 )
  (byte~) print_points::getPoint1_$0 ← (byte) print_points::getPoint1_idx#1 * (const nomodify byte) SIZEOF_POINT
  (byte*~) print_points::getPoint1_$1 ← (const byte*) points + (byte~) print_points::getPoint1_$0
  (byte*) print_points::getPoint1_return#0 ← (byte*~) print_points::getPoint1_$1
  to:print_points::getPoint1_@return
print_points::getPoint1_@return: scope:[print_points]  from print_points::getPoint1
  (byte) print_points::i#14 ← phi( print_points::getPoint1/(byte) print_points::i#15 )
  (byte*) print_line_cursor#38 ← phi( print_points::getPoint1/(byte*) print_line_cursor#39 )
  (byte*) print_char_cursor#58 ← phi( print_points::getPoint1/(byte*) print_char_cursor#59 )
  (byte*) print_points::getPoint1_return#2 ← phi( print_points::getPoint1/(byte*) print_points::getPoint1_return#0 )
  (byte*) print_points::getPoint1_return#1 ← (byte*) print_points::getPoint1_return#2
  to:print_points::@2
print_points::@2: scope:[print_points]  from print_points::getPoint1_@return
  (byte) print_points::i#13 ← phi( print_points::getPoint1_@return/(byte) print_points::i#14 )
  (byte*) print_line_cursor#37 ← phi( print_points::getPoint1_@return/(byte*) print_line_cursor#38 )
  (byte*) print_char_cursor#57 ← phi( print_points::getPoint1_@return/(byte*) print_char_cursor#58 )
  (byte*) print_points::getPoint1_return#3 ← phi( print_points::getPoint1_@return/(byte*) print_points::getPoint1_return#1 )
  (byte*~) print_points::$1 ← (byte*) print_points::getPoint1_return#3
  (byte*) print_points::point#0 ← (byte*~) print_points::$1
  (byte*) print_points::pointXpos1_point#0 ← (byte*) print_points::point#0
  to:print_points::pointXpos1
print_points::pointXpos1: scope:[print_points]  from print_points::@2
  (byte) print_points::i#12 ← phi( print_points::@2/(byte) print_points::i#13 )
  (byte*) print_line_cursor#36 ← phi( print_points::@2/(byte*) print_line_cursor#37 )
  (byte*) print_points::point#5 ← phi( print_points::@2/(byte*) print_points::point#0 )
  (byte*) print_char_cursor#55 ← phi( print_points::@2/(byte*) print_char_cursor#57 )
  (byte*) print_points::pointXpos1_point#1 ← phi( print_points::@2/(byte*) print_points::pointXpos1_point#0 )
  (byte*~) print_points::pointXpos1_$0 ← (byte*) print_points::pointXpos1_point#1 + (number) 0
  (byte*) print_points::pointXpos1_return#0 ← (byte*)(byte*~) print_points::pointXpos1_$0
  to:print_points::pointXpos1_@return
print_points::pointXpos1_@return: scope:[print_points]  from print_points::pointXpos1
  (byte) print_points::i#11 ← phi( print_points::pointXpos1/(byte) print_points::i#12 )
  (byte*) print_line_cursor#35 ← phi( print_points::pointXpos1/(byte*) print_line_cursor#36 )
  (byte*) print_points::point#4 ← phi( print_points::pointXpos1/(byte*) print_points::point#5 )
  (byte*) print_char_cursor#53 ← phi( print_points::pointXpos1/(byte*) print_char_cursor#55 )
  (byte*) print_points::pointXpos1_return#2 ← phi( print_points::pointXpos1/(byte*) print_points::pointXpos1_return#0 )
  (byte*) print_points::pointXpos1_return#1 ← (byte*) print_points::pointXpos1_return#2
  to:print_points::@3
print_points::@3: scope:[print_points]  from print_points::pointXpos1_@return
  (byte) print_points::i#10 ← phi( print_points::pointXpos1_@return/(byte) print_points::i#11 )
  (byte*) print_line_cursor#34 ← phi( print_points::pointXpos1_@return/(byte*) print_line_cursor#35 )
  (byte*) print_points::point#3 ← phi( print_points::pointXpos1_@return/(byte*) print_points::point#4 )
  (byte*) print_char_cursor#48 ← phi( print_points::pointXpos1_@return/(byte*) print_char_cursor#53 )
  (byte*) print_points::pointXpos1_return#3 ← phi( print_points::pointXpos1_@return/(byte*) print_points::pointXpos1_return#1 )
  (byte*~) print_points::$2 ← (byte*) print_points::pointXpos1_return#3
  (byte) print_uchar::b#0 ← *((byte*~) print_points::$2)
  call print_uchar 
  to:print_points::@6
print_points::@6: scope:[print_points]  from print_points::@3
  (byte) print_points::i#9 ← phi( print_points::@3/(byte) print_points::i#10 )
  (byte*) print_line_cursor#33 ← phi( print_points::@3/(byte*) print_line_cursor#34 )
  (byte*) print_points::point#2 ← phi( print_points::@3/(byte*) print_points::point#3 )
  (byte*) print_char_cursor#35 ← phi( print_points::@3/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#35
  (byte*) print_str::str#1 ← (const byte*) print_points::str
  call print_str 
  to:print_points::@7
print_points::@7: scope:[print_points]  from print_points::@6
  (byte) print_points::i#8 ← phi( print_points::@6/(byte) print_points::i#9 )
  (byte*) print_line_cursor#32 ← phi( print_points::@6/(byte*) print_line_cursor#33 )
  (byte*) print_points::point#1 ← phi( print_points::@6/(byte*) print_points::point#2 )
  (byte*) print_char_cursor#36 ← phi( print_points::@6/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#36
  (byte*) print_points::pointYpos1_point#0 ← (byte*) print_points::point#1
  to:print_points::pointYpos1
print_points::pointYpos1: scope:[print_points]  from print_points::@7
  (byte) print_points::i#7 ← phi( print_points::@7/(byte) print_points::i#8 )
  (byte*) print_line_cursor#31 ← phi( print_points::@7/(byte*) print_line_cursor#32 )
  (byte*) print_char_cursor#56 ← phi( print_points::@7/(byte*) print_char_cursor#15 )
  (byte*) print_points::pointYpos1_point#1 ← phi( print_points::@7/(byte*) print_points::pointYpos1_point#0 )
  (byte*~) print_points::pointYpos1_$0 ← (byte*) print_points::pointYpos1_point#1 + (number) 1
  (byte*) print_points::pointYpos1_return#0 ← (byte*)(byte*~) print_points::pointYpos1_$0
  to:print_points::pointYpos1_@return
print_points::pointYpos1_@return: scope:[print_points]  from print_points::pointYpos1
  (byte) print_points::i#6 ← phi( print_points::pointYpos1/(byte) print_points::i#7 )
  (byte*) print_line_cursor#30 ← phi( print_points::pointYpos1/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#54 ← phi( print_points::pointYpos1/(byte*) print_char_cursor#56 )
  (byte*) print_points::pointYpos1_return#2 ← phi( print_points::pointYpos1/(byte*) print_points::pointYpos1_return#0 )
  (byte*) print_points::pointYpos1_return#1 ← (byte*) print_points::pointYpos1_return#2
  to:print_points::@4
print_points::@4: scope:[print_points]  from print_points::pointYpos1_@return
  (byte) print_points::i#5 ← phi( print_points::pointYpos1_@return/(byte) print_points::i#6 )
  (byte*) print_line_cursor#29 ← phi( print_points::pointYpos1_@return/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#49 ← phi( print_points::pointYpos1_@return/(byte*) print_char_cursor#54 )
  (byte*) print_points::pointYpos1_return#3 ← phi( print_points::pointYpos1_@return/(byte*) print_points::pointYpos1_return#1 )
  (byte*~) print_points::$5 ← (byte*) print_points::pointYpos1_return#3
  (byte) print_uchar::b#1 ← *((byte*~) print_points::$5)
  call print_uchar 
  to:print_points::@8
print_points::@8: scope:[print_points]  from print_points::@4
  (byte) print_points::i#4 ← phi( print_points::@4/(byte) print_points::i#5 )
  (byte*) print_line_cursor#26 ← phi( print_points::@4/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#37 ← phi( print_points::@4/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#37
  call print_ln 
  to:print_points::@9
print_points::@9: scope:[print_points]  from print_points::@8
  (byte) print_points::i#3 ← phi( print_points::@8/(byte) print_points::i#4 )
  (byte*) print_char_cursor#38 ← phi( print_points::@8/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#19 ← phi( print_points::@8/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#38
  (byte) print_points::i#1 ← (byte) print_points::i#3 + rangenext(0,NUM_POINTS-1)
  (bool~) print_points::$8 ← (byte) print_points::i#1 != rangelast(0,NUM_POINTS-1)
  if((bool~) print_points::$8) goto print_points::@1
  to:print_points::@return
print_points::@return: scope:[print_points]  from print_points::@9
  (byte*) print_char_cursor#39 ← phi( print_points::@9/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#20 ← phi( print_points::@9/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#39
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#9 ← (byte*) print_screen#0
  (byte*) print_char_cursor#19 ← (byte*) print_line_cursor#9
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) print_screen#8 ← phi( _start::_init1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#50 ← phi( _start::_init1/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#27 ← phi( _start::_init1/(byte*) print_line_cursor#9 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) print_screen#6 ← phi( _start::@1/(byte*) print_screen#8 )
  (byte*) print_char_cursor#40 ← phi( _start::@1/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#21 ← phi( _start::@1/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#21
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#40
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) print_char_cursor#41 ← phi( _start::@2/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#22 ← phi( _start::@2/(byte*) print_line_cursor#10 )
  (byte*) print_screen#4 ← phi( _start::@2/(byte*) print_screen#6 )
  (byte*) print_screen#1 ← (byte*) print_screen#4
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#41
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte) NUM_POINTS = (byte) 4
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) SIZEOF_POINT = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) init_points()
(byte*~) init_points::$0
(byte*~) init_points::$1
(byte*~) init_points::$2
(bool~) init_points::$3
(label) init_points::@1
(label) init_points::@2
(label) init_points::@3
(label) init_points::@4
(label) init_points::@return
(label) init_points::getPoint1
(byte~) init_points::getPoint1_$0
(byte*~) init_points::getPoint1_$1
(label) init_points::getPoint1_@return
(byte) init_points::getPoint1_idx
(byte) init_points::getPoint1_idx#0
(byte) init_points::getPoint1_idx#1
(byte*) init_points::getPoint1_return
(byte*) init_points::getPoint1_return#0
(byte*) init_points::getPoint1_return#1
(byte*) init_points::getPoint1_return#2
(byte*) init_points::getPoint1_return#3
(byte) init_points::i
(byte) init_points::i#0
(byte) init_points::i#1
(byte) init_points::i#10
(byte) init_points::i#11
(byte) init_points::i#2
(byte) init_points::i#3
(byte) init_points::i#4
(byte) init_points::i#5
(byte) init_points::i#6
(byte) init_points::i#7
(byte) init_points::i#8
(byte) init_points::i#9
(byte*) init_points::point
(byte*) init_points::point#0
(byte*) init_points::point#1
(byte*) init_points::point#2
(byte*) init_points::point#3
(label) init_points::pointXpos1
(byte*~) init_points::pointXpos1_$0
(label) init_points::pointXpos1_@return
(byte*) init_points::pointXpos1_point
(byte*) init_points::pointXpos1_point#0
(byte*) init_points::pointXpos1_point#1
(byte*) init_points::pointXpos1_return
(byte*) init_points::pointXpos1_return#0
(byte*) init_points::pointXpos1_return#1
(byte*) init_points::pointXpos1_return#2
(byte*) init_points::pointXpos1_return#3
(label) init_points::pointYpos1
(byte*~) init_points::pointYpos1_$0
(label) init_points::pointYpos1_@return
(byte*) init_points::pointYpos1_point
(byte*) init_points::pointYpos1_point#0
(byte*) init_points::pointYpos1_point#1
(byte*) init_points::pointYpos1_return
(byte*) init_points::pointYpos1_return#0
(byte*) init_points::pointYpos1_return#1
(byte*) init_points::pointYpos1_return#2
(byte*) init_points::pointYpos1_return#3
(byte) init_points::pos
(byte) init_points::pos#0
(byte) init_points::pos#1
(byte) init_points::pos#10
(byte) init_points::pos#11
(byte) init_points::pos#12
(byte) init_points::pos#2
(byte) init_points::pos#3
(byte) init_points::pos#4
(byte) init_points::pos#5
(byte) init_points::pos#6
(byte) init_points::pos#7
(byte) init_points::pos#8
(byte) init_points::pos#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(const byte*) points[(const nomodify byte) NUM_POINTS*(const nomodify byte) SIZEOF_POINT]  = { fill( NUM_POINTS*SIZEOF_POINT, 0) }
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_points()
(byte*~) print_points::$1
(byte*~) print_points::$2
(byte*~) print_points::$5
(bool~) print_points::$8
(label) print_points::@1
(label) print_points::@2
(label) print_points::@3
(label) print_points::@4
(label) print_points::@5
(label) print_points::@6
(label) print_points::@7
(label) print_points::@8
(label) print_points::@9
(label) print_points::@return
(label) print_points::getPoint1
(byte~) print_points::getPoint1_$0
(byte*~) print_points::getPoint1_$1
(label) print_points::getPoint1_@return
(byte) print_points::getPoint1_idx
(byte) print_points::getPoint1_idx#0
(byte) print_points::getPoint1_idx#1
(byte*) print_points::getPoint1_return
(byte*) print_points::getPoint1_return#0
(byte*) print_points::getPoint1_return#1
(byte*) print_points::getPoint1_return#2
(byte*) print_points::getPoint1_return#3
(byte) print_points::i
(byte) print_points::i#0
(byte) print_points::i#1
(byte) print_points::i#10
(byte) print_points::i#11
(byte) print_points::i#12
(byte) print_points::i#13
(byte) print_points::i#14
(byte) print_points::i#15
(byte) print_points::i#2
(byte) print_points::i#3
(byte) print_points::i#4
(byte) print_points::i#5
(byte) print_points::i#6
(byte) print_points::i#7
(byte) print_points::i#8
(byte) print_points::i#9
(byte*) print_points::point
(byte*) print_points::point#0
(byte*) print_points::point#1
(byte*) print_points::point#2
(byte*) print_points::point#3
(byte*) print_points::point#4
(byte*) print_points::point#5
(label) print_points::pointXpos1
(byte*~) print_points::pointXpos1_$0
(label) print_points::pointXpos1_@return
(byte*) print_points::pointXpos1_point
(byte*) print_points::pointXpos1_point#0
(byte*) print_points::pointXpos1_point#1
(byte*) print_points::pointXpos1_return
(byte*) print_points::pointXpos1_return#0
(byte*) print_points::pointXpos1_return#1
(byte*) print_points::pointXpos1_return#2
(byte*) print_points::pointXpos1_return#3
(label) print_points::pointYpos1
(byte*~) print_points::pointYpos1_$0
(label) print_points::pointYpos1_@return
(byte*) print_points::pointYpos1_point
(byte*) print_points::pointYpos1_point#0
(byte*) print_points::pointYpos1_point#1
(byte*) print_points::pointYpos1_return
(byte*) print_points::pointYpos1_return#0
(byte*) print_points::pointYpos1_return#1
(byte*) print_points::pointYpos1_return#2
(byte*) print_points::pointYpos1_return#3
(const byte*) print_points::str[(byte) 2]  = (byte*) " "
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#12 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 0 in (byte*~) init_points::pointXpos1_$0 ← (byte*) init_points::pointXpos1_point#1 + (number) 0
Adding number conversion cast (unumber) $a in (byte) init_points::pos#1 ← (byte) init_points::pos#3 + (number) $a
Adding number conversion cast (unumber) 1 in (byte*~) init_points::pointYpos1_$0 ← (byte*) init_points::pointYpos1_point#1 + (number) 1
Adding number conversion cast (unumber) $a in (byte) init_points::pos#2 ← (byte) init_points::pos#4 + (number) $a
Adding number conversion cast (unumber) 1 in (byte) init_points::i#1 ← (byte) init_points::i#3 + rangenext(0,NUM_POINTS-1)
Adding number conversion cast (unumber) 0 in (byte*~) print_points::pointXpos1_$0 ← (byte*) print_points::pointXpos1_point#1 + (number) 0
Adding number conversion cast (unumber) 1 in (byte*~) print_points::pointYpos1_$0 ← (byte*) print_points::pointYpos1_point#1 + (number) 1
Adding number conversion cast (unumber) 1 in (byte) print_points::i#1 ← (byte) print_points::i#3 + rangenext(0,NUM_POINTS-1)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast (byte*~) init_points::pointXpos1_$0
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast (byte*~) init_points::pointYpos1_$0
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast (byte*~) print_points::pointXpos1_$0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte*~) print_points::pointYpos1_$0
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#42 print_char_cursor#43 print_char_cursor#23 
Alias print_char_cursor#0 = print_char_cursor#22 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#13 print_char_cursor#2 print_line_cursor#14 print_char_cursor#25 print_line_cursor#1 print_char_cursor#3 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#26 = print_char_cursor#4 
Alias print_char_cursor#27 = print_char_cursor#5 print_char_cursor#28 print_char_cursor#6 
Alias print_char_cursor#30 = print_char_cursor#7 print_char_cursor#8 
Alias print_line_cursor#15 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#9 print_char_cursor#31 print_line_cursor#3 print_char_cursor#10 
Alias print_line_cursor#24 = print_line_cursor#28 
Alias print_char_cursor#46 = print_char_cursor#52 
Alias print_screen#7 = print_screen#9 
Alias print_line_cursor#16 = print_line_cursor#4 print_line_cursor#17 print_line_cursor#5 
Alias print_char_cursor#11 = print_char_cursor#32 print_char_cursor#33 print_char_cursor#12 
Alias init_points::i#10 = init_points::getPoint1_idx#0 init_points::i#2 init_points::getPoint1_idx#1 init_points::i#11 init_points::i#9 init_points::i#8 init_points::i#7 init_points::i#6 init_points::i#5 init_points::i#4 init_points::i#3 
Alias init_points::pos#10 = init_points::pos#11 init_points::pos#12 init_points::pos#9 init_points::pos#7 init_points::pos#5 init_points::pos#3 
Alias init_points::getPoint1_return#0 = init_points::getPoint1_$1 init_points::getPoint1_return#2 init_points::getPoint1_return#1 init_points::getPoint1_return#3 init_points::$0 init_points::point#0 init_points::pointXpos1_point#0 init_points::pointXpos1_point#1 init_points::point#3 init_points::point#2 init_points::point#1 init_points::pointYpos1_point#0 init_points::pointYpos1_point#1 
Alias init_points::pointXpos1_return#0 = init_points::pointXpos1_$0 init_points::pointXpos1_return#2 init_points::pointXpos1_return#1 init_points::pointXpos1_return#3 init_points::$1 
Alias init_points::pos#1 = init_points::pos#8 init_points::pos#6 init_points::pos#4 
Alias init_points::pointYpos1_return#0 = init_points::pointYpos1_$0 init_points::pointYpos1_return#2 init_points::pointYpos1_return#1 init_points::pointYpos1_return#3 init_points::$2 
Alias print_line_cursor#18 = print_line_cursor#6 
Alias print_char_cursor#13 = print_char_cursor#34 
Alias print_points::i#10 = print_points::getPoint1_idx#0 print_points::i#2 print_points::getPoint1_idx#1 print_points::i#15 print_points::i#14 print_points::i#13 print_points::i#12 print_points::i#11 print_points::i#9 print_points::i#8 print_points::i#7 print_points::i#6 print_points::i#5 print_points::i#4 print_points::i#3 
Alias print_char_cursor#48 = print_char_cursor#59 print_char_cursor#60 print_char_cursor#58 print_char_cursor#57 print_char_cursor#55 print_char_cursor#53 
Alias print_line_cursor#26 = print_line_cursor#39 print_line_cursor#40 print_line_cursor#38 print_line_cursor#37 print_line_cursor#36 print_line_cursor#35 print_line_cursor#34 print_line_cursor#33 print_line_cursor#32 print_line_cursor#31 print_line_cursor#30 print_line_cursor#29 
Alias print_points::point#0 = print_points::getPoint1_return#0 print_points::getPoint1_$1 print_points::getPoint1_return#2 print_points::getPoint1_return#1 print_points::getPoint1_return#3 print_points::$1 print_points::pointXpos1_point#0 print_points::pointXpos1_point#1 print_points::point#5 print_points::point#4 print_points::point#3 print_points::point#2 print_points::point#1 print_points::pointYpos1_point#0 print_points::pointYpos1_point#1 
Alias print_points::pointXpos1_return#0 = print_points::pointXpos1_$0 print_points::pointXpos1_return#2 print_points::pointXpos1_return#1 print_points::pointXpos1_return#3 print_points::$2 
Alias print_char_cursor#14 = print_char_cursor#35 
Alias print_char_cursor#15 = print_char_cursor#36 print_char_cursor#56 print_char_cursor#54 print_char_cursor#49 
Alias print_points::pointYpos1_return#0 = print_points::pointYpos1_$0 print_points::pointYpos1_return#2 print_points::pointYpos1_return#1 print_points::pointYpos1_return#3 print_points::$5 
Alias print_char_cursor#16 = print_char_cursor#37 
Alias print_line_cursor#19 = print_line_cursor#7 print_line_cursor#20 print_line_cursor#8 
Alias print_char_cursor#17 = print_char_cursor#38 print_char_cursor#39 print_char_cursor#18 
Alias print_screen#0 = print_line_cursor#9 print_char_cursor#19 print_line_cursor#27 print_char_cursor#50 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#10 = print_line_cursor#21 print_line_cursor#22 print_line_cursor#11 
Alias print_char_cursor#20 = print_char_cursor#40 print_char_cursor#41 print_char_cursor#21 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#51 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#30
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_line_cursor#26
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#30
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#30
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_screen#5
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#46 (byte*) print_screen#0
Identical Phi Values (byte*) print_screen#7 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_screen#5 (byte*) print_screen#7
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#46
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#27
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#27
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#16
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#30
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [16] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [26] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1
Simple Condition (bool~) init_points::$3 [67] if((byte) init_points::i#1!=rangelast(0,NUM_POINTS-1)) goto init_points::@1
Simple Condition (bool~) print_points::$8 [91] if((byte) print_points::i#1!=rangelast(0,NUM_POINTS-1)) goto print_points::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) init_points::pos#0 = $a
Constant (const byte) init_points::i#0 = 0
Constant (const byte) print_points::i#0 = 0
Constant (const byte*) print_str::str#1 = print_points::str
Constant (const byte*) print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [65] init_points::i#1 ← ++ init_points::i#10 to ++
Resolved ranged comparison value [67] if(init_points::i#1!=rangelast(0,NUM_POINTS-1)) goto init_points::@1 to (const nomodify byte) NUM_POINTS-(byte) 1+(number) 1
Resolved ranged next value [89] print_points::i#1 ← ++ print_points::i#10 to ++
Resolved ranged comparison value [91] if(print_points::i#1!=rangelast(0,NUM_POINTS-1)) goto print_points::@1 to (const nomodify byte) NUM_POINTS-(byte) 1+(number) 1
Converting *(pointer+n) to pointer[n] [60] *((byte*) init_points::pointXpos1_return#0) ← (byte) init_points::pos#10  -- *(init_points::getPoint1_return#0 + 0)
Converting *(pointer+n) to pointer[n] [63] *((byte*) init_points::pointYpos1_return#0) ← (byte) init_points::pos#1  -- *(init_points::getPoint1_return#0 + 1)
Converting *(pointer+n) to pointer[n] [77] (byte) print_uchar::b#0 ← *((byte*) print_points::pointXpos1_return#0)  -- *(print_points::point#0 + 0)
Converting *(pointer+n) to pointer[n] [84] (byte) print_uchar::b#1 ← *((byte*) print_points::pointYpos1_return#0)  -- *(print_points::point#0 + 1)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero init_points::getPoint1_return#0 in [59] (byte*) init_points::pointXpos1_return#0 ← (byte*) init_points::getPoint1_return#0 + (byte) 0
Simplifying expression containing zero init_points::getPoint1_return#0 in [60] *((byte*) init_points::getPoint1_return#0 + (byte) 0) ← (byte) init_points::pos#10
Simplifying expression containing zero print_points::point#0 in [76] (byte*) print_points::pointXpos1_return#0 ← (byte*) print_points::point#0 + (byte) 0
Simplifying expression containing zero print_points::point#0 in [77] (byte) print_uchar::b#0 ← *((byte*) print_points::point#0 + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) init_points::pointXpos1_return#0 and assignment [36] (byte*) init_points::pointXpos1_return#0 ← (byte*) init_points::getPoint1_return#0
Eliminating unused variable (byte*) init_points::pointYpos1_return#0 and assignment [39] (byte*) init_points::pointYpos1_return#0 ← (byte*) init_points::getPoint1_return#0 + (byte) 1
Eliminating unused variable (byte*) print_points::pointXpos1_return#0 and assignment [49] (byte*) print_points::pointXpos1_return#0 ← (byte*) print_points::point#0
Eliminating unused variable (byte*) print_points::pointYpos1_return#0 and assignment [53] (byte*) print_points::pointYpos1_return#0 ← (byte*) print_points::point#0 + (byte) 1
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) NUM_POINTS-1+1 in [41] if((byte) init_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(number) 1) goto init_points::@1
Adding number conversion cast (unumber) 1 in [41] if((byte) init_points::i#1!=(unumber)(const nomodify byte) NUM_POINTS-(byte) 1+(number) 1) goto init_points::@1
Adding number conversion cast (unumber) NUM_POINTS-1+1 in [54] if((byte) print_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(number) 1) goto print_points::@1
Adding number conversion cast (unumber) 1 in [54] if((byte) print_points::i#1!=(unumber)(const nomodify byte) NUM_POINTS-(byte) 1+(number) 1) goto print_points::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const nomodify byte) NUM_POINTS-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify byte) NUM_POINTS-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [36] *((byte*) init_points::getPoint1_return#0) ← (byte) init_points::pos#10  -- *(points + init_points::getPoint1_$0)
Converting *(pointer+n) to pointer[n] [47] (byte) print_uchar::b#0 ← *((byte*) print_points::point#0)  -- *(points + print_points::getPoint1_$0)
Successful SSA optimization Pass2InlineDerefIdx
Rewriting multiplication to use shift [33] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 * (const nomodify byte) SIZEOF_POINT
Rewriting multiplication to use shift [44] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 * (const nomodify byte) SIZEOF_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte) init_points::pos#0
Inlining constant with var siblings (const byte) init_points::i#0
Inlining constant with var siblings (const byte) print_points::i#0
Constant inlined init_points::i#0 = (byte) 0
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_str::str#1 = (const byte*) print_points::str
Constant inlined print_points::i#0 = (byte) 0
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined init_points::pos#0 = (byte) $a
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting init_points::@5(between init_points::@4 and init_points::@1)
Added new block during phi lifting print_points::@10(between print_points::@9 and print_points::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print_points
Adding NOP phi() at start of print_points::@5
Adding NOP phi() at start of print_points::getPoint1_@return
Adding NOP phi() at start of print_points::@2
Adding NOP phi() at start of print_points::pointXpos1
Adding NOP phi() at start of print_points::pointXpos1_@return
Adding NOP phi() at start of print_points::@6
Adding NOP phi() at start of print_points::@7
Adding NOP phi() at start of print_points::pointYpos1
Adding NOP phi() at start of print_points::pointYpos1_@return
Adding NOP phi() at start of print_points::@8
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of init_points
Adding NOP phi() at start of init_points::getPoint1_@return
Adding NOP phi() at start of init_points::@2
Adding NOP phi() at start of init_points::pointXpos1
Adding NOP phi() at start of init_points::pointXpos1_@return
Adding NOP phi() at start of init_points::pointYpos1
Adding NOP phi() at start of init_points::pointYpos1_@return
CALL GRAPH
Calls in [main] to init_points:1 print_points:3 
Calls in [print_points] to print_cls:7 print_uchar:19 print_str:21 print_uchar:28 print_ln:30 
Calls in [print_uchar] to print_char:49 print_char:54 
Calls in [print_str] to print_char:68 
Calls in [print_cls] to memset:72 

Created 12 initial phi equivalence classes
Coalesced [17] print_uchar::b#4 ← print_uchar::b#0
Coalesced [18] print_char_cursor#61 ← print_char_cursor#48
Coalesced [26] print_uchar::b#5 ← print_uchar::b#1
Coalesced [27] print_char_cursor#62 ← print_char_cursor#30
Coalesced [34] print_points::i#16 ← print_points::i#1
Not coalescing [35] print_char_cursor#66 ← print_line_cursor#0
Coalesced [36] print_line_cursor#43 ← print_line_cursor#0
Coalesced [37] print_line_cursor#41 ← print_line_cursor#26
Coalesced (already) [43] print_line_cursor#42 ← print_line_cursor#0
Coalesced [47] print_char::ch#5 ← print_char::ch#1
Coalesced [48] print_char_cursor#64 ← print_char_cursor#45
Coalesced [52] print_char::ch#6 ← print_char::ch#2
Coalesced (already) [53] print_char_cursor#65 ← print_char_cursor#30
Coalesced [66] print_char::ch#4 ← print_char::ch#0
Coalesced (already) [67] print_char_cursor#63 ← print_char_cursor#30
Coalesced [70] print_str::str#6 ← print_str::str#0
Coalesced [83] memset::dst#4 ← memset::dst#1
Coalesced [101] init_points::i#12 ← init_points::i#1
Coalesced [102] init_points::pos#13 ← init_points::pos#2
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) main::@2
Culled Empty Block (label) print_points::@5
Culled Empty Block (label) print_points::getPoint1_@return
Culled Empty Block (label) print_points::@2
Culled Empty Block (label) print_points::pointXpos1_@return
Culled Empty Block (label) print_points::@7
Culled Empty Block (label) print_points::pointYpos1_@return
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) init_points::getPoint1_@return
Culled Empty Block (label) init_points::@2
Culled Empty Block (label) init_points::pointXpos1_@return
Culled Empty Block (label) init_points::pointYpos1_@return
Culled Empty Block (label) init_points::@5
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block init_points::@3 to init_points::@2
Renumbering block init_points::@4 to init_points::@3
Renumbering block print_points::@3 to print_points::@2
Renumbering block print_points::@4 to print_points::@3
Renumbering block print_points::@6 to print_points::@4
Renumbering block print_points::@8 to print_points::@5
Renumbering block print_points::@9 to print_points::@6
Renumbering block print_points::@10 to print_points::@7
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_points
Adding NOP phi() at start of print_points::pointXpos1
Adding NOP phi() at start of print_points::@4
Adding NOP phi() at start of print_points::pointYpos1
Adding NOP phi() at start of print_points::@5
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset
Adding NOP phi() at start of init_points
Adding NOP phi() at start of init_points::pointXpos1
Adding NOP phi() at start of init_points::pointYpos1

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call init_points 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_points 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print_points()
print_points: scope:[print_points]  from main::@1
  [5] phi()
  [6] call print_cls 
  to:print_points::@1
print_points::@1: scope:[print_points]  from print_points print_points::@7
  [7] (byte*) print_line_cursor#26 ← phi( print_points/(const byte*) print_screen#0 print_points::@7/(byte*) print_line_cursor#0 )
  [7] (byte*) print_char_cursor#48 ← phi( print_points/(const byte*) print_screen#0 print_points::@7/(byte*) print_char_cursor#66 )
  [7] (byte) print_points::i#10 ← phi( print_points/(byte) 0 print_points::@7/(byte) print_points::i#1 )
  to:print_points::getPoint1
print_points::getPoint1: scope:[print_points]  from print_points::@1
  [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1
  [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0
  to:print_points::pointXpos1
print_points::pointXpos1: scope:[print_points]  from print_points::getPoint1
  [10] phi()
  to:print_points::@2
print_points::@2: scope:[print_points]  from print_points::pointXpos1
  [11] (byte) print_uchar::b#0 ← *((const byte*) points + (byte~) print_points::getPoint1_$0)
  [12] call print_uchar 
  to:print_points::@4
print_points::@4: scope:[print_points]  from print_points::@2
  [13] phi()
  [14] call print_str 
  to:print_points::pointYpos1
print_points::pointYpos1: scope:[print_points]  from print_points::@4
  [15] phi()
  to:print_points::@3
print_points::@3: scope:[print_points]  from print_points::pointYpos1
  [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1)
  [17] call print_uchar 
  to:print_points::@5
print_points::@5: scope:[print_points]  from print_points::@3
  [18] phi()
  [19] call print_ln 
  to:print_points::@6
print_points::@6: scope:[print_points]  from print_points::@5
  [20] (byte) print_points::i#1 ← ++ (byte) print_points::i#10
  [21] if((byte) print_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto print_points::@7
  to:print_points::@return
print_points::@return: scope:[print_points]  from print_points::@6
  [22] return 
  to:@return
print_points::@7: scope:[print_points]  from print_points::@6
  [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0
  to:print_points::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from print_points::@5
  [24] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [25] (byte*) print_line_cursor#12 ← phi( print_ln/(byte*) print_line_cursor#26 print_ln::@1/(byte*) print_line_cursor#0 )
  [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28
  [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [28] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_points::@2 print_points::@3
  [29] (byte*) print_char_cursor#45 ← phi( print_points::@2/(byte*) print_char_cursor#48 print_points::@3/(byte*) print_char_cursor#30 )
  [29] (byte) print_uchar::b#2 ← phi( print_points::@2/(byte) print_uchar::b#0 print_points::@3/(byte) print_uchar::b#1 )
  [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [31] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [32] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [34] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [35] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [36] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1
  [37] (byte*) print_char_cursor#29 ← phi( print_str::@2/(byte*) print_char_cursor#30 print_uchar/(byte*) print_char_cursor#45 print_uchar::@1/(byte*) print_char_cursor#30 )
  [37] (byte) print_char::ch#3 ← phi( print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 )
  [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3
  [39] (byte*) print_char_cursor#30 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [40] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_points::@4
  [41] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [42] (byte*) print_str::str#2 ← phi( print_str/(const byte*) print_points::str print_str::@3/(byte*) print_str::str#0 )
  [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [44] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [46] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [47] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from print_points
  [48] phi()
  [49] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [50] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [51] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [52] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [54] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [56] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) init_points()
init_points: scope:[init_points]  from main
  [57] phi()
  to:init_points::@1
init_points::@1: scope:[init_points]  from init_points init_points::@3
  [58] (byte) init_points::pos#10 ← phi( init_points/(byte) $a init_points::@3/(byte) init_points::pos#2 )
  [58] (byte) init_points::i#10 ← phi( init_points/(byte) 0 init_points::@3/(byte) init_points::i#1 )
  to:init_points::getPoint1
init_points::getPoint1: scope:[init_points]  from init_points::@1
  [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1
  [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0
  to:init_points::pointXpos1
init_points::pointXpos1: scope:[init_points]  from init_points::getPoint1
  [61] phi()
  to:init_points::@2
init_points::@2: scope:[init_points]  from init_points::pointXpos1
  [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10
  [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a
  to:init_points::pointYpos1
init_points::pointYpos1: scope:[init_points]  from init_points::@2
  [64] phi()
  to:init_points::@3
init_points::@3: scope:[init_points]  from init_points::pointYpos1
  [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1
  [66] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a
  [67] (byte) init_points::i#1 ← ++ (byte) init_points::i#10
  [68] if((byte) init_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto init_points::@1
  to:init_points::@return
init_points::@return: scope:[init_points]  from init_points::@3
  [69] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) init_points()
(byte~) init_points::getPoint1_$0 101.0
(byte) init_points::getPoint1_idx
(byte*) init_points::getPoint1_return
(byte*) init_points::getPoint1_return#0 40.4
(byte) init_points::i
(byte) init_points::i#1 151.5
(byte) init_points::i#10 33.666666666666664
(byte*) init_points::point
(byte*) init_points::pointXpos1_point
(byte*) init_points::pointXpos1_return
(byte*) init_points::pointYpos1_point
(byte*) init_points::pointYpos1_return
(byte) init_points::pos
(byte) init_points::pos#1 101.0
(byte) init_points::pos#10 60.599999999999994
(byte) init_points::pos#2 67.33333333333333
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 200002.0
(byte) print_char::ch#1 2002.0
(byte) print_char::ch#2 2002.0
(byte) print_char::ch#3 1102004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#29 1051002.5
(byte*) print_char_cursor#30 48044.2
(byte*) print_char_cursor#45 401.0
(byte*) print_char_cursor#48 40.4
(byte*) print_char_cursor#66 202.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#0 42886.42857142857
(byte*) print_line_cursor#12 201003.0
(byte*) print_line_cursor#26 84.76923076923077
(void()) print_ln()
(void()) print_points()
(byte~) print_points::getPoint1_$0 101.0
(byte) print_points::getPoint1_idx
(byte*) print_points::getPoint1_return
(byte) print_points::i
(byte) print_points::i#1 101.0
(byte) print_points::i#10 23.307692307692307
(byte*) print_points::point
(byte*) print_points::point#0 28.857142857142858
(byte*) print_points::pointXpos1_point
(byte*) print_points::pointXpos1_return
(byte*) print_points::pointYpos1_point
(byte*) print_points::pointYpos1_return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 200002.0
(byte*) print_str::str#2 100001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 2002.0
(byte~) print_uchar::$2 2002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 202.0
(byte) print_uchar::b#1 202.0
(byte) print_uchar::b#2 551.0

Initial phi equivalence classes
[ print_points::i#10 print_points::i#1 ]
[ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ]
[ print_str::str#2 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
[ init_points::i#10 init_points::i#1 ]
[ init_points::pos#10 init_points::pos#2 ]
Added variable print_points::getPoint1_$0 to live range equivalence class [ print_points::getPoint1_$0 ]
Added variable print_points::point#0 to live range equivalence class [ print_points::point#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable init_points::getPoint1_$0 to live range equivalence class [ init_points::getPoint1_$0 ]
Added variable init_points::getPoint1_return#0 to live range equivalence class [ init_points::getPoint1_return#0 ]
Added variable init_points::pos#1 to live range equivalence class [ init_points::pos#1 ]
Complete equivalence classes
[ print_points::i#10 print_points::i#1 ]
[ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ]
[ print_str::str#2 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
[ init_points::i#10 init_points::i#1 ]
[ init_points::pos#10 init_points::pos#2 ]
[ print_points::getPoint1_$0 ]
[ print_points::point#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ init_points::getPoint1_$0 ]
[ init_points::getPoint1_return#0 ]
[ init_points::pos#1 ]
Allocated zp[1]:2 [ print_points::i#10 print_points::i#1 ]
Allocated zp[2]:3 [ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ]
Allocated zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[1]:6 [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
Allocated zp[2]:7 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ]
Allocated zp[2]:9 [ print_str::str#2 print_str::str#0 ]
Allocated zp[2]:11 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:13 [ init_points::i#10 init_points::i#1 ]
Allocated zp[1]:14 [ init_points::pos#10 init_points::pos#2 ]
Allocated zp[1]:15 [ print_points::getPoint1_$0 ]
Allocated zp[2]:16 [ print_points::point#0 ]
Allocated zp[1]:18 [ print_uchar::$0 ]
Allocated zp[1]:19 [ print_uchar::$2 ]
Allocated zp[1]:20 [ init_points::getPoint1_$0 ]
Allocated zp[2]:21 [ init_points::getPoint1_return#0 ]
Allocated zp[1]:23 [ init_points::pos#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Implementing a semi-struct without the struct keyword by using pointer math and inline functions
//
// struct Point {
//    byte xpos; // The x-position
//    byte ypos; // The y-position
// };
// Point points[NUM_POINTS];
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The size of a point
  .const SIZEOF_POINT = 2
  // The number of points
  .const NUM_POINTS = 4
  .label print_screen = $400
  .label print_line_cursor = 3
  .label print_char_cursor = 7
  // main
// Initialize some points and print them
main: {
    // [1] call init_points 
    // [57] phi from main to init_points [phi:main->init_points]
  init_points_from_main:
    jsr init_points
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_points 
    // [5] phi from main::@1 to print_points [phi:main::@1->print_points]
  print_points_from___b1:
    jsr print_points
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_points
// Print points
print_points: {
    .label getPoint1___0 = $f
    .label point = $10
    .label i = 2
    // [6] call print_cls 
    // [48] phi from print_points to print_cls [phi:print_points->print_cls]
  print_cls_from_print_points:
    jsr print_cls
    // [7] phi from print_points to print_points::@1 [phi:print_points->print_points::@1]
  __b1_from_print_points:
    // [7] phi (byte*) print_line_cursor#26 = (const byte*) print_screen#0 [phi:print_points->print_points::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [7] phi (byte*) print_char_cursor#48 = (const byte*) print_screen#0 [phi:print_points->print_points::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [7] phi (byte) print_points::i#10 = (byte) 0 [phi:print_points->print_points::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // print_points::@1
  __b1:
    jmp getPoint1
    // print_points::getPoint1
  getPoint1:
    // [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z getPoint1___0
    // [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z getPoint1___0
    clc
    adc #<points
    sta.z point
    lda #>points
    adc #0
    sta.z point+1
    // [10] phi from print_points::getPoint1 to print_points::pointXpos1 [phi:print_points::getPoint1->print_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
    // print_points::pointXpos1
  pointXpos1:
    jmp __b2
    // print_points::@2
  __b2:
    // [11] (byte) print_uchar::b#0 ← *((const byte*) points + (byte~) print_points::getPoint1_$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z getPoint1___0
    lda points,y
    sta.z print_uchar.b
    // [12] call print_uchar 
    // [29] phi from print_points::@2 to print_uchar [phi:print_points::@2->print_uchar]
  print_uchar_from___b2:
    // [29] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#48 [phi:print_points::@2->print_uchar#0] -- register_copy 
    // [29] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_points::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [13] phi from print_points::@2 to print_points::@4 [phi:print_points::@2->print_points::@4]
  __b4_from___b2:
    jmp __b4
    // print_points::@4
  __b4:
    // [14] call print_str 
    // [41] phi from print_points::@4 to print_str [phi:print_points::@4->print_str]
  print_str_from___b4:
    jsr print_str
    // [15] phi from print_points::@4 to print_points::pointYpos1 [phi:print_points::@4->print_points::pointYpos1]
  pointYpos1_from___b4:
    jmp pointYpos1
    // print_points::pointYpos1
  pointYpos1:
    jmp __b3
    // print_points::@3
  __b3:
    // [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #1
    lda (point),y
    sta.z print_uchar.b
    // [17] call print_uchar 
    // [29] phi from print_points::@3 to print_uchar [phi:print_points::@3->print_uchar]
  print_uchar_from___b3:
    // [29] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#30 [phi:print_points::@3->print_uchar#0] -- register_copy 
    // [29] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_points::@3->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [18] phi from print_points::@3 to print_points::@5 [phi:print_points::@3->print_points::@5]
  __b5_from___b3:
    jmp __b5
    // print_points::@5
  __b5:
    // [19] call print_ln 
    // [24] phi from print_points::@5 to print_ln [phi:print_points::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_points::@6
  __b6:
    // [20] (byte) print_points::i#1 ← ++ (byte) print_points::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [21] if((byte) print_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto print_points::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp.z i
    bne __b7
    jmp __breturn
    // print_points::@return
  __breturn:
    // [22] return 
    rts
    // print_points::@7
  __b7:
    // [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [7] phi from print_points::@7 to print_points::@1 [phi:print_points::@7->print_points::@1]
  __b1_from___b7:
    // [7] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#0 [phi:print_points::@7->print_points::@1#0] -- register_copy 
    // [7] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#66 [phi:print_points::@7->print_points::@1#1] -- register_copy 
    // [7] phi (byte) print_points::i#10 = (byte) print_points::i#1 [phi:print_points::@7->print_points::@1#2] -- register_copy 
    jmp __b1
    str: .text " "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [25] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [25] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#26 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [28] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp(5) b)
print_uchar: {
    .label __0 = $12
    .label __2 = $13
    .label b = 5
    // [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [31] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [32] call print_char 
  // Table of hexadecimal digits
    // [37] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_uchar->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [34] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [35] call print_char 
    // [37] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#30 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [36] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp(6) ch)
print_char: {
    .label ch = 6
    // [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [39] (byte*) print_char_cursor#30 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [40] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(9) str)
print_str: {
    .label str = 9
    // [42] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [42] phi (byte*) print_str::str#2 = (const byte*) print_points::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<print_points.str
    sta.z str
    lda #>print_points.str
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [44] return 
    rts
    // print_str::@2
  __b2:
    // [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [46] call print_char 
    // [37] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#30 [phi:print_str::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [47] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [42] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [42] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [49] call memset 
    // [51] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [50] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $b
    // [52] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [52] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [54] return 
    rts
    // memset::@2
  __b2:
    // [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [56] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [52] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [52] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // init_points
// Initialize points
init_points: {
    .label getPoint1___0 = $14
    .label getPoint1_return = $15
    .label pos = $17
    .label pos_1 = $e
    .label i = $d
    // [58] phi from init_points to init_points::@1 [phi:init_points->init_points::@1]
  __b1_from_init_points:
    // [58] phi (byte) init_points::pos#10 = (byte) $a [phi:init_points->init_points::@1#0] -- vbuz1=vbuc1 
    lda #$a
    sta.z pos_1
    // [58] phi (byte) init_points::i#10 = (byte) 0 [phi:init_points->init_points::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [58] phi from init_points::@3 to init_points::@1 [phi:init_points::@3->init_points::@1]
  __b1_from___b3:
    // [58] phi (byte) init_points::pos#10 = (byte) init_points::pos#2 [phi:init_points::@3->init_points::@1#0] -- register_copy 
    // [58] phi (byte) init_points::i#10 = (byte) init_points::i#1 [phi:init_points::@3->init_points::@1#1] -- register_copy 
    jmp __b1
    // init_points::@1
  __b1:
    jmp getPoint1
    // init_points::getPoint1
  getPoint1:
    // [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z getPoint1___0
    // [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z getPoint1___0
    clc
    adc #<points
    sta.z getPoint1_return
    lda #>points
    adc #0
    sta.z getPoint1_return+1
    // [61] phi from init_points::getPoint1 to init_points::pointXpos1 [phi:init_points::getPoint1->init_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
    // init_points::pointXpos1
  pointXpos1:
    jmp __b2
    // init_points::@2
  __b2:
    // [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z pos_1
    ldy.z getPoint1___0
    sta points,y
    // [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax.z pos_1
    axs #-[$a]
    stx.z pos
    // [64] phi from init_points::@2 to init_points::pointYpos1 [phi:init_points::@2->init_points::pointYpos1]
  pointYpos1_from___b2:
    jmp pointYpos1
    // init_points::pointYpos1
  pointYpos1:
    jmp __b3
    // init_points::@3
  __b3:
    // [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda.z pos
    ldy #1
    sta (getPoint1_return),y
    // [66] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax.z pos
    axs #-[$a]
    stx.z pos_1
    // [67] (byte) init_points::i#1 ← ++ (byte) init_points::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [68] if((byte) init_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto init_points::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp.z i
    bne __b1_from___b3
    jmp __breturn
    // init_points::@return
  __breturn:
    // [69] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // All points
  points: .fill NUM_POINTS*SIZEOF_POINT, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 ] ( print_points:3 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ print_points::i#10 print_points::i#1 ]
Statement [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 print_points::point#0 ] ( print_points:3 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 print_points::point#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:15 [ print_points::getPoint1_$0 ]
Statement [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1) [ print_points::i#10 print_line_cursor#26 print_uchar::b#1 print_char_cursor#30 ] ( print_points:3 [ print_points::i#10 print_line_cursor#26 print_uchar::b#1 print_char_cursor#30 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#30 = print_char_cursor#45 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ print_points::i#10 print_points::i#1 ]
Statement [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0 [ print_points::i#1 print_char_cursor#66 print_line_cursor#0 ] ( print_points:3 [ print_points::i#1 print_char_cursor#66 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#0 print_char_cursor#30 ] ( print_points:3::print_ln:19 [ print_points::i#10 print_line_cursor#0 print_char_cursor#30 ] { }  ) always clobbers reg byte a 
Statement [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#30 ] ( print_points:3::print_ln:19 [ print_points::i#10 print_line_cursor#0 print_char_cursor#30 ] { }  ) always clobbers reg byte a 
Statement [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#45 print_uchar::$0 ] ( print_points:3::print_uchar:12 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_uchar::b#2 print_char_cursor#45 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#48 } { print_char::ch#1 = print_char::ch#3 } }  print_points:3::print_uchar:17 [ print_points::i#10 print_line_cursor#26 print_uchar::b#2 print_char_cursor#45 print_uchar::$0 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#1 = print_char::ch#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#30 print_uchar::$2 ] ( print_points:3::print_uchar:12 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#30 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#45 = print_char_cursor#48 } { print_char::ch#2 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  print_points:3::print_uchar:17 [ print_points::i#10 print_line_cursor#26 print_char_cursor#30 print_uchar::$2 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#2 = print_char::ch#3 } }  ) always clobbers reg byte a 
Statement [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3 [ print_char_cursor#29 ] ( print_points:3::print_uchar:12::print_char:32 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_uchar::b#2 print_char_cursor#29 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#48 } { print_char::ch#1 = print_char::ch#3 } }  print_points:3::print_uchar:17::print_char:32 [ print_points::i#10 print_line_cursor#26 print_uchar::b#2 print_char_cursor#29 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#1 = print_char::ch#3 } }  print_points:3::print_uchar:12::print_char:35 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#29 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#45 = print_char_cursor#48 } { print_char::ch#2 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  print_points:3::print_uchar:17::print_char:35 [ print_points::i#10 print_line_cursor#26 print_char_cursor#29 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#2 = print_char::ch#3 } }  print_points:3::print_str:14::print_char:46 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#30 print_str::str#2 ] ( print_points:3::print_str:14 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#30 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#30 print_char::ch#0 print_str::str#2 ] ( print_points:3::print_str:14 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#30 print_char::ch#0 print_str::str#2 ] { { print_char::ch#0 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  ) always clobbers reg byte a reg byte y 
Statement [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_points:3::print_cls:6::memset:49 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_points:3::print_cls:6::memset:49 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 ] ( init_points:1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ init_points::i#10 init_points::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ init_points::pos#10 init_points::pos#2 ]
Statement [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 init_points::getPoint1_return#0 ] ( init_points:1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 init_points::getPoint1_return#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ init_points::getPoint1_$0 ]
Statement [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] ( init_points:1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] { }  ) always clobbers reg byte a 
Statement [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] ( init_points:1 [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] { }  ) always clobbers reg byte a 
Statement [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 [ init_points::i#10 init_points::pos#1 ] ( init_points:1 [ init_points::i#10 init_points::pos#1 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:13 [ init_points::i#10 init_points::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ init_points::pos#1 ]
Statement [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 ] ( print_points:3 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 ] { }  ) always clobbers reg byte a 
Statement [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 print_points::point#0 ] ( print_points:3 [ print_points::i#10 print_char_cursor#48 print_line_cursor#26 print_points::getPoint1_$0 print_points::point#0 ] { }  ) always clobbers reg byte a 
Statement [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1) [ print_points::i#10 print_line_cursor#26 print_uchar::b#1 print_char_cursor#30 ] ( print_points:3 [ print_points::i#10 print_line_cursor#26 print_uchar::b#1 print_char_cursor#30 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#30 = print_char_cursor#45 } }  ) always clobbers reg byte a reg byte y 
Statement [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0 [ print_points::i#1 print_char_cursor#66 print_line_cursor#0 ] ( print_points:3 [ print_points::i#1 print_char_cursor#66 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28 [ print_line_cursor#0 print_char_cursor#30 ] ( print_points:3::print_ln:19 [ print_points::i#10 print_line_cursor#0 print_char_cursor#30 ] { }  ) always clobbers reg byte a 
Statement [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#30 ] ( print_points:3::print_ln:19 [ print_points::i#10 print_line_cursor#0 print_char_cursor#30 ] { }  ) always clobbers reg byte a 
Statement [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_uchar::b#2 print_char_cursor#45 print_uchar::$0 ] ( print_points:3::print_uchar:12 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_uchar::b#2 print_char_cursor#45 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#48 } { print_char::ch#1 = print_char::ch#3 } }  print_points:3::print_uchar:17 [ print_points::i#10 print_line_cursor#26 print_uchar::b#2 print_char_cursor#45 print_uchar::$0 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#1 = print_char::ch#3 } }  ) always clobbers reg byte a 
Statement [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#30 print_uchar::$2 ] ( print_points:3::print_uchar:12 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#30 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#45 = print_char_cursor#48 } { print_char::ch#2 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  print_points:3::print_uchar:17 [ print_points::i#10 print_line_cursor#26 print_char_cursor#30 print_uchar::$2 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#2 = print_char::ch#3 } }  ) always clobbers reg byte a 
Statement [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3 [ print_char_cursor#29 ] ( print_points:3::print_uchar:12::print_char:32 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_uchar::b#2 print_char_cursor#29 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#48 } { print_char::ch#1 = print_char::ch#3 } }  print_points:3::print_uchar:17::print_char:32 [ print_points::i#10 print_line_cursor#26 print_uchar::b#2 print_char_cursor#29 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#1 = print_char::ch#3 } }  print_points:3::print_uchar:12::print_char:35 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#29 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char_cursor#45 = print_char_cursor#48 } { print_char::ch#2 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  print_points:3::print_uchar:17::print_char:35 [ print_points::i#10 print_line_cursor#26 print_char_cursor#29 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#29 = print_char_cursor#45 print_char_cursor#30 } { print_char::ch#2 = print_char::ch#3 } }  print_points:3::print_str:14::print_char:46 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  ) always clobbers reg byte y 
Statement [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#30 print_str::str#2 ] ( print_points:3::print_str:14 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#30 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#30 print_char::ch#0 print_str::str#2 ] ( print_points:3::print_str:14 [ print_points::i#10 print_line_cursor#26 print_points::point#0 print_char_cursor#30 print_char::ch#0 print_str::str#2 ] { { print_char::ch#0 = print_char::ch#3 } { print_char_cursor#29 = print_char_cursor#30 } }  ) always clobbers reg byte a reg byte y 
Statement [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_points:3::print_cls:6::memset:49 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_points:3::print_cls:6::memset:49 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 ] ( init_points:1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 ] { }  ) always clobbers reg byte a 
Statement [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 init_points::getPoint1_return#0 ] ( init_points:1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0 init_points::getPoint1_return#0 ] { }  ) always clobbers reg byte a 
Statement [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] ( init_points:1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] { }  ) always clobbers reg byte a 
Statement [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] ( init_points:1 [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] { }  ) always clobbers reg byte a 
Statement [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 [ init_points::i#10 init_points::pos#1 ] ( init_points:1 [ init_points::i#10 init_points::pos#1 ] { }  ) always clobbers reg byte y 
Potential registers zp[1]:2 [ print_points::i#10 print_points::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:7 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ print_str::str#2 print_str::str#0 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ memset::dst#2 memset::dst#1 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ init_points::i#10 init_points::i#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ init_points::pos#10 init_points::pos#2 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ print_points::getPoint1_$0 ] : zp[1]:15 , reg byte x , reg byte y , 
Potential registers zp[2]:16 [ print_points::point#0 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ print_uchar::$0 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ print_uchar::$2 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ init_points::getPoint1_$0 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ init_points::getPoint1_return#0 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ init_points::pos#1 ] : zp[1]:23 , reg byte a , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 1,099,690.1: zp[2]:7 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ] 243,974.2: zp[2]:3 [ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ] 
Uplift Scope [print_char] 1,306,010: zp[1]:6 [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_str] 300,003: zp[2]:9 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [memset] 33,336.67: zp[2]:11 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:18 [ print_uchar::$0 ] 2,002: zp[1]:19 [ print_uchar::$2 ] 955: zp[1]:5 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [init_points] 185.17: zp[1]:13 [ init_points::i#10 init_points::i#1 ] 127.93: zp[1]:14 [ init_points::pos#10 init_points::pos#2 ] 101: zp[1]:20 [ init_points::getPoint1_$0 ] 101: zp[1]:23 [ init_points::pos#1 ] 40.4: zp[2]:21 [ init_points::getPoint1_return#0 ] 
Uplift Scope [print_points] 124.31: zp[1]:2 [ print_points::i#10 print_points::i#1 ] 101: zp[1]:15 [ print_points::getPoint1_$0 ] 28.86: zp[2]:16 [ print_points::point#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [] best 12824 combination zp[2]:7 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ] zp[2]:3 [ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ] 
Uplifting [print_char] best 12515 combination reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_str] best 12515 combination zp[2]:9 [ print_str::str#2 print_str::str#0 ] 
Uplifting [memset] best 12515 combination zp[2]:11 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_uchar] best 12463 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [init_points] best 12263 combination reg byte x [ init_points::i#10 init_points::i#1 ] zp[1]:14 [ init_points::pos#10 init_points::pos#2 ] reg byte y [ init_points::getPoint1_$0 ] reg byte a [ init_points::pos#1 ] zp[2]:21 [ init_points::getPoint1_return#0 ] 
Uplifting [print_points] best 12213 combination zp[1]:2 [ print_points::i#10 print_points::i#1 ] reg byte y [ print_points::getPoint1_$0 ] zp[2]:16 [ print_points::point#0 ] 
Uplifting [RADIX] best 12213 combination 
Uplifting [print_ln] best 12213 combination 
Uplifting [print_cls] best 12213 combination 
Uplifting [main] best 12213 combination 
Attempting to uplift remaining variables inzp[1]:14 [ init_points::pos#10 init_points::pos#2 ]
Uplifting [init_points] best 12213 combination zp[1]:14 [ init_points::pos#10 init_points::pos#2 ] 
Attempting to uplift remaining variables inzp[1]:2 [ print_points::i#10 print_points::i#1 ]
Uplifting [print_points] best 12213 combination zp[1]:2 [ print_points::i#10 print_points::i#1 ] 
Coalescing zero page register [ zp[2]:11 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:3 [ print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ] ]
Coalescing zero page register [ zp[1]:14 [ init_points::pos#10 init_points::pos#2 ] ] with [ zp[1]:2 [ print_points::i#10 print_points::i#1 ] ]
Coalescing zero page register [ zp[2]:21 [ init_points::getPoint1_return#0 ] ] with [ zp[2]:7 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ] ]
Allocated (was zp[2]:9) zp[2]:2 [ print_str::str#2 print_str::str#0 ]
Allocated (was zp[2]:11) zp[2]:4 [ memset::dst#2 memset::dst#1 print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ]
Allocated (was zp[1]:14) zp[1]:6 [ init_points::pos#10 init_points::pos#2 print_points::i#10 print_points::i#1 ]
Allocated (was zp[2]:16) zp[2]:7 [ print_points::point#0 ]
Allocated (was zp[2]:21) zp[2]:9 [ init_points::getPoint1_return#0 print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Implementing a semi-struct without the struct keyword by using pointer math and inline functions
//
// struct Point {
//    byte xpos; // The x-position
//    byte ypos; // The y-position
// };
// Point points[NUM_POINTS];
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The size of a point
  .const SIZEOF_POINT = 2
  // The number of points
  .const NUM_POINTS = 4
  .label print_screen = $400
  .label print_line_cursor = 4
  .label print_char_cursor = 9
  // main
// Initialize some points and print them
main: {
    // [1] call init_points 
    // [57] phi from main to init_points [phi:main->init_points]
  init_points_from_main:
    jsr init_points
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_points 
    // [5] phi from main::@1 to print_points [phi:main::@1->print_points]
  print_points_from___b1:
    jsr print_points
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_points
// Print points
print_points: {
    .label point = 7
    .label i = 6
    // [6] call print_cls 
    // [48] phi from print_points to print_cls [phi:print_points->print_cls]
  print_cls_from_print_points:
    jsr print_cls
    // [7] phi from print_points to print_points::@1 [phi:print_points->print_points::@1]
  __b1_from_print_points:
    // [7] phi (byte*) print_line_cursor#26 = (const byte*) print_screen#0 [phi:print_points->print_points::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [7] phi (byte*) print_char_cursor#48 = (const byte*) print_screen#0 [phi:print_points->print_points::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [7] phi (byte) print_points::i#10 = (byte) 0 [phi:print_points->print_points::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // print_points::@1
  __b1:
    jmp getPoint1
    // print_points::getPoint1
  getPoint1:
    // [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta.z point
    lda #>points
    adc #0
    sta.z point+1
    // [10] phi from print_points::getPoint1 to print_points::pointXpos1 [phi:print_points::getPoint1->print_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
    // print_points::pointXpos1
  pointXpos1:
    jmp __b2
    // print_points::@2
  __b2:
    // [11] (byte) print_uchar::b#0 ← *((const byte*) points + (byte~) print_points::getPoint1_$0) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx points,y
    // [12] call print_uchar 
    // [29] phi from print_points::@2 to print_uchar [phi:print_points::@2->print_uchar]
  print_uchar_from___b2:
    // [29] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#48 [phi:print_points::@2->print_uchar#0] -- register_copy 
    // [29] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_points::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [13] phi from print_points::@2 to print_points::@4 [phi:print_points::@2->print_points::@4]
  __b4_from___b2:
    jmp __b4
    // print_points::@4
  __b4:
    // [14] call print_str 
    // [41] phi from print_points::@4 to print_str [phi:print_points::@4->print_str]
  print_str_from___b4:
    jsr print_str
    // [15] phi from print_points::@4 to print_points::pointYpos1 [phi:print_points::@4->print_points::pointYpos1]
  pointYpos1_from___b4:
    jmp pointYpos1
    // print_points::pointYpos1
  pointYpos1:
    jmp __b3
    // print_points::@3
  __b3:
    // [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1) -- vbuxx=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (point),y
    tax
    // [17] call print_uchar 
    // [29] phi from print_points::@3 to print_uchar [phi:print_points::@3->print_uchar]
  print_uchar_from___b3:
    // [29] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#30 [phi:print_points::@3->print_uchar#0] -- register_copy 
    // [29] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_points::@3->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [18] phi from print_points::@3 to print_points::@5 [phi:print_points::@3->print_points::@5]
  __b5_from___b3:
    jmp __b5
    // print_points::@5
  __b5:
    // [19] call print_ln 
    // [24] phi from print_points::@5 to print_ln [phi:print_points::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_points::@6
  __b6:
    // [20] (byte) print_points::i#1 ← ++ (byte) print_points::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [21] if((byte) print_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto print_points::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp.z i
    bne __b7
    jmp __breturn
    // print_points::@return
  __breturn:
    // [22] return 
    rts
    // print_points::@7
  __b7:
    // [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [7] phi from print_points::@7 to print_points::@1 [phi:print_points::@7->print_points::@1]
  __b1_from___b7:
    // [7] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#0 [phi:print_points::@7->print_points::@1#0] -- register_copy 
    // [7] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#66 [phi:print_points::@7->print_points::@1#1] -- register_copy 
    // [7] phi (byte) print_points::i#10 = (byte) print_points::i#1 [phi:print_points::@7->print_points::@1#2] -- register_copy 
    jmp __b1
    str: .text " "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [25] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [25] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#26 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [28] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [31] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [32] call print_char 
  // Table of hexadecimal digits
    // [37] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_uchar->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [34] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [35] call print_char 
    // [37] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#30 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [36] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [39] (byte*) print_char_cursor#30 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [40] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(2) str)
print_str: {
    .label str = 2
    // [42] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [42] phi (byte*) print_str::str#2 = (const byte*) print_points::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<print_points.str
    sta.z str
    lda #>print_points.str
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [44] return 
    rts
    // print_str::@2
  __b2:
    // [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [46] call print_char 
    // [37] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#30 [phi:print_str::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [47] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [42] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [42] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [49] call memset 
    // [51] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [50] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 4
    // [52] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [52] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [54] return 
    rts
    // memset::@2
  __b2:
    // [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [56] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [52] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [52] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // init_points
// Initialize points
init_points: {
    .label getPoint1_return = 9
    .label pos = 6
    // [58] phi from init_points to init_points::@1 [phi:init_points->init_points::@1]
  __b1_from_init_points:
    // [58] phi (byte) init_points::pos#10 = (byte) $a [phi:init_points->init_points::@1#0] -- vbuz1=vbuc1 
    lda #$a
    sta.z pos
    // [58] phi (byte) init_points::i#10 = (byte) 0 [phi:init_points->init_points::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [58] phi from init_points::@3 to init_points::@1 [phi:init_points::@3->init_points::@1]
  __b1_from___b3:
    // [58] phi (byte) init_points::pos#10 = (byte) init_points::pos#2 [phi:init_points::@3->init_points::@1#0] -- register_copy 
    // [58] phi (byte) init_points::i#10 = (byte) init_points::i#1 [phi:init_points::@3->init_points::@1#1] -- register_copy 
    jmp __b1
    // init_points::@1
  __b1:
    jmp getPoint1
    // init_points::getPoint1
  getPoint1:
    // [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta.z getPoint1_return
    lda #>points
    adc #0
    sta.z getPoint1_return+1
    // [61] phi from init_points::getPoint1 to init_points::pointXpos1 [phi:init_points::getPoint1->init_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
    // init_points::pointXpos1
  pointXpos1:
    jmp __b2
    // init_points::@2
  __b2:
    // [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z pos
    sta points,y
    // [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a -- vbuaa=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc.z pos
    // [64] phi from init_points::@2 to init_points::pointYpos1 [phi:init_points::@2->init_points::pointYpos1]
  pointYpos1_from___b2:
    jmp pointYpos1
    // init_points::pointYpos1
  pointYpos1:
    jmp __b3
    // init_points::@3
  __b3:
    // [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 -- pbuz1_derefidx_vbuc1=vbuaa 
    ldy #1
    sta (getPoint1_return),y
    // [66] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a -- vbuz1=vbuaa_plus_vbuc1 
    clc
    adc #$a
    sta.z pos
    // [67] (byte) init_points::i#1 ← ++ (byte) init_points::i#10 -- vbuxx=_inc_vbuxx 
    inx
    // [68] if((byte) init_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto init_points::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_POINTS-1+1
    bne __b1_from___b3
    jmp __breturn
    // init_points::@return
  __breturn:
    // [69] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // All points
  points: .fill NUM_POINTS*SIZEOF_POINT, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp getPoint1
Removing instruction jmp pointXpos1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp pointYpos1
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp getPoint1
Removing instruction jmp pointXpos1
Removing instruction jmp __b2
Removing instruction jmp pointYpos1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from_main:
Removing instruction print_points_from___b1:
Removing instruction getPoint1:
Removing instruction pointXpos1_from_getPoint1:
Removing instruction pointXpos1:
Removing instruction __b4_from___b2:
Removing instruction print_str_from___b4:
Removing instruction pointYpos1_from___b4:
Removing instruction pointYpos1:
Removing instruction __b5_from___b3:
Removing instruction print_ln_from___b5:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b3:
Removing instruction getPoint1:
Removing instruction pointXpos1_from_getPoint1:
Removing instruction pointXpos1:
Removing instruction pointYpos1_from___b2:
Removing instruction pointYpos1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction init_points_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction print_cls_from_print_points:
Removing instruction __b1_from_print_points:
Removing instruction __b2:
Removing instruction print_uchar_from___b2:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction print_uchar_from___b3:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b1_from___b7:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_init_points:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte) NUM_POINTS = (byte) 4
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) SIZEOF_POINT = (byte) 2
(void()) init_points()
(label) init_points::@1
(label) init_points::@2
(label) init_points::@3
(label) init_points::@return
(label) init_points::getPoint1
(byte~) init_points::getPoint1_$0 reg byte y 101.0
(byte) init_points::getPoint1_idx
(byte*) init_points::getPoint1_return
(byte*) init_points::getPoint1_return#0 getPoint1_return zp[2]:9 40.4
(byte) init_points::i
(byte) init_points::i#1 reg byte x 151.5
(byte) init_points::i#10 reg byte x 33.666666666666664
(byte*) init_points::point
(label) init_points::pointXpos1
(byte*) init_points::pointXpos1_point
(byte*) init_points::pointXpos1_return
(label) init_points::pointYpos1
(byte*) init_points::pointYpos1_point
(byte*) init_points::pointYpos1_return
(byte) init_points::pos
(byte) init_points::pos#1 reg byte a 101.0
(byte) init_points::pos#10 pos zp[1]:6 60.599999999999994
(byte) init_points::pos#2 pos zp[1]:6 67.33333333333333
(void()) main()
(label) main::@1
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:4 20002.0
(byte*) memset::dst#2 dst zp[2]:4 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(const byte*) points[(const nomodify byte) NUM_POINTS*(const nomodify byte) SIZEOF_POINT]  = { fill( NUM_POINTS*SIZEOF_POINT, 0) }
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 200002.0
(byte) print_char::ch#1 reg byte a 2002.0
(byte) print_char::ch#2 reg byte a 2002.0
(byte) print_char::ch#3 reg byte a 1102004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#29 print_char_cursor zp[2]:9 1051002.5
(byte*) print_char_cursor#30 print_char_cursor zp[2]:9 48044.2
(byte*) print_char_cursor#45 print_char_cursor zp[2]:9 401.0
(byte*) print_char_cursor#48 print_char_cursor zp[2]:9 40.4
(byte*) print_char_cursor#66 print_char_cursor zp[2]:9 202.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:4 42886.42857142857
(byte*) print_line_cursor#12 print_line_cursor zp[2]:4 201003.0
(byte*) print_line_cursor#26 print_line_cursor zp[2]:4 84.76923076923077
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_points()
(label) print_points::@1
(label) print_points::@2
(label) print_points::@3
(label) print_points::@4
(label) print_points::@5
(label) print_points::@6
(label) print_points::@7
(label) print_points::@return
(label) print_points::getPoint1
(byte~) print_points::getPoint1_$0 reg byte y 101.0
(byte) print_points::getPoint1_idx
(byte*) print_points::getPoint1_return
(byte) print_points::i
(byte) print_points::i#1 i zp[1]:6 101.0
(byte) print_points::i#10 i zp[1]:6 23.307692307692307
(byte*) print_points::point
(byte*) print_points::point#0 point zp[2]:7 28.857142857142858
(label) print_points::pointXpos1
(byte*) print_points::pointXpos1_point
(byte*) print_points::pointXpos1_return
(label) print_points::pointYpos1
(byte*) print_points::pointYpos1_point
(byte*) print_points::pointYpos1_return
(const byte*) print_points::str[(byte) 2]  = (byte*) " "
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:2 200002.0
(byte*) print_str::str#2 str zp[2]:2 100001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2002.0
(byte~) print_uchar::$2 reg byte x 2002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 202.0
(byte) print_uchar::b#1 reg byte x 202.0
(byte) print_uchar::b#2 reg byte x 551.0

reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:2 [ print_str::str#2 print_str::str#0 ]
zp[2]:4 [ memset::dst#2 memset::dst#1 print_line_cursor#12 print_line_cursor#26 print_line_cursor#0 ]
reg byte x [ init_points::i#10 init_points::i#1 ]
zp[1]:6 [ init_points::pos#10 init_points::pos#2 print_points::i#10 print_points::i#1 ]
reg byte y [ print_points::getPoint1_$0 ]
zp[2]:7 [ print_points::point#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte y [ init_points::getPoint1_$0 ]
zp[2]:9 [ init_points::getPoint1_return#0 print_char_cursor#29 print_char_cursor#45 print_char_cursor#48 print_char_cursor#66 print_char_cursor#30 ]
reg byte a [ init_points::pos#1 ]


FINAL ASSEMBLER
Score: 10419

  // File Comments
// Implementing a semi-struct without the struct keyword by using pointer math and inline functions
//
// struct Point {
//    byte xpos; // The x-position
//    byte ypos; // The y-position
// };
// Point points[NUM_POINTS];
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The size of a point
  .const SIZEOF_POINT = 2
  // The number of points
  .const NUM_POINTS = 4
  .label print_screen = $400
  .label print_line_cursor = 4
  .label print_char_cursor = 9
  // main
// Initialize some points and print them
main: {
    // init_points()
    // [1] call init_points 
    // [57] phi from main to init_points [phi:main->init_points]
    jsr init_points
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_points()
    // [3] call print_points 
    // [5] phi from main::@1 to print_points [phi:main::@1->print_points]
    jsr print_points
    // main::@return
    // }
    // [4] return 
    rts
}
  // print_points
// Print points
print_points: {
    .label point = 7
    .label i = 6
    // print_cls()
    // [6] call print_cls 
    // [48] phi from print_points to print_cls [phi:print_points->print_cls]
    jsr print_cls
    // [7] phi from print_points to print_points::@1 [phi:print_points->print_points::@1]
    // [7] phi (byte*) print_line_cursor#26 = (const byte*) print_screen#0 [phi:print_points->print_points::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [7] phi (byte*) print_char_cursor#48 = (const byte*) print_screen#0 [phi:print_points->print_points::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [7] phi (byte) print_points::i#10 = (byte) 0 [phi:print_points->print_points::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // print_points::@1
  __b1:
    // print_points::getPoint1
    // idx*SIZEOF_POINT
    // [8] (byte~) print_points::getPoint1_$0 ← (byte) print_points::i#10 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // points+idx*SIZEOF_POINT
    // [9] (byte*) print_points::point#0 ← (const byte*) points + (byte~) print_points::getPoint1_$0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta.z point
    lda #>points
    adc #0
    sta.z point+1
    // [10] phi from print_points::getPoint1 to print_points::pointXpos1 [phi:print_points::getPoint1->print_points::pointXpos1]
    // print_points::pointXpos1
    // print_points::@2
    // print_uchar(*pointXpos(point))
    // [11] (byte) print_uchar::b#0 ← *((const byte*) points + (byte~) print_points::getPoint1_$0) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx points,y
    // [12] call print_uchar 
    // [29] phi from print_points::@2 to print_uchar [phi:print_points::@2->print_uchar]
    // [29] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#48 [phi:print_points::@2->print_uchar#0] -- register_copy 
    // [29] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_points::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [13] phi from print_points::@2 to print_points::@4 [phi:print_points::@2->print_points::@4]
    // print_points::@4
    // print_str(" ")
    // [14] call print_str 
    // [41] phi from print_points::@4 to print_str [phi:print_points::@4->print_str]
    jsr print_str
    // [15] phi from print_points::@4 to print_points::pointYpos1 [phi:print_points::@4->print_points::pointYpos1]
    // print_points::pointYpos1
    // print_points::@3
    // print_uchar(*pointYpos(point))
    // [16] (byte) print_uchar::b#1 ← *((byte*) print_points::point#0 + (byte) 1) -- vbuxx=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (point),y
    tax
    // [17] call print_uchar 
    // [29] phi from print_points::@3 to print_uchar [phi:print_points::@3->print_uchar]
    // [29] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#30 [phi:print_points::@3->print_uchar#0] -- register_copy 
    // [29] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_points::@3->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [18] phi from print_points::@3 to print_points::@5 [phi:print_points::@3->print_points::@5]
    // print_points::@5
    // print_ln()
    // [19] call print_ln 
    // [24] phi from print_points::@5 to print_ln [phi:print_points::@5->print_ln]
    jsr print_ln
    // print_points::@6
    // for(byte i: 0..NUM_POINTS-1)
    // [20] (byte) print_points::i#1 ← ++ (byte) print_points::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [21] if((byte) print_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto print_points::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp.z i
    bne __b7
    // print_points::@return
    // }
    // [22] return 
    rts
    // print_points::@7
  __b7:
    // [23] (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [7] phi from print_points::@7 to print_points::@1 [phi:print_points::@7->print_points::@1]
    // [7] phi (byte*) print_line_cursor#26 = (byte*) print_line_cursor#0 [phi:print_points::@7->print_points::@1#0] -- register_copy 
    // [7] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#66 [phi:print_points::@7->print_points::@1#1] -- register_copy 
    // [7] phi (byte) print_points::i#10 = (byte) print_points::i#1 [phi:print_points::@7->print_points::@1#2] -- register_copy 
    jmp __b1
    str: .text " "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [25] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [25] phi (byte*) print_line_cursor#12 = (byte*) print_line_cursor#26 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [26] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [27] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#30) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [28] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [30] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [31] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [32] call print_char 
  // Table of hexadecimal digits
    // [37] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#45 [phi:print_uchar->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [33] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [34] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [35] call print_char 
    // [37] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#30 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [36] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [38] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [39] (byte*) print_char_cursor#30 ← ++ (byte*) print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [40] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(2) str)
print_str: {
    .label str = 2
    // [42] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [42] phi (byte*) print_str::str#2 = (const byte*) print_points::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<print_points.str
    sta.z str
    lda #>print_points.str
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [43] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [44] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [45] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [46] call print_char 
    // [37] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [37] phi (byte*) print_char_cursor#29 = (byte*) print_char_cursor#30 [phi:print_str::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#3 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [47] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [42] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [42] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [49] call memset 
    // [51] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [50] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 4
    // [52] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [52] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [53] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [54] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [55] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [56] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [52] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [52] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // init_points
// Initialize points
init_points: {
    .label getPoint1_return = 9
    .label pos = 6
    // [58] phi from init_points to init_points::@1 [phi:init_points->init_points::@1]
    // [58] phi (byte) init_points::pos#10 = (byte) $a [phi:init_points->init_points::@1#0] -- vbuz1=vbuc1 
    lda #$a
    sta.z pos
    // [58] phi (byte) init_points::i#10 = (byte) 0 [phi:init_points->init_points::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [58] phi from init_points::@3 to init_points::@1 [phi:init_points::@3->init_points::@1]
    // [58] phi (byte) init_points::pos#10 = (byte) init_points::pos#2 [phi:init_points::@3->init_points::@1#0] -- register_copy 
    // [58] phi (byte) init_points::i#10 = (byte) init_points::i#1 [phi:init_points::@3->init_points::@1#1] -- register_copy 
    // init_points::@1
  __b1:
    // init_points::getPoint1
    // idx*SIZEOF_POINT
    // [59] (byte~) init_points::getPoint1_$0 ← (byte) init_points::i#10 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // points+idx*SIZEOF_POINT
    // [60] (byte*) init_points::getPoint1_return#0 ← (const byte*) points + (byte~) init_points::getPoint1_$0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta.z getPoint1_return
    lda #>points
    adc #0
    sta.z getPoint1_return+1
    // [61] phi from init_points::getPoint1 to init_points::pointXpos1 [phi:init_points::getPoint1->init_points::pointXpos1]
    // init_points::pointXpos1
    // init_points::@2
    // *pointXpos(point) = pos
    // [62] *((const byte*) points + (byte~) init_points::getPoint1_$0) ← (byte) init_points::pos#10 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z pos
    sta points,y
    // pos +=10
    // [63] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a -- vbuaa=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc.z pos
    // [64] phi from init_points::@2 to init_points::pointYpos1 [phi:init_points::@2->init_points::pointYpos1]
    // init_points::pointYpos1
    // init_points::@3
    // *pointYpos(point) = pos
    // [65] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 -- pbuz1_derefidx_vbuc1=vbuaa 
    ldy #1
    sta (getPoint1_return),y
    // pos +=10
    // [66] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a -- vbuz1=vbuaa_plus_vbuc1 
    clc
    adc #$a
    sta.z pos
    // for(byte i: 0..NUM_POINTS-1)
    // [67] (byte) init_points::i#1 ← ++ (byte) init_points::i#10 -- vbuxx=_inc_vbuxx 
    inx
    // [68] if((byte) init_points::i#1!=(const nomodify byte) NUM_POINTS-(byte) 1+(byte) 1) goto init_points::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_POINTS-1+1
    bne __b1
    // init_points::@return
    // }
    // [69] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // All points
  points: .fill NUM_POINTS*SIZEOF_POINT, 0

