
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (number~) main::$0 ← (number) 1 * (const byte) SIZEOF_WORD
  (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const nomodify word*) main::SCREEN + (number~) main::$1) ← *((const word*) main::info_values + (number~) main::$0)
  (number~) main::$2 ← (number) 1 * (const byte) SIZEOF_WORD
  *((const nomodify word*) main::SCREEN + (number~) main::$2) ← *((const word*) RADIX_DECIMAL_VALUES + (number~) main::$2)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(word*) RadixInfo::values
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(number~) main::$0
(number~) main::$1
(number~) main::$2
(label) main::@return
(const nomodify word*) main::SCREEN = (word*)(number) $400
(const word*) main::info_values = (const word*) RADIX_DECIMAL_VALUES

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 0 in (number~) main::$1 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 1 in (number~) main::$2 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 0 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) main::$2 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [0] (byte~) main::$0 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [1] (byte~) main::$1 ← (byte) 0 * (const byte) SIZEOF_WORD
Constant right-side identified [3] (byte~) main::$2 ← (byte) 1 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = 1*SIZEOF_WORD
Constant (const byte) main::$1 = 0*SIZEOF_WORD
Constant (const byte) main::$2 = 1*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [2] *((const nomodify word*) main::SCREEN + (const byte) main::$1) ← *((const word*) main::info_values + (const byte) main::$0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::info_values = (const word*) RADIX_DECIMAL_VALUES
Constant inlined main::$2 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$0 = (byte) 1*(const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(RADIX_DECIMAL_VALUES+1*SIZEOF_WORD)
Consolidated array index constant in *(RADIX_DECIMAL_VALUES+1*SIZEOF_WORD)
Consolidated array index constant in *(main::SCREEN+1*SIZEOF_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify word*) main::SCREEN) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD)
  [1] *((const nomodify word*) main::SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD)
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(word*) RadixInfo::values
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates a problem with pointer sizeof()-rewriting for pointers inside structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // main
main: {
    .label SCREEN = $400
    // [0] *((const nomodify word*) main::SCREEN) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1
    // [1] *((const nomodify word*) main::SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN+1*SIZEOF_WORD
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1*SIZEOF_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify word*) main::SCREEN) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify word*) main::SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [RadixInfo] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [RadixInfo] best 41 combination 
Uplifting [main] best 41 combination 
Uplifting [] best 41 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem with pointer sizeof()-rewriting for pointers inside structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // main
main: {
    .label SCREEN = $400
    // [0] *((const nomodify word*) main::SCREEN) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1
    // [1] *((const nomodify word*) main::SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN+1*SIZEOF_WORD
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1*SIZEOF_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(word*) RadixInfo::values
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(const nomodify word*) main::SCREEN = (word*) 1024



FINAL ASSEMBLER
Score: 38

  // File Comments
// Illustrates a problem with pointer sizeof()-rewriting for pointers inside structs
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_WORD = 2
  // main
main: {
    .label SCREEN = $400
    // SCREEN[0] = info.values[1]
    // [0] *((const nomodify word*) main::SCREEN) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1
    // SCREEN[1] = RADIX_DECIMAL_VALUES[1]
    // [1] *((const nomodify word*) main::SCREEN+(byte) 1*(const byte) SIZEOF_WORD) ← *((const word*) RADIX_DECIMAL_VALUES+(byte) 1*(const byte) SIZEOF_WORD) -- _deref_pwuc1=_deref_pwuc2 
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD
    sta SCREEN+1*SIZEOF_WORD
    lda RADIX_DECIMAL_VALUES+1*SIZEOF_WORD+1
    sta SCREEN+1*SIZEOF_WORD+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a

