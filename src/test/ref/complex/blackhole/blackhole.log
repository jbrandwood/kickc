Resolved forward reference NUM_PROCESSING to (byte) NUM_PROCESSING
Resolved forward reference PROCESSING to (struct ProcessingChar[NUM_PROCESSING]) PROCESSING
Resolved forward reference irqTop to interrupt(HARDWARE_ALL)(void()) irqTop()
Resolved forward reference RASTER_IRQ_TOP to (byte) RASTER_IRQ_TOP
Resolved forward reference RASTER_IRQ_MIDDLE to (byte) RASTER_IRQ_MIDDLE
Resolved forward reference irqBottom to interrupt(HARDWARE_ALL)(void()) irqBottom()
Fixing pointer array-indexing *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte) main::i)
Fixing pointer array-indexing *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte) startProcessing::i)
Fixing pointer array-indexing *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte) startProcessing::freeIdx)
Fixing pointer array-indexing *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte) processChars::i)
Fixing pointer array-indexing *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte) processChars::i)
Fixing pointer array-indexing *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte) processChars::i)
Fixing pointer array-indexing *((word[$28]) SQUARES_X + (byte) initSquareTables::x)
Fixing pointer array-indexing *((word[$19]) SQUARES_Y + (byte) initSquareTables::y)
Fixing pointer array-indexing *((word[$28]) SQUARES_X + (byte) getCharToProcess::x)
Fixing pointer array-indexing *((word[$19]) SQUARES_Y + (byte) getCharToProcess::y)
Created struct value member variable (byte) main::center_x
Created struct value member variable (byte) main::center_y
Created struct value member variable (word) main::center_dist
Converted struct value to member variables (struct ProcessingChar) main::center
Created struct value member variable (byte) main::$7_x
Created struct value member variable (byte) main::$7_y
Created struct value member variable (word) main::$7_dist
Converted struct value to member variables (struct ProcessingChar~) main::$7
Created struct value member variable (byte) startProcessing::center_x
Created struct value member variable (byte) startProcessing::center_y
Created struct value member variable (word) startProcessing::center_dist
Converted struct value to member variables (struct ProcessingChar) startProcessing::center
Created struct value member variable (byte) processChars::processing_x
Created struct value member variable (byte) processChars::processing_y
Created struct value member variable (word) processChars::processing_dist
Converted struct value to member variables (struct ProcessingChar) processChars::processing
Created struct value member variable (byte) getCharToProcess::return_x
Created struct value member variable (byte) getCharToProcess::return_y
Created struct value member variable (word) getCharToProcess::return_dist
Converted struct value to member variables (struct ProcessingChar) getCharToProcess::return
Created struct value member variable (byte) getCharToProcess::closest_x
Created struct value member variable (byte) getCharToProcess::closest_y
Created struct value member variable (word) getCharToProcess::closest_dist
Converted struct value to member variables (struct ProcessingChar) getCharToProcess::closest
Converted procedure struct value parameter to member variables (void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (word) startProcessing::center_dist)
Adding struct value list initializer *((byte*) main::$15 + (byte~) main::$14) ← (number) 0
Adding struct value list initializer *((byte*) main::$16 + (byte~) main::$14) ← (number) 0
Adding struct value list initializer *((word*) main::$17 + (byte~) main::$14) ← (word) NOT_FOUND
Converted procedure call LValue to member variables { (byte) main::$7_x, (byte) main::$7_y, (word) main::$7_dist } ← call getCharToProcess 
Adding struct value member variable copy (byte) main::center_x ← (byte) main::$7_x
Adding struct value member variable copy (byte) main::center_y ← (byte) main::$7_y
Adding struct value member variable copy (word) main::center_dist ← (word) main::$7_dist
Converted procedure struct value parameter to member variables in call (void~) main::$10 ← call startProcessing (byte) main::center_x (byte) main::center_y (word) main::center_dist 
Adding struct value member variable copy *((byte*) startProcessing::$7 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x
Adding struct value member variable copy *((byte*) startProcessing::$8 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y
Adding struct value member variable copy *((word*) startProcessing::$9 + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist
Adding struct value member variable copy (byte) processChars::processing_x ← *((byte*) processChars::$17 + (byte~) processChars::$15)
Adding struct value member variable copy (byte) processChars::processing_y ← *((byte*) processChars::$18 + (byte~) processChars::$15)
Adding struct value member variable copy (word) processChars::processing_dist ← *((word*) processChars::$19 + (byte~) processChars::$15)
Adding struct value list initializer (byte) getCharToProcess::closest_x ← (number) 0
Adding struct value list initializer (byte) getCharToProcess::closest_y ← (number) 0
Adding struct value list initializer (word) getCharToProcess::closest_dist ← (word) NOT_FOUND
Adding struct value list initializer (byte) getCharToProcess::closest_x ← (byte) getCharToProcess::x
Adding struct value list initializer (byte) getCharToProcess::closest_y ← (byte) getCharToProcess::y
Adding struct value list initializer (word) getCharToProcess::closest_dist ← (word) getCharToProcess::dist
Adding struct value member variable copy (byte) getCharToProcess::return_x ← (byte) getCharToProcess::closest_x
Adding struct value member variable copy (byte) getCharToProcess::return_y ← (byte) getCharToProcess::closest_y
Adding struct value member variable copy (word) getCharToProcess::return_dist ← (word) getCharToProcess::closest_dist
Adding struct value member variable copy (byte) getCharToProcess::return_x ← (byte) getCharToProcess::return_x
Adding struct value member variable copy (byte) getCharToProcess::return_y ← (byte) getCharToProcess::return_y
Adding struct value member variable copy (word) getCharToProcess::return_dist ← (word) getCharToProcess::return_dist
Converted procedure struct return value to member variables return { (byte) getCharToProcess::return_x, (byte) getCharToProcess::return_y, (word) getCharToProcess::return_dist }
Replacing struct member reference (struct ProcessingChar) main::center.dist with member variable reference (word) main::center_dist
Replacing struct member reference (struct ProcessingChar) processChars::processing.y with member variable reference (byte) processChars::processing_y
Replacing struct member reference (struct ProcessingChar) processChars::processing.x with member variable reference (byte) processChars::processing_x
Replacing struct member reference (struct ProcessingChar) processChars::processing.y with member variable reference (byte) processChars::processing_y
Replacing struct member reference (struct ProcessingChar) processChars::processing.x with member variable reference (byte) processChars::processing_x
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.dist with member variable reference (word) getCharToProcess::closest_dist
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.dist with member variable reference (word) getCharToProcess::closest_dist
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.y with member variable reference (byte) getCharToProcess::closest_y
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.x with member variable reference (byte) getCharToProcess::closest_x
Rewriting struct pointer member access *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte~) startProcessing::$5).dist
Rewriting struct pointer member access *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte~) processChars::$14).dist
Rewriting struct pointer member access *((struct ProcessingChar[NUM_PROCESSING]) PROCESSING + (byte~) processChars::$16).dist
Adding pointer type conversion cast (byte*) PROCPORT_DDR in (byte*) PROCPORT_DDR ← (number) 0
Adding pointer type conversion cast (byte*) PROCPORT in (byte*) PROCPORT ← (number) 1
Adding pointer type conversion cast (byte*) CHARGEN in (byte*) CHARGEN ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_XPOS in (byte*) SPRITES_XPOS ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_YPOS in (byte*) SPRITES_YPOS ← (number) $d001
Adding pointer type conversion cast (byte*) SPRITES_XMSB in (byte*) SPRITES_XMSB ← (number) $d010
Adding pointer type conversion cast (byte*) RASTER in (byte*) RASTER ← (number) $d012
Adding pointer type conversion cast (byte*) SPRITES_ENABLE in (byte*) SPRITES_ENABLE ← (number) $d015
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_Y in (byte*) SPRITES_EXPAND_Y ← (number) $d017
Adding pointer type conversion cast (byte*) SPRITES_PRIORITY in (byte*) SPRITES_PRIORITY ← (number) $d01b
Adding pointer type conversion cast (byte*) SPRITES_MC in (byte*) SPRITES_MC ← (number) $d01c
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_X in (byte*) SPRITES_EXPAND_X ← (number) $d01d
Adding pointer type conversion cast (byte*) BORDERCOL in (byte*) BORDERCOL ← (number) $d020
Adding pointer type conversion cast (byte*) BGCOL in (byte*) BGCOL ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL1 in (byte*) BGCOL1 ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL2 in (byte*) BGCOL2 ← (number) $d022
Adding pointer type conversion cast (byte*) BGCOL3 in (byte*) BGCOL3 ← (number) $d023
Adding pointer type conversion cast (byte*) BGCOL4 in (byte*) BGCOL4 ← (number) $d024
Adding pointer type conversion cast (byte*) SPRITES_MC1 in (byte*) SPRITES_MC1 ← (number) $d025
Adding pointer type conversion cast (byte*) SPRITES_MC2 in (byte*) SPRITES_MC2 ← (number) $d026
Adding pointer type conversion cast (byte*) SPRITES_COLS in (byte*) SPRITES_COLS ← (number) $d027
Adding pointer type conversion cast (byte*) VIC_CONTROL in (byte*) VIC_CONTROL ← (number) $d011
Adding pointer type conversion cast (byte*) D011 in (byte*) D011 ← (number) $d011
Adding pointer type conversion cast (byte*) VIC_CONTROL2 in (byte*) VIC_CONTROL2 ← (number) $d016
Adding pointer type conversion cast (byte*) D016 in (byte*) D016 ← (number) $d016
Adding pointer type conversion cast (byte*) D018 in (byte*) D018 ← (number) $d018
Adding pointer type conversion cast (byte*) VIC_MEMORY in (byte*) VIC_MEMORY ← (number) $d018
Adding pointer type conversion cast (byte*) LIGHTPEN_X in (byte*) LIGHTPEN_X ← (number) $d013
Adding pointer type conversion cast (byte*) LIGHTPEN_Y in (byte*) LIGHTPEN_Y ← (number) $d014
Adding pointer type conversion cast (byte*) IRQ_STATUS in (byte*) IRQ_STATUS ← (number) $d019
Adding pointer type conversion cast (byte*) IRQ_ENABLE in (byte*) IRQ_ENABLE ← (number) $d01a
Adding pointer type conversion cast (byte*) COLS in (byte*) COLS ← (number) $d800
Adding pointer type conversion cast (byte*) CIA1_PORT_A in (byte*) CIA1_PORT_A ← (number) $dc00
Adding pointer type conversion cast (byte*) CIA1_PORT_B in (byte*) CIA1_PORT_B ← (number) $dc01
Adding pointer type conversion cast (byte*) CIA1_PORT_A_DDR in (byte*) CIA1_PORT_A_DDR ← (number) $dc02
Adding pointer type conversion cast (byte*) CIA1_PORT_B_DDR in (byte*) CIA1_PORT_B_DDR ← (number) $dc03
Adding pointer type conversion cast (byte*) CIA1_INTERRUPT in (byte*) CIA1_INTERRUPT ← (number) $dc0d
Adding pointer type conversion cast (byte*) CIA2_PORT_A in (byte*) CIA2_PORT_A ← (number) $dd00
Adding pointer type conversion cast (byte*) CIA2_PORT_B in (byte*) CIA2_PORT_B ← (number) $dd01
Adding pointer type conversion cast (byte*) CIA2_PORT_A_DDR in (byte*) CIA2_PORT_A_DDR ← (number) $dd02
Adding pointer type conversion cast (byte*) CIA2_PORT_B_DDR in (byte*) CIA2_PORT_B_DDR ← (number) $dd03
Adding pointer type conversion cast (byte*) CIA2_INTERRUPT in (byte*) CIA2_INTERRUPT ← (number) $dd0d
Adding pointer type conversion cast (void()**) KERNEL_IRQ in (void()**) KERNEL_IRQ ← (number) $314
Adding pointer type conversion cast (void()**) HARDWARE_IRQ in (void()**) HARDWARE_IRQ ← (number) $fffe
Adding pointer type conversion cast (byte*) SCREEN in (byte*) SCREEN ← (number) $400
Inlined call [105] (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) mul8u::@5
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) mul8u::@8
Culled Empty Block (label) mul8u::@9
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@12
Culled Empty Block (label) startProcessing::@6
Culled Empty Block (label) startProcessing::@7
Culled Empty Block (label) @11
Culled Empty Block (label) processChars::@5
Culled Empty Block (label) processChars::@11
Culled Empty Block (label) processChars::@6
Culled Empty Block (label) processChars::@7
Culled Empty Block (label) processChars::@12
Culled Empty Block (label) initSquareTables::@5
Culled Empty Block (label) initSquareTables::@6
Culled Empty Block (label) initSquareTables::@12
Culled Empty Block (label) initSquareTables::@13
Culled Empty Block (label) initSquareTables::@14
Culled Empty Block (label) @13
Culled Empty Block (label) getCharToProcess::@6
Culled Empty Block (label) getCharToProcess::@2
Culled Empty Block (label) @14
Culled Empty Block (label) setupRasterIrq::@4
Unwinding list assignment { (byte) main::$7_x, (byte) main::$7_y, (word) main::$7_dist } ← { (byte) getCharToProcess::return_x, (byte) getCharToProcess::return_y, (word) getCharToProcess::return_dist }
Unwinding list assignment { (byte) getCharToProcess::return_x#0, (byte) getCharToProcess::return_y#0, (word) getCharToProcess::return_dist#0 } ← { (byte) getCharToProcess::return_x#2, (byte) getCharToProcess::return_y#2, (word) getCharToProcess::return_dist#2 }

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (number) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (number) 7
  (byte*) PROCPORT#0 ← ((byte*)) (number) 1
  (byte) PROCPORT_RAM_IO#0 ← (number) $35
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) BGCOL#0 ← ((byte*)) (number) $d021
  (byte*) VIC_CONTROL#0 ← ((byte*)) (number) $d011
  (byte*) IRQ_STATUS#0 ← ((byte*)) (number) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (number) $d01a
  (byte) IRQ_RASTER#0 ← (number) 1
  (byte*) COLS#0 ← ((byte*)) (number) $d800
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (number) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (number) $7f
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (number) $fffe
  (byte) WHITE#0 ← (number) 1
  (byte) BLUE#0 ← (number) 6
  (byte) LIGHT_BLUE#0 ← (number) $e
  to:@9
mul8u: scope:[mul8u]  from initSquareTables::@11 initSquareTables::@4
  (byte) mul8u::a#6 ← phi( initSquareTables::@11/(byte) mul8u::a#2 initSquareTables::@4/(byte) mul8u::a#1 )
  (byte) mul8u::b#2 ← phi( initSquareTables::@11/(byte) mul8u::b#1 initSquareTables::@4/(byte) mul8u::b#0 )
  (word) mul8u::res#0 ← (number) 0
  (word) mul8u::mb#0 ← (byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#4 ← phi( mul8u::@1/(byte) mul8u::a#3 )
  (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@7/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@7/(word) mul8u::mb#3 )
  (byte) mul8u::a#5 ← phi( mul8u::@2/(byte) mul8u::a#4 mul8u::@7/(byte) mul8u::a#7 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#7 ← phi( mul8u::@2/(byte) mul8u::a#4 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#4 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#4
  return 
  to:@return
@9: scope:[]  from @begin
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (byte[$3e8]) SCREEN_COPY#0 ← { fill( $3e8, 0) }
  (word) NOT_FOUND#0 ← (number) $ffff
  to:@10
main: scope:[main]  from @17
  (number~) main::$3 ← (byte) NUM_PROCESSING#0 - (number) 1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$14 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
  (byte*) main::$15 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
  *((byte*) main::$15 + (byte~) main::$14) ← (number) 0
  (byte*) main::$16 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
  *((byte*) main::$16 + (byte~) main::$14) ← (number) 0
  (word*) main::$17 ← (word*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
  *((word*) main::$17 + (byte~) main::$14) ← (word) NOT_FOUND#0
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,main::$3)
  (bool~) main::$4 ← (byte) main::i#1 != rangelast(0,main::$3)
  if((bool~) main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (void()*~) main::$0 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
  (word) setupRasterIrq::raster#0 ← (byte) RASTER_IRQ_TOP#0
  (void()*) setupRasterIrq::irqRoutine#0 ← (void()*~) main::$0
  call setupRasterIrq 
  to:main::@13
main::@13: scope:[main]  from main::@2
  (byte*) main::src#0 ← (byte*) SCREEN#0
  (byte*) main::dst#0 ← (byte[$3e8]) SCREEN_COPY#0
  to:main::@3
main::@3: scope:[main]  from main::@13 main::@3
  (byte*) main::dst#2 ← phi( main::@13/(byte*) main::dst#0 main::@3/(byte*) main::dst#1 )
  (byte*) main::src#2 ← phi( main::@13/(byte*) main::src#0 main::@3/(byte*) main::src#1 )
  *((byte*) main::dst#2) ← *((byte*) main::src#2)
  (byte*) main::src#1 ← ++ (byte*) main::src#2
  (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  (byte*~) main::$5 ← (byte*) SCREEN#0 + (number) $3e8
  (bool~) main::$6 ← (byte*) main::src#1 != (byte*~) main::$5
  if((bool~) main::$6) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  call initSquareTables 
  to:main::@14
main::@14: scope:[main]  from main::@4
  to:main::@5
main::@5: scope:[main]  from main::@14 main::@16
  call getCharToProcess 
  (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#2
  (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#2
  (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#2
  to:main::@15
main::@15: scope:[main]  from main::@5
  (word) getCharToProcess::return_dist#3 ← phi( main::@5/(word) getCharToProcess::return_dist#0 )
  (byte) getCharToProcess::return_y#3 ← phi( main::@5/(byte) getCharToProcess::return_y#0 )
  (byte) getCharToProcess::return_x#3 ← phi( main::@5/(byte) getCharToProcess::return_x#0 )
  (byte) main::$7_x ← (byte) getCharToProcess::return_x#3
  (byte) main::$7_y ← (byte) getCharToProcess::return_y#3
  (word) main::$7_dist ← (word) getCharToProcess::return_dist#3
  (byte) main::center_x#0 ← (byte) main::$7_x
  (byte) main::center_y#0 ← (byte) main::$7_y
  (word) main::center_dist#0 ← (word) main::$7_dist
  (bool~) main::$8 ← (word) main::center_dist#0 == (word) NOT_FOUND#0
  (bool~) main::$9 ← ! (bool~) main::$8
  if((bool~) main::$9) goto main::@6
  to:main::@11
main::@6: scope:[main]  from main::@15
  (word) main::center_dist#1 ← phi( main::@15/(word) main::center_dist#0 )
  (byte) main::center_y#1 ← phi( main::@15/(byte) main::center_y#0 )
  (byte) main::center_x#1 ← phi( main::@15/(byte) main::center_x#0 )
  (byte) startProcessing::center_x#0 ← (byte) main::center_x#1
  (byte) startProcessing::center_y#0 ← (byte) main::center_y#1
  (word) startProcessing::center_dist#0 ← (word) main::center_dist#1
  call startProcessing 
  to:main::@16
main::@16: scope:[main]  from main::@6
  if(true) goto main::@5
  to:main::@11
main::@11: scope:[main]  from main::@11 main::@15 main::@16
  (byte*~) main::$13 ← (byte*) SCREEN#0 + (number) $3e7
  *((byte*~) main::$13) ← ++ *((byte*~) main::$13)
  if(true) goto main::@11
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
@10: scope:[]  from @9
  (byte) NUM_PROCESSING#0 ← (number) $10
  (struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 ← { fill( NUM_PROCESSING#0, 0) }
  to:@12
startProcessing: scope:[startProcessing]  from main::@6
  (word) startProcessing::center_dist#7 ← phi( main::@6/(word) startProcessing::center_dist#0 )
  (byte) startProcessing::center_y#7 ← phi( main::@6/(byte) startProcessing::center_y#0 )
  (byte) startProcessing::center_x#7 ← phi( main::@6/(byte) startProcessing::center_x#0 )
  (byte) startProcessing::freeIdx#0 ← (number) $ff
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@4
  (word) startProcessing::center_dist#6 ← phi( startProcessing/(word) startProcessing::center_dist#7 startProcessing::@4/(word) startProcessing::center_dist#2 )
  (byte) startProcessing::center_y#6 ← phi( startProcessing/(byte) startProcessing::center_y#7 startProcessing::@4/(byte) startProcessing::center_y#2 )
  (byte) startProcessing::center_x#6 ← phi( startProcessing/(byte) startProcessing::center_x#7 startProcessing::@4/(byte) startProcessing::center_x#2 )
  (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) startProcessing::freeIdx#0 startProcessing::@4/(byte) startProcessing::freeIdx#2 )
  (number~) startProcessing::$0 ← (byte) NUM_PROCESSING#0 - (number) 1
  (byte) startProcessing::i#0 ← (byte) 0
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  (word) startProcessing::center_dist#5 ← phi( startProcessing::@1/(word) startProcessing::center_dist#6 startProcessing::@3/(word) startProcessing::center_dist#3 )
  (byte) startProcessing::center_y#5 ← phi( startProcessing::@1/(byte) startProcessing::center_y#6 startProcessing::@3/(byte) startProcessing::center_y#3 )
  (byte) startProcessing::center_x#5 ← phi( startProcessing::@1/(byte) startProcessing::center_x#6 startProcessing::@3/(byte) startProcessing::center_x#3 )
  (byte) startProcessing::freeIdx#5 ← phi( startProcessing::@1/(byte) startProcessing::freeIdx#6 startProcessing::@3/(byte) startProcessing::freeIdx#4 )
  (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) startProcessing::i#0 startProcessing::@3/(byte) startProcessing::i#1 )
  (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
  (word*) startProcessing::$10 ← (word*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
  (bool~) startProcessing::$1 ← *((word*) startProcessing::$10 + (byte~) startProcessing::$5) == (word) NOT_FOUND#0
  (bool~) startProcessing::$2 ← ! (bool~) startProcessing::$1
  if((bool~) startProcessing::$2) goto startProcessing::@3
  to:startProcessing::@5
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  (word) startProcessing::center_dist#3 ← phi( startProcessing::@2/(word) startProcessing::center_dist#5 )
  (byte) startProcessing::center_y#3 ← phi( startProcessing::@2/(byte) startProcessing::center_y#5 )
  (byte) startProcessing::center_x#3 ← phi( startProcessing::@2/(byte) startProcessing::center_x#5 )
  (byte) startProcessing::freeIdx#4 ← phi( startProcessing::@2/(byte) startProcessing::freeIdx#5 )
  (byte) startProcessing::i#3 ← phi( startProcessing::@2/(byte) startProcessing::i#2 )
  (byte) startProcessing::i#1 ← (byte) startProcessing::i#3 + rangenext(0,startProcessing::$0)
  (bool~) startProcessing::$3 ← (byte) startProcessing::i#1 != rangelast(0,startProcessing::$0)
  if((bool~) startProcessing::$3) goto startProcessing::@2
  to:startProcessing::@4
startProcessing::@5: scope:[startProcessing]  from startProcessing::@2
  (word) startProcessing::center_dist#4 ← phi( startProcessing::@2/(word) startProcessing::center_dist#5 )
  (byte) startProcessing::center_y#4 ← phi( startProcessing::@2/(byte) startProcessing::center_y#5 )
  (byte) startProcessing::center_x#4 ← phi( startProcessing::@2/(byte) startProcessing::center_x#5 )
  (byte) startProcessing::i#4 ← phi( startProcessing::@2/(byte) startProcessing::i#2 )
  (byte) startProcessing::freeIdx#1 ← (byte) startProcessing::i#4
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@3 startProcessing::@5
  (word) startProcessing::center_dist#2 ← phi( startProcessing::@3/(word) startProcessing::center_dist#3 startProcessing::@5/(word) startProcessing::center_dist#4 )
  (byte) startProcessing::center_y#2 ← phi( startProcessing::@3/(byte) startProcessing::center_y#3 startProcessing::@5/(byte) startProcessing::center_y#4 )
  (byte) startProcessing::center_x#2 ← phi( startProcessing::@3/(byte) startProcessing::center_x#3 startProcessing::@5/(byte) startProcessing::center_x#4 )
  (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@3/(byte) startProcessing::freeIdx#4 startProcessing::@5/(byte) startProcessing::freeIdx#1 )
  (bool~) startProcessing::$4 ← (byte) startProcessing::freeIdx#2 == (number) $ff
  if((bool~) startProcessing::$4) goto startProcessing::@1
  to:startProcessing::@8
startProcessing::@8: scope:[startProcessing]  from startProcessing::@4
  (word) startProcessing::center_dist#1 ← phi( startProcessing::@4/(word) startProcessing::center_dist#2 )
  (byte) startProcessing::center_y#1 ← phi( startProcessing::@4/(byte) startProcessing::center_y#2 )
  (byte) startProcessing::center_x#1 ← phi( startProcessing::@4/(byte) startProcessing::center_x#2 )
  (byte) startProcessing::freeIdx#3 ← phi( startProcessing::@4/(byte) startProcessing::freeIdx#2 )
  (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#3 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
  (byte*) startProcessing::$7 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
  *((byte*) startProcessing::$7 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#1
  (byte*) startProcessing::$8 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
  *((byte*) startProcessing::$8 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#1
  (word*) startProcessing::$9 ← (word*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
  *((word*) startProcessing::$9 + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#1
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@8
  return 
  to:@return
processChars: scope:[processChars]  from irqBottom::@2
  (number~) processChars::$0 ← (byte) NUM_PROCESSING#0 - (number) 1
  (byte) processChars::i#0 ← (byte) 0
  to:processChars::@1
processChars::@1: scope:[processChars]  from processChars processChars::@2
  (byte) processChars::i#2 ← phi( processChars/(byte) processChars::i#0 processChars::@2/(byte) processChars::i#1 )
  (byte~) processChars::$14 ← (byte) processChars::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
  (word*) processChars::$20 ← (word*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
  (bool~) processChars::$1 ← *((word*) processChars::$20 + (byte~) processChars::$14) != (word) NOT_FOUND#0
  (bool~) processChars::$2 ← ! (bool~) processChars::$1
  if((bool~) processChars::$2) goto processChars::@2
  to:processChars::@8
processChars::@2: scope:[processChars]  from processChars::@1 processChars::@10 processChars::@3 processChars::@4
  (byte) processChars::i#3 ← phi( processChars::@1/(byte) processChars::i#2 processChars::@10/(byte) processChars::i#6 processChars::@3/(byte) processChars::i#5 processChars::@4/(byte) processChars::i#7 )
  (byte) processChars::i#1 ← (byte) processChars::i#3 + rangenext(0,processChars::$0)
  (bool~) processChars::$13 ← (byte) processChars::i#1 != rangelast(0,processChars::$0)
  if((bool~) processChars::$13) goto processChars::@1
  to:processChars::@return
processChars::@8: scope:[processChars]  from processChars::@1
  (byte) processChars::i#4 ← phi( processChars::@1/(byte) processChars::i#2 )
  (byte~) processChars::$15 ← (byte) processChars::i#4 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
  (byte*) processChars::$17 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
  (byte) processChars::processing_x#0 ← *((byte*) processChars::$17 + (byte~) processChars::$15)
  (byte*) processChars::$18 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
  (byte) processChars::processing_y#0 ← *((byte*) processChars::$18 + (byte~) processChars::$15)
  (word~) processChars::$3 ← ((word)) (byte) processChars::processing_y#0
  (number~) processChars::$4 ← (word~) processChars::$3 * (number) $28
  (byte*~) processChars::$5 ← (byte*) COLS#0 + (number~) processChars::$4
  (byte*~) processChars::$6 ← (byte*~) processChars::$5 + (byte) processChars::processing_x#0
  *((byte*~) processChars::$6) ← (byte) WHITE#0
  (word~) processChars::$7 ← ((word)) (byte) processChars::processing_y#0
  (number~) processChars::$8 ← (word~) processChars::$7 * (number) $28
  (byte*~) processChars::$9 ← (byte*) SCREEN#0 + (number~) processChars::$8
  (byte*~) processChars::$10 ← (byte*~) processChars::$9 + (byte) processChars::processing_x#0
  (byte*) processChars::processing_ptr#0 ← (byte*~) processChars::$10
  (bool~) processChars::$11 ← *((byte*) processChars::processing_ptr#0) == (byte) ' '
  if((bool~) processChars::$11) goto processChars::@3
  to:processChars::@9
processChars::@3: scope:[processChars]  from processChars::@8
  (byte) processChars::i#5 ← phi( processChars::@8/(byte) processChars::i#4 )
  (byte~) processChars::$16 ← (byte) processChars::i#5 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
  (word*) processChars::$21 ← (word*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
  *((word*) processChars::$21 + (byte~) processChars::$16) ← (word) NOT_FOUND#0
  to:processChars::@2
processChars::@9: scope:[processChars]  from processChars::@8
  (byte) processChars::i#8 ← phi( processChars::@8/(byte) processChars::i#4 )
  (byte*) processChars::processing_ptr#1 ← phi( processChars::@8/(byte*) processChars::processing_ptr#0 )
  (bool~) processChars::$12 ← *((byte*) processChars::processing_ptr#1) > (byte) ' '
  if((bool~) processChars::$12) goto processChars::@4
  to:processChars::@10
processChars::@4: scope:[processChars]  from processChars::@9
  (byte) processChars::i#7 ← phi( processChars::@9/(byte) processChars::i#8 )
  (byte*) processChars::processing_ptr#2 ← phi( processChars::@9/(byte*) processChars::processing_ptr#1 )
  *((byte*) processChars::processing_ptr#2) ← -- *((byte*) processChars::processing_ptr#2)
  to:processChars::@2
processChars::@10: scope:[processChars]  from processChars::@9
  (byte) processChars::i#6 ← phi( processChars::@9/(byte) processChars::i#8 )
  (byte*) processChars::processing_ptr#3 ← phi( processChars::@9/(byte*) processChars::processing_ptr#1 )
  *((byte*) processChars::processing_ptr#3) ← ++ *((byte*) processChars::processing_ptr#3)
  to:processChars::@2
processChars::@return: scope:[processChars]  from processChars::@2
  return 
  to:@return
@12: scope:[]  from @10
  (word[$28]) SQUARES_X#0 ← { fill( $28, 0) }
  (word[$19]) SQUARES_Y#0 ← { fill( $19, 0) }
  to:@15
initSquareTables: scope:[initSquareTables]  from main::@4
  (byte) initSquareTables::x#0 ← (byte) 0
  to:initSquareTables::@1
initSquareTables::@1: scope:[initSquareTables]  from initSquareTables initSquareTables::@15
  (byte) initSquareTables::x#2 ← phi( initSquareTables/(byte) initSquareTables::x#0 initSquareTables::@15/(byte) initSquareTables::x#1 )
  (bool~) initSquareTables::$0 ← (byte) initSquareTables::x#2 < (number) $14
  if((bool~) initSquareTables::$0) goto initSquareTables::@2
  to:initSquareTables::@3
initSquareTables::@2: scope:[initSquareTables]  from initSquareTables::@1
  (byte) initSquareTables::x#3 ← phi( initSquareTables::@1/(byte) initSquareTables::x#2 )
  (number~) initSquareTables::$3 ← (number) $14 - (byte) initSquareTables::x#3
  (number~) initSquareTables::$4 ← (number~) initSquareTables::$3
  to:initSquareTables::@4
initSquareTables::@3: scope:[initSquareTables]  from initSquareTables::@1
  (byte) initSquareTables::x#4 ← phi( initSquareTables::@1/(byte) initSquareTables::x#2 )
  (number~) initSquareTables::$1 ← (byte) initSquareTables::x#4 - (number) $14
  (number~) initSquareTables::$2 ← (number~) initSquareTables::$1
  to:initSquareTables::@4
initSquareTables::@4: scope:[initSquareTables]  from initSquareTables::@2 initSquareTables::@3
  (byte) initSquareTables::x#6 ← phi( initSquareTables::@2/(byte) initSquareTables::x#3 initSquareTables::@3/(byte) initSquareTables::x#4 )
  (number~) initSquareTables::$5 ← phi( initSquareTables::@2/(number~) initSquareTables::$4 initSquareTables::@3/(number~) initSquareTables::$2 )
  (byte) initSquareTables::x_dist#0 ← (number~) initSquareTables::$5
  (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0
  (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:initSquareTables::@15
initSquareTables::@15: scope:[initSquareTables]  from initSquareTables::@4
  (byte) initSquareTables::x#5 ← phi( initSquareTables::@4/(byte) initSquareTables::x#6 )
  (word) mul8u::return#5 ← phi( initSquareTables::@4/(word) mul8u::return#2 )
  (word~) initSquareTables::$6 ← (word) mul8u::return#5
  (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#5 * (const byte) SIZEOF_WORD
  *((word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6
  (byte) initSquareTables::x#1 ← (byte) initSquareTables::x#5 + rangenext(0,$27)
  (bool~) initSquareTables::$7 ← (byte) initSquareTables::x#1 != rangelast(0,$27)
  if((bool~) initSquareTables::$7) goto initSquareTables::@1
  to:initSquareTables::@7
initSquareTables::@7: scope:[initSquareTables]  from initSquareTables::@15
  (byte) initSquareTables::y#0 ← (byte) 0
  to:initSquareTables::@8
initSquareTables::@8: scope:[initSquareTables]  from initSquareTables::@16 initSquareTables::@7
  (byte) initSquareTables::y#2 ← phi( initSquareTables::@16/(byte) initSquareTables::y#1 initSquareTables::@7/(byte) initSquareTables::y#0 )
  (bool~) initSquareTables::$8 ← (byte) initSquareTables::y#2 < (number) $c
  if((bool~) initSquareTables::$8) goto initSquareTables::@9
  to:initSquareTables::@10
initSquareTables::@9: scope:[initSquareTables]  from initSquareTables::@8
  (byte) initSquareTables::y#3 ← phi( initSquareTables::@8/(byte) initSquareTables::y#2 )
  (number~) initSquareTables::$11 ← (number) $c - (byte) initSquareTables::y#3
  (number~) initSquareTables::$12 ← (number~) initSquareTables::$11
  to:initSquareTables::@11
initSquareTables::@10: scope:[initSquareTables]  from initSquareTables::@8
  (byte) initSquareTables::y#4 ← phi( initSquareTables::@8/(byte) initSquareTables::y#2 )
  (number~) initSquareTables::$9 ← (byte) initSquareTables::y#4 - (number) $c
  (number~) initSquareTables::$10 ← (number~) initSquareTables::$9
  to:initSquareTables::@11
initSquareTables::@11: scope:[initSquareTables]  from initSquareTables::@10 initSquareTables::@9
  (byte) initSquareTables::y#6 ← phi( initSquareTables::@10/(byte) initSquareTables::y#4 initSquareTables::@9/(byte) initSquareTables::y#3 )
  (number~) initSquareTables::$13 ← phi( initSquareTables::@9/(number~) initSquareTables::$12 initSquareTables::@10/(number~) initSquareTables::$10 )
  (byte) initSquareTables::y_dist#0 ← (number~) initSquareTables::$13
  (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0
  (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  call mul8u 
  (word) mul8u::return#3 ← (word) mul8u::return#1
  to:initSquareTables::@16
initSquareTables::@16: scope:[initSquareTables]  from initSquareTables::@11
  (byte) initSquareTables::y#5 ← phi( initSquareTables::@11/(byte) initSquareTables::y#6 )
  (word) mul8u::return#6 ← phi( initSquareTables::@11/(word) mul8u::return#3 )
  (word~) initSquareTables::$14 ← (word) mul8u::return#6
  (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#5 * (const byte) SIZEOF_WORD
  *((word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14
  (byte) initSquareTables::y#1 ← (byte) initSquareTables::y#5 + rangenext(0,$18)
  (bool~) initSquareTables::$15 ← (byte) initSquareTables::y#1 != rangelast(0,$18)
  if((bool~) initSquareTables::$15) goto initSquareTables::@8
  to:initSquareTables::@return
initSquareTables::@return: scope:[initSquareTables]  from initSquareTables::@16
  return 
  to:@return
getCharToProcess: scope:[getCharToProcess]  from main::@5
  (byte) getCharToProcess::closest_x#0 ← (number) 0
  (byte) getCharToProcess::closest_y#0 ← (number) 0
  (word) getCharToProcess::closest_dist#0 ← (word) NOT_FOUND#0
  (byte*) getCharToProcess::screen_line#0 ← (byte[$3e8]) SCREEN_COPY#0
  (byte) getCharToProcess::y#0 ← (byte) 0
  to:getCharToProcess::@3
getCharToProcess::@3: scope:[getCharToProcess]  from getCharToProcess getCharToProcess::@9
  (byte) getCharToProcess::closest_y#9 ← phi( getCharToProcess/(byte) getCharToProcess::closest_y#0 getCharToProcess::@9/(byte) getCharToProcess::closest_y#5 )
  (byte) getCharToProcess::closest_x#9 ← phi( getCharToProcess/(byte) getCharToProcess::closest_x#0 getCharToProcess::@9/(byte) getCharToProcess::closest_x#5 )
  (word) getCharToProcess::closest_dist#8 ← phi( getCharToProcess/(word) getCharToProcess::closest_dist#0 getCharToProcess::@9/(word) getCharToProcess::closest_dist#6 )
  (byte) getCharToProcess::y#7 ← phi( getCharToProcess/(byte) getCharToProcess::y#0 getCharToProcess::@9/(byte) getCharToProcess::y#1 )
  (byte*) getCharToProcess::screen_line#4 ← phi( getCharToProcess/(byte*) getCharToProcess::screen_line#0 getCharToProcess::@9/(byte*) getCharToProcess::screen_line#1 )
  (byte) getCharToProcess::x#0 ← (byte) 0
  to:getCharToProcess::@4
getCharToProcess::@4: scope:[getCharToProcess]  from getCharToProcess::@3 getCharToProcess::@5
  (byte) getCharToProcess::closest_y#7 ← phi( getCharToProcess::@3/(byte) getCharToProcess::closest_y#9 getCharToProcess::@5/(byte) getCharToProcess::closest_y#6 )
  (byte) getCharToProcess::closest_x#7 ← phi( getCharToProcess::@3/(byte) getCharToProcess::closest_x#9 getCharToProcess::@5/(byte) getCharToProcess::closest_x#6 )
  (word) getCharToProcess::closest_dist#5 ← phi( getCharToProcess::@3/(word) getCharToProcess::closest_dist#8 getCharToProcess::@5/(word) getCharToProcess::closest_dist#9 )
  (byte) getCharToProcess::y#5 ← phi( getCharToProcess::@3/(byte) getCharToProcess::y#7 getCharToProcess::@5/(byte) getCharToProcess::y#6 )
  (byte) getCharToProcess::x#2 ← phi( getCharToProcess::@3/(byte) getCharToProcess::x#0 getCharToProcess::@5/(byte) getCharToProcess::x#1 )
  (byte*) getCharToProcess::screen_line#2 ← phi( getCharToProcess::@3/(byte*) getCharToProcess::screen_line#4 getCharToProcess::@5/(byte*) getCharToProcess::screen_line#5 )
  (bool~) getCharToProcess::$2 ← *((byte*) getCharToProcess::screen_line#2 + (byte) getCharToProcess::x#2) != (byte) ' '
  (bool~) getCharToProcess::$3 ← ! (bool~) getCharToProcess::$2
  if((bool~) getCharToProcess::$3) goto getCharToProcess::@5
  to:getCharToProcess::@7
getCharToProcess::@5: scope:[getCharToProcess]  from getCharToProcess::@4 getCharToProcess::@7 getCharToProcess::@8
  (byte) getCharToProcess::closest_y#6 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_y#7 getCharToProcess::@7/(byte) getCharToProcess::closest_y#8 getCharToProcess::@8/(byte) getCharToProcess::closest_y#1 )
  (byte) getCharToProcess::closest_x#6 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_x#7 getCharToProcess::@7/(byte) getCharToProcess::closest_x#8 getCharToProcess::@8/(byte) getCharToProcess::closest_x#1 )
  (word) getCharToProcess::closest_dist#9 ← phi( getCharToProcess::@4/(word) getCharToProcess::closest_dist#5 getCharToProcess::@7/(word) getCharToProcess::closest_dist#2 getCharToProcess::@8/(word) getCharToProcess::closest_dist#1 )
  (byte) getCharToProcess::y#6 ← phi( getCharToProcess::@4/(byte) getCharToProcess::y#5 getCharToProcess::@7/(byte) getCharToProcess::y#2 getCharToProcess::@8/(byte) getCharToProcess::y#3 )
  (byte*) getCharToProcess::screen_line#5 ← phi( getCharToProcess::@4/(byte*) getCharToProcess::screen_line#2 getCharToProcess::@7/(byte*) getCharToProcess::screen_line#6 getCharToProcess::@8/(byte*) getCharToProcess::screen_line#7 )
  (byte) getCharToProcess::x#3 ← phi( getCharToProcess::@4/(byte) getCharToProcess::x#2 getCharToProcess::@7/(byte) getCharToProcess::x#4 getCharToProcess::@8/(byte) getCharToProcess::x#5 )
  (byte) getCharToProcess::x#1 ← (byte) getCharToProcess::x#3 + rangenext(0,$27)
  (bool~) getCharToProcess::$7 ← (byte) getCharToProcess::x#1 != rangelast(0,$27)
  if((bool~) getCharToProcess::$7) goto getCharToProcess::@4
  to:getCharToProcess::@9
getCharToProcess::@7: scope:[getCharToProcess]  from getCharToProcess::@4
  (byte) getCharToProcess::closest_y#8 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_y#7 )
  (byte) getCharToProcess::closest_x#8 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_x#7 )
  (byte*) getCharToProcess::screen_line#6 ← phi( getCharToProcess::@4/(byte*) getCharToProcess::screen_line#2 )
  (word) getCharToProcess::closest_dist#2 ← phi( getCharToProcess::@4/(word) getCharToProcess::closest_dist#5 )
  (byte) getCharToProcess::y#2 ← phi( getCharToProcess::@4/(byte) getCharToProcess::y#5 )
  (byte) getCharToProcess::x#4 ← phi( getCharToProcess::@4/(byte) getCharToProcess::x#2 )
  (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#4 * (const byte) SIZEOF_WORD
  (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#2 * (const byte) SIZEOF_WORD
  (word~) getCharToProcess::$4 ← *((word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14)
  (word) getCharToProcess::dist#0 ← (word~) getCharToProcess::$4
  (bool~) getCharToProcess::$5 ← (word) getCharToProcess::dist#0 < (word) getCharToProcess::closest_dist#2
  (bool~) getCharToProcess::$6 ← ! (bool~) getCharToProcess::$5
  if((bool~) getCharToProcess::$6) goto getCharToProcess::@5
  to:getCharToProcess::@8
getCharToProcess::@8: scope:[getCharToProcess]  from getCharToProcess::@7
  (byte*) getCharToProcess::screen_line#7 ← phi( getCharToProcess::@7/(byte*) getCharToProcess::screen_line#6 )
  (word) getCharToProcess::dist#1 ← phi( getCharToProcess::@7/(word) getCharToProcess::dist#0 )
  (byte) getCharToProcess::y#3 ← phi( getCharToProcess::@7/(byte) getCharToProcess::y#2 )
  (byte) getCharToProcess::x#5 ← phi( getCharToProcess::@7/(byte) getCharToProcess::x#4 )
  (byte) getCharToProcess::closest_x#1 ← (byte) getCharToProcess::x#5
  (byte) getCharToProcess::closest_y#1 ← (byte) getCharToProcess::y#3
  (word) getCharToProcess::closest_dist#1 ← (word) getCharToProcess::dist#1
  to:getCharToProcess::@5
getCharToProcess::@9: scope:[getCharToProcess]  from getCharToProcess::@5
  (byte) getCharToProcess::closest_y#5 ← phi( getCharToProcess::@5/(byte) getCharToProcess::closest_y#6 )
  (byte) getCharToProcess::closest_x#5 ← phi( getCharToProcess::@5/(byte) getCharToProcess::closest_x#6 )
  (word) getCharToProcess::closest_dist#6 ← phi( getCharToProcess::@5/(word) getCharToProcess::closest_dist#9 )
  (byte) getCharToProcess::y#4 ← phi( getCharToProcess::@5/(byte) getCharToProcess::y#6 )
  (byte*) getCharToProcess::screen_line#3 ← phi( getCharToProcess::@5/(byte*) getCharToProcess::screen_line#5 )
  (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#3 + (number) $28
  (byte) getCharToProcess::y#1 ← (byte) getCharToProcess::y#4 + rangenext(0,$18)
  (bool~) getCharToProcess::$8 ← (byte) getCharToProcess::y#1 != rangelast(0,$18)
  if((bool~) getCharToProcess::$8) goto getCharToProcess::@3
  to:getCharToProcess::@10
getCharToProcess::@10: scope:[getCharToProcess]  from getCharToProcess::@9
  (byte) getCharToProcess::closest_y#4 ← phi( getCharToProcess::@9/(byte) getCharToProcess::closest_y#5 )
  (byte) getCharToProcess::closest_x#4 ← phi( getCharToProcess::@9/(byte) getCharToProcess::closest_x#5 )
  (word) getCharToProcess::closest_dist#3 ← phi( getCharToProcess::@9/(word) getCharToProcess::closest_dist#6 )
  (bool~) getCharToProcess::$0 ← (word) getCharToProcess::closest_dist#3 != (word) NOT_FOUND#0
  (bool~) getCharToProcess::$1 ← ! (bool~) getCharToProcess::$0
  if((bool~) getCharToProcess::$1) goto getCharToProcess::@1
  to:getCharToProcess::@11
getCharToProcess::@1: scope:[getCharToProcess]  from getCharToProcess::@10 getCharToProcess::@11
  (word) getCharToProcess::closest_dist#4 ← phi( getCharToProcess::@10/(word) getCharToProcess::closest_dist#3 getCharToProcess::@11/(word) getCharToProcess::closest_dist#7 )
  (byte) getCharToProcess::closest_y#2 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_y#4 getCharToProcess::@11/(byte) getCharToProcess::closest_y#3 )
  (byte) getCharToProcess::closest_x#2 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_x#4 getCharToProcess::@11/(byte) getCharToProcess::closest_x#3 )
  (byte) getCharToProcess::return_x#1 ← (byte) getCharToProcess::closest_x#2
  (byte) getCharToProcess::return_y#1 ← (byte) getCharToProcess::closest_y#2
  (word) getCharToProcess::return_dist#1 ← (word) getCharToProcess::closest_dist#4
  to:getCharToProcess::@return
getCharToProcess::@11: scope:[getCharToProcess]  from getCharToProcess::@10
  (word) getCharToProcess::closest_dist#7 ← phi( getCharToProcess::@10/(word) getCharToProcess::closest_dist#3 )
  (byte) getCharToProcess::closest_x#3 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_x#4 )
  (byte) getCharToProcess::closest_y#3 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_y#4 )
  (word~) getCharToProcess::$9 ← ((word)) (byte) getCharToProcess::closest_y#3
  (number~) getCharToProcess::$10 ← (word~) getCharToProcess::$9 * (number) $28
  (byte*~) getCharToProcess::$11 ← (byte[$3e8]) SCREEN_COPY#0 + (number~) getCharToProcess::$10
  (byte*~) getCharToProcess::$12 ← (byte*~) getCharToProcess::$11 + (byte) getCharToProcess::closest_x#3
  *((byte*~) getCharToProcess::$12) ← (byte) ' '
  to:getCharToProcess::@1
getCharToProcess::@return: scope:[getCharToProcess]  from getCharToProcess::@1
  (word) getCharToProcess::return_dist#4 ← phi( getCharToProcess::@1/(word) getCharToProcess::return_dist#1 )
  (byte) getCharToProcess::return_y#4 ← phi( getCharToProcess::@1/(byte) getCharToProcess::return_y#1 )
  (byte) getCharToProcess::return_x#4 ← phi( getCharToProcess::@1/(byte) getCharToProcess::return_x#1 )
  (byte) getCharToProcess::return_x#2 ← (byte) getCharToProcess::return_x#4
  (byte) getCharToProcess::return_y#2 ← (byte) getCharToProcess::return_y#4
  (word) getCharToProcess::return_dist#2 ← (word) getCharToProcess::return_dist#4
  return 
  to:@return
setupRasterIrq: scope:[setupRasterIrq]  from main::@2
  (void()*) setupRasterIrq::irqRoutine#4 ← phi( main::@2/(void()*) setupRasterIrq::irqRoutine#0 )
  (word) setupRasterIrq::raster#1 ← phi( main::@2/(word) setupRasterIrq::raster#0 )
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  *((byte*) CIA1_INTERRUPT#0) ← (byte) CIA_INTERRUPT_CLEAR#0
  (bool~) setupRasterIrq::$0 ← (word) setupRasterIrq::raster#1 < (number) $100
  if((bool~) setupRasterIrq::$0) goto setupRasterIrq::@1
  to:setupRasterIrq::@3
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  (void()*) setupRasterIrq::irqRoutine#2 ← phi( setupRasterIrq/(void()*) setupRasterIrq::irqRoutine#4 )
  (word) setupRasterIrq::raster#3 ← phi( setupRasterIrq/(word) setupRasterIrq::raster#1 )
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (number) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@3: scope:[setupRasterIrq]  from setupRasterIrq
  (void()*) setupRasterIrq::irqRoutine#3 ← phi( setupRasterIrq/(void()*) setupRasterIrq::irqRoutine#4 )
  (word) setupRasterIrq::raster#4 ← phi( setupRasterIrq/(word) setupRasterIrq::raster#1 )
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) | (number) $80
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1 setupRasterIrq::@3
  (void()*) setupRasterIrq::irqRoutine#1 ← phi( setupRasterIrq::@1/(void()*) setupRasterIrq::irqRoutine#2 setupRasterIrq::@3/(void()*) setupRasterIrq::irqRoutine#3 )
  (word) setupRasterIrq::raster#2 ← phi( setupRasterIrq::@1/(word) setupRasterIrq::raster#3 setupRasterIrq::@3/(word) setupRasterIrq::raster#4 )
  (byte~) setupRasterIrq::$1 ← < (word) setupRasterIrq::raster#2
  *((byte*) RASTER#0) ← (byte~) setupRasterIrq::$1
  *((byte*) IRQ_ENABLE#0) ← (byte) IRQ_RASTER#0
  *((void()**) HARDWARE_IRQ#0) ← (void()*) setupRasterIrq::irqRoutine#1
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  return 
  to:@return
@15: scope:[]  from @12
  (byte) RASTER_IRQ_TOP#0 ← (number) $30
  to:@16
irqTop: scope:[irqTop]  from
  (byte) irqTop::i#0 ← (byte) 0
  to:irqTop::@1
irqTop::@1: scope:[irqTop]  from irqTop irqTop::@1
  (byte) irqTop::i#2 ← phi( irqTop/(byte) irqTop::i#0 irqTop::@1/(byte) irqTop::i#1 )
  (byte) irqTop::i#1 ← (byte) irqTop::i#2 + rangenext(0,4)
  (bool~) irqTop::$1 ← (byte) irqTop::i#1 != rangelast(0,4)
  if((bool~) irqTop::$1) goto irqTop::@1
  to:irqTop::@2
irqTop::@2: scope:[irqTop]  from irqTop::@1
  *((byte*) BORDERCOL#0) ← (byte) WHITE#0
  *((byte*) BGCOL#0) ← (byte) WHITE#0
  (byte) irqTop::i1#0 ← (byte) 0
  to:irqTop::@3
irqTop::@3: scope:[irqTop]  from irqTop::@2 irqTop::@3
  (byte) irqTop::i1#2 ← phi( irqTop::@2/(byte) irqTop::i1#0 irqTop::@3/(byte) irqTop::i1#1 )
  (byte) irqTop::i1#1 ← (byte) irqTop::i1#2 + rangenext(0,7)
  (bool~) irqTop::$2 ← (byte) irqTop::i1#1 != rangelast(0,7)
  if((bool~) irqTop::$2) goto irqTop::@3
  to:irqTop::@4
irqTop::@4: scope:[irqTop]  from irqTop::@3
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  *((byte*) BGCOL#0) ← (byte) BLUE#0
  *((byte*) RASTER#0) ← (byte) RASTER_IRQ_MIDDLE#0
  (void()*~) irqTop::$0 ← & interrupt(HARDWARE_ALL)(void()) irqBottom()
  *((void()**) HARDWARE_IRQ#0) ← (void()*~) irqTop::$0
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@return: scope:[irqTop]  from irqTop::@4
  return 
  to:@return
@16: scope:[]  from @15
  (byte) RASTER_IRQ_MIDDLE#0 ← (number) $ff
  to:@17
irqBottom: scope:[irqBottom]  from
  (byte) irqBottom::i#0 ← (byte) 0
  to:irqBottom::@1
irqBottom::@1: scope:[irqBottom]  from irqBottom irqBottom::@1
  (byte) irqBottom::i#2 ← phi( irqBottom/(byte) irqBottom::i#0 irqBottom::@1/(byte) irqBottom::i#1 )
  (byte) irqBottom::i#1 ← (byte) irqBottom::i#2 + rangenext(0,4)
  (bool~) irqBottom::$2 ← (byte) irqBottom::i#1 != rangelast(0,4)
  if((bool~) irqBottom::$2) goto irqBottom::@1
  to:irqBottom::@2
irqBottom::@2: scope:[irqBottom]  from irqBottom::@1
  *((byte*) BORDERCOL#0) ← (byte) WHITE#0
  *((byte*) BGCOL#0) ← (byte) WHITE#0
  call processChars 
  to:irqBottom::@3
irqBottom::@3: scope:[irqBottom]  from irqBottom::@2
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  *((byte*) BGCOL#0) ← (byte) BLUE#0
  *((byte*) RASTER#0) ← (byte) RASTER_IRQ_TOP#0
  (void()*~) irqBottom::$1 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
  *((void()**) HARDWARE_IRQ#0) ← (void()*~) irqBottom::$1
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@return: scope:[irqBottom]  from irqBottom::@3
  return 
  to:@return
@17: scope:[]  from @16
  call main 
  to:@18
@18: scope:[]  from @17
  to:@end
@end: scope:[]  from @18

SYMBOL TABLE SSA
(label) @10
(label) @12
(label) @15
(label) @16
(label) @17
(label) @18
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(word) NOT_FOUND
(word) NOT_FOUND#0
(byte) NUM_PROCESSING
(byte) NUM_PROCESSING#0
(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST = (byte) 2
(const byte) OFFSET_STRUCT_PROCESSINGCHAR_X = (byte) 0
(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y = (byte) 1
(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING
(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(word) ProcessingChar::dist
(byte) ProcessingChar::x
(byte) ProcessingChar::y
(byte*) RASTER
(byte*) RASTER#0
(byte) RASTER_IRQ_MIDDLE
(byte) RASTER_IRQ_MIDDLE#0
(byte) RASTER_IRQ_TOP
(byte) RASTER_IRQ_TOP#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte[$3e8]) SCREEN_COPY
(byte[$3e8]) SCREEN_COPY#0
(const byte) SIZEOF_STRUCT_PROCESSINGCHAR = (byte) 4
(const byte) SIZEOF_WORD = (byte) 2
(word[$28]) SQUARES_X
(word[$28]) SQUARES_X#0
(word[$19]) SQUARES_Y
(word[$19]) SQUARES_Y#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte) WHITE
(byte) WHITE#0
(struct ProcessingChar()) getCharToProcess()
(bool~) getCharToProcess::$0
(bool~) getCharToProcess::$1
(number~) getCharToProcess::$10
(byte*~) getCharToProcess::$11
(byte*~) getCharToProcess::$12
(byte~) getCharToProcess::$13
(byte~) getCharToProcess::$14
(bool~) getCharToProcess::$2
(bool~) getCharToProcess::$3
(word~) getCharToProcess::$4
(bool~) getCharToProcess::$5
(bool~) getCharToProcess::$6
(bool~) getCharToProcess::$7
(bool~) getCharToProcess::$8
(word~) getCharToProcess::$9
(label) getCharToProcess::@1
(label) getCharToProcess::@10
(label) getCharToProcess::@11
(label) getCharToProcess::@3
(label) getCharToProcess::@4
(label) getCharToProcess::@5
(label) getCharToProcess::@7
(label) getCharToProcess::@8
(label) getCharToProcess::@9
(label) getCharToProcess::@return
(struct ProcessingChar) getCharToProcess::closest
(word) getCharToProcess::closest_dist
(word) getCharToProcess::closest_dist#0
(word) getCharToProcess::closest_dist#1
(word) getCharToProcess::closest_dist#2
(word) getCharToProcess::closest_dist#3
(word) getCharToProcess::closest_dist#4
(word) getCharToProcess::closest_dist#5
(word) getCharToProcess::closest_dist#6
(word) getCharToProcess::closest_dist#7
(word) getCharToProcess::closest_dist#8
(word) getCharToProcess::closest_dist#9
(byte) getCharToProcess::closest_x
(byte) getCharToProcess::closest_x#0
(byte) getCharToProcess::closest_x#1
(byte) getCharToProcess::closest_x#2
(byte) getCharToProcess::closest_x#3
(byte) getCharToProcess::closest_x#4
(byte) getCharToProcess::closest_x#5
(byte) getCharToProcess::closest_x#6
(byte) getCharToProcess::closest_x#7
(byte) getCharToProcess::closest_x#8
(byte) getCharToProcess::closest_x#9
(byte) getCharToProcess::closest_y
(byte) getCharToProcess::closest_y#0
(byte) getCharToProcess::closest_y#1
(byte) getCharToProcess::closest_y#2
(byte) getCharToProcess::closest_y#3
(byte) getCharToProcess::closest_y#4
(byte) getCharToProcess::closest_y#5
(byte) getCharToProcess::closest_y#6
(byte) getCharToProcess::closest_y#7
(byte) getCharToProcess::closest_y#8
(byte) getCharToProcess::closest_y#9
(word) getCharToProcess::dist
(word) getCharToProcess::dist#0
(word) getCharToProcess::dist#1
(struct ProcessingChar) getCharToProcess::return
(word) getCharToProcess::return_dist
(word) getCharToProcess::return_dist#0
(word) getCharToProcess::return_dist#1
(word) getCharToProcess::return_dist#2
(word) getCharToProcess::return_dist#3
(word) getCharToProcess::return_dist#4
(byte) getCharToProcess::return_x
(byte) getCharToProcess::return_x#0
(byte) getCharToProcess::return_x#1
(byte) getCharToProcess::return_x#2
(byte) getCharToProcess::return_x#3
(byte) getCharToProcess::return_x#4
(byte) getCharToProcess::return_y
(byte) getCharToProcess::return_y#0
(byte) getCharToProcess::return_y#1
(byte) getCharToProcess::return_y#2
(byte) getCharToProcess::return_y#3
(byte) getCharToProcess::return_y#4
(byte*) getCharToProcess::screen_line
(byte*) getCharToProcess::screen_line#0
(byte*) getCharToProcess::screen_line#1
(byte*) getCharToProcess::screen_line#2
(byte*) getCharToProcess::screen_line#3
(byte*) getCharToProcess::screen_line#4
(byte*) getCharToProcess::screen_line#5
(byte*) getCharToProcess::screen_line#6
(byte*) getCharToProcess::screen_line#7
(byte) getCharToProcess::x
(byte) getCharToProcess::x#0
(byte) getCharToProcess::x#1
(byte) getCharToProcess::x#2
(byte) getCharToProcess::x#3
(byte) getCharToProcess::x#4
(byte) getCharToProcess::x#5
(byte) getCharToProcess::y
(byte) getCharToProcess::y#0
(byte) getCharToProcess::y#1
(byte) getCharToProcess::y#2
(byte) getCharToProcess::y#3
(byte) getCharToProcess::y#4
(byte) getCharToProcess::y#5
(byte) getCharToProcess::y#6
(byte) getCharToProcess::y#7
(void()) initSquareTables()
(bool~) initSquareTables::$0
(number~) initSquareTables::$1
(number~) initSquareTables::$10
(number~) initSquareTables::$11
(number~) initSquareTables::$12
(number~) initSquareTables::$13
(word~) initSquareTables::$14
(bool~) initSquareTables::$15
(byte~) initSquareTables::$16
(byte~) initSquareTables::$17
(number~) initSquareTables::$2
(number~) initSquareTables::$3
(number~) initSquareTables::$4
(number~) initSquareTables::$5
(word~) initSquareTables::$6
(bool~) initSquareTables::$7
(bool~) initSquareTables::$8
(number~) initSquareTables::$9
(label) initSquareTables::@1
(label) initSquareTables::@10
(label) initSquareTables::@11
(label) initSquareTables::@15
(label) initSquareTables::@16
(label) initSquareTables::@2
(label) initSquareTables::@3
(label) initSquareTables::@4
(label) initSquareTables::@7
(label) initSquareTables::@8
(label) initSquareTables::@9
(label) initSquareTables::@return
(byte) initSquareTables::x
(byte) initSquareTables::x#0
(byte) initSquareTables::x#1
(byte) initSquareTables::x#2
(byte) initSquareTables::x#3
(byte) initSquareTables::x#4
(byte) initSquareTables::x#5
(byte) initSquareTables::x#6
(byte) initSquareTables::x_dist
(byte) initSquareTables::x_dist#0
(byte) initSquareTables::y
(byte) initSquareTables::y#0
(byte) initSquareTables::y#1
(byte) initSquareTables::y#2
(byte) initSquareTables::y#3
(byte) initSquareTables::y#4
(byte) initSquareTables::y#5
(byte) initSquareTables::y#6
(byte) initSquareTables::y_dist
(byte) initSquareTables::y_dist#0
interrupt(HARDWARE_ALL)(void()) irqBottom()
(void()*~) irqBottom::$1
(bool~) irqBottom::$2
(label) irqBottom::@1
(label) irqBottom::@2
(label) irqBottom::@3
(label) irqBottom::@return
(byte) irqBottom::i
(byte) irqBottom::i#0
(byte) irqBottom::i#1
(byte) irqBottom::i#2
interrupt(HARDWARE_ALL)(void()) irqTop()
(void()*~) irqTop::$0
(bool~) irqTop::$1
(bool~) irqTop::$2
(label) irqTop::@1
(label) irqTop::@2
(label) irqTop::@3
(label) irqTop::@4
(label) irqTop::@return
(byte) irqTop::i
(byte) irqTop::i#0
(byte) irqTop::i#1
(byte) irqTop::i#2
(byte) irqTop::i1
(byte) irqTop::i1#0
(byte) irqTop::i1#1
(byte) irqTop::i1#2
(void()) main()
(void()*~) main::$0
(byte*~) main::$13
(byte~) main::$14
(byte*) main::$15
(byte*) main::$16
(word*) main::$17
(number~) main::$3
(bool~) main::$4
(byte*~) main::$5
(bool~) main::$6
(struct ProcessingChar~) main::$7
(word) main::$7_dist
(byte) main::$7_x
(byte) main::$7_y
(bool~) main::$8
(bool~) main::$9
(label) main::@1
(label) main::@11
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(struct ProcessingChar) main::center
(word) main::center_dist
(word) main::center_dist#0
(word) main::center_dist#1
(byte) main::center_x
(byte) main::center_x#0
(byte) main::center_x#1
(byte) main::center_y
(byte) main::center_y#0
(byte) main::center_y#1
(byte*) main::dst
(byte*) main::dst#0
(byte*) main::dst#1
(byte*) main::dst#2
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte*) main::src
(byte*) main::src#0
(byte*) main::src#1
(byte*) main::src#2
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@7
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::a#7
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(byte) mul8u::b#2
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) mul8u::return#5
(word) mul8u::return#6
(void()) processChars()
(number~) processChars::$0
(bool~) processChars::$1
(byte*~) processChars::$10
(bool~) processChars::$11
(bool~) processChars::$12
(bool~) processChars::$13
(byte~) processChars::$14
(byte~) processChars::$15
(byte~) processChars::$16
(byte*) processChars::$17
(byte*) processChars::$18
(bool~) processChars::$2
(word*) processChars::$20
(word*) processChars::$21
(word~) processChars::$3
(number~) processChars::$4
(byte*~) processChars::$5
(byte*~) processChars::$6
(word~) processChars::$7
(number~) processChars::$8
(byte*~) processChars::$9
(label) processChars::@1
(label) processChars::@10
(label) processChars::@2
(label) processChars::@3
(label) processChars::@4
(label) processChars::@8
(label) processChars::@9
(label) processChars::@return
(byte) processChars::i
(byte) processChars::i#0
(byte) processChars::i#1
(byte) processChars::i#2
(byte) processChars::i#3
(byte) processChars::i#4
(byte) processChars::i#5
(byte) processChars::i#6
(byte) processChars::i#7
(byte) processChars::i#8
(struct ProcessingChar) processChars::processing
(byte*) processChars::processing_ptr
(byte*) processChars::processing_ptr#0
(byte*) processChars::processing_ptr#1
(byte*) processChars::processing_ptr#2
(byte*) processChars::processing_ptr#3
(byte) processChars::processing_x
(byte) processChars::processing_x#0
(byte) processChars::processing_y
(byte) processChars::processing_y#0
(void()) setupRasterIrq((word) setupRasterIrq::raster , (void()*) setupRasterIrq::irqRoutine)
(bool~) setupRasterIrq::$0
(byte~) setupRasterIrq::$1
(label) setupRasterIrq::@1
(label) setupRasterIrq::@2
(label) setupRasterIrq::@3
(label) setupRasterIrq::@return
(void()*) setupRasterIrq::irqRoutine
(void()*) setupRasterIrq::irqRoutine#0
(void()*) setupRasterIrq::irqRoutine#1
(void()*) setupRasterIrq::irqRoutine#2
(void()*) setupRasterIrq::irqRoutine#3
(void()*) setupRasterIrq::irqRoutine#4
(word) setupRasterIrq::raster
(word) setupRasterIrq::raster#0
(word) setupRasterIrq::raster#1
(word) setupRasterIrq::raster#2
(word) setupRasterIrq::raster#3
(word) setupRasterIrq::raster#4
(void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (word) startProcessing::center_dist)
(number~) startProcessing::$0
(bool~) startProcessing::$1
(word*) startProcessing::$10
(bool~) startProcessing::$2
(bool~) startProcessing::$3
(bool~) startProcessing::$4
(byte~) startProcessing::$5
(byte~) startProcessing::$6
(byte*) startProcessing::$7
(byte*) startProcessing::$8
(word*) startProcessing::$9
(label) startProcessing::@1
(label) startProcessing::@2
(label) startProcessing::@3
(label) startProcessing::@4
(label) startProcessing::@5
(label) startProcessing::@8
(label) startProcessing::@return
(struct ProcessingChar) startProcessing::center
(word) startProcessing::center_dist
(word) startProcessing::center_dist#0
(word) startProcessing::center_dist#1
(word) startProcessing::center_dist#2
(word) startProcessing::center_dist#3
(word) startProcessing::center_dist#4
(word) startProcessing::center_dist#5
(word) startProcessing::center_dist#6
(word) startProcessing::center_dist#7
(byte) startProcessing::center_x
(byte) startProcessing::center_x#0
(byte) startProcessing::center_x#1
(byte) startProcessing::center_x#2
(byte) startProcessing::center_x#3
(byte) startProcessing::center_x#4
(byte) startProcessing::center_x#5
(byte) startProcessing::center_x#6
(byte) startProcessing::center_x#7
(byte) startProcessing::center_y
(byte) startProcessing::center_y#0
(byte) startProcessing::center_y#1
(byte) startProcessing::center_y#2
(byte) startProcessing::center_y#3
(byte) startProcessing::center_y#4
(byte) startProcessing::center_y#5
(byte) startProcessing::center_y#6
(byte) startProcessing::center_y#7
(byte) startProcessing::freeIdx
(byte) startProcessing::freeIdx#0
(byte) startProcessing::freeIdx#1
(byte) startProcessing::freeIdx#2
(byte) startProcessing::freeIdx#3
(byte) startProcessing::freeIdx#4
(byte) startProcessing::freeIdx#5
(byte) startProcessing::freeIdx#6
(byte) startProcessing::i
(byte) startProcessing::i#0
(byte) startProcessing::i#1
(byte) startProcessing::i#2
(byte) startProcessing::i#3
(byte) startProcessing::i#4

Adding number conversion cast (unumber) 7 in (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (number) 7
Adding number conversion cast (unumber) $35 in (byte) PROCPORT_RAM_IO#0 ← (number) $35
Adding number conversion cast (unumber) 1 in (byte) IRQ_RASTER#0 ← (number) 1
Adding number conversion cast (unumber) $7f in (byte) CIA_INTERRUPT_CLEAR#0 ← (number) $7f
Adding number conversion cast (unumber) 1 in (byte) WHITE#0 ← (number) 1
Adding number conversion cast (unumber) 6 in (byte) BLUE#0 ← (number) 6
Adding number conversion cast (unumber) $e in (byte) LIGHT_BLUE#0 ← (number) $e
Adding number conversion cast (unumber) 0 in (word) mul8u::res#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (unumber) $ffff in (word) NOT_FOUND#0 ← (number) $ffff
Adding number conversion cast (unumber) 1 in (number~) main::$3 ← (byte) NUM_PROCESSING#0 - (number) 1
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (byte) NUM_PROCESSING#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) main::$15 + (byte~) main::$14) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) main::$16 + (byte~) main::$14) ← (number) 0
Adding number conversion cast (unumber) $3e8 in (byte*~) main::$5 ← (byte*) SCREEN#0 + (number) $3e8
Adding number conversion cast (unumber) $3e7 in (byte*~) main::$13 ← (byte*) SCREEN#0 + (number) $3e7
Adding number conversion cast (unumber) $10 in (byte) NUM_PROCESSING#0 ← (number) $10
Adding number conversion cast (unumber) $ff in (byte) startProcessing::freeIdx#0 ← (number) $ff
Adding number conversion cast (unumber) 1 in (number~) startProcessing::$0 ← (byte) NUM_PROCESSING#0 - (number) 1
Adding number conversion cast (unumber) startProcessing::$0 in (number~) startProcessing::$0 ← (byte) NUM_PROCESSING#0 - (unumber)(number) 1
Adding number conversion cast (unumber) $ff in (bool~) startProcessing::$4 ← (byte) startProcessing::freeIdx#2 == (number) $ff
Adding number conversion cast (unumber) 1 in (number~) processChars::$0 ← (byte) NUM_PROCESSING#0 - (number) 1
Adding number conversion cast (unumber) processChars::$0 in (number~) processChars::$0 ← (byte) NUM_PROCESSING#0 - (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (number~) processChars::$4 ← (word~) processChars::$3 * (number) $28
Adding number conversion cast (unumber) processChars::$4 in (number~) processChars::$4 ← (word~) processChars::$3 * (unumber)(number) $28
Adding number conversion cast (unumber) $28 in (number~) processChars::$8 ← (word~) processChars::$7 * (number) $28
Adding number conversion cast (unumber) processChars::$8 in (number~) processChars::$8 ← (word~) processChars::$7 * (unumber)(number) $28
Adding number conversion cast (unumber) $14 in (bool~) initSquareTables::$0 ← (byte) initSquareTables::x#2 < (number) $14
Adding number conversion cast (unumber) $14 in (number~) initSquareTables::$3 ← (number) $14 - (byte) initSquareTables::x#3
Adding number conversion cast (unumber) initSquareTables::$3 in (number~) initSquareTables::$3 ← (unumber)(number) $14 - (byte) initSquareTables::x#3
Adding number conversion cast (unumber) initSquareTables::$4 in (number~) initSquareTables::$4 ← (unumber~) initSquareTables::$3
Adding number conversion cast (unumber) $14 in (number~) initSquareTables::$1 ← (byte) initSquareTables::x#4 - (number) $14
Adding number conversion cast (unumber) initSquareTables::$1 in (number~) initSquareTables::$1 ← (byte) initSquareTables::x#4 - (unumber)(number) $14
Adding number conversion cast (unumber) initSquareTables::$2 in (number~) initSquareTables::$2 ← (unumber~) initSquareTables::$1
Adding number conversion cast (unumber) initSquareTables::$5 in (byte) initSquareTables::x#6 ← phi( initSquareTables::@2/(byte) initSquareTables::x#3 initSquareTables::@3/(byte) initSquareTables::x#4 )
  (number~) initSquareTables::$5 ← phi( initSquareTables::@2/(unumber~) initSquareTables::$4 initSquareTables::@3/(unumber~) initSquareTables::$2 )
Adding number conversion cast (unumber) $c in (bool~) initSquareTables::$8 ← (byte) initSquareTables::y#2 < (number) $c
Adding number conversion cast (unumber) $c in (number~) initSquareTables::$11 ← (number) $c - (byte) initSquareTables::y#3
Adding number conversion cast (unumber) initSquareTables::$11 in (number~) initSquareTables::$11 ← (unumber)(number) $c - (byte) initSquareTables::y#3
Adding number conversion cast (unumber) initSquareTables::$12 in (number~) initSquareTables::$12 ← (unumber~) initSquareTables::$11
Adding number conversion cast (unumber) $c in (number~) initSquareTables::$9 ← (byte) initSquareTables::y#4 - (number) $c
Adding number conversion cast (unumber) initSquareTables::$9 in (number~) initSquareTables::$9 ← (byte) initSquareTables::y#4 - (unumber)(number) $c
Adding number conversion cast (unumber) initSquareTables::$10 in (number~) initSquareTables::$10 ← (unumber~) initSquareTables::$9
Adding number conversion cast (unumber) initSquareTables::$13 in (byte) initSquareTables::y#6 ← phi( initSquareTables::@10/(byte) initSquareTables::y#4 initSquareTables::@9/(byte) initSquareTables::y#3 )
  (number~) initSquareTables::$13 ← phi( initSquareTables::@9/(unumber~) initSquareTables::$12 initSquareTables::@10/(unumber~) initSquareTables::$10 )
Adding number conversion cast (unumber) 0 in (byte) getCharToProcess::closest_x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) getCharToProcess::closest_y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#3 + (number) $28
Adding number conversion cast (unumber) $28 in (number~) getCharToProcess::$10 ← (word~) getCharToProcess::$9 * (number) $28
Adding number conversion cast (unumber) getCharToProcess::$10 in (number~) getCharToProcess::$10 ← (word~) getCharToProcess::$9 * (unumber)(number) $28
Adding number conversion cast (unumber) $100 in (bool~) setupRasterIrq::$0 ← (word) setupRasterIrq::raster#1 < (number) $100
Adding number conversion cast (unumber) $7f in *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (number) $7f
Adding number conversion cast (unumber) $80 in *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) | (number) $80
Adding number conversion cast (unumber) $30 in (byte) RASTER_IRQ_TOP#0 ← (number) $30
Adding number conversion cast (unumber) $ff in (byte) RASTER_IRQ_MIDDLE#0 ← (number) $ff
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) PROCPORT_DDR#0 ← (byte*)(number) 0
Inlining cast (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (unumber)(number) 7
Inlining cast (byte*) PROCPORT#0 ← (byte*)(number) 1
Inlining cast (byte) PROCPORT_RAM_IO#0 ← (unumber)(number) $35
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) BGCOL#0 ← (byte*)(number) $d021
Inlining cast (byte*) VIC_CONTROL#0 ← (byte*)(number) $d011
Inlining cast (byte*) IRQ_STATUS#0 ← (byte*)(number) $d019
Inlining cast (byte*) IRQ_ENABLE#0 ← (byte*)(number) $d01a
Inlining cast (byte) IRQ_RASTER#0 ← (unumber)(number) 1
Inlining cast (byte*) COLS#0 ← (byte*)(number) $d800
Inlining cast (byte*) CIA1_INTERRUPT#0 ← (byte*)(number) $dc0d
Inlining cast (byte) CIA_INTERRUPT_CLEAR#0 ← (unumber)(number) $7f
Inlining cast (void()**) HARDWARE_IRQ#0 ← (void()**)(number) $fffe
Inlining cast (byte) WHITE#0 ← (unumber)(number) 1
Inlining cast (byte) BLUE#0 ← (unumber)(number) 6
Inlining cast (byte) LIGHT_BLUE#0 ← (unumber)(number) $e
Inlining cast (word) mul8u::res#0 ← (unumber)(number) 0
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (word) NOT_FOUND#0 ← (unumber)(number) $ffff
Inlining cast *((byte*) main::$15 + (byte~) main::$14) ← (unumber)(number) 0
Inlining cast *((byte*) main::$16 + (byte~) main::$14) ← (unumber)(number) 0
Inlining cast (byte) NUM_PROCESSING#0 ← (unumber)(number) $10
Inlining cast (byte) startProcessing::freeIdx#0 ← (unumber)(number) $ff
Inlining cast (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0
Inlining cast (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0
Inlining cast (byte) getCharToProcess::closest_x#0 ← (unumber)(number) 0
Inlining cast (byte) getCharToProcess::closest_y#0 ← (unumber)(number) 0
Inlining cast (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::closest_y#3
Inlining cast (byte) RASTER_IRQ_TOP#0 ← (unumber)(number) $30
Inlining cast (byte) RASTER_IRQ_MIDDLE#0 ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant pointer cast (byte*) 1
Simplifying constant integer cast $35
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 56333
Simplifying constant integer cast $7f
Simplifying constant pointer cast (void()**) 65534
Simplifying constant integer cast 1
Simplifying constant integer cast 6
Simplifying constant integer cast $e
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $ffff
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e7
Simplifying constant integer cast $10
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $14
Simplifying constant integer cast $14
Simplifying constant integer cast $14
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $100
Simplifying constant integer cast $7f
Simplifying constant integer cast $80
Simplifying constant integer cast $30
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $35
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#4 & (byte) 1
Inferred type updated to byte in (unumber~) main::$3 ← (byte) NUM_PROCESSING#0 - (byte) 1
Inferred type updated to byte in (unumber~) startProcessing::$0 ← (byte) NUM_PROCESSING#0 - (byte) 1
Inferred type updated to byte in (unumber~) processChars::$0 ← (byte) NUM_PROCESSING#0 - (byte) 1
Inferred type updated to word in (unumber~) processChars::$4 ← (word~) processChars::$3 * (byte) $28
Inferred type updated to word in (unumber~) processChars::$8 ← (word~) processChars::$7 * (byte) $28
Inferred type updated to byte in (unumber~) initSquareTables::$3 ← (byte) $14 - (byte) initSquareTables::x#3
Inferred type updated to byte in (unumber~) initSquareTables::$4 ← (byte~) initSquareTables::$3
Inferred type updated to byte in (unumber~) initSquareTables::$1 ← (byte) initSquareTables::x#4 - (byte) $14
Inferred type updated to byte in (unumber~) initSquareTables::$2 ← (byte~) initSquareTables::$1
Inferred type updated to byte for (unumber~) initSquareTables::$5
Inferred type updated to byte in (unumber~) initSquareTables::$11 ← (byte) $c - (byte) initSquareTables::y#3
Inferred type updated to byte in (unumber~) initSquareTables::$12 ← (byte~) initSquareTables::$11
Inferred type updated to byte in (unumber~) initSquareTables::$9 ← (byte) initSquareTables::y#4 - (byte) $c
Inferred type updated to byte in (unumber~) initSquareTables::$10 ← (byte~) initSquareTables::$9
Inferred type updated to byte for (unumber~) initSquareTables::$13
Inferred type updated to word in (unumber~) getCharToProcess::$10 ← (word~) getCharToProcess::$9 * (byte) $28
Inversing boolean not [27] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [26] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [84] (bool~) main::$9 ← (word) main::center_dist#0 != (word) NOT_FOUND#0 from [83] (bool~) main::$8 ← (word) main::center_dist#0 == (word) NOT_FOUND#0
Inversing boolean not [107] (bool~) startProcessing::$2 ← *((word*) startProcessing::$10 + (byte~) startProcessing::$5) != (word) NOT_FOUND#0 from [106] (bool~) startProcessing::$1 ← *((word*) startProcessing::$10 + (byte~) startProcessing::$5) == (word) NOT_FOUND#0
Inversing boolean not [133] (bool~) processChars::$2 ← *((word*) processChars::$20 + (byte~) processChars::$14) == (word) NOT_FOUND#0 from [132] (bool~) processChars::$1 ← *((word*) processChars::$20 + (byte~) processChars::$14) != (word) NOT_FOUND#0
Inversing boolean not [227] (bool~) getCharToProcess::$3 ← *((byte*) getCharToProcess::screen_line#2 + (byte) getCharToProcess::x#2) == (byte) ' ' from [226] (bool~) getCharToProcess::$2 ← *((byte*) getCharToProcess::screen_line#2 + (byte) getCharToProcess::x#2) != (byte) ' '
Inversing boolean not [239] (bool~) getCharToProcess::$6 ← (word) getCharToProcess::dist#0 >= (word) getCharToProcess::closest_dist#2 from [238] (bool~) getCharToProcess::$5 ← (word) getCharToProcess::dist#0 < (word) getCharToProcess::closest_dist#2
Inversing boolean not [252] (bool~) getCharToProcess::$1 ← (word) getCharToProcess::closest_dist#3 == (word) NOT_FOUND#0 from [251] (bool~) getCharToProcess::$0 ← (word) getCharToProcess::closest_dist#3 != (word) NOT_FOUND#0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) mul8u::mb#0 = (byte) mul8u::b#2 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#4 (byte) mul8u::a#7 
Alias (word) mul8u::mb#3 = (word) mul8u::mb#4 (word) mul8u::mb#5 
Alias (word) mul8u::res#2 = (word) mul8u::res#5 (word) mul8u::res#4 (word) mul8u::return#0 (word) mul8u::res#3 (word) mul8u::return#4 (word) mul8u::return#1 
Alias (byte) mul8u::a#0 = (byte~) mul8u::$5 
Alias (word) mul8u::mb#1 = (word~) mul8u::$6 
Alias (word) mul8u::res#1 = (word~) mul8u::$4 
Alias (void()*) setupRasterIrq::irqRoutine#0 = (void()*~) main::$0 
Alias (byte) getCharToProcess::return_x#0 = (byte) getCharToProcess::return_x#3 
Alias (byte) getCharToProcess::return_y#0 = (byte) getCharToProcess::return_y#3 
Alias (word) getCharToProcess::return_dist#0 = (word) getCharToProcess::return_dist#3 
Alias (byte) main::center_x#0 = (byte) main::$7_x (byte) main::center_x#1 
Alias (byte) main::center_y#0 = (byte) main::$7_y (byte) main::center_y#1 
Alias (word) main::center_dist#0 = (word) main::$7_dist (word) main::center_dist#1 
Alias (byte) startProcessing::i#2 = (byte) startProcessing::i#3 (byte) startProcessing::i#4 (byte) startProcessing::freeIdx#1 
Alias (byte) startProcessing::freeIdx#4 = (byte) startProcessing::freeIdx#5 
Alias (byte) startProcessing::center_x#3 = (byte) startProcessing::center_x#5 (byte) startProcessing::center_x#4 
Alias (byte) startProcessing::center_y#3 = (byte) startProcessing::center_y#5 (byte) startProcessing::center_y#4 
Alias (word) startProcessing::center_dist#3 = (word) startProcessing::center_dist#5 (word) startProcessing::center_dist#4 
Alias (byte) startProcessing::freeIdx#2 = (byte) startProcessing::freeIdx#3 
Alias (byte) startProcessing::center_x#1 = (byte) startProcessing::center_x#2 
Alias (byte) startProcessing::center_y#1 = (byte) startProcessing::center_y#2 
Alias (word) startProcessing::center_dist#1 = (word) startProcessing::center_dist#2 
Alias (byte) processChars::i#2 = (byte) processChars::i#4 (byte) processChars::i#5 (byte) processChars::i#8 (byte) processChars::i#7 (byte) processChars::i#6 
Alias (byte*) processChars::processing_ptr#0 = (byte*~) processChars::$10 (byte*) processChars::processing_ptr#1 (byte*) processChars::processing_ptr#2 (byte*) processChars::processing_ptr#3 
Alias (byte) initSquareTables::x#2 = (byte) initSquareTables::x#3 (byte) initSquareTables::x#4 
Alias (byte~) initSquareTables::$4 = (byte~) initSquareTables::$3 
Alias (byte~) initSquareTables::$2 = (byte~) initSquareTables::$1 
Alias (byte) initSquareTables::x_dist#0 = (byte~) initSquareTables::$5 
Alias (word) mul8u::return#2 = (word) mul8u::return#5 
Alias (byte) initSquareTables::x#5 = (byte) initSquareTables::x#6 
Alias (byte) initSquareTables::y#2 = (byte) initSquareTables::y#3 (byte) initSquareTables::y#4 
Alias (byte~) initSquareTables::$12 = (byte~) initSquareTables::$11 
Alias (byte~) initSquareTables::$10 = (byte~) initSquareTables::$9 
Alias (byte) initSquareTables::y_dist#0 = (byte~) initSquareTables::$13 
Alias (word) mul8u::return#3 = (word) mul8u::return#6 
Alias (byte) initSquareTables::y#5 = (byte) initSquareTables::y#6 
Alias (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#4 (byte) getCharToProcess::x#5 (byte) getCharToProcess::closest_x#1 
Alias (byte) getCharToProcess::y#2 = (byte) getCharToProcess::y#5 (byte) getCharToProcess::y#3 (byte) getCharToProcess::closest_y#1 
Alias (word) getCharToProcess::closest_dist#2 = (word) getCharToProcess::closest_dist#5 
Alias (byte*) getCharToProcess::screen_line#2 = (byte*) getCharToProcess::screen_line#6 (byte*) getCharToProcess::screen_line#7 
Alias (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#8 
Alias (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#8 
Alias (word) getCharToProcess::dist#0 = (word~) getCharToProcess::$4 (word) getCharToProcess::dist#1 (word) getCharToProcess::closest_dist#1 
Alias (byte*) getCharToProcess::screen_line#3 = (byte*) getCharToProcess::screen_line#5 
Alias (byte) getCharToProcess::y#4 = (byte) getCharToProcess::y#6 
Alias (word) getCharToProcess::closest_dist#3 = (word) getCharToProcess::closest_dist#6 (word) getCharToProcess::closest_dist#9 (word) getCharToProcess::closest_dist#7 
Alias (byte) getCharToProcess::closest_x#3 = (byte) getCharToProcess::closest_x#5 (byte) getCharToProcess::closest_x#6 (byte) getCharToProcess::closest_x#4 
Alias (byte) getCharToProcess::closest_y#3 = (byte) getCharToProcess::closest_y#5 (byte) getCharToProcess::closest_y#6 (byte) getCharToProcess::closest_y#4 
Alias (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#2 (byte) getCharToProcess::return_x#4 (byte) getCharToProcess::return_x#2 
Alias (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#2 (byte) getCharToProcess::return_y#4 (byte) getCharToProcess::return_y#2 
Alias (word) getCharToProcess::return_dist#1 = (word) getCharToProcess::closest_dist#4 (word) getCharToProcess::return_dist#4 (word) getCharToProcess::return_dist#2 
Alias (word) setupRasterIrq::raster#1 = (word) setupRasterIrq::raster#3 (word) setupRasterIrq::raster#4 
Alias (void()*) setupRasterIrq::irqRoutine#2 = (void()*) setupRasterIrq::irqRoutine#4 (void()*) setupRasterIrq::irqRoutine#3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) (byte) getCharToProcess::x#2
Alias candidate removed (phi-usage) (byte) getCharToProcess::y#2
Alias candidate removed (solo) (byte) getCharToProcess::x#3 = 
Alias candidate removed (solo) (byte) getCharToProcess::y#4 = 
Alias (byte) mul8u::a#3 = (byte) mul8u::a#5 
Alias (word) mul8u::mb#2 = (word) mul8u::mb#3 
Alias (byte) startProcessing::center_x#1 = (byte) startProcessing::center_x#3 
Alias (byte) startProcessing::center_y#1 = (byte) startProcessing::center_y#3 
Alias (word) startProcessing::center_dist#1 = (word) startProcessing::center_dist#3 
Alias (byte) processChars::i#2 = (byte) processChars::i#3 
Alias (byte) initSquareTables::x#2 = (byte) initSquareTables::x#5 
Alias (byte) initSquareTables::y#2 = (byte) initSquareTables::y#5 
Alias (byte*) getCharToProcess::screen_line#2 = (byte*) getCharToProcess::screen_line#3 
Alias (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#3 
Alias (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#3 
Alias (word) getCharToProcess::return_dist#1 = (word) getCharToProcess::closest_dist#3 
Alias (word) setupRasterIrq::raster#1 = (word) setupRasterIrq::raster#2 
Alias (void()*) setupRasterIrq::irqRoutine#1 = (void()*) setupRasterIrq::irqRoutine#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) (byte) getCharToProcess::x#2
Alias candidate removed (phi-usage) (byte) getCharToProcess::y#2
Alias candidate removed (solo) (byte) getCharToProcess::x#3 = 
Alias candidate removed (solo) (byte) getCharToProcess::y#4 = 
Self Phi Eliminated (byte) startProcessing::freeIdx#4
Self Phi Eliminated (byte) startProcessing::center_x#1
Self Phi Eliminated (byte) startProcessing::center_y#1
Self Phi Eliminated (word) startProcessing::center_dist#1
Self Phi Eliminated (byte*) getCharToProcess::screen_line#2
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) startProcessing::center_x#7 (byte) startProcessing::center_x#0
Identical Phi Values (byte) startProcessing::center_y#7 (byte) startProcessing::center_y#0
Identical Phi Values (word) startProcessing::center_dist#7 (word) startProcessing::center_dist#0
Identical Phi Values (byte) startProcessing::freeIdx#4 (byte) startProcessing::freeIdx#6
Identical Phi Values (byte) startProcessing::center_x#1 (byte) startProcessing::center_x#6
Identical Phi Values (byte) startProcessing::center_y#1 (byte) startProcessing::center_y#6
Identical Phi Values (word) startProcessing::center_dist#1 (word) startProcessing::center_dist#6
Identical Phi Values (byte*) getCharToProcess::screen_line#2 (byte*) getCharToProcess::screen_line#4
Identical Phi Values (byte) getCharToProcess::x#3 (byte) getCharToProcess::x#2
Identical Phi Values (byte) getCharToProcess::y#4 (byte) getCharToProcess::y#2
Identical Phi Values (word) setupRasterIrq::raster#1 (word) setupRasterIrq::raster#0
Identical Phi Values (void()*) setupRasterIrq::irqRoutine#1 (void()*) setupRasterIrq::irqRoutine#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) mul8u::$0 [23] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [28] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) main::$4 [57] if((byte) main::i#1!=rangelast(0,main::$3)) goto main::@1
Simple Condition (bool~) main::$6 [70] if((byte*) main::src#1!=(byte*~) main::$5) goto main::@3
Simple Condition (bool~) main::$9 [85] if((word) main::center_dist#0!=(word) NOT_FOUND#0) goto main::@6
Simple Condition (bool~) startProcessing::$2 [108] if(*((word*) startProcessing::$10 + (byte~) startProcessing::$5)!=(word) NOT_FOUND#0) goto startProcessing::@3
Simple Condition (bool~) startProcessing::$3 [112] if((byte) startProcessing::i#1!=rangelast(0,startProcessing::$0)) goto startProcessing::@2
Simple Condition (bool~) startProcessing::$4 [117] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@1
Simple Condition (bool~) processChars::$2 [134] if(*((word*) processChars::$20 + (byte~) processChars::$14)==(word) NOT_FOUND#0) goto processChars::@2
Simple Condition (bool~) processChars::$13 [138] if((byte) processChars::i#1!=rangelast(0,processChars::$0)) goto processChars::@1
Simple Condition (bool~) processChars::$11 [156] if(*((byte*) processChars::processing_ptr#0)==(byte) ' ') goto processChars::@3
Simple Condition (bool~) processChars::$12 [163] if(*((byte*) processChars::processing_ptr#0)>(byte) ' ') goto processChars::@4
Simple Condition (bool~) initSquareTables::$0 [174] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2
Simple Condition (bool~) initSquareTables::$7 [193] if((byte) initSquareTables::x#1!=rangelast(0,$27)) goto initSquareTables::@1
Simple Condition (bool~) initSquareTables::$8 [197] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@9
Simple Condition (bool~) initSquareTables::$15 [216] if((byte) initSquareTables::y#1!=rangelast(0,$18)) goto initSquareTables::@8
Simple Condition (bool~) getCharToProcess::$3 [228] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@5
Simple Condition (bool~) getCharToProcess::$7 [232] if((byte) getCharToProcess::x#1!=rangelast(0,$27)) goto getCharToProcess::@4
Simple Condition (bool~) getCharToProcess::$6 [240] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@5
Simple Condition (bool~) getCharToProcess::$8 [249] if((byte) getCharToProcess::y#1!=rangelast(0,$18)) goto getCharToProcess::@3
Simple Condition (bool~) getCharToProcess::$1 [253] if((word) getCharToProcess::return_dist#1==(word) NOT_FOUND#0) goto getCharToProcess::@1
Simple Condition (bool~) setupRasterIrq::$0 [275] if((word) setupRasterIrq::raster#0<(word) $100) goto setupRasterIrq::@1
Simple Condition (bool~) irqTop::$1 [292] if((byte) irqTop::i#1!=rangelast(0,4)) goto irqTop::@1
Simple Condition (bool~) irqTop::$2 [299] if((byte) irqTop::i1#1!=rangelast(0,7)) goto irqTop::@3
Simple Condition (bool~) irqBottom::$2 [312] if((byte) irqBottom::i#1!=rangelast(0,4)) goto irqBottom::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [43] (byte[$3e8]) SCREEN_COPY#0 ← { fill( $3e8, 0) }
Constant right-side identified [58] (void()*) setupRasterIrq::irqRoutine#0 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
Constant right-side identified [169] (word[$28]) SQUARES_X#0 ← { fill( $28, 0) }
Constant right-side identified [170] (word[$19]) SQUARES_Y#0 ← { fill( $19, 0) }
Constant right-side identified [303] (void()*~) irqTop::$0 ← & interrupt(HARDWARE_ALL)(void()) irqBottom()
Constant right-side identified [319] (void()*~) irqBottom::$1 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) PROCPORT_DDR#0 = (byte*) 0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = (byte*) 1
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) BGCOL#0 = (byte*) 53281
Constant (const byte*) VIC_CONTROL#0 = (byte*) 53265
Constant (const byte*) IRQ_STATUS#0 = (byte*) 53273
Constant (const byte*) IRQ_ENABLE#0 = (byte*) 53274
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte*) COLS#0 = (byte*) 55296
Constant (const byte*) CIA1_INTERRUPT#0 = (byte*) 56333
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const void()**) HARDWARE_IRQ#0 = (void()**) 65534
Constant (const byte) WHITE#0 = 1
Constant (const byte) BLUE#0 = 6
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const word) mul8u::res#0 = 0
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte[$3e8]) SCREEN_COPY#0 = { fill( $3e8, 0) }
Constant (const word) NOT_FOUND#0 = $ffff
Constant (const byte) main::i#0 = 0
Constant (const void()*) setupRasterIrq::irqRoutine#0 = &irqTop
Constant (const byte) NUM_PROCESSING#0 = $10
Constant (const byte) startProcessing::freeIdx#0 = $ff
Constant (const byte) startProcessing::i#0 = 0
Constant (const byte) processChars::i#0 = 0
Constant (const word[$28]) SQUARES_X#0 = { fill( $28, 0) }
Constant (const word[$19]) SQUARES_Y#0 = { fill( $19, 0) }
Constant (const byte) initSquareTables::x#0 = 0
Constant (const byte) initSquareTables::y#0 = 0
Constant (const byte) getCharToProcess::closest_x#0 = 0
Constant (const byte) getCharToProcess::closest_y#0 = 0
Constant (const byte) getCharToProcess::y#0 = 0
Constant (const byte) getCharToProcess::x#0 = 0
Constant (const byte) RASTER_IRQ_TOP#0 = $30
Constant (const byte) irqTop::i#0 = 0
Constant (const byte) irqTop::i1#0 = 0
Constant (const void()*) irqTop::$0 = &irqBottom
Constant (const byte) RASTER_IRQ_MIDDLE#0 = $ff
Constant (const byte) irqBottom::i#0 = 0
Constant (const void()*) irqBottom::$1 = &irqTop
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) setupRasterIrq::raster#0 = RASTER_IRQ_TOP#0
Constant (const byte*) main::src#0 = SCREEN#0
Constant (const byte*) main::dst#0 = SCREEN_COPY#0
Constant (const word) getCharToProcess::closest_dist#0 = NOT_FOUND#0
Constant (const byte*) getCharToProcess::screen_line#0 = SCREEN_COPY#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( NUM_PROCESSING#0, 0) } in [97] (struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 ← { fill( NUM_PROCESSING#0, 0) }
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [91] if(true) goto main::@5
if() condition always true - replacing block destination [94] if(true) goto main::@11
if() condition always true - replacing block destination [275] if((const word) setupRasterIrq::raster#0<(word) $100) goto setupRasterIrq::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [191] initSquareTables::x#1 ← ++ initSquareTables::x#2 to ++
Resolved ranged comparison value [193] if(initSquareTables::x#1!=rangelast(0,$27)) goto initSquareTables::@1 to (number) $28
Resolved ranged next value [214] initSquareTables::y#1 ← ++ initSquareTables::y#2 to ++
Resolved ranged comparison value [216] if(initSquareTables::y#1!=rangelast(0,$18)) goto initSquareTables::@8 to (number) $19
Resolved ranged next value [230] getCharToProcess::x#1 ← ++ getCharToProcess::x#2 to ++
Resolved ranged comparison value [232] if(getCharToProcess::x#1!=rangelast(0,$27)) goto getCharToProcess::@4 to (number) $28
Resolved ranged next value [247] getCharToProcess::y#1 ← ++ getCharToProcess::y#2 to ++
Resolved ranged comparison value [249] if(getCharToProcess::y#1!=rangelast(0,$18)) goto getCharToProcess::@3 to (number) $19
Resolved ranged next value [290] irqTop::i#1 ← ++ irqTop::i#2 to ++
Resolved ranged comparison value [292] if(irqTop::i#1!=rangelast(0,4)) goto irqTop::@1 to (number) 5
Resolved ranged next value [297] irqTop::i1#1 ← ++ irqTop::i1#2 to ++
Resolved ranged comparison value [299] if(irqTop::i1#1!=rangelast(0,7)) goto irqTop::@3 to (number) 8
Resolved ranged next value [310] irqBottom::i#1 ← ++ irqBottom::i#2 to ++
Resolved ranged comparison value [312] if(irqBottom::i#1!=rangelast(0,4)) goto irqBottom::@1 to (number) 5
Converting *(pointer+n) to pointer[n] [149] *((byte*~) processChars::$6) ← (const byte) WHITE#0  -- *(processChars::$5 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [156] if(*((byte*) processChars::processing_ptr#0)==(byte) ' ') goto processChars::@3  -- *(processChars::$9 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [163] if(*((byte*) processChars::processing_ptr#0)>(byte) ' ') goto processChars::@4  -- *(processChars::$9 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [165] *((byte*) processChars::processing_ptr#0) ← -- *((byte*) processChars::processing_ptr#0)  -- *(processChars::$9 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [165] *((byte*) processChars::processing_ptr#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0)  -- *(processChars::$9 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [167] *((byte*) processChars::processing_ptr#0) ← ++ *((byte*) processChars::processing_ptr#0)  -- *(processChars::$9 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [167] *((byte*) processChars::processing_ptr#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0)  -- *(processChars::$9 + processChars::processing_x#0)
Converting *(pointer+n) to pointer[n] [263] *((byte*~) getCharToProcess::$12) ← (byte) ' '  -- *(getCharToProcess::$11 + getCharToProcess::return_x#1)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (byte*)PROCESSING#0 in [49] (byte*) main::$15 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
Simplifying expression containing zero (byte*)PROCESSING#0 in [120] (byte*) startProcessing::$7 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
Simplifying expression containing zero (byte*)PROCESSING#0 in [141] (byte*) processChars::$17 ← (byte*)(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) processChars::$6 and assignment [78] (byte*~) processChars::$6 ← (byte*~) processChars::$5 + (byte) processChars::processing_x#0
Eliminating unused variable (byte*) processChars::processing_ptr#0 and assignment [83] (byte*) processChars::processing_ptr#0 ← (byte*~) processChars::$9 + (byte) processChars::processing_x#0
Eliminating unused variable (byte*~) getCharToProcess::$12 and assignment [138] (byte*~) getCharToProcess::$12 ← (byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1
Eliminating unused constant (const byte) OFFSET_STRUCT_PROCESSINGCHAR_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Removing unused block setupRasterIrq::@3
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $28 in if((byte) initSquareTables::x#1!=(number) $28) goto initSquareTables::@1
Adding number conversion cast (unumber) $19 in if((byte) initSquareTables::y#1!=(number) $19) goto initSquareTables::@8
Adding number conversion cast (unumber) $28 in if((byte) getCharToProcess::x#1!=(number) $28) goto getCharToProcess::@4
Adding number conversion cast (unumber) $19 in if((byte) getCharToProcess::y#1!=(number) $19) goto getCharToProcess::@3
Adding number conversion cast (unumber) 5 in if((byte) irqTop::i#1!=(number) 5) goto irqTop::@1
Adding number conversion cast (unumber) 8 in if((byte) irqTop::i1#1!=(number) 8) goto irqTop::@3
Adding number conversion cast (unumber) 5 in if((byte) irqBottom::i#1!=(number) 5) goto irqBottom::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast 5
Simplifying constant integer cast 8
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (byte) startProcessing::center_x#6
Self Phi Eliminated (byte) startProcessing::center_y#6
Self Phi Eliminated (word) startProcessing::center_dist#6
Self Phi Eliminated (byte) getCharToProcess::y#2
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) startProcessing::center_x#6 (byte) startProcessing::center_x#0
Identical Phi Values (byte) startProcessing::center_y#6 (byte) startProcessing::center_y#0
Identical Phi Values (word) startProcessing::center_dist#6 (word) startProcessing::center_dist#0
Identical Phi Values (byte) getCharToProcess::y#2 (byte) getCharToProcess::y#7
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [10] (byte~) main::$3 ← (const byte) NUM_PROCESSING#0 - (byte) 1
Constant right-side identified [26] (byte*~) main::$5 ← (const byte*) SCREEN#0 + (word) $3e8
Constant right-side identified [41] (byte*~) main::$13 ← (const byte*) SCREEN#0 + (word) $3e7
Constant right-side identified [45] (byte~) startProcessing::$0 ← (const byte) NUM_PROCESSING#0 - (byte) 1
Constant right-side identified [62] (byte~) processChars::$0 ← (const byte) NUM_PROCESSING#0 - (byte) 1
Constant right-side identified [142] (byte~) setupRasterIrq::$1 ← < (const word) setupRasterIrq::raster#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$3 = NUM_PROCESSING#0-1
Constant (const byte*) main::$5 = SCREEN#0+$3e8
Constant (const byte*) main::$13 = SCREEN#0+$3e7
Constant (const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 = { fill( NUM_PROCESSING#0, 0) }
Constant (const byte) startProcessing::$0 = NUM_PROCESSING#0-1
Constant (const byte) processChars::$0 = NUM_PROCESSING#0-1
Constant (const byte) setupRasterIrq::$1 = <setupRasterIrq::raster#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)PROCESSING#0 in [13] (byte*) main::$15 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
Constant value identified (byte*)PROCESSING#0 in [15] (byte*) main::$16 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant value identified (word*)PROCESSING#0 in [17] (word*) main::$17 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant value identified (word*)PROCESSING#0 in [48] (word*) startProcessing::$10 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant value identified (byte*)PROCESSING#0 in [55] (byte*) startProcessing::$7 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
Constant value identified (byte*)PROCESSING#0 in [57] (byte*) startProcessing::$8 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant value identified (word*)PROCESSING#0 in [59] (word*) startProcessing::$9 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant value identified (word*)PROCESSING#0 in [65] (word*) processChars::$20 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant value identified (byte*)PROCESSING#0 in [70] (byte*) processChars::$17 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
Constant value identified (byte*)PROCESSING#0 in [72] (byte*) processChars::$18 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant value identified (word*)PROCESSING#0 in [83] (word*) processChars::$21 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [19] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [20] if(main::i#1!=rangelast(0,main::$3)) goto main::@1 to (const byte) main::$3+(number) 1
Resolved ranged next value [50] startProcessing::i#1 ← ++ startProcessing::i#2 to ++
Resolved ranged comparison value [51] if(startProcessing::i#1!=rangelast(0,startProcessing::$0)) goto startProcessing::@2 to (const byte) startProcessing::$0+(number) 1
Resolved ranged next value [67] processChars::i#1 ← ++ processChars::i#2 to ++
Resolved ranged comparison value [68] if(processChars::i#1!=rangelast(0,processChars::$0)) goto processChars::@1 to (const byte) processChars::$0+(number) 1
Adding number conversion cast (unumber) main::$3+1 in if((byte) main::i#1!=(const byte) main::$3+(number) 1) goto main::@1
Adding number conversion cast (unumber) 1 in if((byte) main::i#1!=(unumber)(const byte) main::$3+(number) 1) goto main::@1
Adding number conversion cast (unumber) startProcessing::$0+1 in if((byte) startProcessing::i#1!=(const byte) startProcessing::$0+(number) 1) goto startProcessing::@2
Adding number conversion cast (unumber) 1 in if((byte) startProcessing::i#1!=(unumber)(const byte) startProcessing::$0+(number) 1) goto startProcessing::@2
Adding number conversion cast (unumber) processChars::$0+1 in if((byte) processChars::i#1!=(const byte) processChars::$0+(number) 1) goto processChars::@1
Adding number conversion cast (unumber) 1 in if((byte) processChars::i#1!=(unumber)(const byte) processChars::$0+(number) 1) goto processChars::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) main::$3+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) startProcessing::$0+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) processChars::$0+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [14] (byte*) main::$16 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant right-side identified [16] (word*) main::$17 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant right-side identified [43] (word*) startProcessing::$10 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant right-side identified [52] (byte*) startProcessing::$8 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant right-side identified [54] (word*) startProcessing::$9 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant right-side identified [59] (word*) processChars::$20 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant right-side identified [66] (byte*) processChars::$18 ← (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant right-side identified [77] (word*) processChars::$21 ← (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$15 = (byte*)PROCESSING#0
Constant (const byte*) main::$16 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant (const word*) main::$17 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant (const word*) startProcessing::$10 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant (const byte*) startProcessing::$7 = (byte*)PROCESSING#0
Constant (const byte*) startProcessing::$8 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant (const word*) startProcessing::$9 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant (const word*) processChars::$20 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant (const byte*) processChars::$17 = (byte*)PROCESSING#0
Constant (const byte*) processChars::$18 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant (const word*) processChars::$21 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGCHAR_DIST
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [11] (byte~) main::$14 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Rewriting multiplication to use shift [39] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Rewriting multiplication to use shift [45] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Rewriting multiplication to use shift [51] (byte~) processChars::$14 ← (byte) processChars::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Rewriting multiplication to use shift [55] (byte~) processChars::$15 ← (byte) processChars::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Rewriting multiplication to use shift and addition[59] (word~) processChars::$4 ← (word~) processChars::$3 * (byte) $28
Rewriting multiplication to use shift and addition[63] (word~) processChars::$8 ← (word~) processChars::$7 * (byte) $28
Rewriting multiplication to use shift [66] (byte~) processChars::$16 ← (byte) processChars::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Rewriting multiplication to use shift [82] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [96] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [107] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [108] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift and addition[116] (word~) getCharToProcess::$10 ← (word~) getCharToProcess::$9 * (byte) $28
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) main::src#0
Inlining constant with var siblings (const byte*) main::dst#0
Inlining constant with var siblings (const byte) startProcessing::freeIdx#0
Inlining constant with var siblings (const byte) startProcessing::i#0
Inlining constant with var siblings (const byte) processChars::i#0
Inlining constant with var siblings (const byte) initSquareTables::x#0
Inlining constant with var siblings (const byte) initSquareTables::y#0
Inlining constant with var siblings (const byte) getCharToProcess::closest_x#0
Inlining constant with var siblings (const byte) getCharToProcess::closest_y#0
Inlining constant with var siblings (const byte) getCharToProcess::y#0
Inlining constant with var siblings (const byte) getCharToProcess::x#0
Inlining constant with var siblings (const word) getCharToProcess::closest_dist#0
Inlining constant with var siblings (const byte*) getCharToProcess::screen_line#0
Inlining constant with var siblings (const byte) irqTop::i#0
Inlining constant with var siblings (const byte) irqTop::i1#0
Inlining constant with var siblings (const byte) irqBottom::i#0
Constant inlined startProcessing::freeIdx#0 = (byte) $ff
Constant inlined irqBottom::$1 = &interrupt(HARDWARE_ALL)(void()) irqTop()
Constant inlined main::$13 = (const byte*) SCREEN#0+(word) $3e7
Constant inlined main::src#0 = (const byte*) SCREEN#0
Constant inlined main::$15 = (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
Constant inlined processChars::$17 = (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
Constant inlined getCharToProcess::x#0 = (byte) 0
Constant inlined processChars::$18 = (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant inlined getCharToProcess::y#0 = (byte) 0
Constant inlined setupRasterIrq::raster#0 = (const byte) RASTER_IRQ_TOP#0
Constant inlined main::$16 = (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant inlined main::$17 = (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant inlined getCharToProcess::closest_y#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Constant inlined getCharToProcess::closest_x#0 = (byte) 0
Constant inlined startProcessing::$10 = (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant inlined startProcessing::$9 = (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant inlined irqTop::$0 = &interrupt(HARDWARE_ALL)(void()) irqBottom()
Constant inlined startProcessing::$7 = (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0
Constant inlined startProcessing::$8 = (byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y
Constant inlined processChars::$20 = (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant inlined processChars::$21 = (word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST
Constant inlined irqTop::i1#0 = (byte) 0
Constant inlined getCharToProcess::screen_line#0 = (const byte[$3e8]) SCREEN_COPY#0
Constant inlined startProcessing::$0 = (const byte) NUM_PROCESSING#0-(byte) 1
Constant inlined irqTop::i#0 = (byte) 0
Constant inlined setupRasterIrq::$1 = <(const byte) RASTER_IRQ_TOP#0
Constant inlined mul8u::res#0 = (byte) 0
Constant inlined startProcessing::i#0 = (byte) 0
Constant inlined irqBottom::i#0 = (byte) 0
Constant inlined main::$5 = (const byte*) SCREEN#0+(word) $3e8
Constant inlined main::dst#0 = (const byte[$3e8]) SCREEN_COPY#0
Constant inlined processChars::i#0 = (byte) 0
Constant inlined main::$3 = (const byte) NUM_PROCESSING#0-(byte) 1
Constant inlined initSquareTables::x#0 = (byte) 0
Constant inlined initSquareTables::y#0 = (byte) 0
Constant inlined getCharToProcess::closest_dist#0 = (const word) NOT_FOUND#0
Constant inlined processChars::$0 = (const byte) NUM_PROCESSING#0-(byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias (word~) processChars::$4 = (word) processChars::$24 
Alias (word~) processChars::$8 = (word) processChars::$27 
Alias (word~) getCharToProcess::$10 = (word) getCharToProcess::$17 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant (const byte) SIZEOF_STRUCT_PROCESSINGCHAR
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting mul8u::@10(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting main::@17(between main::@1 and main::@1)
Added new block during phi lifting main::@18(between main::@3 and main::@3)
Added new block during phi lifting startProcessing::@9(between startProcessing::@4 and startProcessing::@1)
Added new block during phi lifting startProcessing::@10(between startProcessing::@3 and startProcessing::@2)
Added new block during phi lifting startProcessing::@11(between startProcessing::@3 and startProcessing::@4)
Added new block during phi lifting processChars::@13(between processChars::@2 and processChars::@1)
Added new block during phi lifting initSquareTables::@17(between initSquareTables::@15 and initSquareTables::@1)
Added new block during phi lifting initSquareTables::@18(between initSquareTables::@16 and initSquareTables::@8)
Added new block during phi lifting getCharToProcess::@12(between getCharToProcess::@9 and getCharToProcess::@3)
Added new block during phi lifting getCharToProcess::@13(between getCharToProcess::@5 and getCharToProcess::@4)
Added new block during phi lifting getCharToProcess::@14(between getCharToProcess::@4 and getCharToProcess::@5)
Added new block during phi lifting getCharToProcess::@15(between getCharToProcess::@7 and getCharToProcess::@5)
Added new block during phi lifting irqTop::@5(between irqTop::@1 and irqTop::@1)
Added new block during phi lifting irqTop::@6(between irqTop::@3 and irqTop::@3)
Added new block during phi lifting irqBottom::@4(between irqBottom::@1 and irqBottom::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @9
Adding NOP phi() at start of @10
Adding NOP phi() at start of @12
Adding NOP phi() at start of @15
Adding NOP phi() at start of @16
Adding NOP phi() at start of @17
Adding NOP phi() at start of @18
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of startProcessing
Adding NOP phi() at start of getCharToProcess
Adding NOP phi() at start of getCharToProcess::@1
Adding NOP phi() at start of initSquareTables
Adding NOP phi() at start of initSquareTables::@7
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of irqBottom
Adding NOP phi() at start of processChars
Adding NOP phi() at start of irqTop
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to setupRasterIrq:19 initSquareTables:27 getCharToProcess:30 startProcessing:42 
Calls in [initSquareTables] to mul8u:119 mul8u:136 
Calls in [irqBottom] to processChars:184 

Created 32 initial phi equivalence classes
Coalesced [44] main::src#3 ← main::src#1
Coalesced [45] main::dst#3 ← main::dst#1
Coalesced [46] main::i#3 ← main::i#1
Coalesced [52] startProcessing::freeIdx#9 ← startProcessing::i#2
Not coalescing [60] startProcessing::freeIdx#7 ← startProcessing::freeIdx#2
Not coalescing [63] startProcessing::freeIdx#8 ← startProcessing::freeIdx#6
Coalesced [64] startProcessing::i#5 ← startProcessing::i#1
Coalesced [67] getCharToProcess::closest_dist#11 ← getCharToProcess::closest_dist#8
Coalesced [68] getCharToProcess::closest_x#11 ← getCharToProcess::closest_x#9
Coalesced [69] getCharToProcess::closest_y#11 ← getCharToProcess::closest_y#9
Coalesced [76] getCharToProcess::return_dist#7 ← getCharToProcess::dist#0
Not coalescing [77] getCharToProcess::return_x#7 ← getCharToProcess::x#2
Not coalescing [78] getCharToProcess::return_y#7 ← getCharToProcess::y#7
Coalesced [94] getCharToProcess::screen_line#8 ← getCharToProcess::screen_line#1
Coalesced [95] getCharToProcess::y#8 ← getCharToProcess::y#1
Not coalescing [96] getCharToProcess::closest_dist#10 ← getCharToProcess::return_dist#1
Coalesced [97] getCharToProcess::closest_x#10 ← getCharToProcess::return_x#1
Coalesced [98] getCharToProcess::closest_y#10 ← getCharToProcess::return_y#1
Coalesced [99] getCharToProcess::x#6 ← getCharToProcess::x#1
Not coalescing [100] getCharToProcess::closest_dist#12 ← getCharToProcess::return_dist#1
Coalesced (already) [101] getCharToProcess::closest_x#12 ← getCharToProcess::return_x#1
Coalesced (already) [102] getCharToProcess::closest_y#12 ← getCharToProcess::return_y#1
Not coalescing [103] getCharToProcess::return_dist#6 ← getCharToProcess::closest_dist#2
Coalesced (already) [104] getCharToProcess::return_x#6 ← getCharToProcess::closest_x#7
Coalesced (already) [105] getCharToProcess::return_y#6 ← getCharToProcess::closest_y#7
Not coalescing [106] getCharToProcess::return_dist#5 ← getCharToProcess::closest_dist#2
Coalesced (already) [107] getCharToProcess::return_x#5 ← getCharToProcess::closest_x#7
Coalesced (already) [108] getCharToProcess::return_y#5 ← getCharToProcess::closest_y#7
Coalesced [113] initSquareTables::x_dist#2 ← initSquareTables::$2
Coalesced [117] mul8u::mb#7 ← mul8u::b#0
Coalesced [118] mul8u::a#9 ← mul8u::a#1
Coalesced [130] initSquareTables::y_dist#2 ← initSquareTables::$10
Coalesced [134] mul8u::mb#6 ← mul8u::b#1
Coalesced [135] mul8u::a#8 ← mul8u::a#2
Coalesced [144] initSquareTables::y#7 ← initSquareTables::y#1
Coalesced [146] initSquareTables::y_dist#1 ← initSquareTables::$12
Coalesced [147] initSquareTables::x#7 ← initSquareTables::x#1
Coalesced [149] initSquareTables::x_dist#1 ← initSquareTables::$4
Coalesced [151] mul8u::a#10 ← mul8u::a#6
Coalesced [152] mul8u::mb#8 ← mul8u::mb#0
Coalesced [160] mul8u::res#9 ← mul8u::res#1
Coalesced [164] mul8u::a#11 ← mul8u::a#0
Coalesced [165] mul8u::res#7 ← mul8u::res#6
Coalesced [166] mul8u::mb#9 ← mul8u::mb#1
Coalesced (already) [167] mul8u::res#8 ← mul8u::res#2
Coalesced [191] irqBottom::i#3 ← irqBottom::i#1
Coalesced [216] processChars::i#9 ← processChars::i#1
Coalesced [235] irqTop::i1#3 ← irqTop::i1#1
Coalesced [236] irqTop::i#3 ← irqTop::i#1
Coalesced down to 23 phi equivalence classes
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @12
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @18
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@16
Culled Empty Block (label) main::@18
Culled Empty Block (label) main::@17
Culled Empty Block (label) startProcessing::@5
Culled Empty Block (label) startProcessing::@10
Culled Empty Block (label) getCharToProcess::@1
Culled Empty Block (label) initSquareTables::@7
Culled Empty Block (label) initSquareTables::@18
Culled Empty Block (label) initSquareTables::@17
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@10
Culled Empty Block (label) irqBottom::@4
Culled Empty Block (label) processChars::@13
Culled Empty Block (label) irqTop::@6
Culled Empty Block (label) irqTop::@5
Renumbering block @17 to @1
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@7 to mul8u::@4
Renumbering block main::@11 to main::@7
Renumbering block main::@15 to main::@8
Renumbering block startProcessing::@8 to startProcessing::@5
Renumbering block startProcessing::@9 to startProcessing::@6
Renumbering block startProcessing::@11 to startProcessing::@7
Renumbering block processChars::@8 to processChars::@5
Renumbering block processChars::@9 to processChars::@6
Renumbering block processChars::@10 to processChars::@7
Renumbering block initSquareTables::@8 to initSquareTables::@5
Renumbering block initSquareTables::@9 to initSquareTables::@6
Renumbering block initSquareTables::@10 to initSquareTables::@7
Renumbering block initSquareTables::@11 to initSquareTables::@8
Renumbering block initSquareTables::@15 to initSquareTables::@9
Renumbering block initSquareTables::@16 to initSquareTables::@10
Renumbering block getCharToProcess::@3 to getCharToProcess::@1
Renumbering block getCharToProcess::@4 to getCharToProcess::@2
Renumbering block getCharToProcess::@5 to getCharToProcess::@3
Renumbering block getCharToProcess::@7 to getCharToProcess::@4
Renumbering block getCharToProcess::@8 to getCharToProcess::@5
Renumbering block getCharToProcess::@9 to getCharToProcess::@6
Renumbering block getCharToProcess::@10 to getCharToProcess::@7
Renumbering block getCharToProcess::@11 to getCharToProcess::@8
Renumbering block getCharToProcess::@12 to getCharToProcess::@9
Renumbering block getCharToProcess::@13 to getCharToProcess::@10
Renumbering block getCharToProcess::@14 to getCharToProcess::@11
Renumbering block getCharToProcess::@15 to getCharToProcess::@12
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of startProcessing
Adding NOP phi() at start of getCharToProcess
Adding NOP phi() at start of initSquareTables
Adding NOP phi() at start of irqBottom
Adding NOP phi() at start of processChars
Adding NOP phi() at start of irqTop

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2
  [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0
  [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0
  [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call setupRasterIrq 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [14] (byte*) main::dst#2 ← phi( main::@2/(const byte[$3e8]) SCREEN_COPY#0 main::@3/(byte*) main::dst#1 )
  [14] (byte*) main::src#2 ← phi( main::@2/(const byte*) SCREEN#0 main::@3/(byte*) main::src#1 )
  [15] *((byte*) main::dst#2) ← *((byte*) main::src#2)
  [16] (byte*) main::src#1 ← ++ (byte*) main::src#2
  [17] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [19] phi()
  [20] call initSquareTables 
  to:main::@5
main::@5: scope:[main]  from main::@4 main::@6
  [21] phi()
  [22] call getCharToProcess 
  [23] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1
  [24] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1
  [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1
  to:main::@8
main::@8: scope:[main]  from main::@5
  [26] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  [27] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0
  [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0
  [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@7 main::@8
  [30] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7)
  to:main::@7
main::@6: scope:[main]  from main::@8
  [31] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0
  [32] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0
  [34] call startProcessing 
  to:main::@5
startProcessing: scope:[startProcessing]  from main::@6
  [35] phi()
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@6
  [36] (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) $ff startProcessing::@6/(byte~) startProcessing::freeIdx#7 )
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  [37] (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) 0 startProcessing::@3/(byte) startProcessing::i#1 )
  [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2
  [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@2 startProcessing::@7
  [40] (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@7/(byte~) startProcessing::freeIdx#8 startProcessing::@2/(byte) startProcessing::i#2 )
  [41] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@6
  to:startProcessing::@5
startProcessing::@5: scope:[startProcessing]  from startProcessing::@4
  [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2
  [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0
  [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0
  [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@5
  [46] return 
  to:@return
startProcessing::@6: scope:[startProcessing]  from startProcessing::@4
  [47] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2
  to:startProcessing::@1
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  [48] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2
  [49] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2
  to:startProcessing::@7
startProcessing::@7: scope:[startProcessing]  from startProcessing::@3
  [50] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6
  to:startProcessing::@4
getCharToProcess: scope:[getCharToProcess]  from main::@5
  [51] phi()
  to:getCharToProcess::@1
getCharToProcess::@1: scope:[getCharToProcess]  from getCharToProcess getCharToProcess::@9
  [52] (byte) getCharToProcess::closest_y#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_y#1 )
  [52] (byte) getCharToProcess::closest_x#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_x#1 )
  [52] (word) getCharToProcess::closest_dist#8 ← phi( getCharToProcess/(const word) NOT_FOUND#0 getCharToProcess::@9/(word~) getCharToProcess::closest_dist#10 )
  [52] (byte) getCharToProcess::y#7 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::y#1 )
  [52] (byte*) getCharToProcess::screen_line#4 ← phi( getCharToProcess/(const byte[$3e8]) SCREEN_COPY#0 getCharToProcess::@9/(byte*) getCharToProcess::screen_line#1 )
  to:getCharToProcess::@2
getCharToProcess::@2: scope:[getCharToProcess]  from getCharToProcess::@1 getCharToProcess::@10
  [53] (byte) getCharToProcess::closest_y#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_y#9 getCharToProcess::@10/(byte) getCharToProcess::return_y#1 )
  [53] (byte) getCharToProcess::closest_x#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_x#9 getCharToProcess::@10/(byte) getCharToProcess::return_x#1 )
  [53] (word) getCharToProcess::closest_dist#2 ← phi( getCharToProcess::@1/(word) getCharToProcess::closest_dist#8 getCharToProcess::@10/(word~) getCharToProcess::closest_dist#12 )
  [53] (byte) getCharToProcess::x#2 ← phi( getCharToProcess::@1/(byte) 0 getCharToProcess::@10/(byte) getCharToProcess::x#1 )
  [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11
  to:getCharToProcess::@4
getCharToProcess::@4: scope:[getCharToProcess]  from getCharToProcess::@2
  [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1
  [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1
  [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14)
  [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12
  to:getCharToProcess::@5
getCharToProcess::@5: scope:[getCharToProcess]  from getCharToProcess::@4
  [59] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2
  [60] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7
  to:getCharToProcess::@3
getCharToProcess::@3: scope:[getCharToProcess]  from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5
  [61] (byte) getCharToProcess::return_y#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_y#7 getCharToProcess::@12/(byte) getCharToProcess::closest_y#7 getCharToProcess::@5/(byte~) getCharToProcess::return_y#7 )
  [61] (byte) getCharToProcess::return_x#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_x#7 getCharToProcess::@12/(byte) getCharToProcess::closest_x#7 getCharToProcess::@5/(byte~) getCharToProcess::return_x#7 )
  [61] (word) getCharToProcess::return_dist#1 ← phi( getCharToProcess::@11/(word~) getCharToProcess::return_dist#5 getCharToProcess::@12/(word~) getCharToProcess::return_dist#6 getCharToProcess::@5/(word) getCharToProcess::dist#0 )
  [62] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2
  [63] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10
  to:getCharToProcess::@6
getCharToProcess::@6: scope:[getCharToProcess]  from getCharToProcess::@3
  [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28
  [65] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7
  [66] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9
  to:getCharToProcess::@7
getCharToProcess::@7: scope:[getCharToProcess]  from getCharToProcess::@6
  [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return
  to:getCharToProcess::@8
getCharToProcess::@8: scope:[getCharToProcess]  from getCharToProcess::@7
  [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1
  [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2
  [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9
  [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3
  [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10
  [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' '
  to:getCharToProcess::@return
getCharToProcess::@return: scope:[getCharToProcess]  from getCharToProcess::@7 getCharToProcess::@8
  [74] return 
  to:@return
getCharToProcess::@9: scope:[getCharToProcess]  from getCharToProcess::@6
  [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1
  to:getCharToProcess::@1
getCharToProcess::@10: scope:[getCharToProcess]  from getCharToProcess::@3
  [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1
  to:getCharToProcess::@2
getCharToProcess::@12: scope:[getCharToProcess]  from getCharToProcess::@4
  [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
getCharToProcess::@11: scope:[getCharToProcess]  from getCharToProcess::@2
  [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
initSquareTables: scope:[initSquareTables]  from main::@4
  [79] phi()
  to:initSquareTables::@1
initSquareTables::@1: scope:[initSquareTables]  from initSquareTables initSquareTables::@9
  [80] (byte) initSquareTables::x#2 ← phi( initSquareTables/(byte) 0 initSquareTables::@9/(byte) initSquareTables::x#1 )
  [81] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2
  to:initSquareTables::@3
initSquareTables::@3: scope:[initSquareTables]  from initSquareTables::@1
  [82] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14
  to:initSquareTables::@4
initSquareTables::@4: scope:[initSquareTables]  from initSquareTables::@2 initSquareTables::@3
  [83] (byte) initSquareTables::x_dist#0 ← phi( initSquareTables::@2/(byte~) initSquareTables::$4 initSquareTables::@3/(byte~) initSquareTables::$2 )
  [84] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0
  [85] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  [86] call mul8u 
  [87] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:initSquareTables::@9
initSquareTables::@9: scope:[initSquareTables]  from initSquareTables::@4
  [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2
  [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1
  [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6
  [91] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2
  [92] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1
  to:initSquareTables::@5
initSquareTables::@5: scope:[initSquareTables]  from initSquareTables::@10 initSquareTables::@9
  [93] (byte) initSquareTables::y#2 ← phi( initSquareTables::@10/(byte) initSquareTables::y#1 initSquareTables::@9/(byte) 0 )
  [94] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6
  to:initSquareTables::@7
initSquareTables::@7: scope:[initSquareTables]  from initSquareTables::@5
  [95] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c
  to:initSquareTables::@8
initSquareTables::@8: scope:[initSquareTables]  from initSquareTables::@6 initSquareTables::@7
  [96] (byte) initSquareTables::y_dist#0 ← phi( initSquareTables::@6/(byte~) initSquareTables::$12 initSquareTables::@7/(byte~) initSquareTables::$10 )
  [97] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0
  [98] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  [99] call mul8u 
  [100] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:initSquareTables::@10
initSquareTables::@10: scope:[initSquareTables]  from initSquareTables::@8
  [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3
  [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1
  [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14
  [104] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2
  [105] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5
  to:initSquareTables::@return
initSquareTables::@return: scope:[initSquareTables]  from initSquareTables::@10
  [106] return 
  to:@return
initSquareTables::@6: scope:[initSquareTables]  from initSquareTables::@5
  [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2
  to:initSquareTables::@8
initSquareTables::@2: scope:[initSquareTables]  from initSquareTables::@1
  [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2
  to:initSquareTables::@4
mul8u: scope:[mul8u]  from initSquareTables::@4 initSquareTables::@8
  [109] (byte) mul8u::a#6 ← phi( initSquareTables::@8/(byte) mul8u::a#2 initSquareTables::@4/(byte) mul8u::a#1 )
  [109] (word) mul8u::mb#0 ← phi( initSquareTables::@8/(byte) mul8u::b#1 initSquareTables::@4/(byte) mul8u::b#0 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [110] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [110] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [110] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [111] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [112] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [113] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [114] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [116] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [117] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [118] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
setupRasterIrq: scope:[setupRasterIrq]  from main::@2
  asm { sei  }
  [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  to:setupRasterIrq::@1
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1
  [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0
  [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  [128] return 
  to:@return
irqBottom: scope:[irqBottom]  from
  [129] phi()
  to:irqBottom::@1
irqBottom::@1: scope:[irqBottom]  from irqBottom irqBottom::@1
  [130] (byte) irqBottom::i#2 ← phi( irqBottom/(byte) 0 irqBottom::@1/(byte) irqBottom::i#1 )
  [131] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2
  [132] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1
  to:irqBottom::@2
irqBottom::@2: scope:[irqBottom]  from irqBottom::@1
  [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  [135] call processChars 
  to:irqBottom::@3
irqBottom::@3: scope:[irqBottom]  from irqBottom::@2
  [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0
  [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop()
  [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@return: scope:[irqBottom]  from irqBottom::@3
  [141] return 
  to:@return
processChars: scope:[processChars]  from irqBottom::@2
  [142] phi()
  to:processChars::@1
processChars::@1: scope:[processChars]  from processChars processChars::@2
  [143] (byte) processChars::i#2 ← phi( processChars/(byte) 0 processChars::@2/(byte) processChars::i#1 )
  [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2
  [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2
  to:processChars::@5
processChars::@5: scope:[processChars]  from processChars::@1
  [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2
  [147] (byte) processChars::processing_x#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$15)
  [148] (byte) processChars::processing_y#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) processChars::$15)
  [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0
  [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2
  [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3
  [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3
  [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4
  [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0
  [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0
  [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2
  [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7
  [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3
  [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8
  [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3
  to:processChars::@6
processChars::@6: scope:[processChars]  from processChars::@5
  [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4
  to:processChars::@7
processChars::@7: scope:[processChars]  from processChars::@6
  [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0)
  to:processChars::@2
processChars::@2: scope:[processChars]  from processChars::@1 processChars::@3 processChars::@4 processChars::@7
  [163] (byte) processChars::i#1 ← ++ (byte) processChars::i#2
  [164] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1
  to:processChars::@return
processChars::@return: scope:[processChars]  from processChars::@2
  [165] return 
  to:@return
processChars::@4: scope:[processChars]  from processChars::@6
  [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0)
  to:processChars::@2
processChars::@3: scope:[processChars]  from processChars::@5
  [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2
  [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0
  to:processChars::@2
irqTop: scope:[irqTop]  from
  [169] phi()
  to:irqTop::@1
irqTop::@1: scope:[irqTop]  from irqTop irqTop::@1
  [170] (byte) irqTop::i#2 ← phi( irqTop/(byte) 0 irqTop::@1/(byte) irqTop::i#1 )
  [171] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2
  [172] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1
  to:irqTop::@2
irqTop::@2: scope:[irqTop]  from irqTop::@1
  [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  to:irqTop::@3
irqTop::@3: scope:[irqTop]  from irqTop::@2 irqTop::@3
  [175] (byte) irqTop::i1#2 ← phi( irqTop::@2/(byte) 0 irqTop::@3/(byte) irqTop::i1#1 )
  [176] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2
  [177] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@3
  to:irqTop::@4
irqTop::@4: scope:[irqTop]  from irqTop::@3
  [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0
  [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom()
  [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@return: scope:[irqTop]  from irqTop::@4
  [183] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte) BLUE
(byte*) BORDERCOL
(byte*) CIA1_INTERRUPT
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(void()**) HARDWARE_IRQ
(byte*) IRQ_ENABLE
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(byte) LIGHT_BLUE
(word) NOT_FOUND
(byte) NUM_PROCESSING
(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_IO
(word) ProcessingChar::dist
(byte) ProcessingChar::x
(byte) ProcessingChar::y
(byte*) RASTER
(byte) RASTER_IRQ_MIDDLE
(byte) RASTER_IRQ_TOP
(byte*) SCREEN
(byte[$3e8]) SCREEN_COPY
(word[$28]) SQUARES_X
(word[$19]) SQUARES_Y
(byte*) VIC_CONTROL
(byte) WHITE
(struct ProcessingChar()) getCharToProcess()
(word~) getCharToProcess::$10 4.0
(byte*~) getCharToProcess::$11 4.0
(byte~) getCharToProcess::$13 1001.0
(byte~) getCharToProcess::$14 2002.0
(word) getCharToProcess::$15 4.0
(word) getCharToProcess::$16 4.0
(word~) getCharToProcess::$9 3.0
(struct ProcessingChar) getCharToProcess::closest
(word) getCharToProcess::closest_dist
(word~) getCharToProcess::closest_dist#10 202.0
(word~) getCharToProcess::closest_dist#12 2002.0
(word) getCharToProcess::closest_dist#2 684.1666666666667
(word) getCharToProcess::closest_dist#8 202.0
(byte) getCharToProcess::closest_x
(byte) getCharToProcess::closest_x#7 388.0
(byte) getCharToProcess::closest_x#9 202.0
(byte) getCharToProcess::closest_y
(byte) getCharToProcess::closest_y#7 388.0
(byte) getCharToProcess::closest_y#9 202.0
(word) getCharToProcess::dist
(word) getCharToProcess::dist#0 750.75
(struct ProcessingChar) getCharToProcess::return
(word) getCharToProcess::return_dist
(word) getCharToProcess::return_dist#0 7.333333333333333
(word) getCharToProcess::return_dist#1 242.23529411764704
(word~) getCharToProcess::return_dist#5 2002.0
(word~) getCharToProcess::return_dist#6 2002.0
(byte) getCharToProcess::return_x
(byte) getCharToProcess::return_x#0 7.333333333333333
(byte) getCharToProcess::return_x#1 242.23529411764704
(byte~) getCharToProcess::return_x#7 1001.0
(byte) getCharToProcess::return_y
(byte) getCharToProcess::return_y#0 7.333333333333333
(byte) getCharToProcess::return_y#1 228.66666666666669
(byte~) getCharToProcess::return_y#7 2002.0
(byte*) getCharToProcess::screen_line
(byte*) getCharToProcess::screen_line#1 50.5
(byte*) getCharToProcess::screen_line#4 80.2
(byte) getCharToProcess::x
(byte) getCharToProcess::x#1 1001.0
(byte) getCharToProcess::x#2 455.0
(byte) getCharToProcess::y
(byte) getCharToProcess::y#1 101.0
(byte) getCharToProcess::y#7 137.75
(void()) initSquareTables()
(byte~) initSquareTables::$10 22.0
(byte~) initSquareTables::$12 22.0
(word~) initSquareTables::$14 11.0
(byte~) initSquareTables::$16 22.0
(byte~) initSquareTables::$17 22.0
(byte~) initSquareTables::$2 22.0
(byte~) initSquareTables::$4 22.0
(word~) initSquareTables::$6 11.0
(byte) initSquareTables::x
(byte) initSquareTables::x#1 16.5
(byte) initSquareTables::x#2 5.5
(byte) initSquareTables::x_dist
(byte) initSquareTables::x_dist#0 22.0
(byte) initSquareTables::y
(byte) initSquareTables::y#1 16.5
(byte) initSquareTables::y#2 5.5
(byte) initSquareTables::y_dist
(byte) initSquareTables::y_dist#0 22.0
interrupt(HARDWARE_ALL)(void()) irqBottom()
(byte) irqBottom::i
(byte) irqBottom::i#1 16.5
(byte) irqBottom::i#2 22.0
interrupt(HARDWARE_ALL)(void()) irqTop()
(byte) irqTop::i
(byte) irqTop::i#1 16.5
(byte) irqTop::i#2 22.0
(byte) irqTop::i1
(byte) irqTop::i1#1 16.5
(byte) irqTop::i1#2 22.0
(void()) main()
(byte~) main::$14 14.666666666666666
(struct ProcessingChar~) main::$7
(struct ProcessingChar) main::center
(word) main::center_dist
(word) main::center_dist#0 8.25
(byte) main::center_x
(byte) main::center_x#0 5.5
(byte) main::center_y
(byte) main::center_y#0 5.5
(byte*) main::dst
(byte*) main::dst#1 11.0
(byte*) main::dst#2 11.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 6.6000000000000005
(byte*) main::src
(byte*) main::src#1 11.0
(byte*) main::src#2 16.5
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 202.0
(byte) mul8u::a
(byte) mul8u::a#0 101.0
(byte) mul8u::a#1 11.0
(byte) mul8u::a#2 11.0
(byte) mul8u::a#3 67.66666666666666
(byte) mul8u::a#6 24.0
(byte) mul8u::b
(byte) mul8u::b#0 22.0
(byte) mul8u::b#1 22.0
(word) mul8u::mb
(word) mul8u::mb#0 24.0
(word) mul8u::mb#1 202.0
(word) mul8u::mb#2 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 202.0
(word) mul8u::res#2 46.42857142857143
(word) mul8u::res#6 101.0
(word) mul8u::return
(word) mul8u::return#2 22.0
(word) mul8u::return#3 22.0
(void()) processChars()
(byte~) processChars::$14 22.0
(byte~) processChars::$15 16.5
(byte~) processChars::$16 22.0
(word) processChars::$22 22.0
(word) processChars::$23 22.0
(word) processChars::$25 22.0
(word) processChars::$26 22.0
(word~) processChars::$3 16.5
(word~) processChars::$4 22.0
(byte*~) processChars::$5 22.0
(word~) processChars::$7 16.5
(word~) processChars::$8 22.0
(byte*~) processChars::$9 25.666666666666668
(byte) processChars::i
(byte) processChars::i#1 16.5
(byte) processChars::i#2 2.391304347826087
(struct ProcessingChar) processChars::processing
(byte*) processChars::processing_ptr
(byte) processChars::processing_x
(byte) processChars::processing_x#0 5.866666666666666
(byte) processChars::processing_y
(byte) processChars::processing_y#0 1.5714285714285714
(void()) setupRasterIrq((word) setupRasterIrq::raster , (void()*) setupRasterIrq::irqRoutine)
(void()*) setupRasterIrq::irqRoutine
(word) setupRasterIrq::raster
(void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (word) startProcessing::center_dist)
(byte~) startProcessing::$5 2002.0
(byte~) startProcessing::$6 2.6666666666666665
(struct ProcessingChar) startProcessing::center
(word) startProcessing::center_dist
(word) startProcessing::center_dist#0 0.8666666666666666
(byte) startProcessing::center_x
(byte) startProcessing::center_x#0 0.8666666666666666
(byte) startProcessing::center_y
(byte) startProcessing::center_y#0 0.8666666666666666
(byte) startProcessing::freeIdx
(byte) startProcessing::freeIdx#2 653.0
(byte) startProcessing::freeIdx#6 33.666666666666664
(byte~) startProcessing::freeIdx#7 202.0
(byte~) startProcessing::freeIdx#8 202.0
(byte) startProcessing::i
(byte) startProcessing::i#1 1501.5
(byte) startProcessing::i#2 1334.6666666666667

Not consolidating phi with different size mul8u::mb#0 mul8u::b#1
Not consolidating phi with different size mul8u::mb#0 mul8u::b#0
Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::src#2 main::src#1 ]
[ main::dst#2 main::dst#1 ]
[ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
[ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
[ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ]
[ getCharToProcess::y#7 getCharToProcess::y#1 ]
[ getCharToProcess::x#2 getCharToProcess::x#1 ]
[ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
[ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
[ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
[ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
[ initSquareTables::x#2 initSquareTables::x#1 ]
[ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ]
[ initSquareTables::y#2 initSquareTables::y#1 ]
[ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ]
[ mul8u::b#1 ]
[ mul8u::b#0 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ irqBottom::i#2 irqBottom::i#1 ]
[ processChars::i#2 processChars::i#1 ]
[ irqTop::i#2 irqTop::i#1 ]
[ irqTop::i1#2 irqTop::i1#1 ]
Added variable main::$14 to zero page equivalence class [ main::$14 ]
Added variable getCharToProcess::return_x#0 to zero page equivalence class [ getCharToProcess::return_x#0 ]
Added variable getCharToProcess::return_y#0 to zero page equivalence class [ getCharToProcess::return_y#0 ]
Added variable getCharToProcess::return_dist#0 to zero page equivalence class [ getCharToProcess::return_dist#0 ]
Added variable main::center_x#0 to zero page equivalence class [ main::center_x#0 ]
Added variable main::center_y#0 to zero page equivalence class [ main::center_y#0 ]
Added variable main::center_dist#0 to zero page equivalence class [ main::center_dist#0 ]
Added variable startProcessing::center_x#0 to zero page equivalence class [ startProcessing::center_x#0 ]
Added variable startProcessing::center_y#0 to zero page equivalence class [ startProcessing::center_y#0 ]
Added variable startProcessing::center_dist#0 to zero page equivalence class [ startProcessing::center_dist#0 ]
Added variable startProcessing::$5 to zero page equivalence class [ startProcessing::$5 ]
Added variable startProcessing::$6 to zero page equivalence class [ startProcessing::$6 ]
Added variable getCharToProcess::$13 to zero page equivalence class [ getCharToProcess::$13 ]
Added variable getCharToProcess::$14 to zero page equivalence class [ getCharToProcess::$14 ]
Added variable getCharToProcess::$9 to zero page equivalence class [ getCharToProcess::$9 ]
Added variable getCharToProcess::$15 to zero page equivalence class [ getCharToProcess::$15 ]
Added variable getCharToProcess::$16 to zero page equivalence class [ getCharToProcess::$16 ]
Added variable getCharToProcess::$10 to zero page equivalence class [ getCharToProcess::$10 ]
Added variable getCharToProcess::$11 to zero page equivalence class [ getCharToProcess::$11 ]
Added variable mul8u::return#2 to zero page equivalence class [ mul8u::return#2 ]
Added variable initSquareTables::$6 to zero page equivalence class [ initSquareTables::$6 ]
Added variable initSquareTables::$16 to zero page equivalence class [ initSquareTables::$16 ]
Added variable mul8u::return#3 to zero page equivalence class [ mul8u::return#3 ]
Added variable initSquareTables::$14 to zero page equivalence class [ initSquareTables::$14 ]
Added variable initSquareTables::$17 to zero page equivalence class [ initSquareTables::$17 ]
Added variable mul8u::$1 to zero page equivalence class [ mul8u::$1 ]
Added variable processChars::$14 to zero page equivalence class [ processChars::$14 ]
Added variable processChars::$15 to zero page equivalence class [ processChars::$15 ]
Added variable processChars::processing_x#0 to zero page equivalence class [ processChars::processing_x#0 ]
Added variable processChars::processing_y#0 to zero page equivalence class [ processChars::processing_y#0 ]
Added variable processChars::$3 to zero page equivalence class [ processChars::$3 ]
Added variable processChars::$22 to zero page equivalence class [ processChars::$22 ]
Added variable processChars::$23 to zero page equivalence class [ processChars::$23 ]
Added variable processChars::$4 to zero page equivalence class [ processChars::$4 ]
Added variable processChars::$5 to zero page equivalence class [ processChars::$5 ]
Added variable processChars::$7 to zero page equivalence class [ processChars::$7 ]
Added variable processChars::$25 to zero page equivalence class [ processChars::$25 ]
Added variable processChars::$26 to zero page equivalence class [ processChars::$26 ]
Added variable processChars::$8 to zero page equivalence class [ processChars::$8 ]
Added variable processChars::$9 to zero page equivalence class [ processChars::$9 ]
Added variable processChars::$16 to zero page equivalence class [ processChars::$16 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::src#2 main::src#1 ]
[ main::dst#2 main::dst#1 ]
[ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
[ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
[ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ]
[ getCharToProcess::y#7 getCharToProcess::y#1 ]
[ getCharToProcess::x#2 getCharToProcess::x#1 ]
[ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
[ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
[ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
[ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
[ initSquareTables::x#2 initSquareTables::x#1 ]
[ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ]
[ initSquareTables::y#2 initSquareTables::y#1 ]
[ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ]
[ mul8u::b#1 ]
[ mul8u::b#0 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ irqBottom::i#2 irqBottom::i#1 ]
[ processChars::i#2 processChars::i#1 ]
[ irqTop::i#2 irqTop::i#1 ]
[ irqTop::i1#2 irqTop::i1#1 ]
[ main::$14 ]
[ getCharToProcess::return_x#0 ]
[ getCharToProcess::return_y#0 ]
[ getCharToProcess::return_dist#0 ]
[ main::center_x#0 ]
[ main::center_y#0 ]
[ main::center_dist#0 ]
[ startProcessing::center_x#0 ]
[ startProcessing::center_y#0 ]
[ startProcessing::center_dist#0 ]
[ startProcessing::$5 ]
[ startProcessing::$6 ]
[ getCharToProcess::$13 ]
[ getCharToProcess::$14 ]
[ getCharToProcess::$9 ]
[ getCharToProcess::$15 ]
[ getCharToProcess::$16 ]
[ getCharToProcess::$10 ]
[ getCharToProcess::$11 ]
[ mul8u::return#2 ]
[ initSquareTables::$6 ]
[ initSquareTables::$16 ]
[ mul8u::return#3 ]
[ initSquareTables::$14 ]
[ initSquareTables::$17 ]
[ mul8u::$1 ]
[ processChars::$14 ]
[ processChars::$15 ]
[ processChars::processing_x#0 ]
[ processChars::processing_y#0 ]
[ processChars::$3 ]
[ processChars::$22 ]
[ processChars::$23 ]
[ processChars::$4 ]
[ processChars::$5 ]
[ processChars::$7 ]
[ processChars::$25 ]
[ processChars::$26 ]
[ processChars::$8 ]
[ processChars::$9 ]
[ processChars::$16 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ main::src#2 main::src#1 ]
Allocated zp ZP_WORD:5 [ main::dst#2 main::dst#1 ]
Allocated zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Allocated zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Allocated zp ZP_WORD:9 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ]
Allocated zp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Allocated zp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Allocated zp ZP_WORD:13 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
Allocated zp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Allocated zp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Allocated zp ZP_WORD:17 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
Allocated zp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ]
Allocated zp ZP_BYTE:20 [ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ]
Allocated zp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ]
Allocated zp ZP_BYTE:22 [ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ]
Allocated zp ZP_BYTE:23 [ mul8u::b#1 ]
Allocated zp ZP_BYTE:24 [ mul8u::b#0 ]
Allocated zp ZP_BYTE:25 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp ZP_BYTE:30 [ irqBottom::i#2 irqBottom::i#1 ]
Allocated zp ZP_BYTE:31 [ processChars::i#2 processChars::i#1 ]
Allocated zp ZP_BYTE:32 [ irqTop::i#2 irqTop::i#1 ]
Allocated zp ZP_BYTE:33 [ irqTop::i1#2 irqTop::i1#1 ]
Allocated zp ZP_BYTE:34 [ main::$14 ]
Allocated zp ZP_BYTE:35 [ getCharToProcess::return_x#0 ]
Allocated zp ZP_BYTE:36 [ getCharToProcess::return_y#0 ]
Allocated zp ZP_WORD:37 [ getCharToProcess::return_dist#0 ]
Allocated zp ZP_BYTE:39 [ main::center_x#0 ]
Allocated zp ZP_BYTE:40 [ main::center_y#0 ]
Allocated zp ZP_WORD:41 [ main::center_dist#0 ]
Allocated zp ZP_BYTE:43 [ startProcessing::center_x#0 ]
Allocated zp ZP_BYTE:44 [ startProcessing::center_y#0 ]
Allocated zp ZP_WORD:45 [ startProcessing::center_dist#0 ]
Allocated zp ZP_BYTE:47 [ startProcessing::$5 ]
Allocated zp ZP_BYTE:48 [ startProcessing::$6 ]
Allocated zp ZP_BYTE:49 [ getCharToProcess::$13 ]
Allocated zp ZP_BYTE:50 [ getCharToProcess::$14 ]
Allocated zp ZP_WORD:51 [ getCharToProcess::$9 ]
Allocated zp ZP_WORD:53 [ getCharToProcess::$15 ]
Allocated zp ZP_WORD:55 [ getCharToProcess::$16 ]
Allocated zp ZP_WORD:57 [ getCharToProcess::$10 ]
Allocated zp ZP_WORD:59 [ getCharToProcess::$11 ]
Allocated zp ZP_WORD:61 [ mul8u::return#2 ]
Allocated zp ZP_WORD:63 [ initSquareTables::$6 ]
Allocated zp ZP_BYTE:65 [ initSquareTables::$16 ]
Allocated zp ZP_WORD:66 [ mul8u::return#3 ]
Allocated zp ZP_WORD:68 [ initSquareTables::$14 ]
Allocated zp ZP_BYTE:70 [ initSquareTables::$17 ]
Allocated zp ZP_BYTE:71 [ mul8u::$1 ]
Allocated zp ZP_BYTE:72 [ processChars::$14 ]
Allocated zp ZP_BYTE:73 [ processChars::$15 ]
Allocated zp ZP_BYTE:74 [ processChars::processing_x#0 ]
Allocated zp ZP_BYTE:75 [ processChars::processing_y#0 ]
Allocated zp ZP_WORD:76 [ processChars::$3 ]
Allocated zp ZP_WORD:78 [ processChars::$22 ]
Allocated zp ZP_WORD:80 [ processChars::$23 ]
Allocated zp ZP_WORD:82 [ processChars::$4 ]
Allocated zp ZP_WORD:84 [ processChars::$5 ]
Allocated zp ZP_WORD:86 [ processChars::$7 ]
Allocated zp ZP_WORD:88 [ processChars::$25 ]
Allocated zp ZP_WORD:90 [ processChars::$26 ]
Allocated zp ZP_WORD:92 [ processChars::$8 ]
Allocated zp ZP_WORD:94 [ processChars::$9 ]
Allocated zp ZP_BYTE:96 [ processChars::$16 ]

INITIAL ASM
//SEG0 File Comments
// Black Hole at the center of the BASIC screen sucking in any letters
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const OFFSET_STRUCT_PROCESSINGCHAR_Y = 1
  .const OFFSET_STRUCT_PROCESSINGCHAR_DIST = 2
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .const WHITE = 1
  .const BLUE = 6
  .const LIGHT_BLUE = $e
  .label SCREEN = $400
  // Distance value meaning not found
  .const NOT_FOUND = $ffff
  .const NUM_PROCESSING = $10
  .const RASTER_IRQ_TOP = $30
  .const RASTER_IRQ_MIDDLE = $ff
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _14 = $22
    .label i = 2
    .label src = 3
    .label dst = 5
    .label center_x = $27
    .label center_y = $28
    .label center_dist = $29
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // Init processing array
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda i
    asl
    asl
    sta _14
  //SEG17 [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy _14
    sta PROCESSING,y
  //SEG18 [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy _14
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,y
  //SEG19 [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0 -- pwuc1_derefidx_vbuz1=vwuc2 
    ldy _14
    lda #<NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    lda #>NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
  //SEG20 [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG21 [11] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b1_from_b1
  //SEG22 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [13] call setupRasterIrq 
    jsr setupRasterIrq
  //SEG25 [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG26 [14] phi (byte*) main::dst#2 = (const byte[$3e8]) SCREEN_COPY#0 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN_COPY
    sta dst
    lda #>SCREEN_COPY
    sta dst+1
  //SEG27 [14] phi (byte*) main::src#2 = (const byte*) SCREEN#0 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta src
    lda #>SCREEN
    sta src+1
    jmp b3
  // Copy screen to screen copy
  //SEG28 [14] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG29 [14] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG30 [14] phi (byte*) main::src#2 = (byte*) main::src#1 [phi:main::@3->main::@3#1] -- register_copy 
    jmp b3
  //SEG31 main::@3
  b3:
  //SEG32 [15] *((byte*) main::dst#2) ← *((byte*) main::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
  //SEG33 [16] (byte*) main::src#1 ← ++ (byte*) main::src#2 -- pbuz1=_inc_pbuz1 
    inc src
    bne !+
    inc src+1
  !:
  //SEG34 [17] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
  //SEG35 [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda src+1
    cmp #>SCREEN+$3e8
    bne b3_from_b3
    lda src
    cmp #<SCREEN+$3e8
    bne b3_from_b3
  //SEG36 [19] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG37 main::@4
  b4:
  //SEG38 [20] call initSquareTables 
  //SEG39 [79] phi from main::@4 to initSquareTables [phi:main::@4->initSquareTables]
  initSquareTables_from_b4:
    jsr initSquareTables
  //SEG40 [21] phi from main::@4 main::@6 to main::@5 [phi:main::@4/main::@6->main::@5]
  b5_from_b4:
  b5_from_b6:
    jmp b5
  // Main loop
  //SEG41 main::@5
  b5:
  //SEG42 [22] call getCharToProcess 
  //SEG43 [51] phi from main::@5 to getCharToProcess [phi:main::@5->getCharToProcess]
  getCharToProcess_from_b5:
    jsr getCharToProcess
  //SEG44 [23] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1 -- vbuz1=vbuz2 
    lda getCharToProcess.return_x_1
    sta getCharToProcess.return_x
  //SEG45 [24] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1 -- vbuz1=vbuz2 
    lda getCharToProcess.return_y_1
    sta getCharToProcess.return_y
  //SEG46 [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda getCharToProcess.return_dist_1
    sta getCharToProcess.return_dist
    lda getCharToProcess.return_dist_1+1
    sta getCharToProcess.return_dist+1
    jmp b8
  //SEG47 main::@8
  b8:
  //SEG48 [26] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0 -- vbuz1=vbuz2 
    lda getCharToProcess.return_x
    sta center_x
  //SEG49 [27] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0 -- vbuz1=vbuz2 
    lda getCharToProcess.return_y
    sta center_y
  //SEG50 [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0 -- vwuz1=vwuz2 
    lda getCharToProcess.return_dist
    sta center_dist
    lda getCharToProcess.return_dist+1
    sta center_dist+1
  //SEG51 [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda center_dist+1
    cmp #>NOT_FOUND
    bne b6
    lda center_dist
    cmp #<NOT_FOUND
    bne b6
    jmp b7
  //SEG52 main::@7
  b7:
  //SEG53 [30] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp b7
  //SEG54 main::@6
  b6:
  //SEG55 [31] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0 -- vbuz1=vbuz2 
    lda center_x
    sta startProcessing.center_x
  //SEG56 [32] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0 -- vbuz1=vbuz2 
    lda center_y
    sta startProcessing.center_y
  //SEG57 [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0 -- vwuz1=vwuz2 
    lda center_dist
    sta startProcessing.center_dist
    lda center_dist+1
    sta startProcessing.center_dist+1
  //SEG58 [34] call startProcessing 
  //SEG59 [35] phi from main::@6 to startProcessing [phi:main::@6->startProcessing]
  startProcessing_from_b6:
    jsr startProcessing
    jmp b5_from_b6
}
//SEG60 startProcessing
// Start processing a char - by inserting it into the PROCESSING array
// startProcessing(byte zeropage($2b) center_x, byte zeropage($2c) center_y, word zeropage($2d) center_dist)
startProcessing: {
    .label _5 = $2f
    .label _6 = $30
    .label center_x = $2b
    .label center_y = $2c
    .label center_dist = $2d
    .label i = 8
    .label freeIdx = 8
    .label freeIdx_6 = 7
    .label freeIdx_7 = 7
  //SEG61 [36] phi from startProcessing to startProcessing::@1 [phi:startProcessing->startProcessing::@1]
  b1_from_startProcessing:
  //SEG62 [36] phi (byte) startProcessing::freeIdx#6 = (byte) $ff [phi:startProcessing->startProcessing::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta freeIdx_6
    jmp b1
  //SEG63 startProcessing::@1
  b1:
  //SEG64 [37] phi from startProcessing::@1 to startProcessing::@2 [phi:startProcessing::@1->startProcessing::@2]
  b2_from_b1:
  //SEG65 [37] phi (byte) startProcessing::i#2 = (byte) 0 [phi:startProcessing::@1->startProcessing::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG66 [37] phi from startProcessing::@3 to startProcessing::@2 [phi:startProcessing::@3->startProcessing::@2]
  b2_from_b3:
  //SEG67 [37] phi (byte) startProcessing::i#2 = (byte) startProcessing::i#1 [phi:startProcessing::@3->startProcessing::@2#0] -- register_copy 
    jmp b2
  //SEG68 startProcessing::@2
  b2:
  //SEG69 [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda i
    asl
    asl
    sta _5
  //SEG70 [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3 -- pwuc1_derefidx_vbuz1_neq_vwuc2_then_la1 
    ldy _5
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    cmp #>NOT_FOUND
    bne b3
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    cmp #<NOT_FOUND
    bne b3
  //SEG71 [40] phi from startProcessing::@2 startProcessing::@7 to startProcessing::@4 [phi:startProcessing::@2/startProcessing::@7->startProcessing::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG72 [40] phi (byte) startProcessing::freeIdx#2 = (byte) startProcessing::i#2 [phi:startProcessing::@2/startProcessing::@7->startProcessing::@4#0] -- register_copy 
    jmp b4
  //SEG73 startProcessing::@4
  b4:
  //SEG74 [41] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@6 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ff
    cmp freeIdx
    beq b6
    jmp b5
  //SEG75 startProcessing::@5
  b5:
  //SEG76 [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda freeIdx
    asl
    asl
    sta _6
  //SEG77 [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda center_x
    ldy _6
    sta PROCESSING,y
  //SEG78 [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda center_y
    ldy _6
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,y
  //SEG79 [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _6
    lda center_dist
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    lda center_dist+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    jmp breturn
  //SEG80 startProcessing::@return
  breturn:
  //SEG81 [46] return 
    rts
  //SEG82 startProcessing::@6
  b6:
  //SEG83 [47] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2 -- vbuz1=vbuz2 
    lda freeIdx
    sta freeIdx_7
  //SEG84 [36] phi from startProcessing::@6 to startProcessing::@1 [phi:startProcessing::@6->startProcessing::@1]
  b1_from_b6:
  //SEG85 [36] phi (byte) startProcessing::freeIdx#6 = (byte~) startProcessing::freeIdx#7 [phi:startProcessing::@6->startProcessing::@1#0] -- register_copy 
    jmp b1
  //SEG86 startProcessing::@3
  b3:
  //SEG87 [48] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG88 [49] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b2_from_b3
    jmp b7
  //SEG89 startProcessing::@7
  b7:
  //SEG90 [50] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6 -- vbuz1=vbuz2 
    lda freeIdx_6
    sta freeIdx
    jmp b4_from_b7
}
//SEG91 getCharToProcess
// Find the non-space char closest to the center of the screen
// If no non-space char is found the distance will be 0xffff
getCharToProcess: {
    .label _9 = $33
    .label _10 = $39
    .label _11 = $3b
    .label _13 = $31
    .label _14 = $32
    .label return_x = $23
    .label return_y = $24
    .label return_dist = $25
    .label x = $c
    .label dist = $11
    .label screen_line = 9
    .label y = $b
    .label return_x_1 = $f
    .label return_y_1 = $10
    .label return_dist_1 = $11
    .label closest_dist = $d
    .label closest_x = $f
    .label closest_y = $10
    .label _15 = $35
    .label _16 = $37
    .label return_dist_5 = $11
    .label return_dist_6 = $11
    .label return_x_7 = $f
    .label return_y_7 = $10
  //SEG92 [52] phi from getCharToProcess to getCharToProcess::@1 [phi:getCharToProcess->getCharToProcess::@1]
  b1_from_getCharToProcess:
  //SEG93 [52] phi (byte) getCharToProcess::closest_y#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta closest_y
  //SEG94 [52] phi (byte) getCharToProcess::closest_x#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta closest_x
  //SEG95 [52] phi (word) getCharToProcess::closest_dist#8 = (const word) NOT_FOUND#0 [phi:getCharToProcess->getCharToProcess::@1#2] -- vwuz1=vwuc1 
    lda #<NOT_FOUND
    sta closest_dist
    lda #>NOT_FOUND
    sta closest_dist+1
  //SEG96 [52] phi (byte) getCharToProcess::y#7 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG97 [52] phi (byte*) getCharToProcess::screen_line#4 = (const byte[$3e8]) SCREEN_COPY#0 [phi:getCharToProcess->getCharToProcess::@1#4] -- pbuz1=pbuc1 
    lda #<SCREEN_COPY
    sta screen_line
    lda #>SCREEN_COPY
    sta screen_line+1
    jmp b1
  //SEG98 getCharToProcess::@1
  b1:
  //SEG99 [53] phi from getCharToProcess::@1 to getCharToProcess::@2 [phi:getCharToProcess::@1->getCharToProcess::@2]
  b2_from_b1:
  //SEG100 [53] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#9 [phi:getCharToProcess::@1->getCharToProcess::@2#0] -- register_copy 
  //SEG101 [53] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#9 [phi:getCharToProcess::@1->getCharToProcess::@2#1] -- register_copy 
  //SEG102 [53] phi (word) getCharToProcess::closest_dist#2 = (word) getCharToProcess::closest_dist#8 [phi:getCharToProcess::@1->getCharToProcess::@2#2] -- register_copy 
  //SEG103 [53] phi (byte) getCharToProcess::x#2 = (byte) 0 [phi:getCharToProcess::@1->getCharToProcess::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
  //SEG104 getCharToProcess::@2
  b2:
  //SEG105 [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy x
    lda (screen_line),y
    cmp #' '
    beq b11
    jmp b4
  //SEG106 getCharToProcess::@4
  b4:
  //SEG107 [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda x
    asl
    sta _13
  //SEG108 [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda y
    asl
    sta _14
  //SEG109 [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14) -- vwuz1=pwuc1_derefidx_vbuz2_plus_pwuc2_derefidx_vbuz3 
    ldx _13
    ldy _14
    lda SQUARES_X,x
    clc
    adc SQUARES_Y,y
    sta dist
    lda SQUARES_X+1,x
    adc SQUARES_Y+1,y
    sta dist+1
  //SEG110 [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 -- vwuz1_ge_vwuz2_then_la1 
    lda closest_dist+1
    cmp dist+1
    bne !+
    lda closest_dist
    cmp dist
    beq b12
  !:
    bcc b12
    jmp b5
  //SEG111 getCharToProcess::@5
  b5:
  //SEG112 [59] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2 -- vbuz1=vbuz2 
    lda x
    sta return_x_7
  //SEG113 [60] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7 -- vbuz1=vbuz2 
    lda y
    sta return_y_7
  //SEG114 [61] phi from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5 to getCharToProcess::@3 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3]
  b3_from_b11:
  b3_from_b12:
  b3_from_b5:
  //SEG115 [61] phi (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#0] -- register_copy 
  //SEG116 [61] phi (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#1] -- register_copy 
  //SEG117 [61] phi (word) getCharToProcess::return_dist#1 = (word~) getCharToProcess::return_dist#5 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#2] -- register_copy 
    jmp b3
  //SEG118 getCharToProcess::@3
  b3:
  //SEG119 [62] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG120 [63] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b10
    jmp b6
  //SEG121 getCharToProcess::@6
  b6:
  //SEG122 [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_line
    sta screen_line
    bcc !+
    inc screen_line+1
  !:
  //SEG123 [65] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG124 [66] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b9
    jmp b7
  //SEG125 getCharToProcess::@7
  b7:
  //SEG126 [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return -- vwuz1_eq_vwuc1_then_la1 
    lda return_dist_1
    cmp #<NOT_FOUND
    bne !+
    lda return_dist_1+1
    cmp #>NOT_FOUND
    beq breturn
  !:
    jmp b8
  //SEG127 getCharToProcess::@8
  b8:
  //SEG128 [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1 -- vwuz1=_word_vbuz2 
    lda return_y_1
    sta _9
    lda #0
    sta _9+1
  //SEG129 [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _9
    asl
    sta _15
    lda _9+1
    rol
    sta _15+1
    asl _15
    rol _15+1
  //SEG130 [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9 -- vwuz1=vwuz2_plus_vwuz3 
    lda _15
    clc
    adc _9
    sta _16
    lda _15+1
    adc _9+1
    sta _16+1
  //SEG131 [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _16
    asl
    sta _10
    lda _16+1
    rol
    sta _10+1
    asl _10
    rol _10+1
    asl _10
    rol _10+1
  //SEG132 [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10 -- pbuz1=pbuc1_plus_vwuz2 
    lda _10
    clc
    adc #<SCREEN_COPY
    sta _11
    lda _10+1
    adc #>SCREEN_COPY
    sta _11+1
  //SEG133 [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    // clear the found char on the screen copy
    lda #' '
    ldy return_x_1
    sta (_11),y
    jmp breturn
  //SEG134 getCharToProcess::@return
  breturn:
  //SEG135 [74] return 
    rts
  //SEG136 getCharToProcess::@9
  b9:
  //SEG137 [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda return_dist_1
    sta closest_dist
    lda return_dist_1+1
    sta closest_dist+1
  //SEG138 [52] phi from getCharToProcess::@9 to getCharToProcess::@1 [phi:getCharToProcess::@9->getCharToProcess::@1]
  b1_from_b9:
  //SEG139 [52] phi (byte) getCharToProcess::closest_y#9 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#0] -- register_copy 
  //SEG140 [52] phi (byte) getCharToProcess::closest_x#9 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@9->getCharToProcess::@1#1] -- register_copy 
  //SEG141 [52] phi (word) getCharToProcess::closest_dist#8 = (word~) getCharToProcess::closest_dist#10 [phi:getCharToProcess::@9->getCharToProcess::@1#2] -- register_copy 
  //SEG142 [52] phi (byte) getCharToProcess::y#7 = (byte) getCharToProcess::y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#3] -- register_copy 
  //SEG143 [52] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#4] -- register_copy 
    jmp b1
  //SEG144 getCharToProcess::@10
  b10:
  //SEG145 [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda return_dist_1
    sta closest_dist
    lda return_dist_1+1
    sta closest_dist+1
  //SEG146 [53] phi from getCharToProcess::@10 to getCharToProcess::@2 [phi:getCharToProcess::@10->getCharToProcess::@2]
  b2_from_b10:
  //SEG147 [53] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@10->getCharToProcess::@2#0] -- register_copy 
  //SEG148 [53] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#1] -- register_copy 
  //SEG149 [53] phi (word) getCharToProcess::closest_dist#2 = (word~) getCharToProcess::closest_dist#12 [phi:getCharToProcess::@10->getCharToProcess::@2#2] -- register_copy 
  //SEG150 [53] phi (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#3] -- register_copy 
    jmp b2
  //SEG151 getCharToProcess::@12
  b12:
  //SEG152 [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2 -- vwuz1=vwuz2 
    lda closest_dist
    sta return_dist_6
    lda closest_dist+1
    sta return_dist_6+1
    jmp b3_from_b12
  //SEG153 getCharToProcess::@11
  b11:
  //SEG154 [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2 -- vwuz1=vwuz2 
    lda closest_dist
    sta return_dist_5
    lda closest_dist+1
    sta return_dist_5+1
    jmp b3_from_b11
}
//SEG155 initSquareTables
// initialize SQUARES table
initSquareTables: {
    .label _2 = $14
    .label _4 = $14
    .label _6 = $3f
    .label _10 = $16
    .label _12 = $16
    .label _14 = $44
    .label _16 = $41
    .label _17 = $46
    .label x_dist = $14
    .label x = $13
    .label y_dist = $16
    .label y = $15
  //SEG156 [80] phi from initSquareTables to initSquareTables::@1 [phi:initSquareTables->initSquareTables::@1]
  b1_from_initSquareTables:
  //SEG157 [80] phi (byte) initSquareTables::x#2 = (byte) 0 [phi:initSquareTables->initSquareTables::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b1
  //SEG158 [80] phi from initSquareTables::@9 to initSquareTables::@1 [phi:initSquareTables::@9->initSquareTables::@1]
  b1_from_b9:
  //SEG159 [80] phi (byte) initSquareTables::x#2 = (byte) initSquareTables::x#1 [phi:initSquareTables::@9->initSquareTables::@1#0] -- register_copy 
    jmp b1
  //SEG160 initSquareTables::@1
  b1:
  //SEG161 [81] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$14
    bcc b2
    jmp b3
  //SEG162 initSquareTables::@3
  b3:
  //SEG163 [82] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14 -- vbuz1=vbuz2_minus_vbuc1 
    lax x
    axs #$14
    stx _2
  //SEG164 [83] phi from initSquareTables::@2 initSquareTables::@3 to initSquareTables::@4 [phi:initSquareTables::@2/initSquareTables::@3->initSquareTables::@4]
  b4_from_b2:
  b4_from_b3:
  //SEG165 [83] phi (byte) initSquareTables::x_dist#0 = (byte~) initSquareTables::$4 [phi:initSquareTables::@2/initSquareTables::@3->initSquareTables::@4#0] -- register_copy 
    jmp b4
  //SEG166 initSquareTables::@4
  b4:
  //SEG167 [84] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0 -- vbuz1=vbuz2 
    lda x_dist
    sta mul8u.a
  //SEG168 [85] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0 -- vbuz1=vbuz2 
    lda x_dist
    sta mul8u.b
  //SEG169 [86] call mul8u 
  //SEG170 [109] phi from initSquareTables::@4 to mul8u [phi:initSquareTables::@4->mul8u]
  mul8u_from_b4:
  //SEG171 [109] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:initSquareTables::@4->mul8u#0] -- register_copy 
  //SEG172 [109] phi (word) mul8u::mb#0 = (byte) mul8u::b#0 [phi:initSquareTables::@4->mul8u#1] -- vwuz1=vbuz2 
    lda mul8u.b
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG173 [87] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return
    lda mul8u.res+1
    sta mul8u.return+1
    jmp b9
  //SEG174 initSquareTables::@9
  b9:
  //SEG175 [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda mul8u.return
    sta _6
    lda mul8u.return+1
    sta _6+1
  //SEG176 [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda x
    asl
    sta _16
  //SEG177 [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _16
    lda _6
    sta SQUARES_X,y
    lda _6+1
    sta SQUARES_X+1,y
  //SEG178 [91] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG179 [92] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b1_from_b9
  //SEG180 [93] phi from initSquareTables::@9 to initSquareTables::@5 [phi:initSquareTables::@9->initSquareTables::@5]
  b5_from_b9:
  //SEG181 [93] phi (byte) initSquareTables::y#2 = (byte) 0 [phi:initSquareTables::@9->initSquareTables::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b5
  //SEG182 [93] phi from initSquareTables::@10 to initSquareTables::@5 [phi:initSquareTables::@10->initSquareTables::@5]
  b5_from_b10:
  //SEG183 [93] phi (byte) initSquareTables::y#2 = (byte) initSquareTables::y#1 [phi:initSquareTables::@10->initSquareTables::@5#0] -- register_copy 
    jmp b5
  //SEG184 initSquareTables::@5
  b5:
  //SEG185 [94] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda y
    cmp #$c
    bcc b6
    jmp b7
  //SEG186 initSquareTables::@7
  b7:
  //SEG187 [95] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c -- vbuz1=vbuz2_minus_vbuc1 
    lax y
    axs #$c
    stx _10
  //SEG188 [96] phi from initSquareTables::@6 initSquareTables::@7 to initSquareTables::@8 [phi:initSquareTables::@6/initSquareTables::@7->initSquareTables::@8]
  b8_from_b6:
  b8_from_b7:
  //SEG189 [96] phi (byte) initSquareTables::y_dist#0 = (byte~) initSquareTables::$12 [phi:initSquareTables::@6/initSquareTables::@7->initSquareTables::@8#0] -- register_copy 
    jmp b8
  //SEG190 initSquareTables::@8
  b8:
  //SEG191 [97] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0 -- vbuz1=vbuz2 
    lda y_dist
    sta mul8u.a
  //SEG192 [98] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0 -- vbuz1=vbuz2 
    lda y_dist
    sta mul8u.b_1
  //SEG193 [99] call mul8u 
  //SEG194 [109] phi from initSquareTables::@8 to mul8u [phi:initSquareTables::@8->mul8u]
  mul8u_from_b8:
  //SEG195 [109] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:initSquareTables::@8->mul8u#0] -- register_copy 
  //SEG196 [109] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:initSquareTables::@8->mul8u#1] -- vwuz1=vbuz2 
    lda mul8u.b_1
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG197 [100] (word) mul8u::return#3 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda mul8u.res
    sta mul8u.return_3
    lda mul8u.res+1
    sta mul8u.return_3+1
    jmp b10
  //SEG198 initSquareTables::@10
  b10:
  //SEG199 [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3 -- vwuz1=vwuz2 
    lda mul8u.return_3
    sta _14
    lda mul8u.return_3+1
    sta _14+1
  //SEG200 [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda y
    asl
    sta _17
  //SEG201 [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _17
    lda _14
    sta SQUARES_Y,y
    lda _14+1
    sta SQUARES_Y+1,y
  //SEG202 [104] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG203 [105] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b5_from_b10
    jmp breturn
  //SEG204 initSquareTables::@return
  breturn:
  //SEG205 [106] return 
    rts
  //SEG206 initSquareTables::@6
  b6:
  //SEG207 [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$c
    sec
    sbc y
    sta _12
    jmp b8_from_b6
  //SEG208 initSquareTables::@2
  b2:
  //SEG209 [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$14
    sec
    sbc x
    sta _4
    jmp b4_from_b2
}
//SEG210 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte zeropage($19) a, byte zeropage($18) b)
mul8u: {
    .label _1 = $47
    .label mb = $1c
    .label a = $19
    .label res = $1a
    .label b = $18
    .label return = $3d
    .label b_1 = $17
    .label return_3 = $42
  //SEG211 [110] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG212 [110] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG213 [110] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
  //SEG214 [110] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG215 mul8u::@1
  b1:
  //SEG216 [111] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda a
    cmp #0
    bne b2
    jmp breturn
  //SEG217 mul8u::@return
  breturn:
  //SEG218 [112] return 
    rts
  //SEG219 mul8u::@2
  b2:
  //SEG220 [113] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and a
    sta _1
  //SEG221 [114] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG222 mul8u::@4
  b4:
  //SEG223 [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG224 [116] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG225 [116] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
  //SEG226 mul8u::@3
  b3:
  //SEG227 [117] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr a
  //SEG228 [118] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG229 [110] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
  //SEG230 [110] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG231 [110] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG232 [110] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG233 setupRasterIrq
// Setup Raster IRQ
setupRasterIrq: {
    .label irqRoutine = irqTop
  //SEG234 asm { sei  }
    sei
  //SEG235 [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG236 [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG237 [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    jmp b1
  //SEG238 setupRasterIrq::@1
  b1:
  //SEG239 [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    jmp b2
  //SEG240 setupRasterIrq::@2
  b2:
  //SEG241 [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG242 [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG243 [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irqRoutine
    sta HARDWARE_IRQ
    lda #>irqRoutine
    sta HARDWARE_IRQ+1
  //SEG244 asm { cli  }
    cli
    jmp breturn
  //SEG245 setupRasterIrq::@return
  breturn:
  //SEG246 [128] return 
    rts
}
//SEG247 irqBottom
// Raster Interrupt at the middle of the screen
irqBottom: {
    .label i = $1e
  //SEG248 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG249 [130] phi from irqBottom to irqBottom::@1 [phi:irqBottom->irqBottom::@1]
  b1_from_irqBottom:
  //SEG250 [130] phi (byte) irqBottom::i#2 = (byte) 0 [phi:irqBottom->irqBottom::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG251 [130] phi from irqBottom::@1 to irqBottom::@1 [phi:irqBottom::@1->irqBottom::@1]
  b1_from_b1:
  //SEG252 [130] phi (byte) irqBottom::i#2 = (byte) irqBottom::i#1 [phi:irqBottom::@1->irqBottom::@1#0] -- register_copy 
    jmp b1
  //SEG253 irqBottom::@1
  b1:
  //SEG254 [131] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG255 [132] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp i
    bne b1_from_b1
    jmp b2
  //SEG256 irqBottom::@2
  b2:
  //SEG257 [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
  //SEG258 [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
  //SEG259 [135] call processChars 
  //SEG260 [142] phi from irqBottom::@2 to processChars [phi:irqBottom::@2->processChars]
  processChars_from_b2:
    jsr processChars
    jmp b3
  //SEG261 irqBottom::@3
  b3:
  //SEG262 [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG263 [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG264 [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the top of the screen
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG265 [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() -- _deref_pptc1=pprc2 
    lda #<irqTop
    sta HARDWARE_IRQ
    lda #>irqTop
    sta HARDWARE_IRQ+1
  //SEG266 [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG267 irqBottom::@return
  breturn:
  //SEG268 [141] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG269 processChars
// Process any chars in the PROCESSING array
processChars: {
    .label _3 = $4c
    .label _4 = $52
    .label _5 = $54
    .label _7 = $56
    .label _8 = $5c
    .label _9 = $5e
    .label _14 = $48
    .label _15 = $49
    .label _16 = $60
    .label i = $1f
    .label processing_x = $4a
    .label processing_y = $4b
    .label _22 = $4e
    .label _23 = $50
    .label _25 = $58
    .label _26 = $5a
  //SEG270 [143] phi from processChars to processChars::@1 [phi:processChars->processChars::@1]
  b1_from_processChars:
  //SEG271 [143] phi (byte) processChars::i#2 = (byte) 0 [phi:processChars->processChars::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG272 [143] phi from processChars::@2 to processChars::@1 [phi:processChars::@2->processChars::@1]
  b1_from_b2:
  //SEG273 [143] phi (byte) processChars::i#2 = (byte) processChars::i#1 [phi:processChars::@2->processChars::@1#0] -- register_copy 
    jmp b1
  //SEG274 processChars::@1
  b1:
  //SEG275 [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda i
    asl
    asl
    sta _14
  //SEG276 [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2 -- pwuc1_derefidx_vbuz1_eq_vwuc2_then_la1 
    ldy _14
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    cmp #<NOT_FOUND
    bne !+
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    cmp #>NOT_FOUND
    beq b2
  !:
    jmp b5
  //SEG277 processChars::@5
  b5:
  //SEG278 [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda i
    asl
    asl
    sta _15
  //SEG279 [147] (byte) processChars::processing_x#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$15) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _15
    lda PROCESSING,y
    sta processing_x
  //SEG280 [148] (byte) processChars::processing_y#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) processChars::$15) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _15
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,y
    sta processing_y
  //SEG281 [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0 -- vwuz1=_word_vbuz2 
    lda processing_y
    sta _3
    lda #0
    sta _3+1
  //SEG282 [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _3
    asl
    sta _22
    lda _3+1
    rol
    sta _22+1
    asl _22
    rol _22+1
  //SEG283 [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3 -- vwuz1=vwuz2_plus_vwuz3 
    lda _22
    clc
    adc _3
    sta _23
    lda _22+1
    adc _3+1
    sta _23+1
  //SEG284 [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _23
    asl
    sta _4
    lda _23+1
    rol
    sta _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG285 [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4 -- pbuz1=pbuc1_plus_vwuz2 
    lda _4
    clc
    adc #<COLS
    sta _5
    lda _4+1
    adc #>COLS
    sta _5+1
  //SEG286 [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0 -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #WHITE
    ldy processing_x
    sta (_5),y
  //SEG287 [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0 -- vwuz1=_word_vbuz2 
    lda processing_y
    sta _7
    lda #0
    sta _7+1
  //SEG288 [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _7
    asl
    sta _25
    lda _7+1
    rol
    sta _25+1
    asl _25
    rol _25+1
  //SEG289 [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7 -- vwuz1=vwuz2_plus_vwuz3 
    lda _25
    clc
    adc _7
    sta _26
    lda _25+1
    adc _7+1
    sta _26+1
  //SEG290 [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _26
    asl
    sta _8
    lda _26+1
    rol
    sta _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG291 [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8 -- pbuz1=pbuc1_plus_vwuz2 
    lda _8
    clc
    adc #<SCREEN
    sta _9
    lda _8+1
    adc #>SCREEN
    sta _9+1
  //SEG292 [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy processing_x
    lda (_9),y
    cmp #' '
    beq b3
    jmp b6
  //SEG293 processChars::@6
  b6:
  //SEG294 [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4 -- pbuz1_derefidx_vbuz2_gt_vbuc1_then_la1 
    ldy processing_x
    lda (_9),y
    cmp #' '
    beq !+
    bcs b4
  !:
    jmp b7
  //SEG295 processChars::@7
  b7:
  //SEG296 [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) -- pbuz1_derefidx_vbuz2=_inc_pbuz1_derefidx_vbuz2 
    ldy processing_x
    lda (_9),y
    clc
    adc #1
    sta (_9),y
    jmp b2
  //SEG297 processChars::@2
  b2:
  //SEG298 [163] (byte) processChars::i#1 ← ++ (byte) processChars::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG299 [164] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b1_from_b2
    jmp breturn
  //SEG300 processChars::@return
  breturn:
  //SEG301 [165] return 
    rts
  //SEG302 processChars::@4
  b4:
  //SEG303 [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) -- pbuz1_derefidx_vbuz2=_dec_pbuz1_derefidx_vbuz2 
    ldy processing_x
    lda (_9),y
    sec
    sbc #1
    sta (_9),y
    jmp b2
  //SEG304 processChars::@3
  b3:
  //SEG305 [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda i
    asl
    asl
    sta _16
  //SEG306 [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0 -- pwuc1_derefidx_vbuz1=vwuc2 
    ldy _16
    lda #<NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    lda #>NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    jmp b2
}
//SEG307 irqTop
// Raster Interrupt at the top of the screen
irqTop: {
    .label i = $20
    .label i1 = $21
  //SEG308 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG309 [170] phi from irqTop to irqTop::@1 [phi:irqTop->irqTop::@1]
  b1_from_irqTop:
  //SEG310 [170] phi (byte) irqTop::i#2 = (byte) 0 [phi:irqTop->irqTop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG311 [170] phi from irqTop::@1 to irqTop::@1 [phi:irqTop::@1->irqTop::@1]
  b1_from_b1:
  //SEG312 [170] phi (byte) irqTop::i#2 = (byte) irqTop::i#1 [phi:irqTop::@1->irqTop::@1#0] -- register_copy 
    jmp b1
  //SEG313 irqTop::@1
  b1:
  //SEG314 [171] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG315 [172] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp i
    bne b1_from_b1
    jmp b2
  //SEG316 irqTop::@2
  b2:
  //SEG317 [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
  //SEG318 [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
  //SEG319 [175] phi from irqTop::@2 to irqTop::@3 [phi:irqTop::@2->irqTop::@3]
  b3_from_b2:
  //SEG320 [175] phi (byte) irqTop::i1#2 = (byte) 0 [phi:irqTop::@2->irqTop::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
    jmp b3
  //SEG321 [175] phi from irqTop::@3 to irqTop::@3 [phi:irqTop::@3->irqTop::@3]
  b3_from_b3:
  //SEG322 [175] phi (byte) irqTop::i1#2 = (byte) irqTop::i1#1 [phi:irqTop::@3->irqTop::@3#0] -- register_copy 
    jmp b3
  //SEG323 irqTop::@3
  b3:
  //SEG324 [176] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG325 [177] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i1
    bne b3_from_b3
    jmp b4
  //SEG326 irqTop::@4
  b4:
  //SEG327 [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG328 [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG329 [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the middle of the screen
    lda #RASTER_IRQ_MIDDLE
    sta RASTER
  //SEG330 [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() -- _deref_pptc1=pprc2 
    lda #<irqBottom
    sta HARDWARE_IRQ
    lda #>irqBottom
    sta HARDWARE_IRQ+1
  //SEG331 [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG332 irqTop::@return
  breturn:
  //SEG333 [183] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
  // Copy of the screen used for finding chars to process
  SCREEN_COPY: .fill $3e8, 0
  // SQUARES_X[i] = (i-20)*(i-20)
  SQUARES_X: .fill 2*$28, 0
  // SQUARES_Y[i] = (i-12)*(i-12)
  SQUARES_Y: .fill 2*$19, 0
  // Chars currently being processed in the interrupt
  PROCESSING: .fill 4*NUM_PROCESSING, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::$14 ] ( main:2 [ main::i#2 main::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0 [ main::i#2 main::$14 ] ( main:2 [ main::i#2 main::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ main::$14 ]
Statement [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0 [ main::i#2 main::$14 ] ( main:2 [ main::i#2 main::$14 ] ) always clobbers reg byte a 
Statement [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [15] *((byte*) main::dst#2) ← *((byte*) main::src#2) [ main::src#2 main::dst#2 ] ( main:2 [ main::src#2 main::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3 [ main::src#1 main::dst#1 ] ( main:2 [ main::src#1 main::dst#1 ] ) always clobbers reg byte a 
Statement [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1 [ getCharToProcess::return_x#0 getCharToProcess::return_y#0 getCharToProcess::return_dist#0 ] ( main:2 [ getCharToProcess::return_x#0 getCharToProcess::return_y#0 getCharToProcess::return_dist#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ getCharToProcess::return_x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ getCharToProcess::return_y#0 ]
Statement [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ( main:2 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ main::center_x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ main::center_y#0 ]
Statement [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ( main:2 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ) always clobbers reg byte a 
Statement [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 ] ( main:2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ startProcessing::center_x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ startProcessing::center_y#0 ]
Statement [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$5 ] ( main:2::startProcessing:34 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Statement [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ( main:2::startProcessing:34 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ) always clobbers reg byte a 
Statement [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ( main:2::startProcessing:34 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0 [ startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ( main:2::startProcessing:34 [ startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ startProcessing::$6 ]
Statement [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0 [ startProcessing::center_dist#0 startProcessing::$6 ] ( main:2::startProcessing:34 [ startProcessing::center_dist#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0 [ ] ( main:2::startProcessing:34 [ ] ) always clobbers reg byte a 
Statement [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Statement [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 ] ) always clobbers reg byte a 
Statement [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 getCharToProcess::$14 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 getCharToProcess::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ getCharToProcess::$13 ]
Statement [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14) [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ) always clobbers reg byte a 
Statement [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ) always clobbers reg byte a 
Statement [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 getCharToProcess::$15 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 getCharToProcess::$15 ] ) always clobbers reg byte a 
Statement [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$16 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$16 ] ) always clobbers reg byte a 
Statement [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ) always clobbers reg byte a 
Statement [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$11 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$11 ] ) always clobbers reg byte a 
Statement [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#1 getCharToProcess::y#1 getCharToProcess::closest_dist#10 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#1 getCharToProcess::y#1 getCharToProcess::closest_dist#10 ] ) always clobbers reg byte a 
Statement [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#1 getCharToProcess::closest_dist#12 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#1 getCharToProcess::closest_dist#12 ] ) always clobbers reg byte a 
Statement [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#6 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#6 ] ) always clobbers reg byte a 
Statement [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#5 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#5 ] ) always clobbers reg byte a 
Statement [87] (word) mul8u::return#2 ← (word) mul8u::res#2 [ initSquareTables::x#2 mul8u::return#2 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 mul8u::return#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ]
Statement [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2 [ initSquareTables::x#2 initSquareTables::$6 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$6 ] ) always clobbers reg byte a 
Statement [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1 [ initSquareTables::x#2 initSquareTables::$6 initSquareTables::$16 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$6 initSquareTables::$16 ] ) always clobbers reg byte a 
Statement [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6 [ initSquareTables::x#2 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 ] ) always clobbers reg byte a 
Statement [100] (word) mul8u::return#3 ← (word) mul8u::res#2 [ initSquareTables::y#2 mul8u::return#3 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 mul8u::return#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ]
Statement [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3 [ initSquareTables::y#2 initSquareTables::$14 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$14 ] ) always clobbers reg byte a 
Statement [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1 [ initSquareTables::y#2 initSquareTables::$14 initSquareTables::$17 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$14 initSquareTables::$17 ] ) always clobbers reg byte a 
Statement [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14 [ initSquareTables::y#2 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 ] ) always clobbers reg byte a 
Statement [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2 [ initSquareTables::y#2 initSquareTables::$12 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$12 ] ) always clobbers reg byte a 
Statement [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2 [ initSquareTables::x#2 initSquareTables::$4 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$4 ] ) always clobbers reg byte a 
Statement [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::initSquareTables:20::mul8u:86 [ initSquareTables::x#2 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::initSquareTables:20::mul8u:99 [ initSquareTables::y#2 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() [ ] (  [ ] ) always clobbers reg byte a 
Statement [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [141] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2 [ processChars::i#2 processChars::$14 ] ( processChars:135 [ processChars::i#2 processChars::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ processChars::i#2 processChars::i#1 ]
Statement [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2 [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2 [ processChars::i#2 processChars::$15 ] ( processChars:135 [ processChars::i#2 processChars::$15 ] ) always clobbers reg byte a 
Statement [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:74 [ processChars::processing_x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:75 [ processChars::processing_y#0 ]
Statement [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 processChars::$22 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 processChars::$22 ] ) always clobbers reg byte a 
Statement [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$23 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$23 ] ) always clobbers reg byte a 
Statement [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$4 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$4 ] ) always clobbers reg byte a 
Statement [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$5 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$5 ] ) always clobbers reg byte a 
Statement [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 ] ) always clobbers reg byte a 
Statement [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0 [ processChars::i#2 processChars::processing_x#0 processChars::$7 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$7 ] ) always clobbers reg byte a 
Statement [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2 [ processChars::i#2 processChars::processing_x#0 processChars::$7 processChars::$25 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$7 processChars::$25 ] ) always clobbers reg byte a 
Statement [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7 [ processChars::i#2 processChars::processing_x#0 processChars::$26 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$26 ] ) always clobbers reg byte a 
Statement [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3 [ processChars::i#2 processChars::processing_x#0 processChars::$8 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$8 ] ) always clobbers reg byte a 
Statement [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ) always clobbers reg byte a 
Statement [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ) always clobbers reg byte a 
Statement [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ) always clobbers reg byte a 
Statement [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2 [ processChars::i#2 processChars::$16 ] ( processChars:135 [ processChars::i#2 processChars::$16 ] ) always clobbers reg byte a 
Statement [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0 [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() [ ] (  [ ] ) always clobbers reg byte a 
Statement [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [183] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::$14 ] ( main:2 [ main::i#2 main::$14 ] ) always clobbers reg byte a 
Statement [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0 [ main::i#2 main::$14 ] ( main:2 [ main::i#2 main::$14 ] ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0 [ main::i#2 main::$14 ] ( main:2 [ main::i#2 main::$14 ] ) always clobbers reg byte a 
Statement [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [15] *((byte*) main::dst#2) ← *((byte*) main::src#2) [ main::src#2 main::dst#2 ] ( main:2 [ main::src#2 main::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3 [ main::src#1 main::dst#1 ] ( main:2 [ main::src#1 main::dst#1 ] ) always clobbers reg byte a 
Statement [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1 [ getCharToProcess::return_x#0 getCharToProcess::return_y#0 getCharToProcess::return_dist#0 ] ( main:2 [ getCharToProcess::return_x#0 getCharToProcess::return_y#0 getCharToProcess::return_dist#0 ] ) always clobbers reg byte a 
Statement [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ( main:2 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ) always clobbers reg byte a 
Statement [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ( main:2 [ main::center_x#0 main::center_y#0 main::center_dist#0 ] ) always clobbers reg byte a 
Statement [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 ] ( main:2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 ] ) always clobbers reg byte a 
Statement [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$5 ] ( main:2::startProcessing:34 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$5 ] ) always clobbers reg byte a 
Statement [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ( main:2::startProcessing:34 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ) always clobbers reg byte a 
Statement [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ( main:2::startProcessing:34 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0 [ startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ( main:2::startProcessing:34 [ startProcessing::center_y#0 startProcessing::center_dist#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0 [ startProcessing::center_dist#0 startProcessing::$6 ] ( main:2::startProcessing:34 [ startProcessing::center_dist#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0 [ ] ( main:2::startProcessing:34 [ ] ) always clobbers reg byte a 
Statement [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ) always clobbers reg byte a 
Statement [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 ] ) always clobbers reg byte a 
Statement [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 getCharToProcess::$14 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::$13 getCharToProcess::$14 ] ) always clobbers reg byte a 
Statement [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14) [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ) always clobbers reg byte a 
Statement [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ) always clobbers reg byte a 
Statement [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 getCharToProcess::$15 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 getCharToProcess::$15 ] ) always clobbers reg byte a 
Statement [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$16 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$16 ] ) always clobbers reg byte a 
Statement [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ) always clobbers reg byte a 
Statement [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$11 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$11 ] ) always clobbers reg byte a 
Statement [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#1 getCharToProcess::y#1 getCharToProcess::closest_dist#10 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#1 getCharToProcess::y#1 getCharToProcess::closest_dist#10 ] ) always clobbers reg byte a 
Statement [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#1 getCharToProcess::closest_dist#12 ] ( main:2::getCharToProcess:22 [ getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#1 getCharToProcess::closest_dist#12 ] ) always clobbers reg byte a 
Statement [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#6 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#6 ] ) always clobbers reg byte a 
Statement [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#5 ] ( main:2::getCharToProcess:22 [ getCharToProcess::screen_line#4 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::return_dist#5 ] ) always clobbers reg byte a 
Statement [82] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14 [ initSquareTables::x#2 initSquareTables::$2 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$2 ] ) always clobbers reg byte a 
Statement [87] (word) mul8u::return#2 ← (word) mul8u::res#2 [ initSquareTables::x#2 mul8u::return#2 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 mul8u::return#2 ] ) always clobbers reg byte a 
Statement [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2 [ initSquareTables::x#2 initSquareTables::$6 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$6 ] ) always clobbers reg byte a 
Statement [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1 [ initSquareTables::x#2 initSquareTables::$6 initSquareTables::$16 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$6 initSquareTables::$16 ] ) always clobbers reg byte a 
Statement [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6 [ initSquareTables::x#2 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 ] ) always clobbers reg byte a 
Statement [95] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c [ initSquareTables::y#2 initSquareTables::$10 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$10 ] ) always clobbers reg byte a 
Statement [100] (word) mul8u::return#3 ← (word) mul8u::res#2 [ initSquareTables::y#2 mul8u::return#3 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 mul8u::return#3 ] ) always clobbers reg byte a 
Statement [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3 [ initSquareTables::y#2 initSquareTables::$14 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$14 ] ) always clobbers reg byte a 
Statement [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1 [ initSquareTables::y#2 initSquareTables::$14 initSquareTables::$17 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$14 initSquareTables::$17 ] ) always clobbers reg byte a 
Statement [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14 [ initSquareTables::y#2 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 ] ) always clobbers reg byte a 
Statement [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2 [ initSquareTables::y#2 initSquareTables::$12 ] ( main:2::initSquareTables:20 [ initSquareTables::y#2 initSquareTables::$12 ] ) always clobbers reg byte a 
Statement [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2 [ initSquareTables::x#2 initSquareTables::$4 ] ( main:2::initSquareTables:20 [ initSquareTables::x#2 initSquareTables::$4 ] ) always clobbers reg byte a 
Statement [113] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( main:2::initSquareTables:20::mul8u:86 [ initSquareTables::x#2 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] main:2::initSquareTables:20::mul8u:99 [ initSquareTables::y#2 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ) always clobbers reg byte a 
Statement [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( main:2::initSquareTables:20::mul8u:86 [ initSquareTables::x#2 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] main:2::initSquareTables:20::mul8u:99 [ initSquareTables::y#2 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ) always clobbers reg byte a 
Statement [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 [ ] ( main:2::setupRasterIrq:13 [ ] ) always clobbers reg byte a 
Statement [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() [ ] (  [ ] ) always clobbers reg byte a 
Statement [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [141] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2 [ processChars::i#2 processChars::$14 ] ( processChars:135 [ processChars::i#2 processChars::$14 ] ) always clobbers reg byte a 
Statement [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2 [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2 [ processChars::i#2 processChars::$15 ] ( processChars:135 [ processChars::i#2 processChars::$15 ] ) always clobbers reg byte a 
Statement [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 ] ) always clobbers reg byte a 
Statement [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 processChars::$22 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$3 processChars::$22 ] ) always clobbers reg byte a 
Statement [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$23 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$23 ] ) always clobbers reg byte a 
Statement [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$4 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$4 ] ) always clobbers reg byte a 
Statement [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$5 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 processChars::$5 ] ) always clobbers reg byte a 
Statement [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::processing_y#0 ] ) always clobbers reg byte a 
Statement [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0 [ processChars::i#2 processChars::processing_x#0 processChars::$7 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$7 ] ) always clobbers reg byte a 
Statement [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2 [ processChars::i#2 processChars::processing_x#0 processChars::$7 processChars::$25 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$7 processChars::$25 ] ) always clobbers reg byte a 
Statement [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7 [ processChars::i#2 processChars::processing_x#0 processChars::$26 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$26 ] ) always clobbers reg byte a 
Statement [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3 [ processChars::i#2 processChars::processing_x#0 processChars::$8 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$8 ] ) always clobbers reg byte a 
Statement [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ) always clobbers reg byte a 
Statement [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ) always clobbers reg byte a 
Statement [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ( processChars:135 [ processChars::i#2 processChars::processing_x#0 processChars::$9 ] ) always clobbers reg byte a 
Statement [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2 [ processChars::i#2 processChars::$16 ] ( processChars:135 [ processChars::i#2 processChars::$16 ] ) always clobbers reg byte a 
Statement [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0 [ processChars::i#2 ] ( processChars:135 [ processChars::i#2 ] ) always clobbers reg byte a 
Statement [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() [ ] (  [ ] ) always clobbers reg byte a 
Statement [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [183] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ main::src#2 main::src#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ main::dst#2 main::dst#1 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:9 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:13 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] : zp ZP_BYTE:16 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:17 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ mul8u::b#1 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ mul8u::b#0 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_BYTE:30 [ irqBottom::i#2 irqBottom::i#1 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ processChars::i#2 processChars::i#1 ] : zp ZP_BYTE:31 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ irqTop::i#2 irqTop::i#1 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ irqTop::i1#2 irqTop::i1#1 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ main::$14 ] : zp ZP_BYTE:34 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ getCharToProcess::return_x#0 ] : zp ZP_BYTE:35 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ getCharToProcess::return_y#0 ] : zp ZP_BYTE:36 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:37 [ getCharToProcess::return_dist#0 ] : zp ZP_WORD:37 , 
Potential registers zp ZP_BYTE:39 [ main::center_x#0 ] : zp ZP_BYTE:39 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ main::center_y#0 ] : zp ZP_BYTE:40 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:41 [ main::center_dist#0 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_BYTE:43 [ startProcessing::center_x#0 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ startProcessing::center_y#0 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:45 [ startProcessing::center_dist#0 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_BYTE:47 [ startProcessing::$5 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ startProcessing::$6 ] : zp ZP_BYTE:48 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ getCharToProcess::$13 ] : zp ZP_BYTE:49 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ getCharToProcess::$14 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:51 [ getCharToProcess::$9 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_WORD:53 [ getCharToProcess::$15 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_WORD:55 [ getCharToProcess::$16 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_WORD:57 [ getCharToProcess::$10 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_WORD:59 [ getCharToProcess::$11 ] : zp ZP_WORD:59 , 
Potential registers zp ZP_WORD:61 [ mul8u::return#2 ] : zp ZP_WORD:61 , 
Potential registers zp ZP_WORD:63 [ initSquareTables::$6 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_BYTE:65 [ initSquareTables::$16 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:66 [ mul8u::return#3 ] : zp ZP_WORD:66 , 
Potential registers zp ZP_WORD:68 [ initSquareTables::$14 ] : zp ZP_WORD:68 , 
Potential registers zp ZP_BYTE:70 [ initSquareTables::$17 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ mul8u::$1 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:72 [ processChars::$14 ] : zp ZP_BYTE:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:73 [ processChars::$15 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:74 [ processChars::processing_x#0 ] : zp ZP_BYTE:74 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:75 [ processChars::processing_y#0 ] : zp ZP_BYTE:75 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:76 [ processChars::$3 ] : zp ZP_WORD:76 , 
Potential registers zp ZP_WORD:78 [ processChars::$22 ] : zp ZP_WORD:78 , 
Potential registers zp ZP_WORD:80 [ processChars::$23 ] : zp ZP_WORD:80 , 
Potential registers zp ZP_WORD:82 [ processChars::$4 ] : zp ZP_WORD:82 , 
Potential registers zp ZP_WORD:84 [ processChars::$5 ] : zp ZP_WORD:84 , 
Potential registers zp ZP_WORD:86 [ processChars::$7 ] : zp ZP_WORD:86 , 
Potential registers zp ZP_WORD:88 [ processChars::$25 ] : zp ZP_WORD:88 , 
Potential registers zp ZP_WORD:90 [ processChars::$26 ] : zp ZP_WORD:90 , 
Potential registers zp ZP_WORD:92 [ processChars::$8 ] : zp ZP_WORD:92 , 
Potential registers zp ZP_WORD:94 [ processChars::$9 ] : zp ZP_WORD:94 , 
Potential registers zp ZP_BYTE:96 [ processChars::$16 ] : zp ZP_BYTE:96 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [getCharToProcess] 4,996.99: zp ZP_WORD:17 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] 3,090.17: zp ZP_WORD:13 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] 2,820.67: zp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] 2,002: zp ZP_BYTE:50 [ getCharToProcess::$14 ] 1,833.24: zp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] 1,456: zp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ] 1,001: zp ZP_BYTE:49 [ getCharToProcess::$13 ] 238.75: zp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ] 130.7: zp ZP_WORD:9 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ] 7.33: zp ZP_BYTE:35 [ getCharToProcess::return_x#0 ] 7.33: zp ZP_BYTE:36 [ getCharToProcess::return_y#0 ] 7.33: zp ZP_WORD:37 [ getCharToProcess::return_dist#0 ] 4: zp ZP_WORD:53 [ getCharToProcess::$15 ] 4: zp ZP_WORD:55 [ getCharToProcess::$16 ] 4: zp ZP_WORD:57 [ getCharToProcess::$10 ] 4: zp ZP_WORD:59 [ getCharToProcess::$11 ] 3: zp ZP_WORD:51 [ getCharToProcess::$9 ] 
Uplift Scope [startProcessing] 3,691.17: zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ] 2,002: zp ZP_BYTE:47 [ startProcessing::$5 ] 235.67: zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] 2.67: zp ZP_BYTE:48 [ startProcessing::$6 ] 0.87: zp ZP_BYTE:43 [ startProcessing::center_x#0 ] 0.87: zp ZP_BYTE:44 [ startProcessing::center_y#0 ] 0.87: zp ZP_WORD:45 [ startProcessing::center_dist#0 ] 
Uplift Scope [mul8u] 349.43: zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 269.57: zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 214.67: zp ZP_BYTE:25 [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 202: zp ZP_BYTE:71 [ mul8u::$1 ] 22: zp ZP_BYTE:23 [ mul8u::b#1 ] 22: zp ZP_BYTE:24 [ mul8u::b#0 ] 22: zp ZP_WORD:61 [ mul8u::return#2 ] 22: zp ZP_WORD:66 [ mul8u::return#3 ] 
Uplift Scope [processChars] 25.67: zp ZP_WORD:94 [ processChars::$9 ] 22: zp ZP_BYTE:72 [ processChars::$14 ] 22: zp ZP_WORD:78 [ processChars::$22 ] 22: zp ZP_WORD:80 [ processChars::$23 ] 22: zp ZP_WORD:82 [ processChars::$4 ] 22: zp ZP_WORD:84 [ processChars::$5 ] 22: zp ZP_WORD:88 [ processChars::$25 ] 22: zp ZP_WORD:90 [ processChars::$26 ] 22: zp ZP_WORD:92 [ processChars::$8 ] 22: zp ZP_BYTE:96 [ processChars::$16 ] 18.89: zp ZP_BYTE:31 [ processChars::i#2 processChars::i#1 ] 16.5: zp ZP_BYTE:73 [ processChars::$15 ] 16.5: zp ZP_WORD:76 [ processChars::$3 ] 16.5: zp ZP_WORD:86 [ processChars::$7 ] 5.87: zp ZP_BYTE:74 [ processChars::processing_x#0 ] 1.57: zp ZP_BYTE:75 [ processChars::processing_y#0 ] 
Uplift Scope [initSquareTables] 66: zp ZP_BYTE:20 [ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ] 66: zp ZP_BYTE:22 [ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ] 22: zp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ] 22: zp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ] 22: zp ZP_BYTE:65 [ initSquareTables::$16 ] 22: zp ZP_BYTE:70 [ initSquareTables::$17 ] 11: zp ZP_WORD:63 [ initSquareTables::$6 ] 11: zp ZP_WORD:68 [ initSquareTables::$14 ] 
Uplift Scope [main] 27.5: zp ZP_WORD:3 [ main::src#2 main::src#1 ] 23.1: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_WORD:5 [ main::dst#2 main::dst#1 ] 14.67: zp ZP_BYTE:34 [ main::$14 ] 8.25: zp ZP_WORD:41 [ main::center_dist#0 ] 5.5: zp ZP_BYTE:39 [ main::center_x#0 ] 5.5: zp ZP_BYTE:40 [ main::center_y#0 ] 
Uplift Scope [irqTop] 38.5: zp ZP_BYTE:32 [ irqTop::i#2 irqTop::i#1 ] 38.5: zp ZP_BYTE:33 [ irqTop::i1#2 irqTop::i1#1 ] 
Uplift Scope [irqBottom] 38.5: zp ZP_BYTE:30 [ irqBottom::i#2 irqBottom::i#1 ] 
Uplift Scope [ProcessingChar] 
Uplift Scope [setupRasterIrq] 
Uplift Scope [] 

Uplifting [getCharToProcess] best 255297 combination zp ZP_WORD:17 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] zp ZP_WORD:13 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] zp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] reg byte a [ getCharToProcess::$14 ] zp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] zp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ] zp ZP_BYTE:49 [ getCharToProcess::$13 ] zp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ] zp ZP_WORD:9 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ] zp ZP_BYTE:35 [ getCharToProcess::return_x#0 ] zp ZP_BYTE:36 [ getCharToProcess::return_y#0 ] zp ZP_WORD:37 [ getCharToProcess::return_dist#0 ] zp ZP_WORD:53 [ getCharToProcess::$15 ] zp ZP_WORD:55 [ getCharToProcess::$16 ] zp ZP_WORD:57 [ getCharToProcess::$10 ] zp ZP_WORD:59 [ getCharToProcess::$11 ] zp ZP_WORD:51 [ getCharToProcess::$9 ] 
Limited combination testing to 100 combinations of 8748 possible.
Uplifting [startProcessing] best 240386 combination reg byte x [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ] reg byte a [ startProcessing::$5 ] zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] reg byte x [ startProcessing::$6 ] zp ZP_BYTE:43 [ startProcessing::center_x#0 ] zp ZP_BYTE:44 [ startProcessing::center_y#0 ] zp ZP_WORD:45 [ startProcessing::center_dist#0 ] 
Limited combination testing to 100 combinations of 972 possible.
Uplifting [mul8u] best 239360 combination zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp ZP_WORD:28 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ] reg byte a [ mul8u::$1 ] reg byte a [ mul8u::b#1 ] reg byte a [ mul8u::b#0 ] zp ZP_WORD:61 [ mul8u::return#2 ] zp ZP_WORD:66 [ mul8u::return#3 ] 
Limited combination testing to 100 combinations of 192 possible.
Uplifting [processChars] best 239160 combination zp ZP_WORD:94 [ processChars::$9 ] reg byte a [ processChars::$14 ] zp ZP_WORD:78 [ processChars::$22 ] zp ZP_WORD:80 [ processChars::$23 ] zp ZP_WORD:82 [ processChars::$4 ] zp ZP_WORD:84 [ processChars::$5 ] zp ZP_WORD:88 [ processChars::$25 ] zp ZP_WORD:90 [ processChars::$26 ] zp ZP_WORD:92 [ processChars::$8 ] reg byte a [ processChars::$16 ] reg byte x [ processChars::i#2 processChars::i#1 ] zp ZP_BYTE:73 [ processChars::$15 ] zp ZP_WORD:76 [ processChars::$3 ] zp ZP_WORD:86 [ processChars::$7 ] zp ZP_BYTE:74 [ processChars::processing_x#0 ] zp ZP_BYTE:75 [ processChars::processing_y#0 ] 
Limited combination testing to 100 combinations of 1728 possible.
Uplifting [initSquareTables] best 239000 combination reg byte a [ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ] reg byte a [ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ] zp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ] zp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ] zp ZP_BYTE:65 [ initSquareTables::$16 ] zp ZP_BYTE:70 [ initSquareTables::$17 ] zp ZP_WORD:63 [ initSquareTables::$6 ] zp ZP_WORD:68 [ initSquareTables::$14 ] 
Limited combination testing to 100 combinations of 2304 possible.
Uplifting [main] best 238680 combination zp ZP_WORD:3 [ main::src#2 main::src#1 ] reg byte y [ main::i#2 main::i#1 ] zp ZP_WORD:5 [ main::dst#2 main::dst#1 ] reg byte x [ main::$14 ] zp ZP_WORD:41 [ main::center_dist#0 ] reg byte y [ main::center_x#0 ] reg byte x [ main::center_y#0 ] 
Uplifting [irqTop] best 238500 combination reg byte x [ irqTop::i#2 irqTop::i#1 ] reg byte x [ irqTop::i1#2 irqTop::i1#1 ] 
Uplifting [irqBottom] best 238410 combination reg byte x [ irqBottom::i#2 irqBottom::i#1 ] 
Uplifting [ProcessingChar] best 238410 combination 
Uplifting [setupRasterIrq] best 238410 combination 
Uplifting [] best 238410 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Uplifting [getCharToProcess] best 238410 combination zp ZP_BYTE:16 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Uplifting [getCharToProcess] best 238410 combination zp ZP_BYTE:15 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Uplifting [getCharToProcess] best 238410 combination zp ZP_BYTE:12 [ getCharToProcess::x#2 getCharToProcess::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ getCharToProcess::$13 ]
Uplifting [getCharToProcess] best 234410 combination reg byte x [ getCharToProcess::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Uplifting [getCharToProcess] best 234410 combination zp ZP_BYTE:11 [ getCharToProcess::y#7 getCharToProcess::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Uplifting [startProcessing] best 234410 combination zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ]
Uplifting [initSquareTables] best 234410 combination zp ZP_BYTE:19 [ initSquareTables::x#2 initSquareTables::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ]
Uplifting [initSquareTables] best 234410 combination zp ZP_BYTE:21 [ initSquareTables::y#2 initSquareTables::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:65 [ initSquareTables::$16 ]
Uplifting [initSquareTables] best 234370 combination reg byte a [ initSquareTables::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ initSquareTables::$17 ]
Uplifting [initSquareTables] best 234330 combination reg byte a [ initSquareTables::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:73 [ processChars::$15 ]
Uplifting [processChars] best 234260 combination reg byte y [ processChars::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ getCharToProcess::return_x#0 ]
Uplifting [getCharToProcess] best 234200 combination reg byte y [ getCharToProcess::return_x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ getCharToProcess::return_y#0 ]
Uplifting [getCharToProcess] best 234140 combination reg byte x [ getCharToProcess::return_y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:74 [ processChars::processing_x#0 ]
Uplifting [processChars] best 234140 combination zp ZP_BYTE:74 [ processChars::processing_x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:75 [ processChars::processing_y#0 ]
Uplifting [processChars] best 234140 combination zp ZP_BYTE:75 [ processChars::processing_y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ startProcessing::center_x#0 ]
Uplifting [startProcessing] best 234140 combination zp ZP_BYTE:43 [ startProcessing::center_x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ startProcessing::center_y#0 ]
Uplifting [startProcessing] best 234140 combination zp ZP_BYTE:44 [ startProcessing::center_y#0 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] ] with [ zp ZP_WORD:37 [ getCharToProcess::return_dist#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp ZP_WORD:61 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp ZP_WORD:66 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ main::center_dist#0 ] ] with [ zp ZP_WORD:45 [ startProcessing::center_dist#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:51 [ getCharToProcess::$9 ] ] with [ zp ZP_WORD:55 [ getCharToProcess::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:57 [ getCharToProcess::$10 ] ] with [ zp ZP_WORD:59 [ getCharToProcess::$11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:76 [ processChars::$3 ] ] with [ zp ZP_WORD:80 [ processChars::$23 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:82 [ processChars::$4 ] ] with [ zp ZP_WORD:84 [ processChars::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:86 [ processChars::$7 ] ] with [ zp ZP_WORD:90 [ processChars::$26 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:92 [ processChars::$8 ] ] with [ zp ZP_WORD:94 [ processChars::$9 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 getCharToProcess::return_dist#0 ] ] with [ zp ZP_WORD:41 [ main::center_dist#0 startProcessing::center_dist#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 ] ] with [ zp ZP_WORD:63 [ initSquareTables::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 initSquareTables::$6 ] ] with [ zp ZP_WORD:68 [ initSquareTables::$14 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:51 [ getCharToProcess::$9 getCharToProcess::$16 ] ] with [ zp ZP_WORD:57 [ getCharToProcess::$10 getCharToProcess::$11 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:76 [ processChars::$3 processChars::$23 ] ] with [ zp ZP_WORD:82 [ processChars::$4 processChars::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:86 [ processChars::$7 processChars::$26 ] ] with [ zp ZP_WORD:92 [ processChars::$8 processChars::$9 ] ] - score: 1
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ main::src#2 main::src#1 ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:4 [ main::dst#2 main::dst#1 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:9 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Allocated (was zp ZP_BYTE:12) zp ZP_BYTE:10 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:11 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
Allocated (was zp ZP_BYTE:15) zp ZP_BYTE:13 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Allocated (was zp ZP_BYTE:16) zp ZP_BYTE:14 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Allocated (was zp ZP_WORD:17) zp ZP_WORD:15 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 getCharToProcess::return_dist#0 main::center_dist#0 startProcessing::center_dist#0 ]
Allocated (was zp ZP_BYTE:19) zp ZP_BYTE:17 [ initSquareTables::x#2 initSquareTables::x#1 ]
Allocated (was zp ZP_BYTE:21) zp ZP_BYTE:18 [ initSquareTables::y#2 initSquareTables::y#1 ]
Allocated (was zp ZP_WORD:26) zp ZP_WORD:19 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 initSquareTables::$6 initSquareTables::$14 ]
Allocated (was zp ZP_WORD:28) zp ZP_WORD:21 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated (was zp ZP_BYTE:43) zp ZP_BYTE:23 [ startProcessing::center_x#0 ]
Allocated (was zp ZP_BYTE:44) zp ZP_BYTE:24 [ startProcessing::center_y#0 ]
Allocated (was zp ZP_WORD:51) zp ZP_WORD:25 [ getCharToProcess::$9 getCharToProcess::$16 getCharToProcess::$10 getCharToProcess::$11 ]
Allocated (was zp ZP_WORD:53) zp ZP_WORD:27 [ getCharToProcess::$15 ]
Allocated (was zp ZP_BYTE:74) zp ZP_BYTE:29 [ processChars::processing_x#0 ]
Allocated (was zp ZP_BYTE:75) zp ZP_BYTE:30 [ processChars::processing_y#0 ]
Allocated (was zp ZP_WORD:76) zp ZP_WORD:31 [ processChars::$3 processChars::$23 processChars::$4 processChars::$5 ]
Allocated (was zp ZP_WORD:78) zp ZP_WORD:33 [ processChars::$22 ]
Allocated (was zp ZP_WORD:86) zp ZP_WORD:35 [ processChars::$7 processChars::$26 processChars::$8 processChars::$9 ]
Allocated (was zp ZP_WORD:88) zp ZP_WORD:37 [ processChars::$25 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Black Hole at the center of the BASIC screen sucking in any letters
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const OFFSET_STRUCT_PROCESSINGCHAR_Y = 1
  .const OFFSET_STRUCT_PROCESSINGCHAR_DIST = 2
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .const WHITE = 1
  .const BLUE = 6
  .const LIGHT_BLUE = $e
  .label SCREEN = $400
  // Distance value meaning not found
  .const NOT_FOUND = $ffff
  .const NUM_PROCESSING = $10
  .const RASTER_IRQ_TOP = $30
  .const RASTER_IRQ_MIDDLE = $ff
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label src = 2
    .label dst = 4
    .label center_dist = $f
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  // Init processing array
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2 -- vbuxx=vbuyy_rol_2 
    tya
    asl
    asl
    tax
  //SEG17 [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING,x
  //SEG18 [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,x
  //SEG19 [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0 -- pwuc1_derefidx_vbuxx=vwuc2 
    lda #<NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,x
    lda #>NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,x
  //SEG20 [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG21 [11] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #NUM_PROCESSING-1+1
    bne b1_from_b1
  //SEG22 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [13] call setupRasterIrq 
    jsr setupRasterIrq
  //SEG25 [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG26 [14] phi (byte*) main::dst#2 = (const byte[$3e8]) SCREEN_COPY#0 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN_COPY
    sta dst
    lda #>SCREEN_COPY
    sta dst+1
  //SEG27 [14] phi (byte*) main::src#2 = (const byte*) SCREEN#0 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta src
    lda #>SCREEN
    sta src+1
    jmp b3
  // Copy screen to screen copy
  //SEG28 [14] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG29 [14] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG30 [14] phi (byte*) main::src#2 = (byte*) main::src#1 [phi:main::@3->main::@3#1] -- register_copy 
    jmp b3
  //SEG31 main::@3
  b3:
  //SEG32 [15] *((byte*) main::dst#2) ← *((byte*) main::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
  //SEG33 [16] (byte*) main::src#1 ← ++ (byte*) main::src#2 -- pbuz1=_inc_pbuz1 
    inc src
    bne !+
    inc src+1
  !:
  //SEG34 [17] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
  //SEG35 [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda src+1
    cmp #>SCREEN+$3e8
    bne b3_from_b3
    lda src
    cmp #<SCREEN+$3e8
    bne b3_from_b3
  //SEG36 [19] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG37 main::@4
  b4:
  //SEG38 [20] call initSquareTables 
  //SEG39 [79] phi from main::@4 to initSquareTables [phi:main::@4->initSquareTables]
  initSquareTables_from_b4:
    jsr initSquareTables
  //SEG40 [21] phi from main::@4 main::@6 to main::@5 [phi:main::@4/main::@6->main::@5]
  b5_from_b4:
  b5_from_b6:
    jmp b5
  // Main loop
  //SEG41 main::@5
  b5:
  //SEG42 [22] call getCharToProcess 
  //SEG43 [51] phi from main::@5 to getCharToProcess [phi:main::@5->getCharToProcess]
  getCharToProcess_from_b5:
    jsr getCharToProcess
  //SEG44 [23] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1 -- vbuyy=vbuz1 
    ldy getCharToProcess.return_x
  //SEG45 [24] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1 -- vbuxx=vbuz1 
    ldx getCharToProcess.return_y
  //SEG46 [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1
    jmp b8
  //SEG47 main::@8
  b8:
  //SEG48 [26] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  //SEG49 [27] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0
  //SEG50 [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0
  //SEG51 [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda center_dist+1
    cmp #>NOT_FOUND
    bne b6
    lda center_dist
    cmp #<NOT_FOUND
    bne b6
    jmp b7
  //SEG52 main::@7
  b7:
  //SEG53 [30] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp b7
  //SEG54 main::@6
  b6:
  //SEG55 [31] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0 -- vbuz1=vbuyy 
    sty startProcessing.center_x
  //SEG56 [32] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0 -- vbuz1=vbuxx 
    stx startProcessing.center_y
  //SEG57 [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0
  //SEG58 [34] call startProcessing 
  //SEG59 [35] phi from main::@6 to startProcessing [phi:main::@6->startProcessing]
  startProcessing_from_b6:
    jsr startProcessing
    jmp b5_from_b6
}
//SEG60 startProcessing
// Start processing a char - by inserting it into the PROCESSING array
// startProcessing(byte zeropage($17) center_x, byte zeropage($18) center_y, word zeropage($f) center_dist)
startProcessing: {
    .label center_x = $17
    .label center_y = $18
    .label center_dist = $f
    .label freeIdx = 6
  //SEG61 [36] phi from startProcessing to startProcessing::@1 [phi:startProcessing->startProcessing::@1]
  b1_from_startProcessing:
  //SEG62 [36] phi (byte) startProcessing::freeIdx#6 = (byte) $ff [phi:startProcessing->startProcessing::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta freeIdx
    jmp b1
  //SEG63 startProcessing::@1
  b1:
  //SEG64 [37] phi from startProcessing::@1 to startProcessing::@2 [phi:startProcessing::@1->startProcessing::@2]
  b2_from_b1:
  //SEG65 [37] phi (byte) startProcessing::i#2 = (byte) 0 [phi:startProcessing::@1->startProcessing::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG66 [37] phi from startProcessing::@3 to startProcessing::@2 [phi:startProcessing::@3->startProcessing::@2]
  b2_from_b3:
  //SEG67 [37] phi (byte) startProcessing::i#2 = (byte) startProcessing::i#1 [phi:startProcessing::@3->startProcessing::@2#0] -- register_copy 
    jmp b2
  //SEG68 startProcessing::@2
  b2:
  //SEG69 [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG70 [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3 -- pwuc1_derefidx_vbuaa_neq_vwuc2_then_la1 
    tay
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    cmp #>NOT_FOUND
    bne b3
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    cmp #<NOT_FOUND
    bne b3
  //SEG71 [40] phi from startProcessing::@2 startProcessing::@7 to startProcessing::@4 [phi:startProcessing::@2/startProcessing::@7->startProcessing::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG72 [40] phi (byte) startProcessing::freeIdx#2 = (byte) startProcessing::i#2 [phi:startProcessing::@2/startProcessing::@7->startProcessing::@4#0] -- register_copy 
    jmp b4
  //SEG73 startProcessing::@4
  b4:
  //SEG74 [41] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@6 -- vbuxx_eq_vbuc1_then_la1 
    cpx #$ff
    beq b6
    jmp b5
  //SEG75 startProcessing::@5
  b5:
  //SEG76 [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2 -- vbuxx=vbuxx_rol_2 
    txa
    asl
    asl
    tax
  //SEG77 [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda center_x
    sta PROCESSING,x
  //SEG78 [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda center_y
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,x
  //SEG79 [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda center_dist
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,x
    lda center_dist+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,x
    jmp breturn
  //SEG80 startProcessing::@return
  breturn:
  //SEG81 [46] return 
    rts
  //SEG82 startProcessing::@6
  b6:
  //SEG83 [47] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2 -- vbuz1=vbuxx 
    stx freeIdx
  //SEG84 [36] phi from startProcessing::@6 to startProcessing::@1 [phi:startProcessing::@6->startProcessing::@1]
  b1_from_b6:
  //SEG85 [36] phi (byte) startProcessing::freeIdx#6 = (byte~) startProcessing::freeIdx#7 [phi:startProcessing::@6->startProcessing::@1#0] -- register_copy 
    jmp b1
  //SEG86 startProcessing::@3
  b3:
  //SEG87 [48] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG88 [49] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_PROCESSING-1+1
    bne b2_from_b3
    jmp b7
  //SEG89 startProcessing::@7
  b7:
  //SEG90 [50] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6 -- vbuxx=vbuz1 
    ldx freeIdx
    jmp b4_from_b7
}
//SEG91 getCharToProcess
// Find the non-space char closest to the center of the screen
// If no non-space char is found the distance will be 0xffff
getCharToProcess: {
    .label _9 = $19
    .label _10 = $19
    .label _11 = $19
    .label return_dist = $f
    .label x = $a
    .label dist = $f
    .label screen_line = 7
    .label y = 9
    .label return_x = $d
    .label return_y = $e
    .label closest_dist = $b
    .label closest_x = $d
    .label closest_y = $e
    .label _15 = $1b
    .label _16 = $19
  //SEG92 [52] phi from getCharToProcess to getCharToProcess::@1 [phi:getCharToProcess->getCharToProcess::@1]
  b1_from_getCharToProcess:
  //SEG93 [52] phi (byte) getCharToProcess::closest_y#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta closest_y
  //SEG94 [52] phi (byte) getCharToProcess::closest_x#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta closest_x
  //SEG95 [52] phi (word) getCharToProcess::closest_dist#8 = (const word) NOT_FOUND#0 [phi:getCharToProcess->getCharToProcess::@1#2] -- vwuz1=vwuc1 
    lda #<NOT_FOUND
    sta closest_dist
    lda #>NOT_FOUND
    sta closest_dist+1
  //SEG96 [52] phi (byte) getCharToProcess::y#7 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG97 [52] phi (byte*) getCharToProcess::screen_line#4 = (const byte[$3e8]) SCREEN_COPY#0 [phi:getCharToProcess->getCharToProcess::@1#4] -- pbuz1=pbuc1 
    lda #<SCREEN_COPY
    sta screen_line
    lda #>SCREEN_COPY
    sta screen_line+1
    jmp b1
  //SEG98 getCharToProcess::@1
  b1:
  //SEG99 [53] phi from getCharToProcess::@1 to getCharToProcess::@2 [phi:getCharToProcess::@1->getCharToProcess::@2]
  b2_from_b1:
  //SEG100 [53] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#9 [phi:getCharToProcess::@1->getCharToProcess::@2#0] -- register_copy 
  //SEG101 [53] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#9 [phi:getCharToProcess::@1->getCharToProcess::@2#1] -- register_copy 
  //SEG102 [53] phi (word) getCharToProcess::closest_dist#2 = (word) getCharToProcess::closest_dist#8 [phi:getCharToProcess::@1->getCharToProcess::@2#2] -- register_copy 
  //SEG103 [53] phi (byte) getCharToProcess::x#2 = (byte) 0 [phi:getCharToProcess::@1->getCharToProcess::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
  //SEG104 getCharToProcess::@2
  b2:
  //SEG105 [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy x
    lda (screen_line),y
    cmp #' '
    beq b11
    jmp b4
  //SEG106 getCharToProcess::@4
  b4:
  //SEG107 [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda x
    asl
    tax
  //SEG108 [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
  //SEG109 [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14) -- vwuz1=pwuc1_derefidx_vbuxx_plus_pwuc2_derefidx_vbuaa 
    tay
    lda SQUARES_X,x
    clc
    adc SQUARES_Y,y
    sta dist
    lda SQUARES_X+1,x
    adc SQUARES_Y+1,y
    sta dist+1
  //SEG110 [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 -- vwuz1_ge_vwuz2_then_la1 
    lda closest_dist+1
    cmp dist+1
    bne !+
    lda closest_dist
    cmp dist
    beq b12
  !:
    bcc b12
    jmp b5
  //SEG111 getCharToProcess::@5
  b5:
  //SEG112 [59] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2 -- vbuz1=vbuz2 
    lda x
    sta return_x
  //SEG113 [60] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7 -- vbuz1=vbuz2 
    lda y
    sta return_y
  //SEG114 [61] phi from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5 to getCharToProcess::@3 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3]
  b3_from_b11:
  b3_from_b12:
  b3_from_b5:
  //SEG115 [61] phi (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#0] -- register_copy 
  //SEG116 [61] phi (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#1] -- register_copy 
  //SEG117 [61] phi (word) getCharToProcess::return_dist#1 = (word~) getCharToProcess::return_dist#5 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#2] -- register_copy 
    jmp b3
  //SEG118 getCharToProcess::@3
  b3:
  //SEG119 [62] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG120 [63] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b10
    jmp b6
  //SEG121 getCharToProcess::@6
  b6:
  //SEG122 [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_line
    sta screen_line
    bcc !+
    inc screen_line+1
  !:
  //SEG123 [65] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG124 [66] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b9
    jmp b7
  //SEG125 getCharToProcess::@7
  b7:
  //SEG126 [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return -- vwuz1_eq_vwuc1_then_la1 
    lda return_dist
    cmp #<NOT_FOUND
    bne !+
    lda return_dist+1
    cmp #>NOT_FOUND
    beq breturn
  !:
    jmp b8
  //SEG127 getCharToProcess::@8
  b8:
  //SEG128 [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1 -- vwuz1=_word_vbuz2 
    lda return_y
    sta _9
    lda #0
    sta _9+1
  //SEG129 [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _9
    asl
    sta _15
    lda _9+1
    rol
    sta _15+1
    asl _15
    rol _15+1
  //SEG130 [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9 -- vwuz1=vwuz2_plus_vwuz1 
    lda _16
    clc
    adc _15
    sta _16
    lda _16+1
    adc _15+1
    sta _16+1
  //SEG131 [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _10
    rol _10+1
    asl _10
    rol _10+1
    asl _10
    rol _10+1
  //SEG132 [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _11
    adc #<SCREEN_COPY
    sta _11
    lda _11+1
    adc #>SCREEN_COPY
    sta _11+1
  //SEG133 [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    // clear the found char on the screen copy
    lda #' '
    ldy return_x
    sta (_11),y
    jmp breturn
  //SEG134 getCharToProcess::@return
  breturn:
  //SEG135 [74] return 
    rts
  //SEG136 getCharToProcess::@9
  b9:
  //SEG137 [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda return_dist
    sta closest_dist
    lda return_dist+1
    sta closest_dist+1
  //SEG138 [52] phi from getCharToProcess::@9 to getCharToProcess::@1 [phi:getCharToProcess::@9->getCharToProcess::@1]
  b1_from_b9:
  //SEG139 [52] phi (byte) getCharToProcess::closest_y#9 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#0] -- register_copy 
  //SEG140 [52] phi (byte) getCharToProcess::closest_x#9 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@9->getCharToProcess::@1#1] -- register_copy 
  //SEG141 [52] phi (word) getCharToProcess::closest_dist#8 = (word~) getCharToProcess::closest_dist#10 [phi:getCharToProcess::@9->getCharToProcess::@1#2] -- register_copy 
  //SEG142 [52] phi (byte) getCharToProcess::y#7 = (byte) getCharToProcess::y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#3] -- register_copy 
  //SEG143 [52] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#4] -- register_copy 
    jmp b1
  //SEG144 getCharToProcess::@10
  b10:
  //SEG145 [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda return_dist
    sta closest_dist
    lda return_dist+1
    sta closest_dist+1
  //SEG146 [53] phi from getCharToProcess::@10 to getCharToProcess::@2 [phi:getCharToProcess::@10->getCharToProcess::@2]
  b2_from_b10:
  //SEG147 [53] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@10->getCharToProcess::@2#0] -- register_copy 
  //SEG148 [53] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#1] -- register_copy 
  //SEG149 [53] phi (word) getCharToProcess::closest_dist#2 = (word~) getCharToProcess::closest_dist#12 [phi:getCharToProcess::@10->getCharToProcess::@2#2] -- register_copy 
  //SEG150 [53] phi (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#3] -- register_copy 
    jmp b2
  //SEG151 getCharToProcess::@12
  b12:
  //SEG152 [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2 -- vwuz1=vwuz2 
    lda closest_dist
    sta return_dist
    lda closest_dist+1
    sta return_dist+1
    jmp b3_from_b12
  //SEG153 getCharToProcess::@11
  b11:
  //SEG154 [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2 -- vwuz1=vwuz2 
    lda closest_dist
    sta return_dist
    lda closest_dist+1
    sta return_dist+1
    jmp b3_from_b11
}
//SEG155 initSquareTables
// initialize SQUARES table
initSquareTables: {
    .label _6 = $13
    .label _14 = $13
    .label x = $11
    .label y = $12
  //SEG156 [80] phi from initSquareTables to initSquareTables::@1 [phi:initSquareTables->initSquareTables::@1]
  b1_from_initSquareTables:
  //SEG157 [80] phi (byte) initSquareTables::x#2 = (byte) 0 [phi:initSquareTables->initSquareTables::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b1
  //SEG158 [80] phi from initSquareTables::@9 to initSquareTables::@1 [phi:initSquareTables::@9->initSquareTables::@1]
  b1_from_b9:
  //SEG159 [80] phi (byte) initSquareTables::x#2 = (byte) initSquareTables::x#1 [phi:initSquareTables::@9->initSquareTables::@1#0] -- register_copy 
    jmp b1
  //SEG160 initSquareTables::@1
  b1:
  //SEG161 [81] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$14
    bcc b2
    jmp b3
  //SEG162 initSquareTables::@3
  b3:
  //SEG163 [82] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14 -- vbuaa=vbuz1_minus_vbuc1 
    lda x
    sec
    sbc #$14
  //SEG164 [83] phi from initSquareTables::@2 initSquareTables::@3 to initSquareTables::@4 [phi:initSquareTables::@2/initSquareTables::@3->initSquareTables::@4]
  b4_from_b2:
  b4_from_b3:
  //SEG165 [83] phi (byte) initSquareTables::x_dist#0 = (byte~) initSquareTables::$4 [phi:initSquareTables::@2/initSquareTables::@3->initSquareTables::@4#0] -- register_copy 
    jmp b4
  //SEG166 initSquareTables::@4
  b4:
  //SEG167 [84] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0 -- vbuxx=vbuaa 
    tax
  //SEG168 [85] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  //SEG169 [86] call mul8u 
  //SEG170 [109] phi from initSquareTables::@4 to mul8u [phi:initSquareTables::@4->mul8u]
  mul8u_from_b4:
  //SEG171 [109] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:initSquareTables::@4->mul8u#0] -- register_copy 
  //SEG172 [109] phi (word) mul8u::mb#0 = (byte) mul8u::b#0 [phi:initSquareTables::@4->mul8u#1] -- vwuz1=vbuaa 
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG173 [87] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp b9
  //SEG174 initSquareTables::@9
  b9:
  //SEG175 [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2
  //SEG176 [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
  //SEG177 [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda _6
    sta SQUARES_X,y
    lda _6+1
    sta SQUARES_X+1,y
  //SEG178 [91] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG179 [92] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b1_from_b9
  //SEG180 [93] phi from initSquareTables::@9 to initSquareTables::@5 [phi:initSquareTables::@9->initSquareTables::@5]
  b5_from_b9:
  //SEG181 [93] phi (byte) initSquareTables::y#2 = (byte) 0 [phi:initSquareTables::@9->initSquareTables::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b5
  //SEG182 [93] phi from initSquareTables::@10 to initSquareTables::@5 [phi:initSquareTables::@10->initSquareTables::@5]
  b5_from_b10:
  //SEG183 [93] phi (byte) initSquareTables::y#2 = (byte) initSquareTables::y#1 [phi:initSquareTables::@10->initSquareTables::@5#0] -- register_copy 
    jmp b5
  //SEG184 initSquareTables::@5
  b5:
  //SEG185 [94] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda y
    cmp #$c
    bcc b6
    jmp b7
  //SEG186 initSquareTables::@7
  b7:
  //SEG187 [95] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c -- vbuaa=vbuz1_minus_vbuc1 
    lda y
    sec
    sbc #$c
  //SEG188 [96] phi from initSquareTables::@6 initSquareTables::@7 to initSquareTables::@8 [phi:initSquareTables::@6/initSquareTables::@7->initSquareTables::@8]
  b8_from_b6:
  b8_from_b7:
  //SEG189 [96] phi (byte) initSquareTables::y_dist#0 = (byte~) initSquareTables::$12 [phi:initSquareTables::@6/initSquareTables::@7->initSquareTables::@8#0] -- register_copy 
    jmp b8
  //SEG190 initSquareTables::@8
  b8:
  //SEG191 [97] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0 -- vbuxx=vbuaa 
    tax
  //SEG192 [98] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  //SEG193 [99] call mul8u 
  //SEG194 [109] phi from initSquareTables::@8 to mul8u [phi:initSquareTables::@8->mul8u]
  mul8u_from_b8:
  //SEG195 [109] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:initSquareTables::@8->mul8u#0] -- register_copy 
  //SEG196 [109] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:initSquareTables::@8->mul8u#1] -- vwuz1=vbuaa 
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG197 [100] (word) mul8u::return#3 ← (word) mul8u::res#2
    jmp b10
  //SEG198 initSquareTables::@10
  b10:
  //SEG199 [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3
  //SEG200 [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
  //SEG201 [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda _14
    sta SQUARES_Y,y
    lda _14+1
    sta SQUARES_Y+1,y
  //SEG202 [104] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG203 [105] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b5_from_b10
    jmp breturn
  //SEG204 initSquareTables::@return
  breturn:
  //SEG205 [106] return 
    rts
  //SEG206 initSquareTables::@6
  b6:
  //SEG207 [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2 -- vbuaa=vbuc1_minus_vbuz1 
    lda #$c
    sec
    sbc y
    jmp b8_from_b6
  //SEG208 initSquareTables::@2
  b2:
  //SEG209 [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2 -- vbuaa=vbuc1_minus_vbuz1 
    lda #$14
    sec
    sbc x
    jmp b4_from_b2
}
//SEG210 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $15
    .label res = $13
    .label return = $13
  //SEG211 [110] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  b1_from_mul8u:
  //SEG212 [110] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG213 [110] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
  //SEG214 [110] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp b1
  //SEG215 mul8u::@1
  b1:
  //SEG216 [111] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
    jmp breturn
  //SEG217 mul8u::@return
  breturn:
  //SEG218 [112] return 
    rts
  //SEG219 mul8u::@2
  b2:
  //SEG220 [113] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG221 [114] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    jmp b4
  //SEG222 mul8u::@4
  b4:
  //SEG223 [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG224 [116] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  b3_from_b2:
  b3_from_b4:
  //SEG225 [116] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp b3
  //SEG226 mul8u::@3
  b3:
  //SEG227 [117] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG228 [118] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG229 [110] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  b1_from_b3:
  //SEG230 [110] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG231 [110] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG232 [110] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG233 setupRasterIrq
// Setup Raster IRQ
setupRasterIrq: {
    .label irqRoutine = irqTop
  //SEG234 asm { sei  }
    sei
  //SEG235 [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG236 [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG237 [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    jmp b1
  //SEG238 setupRasterIrq::@1
  b1:
  //SEG239 [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    jmp b2
  //SEG240 setupRasterIrq::@2
  b2:
  //SEG241 [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG242 [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG243 [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irqRoutine
    sta HARDWARE_IRQ
    lda #>irqRoutine
    sta HARDWARE_IRQ+1
  //SEG244 asm { cli  }
    cli
    jmp breturn
  //SEG245 setupRasterIrq::@return
  breturn:
  //SEG246 [128] return 
    rts
}
//SEG247 irqBottom
// Raster Interrupt at the middle of the screen
irqBottom: {
  //SEG248 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG249 [130] phi from irqBottom to irqBottom::@1 [phi:irqBottom->irqBottom::@1]
  b1_from_irqBottom:
  //SEG250 [130] phi (byte) irqBottom::i#2 = (byte) 0 [phi:irqBottom->irqBottom::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG251 [130] phi from irqBottom::@1 to irqBottom::@1 [phi:irqBottom::@1->irqBottom::@1]
  b1_from_b1:
  //SEG252 [130] phi (byte) irqBottom::i#2 = (byte) irqBottom::i#1 [phi:irqBottom::@1->irqBottom::@1#0] -- register_copy 
    jmp b1
  //SEG253 irqBottom::@1
  b1:
  //SEG254 [131] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG255 [132] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b1_from_b1
    jmp b2
  //SEG256 irqBottom::@2
  b2:
  //SEG257 [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
  //SEG258 [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
  //SEG259 [135] call processChars 
  //SEG260 [142] phi from irqBottom::@2 to processChars [phi:irqBottom::@2->processChars]
  processChars_from_b2:
    jsr processChars
    jmp b3
  //SEG261 irqBottom::@3
  b3:
  //SEG262 [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG263 [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG264 [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the top of the screen
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG265 [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() -- _deref_pptc1=pprc2 
    lda #<irqTop
    sta HARDWARE_IRQ
    lda #>irqTop
    sta HARDWARE_IRQ+1
  //SEG266 [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG267 irqBottom::@return
  breturn:
  //SEG268 [141] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG269 processChars
// Process any chars in the PROCESSING array
processChars: {
    .label _3 = $1f
    .label _4 = $1f
    .label _5 = $1f
    .label _7 = $23
    .label _8 = $23
    .label _9 = $23
    .label processing_x = $1d
    .label processing_y = $1e
    .label _22 = $21
    .label _23 = $1f
    .label _25 = $25
    .label _26 = $23
  //SEG270 [143] phi from processChars to processChars::@1 [phi:processChars->processChars::@1]
  b1_from_processChars:
  //SEG271 [143] phi (byte) processChars::i#2 = (byte) 0 [phi:processChars->processChars::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG272 [143] phi from processChars::@2 to processChars::@1 [phi:processChars::@2->processChars::@1]
  b1_from_b2:
  //SEG273 [143] phi (byte) processChars::i#2 = (byte) processChars::i#1 [phi:processChars::@2->processChars::@1#0] -- register_copy 
    jmp b1
  //SEG274 processChars::@1
  b1:
  //SEG275 [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG276 [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2 -- pwuc1_derefidx_vbuaa_eq_vwuc2_then_la1 
    tay
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    cmp #<NOT_FOUND
    bne !+
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    cmp #>NOT_FOUND
    beq b2
  !:
    jmp b5
  //SEG277 processChars::@5
  b5:
  //SEG278 [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2 -- vbuyy=vbuxx_rol_2 
    txa
    asl
    asl
    tay
  //SEG279 [147] (byte) processChars::processing_x#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$15) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda PROCESSING,y
    sta processing_x
  //SEG280 [148] (byte) processChars::processing_y#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) processChars::$15) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,y
    sta processing_y
  //SEG281 [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0 -- vwuz1=_word_vbuz2 
    lda processing_y
    sta _3
    lda #0
    sta _3+1
  //SEG282 [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _3
    asl
    sta _22
    lda _3+1
    rol
    sta _22+1
    asl _22
    rol _22+1
  //SEG283 [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3 -- vwuz1=vwuz2_plus_vwuz1 
    lda _23
    clc
    adc _22
    sta _23
    lda _23+1
    adc _22+1
    sta _23+1
  //SEG284 [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _4
    rol _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG285 [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _5
    adc #<COLS
    sta _5
    lda _5+1
    adc #>COLS
    sta _5+1
  //SEG286 [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0 -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #WHITE
    ldy processing_x
    sta (_5),y
  //SEG287 [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0 -- vwuz1=_word_vbuz2 
    lda processing_y
    sta _7
    lda #0
    sta _7+1
  //SEG288 [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _7
    asl
    sta _25
    lda _7+1
    rol
    sta _25+1
    asl _25
    rol _25+1
  //SEG289 [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda _26
    clc
    adc _25
    sta _26
    lda _26+1
    adc _25+1
    sta _26+1
  //SEG290 [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _8
    rol _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG291 [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _9
    adc #<SCREEN
    sta _9
    lda _9+1
    adc #>SCREEN
    sta _9+1
  //SEG292 [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy processing_x
    lda (_9),y
    cmp #' '
    beq b3
    jmp b6
  //SEG293 processChars::@6
  b6:
  //SEG294 [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4 -- pbuz1_derefidx_vbuz2_gt_vbuc1_then_la1 
    ldy processing_x
    lda (_9),y
    cmp #' '
    beq !+
    bcs b4
  !:
    jmp b7
  //SEG295 processChars::@7
  b7:
  //SEG296 [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) -- pbuz1_derefidx_vbuz2=_inc_pbuz1_derefidx_vbuz2 
    ldy processing_x
    lda (_9),y
    clc
    adc #1
    sta (_9),y
    jmp b2
  //SEG297 processChars::@2
  b2:
  //SEG298 [163] (byte) processChars::i#1 ← ++ (byte) processChars::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG299 [164] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_PROCESSING-1+1
    bne b1_from_b2
    jmp breturn
  //SEG300 processChars::@return
  breturn:
  //SEG301 [165] return 
    rts
  //SEG302 processChars::@4
  b4:
  //SEG303 [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) -- pbuz1_derefidx_vbuz2=_dec_pbuz1_derefidx_vbuz2 
    ldy processing_x
    lda (_9),y
    sec
    sbc #1
    sta (_9),y
    jmp b2
  //SEG304 processChars::@3
  b3:
  //SEG305 [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG306 [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0 -- pwuc1_derefidx_vbuaa=vwuc2 
    tay
    lda #<NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    lda #>NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    jmp b2
}
//SEG307 irqTop
// Raster Interrupt at the top of the screen
irqTop: {
  //SEG308 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG309 [170] phi from irqTop to irqTop::@1 [phi:irqTop->irqTop::@1]
  b1_from_irqTop:
  //SEG310 [170] phi (byte) irqTop::i#2 = (byte) 0 [phi:irqTop->irqTop::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG311 [170] phi from irqTop::@1 to irqTop::@1 [phi:irqTop::@1->irqTop::@1]
  b1_from_b1:
  //SEG312 [170] phi (byte) irqTop::i#2 = (byte) irqTop::i#1 [phi:irqTop::@1->irqTop::@1#0] -- register_copy 
    jmp b1
  //SEG313 irqTop::@1
  b1:
  //SEG314 [171] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG315 [172] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b1_from_b1
    jmp b2
  //SEG316 irqTop::@2
  b2:
  //SEG317 [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
  //SEG318 [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
  //SEG319 [175] phi from irqTop::@2 to irqTop::@3 [phi:irqTop::@2->irqTop::@3]
  b3_from_b2:
  //SEG320 [175] phi (byte) irqTop::i1#2 = (byte) 0 [phi:irqTop::@2->irqTop::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG321 [175] phi from irqTop::@3 to irqTop::@3 [phi:irqTop::@3->irqTop::@3]
  b3_from_b3:
  //SEG322 [175] phi (byte) irqTop::i1#2 = (byte) irqTop::i1#1 [phi:irqTop::@3->irqTop::@3#0] -- register_copy 
    jmp b3
  //SEG323 irqTop::@3
  b3:
  //SEG324 [176] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG325 [177] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3_from_b3
    jmp b4
  //SEG326 irqTop::@4
  b4:
  //SEG327 [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG328 [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG329 [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the middle of the screen
    lda #RASTER_IRQ_MIDDLE
    sta RASTER
  //SEG330 [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() -- _deref_pptc1=pprc2 
    lda #<irqBottom
    sta HARDWARE_IRQ
    lda #>irqBottom
    sta HARDWARE_IRQ+1
  //SEG331 [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG332 irqTop::@return
  breturn:
  //SEG333 [183] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
  // Copy of the screen used for finding chars to process
  SCREEN_COPY: .fill $3e8, 0
  // SQUARES_X[i] = (i-20)*(i-20)
  SQUARES_X: .fill 2*$28, 0
  // SQUARES_Y[i] = (i-12)*(i-12)
  SQUARES_Y: .fill 2*$19, 0
  // Chars currently being processed in the interrupt
  PROCESSING: .fill 4*NUM_PROCESSING, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b8
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b10
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #WHITE
Removing instruction lda processing_y
Removing instruction ldy processing_x
Removing instruction lda #WHITE
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b3_from_b3 with b3
Replacing label b2_from_b3 with b2
Replacing label b4_from_b7 with b4
Replacing label b3_from_b12 with b3
Replacing label b3_from_b11 with b3
Replacing label b1_from_b9 with b1
Replacing label b5_from_b10 with b5
Replacing label b8_from_b6 with b8
Replacing label b4_from_b2 with b4
Replacing label b3_from_b2 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction b3_from_b3:
Removing instruction b4_from_b3:
Removing instruction initSquareTables_from_b4:
Removing instruction b5_from_b4:
Removing instruction getCharToProcess_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b4_from_b2:
Removing instruction b4_from_b7:
Removing instruction b2_from_b1:
Removing instruction b3_from_b11:
Removing instruction b3_from_b12:
Removing instruction b3_from_b5:
Removing instruction b1_from_b9:
Removing instruction b4_from_b2:
Removing instruction b4_from_b3:
Removing instruction b5_from_b10:
Removing instruction b8_from_b6:
Removing instruction b8_from_b7:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Removing instruction b1_from_b1:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b1_from_b1:
Removing instruction b3_from_b3:
Removing instruction breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b4:
Removing instruction b5:
Removing instruction b8:
Removing instruction startProcessing_from_b6:
Removing instruction b1_from_startProcessing:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b6:
Removing instruction b7:
Removing instruction b1_from_getCharToProcess:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b1_from_b9:
Removing instruction b2_from_b10:
Removing instruction b1_from_initSquareTables:
Removing instruction b3:
Removing instruction mul8u_from_b4:
Removing instruction b9:
Removing instruction b5_from_b9:
Removing instruction b7:
Removing instruction mul8u_from_b8:
Removing instruction b10:
Removing instruction breturn:
Removing instruction b1_from_mul8u:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_irqBottom:
Removing instruction b2:
Removing instruction processChars_from_b2:
Removing instruction b3:
Removing instruction b1_from_processChars:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_irqTop:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label b5_from_b6 to b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda x with TYA
Removing instruction lda #$28
Removing instruction lda x
Removing instruction lda y
Removing instruction ldy processing_x
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [590] bne b1 to beq
Fixing long branch [197] beq b11 to bne
Fixing long branch [218] beq b12 to bne
Fixing long branch [222] bcc b12 to bcs
Fixing long branch [504] beq b2 to bne

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (byte*) 53281
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = (byte*) 56333
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte) $7f
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(void()**) HARDWARE_IRQ
(const void()**) HARDWARE_IRQ#0 HARDWARE_IRQ = (void()**) 65534
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = (byte*) 53274
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte) 1
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = (byte*) 53273
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte) $e
(word) NOT_FOUND
(const word) NOT_FOUND#0 NOT_FOUND = (word) $ffff
(byte) NUM_PROCESSING
(const byte) NUM_PROCESSING#0 NUM_PROCESSING = (byte) $10
(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST OFFSET_STRUCT_PROCESSINGCHAR_DIST = (byte) 2
(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y OFFSET_STRUCT_PROCESSINGCHAR_Y = (byte) 1
(struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING
(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 PROCESSING = { fill( NUM_PROCESSING#0, 0) }
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte*) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = (byte*) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte) 7
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte) $35
(word) ProcessingChar::dist
(byte) ProcessingChar::x
(byte) ProcessingChar::y
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte) RASTER_IRQ_MIDDLE
(const byte) RASTER_IRQ_MIDDLE#0 RASTER_IRQ_MIDDLE = (byte) $ff
(byte) RASTER_IRQ_TOP
(const byte) RASTER_IRQ_TOP#0 RASTER_IRQ_TOP = (byte) $30
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte[$3e8]) SCREEN_COPY
(const byte[$3e8]) SCREEN_COPY#0 SCREEN_COPY = { fill( $3e8, 0) }
(word[$28]) SQUARES_X
(const word[$28]) SQUARES_X#0 SQUARES_X = { fill( $28, 0) }
(word[$19]) SQUARES_Y
(const word[$19]) SQUARES_Y#0 SQUARES_Y = { fill( $19, 0) }
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = (byte*) 53265
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte) 1
(struct ProcessingChar()) getCharToProcess()
(word~) getCharToProcess::$10 $10 zp ZP_WORD:25 4.0
(byte*~) getCharToProcess::$11 $11 zp ZP_WORD:25 4.0
(byte~) getCharToProcess::$13 reg byte x 1001.0
(byte~) getCharToProcess::$14 reg byte a 2002.0
(word) getCharToProcess::$15 $15 zp ZP_WORD:27 4.0
(word) getCharToProcess::$16 $16 zp ZP_WORD:25 4.0
(word~) getCharToProcess::$9 $9 zp ZP_WORD:25 3.0
(label) getCharToProcess::@1
(label) getCharToProcess::@10
(label) getCharToProcess::@11
(label) getCharToProcess::@12
(label) getCharToProcess::@2
(label) getCharToProcess::@3
(label) getCharToProcess::@4
(label) getCharToProcess::@5
(label) getCharToProcess::@6
(label) getCharToProcess::@7
(label) getCharToProcess::@8
(label) getCharToProcess::@9
(label) getCharToProcess::@return
(struct ProcessingChar) getCharToProcess::closest
(word) getCharToProcess::closest_dist
(word~) getCharToProcess::closest_dist#10 closest_dist zp ZP_WORD:11 202.0
(word~) getCharToProcess::closest_dist#12 closest_dist zp ZP_WORD:11 2002.0
(word) getCharToProcess::closest_dist#2 closest_dist zp ZP_WORD:11 684.1666666666667
(word) getCharToProcess::closest_dist#8 closest_dist zp ZP_WORD:11 202.0
(byte) getCharToProcess::closest_x
(byte) getCharToProcess::closest_x#7 closest_x zp ZP_BYTE:13 388.0
(byte) getCharToProcess::closest_x#9 closest_x zp ZP_BYTE:13 202.0
(byte) getCharToProcess::closest_y
(byte) getCharToProcess::closest_y#7 closest_y zp ZP_BYTE:14 388.0
(byte) getCharToProcess::closest_y#9 closest_y zp ZP_BYTE:14 202.0
(word) getCharToProcess::dist
(word) getCharToProcess::dist#0 dist zp ZP_WORD:15 750.75
(struct ProcessingChar) getCharToProcess::return
(word) getCharToProcess::return_dist
(word) getCharToProcess::return_dist#0 return_dist zp ZP_WORD:15 7.333333333333333
(word) getCharToProcess::return_dist#1 return_dist zp ZP_WORD:15 242.23529411764704
(word~) getCharToProcess::return_dist#5 return_dist zp ZP_WORD:15 2002.0
(word~) getCharToProcess::return_dist#6 return_dist zp ZP_WORD:15 2002.0
(byte) getCharToProcess::return_x
(byte) getCharToProcess::return_x#0 reg byte y 7.333333333333333
(byte) getCharToProcess::return_x#1 return_x zp ZP_BYTE:13 242.23529411764704
(byte~) getCharToProcess::return_x#7 return_x zp ZP_BYTE:13 1001.0
(byte) getCharToProcess::return_y
(byte) getCharToProcess::return_y#0 reg byte x 7.333333333333333
(byte) getCharToProcess::return_y#1 return_y zp ZP_BYTE:14 228.66666666666669
(byte~) getCharToProcess::return_y#7 return_y zp ZP_BYTE:14 2002.0
(byte*) getCharToProcess::screen_line
(byte*) getCharToProcess::screen_line#1 screen_line zp ZP_WORD:7 50.5
(byte*) getCharToProcess::screen_line#4 screen_line zp ZP_WORD:7 80.2
(byte) getCharToProcess::x
(byte) getCharToProcess::x#1 x zp ZP_BYTE:10 1001.0
(byte) getCharToProcess::x#2 x zp ZP_BYTE:10 455.0
(byte) getCharToProcess::y
(byte) getCharToProcess::y#1 y zp ZP_BYTE:9 101.0
(byte) getCharToProcess::y#7 y zp ZP_BYTE:9 137.75
(void()) initSquareTables()
(byte~) initSquareTables::$10 reg byte a 22.0
(byte~) initSquareTables::$12 reg byte a 22.0
(word~) initSquareTables::$14 $14 zp ZP_WORD:19 11.0
(byte~) initSquareTables::$16 reg byte a 22.0
(byte~) initSquareTables::$17 reg byte a 22.0
(byte~) initSquareTables::$2 reg byte a 22.0
(byte~) initSquareTables::$4 reg byte a 22.0
(word~) initSquareTables::$6 $6 zp ZP_WORD:19 11.0
(label) initSquareTables::@1
(label) initSquareTables::@10
(label) initSquareTables::@2
(label) initSquareTables::@3
(label) initSquareTables::@4
(label) initSquareTables::@5
(label) initSquareTables::@6
(label) initSquareTables::@7
(label) initSquareTables::@8
(label) initSquareTables::@9
(label) initSquareTables::@return
(byte) initSquareTables::x
(byte) initSquareTables::x#1 x zp ZP_BYTE:17 16.5
(byte) initSquareTables::x#2 x zp ZP_BYTE:17 5.5
(byte) initSquareTables::x_dist
(byte) initSquareTables::x_dist#0 reg byte a 22.0
(byte) initSquareTables::y
(byte) initSquareTables::y#1 y zp ZP_BYTE:18 16.5
(byte) initSquareTables::y#2 y zp ZP_BYTE:18 5.5
(byte) initSquareTables::y_dist
(byte) initSquareTables::y_dist#0 reg byte a 22.0
interrupt(HARDWARE_ALL)(void()) irqBottom()
(label) irqBottom::@1
(label) irqBottom::@2
(label) irqBottom::@3
(label) irqBottom::@return
(byte) irqBottom::i
(byte) irqBottom::i#1 reg byte x 16.5
(byte) irqBottom::i#2 reg byte x 22.0
interrupt(HARDWARE_ALL)(void()) irqTop()
(label) irqTop::@1
(label) irqTop::@2
(label) irqTop::@3
(label) irqTop::@4
(label) irqTop::@return
(byte) irqTop::i
(byte) irqTop::i#1 reg byte x 16.5
(byte) irqTop::i#2 reg byte x 22.0
(byte) irqTop::i1
(byte) irqTop::i1#1 reg byte x 16.5
(byte) irqTop::i1#2 reg byte x 22.0
(void()) main()
(byte~) main::$14 reg byte x 14.666666666666666
(struct ProcessingChar~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(struct ProcessingChar) main::center
(word) main::center_dist
(word) main::center_dist#0 center_dist zp ZP_WORD:15 8.25
(byte) main::center_x
(byte) main::center_x#0 reg byte y 5.5
(byte) main::center_y
(byte) main::center_y#0 reg byte x 5.5
(byte*) main::dst
(byte*) main::dst#1 dst zp ZP_WORD:4 11.0
(byte*) main::dst#2 dst zp ZP_WORD:4 11.0
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 6.6000000000000005
(byte*) main::src
(byte*) main::src#1 src zp ZP_WORD:2 11.0
(byte*) main::src#2 src zp ZP_WORD:2 16.5
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 202.0
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 101.0
(byte) mul8u::a#1 reg byte x 11.0
(byte) mul8u::a#2 reg byte x 11.0
(byte) mul8u::a#3 reg byte x 67.66666666666666
(byte) mul8u::a#6 reg byte x 24.0
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 22.0
(byte) mul8u::b#1 reg byte a 22.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp ZP_WORD:21 24.0
(word) mul8u::mb#1 mb zp ZP_WORD:21 202.0
(word) mul8u::mb#2 mb zp ZP_WORD:21 43.57142857142858
(word) mul8u::res
(word) mul8u::res#1 res zp ZP_WORD:19 202.0
(word) mul8u::res#2 res zp ZP_WORD:19 46.42857142857143
(word) mul8u::res#6 res zp ZP_WORD:19 101.0
(word) mul8u::return
(word) mul8u::return#2 return zp ZP_WORD:19 22.0
(word) mul8u::return#3 return zp ZP_WORD:19 22.0
(void()) processChars()
(byte~) processChars::$14 reg byte a 22.0
(byte~) processChars::$15 reg byte y 16.5
(byte~) processChars::$16 reg byte a 22.0
(word) processChars::$22 $22 zp ZP_WORD:33 22.0
(word) processChars::$23 $23 zp ZP_WORD:31 22.0
(word) processChars::$25 $25 zp ZP_WORD:37 22.0
(word) processChars::$26 $26 zp ZP_WORD:35 22.0
(word~) processChars::$3 $3 zp ZP_WORD:31 16.5
(word~) processChars::$4 $4 zp ZP_WORD:31 22.0
(byte*~) processChars::$5 $5 zp ZP_WORD:31 22.0
(word~) processChars::$7 $7 zp ZP_WORD:35 16.5
(word~) processChars::$8 $8 zp ZP_WORD:35 22.0
(byte*~) processChars::$9 $9 zp ZP_WORD:35 25.666666666666668
(label) processChars::@1
(label) processChars::@2
(label) processChars::@3
(label) processChars::@4
(label) processChars::@5
(label) processChars::@6
(label) processChars::@7
(label) processChars::@return
(byte) processChars::i
(byte) processChars::i#1 reg byte x 16.5
(byte) processChars::i#2 reg byte x 2.391304347826087
(struct ProcessingChar) processChars::processing
(byte*) processChars::processing_ptr
(byte) processChars::processing_x
(byte) processChars::processing_x#0 processing_x zp ZP_BYTE:29 5.866666666666666
(byte) processChars::processing_y
(byte) processChars::processing_y#0 processing_y zp ZP_BYTE:30 1.5714285714285714
(void()) setupRasterIrq((word) setupRasterIrq::raster , (void()*) setupRasterIrq::irqRoutine)
(label) setupRasterIrq::@1
(label) setupRasterIrq::@2
(label) setupRasterIrq::@return
(void()*) setupRasterIrq::irqRoutine
(const void()*) setupRasterIrq::irqRoutine#0 irqRoutine = &interrupt(HARDWARE_ALL)(void()) irqTop()
(word) setupRasterIrq::raster
(void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (word) startProcessing::center_dist)
(byte~) startProcessing::$5 reg byte a 2002.0
(byte~) startProcessing::$6 reg byte x 2.6666666666666665
(label) startProcessing::@1
(label) startProcessing::@2
(label) startProcessing::@3
(label) startProcessing::@4
(label) startProcessing::@5
(label) startProcessing::@6
(label) startProcessing::@7
(label) startProcessing::@return
(struct ProcessingChar) startProcessing::center
(word) startProcessing::center_dist
(word) startProcessing::center_dist#0 center_dist zp ZP_WORD:15 0.8666666666666666
(byte) startProcessing::center_x
(byte) startProcessing::center_x#0 center_x zp ZP_BYTE:23 0.8666666666666666
(byte) startProcessing::center_y
(byte) startProcessing::center_y#0 center_y zp ZP_BYTE:24 0.8666666666666666
(byte) startProcessing::freeIdx
(byte) startProcessing::freeIdx#2 reg byte x 653.0
(byte) startProcessing::freeIdx#6 freeIdx zp ZP_BYTE:6 33.666666666666664
(byte~) startProcessing::freeIdx#7 freeIdx zp ZP_BYTE:6 202.0
(byte~) startProcessing::freeIdx#8 reg byte x 202.0
(byte) startProcessing::i
(byte) startProcessing::i#1 reg byte x 1501.5
(byte) startProcessing::i#2 reg byte x 1334.6666666666667

reg byte y [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ main::src#2 main::src#1 ]
zp ZP_WORD:4 [ main::dst#2 main::dst#1 ]
zp ZP_BYTE:6 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
reg byte x [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
zp ZP_WORD:7 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#1 ]
zp ZP_BYTE:9 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
zp ZP_BYTE:10 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
zp ZP_WORD:11 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
zp ZP_BYTE:13 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
zp ZP_BYTE:14 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
zp ZP_WORD:15 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 getCharToProcess::return_dist#0 main::center_dist#0 startProcessing::center_dist#0 ]
zp ZP_BYTE:17 [ initSquareTables::x#2 initSquareTables::x#1 ]
reg byte a [ initSquareTables::x_dist#0 initSquareTables::$4 initSquareTables::$2 ]
zp ZP_BYTE:18 [ initSquareTables::y#2 initSquareTables::y#1 ]
reg byte a [ initSquareTables::y_dist#0 initSquareTables::$12 initSquareTables::$10 ]
reg byte a [ mul8u::b#1 ]
reg byte a [ mul8u::b#0 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp ZP_WORD:19 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 initSquareTables::$6 initSquareTables::$14 ]
zp ZP_WORD:21 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte x [ irqBottom::i#2 irqBottom::i#1 ]
reg byte x [ processChars::i#2 processChars::i#1 ]
reg byte x [ irqTop::i#2 irqTop::i#1 ]
reg byte x [ irqTop::i1#2 irqTop::i1#1 ]
reg byte x [ main::$14 ]
reg byte y [ getCharToProcess::return_x#0 ]
reg byte x [ getCharToProcess::return_y#0 ]
reg byte y [ main::center_x#0 ]
reg byte x [ main::center_y#0 ]
zp ZP_BYTE:23 [ startProcessing::center_x#0 ]
zp ZP_BYTE:24 [ startProcessing::center_y#0 ]
reg byte a [ startProcessing::$5 ]
reg byte x [ startProcessing::$6 ]
reg byte x [ getCharToProcess::$13 ]
reg byte a [ getCharToProcess::$14 ]
zp ZP_WORD:25 [ getCharToProcess::$9 getCharToProcess::$16 getCharToProcess::$10 getCharToProcess::$11 ]
zp ZP_WORD:27 [ getCharToProcess::$15 ]
reg byte a [ initSquareTables::$16 ]
reg byte a [ initSquareTables::$17 ]
reg byte a [ mul8u::$1 ]
reg byte a [ processChars::$14 ]
reg byte y [ processChars::$15 ]
zp ZP_BYTE:29 [ processChars::processing_x#0 ]
zp ZP_BYTE:30 [ processChars::processing_y#0 ]
zp ZP_WORD:31 [ processChars::$3 processChars::$23 processChars::$4 processChars::$5 ]
zp ZP_WORD:33 [ processChars::$22 ]
zp ZP_WORD:35 [ processChars::$7 processChars::$26 processChars::$8 processChars::$9 ]
zp ZP_WORD:37 [ processChars::$25 ]
reg byte a [ processChars::$16 ]


FINAL ASSEMBLER
Score: 212675

//SEG0 File Comments
// Black Hole at the center of the BASIC screen sucking in any letters
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const OFFSET_STRUCT_PROCESSINGCHAR_Y = 1
  .const OFFSET_STRUCT_PROCESSINGCHAR_DIST = 2
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .const WHITE = 1
  .const BLUE = 6
  .const LIGHT_BLUE = $e
  .label SCREEN = $400
  // Distance value meaning not found
  .const NOT_FOUND = $ffff
  .const NUM_PROCESSING = $10
  .const RASTER_IRQ_TOP = $30
  .const RASTER_IRQ_MIDDLE = $ff
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label src = 2
    .label dst = 4
    .label center_dist = $f
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  // Init processing array
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte~) main::$14 ← (byte) main::i#2 << (byte) 2 -- vbuxx=vbuyy_rol_2 
    tya
    asl
    asl
    tax
  //SEG17 [7] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$14) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING,x
  //SEG18 [8] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$14) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,x
  //SEG19 [9] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$14) ← (const word) NOT_FOUND#0 -- pwuc1_derefidx_vbuxx=vwuc2 
    lda #<NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,x
    lda #>NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,x
  //SEG20 [10] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG21 [11] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #NUM_PROCESSING-1+1
    bne b1
  //SEG22 [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG23 main::@2
  //SEG24 [13] call setupRasterIrq 
    jsr setupRasterIrq
  //SEG25 [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG26 [14] phi (byte*) main::dst#2 = (const byte[$3e8]) SCREEN_COPY#0 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<SCREEN_COPY
    sta dst
    lda #>SCREEN_COPY
    sta dst+1
  //SEG27 [14] phi (byte*) main::src#2 = (const byte*) SCREEN#0 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta src
    lda #>SCREEN
    sta src+1
  // Copy screen to screen copy
  //SEG28 [14] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG29 [14] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG30 [14] phi (byte*) main::src#2 = (byte*) main::src#1 [phi:main::@3->main::@3#1] -- register_copy 
  //SEG31 main::@3
  b3:
  //SEG32 [15] *((byte*) main::dst#2) ← *((byte*) main::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
  //SEG33 [16] (byte*) main::src#1 ← ++ (byte*) main::src#2 -- pbuz1=_inc_pbuz1 
    inc src
    bne !+
    inc src+1
  !:
  //SEG34 [17] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
  //SEG35 [18] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@3 -- pbuz1_neq_pbuc1_then_la1 
    lda src+1
    cmp #>SCREEN+$3e8
    bne b3
    lda src
    cmp #<SCREEN+$3e8
    bne b3
  //SEG36 [19] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG37 main::@4
  //SEG38 [20] call initSquareTables 
  //SEG39 [79] phi from main::@4 to initSquareTables [phi:main::@4->initSquareTables]
    jsr initSquareTables
  //SEG40 [21] phi from main::@4 main::@6 to main::@5 [phi:main::@4/main::@6->main::@5]
  b2:
  // Main loop
  //SEG41 main::@5
  //SEG42 [22] call getCharToProcess 
  //SEG43 [51] phi from main::@5 to getCharToProcess [phi:main::@5->getCharToProcess]
    jsr getCharToProcess
  //SEG44 [23] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1 -- vbuyy=vbuz1 
    ldy getCharToProcess.return_x
  //SEG45 [24] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1 -- vbuxx=vbuz1 
    ldx getCharToProcess.return_y
  //SEG46 [25] (word) getCharToProcess::return_dist#0 ← (word) getCharToProcess::return_dist#1
  //SEG47 main::@8
  //SEG48 [26] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  //SEG49 [27] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0
  //SEG50 [28] (word) main::center_dist#0 ← (word) getCharToProcess::return_dist#0
  //SEG51 [29] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@6 -- vwuz1_neq_vwuc1_then_la1 
    lda center_dist+1
    cmp #>NOT_FOUND
    bne b6
    lda center_dist
    cmp #<NOT_FOUND
    bne b6
  //SEG52 main::@7
  b7:
  //SEG53 [30] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp b7
  //SEG54 main::@6
  b6:
  //SEG55 [31] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0 -- vbuz1=vbuyy 
    sty startProcessing.center_x
  //SEG56 [32] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0 -- vbuz1=vbuxx 
    stx startProcessing.center_y
  //SEG57 [33] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0
  //SEG58 [34] call startProcessing 
  //SEG59 [35] phi from main::@6 to startProcessing [phi:main::@6->startProcessing]
    jsr startProcessing
    jmp b2
}
//SEG60 startProcessing
// Start processing a char - by inserting it into the PROCESSING array
// startProcessing(byte zeropage($17) center_x, byte zeropage($18) center_y, word zeropage($f) center_dist)
startProcessing: {
    .label center_x = $17
    .label center_y = $18
    .label center_dist = $f
    .label freeIdx = 6
  //SEG61 [36] phi from startProcessing to startProcessing::@1 [phi:startProcessing->startProcessing::@1]
  //SEG62 [36] phi (byte) startProcessing::freeIdx#6 = (byte) $ff [phi:startProcessing->startProcessing::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta freeIdx
  //SEG63 startProcessing::@1
  b1:
  //SEG64 [37] phi from startProcessing::@1 to startProcessing::@2 [phi:startProcessing::@1->startProcessing::@2]
  //SEG65 [37] phi (byte) startProcessing::i#2 = (byte) 0 [phi:startProcessing::@1->startProcessing::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG66 [37] phi from startProcessing::@3 to startProcessing::@2 [phi:startProcessing::@3->startProcessing::@2]
  //SEG67 [37] phi (byte) startProcessing::i#2 = (byte) startProcessing::i#1 [phi:startProcessing::@3->startProcessing::@2#0] -- register_copy 
  //SEG68 startProcessing::@2
  b2:
  //SEG69 [38] (byte~) startProcessing::$5 ← (byte) startProcessing::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG70 [39] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5)!=(const word) NOT_FOUND#0) goto startProcessing::@3 -- pwuc1_derefidx_vbuaa_neq_vwuc2_then_la1 
    tay
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    cmp #>NOT_FOUND
    bne b3
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    cmp #<NOT_FOUND
    bne b3
  //SEG71 [40] phi from startProcessing::@2 startProcessing::@7 to startProcessing::@4 [phi:startProcessing::@2/startProcessing::@7->startProcessing::@4]
  //SEG72 [40] phi (byte) startProcessing::freeIdx#2 = (byte) startProcessing::i#2 [phi:startProcessing::@2/startProcessing::@7->startProcessing::@4#0] -- register_copy 
  //SEG73 startProcessing::@4
  b4:
  //SEG74 [41] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@6 -- vbuxx_eq_vbuc1_then_la1 
    cpx #$ff
    beq b6
  //SEG75 startProcessing::@5
  //SEG76 [42] (byte~) startProcessing::$6 ← (byte) startProcessing::freeIdx#2 << (byte) 2 -- vbuxx=vbuxx_rol_2 
    txa
    asl
    asl
    tax
  //SEG77 [43] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$6) ← (byte) startProcessing::center_x#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda center_x
    sta PROCESSING,x
  //SEG78 [44] *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$6) ← (byte) startProcessing::center_y#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda center_y
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,x
  //SEG79 [45] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$6) ← (word) startProcessing::center_dist#0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda center_dist
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,x
    lda center_dist+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,x
  //SEG80 startProcessing::@return
  //SEG81 [46] return 
    rts
  //SEG82 startProcessing::@6
  b6:
  //SEG83 [47] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2 -- vbuz1=vbuxx 
    stx freeIdx
  //SEG84 [36] phi from startProcessing::@6 to startProcessing::@1 [phi:startProcessing::@6->startProcessing::@1]
  //SEG85 [36] phi (byte) startProcessing::freeIdx#6 = (byte~) startProcessing::freeIdx#7 [phi:startProcessing::@6->startProcessing::@1#0] -- register_copy 
    jmp b1
  //SEG86 startProcessing::@3
  b3:
  //SEG87 [48] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG88 [49] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_PROCESSING-1+1
    bne b2
  //SEG89 startProcessing::@7
  //SEG90 [50] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6 -- vbuxx=vbuz1 
    ldx freeIdx
    jmp b4
}
//SEG91 getCharToProcess
// Find the non-space char closest to the center of the screen
// If no non-space char is found the distance will be 0xffff
getCharToProcess: {
    .label _9 = $19
    .label _10 = $19
    .label _11 = $19
    .label return_dist = $f
    .label x = $a
    .label dist = $f
    .label screen_line = 7
    .label y = 9
    .label return_x = $d
    .label return_y = $e
    .label closest_dist = $b
    .label closest_x = $d
    .label closest_y = $e
    .label _15 = $1b
    .label _16 = $19
  //SEG92 [52] phi from getCharToProcess to getCharToProcess::@1 [phi:getCharToProcess->getCharToProcess::@1]
  //SEG93 [52] phi (byte) getCharToProcess::closest_y#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta closest_y
  //SEG94 [52] phi (byte) getCharToProcess::closest_x#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#1] -- vbuz1=vbuc1 
    sta closest_x
  //SEG95 [52] phi (word) getCharToProcess::closest_dist#8 = (const word) NOT_FOUND#0 [phi:getCharToProcess->getCharToProcess::@1#2] -- vwuz1=vwuc1 
    lda #<NOT_FOUND
    sta closest_dist
    lda #>NOT_FOUND
    sta closest_dist+1
  //SEG96 [52] phi (byte) getCharToProcess::y#7 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG97 [52] phi (byte*) getCharToProcess::screen_line#4 = (const byte[$3e8]) SCREEN_COPY#0 [phi:getCharToProcess->getCharToProcess::@1#4] -- pbuz1=pbuc1 
    lda #<SCREEN_COPY
    sta screen_line
    lda #>SCREEN_COPY
    sta screen_line+1
  //SEG98 getCharToProcess::@1
  b1:
  //SEG99 [53] phi from getCharToProcess::@1 to getCharToProcess::@2 [phi:getCharToProcess::@1->getCharToProcess::@2]
  //SEG100 [53] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#9 [phi:getCharToProcess::@1->getCharToProcess::@2#0] -- register_copy 
  //SEG101 [53] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#9 [phi:getCharToProcess::@1->getCharToProcess::@2#1] -- register_copy 
  //SEG102 [53] phi (word) getCharToProcess::closest_dist#2 = (word) getCharToProcess::closest_dist#8 [phi:getCharToProcess::@1->getCharToProcess::@2#2] -- register_copy 
  //SEG103 [53] phi (byte) getCharToProcess::x#2 = (byte) 0 [phi:getCharToProcess::@1->getCharToProcess::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG104 getCharToProcess::@2
  b2:
  //SEG105 [54] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy x
    lda (screen_line),y
    cmp #' '
    bne !b11+
    jmp b11
  !b11:
  //SEG106 getCharToProcess::@4
  //SEG107 [55] (byte~) getCharToProcess::$13 ← (byte) getCharToProcess::x#2 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    tya
    asl
    tax
  //SEG108 [56] (byte~) getCharToProcess::$14 ← (byte) getCharToProcess::y#7 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
  //SEG109 [57] (word) getCharToProcess::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCharToProcess::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCharToProcess::$14) -- vwuz1=pwuc1_derefidx_vbuxx_plus_pwuc2_derefidx_vbuaa 
    tay
    lda SQUARES_X,x
    clc
    adc SQUARES_Y,y
    sta dist
    lda SQUARES_X+1,x
    adc SQUARES_Y+1,y
    sta dist+1
  //SEG110 [58] if((word) getCharToProcess::dist#0>=(word) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 -- vwuz1_ge_vwuz2_then_la1 
    lda closest_dist+1
    cmp dist+1
    bne !+
    lda closest_dist
    cmp dist
    bne !b12+
    jmp b12
  !b12:
  !:
    bcs !b12+
    jmp b12
  !b12:
  //SEG111 getCharToProcess::@5
  //SEG112 [59] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2 -- vbuz1=vbuz2 
    lda x
    sta return_x
  //SEG113 [60] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7 -- vbuz1=vbuz2 
    lda y
    sta return_y
  //SEG114 [61] phi from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5 to getCharToProcess::@3 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3]
  //SEG115 [61] phi (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#0] -- register_copy 
  //SEG116 [61] phi (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#1] -- register_copy 
  //SEG117 [61] phi (word) getCharToProcess::return_dist#1 = (word~) getCharToProcess::return_dist#5 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#2] -- register_copy 
  //SEG118 getCharToProcess::@3
  b3:
  //SEG119 [62] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG120 [63] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b10
  //SEG121 getCharToProcess::@6
  //SEG122 [64] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    clc
    adc screen_line
    sta screen_line
    bcc !+
    inc screen_line+1
  !:
  //SEG123 [65] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG124 [66] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b9
  //SEG125 getCharToProcess::@7
  //SEG126 [67] if((word) getCharToProcess::return_dist#1==(const word) NOT_FOUND#0) goto getCharToProcess::@return -- vwuz1_eq_vwuc1_then_la1 
    lda return_dist
    cmp #<NOT_FOUND
    bne !+
    lda return_dist+1
    cmp #>NOT_FOUND
    beq breturn
  !:
  //SEG127 getCharToProcess::@8
  //SEG128 [68] (word~) getCharToProcess::$9 ← (word)(byte) getCharToProcess::return_y#1 -- vwuz1=_word_vbuz2 
    lda return_y
    sta _9
    lda #0
    sta _9+1
  //SEG129 [69] (word) getCharToProcess::$15 ← (word~) getCharToProcess::$9 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _9
    asl
    sta _15
    lda _9+1
    rol
    sta _15+1
    asl _15
    rol _15+1
  //SEG130 [70] (word) getCharToProcess::$16 ← (word) getCharToProcess::$15 + (word~) getCharToProcess::$9 -- vwuz1=vwuz2_plus_vwuz1 
    lda _16
    clc
    adc _15
    sta _16
    lda _16+1
    adc _15+1
    sta _16+1
  //SEG131 [71] (word~) getCharToProcess::$10 ← (word) getCharToProcess::$16 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _10
    rol _10+1
    asl _10
    rol _10+1
    asl _10
    rol _10+1
  //SEG132 [72] (byte*~) getCharToProcess::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCharToProcess::$10 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _11
    adc #<SCREEN_COPY
    sta _11
    lda _11+1
    adc #>SCREEN_COPY
    sta _11+1
  //SEG133 [73] *((byte*~) getCharToProcess::$11 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    // clear the found char on the screen copy
    lda #' '
    ldy return_x
    sta (_11),y
  //SEG134 getCharToProcess::@return
  breturn:
  //SEG135 [74] return 
    rts
  //SEG136 getCharToProcess::@9
  b9:
  //SEG137 [75] (word~) getCharToProcess::closest_dist#10 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda return_dist
    sta closest_dist
    lda return_dist+1
    sta closest_dist+1
  //SEG138 [52] phi from getCharToProcess::@9 to getCharToProcess::@1 [phi:getCharToProcess::@9->getCharToProcess::@1]
  //SEG139 [52] phi (byte) getCharToProcess::closest_y#9 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#0] -- register_copy 
  //SEG140 [52] phi (byte) getCharToProcess::closest_x#9 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@9->getCharToProcess::@1#1] -- register_copy 
  //SEG141 [52] phi (word) getCharToProcess::closest_dist#8 = (word~) getCharToProcess::closest_dist#10 [phi:getCharToProcess::@9->getCharToProcess::@1#2] -- register_copy 
  //SEG142 [52] phi (byte) getCharToProcess::y#7 = (byte) getCharToProcess::y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#3] -- register_copy 
  //SEG143 [52] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#4] -- register_copy 
    jmp b1
  //SEG144 getCharToProcess::@10
  b10:
  //SEG145 [76] (word~) getCharToProcess::closest_dist#12 ← (word) getCharToProcess::return_dist#1 -- vwuz1=vwuz2 
    lda return_dist
    sta closest_dist
    lda return_dist+1
    sta closest_dist+1
  //SEG146 [53] phi from getCharToProcess::@10 to getCharToProcess::@2 [phi:getCharToProcess::@10->getCharToProcess::@2]
  //SEG147 [53] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@10->getCharToProcess::@2#0] -- register_copy 
  //SEG148 [53] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#1] -- register_copy 
  //SEG149 [53] phi (word) getCharToProcess::closest_dist#2 = (word~) getCharToProcess::closest_dist#12 [phi:getCharToProcess::@10->getCharToProcess::@2#2] -- register_copy 
  //SEG150 [53] phi (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#3] -- register_copy 
    jmp b2
  //SEG151 getCharToProcess::@12
  b12:
  //SEG152 [77] (word~) getCharToProcess::return_dist#6 ← (word) getCharToProcess::closest_dist#2 -- vwuz1=vwuz2 
    lda closest_dist
    sta return_dist
    lda closest_dist+1
    sta return_dist+1
    jmp b3
  //SEG153 getCharToProcess::@11
  b11:
  //SEG154 [78] (word~) getCharToProcess::return_dist#5 ← (word) getCharToProcess::closest_dist#2 -- vwuz1=vwuz2 
    lda closest_dist
    sta return_dist
    lda closest_dist+1
    sta return_dist+1
    jmp b3
}
//SEG155 initSquareTables
// initialize SQUARES table
initSquareTables: {
    .label _6 = $13
    .label _14 = $13
    .label x = $11
    .label y = $12
  //SEG156 [80] phi from initSquareTables to initSquareTables::@1 [phi:initSquareTables->initSquareTables::@1]
  //SEG157 [80] phi (byte) initSquareTables::x#2 = (byte) 0 [phi:initSquareTables->initSquareTables::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG158 [80] phi from initSquareTables::@9 to initSquareTables::@1 [phi:initSquareTables::@9->initSquareTables::@1]
  //SEG159 [80] phi (byte) initSquareTables::x#2 = (byte) initSquareTables::x#1 [phi:initSquareTables::@9->initSquareTables::@1#0] -- register_copy 
  //SEG160 initSquareTables::@1
  b1:
  //SEG161 [81] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$14
    bcc b2
  //SEG162 initSquareTables::@3
  //SEG163 [82] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14 -- vbuaa=vbuz1_minus_vbuc1 
    sec
    sbc #$14
  //SEG164 [83] phi from initSquareTables::@2 initSquareTables::@3 to initSquareTables::@4 [phi:initSquareTables::@2/initSquareTables::@3->initSquareTables::@4]
  //SEG165 [83] phi (byte) initSquareTables::x_dist#0 = (byte~) initSquareTables::$4 [phi:initSquareTables::@2/initSquareTables::@3->initSquareTables::@4#0] -- register_copy 
  //SEG166 initSquareTables::@4
  b4:
  //SEG167 [84] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0 -- vbuxx=vbuaa 
    tax
  //SEG168 [85] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  //SEG169 [86] call mul8u 
  //SEG170 [109] phi from initSquareTables::@4 to mul8u [phi:initSquareTables::@4->mul8u]
  //SEG171 [109] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:initSquareTables::@4->mul8u#0] -- register_copy 
  //SEG172 [109] phi (word) mul8u::mb#0 = (byte) mul8u::b#0 [phi:initSquareTables::@4->mul8u#1] -- vwuz1=vbuaa 
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG173 [87] (word) mul8u::return#2 ← (word) mul8u::res#2
  //SEG174 initSquareTables::@9
  //SEG175 [88] (word~) initSquareTables::$6 ← (word) mul8u::return#2
  //SEG176 [89] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
  //SEG177 [90] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda _6
    sta SQUARES_X,y
    lda _6+1
    sta SQUARES_X+1,y
  //SEG178 [91] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG179 [92] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b1
  //SEG180 [93] phi from initSquareTables::@9 to initSquareTables::@5 [phi:initSquareTables::@9->initSquareTables::@5]
  //SEG181 [93] phi (byte) initSquareTables::y#2 = (byte) 0 [phi:initSquareTables::@9->initSquareTables::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG182 [93] phi from initSquareTables::@10 to initSquareTables::@5 [phi:initSquareTables::@10->initSquareTables::@5]
  //SEG183 [93] phi (byte) initSquareTables::y#2 = (byte) initSquareTables::y#1 [phi:initSquareTables::@10->initSquareTables::@5#0] -- register_copy 
  //SEG184 initSquareTables::@5
  b5:
  //SEG185 [94] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda y
    cmp #$c
    bcc b6
  //SEG186 initSquareTables::@7
  //SEG187 [95] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c -- vbuaa=vbuz1_minus_vbuc1 
    sec
    sbc #$c
  //SEG188 [96] phi from initSquareTables::@6 initSquareTables::@7 to initSquareTables::@8 [phi:initSquareTables::@6/initSquareTables::@7->initSquareTables::@8]
  //SEG189 [96] phi (byte) initSquareTables::y_dist#0 = (byte~) initSquareTables::$12 [phi:initSquareTables::@6/initSquareTables::@7->initSquareTables::@8#0] -- register_copy 
  //SEG190 initSquareTables::@8
  b8:
  //SEG191 [97] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0 -- vbuxx=vbuaa 
    tax
  //SEG192 [98] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  //SEG193 [99] call mul8u 
  //SEG194 [109] phi from initSquareTables::@8 to mul8u [phi:initSquareTables::@8->mul8u]
  //SEG195 [109] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:initSquareTables::@8->mul8u#0] -- register_copy 
  //SEG196 [109] phi (word) mul8u::mb#0 = (byte) mul8u::b#1 [phi:initSquareTables::@8->mul8u#1] -- vwuz1=vbuaa 
    sta mul8u.mb
    lda #0
    sta mul8u.mb+1
    jsr mul8u
  //SEG197 [100] (word) mul8u::return#3 ← (word) mul8u::res#2
  //SEG198 initSquareTables::@10
  //SEG199 [101] (word~) initSquareTables::$14 ← (word) mul8u::return#3
  //SEG200 [102] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
  //SEG201 [103] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda _14
    sta SQUARES_Y,y
    lda _14+1
    sta SQUARES_Y+1,y
  //SEG202 [104] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG203 [105] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b5
  //SEG204 initSquareTables::@return
  //SEG205 [106] return 
    rts
  //SEG206 initSquareTables::@6
  b6:
  //SEG207 [107] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2 -- vbuaa=vbuc1_minus_vbuz1 
    lda #$c
    sec
    sbc y
    jmp b8
  //SEG208 initSquareTables::@2
  b2:
  //SEG209 [108] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2 -- vbuaa=vbuc1_minus_vbuz1 
    lda #$14
    sec
    sbc x
    jmp b4
}
//SEG210 mul8u
// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $15
    .label res = $13
    .label return = $13
  //SEG211 [110] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  //SEG212 [110] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
  //SEG213 [110] phi (word) mul8u::res#2 = (byte) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta res
    sta res+1
  //SEG214 [110] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
  //SEG215 mul8u::@1
  b1:
  //SEG216 [111] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b2
  //SEG217 mul8u::@return
  //SEG218 [112] return 
    rts
  //SEG219 mul8u::@2
  b2:
  //SEG220 [113] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG221 [114] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
  //SEG222 mul8u::@4
  //SEG223 [115] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
  //SEG224 [116] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  //SEG225 [116] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
  //SEG226 mul8u::@3
  b3:
  //SEG227 [117] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG228 [118] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl mb
    rol mb+1
  //SEG229 [110] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  //SEG230 [110] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
  //SEG231 [110] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
  //SEG232 [110] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp b1
}
//SEG233 setupRasterIrq
// Setup Raster IRQ
setupRasterIrq: {
    .label irqRoutine = irqTop
  //SEG234 asm { sei  }
    sei
  //SEG235 [120] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG236 [121] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG237 [122] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG238 setupRasterIrq::@1
  //SEG239 [123] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
  //SEG240 setupRasterIrq::@2
  //SEG241 [124] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG242 [125] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG243 [126] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irqRoutine
    sta HARDWARE_IRQ
    lda #>irqRoutine
    sta HARDWARE_IRQ+1
  //SEG244 asm { cli  }
    cli
  //SEG245 setupRasterIrq::@return
  //SEG246 [128] return 
    rts
}
//SEG247 irqBottom
// Raster Interrupt at the middle of the screen
irqBottom: {
  //SEG248 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG249 [130] phi from irqBottom to irqBottom::@1 [phi:irqBottom->irqBottom::@1]
  //SEG250 [130] phi (byte) irqBottom::i#2 = (byte) 0 [phi:irqBottom->irqBottom::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG251 [130] phi from irqBottom::@1 to irqBottom::@1 [phi:irqBottom::@1->irqBottom::@1]
  //SEG252 [130] phi (byte) irqBottom::i#2 = (byte) irqBottom::i#1 [phi:irqBottom::@1->irqBottom::@1#0] -- register_copy 
  //SEG253 irqBottom::@1
  b1:
  //SEG254 [131] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG255 [132] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b1
  //SEG256 irqBottom::@2
  //SEG257 [133] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
  //SEG258 [134] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    sta BGCOL
  //SEG259 [135] call processChars 
  //SEG260 [142] phi from irqBottom::@2 to processChars [phi:irqBottom::@2->processChars]
    jsr processChars
  //SEG261 irqBottom::@3
  //SEG262 [136] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG263 [137] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG264 [138] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the top of the screen
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG265 [139] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() -- _deref_pptc1=pprc2 
    lda #<irqTop
    sta HARDWARE_IRQ
    lda #>irqTop
    sta HARDWARE_IRQ+1
  //SEG266 [140] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG267 irqBottom::@return
  //SEG268 [141] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG269 processChars
// Process any chars in the PROCESSING array
processChars: {
    .label _3 = $1f
    .label _4 = $1f
    .label _5 = $1f
    .label _7 = $23
    .label _8 = $23
    .label _9 = $23
    .label processing_x = $1d
    .label processing_y = $1e
    .label _22 = $21
    .label _23 = $1f
    .label _25 = $25
    .label _26 = $23
  //SEG270 [143] phi from processChars to processChars::@1 [phi:processChars->processChars::@1]
  //SEG271 [143] phi (byte) processChars::i#2 = (byte) 0 [phi:processChars->processChars::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG272 [143] phi from processChars::@2 to processChars::@1 [phi:processChars::@2->processChars::@1]
  //SEG273 [143] phi (byte) processChars::i#2 = (byte) processChars::i#1 [phi:processChars::@2->processChars::@1#0] -- register_copy 
  //SEG274 processChars::@1
  b1:
  //SEG275 [144] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG276 [145] if(*((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$14)==(const word) NOT_FOUND#0) goto processChars::@2 -- pwuc1_derefidx_vbuaa_eq_vwuc2_then_la1 
    tay
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    cmp #<NOT_FOUND
    bne !+
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    cmp #>NOT_FOUND
    bne !b2+
    jmp b2
  !b2:
  !:
  //SEG277 processChars::@5
  //SEG278 [146] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2 -- vbuyy=vbuxx_rol_2 
    txa
    asl
    asl
    tay
  //SEG279 [147] (byte) processChars::processing_x#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$15) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda PROCESSING,y
    sta processing_x
  //SEG280 [148] (byte) processChars::processing_y#0 ← *((byte*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) processChars::$15) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_Y,y
    sta processing_y
  //SEG281 [149] (word~) processChars::$3 ← (word)(byte) processChars::processing_y#0 -- vwuz1=_word_vbuz2 
    sta _3
    lda #0
    sta _3+1
  //SEG282 [150] (word) processChars::$22 ← (word~) processChars::$3 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _3
    asl
    sta _22
    lda _3+1
    rol
    sta _22+1
    asl _22
    rol _22+1
  //SEG283 [151] (word) processChars::$23 ← (word) processChars::$22 + (word~) processChars::$3 -- vwuz1=vwuz2_plus_vwuz1 
    lda _23
    clc
    adc _22
    sta _23
    lda _23+1
    adc _22+1
    sta _23+1
  //SEG284 [152] (word~) processChars::$4 ← (word) processChars::$23 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _4
    rol _4+1
    asl _4
    rol _4+1
    asl _4
    rol _4+1
  //SEG285 [153] (byte*~) processChars::$5 ← (const byte*) COLS#0 + (word~) processChars::$4 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _5
    adc #<COLS
    sta _5
    lda _5+1
    adc #>COLS
    sta _5+1
  //SEG286 [154] *((byte*~) processChars::$5 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0 -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #WHITE
    ldy processing_x
    sta (_5),y
  //SEG287 [155] (word~) processChars::$7 ← (word)(byte) processChars::processing_y#0 -- vwuz1=_word_vbuz2 
    lda processing_y
    sta _7
    lda #0
    sta _7+1
  //SEG288 [156] (word) processChars::$25 ← (word~) processChars::$7 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _7
    asl
    sta _25
    lda _7+1
    rol
    sta _25+1
    asl _25
    rol _25+1
  //SEG289 [157] (word) processChars::$26 ← (word) processChars::$25 + (word~) processChars::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda _26
    clc
    adc _25
    sta _26
    lda _26+1
    adc _25+1
    sta _26+1
  //SEG290 [158] (word~) processChars::$8 ← (word) processChars::$26 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _8
    rol _8+1
    asl _8
    rol _8+1
    asl _8
    rol _8+1
  //SEG291 [159] (byte*~) processChars::$9 ← (const byte*) SCREEN#0 + (word~) processChars::$8 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda _9
    adc #<SCREEN
    sta _9
    lda _9+1
    adc #>SCREEN
    sta _9+1
  //SEG292 [160] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    lda (_9),y
    cmp #' '
    beq b3
  //SEG293 processChars::@6
  //SEG294 [161] if(*((byte*~) processChars::$9 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4 -- pbuz1_derefidx_vbuz2_gt_vbuc1_then_la1 
    lda (_9),y
    cmp #' '
    beq !+
    bcs b4
  !:
  //SEG295 processChars::@7
  //SEG296 [162] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) -- pbuz1_derefidx_vbuz2=_inc_pbuz1_derefidx_vbuz2 
    ldy processing_x
    lda (_9),y
    clc
    adc #1
    sta (_9),y
  //SEG297 processChars::@2
  b2:
  //SEG298 [163] (byte) processChars::i#1 ← ++ (byte) processChars::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG299 [164] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_PROCESSING-1+1
    beq !b1+
    jmp b1
  !b1:
  //SEG300 processChars::@return
  //SEG301 [165] return 
    rts
  //SEG302 processChars::@4
  b4:
  //SEG303 [166] *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$9 + (byte) processChars::processing_x#0) -- pbuz1_derefidx_vbuz2=_dec_pbuz1_derefidx_vbuz2 
    ldy processing_x
    lda (_9),y
    sec
    sbc #1
    sta (_9),y
    jmp b2
  //SEG304 processChars::@3
  b3:
  //SEG305 [167] (byte~) processChars::$16 ← (byte) processChars::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
  //SEG306 [168] *((word*)(const struct ProcessingChar[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$16) ← (const word) NOT_FOUND#0 -- pwuc1_derefidx_vbuaa=vwuc2 
    tay
    lda #<NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST,y
    lda #>NOT_FOUND
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGCHAR_DIST+1,y
    jmp b2
}
//SEG307 irqTop
// Raster Interrupt at the top of the screen
irqTop: {
  //SEG308 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG309 [170] phi from irqTop to irqTop::@1 [phi:irqTop->irqTop::@1]
  //SEG310 [170] phi (byte) irqTop::i#2 = (byte) 0 [phi:irqTop->irqTop::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG311 [170] phi from irqTop::@1 to irqTop::@1 [phi:irqTop::@1->irqTop::@1]
  //SEG312 [170] phi (byte) irqTop::i#2 = (byte) irqTop::i#1 [phi:irqTop::@1->irqTop::@1#0] -- register_copy 
  //SEG313 irqTop::@1
  b1:
  //SEG314 [171] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG315 [172] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b1
  //SEG316 irqTop::@2
  //SEG317 [173] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BORDERCOL
  //SEG318 [174] *((const byte*) BGCOL#0) ← (const byte) WHITE#0 -- _deref_pbuc1=vbuc2 
    sta BGCOL
  //SEG319 [175] phi from irqTop::@2 to irqTop::@3 [phi:irqTop::@2->irqTop::@3]
  //SEG320 [175] phi (byte) irqTop::i1#2 = (byte) 0 [phi:irqTop::@2->irqTop::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG321 [175] phi from irqTop::@3 to irqTop::@3 [phi:irqTop::@3->irqTop::@3]
  //SEG322 [175] phi (byte) irqTop::i1#2 = (byte) irqTop::i1#1 [phi:irqTop::@3->irqTop::@3#0] -- register_copy 
  //SEG323 irqTop::@3
  b3:
  //SEG324 [176] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG325 [177] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3
  //SEG326 irqTop::@4
  //SEG327 [178] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG328 [179] *((const byte*) BGCOL#0) ← (const byte) BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BGCOL
  //SEG329 [180] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the middle of the screen
    lda #RASTER_IRQ_MIDDLE
    sta RASTER
  //SEG330 [181] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() -- _deref_pptc1=pprc2 
    lda #<irqBottom
    sta HARDWARE_IRQ
    lda #>irqBottom
    sta HARDWARE_IRQ+1
  //SEG331 [182] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG332 irqTop::@return
  //SEG333 [183] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
  // Copy of the screen used for finding chars to process
  SCREEN_COPY: .fill $3e8, 0
  // SQUARES_X[i] = (i-20)*(i-20)
  SQUARES_X: .fill 2*$28, 0
  // SQUARES_Y[i] = (i-12)*(i-12)
  SQUARES_Y: .fill 2*$19, 0
  // Chars currently being processed in the interrupt
  PROCESSING: .fill 4*NUM_PROCESSING, 0

