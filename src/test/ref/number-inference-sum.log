Fixing pointer array-indexing *((const word*) main::screen + (number) 0)
Identified constant variable (byte) main::b1
Culled Empty Block (label) main::@1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (number~) main::$0 ← (const byte) main::b1 + (number) $fa
  (byte) main::b2#0 ← (number~) main::$0
  (number~) main::$1 ← (byte) main::b2#0 + (number) 1
  (word) main::w#0 ← (number~) main::$1
  (number~) main::$4 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const word*) main::screen + (number~) main::$4) ← (word) main::w#0
  (bool~) main::$2 ← (word) main::w#0 > (number) $ff
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@return
  to:main::@2
main::@2: scope:[main]  from main
  *((const byte*) main::bgcol) ← (const byte) main::RED
  to:main::@return
main::@return: scope:[main]  from main main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(number~) main::$0
(number~) main::$1
(bool~) main::$2
(bool~) main::$3
(number~) main::$4
(label) main::@2
(label) main::@return
(const byte) main::RED = (byte) 2
(const byte) main::b1 = (byte) $fa
(byte) main::b2
(byte) main::b2#0
(const byte*) main::bgcol = (byte*)(number) $d020
(const word*) main::screen = (word*)(number) $400
(word) main::w
(word) main::w#0

Adding number conversion cast (unumber) $fa in (number~) main::$0 ← (const byte) main::b1 + (number) $fa
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (const byte) main::b1 + (unumber)(number) $fa
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::b2#0 + (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::b2#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (number~) main::$4 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) $ff in (bool~) main::$2 ← (word) main::w#0 > (number) $ff
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant pointer cast (byte*) 53280
Simplifying constant integer cast $fa
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (const byte) main::b1 + (byte) $fa
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::b2#0 + (byte) 1
Inferred type updated to byte in (unumber~) main::$4 ← (byte) 0 * (const byte) SIZEOF_WORD
Inversing boolean not [7] (bool~) main::$3 ← (word) main::w#0 <= (byte) $ff from [6] (bool~) main::$2 ← (word) main::w#0 > (byte) $ff
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::b2#0 = (byte~) main::$0 
Alias (word) main::w#0 = (byte~) main::$1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$3 [5] if((word) main::w#0<=(byte) $ff) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (byte) main::b2#0 ← (const byte) main::b1 + (byte) $fa
Constant right-side identified [2] (byte~) main::$4 ← (byte) 0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::b2#0 = main::b1+$fa
Constant (const byte) main::$4 = 0*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::screen in [3] *((const word*) main::screen + (const byte) main::$4) ← (word) main::w#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$4
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [0] (word) main::w#0 ← (const byte) main::b2#0 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::w#0 = main::b2#0+1
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) main::w#0<=(byte) $ff) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Renumbering block main::@2 to main::@1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const word*) main::screen) ← (const word) main::w#0
  to:main::@1
main::@1: scope:[main]  from main
  [5] *((const byte*) main::bgcol) ← (const byte) main::RED
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::b2
(word) main::w

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test inference of number types using a long sum
// Currently fails - because the compiler does not handle byte+byte correctly (not truncating the result to 8 bits)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    .label bgcol = $d020
    .const RED = 2
    .const b1 = $fa
    .const b2 = b1+$fa
    .const w = b2+1
    // [4] *((const word*) main::screen) ← (const word) main::w#0 -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __b1
    // main::@1
  __b1:
    // [5] *((const byte*) main::bgcol) ← (const byte) main::RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta bgcol
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const word*) main::screen) ← (const word) main::w#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::bgcol) ← (const byte) main::RED [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 42 combination 
Uplifting [] best 42 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test inference of number types using a long sum
// Currently fails - because the compiler does not handle byte+byte correctly (not truncating the result to 8 bits)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    .label bgcol = $d020
    .const RED = 2
    .const b1 = $fa
    .const b2 = b1+$fa
    .const w = b2+1
    // [4] *((const word*) main::screen) ← (const word) main::w#0 -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __b1
    // main::@1
  __b1:
    // [5] *((const byte*) main::bgcol) ← (const byte) main::RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta bgcol
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(const byte) main::RED = (byte) 2
(const byte) main::b1 = (byte) $fa
(byte) main::b2
(const byte) main::b2#0 b2 = (const byte) main::b1+(byte) $fa
(const byte*) main::bgcol = (byte*) 53280
(const word*) main::screen = (word*) 1024
(word) main::w
(const word) main::w#0 w = (const byte) main::b2#0+(byte) 1



FINAL ASSEMBLER
Score: 24

  // File Comments
// Test inference of number types using a long sum
// Currently fails - because the compiler does not handle byte+byte correctly (not truncating the result to 8 bits)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    .label bgcol = $d020
    .const RED = 2
    .const b1 = $fa
    .const b2 = b1+$fa
    .const w = b2+1
    // screen[0] = w
    // [4] *((const word*) main::screen) ← (const word) main::w#0 -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    // main::@1
    // *bgcol = RED
    // [5] *((const byte*) main::bgcol) ← (const byte) main::RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta bgcol
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

