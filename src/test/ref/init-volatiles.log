Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  x = ++ x
  main::$0 = x < $32
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  x = 0
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  x = $c
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$0
__loadstore volatile char x

Adding number conversion cast (unumber) $32 in main::$0 = x < $32
Adding number conversion cast (unumber) 0 in x = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast x = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $32
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $32
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [2] if(x<$32) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main
CALL GRAPH
Calls in [__start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label __start::@2
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] x = $c
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] x = ++ x
  [7] if(x<$32) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] x = 0
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
void main()
__loadstore volatile char x // 63.2

Initial phi equivalence classes
Added variable x to live range equivalence class [ x ]
Complete equivalence classes
[ x ]
Allocated zp[1]:2 [ x ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] x = $c [ x ] (  [ x ] { }  ) always clobbers reg byte a 
Statement [7] if(x<$32) goto main::@1 [ x ] ( main:3 [ x ] { }  ) always clobbers reg byte a 
Statement [8] x = 0 [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ x ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 63.2: zp[1]:2 [ x ] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [] best 252 combination zp[1]:2 [ x ] 
Uplifting [main] best 252 combination 
Uplifting [__start] best 252 combination 
Attempting to uplift remaining variables inzp[1]:2 [ x ]
Uplifting [] best 252 combination zp[1]:2 [ x ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem where volatiles with initializers are initialized outside the main()-routine
  // Upstart
  // Commodore 64 PRG executable file
.file [name="init-volatiles.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label x = 2
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] x = $c -- vbuz1=vbuc1 
    lda #$c
    sta.z x
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [6] x = ++ x -- vbuz1=_inc_vbuz1 
    inc.z x
    // [7] if(x<$32) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$32
    bcc __b1
    jmp __b2
    // main::@2
  __b2:
    // [8] x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void __start()
void main()
__loadstore volatile char x // zp[1]:2 63.2

zp[1]:2 [ x ]


FINAL ASSEMBLER
Score: 153

  // File Comments
// Illustrates a problem where volatiles with initializers are initialized outside the main()-routine
  // Upstart
  // Commodore 64 PRG executable file
.file [name="init-volatiles.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label x = 2
.segment Code
  // __start
__start: {
    // __start::__init1
    // volatile byte x = 12
    // [1] x = $c -- vbuz1=vbuc1 
    lda #$c
    sta.z x
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    // main::@1
  __b1:
    // while(++x<50)
    // [6] x = ++ x -- vbuz1=_inc_vbuz1 
    inc.z x
    // [7] if(x<$32) goto main::@1 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$32
    bcc __b1
    // main::@2
    // x = 0
    // [8] x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data

