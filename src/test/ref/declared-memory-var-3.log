Setting struct to load/store in variable affected by address-of main::barp = &bar

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  main::$2 = (byte*)main::barp
  main::$0 = main::$2 + OFFSET_STRUCT_FOO_THING1
  main::SCREEN[main::i#0] = *main::$0
  main::i#1 = ++ main::i#0
  main::$3 = (byte*)main::barp
  main::$1 = main::$3 + OFFSET_STRUCT_FOO_THING2
  main::SCREEN[main::i#1] = *main::$1
  main::i#2 = ++ main::i#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_FOO_THING1 = 0
const byte OFFSET_STRUCT_FOO_THING2 = 1
void __start()
struct foo bar loadstore = { thing1: 'a', thing2: 'b' }
void main()
byte*~ main::$0
byte*~ main::$1
byte*~ main::$2
byte*~ main::$3
const nomodify byte* main::SCREEN = (byte*)$400
const struct foo* main::barp = &bar
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant right-side identified [1] main::$2 = (byte*)main::barp
Constant right-side identified [5] main::$3 = (byte*)main::barp
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$2 = (byte*)main::barp
Constant main::$3 = (byte*)main::barp
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [3] main::SCREEN[main::i#0] = *main::$0  -- main::$2[OFFSET_STRUCT_FOO_THING1]
Converting *(pointer+n) to pointer[n] [7] main::SCREEN[main::i#1] = *main::$1  -- main::$3[OFFSET_STRUCT_FOO_THING2]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$2 in [2] main::$0 = main::$2 + OFFSET_STRUCT_FOO_THING1
Simplifying expression containing zero main::$2 in [3] main::SCREEN[main::i#0] = main::$2[OFFSET_STRUCT_FOO_THING1]
Simplifying expression containing zero main::SCREEN in [3] main::SCREEN[main::i#0] = *main::$2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::$0 and assignment [0] main::$0 = main::$2
Eliminating unused variable main::$1 and assignment [3] main::$1 = main::$3 + OFFSET_STRUCT_FOO_THING2
Eliminating unused variable main::i#2 and assignment [5] main::i#2 = ++ main::i#1
Eliminating unused constant OFFSET_STRUCT_FOO_THING1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [1] main::i#1 = ++ main::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#1 = ++main::i#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::i#0
Inlining constant with different constant siblings main::i#1
Constant inlined main::i#0 = 0
Constant inlined main::$3 = (byte*)main::barp
Constant inlined main::i#1 = ++0
Constant inlined main::$2 = (byte*)main::barp
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)main::barp+OFFSET_STRUCT_FOO_THING2)
Consolidated array index constant in *(main::SCREEN+++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = *((byte*)main::barp)
  [1] *(main::SCREEN+1) = *((byte*)main::barp+OFFSET_STRUCT_FOO_THING2)
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
struct foo bar loadstore = { thing1: 'a', thing2: 'b' }
void main()
byte main::i

Initial phi equivalence classes
Added variable bar to live range equivalence class [ bar ]
Complete equivalence classes
[ bar ]
Allocated mem[2] [ bar ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = *((byte*)main::barp) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1) = *((byte*)main::barp+OFFSET_STRUCT_FOO_THING2) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers mem[2] [ bar ] : mem[2] , 

REGISTER UPLIFT SCOPES
Uplift Scope [foo] 
Uplift Scope [main] 
Uplift Scope [] 0: mem[2] [ bar ] 

Uplifting [foo] best 25 combination 
Uplifting [main] best 25 combination 
Uplifting [] best 25 combination mem[2] [ bar ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    // [0] *main::SCREEN = *((byte*)main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // [1] *(main::SCREEN+1) = *((byte*)main::barp+OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data
  bar: .byte 'a', 'b'

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_FOO_THING2 = 1
struct foo bar loadstore mem[2] = { thing1: 'a', thing2: 'b' }
void main()
const nomodify byte* main::SCREEN = (byte*) 1024
const struct foo* main::barp = &bar
byte main::i

mem[2] [ bar ]


FINAL ASSEMBLER
Score: 22

  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable struct value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_FOO_THING2 = 1
  // main
main: {
    .label SCREEN = $400
    .label barp = bar
    // SCREEN[i++] = barp->thing1
    // [0] *main::SCREEN = *((byte*)main::barp) -- _deref_pbuc1=_deref_pbuc2 
    lda barp
    sta SCREEN
    // SCREEN[i++] = barp->thing2
    // [1] *(main::SCREEN+1) = *((byte*)main::barp+OFFSET_STRUCT_FOO_THING2) -- _deref_pbuc1=_deref_pbuc2 
    lda barp+OFFSET_STRUCT_FOO_THING2
    sta SCREEN+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data
  bar: .byte 'a', 'b'

