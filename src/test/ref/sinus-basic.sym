constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
void addMEMtoFAC(byte* addMEMtoFAC::mem)
byte* addMEMtoFAC::mem
word addMEMtoFAC::prepareMEM1_mem
constant word addMEMtoFAC::prepareMEM1_mem#0 prepareMEM1_mem = (word)main::f_127
void divFACby10()
void divMEMbyFAC(byte* divMEMbyFAC::mem)
byte* divMEMbyFAC::mem
word divMEMbyFAC::prepareMEM1_mem
constant word divMEMbyFAC::prepareMEM1_mem#0 prepareMEM1_mem = (word)main::f_i
word getFAC()
word getFAC::return
word getFAC::return#0 return zp[2]:7 37.33333333333333
word getFAC::return#2 return zp[2]:7 22.0
word getFAC::w
void main()
constant byte* main::f_127[]  = { 0, 0, 0, 0, 0 }
constant byte* const main::f_2pi = (byte*) 58085
constant byte* main::f_i[]  = { 0, 0, 0, 0, 0 }
byte main::i
byte main::i#1 i zp[1]:2 11.0
byte main::i#10 i zp[1]:2 0.9166666666666666
constant byte* const memHi = (byte*) 255
constant byte* const memLo = (byte*) 254
void mulFACbyMEM(byte* mulFACbyMEM::mem)
byte* mulFACbyMEM::mem
byte* mulFACbyMEM::mem#2 mem zp[2]:7
byte~ mulFACbyMEM::prepareMEM1_$0 reg byte a 202.0
byte~ mulFACbyMEM::prepareMEM1_$1 reg byte a 202.0
word mulFACbyMEM::prepareMEM1_mem
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 2002.0
byte print_char::ch#1 reg byte a 2002.0
byte print_char::ch#2 reg byte a 12003.0
byte* print_char_cursor
byte* print_char_cursor#24 print_char_cursor zp[2]:5 11002.0
byte* print_char_cursor#25 print_char_cursor zp[2]:5 1241.4117647058824
byte* print_char_cursor#33 print_char_cursor zp[2]:5 401.0
byte* print_char_cursor#34 print_char_cursor zp[2]:5 5.090909090909091
byte* print_char_cursor#53 print_char_cursor zp[2]:5 22.0
constant const byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:3 4289.285714285714
byte* print_line_cursor#15 print_line_cursor zp[2]:3 4.666666666666666
byte* print_line_cursor#7 print_line_cursor zp[2]:3 20103.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 202.0
byte print_uchar::b#1 reg byte x 202.0
byte print_uchar::b#2 reg byte x 551.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:7 71.0
void setFAC(word setFAC::w)
byte~ setFAC::prepareMEM1_$0 reg byte a 202.0
byte~ setFAC::prepareMEM1_$1 reg byte a 202.0
word setFAC::prepareMEM1_mem
word setFAC::prepareMEM1_mem#0 prepareMEM1_mem zp[2]:7 71.0
word setFAC::w
word setFAC::w#1 w zp[2]:7 22.0
void setMEMtoFAC(byte* setMEMtoFAC::mem)
byte* setMEMtoFAC::mem
byte* setMEMtoFAC::mem#2 mem zp[2]:7
byte~ setMEMtoFAC::prepareMEM1_$0 reg byte a 202.0
byte~ setMEMtoFAC::prepareMEM1_$1 reg byte a 202.0
word setMEMtoFAC::prepareMEM1_mem
void sinFAC()

zp[1]:2 [ main::i#10 main::i#1 ]
zp[2]:3 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:5 [ print_char_cursor#24 print_char_cursor#33 print_char_cursor#34 print_char_cursor#53 print_char_cursor#25 ]
zp[2]:7 [ getFAC::return#2 print_uint::w#0 getFAC::return#0 mulFACbyMEM::mem#2 setMEMtoFAC::mem#2 setFAC::prepareMEM1_mem#0 setFAC::w#1 ]
reg byte a [ setFAC::prepareMEM1_$0 ]
reg byte a [ setFAC::prepareMEM1_$1 ]
reg byte a [ setMEMtoFAC::prepareMEM1_$0 ]
reg byte a [ setMEMtoFAC::prepareMEM1_$1 ]
reg byte a [ mulFACbyMEM::prepareMEM1_$0 ]
reg byte a [ mulFACbyMEM::prepareMEM1_$1 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
