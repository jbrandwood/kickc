
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::idx#3 = phi( main/main::idx#0, main::@1/main::idx#2 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$3 = main::i#2 * SIZEOF_WORD
  main::$0 = < words[main::$3]
  main::SCREEN[main::idx#3] = main::$0
  main::idx#1 = ++ main::idx#3
  main::$4 = main::i#2 * SIZEOF_WORD
  main::$1 = > words[main::$4]
  main::SCREEN[main::idx#1] = main::$1
  main::idx#2 = ++ main::idx#1
  main::i#1 = main::i#2 + rangenext(0,2)
  main::$2 = main::i#1 != rangelast(0,2)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte SIZEOF_WORD = 2
void __start()
void main()
byte~ main::$0
byte~ main::$1
bool~ main::$2
byte~ main::$3
byte~ main::$4
constant byte* const main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
constant word* words[]  = { 1, 2, 3 }

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Identified duplicate assignment right side [7] main::$4 = main::i#2 * SIZEOF_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$2 [13] if(main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,2)) goto main::@1 to 3
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [10] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$4 = main::$3 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [1] main::$4 = main::i#2 * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [12] main::i#3 = main::i#1
Coalesced [13] main::idx#4 = main::idx#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::idx#3 = phi( main/0, main::@1/main::idx#2 )
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$4 = main::i#2 << 1
  [3] main::$0 = < words[main::$4]
  [4] main::SCREEN[main::idx#3] = main::$0
  [5] main::idx#1 = ++ main::idx#3
  [6] main::$1 = > words[main::$4]
  [7] main::SCREEN[main::idx#1] = main::$1
  [8] main::idx#2 = ++ main::idx#1
  [9] main::i#1 = ++ main::i#2
  [10] if(main::i#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 22.0
byte~ main::$1 22.0
byte~ main::$4 8.25
byte main::i
byte main::i#1 16.5
byte main::i#2 4.125
byte main::idx
byte main::idx#1 11.0
byte main::idx#2 7.333333333333333
byte main::idx#3 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#2 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::idx#1 to live range equivalence class [ main::idx#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#2 ]
[ main::$4 ]
[ main::$0 ]
[ main::idx#1 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#3 main::idx#2 ]
Allocated zp[1]:4 [ main::$4 ]
Allocated zp[1]:5 [ main::$0 ]
Allocated zp[1]:6 [ main::idx#1 ]
Allocated zp[1]:7 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$4 = main::i#2 << 1 [ main::i#2 main::idx#3 main::$4 ] (  [ main::i#2 main::idx#3 main::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::idx#3 main::idx#2 ]
Statement [3] main::$0 = < words[main::$4] [ main::i#2 main::idx#3 main::$4 main::$0 ] (  [ main::i#2 main::idx#3 main::$4 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::$4 ]
Statement [6] main::$1 = > words[main::$4] [ main::i#2 main::idx#1 main::$1 ] (  [ main::i#2 main::idx#1 main::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::idx#1 ]
Statement [2] main::$4 = main::i#2 << 1 [ main::i#2 main::idx#3 main::$4 ] (  [ main::i#2 main::idx#3 main::$4 ] { }  ) always clobbers reg byte a 
Statement [3] main::$0 = < words[main::$4] [ main::i#2 main::idx#3 main::$4 main::$0 ] (  [ main::i#2 main::idx#3 main::$4 main::$0 ] { }  ) always clobbers reg byte a 
Statement [6] main::$1 = > words[main::$4] [ main::i#2 main::idx#1 main::$1 ] (  [ main::i#2 main::idx#1 main::$1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#3 main::idx#2 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$4 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::idx#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:5 [ main::$0 ] 22: zp[1]:7 [ main::$1 ] 20.62: zp[1]:2 [ main::i#2 main::i#1 ] 15.58: zp[1]:3 [ main::idx#3 main::idx#2 ] 11: zp[1]:6 [ main::idx#1 ] 8.25: zp[1]:4 [ main::$4 ] 
Uplift Scope [] 

Uplifting [main] best 751 combination reg byte a [ main::$0 ] reg byte a [ main::$1 ] zp[1]:2 [ main::i#2 main::i#1 ] reg byte x [ main::idx#3 main::idx#2 ] zp[1]:6 [ main::idx#1 ] zp[1]:4 [ main::$4 ] 
Limited combination testing to 100 combinations of 1296 possible.
Uplifting [] best 751 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 751 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::idx#1 ]
Uplifting [main] best 661 combination reg byte x [ main::idx#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::$4 ]
Uplifting [main] best 591 combination reg byte y [ main::$4 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of words
  // Upstart
  // Commodore 64 PRG executable file
.file [name="initializer-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#3 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::idx#3 = main::idx#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$4 = main::i#2 << 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [3] main::$0 = < words[main::$4] -- vbuaa=_byte0_pwuc1_derefidx_vbuyy 
    lda words,y
    // [4] main::SCREEN[main::idx#3] = main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [5] main::idx#1 = ++ main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [6] main::$1 = > words[main::$4] -- vbuaa=_byte1_pwuc1_derefidx_vbuyy 
    lda words+1,y
    // [7] main::SCREEN[main::idx#1] = main::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [8] main::idx#2 = ++ main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [9] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if(main::i#1!=3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
.segment Data
  words: .word 1, 2, 3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$0 reg byte a 22.0
byte~ main::$1 reg byte a 22.0
byte~ main::$4 reg byte y 8.25
constant byte* const main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 4.125
byte main::idx
byte main::idx#1 reg byte x 11.0
byte main::idx#2 reg byte x 7.333333333333333
byte main::idx#3 reg byte x 8.25
constant word* words[]  = { 1, 2, 3 }

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte x [ main::idx#3 main::idx#2 ]
reg byte y [ main::$4 ]
reg byte a [ main::$0 ]
reg byte x [ main::idx#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 501

  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of words
  // Upstart
  // Commodore 64 PRG executable file
.file [name="initializer-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#3 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z i
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::idx#3 = main::idx#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // BYTE0(words[i])
    // [2] main::$4 = main::i#2 << 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [3] main::$0 = < words[main::$4] -- vbuaa=_byte0_pwuc1_derefidx_vbuyy 
    lda words,y
    // SCREEN[idx++] = BYTE0(words[i])
    // [4] main::SCREEN[main::idx#3] = main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = BYTE0(words[i]);
    // [5] main::idx#1 = ++ main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // BYTE1(words[i])
    // [6] main::$1 = > words[main::$4] -- vbuaa=_byte1_pwuc1_derefidx_vbuyy 
    lda words+1,y
    // SCREEN[idx++] = BYTE1(words[i])
    // [7] main::SCREEN[main::idx#1] = main::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = BYTE1(words[i]);
    // [8] main::idx#2 = ++ main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // for( char i: 0..2)
    // [9] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if(main::i#1!=3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data
.segment Data
  words: .word 1, 2, 3

