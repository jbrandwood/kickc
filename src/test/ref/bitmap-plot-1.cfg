
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] frame_cnt = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  [5] *BG_COLOR = WHITE
  [6] if(0==frame_cnt) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [7] frame_cnt = ++ frame_cnt
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [8] *BG_COLOR = BLACK
  [9] *IRQ_STATUS = IRQ_RASTER
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [10] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [11] phi()
  [12] call sin16s_gen2 
  to:main::@6
main::@6: scope:[main]  from main
  [13] phi()
  [14] call bitmap_init 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [15] phi()
  [16] call bitmap_clear 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [17] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
  to:main::toD0181
main::toD0181: scope:[main]  from main::@8
  [18] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [19] *D018 = main::toD0181_return#0
  [20] call init_irq 
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  [21] main::idx_y#3 = phi( main::@5/$80, main::@4/main::idx_y#10 )
  [21] main::idx_x#3 = phi( main::@5/0, main::@4/main::idx_x#10 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [22] main::$19 = main::idx_x#3 << 1
  [23] main::$21 = SINE + main::$19
  [24] main::cos_x#0 = *main::$21
  [25] mul16s::b#1 = main::cos_x#0
  [26] call mul16s 
  [27] mul16s::return#3 = mul16s::return#1
  to:main::@9
main::@9: scope:[main]  from main::@2
  [28] main::xpos#0 = mul16s::return#3
  [29] main::$6 = main::xpos#0 << 4
  [30] main::$7 = word1  main::$6
  [31] main::x#0 = $a0 + main::$7
  [32] main::$20 = main::idx_y#3 << 1
  [33] main::$22 = SINE + main::$20
  [34] main::sin_y#0 = *main::$22
  [35] mul16s::b#2 = main::sin_y#0
  [36] call mul16s 
  [37] mul16s::return#4 = mul16s::return#1
  to:main::@10
main::@10: scope:[main]  from main::@9
  [38] main::ypos#0 = mul16s::return#4
  [39] main::$10 = main::ypos#0 << 4
  [40] main::$11 = word1  main::$10
  [41] main::y#0 = $64 + main::$11
  [42] bitmap_plot::x#0 = main::x#0
  [43] bitmap_plot::y#0 = (byte)main::y#0
  [44] call bitmap_plot 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [45] main::idx_x#1 = ++ main::idx_x#3
  [46] if(main::idx_x#1!=$200) goto main::@12
  to:main::@3
main::@12: scope:[main]  from main::@11
  [47] phi()
  to:main::@3
main::@3: scope:[main]  from main::@11 main::@12
  [48] main::idx_x#10 = phi( main::@12/main::idx_x#1, main::@11/0 )
  [49] main::idx_y#1 = ++ main::idx_y#3
  [50] if(main::idx_y#1!=$200) goto main::@13
  to:main::@4
main::@13: scope:[main]  from main::@3
  [51] phi()
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@3
  [52] main::idx_y#10 = phi( main::@13/main::idx_y#1, main::@3/0 )
  [53] plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt]
  to:main::@1

void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
sin16s_gen2: scope:[sin16s_gen2]  from main
  [54] phi()
  [55] call div32u16u 
  [56] div32u16u::return#0 = div32u16u::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [57] sin16s_gen2::step#0 = div32u16u::return#0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [58] sin16s_gen2::sintab#2 = phi( sin16s_gen2::@3/SINE, sin16s_gen2::@5/sin16s_gen2::sintab#0 )
  [58] sin16s_gen2::x#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::x#1 )
  [58] sin16s_gen2::i#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::i#1 )
  [59] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [60] return 
  to:@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [61] sin16s::x#0 = sin16s_gen2::x#2
  [62] call sin16s 
  [63] sin16s::return#0 = sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  [64] mul16s::a#0 = sin16s::return#0
  [65] call mul16s 
  [66] mul16s::return#0 = mul16s::return#1
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [67] sin16s_gen2::$6 = mul16s::return#0
  [68] sin16s_gen2::$8 = word1  sin16s_gen2::$6
  [69] *sin16s_gen2::sintab#2 = (signed word)sin16s_gen2::$8
  [70] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_SIGNED_WORD
  [71] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0
  [72] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2
  to:sin16s_gen2::@1

void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@6
  [73] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [74] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [74] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [75] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [76] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [77] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [78] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [79] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [80] bitmap_init::x#1 = ++ bitmap_init::x#2
  [81] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [82] bitmap_init::yoffs#2 = phi( bitmap_init::@2/BITMAP, bitmap_init::@4/bitmap_init::yoffs#4 )
  [82] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [83] bitmap_init::$7 = bitmap_init::y#2 & 7
  [84] bitmap_init::$4 = byte0  bitmap_init::yoffs#2
  [85] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4
  [86] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  [87] bitmap_init::$6 = byte1  bitmap_init::yoffs#2
  [88] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  [89] if(bitmap_init::$7!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [90] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (word)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [91] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [92] bitmap_init::y#1 = ++ bitmap_init::y#2
  [93] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [94] return 
  to:@return

void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@7
  [95] phi()
  [96] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [97] phi()
  [98] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [99] return 
  to:@return

void init_irq()
init_irq: scope:[init_irq]  from main::@5
  asm { sei  }
  [101] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [102] *PROCPORT = PROCPORT_RAM_IO
  [103] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [104] *VICII_CONTROL1 = *VICII_CONTROL1 | $80
  [105] *RASTER = 0
  [106] *IRQ_ENABLE = IRQ_RASTER
  [107] *HARDWARE_IRQ = &irq
  asm { cli  }
  to:init_irq::@return
init_irq::@return: scope:[init_irq]  from init_irq
  [109] return 
  to:@return

signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
mul16s: scope:[mul16s]  from main::@2 main::@9 sin16s_gen2::@4
  [110] mul16s::b#3 = phi( main::@9/mul16s::b#2, main::@2/mul16s::b#1, sin16s_gen2::@4/sin16s_gen2::ampl#0 )
  [110] mul16s::a#3 = phi( main::@9/$64, main::@2/$a0, sin16s_gen2::@4/mul16s::a#0 )
  [111] mul16u::a#2 = (word)mul16s::a#3
  [112] mul16u::b#1 = (word)mul16s::b#3
  [113] call mul16u 
  [114] mul16u::return#3 = mul16u::res#2
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  [115] mul16s::m#0 = mul16u::return#3
  [116] if(mul16s::a#3>=0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@5
  [117] mul16s::$6 = word1  mul16s::m#0
  [118] mul16s::$11 = mul16s::$6 - (word)mul16s::b#3
  [119] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  [120] mul16s::m#5 = phi( mul16s::@3/mul16s::m#1, mul16s::@5/mul16s::m#0 )
  [121] if(mul16s::b#3>=0) goto mul16s::@2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s::@1
  [122] mul16s::$9 = word1  mul16s::m#5
  [123] mul16s::$12 = mul16s::$9 - (word)mul16s::a#3
  [124] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  [125] mul16s::m#4 = phi( mul16s::@1/mul16s::m#5, mul16s::@4/mul16s::m#2 )
  [126] mul16s::return#1 = (signed dword)mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [127] return 
  to:@return

void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from main::@10
  [128] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#0] w= bitmap_plot_ylo[bitmap_plot::y#0]
  [129] bitmap_plot::$0 = bitmap_plot::x#0 & $fff8
  [130] bitmap_plot::plotter#1 = (byte*)bitmap_plot::plotter#0 + bitmap_plot::$0
  [131] bitmap_plot::$1 = byte0  bitmap_plot::x#0
  [132] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$1]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [133] return 
  to:@return

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [134] phi()
  [135] call divr16u 
  [136] divr16u::return#2 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [137] div32u16u::quotient_hi#0 = divr16u::return#2
  [138] divr16u::rem#4 = rem16u#14
  [139] call divr16u 
  [140] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [141] div32u16u::quotient_lo#0 = divr16u::return#3
  [142] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [143] return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  [144] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [145] sin16s::x#1 = sin16s::x#0 - PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [146] sin16s::isUpper#2 = phi( sin16s/0, sin16s::@4/1 )
  [146] sin16s::x#4 = phi( sin16s/sin16s::x#0, sin16s::@4/sin16s::x#1 )
  [147] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [148] sin16s::x#2 = PI_u4f28 - sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [149] sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  [150] sin16s::$4 = sin16s::x#6 << 3
  [151] sin16s::x1#0 = word1  sin16s::$4
  [152] mulu16_sel::v1#0 = sin16s::x1#0
  [153] mulu16_sel::v2#0 = sin16s::x1#0
  [154] call mulu16_sel 
  [155] mulu16_sel::return#0 = mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [156] sin16s::x2#0 = mulu16_sel::return#0
  [157] mulu16_sel::v1#1 = sin16s::x2#0
  [158] mulu16_sel::v2#1 = sin16s::x1#0
  [159] call mulu16_sel 
  [160] mulu16_sel::return#1 = mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [161] sin16s::x3#0 = mulu16_sel::return#1
  [162] mulu16_sel::v1#2 = sin16s::x3#0
  [163] call mulu16_sel 
  [164] mulu16_sel::return#2 = mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [165] sin16s::x3_6#0 = mulu16_sel::return#2
  [166] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0
  [167] mulu16_sel::v1#3 = sin16s::x3#0
  [168] mulu16_sel::v2#3 = sin16s::x1#0
  [169] call mulu16_sel 
  [170] mulu16_sel::return#10 = mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [171] sin16s::x4#0 = mulu16_sel::return#10
  [172] mulu16_sel::v1#4 = sin16s::x4#0
  [173] mulu16_sel::v2#4 = sin16s::x1#0
  [174] call mulu16_sel 
  [175] mulu16_sel::return#11 = mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [176] sin16s::x5#0 = mulu16_sel::return#11
  [177] sin16s::x5_128#0 = sin16s::x5#0 >> 4
  [178] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0
  [179] if(sin16s::isUpper#2==0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [180] sin16s::sinx#1 = - (signed word)sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [181] sin16s::return#1 = phi( sin16s::@12/sin16s::return#5, sin16s::@6/sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [182] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [183] sin16s::return#5 = (signed word)sin16s::usinx#1
  to:sin16s::@3

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [184] memset::c#4 = phi( bitmap_clear/bitmap_clear::col#0, bitmap_clear::@1/0 )
  [184] memset::str#3 = phi( bitmap_clear/(void*)SCREEN, bitmap_clear::@1/(void*)BITMAP )
  [184] memset::num#2 = phi( bitmap_clear/$3e8, bitmap_clear::@1/$1f40 )
  [185] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [186] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [187] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [188] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [189] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [190] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [191] *memset::dst#2 = memset::c#4
  [192] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [193] mul16u::a#6 = phi( mul16s/mul16u::a#2, mulu16_sel/mul16u::a#0 )
  [193] mul16u::b#2 = phi( mul16s/mul16u::b#1, mulu16_sel/mul16u::b#0 )
  [194] mul16u::mb#0 = (dword)mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [195] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [195] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [195] mul16u::a#3 = phi( mul16u/mul16u::a#6, mul16u::@3/mul16u::a#1 )
  [196] if(mul16u::a#3!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [197] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [198] mul16u::$1 = mul16u::a#3 & 1
  [199] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [200] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [201] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [202] mul16u::a#1 = mul16u::a#3 >> 1
  [203] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [204] divr16u::dividend#5 = phi( div32u16u/word1 PI2_u4f28, div32u16u::@1/word0 PI2_u4f28 )
  [204] divr16u::rem#10 = phi( div32u16u/0, div32u16u::@1/divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [205] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [205] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [205] divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#0 )
  [205] divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  [206] divr16u::rem#0 = divr16u::rem#5 << 1
  [207] divr16u::$1 = byte1  divr16u::dividend#3
  [208] divr16u::$2 = divr16u::$1 & $80
  [209] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [210] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [211] divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [212] divr16u::dividend#0 = divr16u::dividend#3 << 1
  [213] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [214] if(divr16u::rem#6<sin16s_gen2::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [215] divr16u::quotient#2 = ++ divr16u::quotient#1
  [216] divr16u::rem#2 = divr16u::rem#6 - sin16s_gen2::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [217] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [217] divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  [218] divr16u::i#1 = ++ divr16u::i#2
  [219] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [220] rem16u#14 = divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [221] return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [222] mulu16_sel::select#5 = phi( sin16s::@10/0, sin16s::@2/0, sin16s::@7/1, sin16s::@8/1, sin16s::@9/0 )
  [222] mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/(word)$10000/6, sin16s::@9/mulu16_sel::v2#3 )
  [222] mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  [223] mul16u::a#0 = mulu16_sel::v1#5
  [224] mul16u::b#0 = mulu16_sel::v2#5
  [225] call mul16u 
  [226] mul16u::return#0 = mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [227] mulu16_sel::$0 = mul16u::return#0
  [228] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  [229] mulu16_sel::return#12 = word1  mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [230] return 
  to:@return
