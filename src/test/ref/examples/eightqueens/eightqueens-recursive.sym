constant byte* const COLORRAM = (byte*) 55296
constant byte* const DEFAULT_SCREEN = (byte*) 1024
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte LIGHT_BLUE = $e
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
constant byte* RADIX_HEXADECIMAL_VALUES_CHAR[]  = { $10 }
constant byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
constant word STACK_BASE = $103
void __start()
constant byte* board[$14]  = { fill( $14, 0) }
void clrscr()
byte clrscr::c
byte clrscr::c#1 c zp[1]:9 20002.0
byte clrscr::c#2 c zp[1]:9 12501.25
byte clrscr::l
byte clrscr::l#1 l zp[1]:4 2002.0
byte clrscr::l#2 l zp[1]:4 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:15 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:15 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:10 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:10 1714.7142857142858
void conio_c64_init()
constant byte* const conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 line zp[1]:2 11.0
byte conio_c64_init::line#2 line zp[1]:2 22.0
byte conio_cursor_x loadstore zp[1]:17 9.146341463414634E27
byte conio_cursor_y loadstore zp[1]:18 1.787709497206704E29
byte* conio_line_color loadstore zp[2]:21 1.3076923076923077E29
byte* conio_line_text loadstore zp[2]:19 1.2848837209302325E29
dword count loadstore zp[4]:23 3.0303030303424248E10
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 c zp[1]:13 2.0E28
byte cputc::c#1 c zp[1]:13 2.0E27
byte cputc::c#2 c zp[1]:13 2.00000000000002E14
byte cputc::c#3 c zp[1]:13 1.0550000000000004E29
void cputln()
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 c zp[1]:13 1.0E28
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:10 5.0E27
const byte* cputs::s#11 s zp[2]:10 1.5000000000000497E28
const byte* cputs::s#12 s zp[2]:10 1.000000000000001E15
void cscroll()
byte diff(byte diff::a , byte diff::b)
byte diff::a
byte diff::a#0 a zp[1]:13 1.000000000001E12
byte diff::a#1 a zp[1]:13 1.000000000001E12
byte diff::a#2 a zp[1]:13 1.60000000000025E13
byte diff::b
byte diff::b#0 b zp[1]:9 2.000000000002E12
byte diff::b#1 b zp[1]:9 2.000000000002E12
byte diff::b#2 b zp[1]:9 1.60000000000025E13
byte diff::return
byte diff::return#0 return zp[1]:41 2.000000000002E12
byte diff::return#1 return_1 zp[1]:13 2.000000000002E12
byte diff::return#2 return_1 zp[1]:13 2.0000000000002E13
byte diff::return#3 return_1 zp[1]:13 2.0000000000002E13
byte diff::return#4 return_1 zp[1]:13 5.500000000001E12
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:35 202.0
byte*~ gotoxy::$6 zp[2]:31 202.0
word~ gotoxy::$7 zp[2]:31 151.5
word~ gotoxy::$8 zp[2]:33 202.0
word~ gotoxy::$9 zp[2]:31 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:31 101.0
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#2 y zp[1]:2 22.0
byte gotoxy::y#4 y zp[1]:2 71.0
byte gotoxy::y#5 y zp[1]:2 67.33333333333333
byte legal(byte legal::row , byte legal::column)
byte~ legal::$0 zp[1]:38 2.000000000002E12
byte~ legal::$3 zp[1]:41 3.333333333336667E11
byte~ legal::$4 zp[1]:13 2.000000000002E12
byte legal::column
byte legal::column#0 column zp[1]:37 1.6666666666683334E11
byte legal::i
byte legal::i#1 i zp[1]:3 2.000000000002E12
byte legal::i#2 i zp[1]:3 4.0000000000039996E11
byte legal::return
byte legal::return#0 return zp[1]:4 2.000000000002E12
byte legal::return#4 return zp[1]:4 3.333333333336667E11
byte legal::row
byte legal::row#0 row zp[1]:30 1.5789473684226315E11
void main()
constant byte* main::s[$29]  = " - n queens problem using backtracking -"
constant byte* main::s1[$13]  = "
number of queens:"
constant byte* main::s2[$e]  = "

solutions: "
constant byte* main::s3[3]  = ".
"
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:15
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:15 1.0E46
byte* memcpy::dst#2 dst zp[2]:15 1.0000000000000033E46
byte* memcpy::dst#4 dst zp[2]:15 2.0E32
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:39
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:39 2.0E46
byte* memcpy::src#2 src zp[2]:39 1.0000000000000025E46
byte* memcpy::src#4 src zp[2]:39 1.0E32
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:47 1.2500000000000125E45
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 c zp[1]:27 1.4285714285714287E45
byte* memset::dst
byte* memset::dst#1 dst zp[2]:15 2.0E46
byte* memset::dst#2 dst zp[2]:15 1.3333333333333366E46
byte* memset::dst#4 dst zp[2]:15 2.0E32
byte* memset::end
byte* memset::end#0 end zp[2]:47 1.6666666666666835E45
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:15
void print()
byte print::i
byte print::i#1 i zp[1]:3 2.000000000002E12
byte print::i#2 i zp[1]:3 1.000000000001E12
byte print::i1
byte print::i1#1 i1 zp[1]:3 2.000000000002E12
byte print::i1#2 i1 zp[1]:3 1.0000000000003572E12
byte print::j
byte print::j#1 j zp[1]:9 2.0000000000002E13
byte print::j#2 j zp[1]:9 5.714285714286286E12
constant byte* print::s[3]  = "
#"
constant byte* print::s1[4]  = ":
 "
constant byte* print::s2[2]  = "
"
constant byte* print::s3[2]  = "Q"
constant byte* print::s4[2]  = "-"
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
word~ printf_number_buffer::$19 zp[2]:39 1.00000000000001E14
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:41 202.0
byte printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:41 202.0
byte printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:41 1.55000000000103E13
byte printf_number_buffer::buffer_sign#2 buffer_sign zp[1]:41 2.0000000000002E13
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:37 6.451612903225871E12
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#3 format_min_length zp[1]:30 1.00000000000001E13
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:12 3.846153846153885E12
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:38 9.375000000000094E12
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0 len zp[1]:13 1.500000000000015E14
signed byte printf_number_buffer::len#1 len zp[1]:13 2.00000000000002E14
signed byte printf_number_buffer::len#2 len zp[1]:13 3.00000000000003E14
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#1 padding zp[1]:30 1.00000000000001E14
signed byte printf_number_buffer::padding#10 padding zp[1]:30 1.904761904761924E13
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
byte printf_padding::i
byte printf_padding::i#1 i zp[1]:46 2.0E27
byte printf_padding::i#2 i zp[1]:46 7.500000000000001E26
byte printf_padding::length
byte printf_padding::length#0 length zp[1]:14 2.00000000000002E14
byte printf_padding::length#1 length zp[1]:14 2.00000000000002E14
byte printf_padding::length#2 length zp[1]:14 2.00000000000002E14
byte printf_padding::length#4 length zp[1]:14 1.6666666666671665E26
byte printf_padding::pad
byte printf_padding::pad#5 pad zp[1]:13 1.6666666666666666E26
void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
struct printf_format_number printf_uchar::format
byte printf_uchar::format_justify_left
byte printf_uchar::format_min_length
byte printf_uchar::format_radix
byte printf_uchar::format_sign_always
byte printf_uchar::format_upper_case
byte printf_uchar::format_zero_padding
byte printf_uchar::uvalue
byte printf_uchar::uvalue#0 uvalue zp[1]:3 2.000000000002E12
byte printf_uchar::uvalue#1 uvalue zp[1]:3 2.000000000002E12
byte printf_uchar::uvalue#2 uvalue zp[1]:3 6.0000000000015E12
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
constant byte printf_uint::format_justify_left#0 format_justify_left = 0
byte printf_uint::format_min_length
constant byte printf_uint::format_min_length#0 format_min_length = 0
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
constant byte printf_uint::format_upper_case#0 format_upper_case = 0
byte printf_uint::format_zero_padding
constant byte printf_uint::format_zero_padding#0 format_zero_padding = 0
word printf_uint::uvalue
constant word printf_uint::uvalue#0 uvalue = 8
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
byte printf_ulong::format_min_length
byte printf_ulong::format_radix
byte printf_ulong::format_sign_always
byte printf_ulong::format_upper_case
byte printf_ulong::format_zero_padding
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0 uvalue zp[4]:5 22.0
dword printf_ulong::uvalue#1 uvalue zp[4]:5 22.0
dword printf_ulong::uvalue#2 uvalue zp[4]:5 61.5
__stackcall void queen(byte queen::row)
byte~ queen::$1 zp[1]:4 2.000000000002E12
byte~ queen::$4 zp[1]:30 2.000000000002E12
constant byte queen::OFFSET_STACK_ROW = 0
volatile byte queen::column loadstore zp[1]:29 2.9411764706505884E11
volatile byte queen::r loadstore zp[1]:28 2.10526315795E11
byte queen::row
byte queen::row#0 row zp[1]:27 202.0
word strlen(byte* strlen::str)
word strlen::len
word strlen::len#1 len zp[2]:39 1.0E27
word strlen::len#2 len zp[2]:39 5.00000000000025E26
word strlen::return
word strlen::return#2 return zp[2]:39 2.00000000000002E14
byte* strlen::str
byte* strlen::str#0 str zp[2]:15 2.0E27
byte* strlen::str#2 str zp[2]:15 1.0E27
byte* strupr(byte* strupr::str)
byte~ strupr::$0 zp[1]:14 2.0E27
byte* strupr::return
byte* strupr::src
byte* strupr::src#1 src zp[2]:39 2.0E27
byte* strupr::src#2 src zp[2]:39 7.142857142857143E26
byte* strupr::str
constant byte* strupr::str#0 str = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 ch zp[1]:14 1.6999999999999998E28
byte toupper::return
byte toupper::return#0 return zp[1]:14 2.0E28
byte toupper::return#2 return zp[1]:14 1.0333333333333333E28
byte toupper::return#3 return zp[1]:14 2.0E27
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:15 3.3333333333350004E25
byte* uctoa::buffer#14 buffer zp[2]:15 1.5000000000000002E26
byte* uctoa::buffer#3 buffer zp[2]:15 2.00000000000002E14
byte* uctoa::buffer#4 buffer zp[2]:15 2.0E26
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:41 2.0E26
byte uctoa::digit#2 digit zp[1]:41 3.076923076923077E25
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:46 6.000000000000001E25
byte* uctoa::digit_values
byte uctoa::max_digits
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:13 6.000000000000001E25
byte uctoa::started#4 started zp[1]:13 1.0E26
byte uctoa::value
byte uctoa::value#0 value zp[1]:12 1.0E26
byte uctoa::value#1 value zp[1]:12 5.5000000000001E13
byte uctoa::value#2 value zp[1]:12 6.666666666670001E25
byte uctoa::value#6 value zp[1]:12 1.5000000000000002E26
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:15 1.3750000000000001E26
byte uctoa_append::digit
byte uctoa_append::digit#1 digit zp[1]:14 1.0E40
byte uctoa_append::digit#2 digit zp[1]:14 1.00000000000005E40
byte uctoa_append::return
byte uctoa_append::return#0 return zp[1]:12 2.0E26
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:46 3.33333333333335E39
byte uctoa_append::value
byte uctoa_append::value#0 value zp[1]:12 3.666666666666667E26
byte uctoa_append::value#1 value zp[1]:12 2.0E40
byte uctoa_append::value#2 value zp[1]:12 5.0000000000001833E39
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 zp[1]:46 2.00000000000002E14
byte~ ultoa::$11 zp[1]:41 2002.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:10 2.8571428571571855E13
byte* ultoa::buffer#14 buffer zp[2]:10 1.500000000000015E14
byte* ultoa::buffer#3 buffer zp[2]:10 2002.0
byte* ultoa::buffer#4 buffer zp[2]:10 2.00000000000002E14
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:37 2.00000000000002E14
byte ultoa::digit#2 digit zp[1]:37 2.8571428571428855E13
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:42 6.000000000000059E13
dword* ultoa::digit_values
byte ultoa::max_digits
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 started zp[1]:38 5.00000000000005E13
byte ultoa::started#4 started zp[1]:38 1.00000000000001E14
dword ultoa::value
dword ultoa::value#0 value zp[4]:5 1.00000000000001E14
dword ultoa::value#1 value zp[4]:5 551.0
dword ultoa::value#2 value zp[4]:5 5.714285714300071E13
dword ultoa::value#6 value zp[4]:5 1.500000000000015E14
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:10 1.3750000000000025E14
byte ultoa_append::digit
byte ultoa_append::digit#1 digit zp[1]:46 1.0E27
byte ultoa_append::digit#2 digit zp[1]:46 1.0000000000005E27
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:5 2.00000000000002E14
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:42 3.3333333333335E26
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:5 3.666666666666674E14
dword ultoa_append::value#1 value zp[4]:5 2.0E27
dword ultoa_append::value#2 value zp[4]:5 5.0000000000018335E26
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 zp[1]:38 20002.0
byte~ utoa::$11 zp[1]:37 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:10 3000.4285714285716
byte* utoa::buffer#14 buffer zp[2]:10 15001.5
byte* utoa::buffer#3 buffer zp[2]:10 2002.0
byte* utoa::buffer#4 buffer zp[2]:10 20002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:9 20002.0
byte utoa::digit#2 digit zp[1]:9 2857.4285714285716
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:39 6000.6
word* utoa::digit_values
byte utoa::max_digits
constant byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 started zp[1]:30 5000.5
byte utoa::started#4 started zp[1]:30 10001.0
word utoa::value
word utoa::value#0 value zp[2]:15 10001.0
word utoa::value#2 value zp[2]:15 5714.857142857143
word utoa::value#6 value zp[2]:15 15001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:10 13750.25
byte utoa_append::digit
byte utoa_append::digit#1 digit zp[1]:14 1.0000001E7
byte utoa_append::digit#2 digit zp[1]:14 1.00500015E7
word utoa_append::return
word utoa_append::return#0 return zp[2]:15 20002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:39 3335000.5
word utoa_append::value
word utoa_append::value#0 value zp[2]:15 36667.33333333333
word utoa_append::value#1 value zp[2]:15 2.0000002E7
word utoa_append::value#2 value zp[2]:15 5018334.166666666

zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 gotoxy::y#5 gotoxy::y#4 gotoxy::y#2 ]
zp[1]:3 [ print::i#2 print::i#1 printf_uchar::uvalue#2 printf_uchar::uvalue#1 printf_uchar::uvalue#0 print::i1#2 print::i1#1 legal::i#2 legal::i#1 ]
zp[1]:4 [ clrscr::l#2 clrscr::l#1 legal::return#4 legal::return#0 queen::$1 ]
zp[4]:5 [ printf_ulong::uvalue#2 printf_ulong::uvalue#0 printf_ulong::uvalue#1 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
zp[1]:9 [ utoa::digit#2 utoa::digit#1 diff::b#2 diff::b#0 diff::b#1 clrscr::c#2 clrscr::c#1 print::j#2 print::j#1 ]
zp[2]:10 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 cputs::s#11 cputs::s#12 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ]
zp[1]:12 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 uctoa_append::return#0 printf_number_buffer::format_upper_case#10 ]
zp[1]:13 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 printf_padding::pad#5 cputs::c#1 diff::a#2 diff::a#0 diff::a#1 diff::return#4 diff::return#2 diff::return#3 diff::return#1 legal::$4 ]
zp[1]:14 [ toupper::return#2 toupper::return#0 toupper::ch#0 toupper::return#3 strupr::$0 uctoa_append::digit#2 uctoa_append::digit#1 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:15 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 strlen::str#2 strlen::str#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[1]:17 [ conio_cursor_x ]
zp[1]:18 [ conio_cursor_y ]
zp[2]:19 [ conio_line_text ]
zp[2]:21 [ conio_line_color ]
zp[4]:23 [ count ]
zp[1]:27 [ queen::row#0 memset::c#4 ]
zp[1]:28 [ queen::r ]
zp[1]:29 [ queen::column ]
zp[1]:30 [ queen::$4 legal::row#0 printf_number_buffer::format_min_length#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 utoa::started#2 utoa::started#4 ]
zp[2]:31 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:33 [ gotoxy::$8 ]
zp[2]:35 [ gotoxy::$5 ]
zp[1]:37 [ utoa::$11 legal::column#0 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
zp[1]:38 [ utoa::$10 legal::$0 ultoa::started#2 ultoa::started#4 printf_number_buffer::format_zero_padding#10 ]
zp[2]:39 [ utoa::digit_value#0 utoa_append::sub#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 ]
zp[1]:41 [ ultoa::$11 diff::return#0 legal::$3 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#2 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
zp[4]:42 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
zp[1]:46 [ uctoa::digit_value#0 uctoa_append::sub#0 ultoa::$10 ultoa_append::digit#2 ultoa_append::digit#1 printf_padding::i#2 printf_padding::i#1 ]
zp[2]:47 [ memset::end#0 memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
