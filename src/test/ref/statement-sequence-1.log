Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (number~) main::$0 ← (byte) main::i#2 + (number) 5
  (byte) main::c#0 ← (number~) main::$0
  (number~) main::$1 ← (byte) main::i#2 & (number) 1
  (bool~) main::$2 ← (number~) main::$1 == (number) 0
  (bool~) main::$3 ← (byte) main::i#2 > (number) 5
  (bool~) main::$4 ← (bool~) main::$2 || (bool~) main::$3
  (bool~) main::$5 ← ! (bool~) main::$4
  if((bool~) main::$5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::c#2 ← phi( main::@1/(byte) main::c#0 main::@3/(byte) main::c#1 )
  *((byte*) main::SCREEN#0 + (byte) main::i#3) ← (byte) main::c#2
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$a)
  (bool~) main::$6 ← (byte) main::i#1 != rangelast(0,$a)
  if((bool~) main::$6) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::c#3 ← phi( main::@1/(byte) main::c#0 )
  (byte) main::c#1 ← ++ (byte) main::c#3
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(number~) main::$0
(number~) main::$1
(bool~) main::$2
(bool~) main::$3
(bool~) main::$4
(bool~) main::$5
(bool~) main::$6
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Adding number conversion cast (unumber) 5 in (number~) main::$0 ← (byte) main::i#2 + (number) 5
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::i#2 + (unumber)(number) 5
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::i#2 & (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::i#2 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) main::$2 ← (unumber~) main::$1 == (number) 0
Adding number conversion cast (unumber) 5 in (bool~) main::$3 ← (byte) main::i#2 > (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 5
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::i#2 + (byte) 5
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::i#2 & (byte) 1
Alias (byte) main::c#0 = (byte~) main::$0 (byte) main::c#3 
Alias (byte) main::i#2 = (byte) main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::i#2 = (byte) main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$6 [15] if((byte) main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [9] (bool~) main::$5 ← ! (bool~) main::$4
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [8] (bool~) main::$4 ← (bool~) main::$2 || (bool~) main::$3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [13] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [15] if(main::i#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Adding number conversion cast (unumber) $b in if((byte) main::i#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$2 [5] if((byte~) main::$1==(byte) 0) goto main::@3
Simple Condition (bool~) main::$3 [13] if((byte) main::i#2>(byte) 5) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [13] if((byte) main::i#2<=(byte) 5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Rewriting conditional comparison [13] if((byte) main::i#2<=(byte) 5) goto main::@2
Adding number conversion cast (unumber) 5+1 in if((byte) main::i#2<(byte) 5+(number) 1) goto main::@2
Adding number conversion cast (unumber) 1 in if((byte) main::i#2<(unumber)(byte) 5+(number) 1) goto main::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) 5+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@6(between main::@2 and main::@1)
Added new block during phi lifting main::@7(between main::@5 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [12] main::c#5 ← main::c#1
Coalesced [18] main::i#5 ← main::i#1
Coalesced [19] main::c#4 ← main::c#0
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@7
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] (byte) main::c#0 ← (byte) main::i#2 + (byte) 5
  [7] (byte~) main::$1 ← (byte) main::i#2 & (byte) 1
  [8] if((byte~) main::$1==(byte) 0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@1
  [9] if((byte) main::i#2<(byte) 5+(byte) 1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [10] (byte) main::c#1 ← ++ (byte) main::c#0
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@4
  [11] (byte) main::c#2 ← phi( main::@4/(byte) main::c#0 main::@3/(byte) main::c#1 )
  [12] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#2
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  [14] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$1 22.0
(byte*) main::SCREEN
(byte) main::c
(byte) main::c#0 8.25
(byte) main::c#1 22.0
(byte) main::c#2 33.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::c#2 main::c#0 main::c#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::c#2 main::c#0 main::c#1 ]
[ main::$1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::c#2 main::c#0 main::c#1 ]
Allocated zp ZP_BYTE:4 [ main::$1 ]

INITIAL ASM
  // File Comments
// Tests statement sequence  generation
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _1 = 4
    .label c = 3
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte) main::c#0 ← (byte) main::i#2 + (byte) 5 -- vbuz1=vbuz2_plus_vbuc1 
    lax i
    axs #-[5]
    stx c
    // [7] (byte~) main::$1 ← (byte) main::i#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and i
    sta _1
    // [8] if((byte~) main::$1==(byte) 0) goto main::@3 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b3
    jmp b4
    // main::@4
  b4:
    // [9] if((byte) main::i#2<(byte) 5+(byte) 1) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #5+1
    bcc b2_from_b4
    jmp b3
    // main::@3
  b3:
    // [10] (byte) main::c#1 ← ++ (byte) main::c#0 -- vbuz1=_inc_vbuz1 
    inc c
    // [11] phi from main::@3 main::@4 to main::@2 [phi:main::@3/main::@4->main::@2]
  b2_from_b3:
  b2_from_b4:
    // [11] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@3/main::@4->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [12] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda c
    ldy i
    sta SCREEN,y
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [14] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp i
    bne b1_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [15] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::c#2 main::c#0 main::c#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$1 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 63.25: zp ZP_BYTE:3 [ main::c#2 main::c#0 main::c#1 ] 24.75: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:4 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 563 combination reg byte x [ main::c#2 main::c#0 main::c#1 ] reg byte y [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [] best 563 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests statement sequence  generation
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte) main::c#0 ← (byte) main::i#2 + (byte) 5 -- vbuxx=vbuyy_plus_vbuc1 
    tya
    tax
    axs #-[5]
    // [7] (byte~) main::$1 ← (byte) main::i#2 & (byte) 1 -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #1
    // [8] if((byte~) main::$1==(byte) 0) goto main::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
    jmp b4
    // main::@4
  b4:
    // [9] if((byte) main::i#2<(byte) 5+(byte) 1) goto main::@2 -- vbuyy_lt_vbuc1_then_la1 
    cpy #5+1
    bcc b2_from_b4
    jmp b3
    // main::@3
  b3:
    // [10] (byte) main::c#1 ← ++ (byte) main::c#0 -- vbuxx=_inc_vbuxx 
    inx
    // [11] phi from main::@3 main::@4 to main::@2 [phi:main::@3/main::@4->main::@2]
  b2_from_b3:
  b2_from_b4:
    // [11] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@3/main::@4->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [12] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN,y
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [14] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b1_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [15] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b2_from_b4 with b2
Replacing label b1_from_b2 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b3:
Removing instruction b2_from_b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b4:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$1 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::c
(byte) main::c#0 reg byte x 8.25
(byte) main::c#1 reg byte x 22.0
(byte) main::c#2 reg byte x 33.0
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 8.25

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::c#2 main::c#0 main::c#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 371

  // File Comments
// Tests statement sequence  generation
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // c = i+5
    // [6] (byte) main::c#0 ← (byte) main::i#2 + (byte) 5 -- vbuxx=vbuyy_plus_vbuc1 
    tya
    tax
    axs #-[5]
    // i&1
    // [7] (byte~) main::$1 ← (byte) main::i#2 & (byte) 1 -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #1
    // if((i&1)==0 || i>5)
    // [8] if((byte~) main::$1==(byte) 0) goto main::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3
    // main::@4
    // [9] if((byte) main::i#2<(byte) 5+(byte) 1) goto main::@2 -- vbuyy_lt_vbuc1_then_la1 
    cpy #5+1
    bcc b2
    // main::@3
  b3:
    // c++;
    // [10] (byte) main::c#1 ← ++ (byte) main::c#0 -- vbuxx=_inc_vbuxx 
    inx
    // [11] phi from main::@3 main::@4 to main::@2 [phi:main::@3/main::@4->main::@2]
    // [11] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@3/main::@4->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // SCREEN[i] = c
    // [12] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN,y
    // for(byte i: 0..10)
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [14] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data

