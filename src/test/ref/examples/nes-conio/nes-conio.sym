(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*) 16384
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const nomodify byte*) FR_COUNTER = (byte*) 16407
(const nomodify byte) JOY_DOWN = (byte) 4
(const nomodify byte) JOY_LEFT = (byte) 2
(const nomodify byte) JOY_RIGHT = (byte) 1
(const nomodify byte) JOY_UP = (byte) 8
(const nomodify byte*) MEMORY = (byte*) 0
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte*) PALETTE[(number) $20]  = { (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $f, (byte) $30, (byte) 8, (byte) 1, (byte) $f, (byte) $18, (byte) 8, (byte) 1, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*) 8192
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_1 = (byte*) 10176
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*) 8192
(const nomodify byte*) PPU_PALETTE = (byte*) 16128
(const nomodify to_volatile byte*) PPU_PPUDATA = (byte*) 8199
(const nomodify to_volatile byte*) PPU_PPUSTATUS = (byte*) 8194
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_BYTE = (byte) 1
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*) 0 }
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@return
(const byte*) conio_cscroll_buffer[(number) $20]  = { fill( $20, 0) }
(byte) conio_cursor_x loadstore zp[1]:17 4375315.90625
(byte) conio_cursor_y loadstore zp[1]:18 6.5306328755102046E7
(byte*) conio_line_text loadstore zp[2]:19 4.9111335755555555E7
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte x 2000002.0
(byte) cputc::c#1 reg byte x 2002.0
(byte) cputc::c#2 reg byte x 7000334.666666666
(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
(label) cputcxy::@1
(label) cputcxy::@return
(byte) cputcxy::c
(byte) cputcxy::c#4 reg byte y 250.25
(byte) cputcxy::x
(byte) cputcxy::x#0 reg byte x 202.0
(byte) cputcxy::x#1 reg byte x 202.0
(byte) cputcxy::x#4 reg byte x 1203.0
(byte) cputcxy::y
(byte) cputcxy::y#2 reg byte a 202.0
(byte) cputcxy::y#3 reg byte a 202.0
(byte) cputcxy::y#4 reg byte a 601.5
(void()) cputln()
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1000001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:13 500000.5
(to_nomodify byte*) cputs::s#2 s zp[2]:13 1500001.5
(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
(label) cputsxy::@1
(label) cputsxy::@return
(to_nomodify byte*) cputsxy::s
(byte) cputsxy::x
(byte) cputsxy::x#0 reg byte x 551.0
(byte) cputsxy::y
(byte) cputsxy::y#0 reg byte a 551.0
(void()) cscroll()
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@return
(byte*) cscroll::line1
(byte*) cscroll::line1#1 line1 zp[2]:23 6.666666666673334E11
(byte*) cscroll::line1#2 line1 zp[2]:23 3.333333333336667E11
(byte*) cscroll::line2
(byte*) cscroll::line2#1 line2 zp[2]:15 1.000000000001E12
(byte*) cscroll::line2#2 line2 zp[2]:15 2.857142857145714E11
(byte) cscroll::y
(byte) cscroll::y#1 reg byte x 2.000000000002E12
(byte) cscroll::y#2 reg byte x 3.75000000000375E11
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(byte*~) gotoxy::$5 zp[2]:19 20002.0
(word~) gotoxy::$6 zp[2]:19 20002.0
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::line_offset
(word) gotoxy::line_offset#0 line_offset zp[2]:19 20002.0
(byte) gotoxy::x
(byte) gotoxy::x#2 reg byte x 1001.0
(byte) gotoxy::x#3 reg byte x 1001.0
(byte) gotoxy::x#4 reg byte x 3667.333333333333
(byte) gotoxy::x#5 reg byte x 20002.0
(byte) gotoxy::y
(byte) gotoxy::y#2 reg byte a 2002.0
(byte) gotoxy::y#3 reg byte a 2002.0
(byte) gotoxy::y#4 reg byte a 7334.666666666666
(byte) gotoxy::y#5 reg byte a 3333.6666666666665
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::enableVideoOutput1
(byte) main::i
(byte) main::i#1 i zp[1]:4 202.0
(byte) main::i#2 i zp[1]:4 86.57142857142857
(label) main::initNES1
(label) main::initNES1_@1
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(label) main::initNES1_disableVideoOutput1
(byte) main::initNES1_i
(byte) main::initNES1_i#1 reg byte x 151.5
(byte) main::initNES1_i#2 reg byte x 112.22222222222223
(label) main::initNES1_waitForVBlank1
(byte~) main::initNES1_waitForVBlank1_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(byte~) main::initNES1_waitForVBlank2_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank2_@1
(label) main::screensizex1
(byte) main::screensizex1_return
(const byte) main::screensizex1_return#0 screensizex1_return = (byte) $20
(label) main::screensizex2
(byte) main::screensizex2_return
(const byte) main::screensizex2_return#0 screensizex2_return = (byte) $20
(label) main::screensizey1
(byte) main::screensizey1_return
(const byte) main::screensizey1_return#0 screensizey1_return = (byte) $1e
(label) main::screensizey2
(byte) main::screensizey2_return
(const byte) main::screensizey2_return#0 screensizey2_return = (byte) $1e
(label) main::screensizey3
(byte) main::screensizey3_return
(const byte) main::screensizey3_return#0 screensizey3_return = (byte) $1e
(byte) main::x
(byte) main::x#1 x zp[1]:2 202.0
(byte) main::x#10 x zp[1]:2 72.14285714285714
(byte) main::y
(byte) main::y#1 y zp[1]:3 202.0
(byte) main::y#10 y zp[1]:3 72.14285714285714
(const byte*) num_buffer[(number) $b]  = { fill( $b, 0) }
(void()) ppuDataFetch((nomodify void*) ppuDataFetch::cpuData , (nomodify void*) ppuDataFetch::ppuData , (word) ppuDataFetch::size)
(label) ppuDataFetch::@1
(label) ppuDataFetch::@2
(label) ppuDataFetch::@3
(label) ppuDataFetch::@return
(nomodify void*) ppuDataFetch::cpuData
(const nomodify void*) ppuDataFetch::cpuData#0 cpuData = (void*)(const byte*) conio_cscroll_buffer
(byte*) ppuDataFetch::cpuDst
(byte*) ppuDataFetch::cpuDst#1 cpuDst zp[2]:7 1.0E17
(byte*) ppuDataFetch::cpuDst#2 cpuDst zp[2]:7 7.5E16
(word) ppuDataFetch::i
(word) ppuDataFetch::i#1 i zp[2]:5 2.0E17
(word) ppuDataFetch::i#2 i zp[2]:5 6.0E16
(nomodify void*) ppuDataFetch::ppuData
(nomodify void*) ppuDataFetch::ppuData#0 ppuData zp[2]:25 5.25000000000075E12
(label) ppuDataFetch::ppuDataPrepare1
(byte~) ppuDataFetch::ppuDataPrepare1_$0 reg byte a 2.0000000000002E13
(byte~) ppuDataFetch::ppuDataPrepare1_$1 reg byte a 2.0000000000002E13
(nomodify void*) ppuDataFetch::ppuDataPrepare1_ppuData
(label) ppuDataFetch::ppuDataRead1
(byte) ppuDataFetch::ppuDataRead1_return
(byte) ppuDataFetch::ppuDataRead1_return#0 reg byte a 2.0E17
(word) ppuDataFetch::size
(const word) ppuDataFetch::size#0 size = (byte) $20
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#1 i zp[2]:25 2.000000000002E12
(word) ppuDataFill::i#2 i zp[2]:25 1.000000000001E12
(nomodify void*) ppuDataFill::ppuData
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0 reg byte a 2.0000000002E10
(byte~) ppuDataFill::ppuDataPrepare1_$1 reg byte a 2.0000000002E10
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:9 6.666666667333333E9
(label) ppuDataFill::ppuDataPut1
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#5 size zp[2]:11 1.1111111111122223E11
(byte) ppuDataFill::val
(byte) ppuDataFill::val#10 reg byte x 1.1111111111122223E11
(void()) ppuDataSet((nomodify void*) ppuDataSet::ppuData , (byte) ppuDataSet::val)
(label) ppuDataSet::@return
(nomodify void*) ppuDataSet::ppuData
(nomodify byte*) ppuDataSet::ppuData#0 ppuData zp[2]:23 2000000.2
(label) ppuDataSet::ppuDataPrepare1
(byte~) ppuDataSet::ppuDataPrepare1_$0 reg byte x 2.00000002E8
(byte~) ppuDataSet::ppuDataPrepare1_$1 reg byte x 2.00000002E8
(nomodify void*) ppuDataSet::ppuDataPrepare1_ppuData
(label) ppuDataSet::ppuDataPut1
(byte) ppuDataSet::ppuDataPut1_val
(byte) ppuDataSet::val
(byte) ppuDataSet::val#0 reg byte a 1.8333333666666668E7
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@4
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(nomodify void*) ppuDataTransfer::cpuData#2 cpuData zp[2]:7
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:7 1.000000000000001E15
(byte*) ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:7 7.52500000000001E14
(byte*) ppuDataTransfer::cpuSrc#6 cpuSrc zp[2]:7 2.0000000000002E13
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 i zp[2]:11 2.000000000000002E15
(word) ppuDataTransfer::i#2 i zp[2]:11 6.000000000000005E14
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuData#0 ppuData zp[2]:5 2.000000000002E12
(label) ppuDataTransfer::ppuDataPrepare1
(byte~) ppuDataTransfer::ppuDataPrepare1_$0 reg byte a 2.0000000000002E13
(byte~) ppuDataTransfer::ppuDataPrepare1_$1 reg byte a 2.0000000000002E13
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:5 7.000000000001E12
(label) ppuDataTransfer::ppuDataPut1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2.000000000000002E15
(word) ppuDataTransfer::size
(word) ppuDataTransfer::size#3 size zp[2]:9 8.333333333333342E13
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(byte()) readJoy1()
(byte~) readJoy1::$1 zp[1]:28 101.0
(byte~) readJoy1::$2 reg byte a 202.0
(label) readJoy1::@1
(label) readJoy1::@2
(label) readJoy1::@return
(byte) readJoy1::i
(byte) readJoy1::i#1 reg byte x 202.0
(byte) readJoy1::i#2 reg byte x 60.599999999999994
(byte) readJoy1::joy
(byte) readJoy1::joy#1 reg byte a 101.0
(byte) readJoy1::joy#2 reg byte a 51.0
(byte) readJoy1::return
(byte) readJoy1::return#2 reg byte a 4.0
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(label) uctoa::@1
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:15 33500.49999999999
(byte*) uctoa::buffer#14 buffer zp[2]:15 150001.5
(byte*) uctoa::buffer#3 buffer zp[2]:15 2002.0
(byte*) uctoa::buffer#4 buffer zp[2]:15 200002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:17 200002.0
(byte) uctoa::digit#2 digit zp[1]:17 30769.53846153846
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 digit_value zp[1]:27 60000.600000000006
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(const byte) uctoa::max_digits#2 max_digits = (byte) 2
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:18 60000.600000000006
(byte) uctoa::started#4 started zp[1]:18 100001.0
(byte) uctoa::value
(byte) uctoa::value#0 reg byte x 100001.0
(byte) uctoa::value#1 reg byte x 551.0
(byte) uctoa::value#2 reg byte x 67000.99999999999
(byte) uctoa::value#6 reg byte x 150001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:15 137500.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 reg byte y 1.000000001E9
(byte) uctoa_append::digit#2 reg byte y 1.0005000015E9
(byte) uctoa_append::return
(byte) uctoa_append::return#0 reg byte x 200002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:27 3.333500005E8
(byte) uctoa_append::value
(byte) uctoa_append::value#0 reg byte x 366667.3333333334
(byte) uctoa_append::value#1 reg byte x 2.000000002E9
(byte) uctoa_append::value#2 reg byte x 5.0018333416666675E8
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 reg byte a 4.0
(byte~) vblank::$3 reg byte a 4.0
(byte~) vblank::$5 reg byte a 4.0
(byte~) vblank::$7 reg byte a 4.0
(label) vblank::@1
(label) vblank::@10
(label) vblank::@11
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@7
(label) vblank::@8
(label) vblank::@9
(label) vblank::@return
(byte) vblank::joy
(byte) vblank::joy#0 reg byte x 0.7142857142857142
(volatile byte) x_scroll loadstore zp[1]:21 1.1500000000000001
(volatile byte) y_scroll loadstore zp[1]:22 1.4761904761904767

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
zp[1]:2 [ main::x#10 main::x#1 ]
zp[1]:3 [ main::y#10 main::y#1 ]
zp[1]:4 [ main::i#2 main::i#1 ]
reg byte x [ cputcxy::x#4 cputcxy::x#0 cputcxy::x#1 ]
reg byte a [ cputcxy::y#4 cputcxy::y#3 cputcxy::y#2 ]
reg byte y [ cputcxy::c#4 ]
reg byte x [ cputc::c#2 cputc::c#1 cputc::c#0 ]
reg byte x [ cscroll::y#2 cscroll::y#1 ]
zp[2]:5 [ ppuDataFetch::i#2 ppuDataFetch::i#1 ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuData#0 ]
zp[2]:7 [ ppuDataFetch::cpuDst#2 ppuDataFetch::cpuDst#1 ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::size#3 ]
zp[2]:11 [ ppuDataFill::size#5 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
reg byte x [ ppuDataFill::val#10 ]
reg byte a [ gotoxy::y#5 gotoxy::y#4 gotoxy::y#2 gotoxy::y#3 ]
reg byte x [ gotoxy::x#5 gotoxy::x#4 gotoxy::x#2 gotoxy::x#3 ]
zp[2]:13 [ cputs::s#2 cputs::s#0 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[2]:15 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 cscroll::line2#2 cscroll::line2#1 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
zp[1]:17 [ conio_cursor_x uctoa::digit#2 uctoa::digit#1 ]
zp[1]:18 [ conio_cursor_y uctoa::started#2 uctoa::started#4 ]
zp[2]:19 [ conio_line_text gotoxy::$5 gotoxy::$6 gotoxy::line_offset#0 ]
zp[1]:21 [ x_scroll ]
zp[1]:22 [ y_scroll ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte x [ cputsxy::x#0 ]
reg byte a [ cputsxy::y#0 ]
zp[2]:23 [ ppuDataSet::ppuData#0 cscroll::line1#2 cscroll::line1#1 ]
reg byte a [ ppuDataSet::val#0 ]
zp[2]:25 [ ppuDataFetch::ppuData#0 ppuDataFill::i#2 ppuDataFill::i#1 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFetch::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFetch::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataFetch::ppuDataRead1_return#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
reg byte x [ ppuDataSet::ppuDataPrepare1_$0 ]
reg byte x [ ppuDataSet::ppuDataPrepare1_$1 ]
reg byte a [ cputs::c#1 ]
zp[1]:27 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
reg byte a [ readJoy1::return#2 ]
reg byte x [ vblank::joy#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]
reg byte a [ vblank::$5 ]
reg byte a [ vblank::$7 ]
zp[1]:28 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
