@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) CORDIC_ATAN2_ANGLES#0) {{ .fill CORDIC_ITERATIONS, 256*atan(1/pow(2,i))/PI/2
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [6] (byte*) main::screen#5 ← phi( main/(byte*) 1024 main::@3/(byte*) main::screen#1 )
  [6] (signed byte) main::y#4 ← phi( main/(signed byte) 0 main::@3/(signed byte) main::y#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [7] (signed byte) main::x#2 ← phi( main::@1/(signed byte) 0 main::@4/(signed byte) main::x#1 )
  [8] (signed byte) atan2::x#0 ← (signed byte) main::x#2
  [9] (signed byte) atan2::y#0 ← (signed byte) main::y#4
  [10] call atan2 
  [11] (byte) atan2::return#0 ← (byte) atan2::return#1
  to:main::@4
main::@4: scope:[main]  from main::@2
  [12] (byte) main::angle#0 ← (byte) atan2::return#0
  [13] *((byte*) main::screen#5 + (signed byte) main::x#2) ← (byte) main::angle#0
  [14] (signed byte) main::x#1 ← ++ (signed byte) main::x#2
  [15] if((signed byte) main::x#1!=(signed byte) $28) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@4
  [16] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28
  [17] (signed byte) main::y#1 ← ++ (signed byte) main::y#4
  [18] if((signed byte) main::y#1!=(signed byte) $19) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [19] return 
  to:@return
atan2: scope:[atan2]  from main::@2
  [20] phi()
  to:atan2::@1
atan2::@1: scope:[atan2]  from atan2 atan2::@5
  [21] (byte) atan2::angle#4 ← phi( atan2/(byte) 0 atan2::@5/(byte) atan2::angle#7 )
  [21] (byte) atan2::i#2 ← phi( atan2/(byte) 0 atan2::@5/(byte) atan2::i#1 )
  [21] (signed byte) atan2::x#3 ← phi( atan2/(signed byte) atan2::x#0 atan2::@5/(signed byte) atan2::x#8 )
  [21] (signed byte) atan2::y#3 ← phi( atan2/(signed byte) atan2::y#0 atan2::@5/(signed byte) atan2::y#8 )
  [22] if((signed byte) atan2::y#3!=(signed byte) 0) goto atan2::@2
  to:atan2::@3
atan2::@3: scope:[atan2]  from atan2::@1 atan2::@5
  [23] (byte) atan2::return#1 ← phi( atan2::@1/(byte) atan2::angle#4 atan2::@5/(byte) atan2::angle#7 )
  to:atan2::@return
atan2::@return: scope:[atan2]  from atan2::@3
  [24] return 
  to:@return
atan2::@2: scope:[atan2]  from atan2::@1
  [25] (signed byte) atan2::xd#0 ← (signed byte) atan2::x#3 >> (byte) atan2::i#2
  [26] (signed byte) atan2::yd#0 ← (signed byte) atan2::y#3 >> (byte) atan2::i#2
  [27] if((signed byte) atan2::y#3>(signed byte) 0) goto atan2::@4
  to:atan2::@6
atan2::@6: scope:[atan2]  from atan2::@2
  [28] (signed byte) atan2::x#2 ← (signed byte) atan2::x#3 - (signed byte) atan2::yd#0
  [29] (signed byte) atan2::y#2 ← (signed byte) atan2::y#3 + (signed byte) atan2::xd#0
  [30] (byte) atan2::angle#2 ← (byte) atan2::angle#4 - *((const byte*) CORDIC_ATAN2_ANGLES#0 + (byte) atan2::i#2)
  to:atan2::@5
atan2::@5: scope:[atan2]  from atan2::@4 atan2::@6
  [31] (signed byte) atan2::x#8 ← phi( atan2::@4/(signed byte) atan2::x#1 atan2::@6/(signed byte) atan2::x#2 )
  [31] (byte) atan2::angle#7 ← phi( atan2::@4/(byte) atan2::angle#1 atan2::@6/(byte) atan2::angle#2 )
  [31] (signed byte) atan2::y#8 ← phi( atan2::@4/(signed byte) atan2::y#1 atan2::@6/(signed byte) atan2::y#2 )
  [32] (byte) atan2::i#1 ← ++ (byte) atan2::i#2
  [33] if((byte) atan2::i#1==(const byte) CORDIC_ITERATIONS#0+(byte) 1) goto atan2::@3
  to:atan2::@1
atan2::@4: scope:[atan2]  from atan2::@2
  [34] (signed byte) atan2::x#1 ← (signed byte) atan2::x#3 + (signed byte) atan2::yd#0
  [35] (signed byte) atan2::y#1 ← (signed byte) atan2::y#3 - (signed byte) atan2::xd#0
  [36] (byte) atan2::angle#1 ← (byte) atan2::angle#4 + *((const byte*) CORDIC_ATAN2_ANGLES#0 + (byte) atan2::i#2)
  to:atan2::@5
