Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::w#0 = (word)main::i#2
  main::$0 = main::i#2 & 1
  main::$4 = 0 != main::$0
  main::$1 = ! main::$4
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::w#2 = phi( main::@1/main::w#0, main::@3/main::w#1 )
  main::i#3 = phi( main::@1/main::i#2, main::@3/main::i#4 )
  main::$3 = main::i#3 * SIZEOF_WORD
  screen[main::$3] = main::w#2
  main::i#1 = main::i#3 + rangenext(0,7)
  main::$2 = main::i#1 != rangelast(0,7)
  if(main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#2 )
  main::w#1 = -1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte SIZEOF_WORD = 2
void __start()
void main()
number~ main::$0
bool~ main::$1
bool~ main::$2
byte~ main::$3
bool~ main::$4
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
word main::w
word main::w#0
word main::w#1
word main::w#2
const word* screen = (word*)$400

Adding number conversion cast (unumber) 1 in main::$0 = main::i#2 & 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::i#2 & (unumber)1
Adding number conversion cast (unumber) 0 in main::$4 = 0 != main::$0
Adding number conversion cast (unumber) -1 in main::w#1 = -1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::w#1 = (unumber)-1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type -1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::i#2 & 1
Inversing boolean not [5] main::$1 = 0 == main::$0 from [4] main::$4 = 0 != main::$0
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [5] if(0==main::$0) goto main::@2
Simple Condition main::$2 [11] if(main::i#1!=rangelast(0,7)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::w#1 = -1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [11] if(main::i#1!=rangelast(0,7)) goto main::@1 to 8
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [8] if(main::i#1!=8) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [5] main::$3 = main::i#2 * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::w#1
Constant inlined main::i#0 = 0
Constant inlined main::w#1 = -1
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@4(between main::@2 and main::@1)
Added new block during phi lifting main::@5(between main::@1 and main::@2)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [12] main::i#5 = main::i#1
Coalesced [13] main::w#3 = main::w#0
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@4
Renumbering block main::@5 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] main::w#0 = (word)main::i#2
  [3] main::$0 = main::i#2 & 1
  [4] if(0==main::$0) goto main::@3
  to:main::@2
main::@3: scope:[main]  from main::@1
  [5] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [6] main::w#2 = phi( main::@3/main::w#0, main::@1/-1 )
  [7] main::$3 = main::i#2 << 1
  [8] screen[main::$3] = main::w#2
  [9] main::i#1 = ++ main::i#2
  [10] if(main::i#1!=8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 22.0
byte~ main::$3 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 5.5
word main::w
word main::w#0 5.5
word main::w#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::w#2 main::w#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::w#2 main::w#0 ]
[ main::$0 ]
[ main::$3 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::w#2 main::w#0 ]
Allocated zp[1]:5 [ main::$0 ]
Allocated zp[1]:6 [ main::$3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::w#0 = (word)main::i#2 [ main::i#2 main::w#0 ] (  [ main::i#2 main::w#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] main::$0 = main::i#2 & 1 [ main::i#2 main::w#0 main::$0 ] (  [ main::i#2 main::w#0 main::$0 ] { }  ) always clobbers reg byte a 
Statement [7] main::$3 = main::i#2 << 1 [ main::i#2 main::w#2 main::$3 ] (  [ main::i#2 main::w#2 main::$3 ] { }  ) always clobbers reg byte a 
Statement [8] screen[main::$3] = main::w#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::w#0 = (word)main::i#2 [ main::i#2 main::w#0 ] (  [ main::i#2 main::w#0 ] { }  ) always clobbers reg byte a 
Statement [3] main::$0 = main::i#2 & 1 [ main::i#2 main::w#0 main::$0 ] (  [ main::i#2 main::w#0 main::$0 ] { }  ) always clobbers reg byte a 
Statement [7] main::$3 = main::i#2 << 1 [ main::i#2 main::w#2 main::$3 ] (  [ main::i#2 main::w#2 main::$3 ] { }  ) always clobbers reg byte a 
Statement [8] screen[main::$3] = main::w#2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::w#2 main::w#0 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$3 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:5 [ main::$0 ] 22: zp[1]:6 [ main::$3 ] 16.5: zp[2]:3 [ main::w#2 main::w#0 ] 
Uplift Scope [] 

Uplifting [main] best 776 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] reg byte a [ main::$3 ] zp[2]:3 [ main::w#2 main::w#0 ] 
Uplifting [] best 776 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::w#2 main::w#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Problem with assigning negative word constant (vwuz1=vbuc1)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label w = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::w#0 = (word)main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z w
    lda #0
    sta.z w+1
    // [3] main::$0 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [4] if(0==main::$0) goto main::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3_from___b1
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi main::w#2 = -1 [phi:main::@1->main::@2#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z w
    lda #>-1
    sta.z w+1
    jmp __b2
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [6] phi main::w#2 = main::w#0 [phi:main::@3->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] main::$3 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [8] screen[main::$3] = main::w#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z w
    sta screen,y
    lda.z w+1
    sta screen+1,y
    // [9] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>-1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b3_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Removing instruction __b3_from___b1:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$0 reg byte a 22.0
byte~ main::$3 reg byte a 22.0
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 5.5
word main::w
word main::w#0 w zp[2]:2 5.5
word main::w#2 w zp[2]:2 11.0
const word* screen = (word*) 1024

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::w#2 main::w#0 ]
reg byte a [ main::$0 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 576

  // File Comments
// Problem with assigning negative word constant (vwuz1=vbuc1)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label w = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // w = i
    // [2] main::w#0 = (word)main::i#2 -- vwuz1=_word_vbuxx 
    txa
    sta.z w
    lda #0
    sta.z w+1
    // i&1
    // [3] main::$0 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if(i&1)
    // [4] if(0==main::$0) goto main::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [6] phi main::w#2 = -1 [phi:main::@1->main::@2#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z w
    sta.z w+1
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [6] phi main::w#2 = main::w#0 [phi:main::@3->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // screen[i] = w
    // [7] main::$3 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [8] screen[main::$3] = main::w#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z w
    sta screen,y
    lda.z w+1
    sta screen+1,y
    // for( byte i:0..7)
    // [9] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data

