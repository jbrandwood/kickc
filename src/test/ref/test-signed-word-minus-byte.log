Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@12
print_ln: scope:[print_ln]  from main::@6
  (byte*) print_char_cursor#44 ← phi( main::@6/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#17 ← phi( main::@6/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#23 ← phi( print_ln/(byte*) print_char_cursor#44 print_ln::@1/(byte*) print_char_cursor#23 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#23
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#24 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#24
  return 
  to:@return
print_sword: scope:[print_sword]  from main::@1 main::@5
  (byte*) print_char_cursor#52 ← phi( main::@1/(byte*) print_char_cursor#50 main::@5/(byte*) print_char_cursor#18 )
  (signed word) print_sword::w#3 ← phi( main::@1/(signed word) print_sword::w#1 main::@5/(signed word) print_sword::w#2 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#45 ← phi( print_sword/(byte*) print_char_cursor#52 print_sword::@4/(byte*) print_char_cursor#4 )
  (signed word) print_sword::w#4 ← phi( print_sword/(signed word) print_sword::w#3 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$2 ← ((word)) (signed word) print_sword::w#4
  (word) print_word::w#0 ← (word~) print_sword::$2
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#25 ← phi( print_sword::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#25
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#46 ← phi( print_sword/(byte*) print_char_cursor#52 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#5 ← phi( print_sword::@2/(signed word) print_sword::w#6 )
  (byte*) print_char_cursor#26 ← phi( print_sword::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#26
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#5
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#27 ← phi( print_sword::@3/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#27
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  (byte*) print_char_cursor#47 ← phi( print_sword::@1/(byte*) print_char_cursor#45 )
  (word) print_word::w#1 ← phi( print_sword::@1/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#28 ← phi( print_word/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#28
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#29 ← phi( print_word::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#29
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#30 ← phi( print_word::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#30
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#6 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#53 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#22 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@20
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#48 ← phi( print_word/(byte*) print_char_cursor#47 print_word::@1/(byte*) print_char_cursor#6 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#31 ← phi( print_byte/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#31
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#32 ← phi( print_byte::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#32
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#33 ← phi( print_byte::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#33
  return 
  to:@return
print_char: scope:[print_char]  from main::@4 print_byte print_byte::@1 print_sword::@2
  (byte*) print_char_cursor#34 ← phi( main::@4/(byte*) print_char_cursor#17 print_byte/(byte*) print_char_cursor#48 print_byte::@1/(byte*) print_char_cursor#9 print_sword::@2/(byte*) print_char_cursor#46 )
  (byte) print_char::ch#4 ← phi( main::@4/(byte) print_char::ch#3 print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#35 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#35
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#14 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#36 ← phi( print_cls::@2/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#36
  return 
  to:@return
main: scope:[main]  from @20
  (byte*) print_char_cursor#49 ← phi( @20/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#18 ← phi( @20/(byte*) print_line_cursor#20 )
  (byte*) print_screen#4 ← phi( @20/(byte*) print_screen#5 )
  (signed word) main::w1#0 ← (number) $4d2
  call print_cls 
  to:main::@3
main::@3: scope:[main]  from main
  (signed word) main::w1#3 ← phi( main/(signed word) main::w1#0 )
  (byte*) print_char_cursor#37 ← phi( main/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#37
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@7
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte*) print_line_cursor#24 ← phi( main::@3/(byte*) print_line_cursor#5 main::@7/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#50 ← phi( main::@3/(byte*) print_char_cursor#16 main::@7/(byte*) print_char_cursor#20 )
  (signed word) main::w1#2 ← phi( main::@3/(signed word) main::w1#3 main::@7/(signed word) main::w1#4 )
  (number~) main::$1 ← (signed word) main::w1#2 - (number) $5b
  (signed word) main::w2#0 ← (number~) main::$1
  (number~) main::$2 ← (signed word) main::w2#0 - (number) $29
  (signed word) main::w1#1 ← (number~) main::$2
  (signed word) print_sword::w#1 ← (signed word) main::w1#1
  call print_sword 
  to:main::@4
main::@4: scope:[main]  from main::@1
  (signed word) main::w1#7 ← phi( main::@1/(signed word) main::w1#1 )
  (byte) main::i#5 ← phi( main::@1/(byte) main::i#6 )
  (byte*) print_line_cursor#23 ← phi( main::@1/(byte*) print_line_cursor#24 )
  (signed word) main::w2#2 ← phi( main::@1/(signed word) main::w2#0 )
  (byte*) print_char_cursor#38 ← phi( main::@1/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#38
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed word) main::w1#6 ← phi( main::@4/(signed word) main::w1#7 )
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#5 )
  (byte*) print_line_cursor#21 ← phi( main::@4/(byte*) print_line_cursor#23 )
  (signed word) main::w2#1 ← phi( main::@4/(signed word) main::w2#2 )
  (byte*) print_char_cursor#39 ← phi( main::@4/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#39
  (signed word) print_sword::w#2 ← (signed word) main::w2#1
  call print_sword 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (signed word) main::w1#5 ← phi( main::@5/(signed word) main::w1#6 )
  (byte) main::i#3 ← phi( main::@5/(byte) main::i#4 )
  (byte*) print_line_cursor#19 ← phi( main::@5/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#40 ← phi( main::@5/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#40
  call print_ln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (signed word) main::w1#4 ← phi( main::@6/(signed word) main::w1#5 )
  (byte) main::i#2 ← phi( main::@6/(byte) main::i#3 )
  (byte*) print_char_cursor#41 ← phi( main::@6/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#14 ← phi( main::@6/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#41
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$a)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,$a)
  if((bool~) main::$7) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  (byte*) print_char_cursor#42 ← phi( main::@7/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#15 ← phi( main::@7/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#42
  return 
  to:@return
@20: scope:[]  from @12
  (byte*) print_screen#5 ← phi( @12/(byte*) print_screen#6 )
  (byte*) print_char_cursor#51 ← phi( @12/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#20 ← phi( @12/(byte*) print_line_cursor#22 )
  call main 
  to:@21
@21: scope:[]  from @20
  (byte*) print_char_cursor#43 ← phi( @20/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#16 ← phi( @20/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#43
  to:@end
@end: scope:[]  from @21

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @12
(label) @20
(label) @21
(label) @begin
(label) @end
(void()) main()
(number~) main::$1
(number~) main::$2
(bool~) main::$7
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(signed word) main::w1
(signed word) main::w1#0
(signed word) main::w1#1
(signed word) main::w1#2
(signed word) main::w1#3
(signed word) main::w1#4
(signed word) main::w1#5
(signed word) main::w1#6
(signed word) main::w1#7
(signed word) main::w2
(signed word) main::w2#0
(signed word) main::w2#1
(signed word) main::w2#2
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(word~) print_sword::$2
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (snumber) $4d2 in (signed word) main::w1#0 ← (number) $4d2
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (snumber) $5b in (number~) main::$1 ← (signed word) main::w1#2 - (number) $5b
Adding number conversion cast (snumber) main::$1 in (number~) main::$1 ← (signed word) main::w1#2 - (snumber)(number) $5b
Adding number conversion cast (snumber) $29 in (number~) main::$2 ← (signed word) main::w2#0 - (number) $29
Adding number conversion cast (snumber) main::$2 in (number~) main::$2 ← (signed word) main::w2#0 - (snumber)(number) $29
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$2 ← (word)(signed word) print_sword::w#4
Inlining cast (signed word) main::w1#0 ← (snumber)(number) $4d2
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $4d2
Simplifying constant integer cast 0
Simplifying constant integer cast $5b
Simplifying constant integer cast $29
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized signed number type (signed word) $4d2
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) $5b
Finalized signed number type (signed byte) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inferred type updated to signed word in (snumber~) main::$1 ← (signed word) main::w1#2 - (signed byte) $5b
Inferred type updated to signed word in (snumber~) main::$2 ← (signed word) main::w2#0 - (signed byte) $29
Inversing boolean not [17] (bool~) print_sword::$1 ← (signed word) print_sword::w#3 >= (signed byte) 0 from [16] (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#22 (byte*) print_char_cursor#53 (byte*) print_screen#6 (byte*) print_line_cursor#20 (byte*) print_char_cursor#51 (byte*) print_screen#5 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#1 (byte*) print_line_cursor#11 (byte*) print_char_cursor#24 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (word) print_word::w#0 = (word~) print_sword::$2 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#3 (byte*) print_char_cursor#27 (byte*) print_char_cursor#5 
Alias (byte*) print_char_cursor#46 = (byte*) print_char_cursor#52 
Alias (signed word) print_sword::w#3 = (signed word) print_sword::w#6 (signed word) print_sword::w#5 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#4 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#30 (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#32 (byte*) print_char_cursor#33 (byte*) print_char_cursor#11 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#35 (byte*) print_char_cursor#13 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#14 (byte*) print_char_cursor#36 (byte*) print_line_cursor#4 (byte*) print_char_cursor#15 
Alias (signed word) main::w1#0 = (signed word) main::w1#3 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#37 
Alias (signed word) main::w2#0 = (signed word~) main::$1 (signed word) main::w2#2 (signed word) main::w2#1 
Alias (signed word) main::w1#1 = (signed word~) main::$2 (signed word) main::w1#7 (signed word) main::w1#6 (signed word) main::w1#5 (signed word) main::w1#4 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 (byte*) print_line_cursor#24 (byte*) print_line_cursor#21 
Alias (byte) main::i#2 = (byte) main::i#5 (byte) main::i#6 (byte) main::i#4 (byte) main::i#3 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#38 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#39 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#40 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 (byte*) print_line_cursor#15 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 (byte*) print_char_cursor#42 (byte*) print_char_cursor#21 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#43 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#23
Self Phi Eliminated (byte*) print_line_cursor#12
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#44
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#12
Identical Phi Values (word) print_word::w#1 (word) print_word::w#0
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#45
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#1
Identical Phi Values (byte*) print_screen#4 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#49 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#25
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#20
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_ln::$1 [8] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (bool~) print_sword::$1 [18] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) print_cls::$1 [78] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$7 [116] if((byte) main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte[]) print_hextab#0 = $0
Constant (const signed word) main::w1#0 = $4d2
Constant (const byte) main::i#0 = 0
Constant (const byte) print_char::ch#3 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [114] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [116] if(main::i#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Adding number conversion cast (unumber) $b in if((byte) main::i#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [32] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [7] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4 keeping print_sword::w#4
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const signed word) main::w1#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined main::i#0 = (byte) 0
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined main::w1#0 = (signed word) $4d2
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting main::@8(between main::@7 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @20
Adding NOP phi() at start of @21
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 print_sword:15 print_char:17 print_sword:21 print_ln:23 
Calls in [print_sword] to print_char:41 print_word:46 
Calls in [print_word] to print_byte:54 print_byte:58 
Calls in [print_byte] to print_char:66 print_char:71 

Created 14 initial phi equivalence classes
Coalesced [13] print_sword::w#7 ← print_sword::w#1
Coalesced [14] print_char_cursor#54 ← print_char_cursor#50
Coalesced [16] print_char_cursor#60 ← print_char_cursor#12
Coalesced [19] print_sword::w#8 ← print_sword::w#2
Coalesced [20] print_char_cursor#55 ← print_char_cursor#12
Coalesced [27] main::w1#8 ← main::w1#1
Not coalescing [28] print_char_cursor#64 ← print_line_cursor#1
Coalesced [29] print_line_cursor#27 ← print_line_cursor#1
Coalesced [30] main::i#7 ← main::i#1
Coalesced [31] print_line_cursor#25 ← print_line_cursor#19
Coalesced (already) [37] print_line_cursor#26 ← print_line_cursor#1
Coalesced (already) [40] print_char_cursor#63 ← print_char_cursor#46
Coalesced [43] print_sword::w#10 ← print_sword::w#0
Coalesced [44] print_char_cursor#57 ← print_char_cursor#12
Coalesced [49] print_sword::w#9 ← print_sword::w#3
Coalesced (already) [50] print_char_cursor#56 ← print_char_cursor#46
Coalesced [52] print_byte::b#4 ← print_byte::b#0
Coalesced [53] print_char_cursor#58 ← print_char_cursor#45
Coalesced [56] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [57] print_char_cursor#59 ← print_char_cursor#12
Coalesced [64] print_char::ch#5 ← print_char::ch#1
Coalesced (already) [65] print_char_cursor#61 ← print_char_cursor#48
Coalesced [69] print_char::ch#6 ← print_char::ch#2
Coalesced (already) [70] print_char_cursor#62 ← print_char_cursor#12
Coalesced [85] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @21
Culled Empty Block (label) main::@3
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @20 to @1
Renumbering block print_sword::@4 to print_sword::@3
Renumbering block main::@4 to main::@2
Renumbering block main::@5 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte) main::i#1 )
  [6] (byte*) print_line_cursor#19 ← phi( main/(byte*) 1024 main::@6/(byte*) print_line_cursor#1 )
  [6] (byte*) print_char_cursor#50 ← phi( main/(byte*) 1024 main::@6/(byte*~) print_char_cursor#64 )
  [6] (signed word) main::w1#2 ← phi( main/(signed word) $4d2 main::@6/(signed word) main::w1#1 )
  [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b
  [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29
  [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1
  [10] call print_sword 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] phi()
  [12] call print_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0
  [14] call print_sword 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call print_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] (byte) main::i#1 ← ++ (byte) main::i#2
  [18] if((byte) main::i#1!=(byte) $b) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [19] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [20] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1
  to:main::@1
print_ln: scope:[print_ln]  from main::@4
  [21] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [22] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [25] return 
  to:@return
print_sword: scope:[print_sword]  from main::@1 main::@3
  [26] (byte*) print_char_cursor#46 ← phi( main::@1/(byte*) print_char_cursor#50 main::@3/(byte*) print_char_cursor#12 )
  [26] (signed word) print_sword::w#3 ← phi( main::@1/(signed word) print_sword::w#1 main::@3/(signed word) print_sword::w#2 )
  [27] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [28] phi()
  [29] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [30] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@3
  [31] (byte*) print_char_cursor#45 ← phi( print_sword/(byte*) print_char_cursor#46 print_sword::@3/(byte*) print_char_cursor#12 )
  [31] (signed word) print_sword::w#4 ← phi( print_sword/(signed word) print_sword::w#3 print_sword::@3/(signed word) print_sword::w#0 )
  [32] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [33] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  [34] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4
  [35] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [36] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4
  [37] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [38] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [39] (byte*) print_char_cursor#48 ← phi( print_word/(byte*) print_char_cursor#45 print_word::@1/(byte*) print_char_cursor#12 )
  [39] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [40] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [41] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [42] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [43] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [44] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [45] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [46] return 
  to:@return
print_char: scope:[print_char]  from main::@2 print_byte print_byte::@1 print_sword::@2
  [47] (byte*) print_char_cursor#34 ← phi( main::@2/(byte*) print_char_cursor#12 print_byte/(byte*) print_char_cursor#48 print_byte::@1/(byte*) print_char_cursor#12 print_sword::@2/(byte*) print_char_cursor#46 )
  [47] (byte) print_char::ch#4 ← phi( main::@2/(byte) ' ' print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) '-' )
  [48] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4
  [49] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [50] return 
  to:@return
print_cls: scope:[print_cls]  from main
  [51] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [52] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [53] *((byte*) print_cls::sc#2) ← (byte) ' '
  [54] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [55] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [56] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 2.0
(signed word) main::w1
(signed word) main::w1#1 2.75
(signed word) main::w1#2 22.0
(signed word) main::w2
(signed word) main::w2#0 5.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 5.240000000000001
(byte*) print_char_cursor#34 10.5
(byte*) print_char_cursor#45 3.0
(byte*) print_char_cursor#46 8.666666666666666
(byte*) print_char_cursor#48 2.0
(byte*) print_char_cursor#50 5.5
(byte*~) print_char_cursor#64 22.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#19 1.1818181818181819
(byte*) print_line_cursor#9 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 22.0
(signed word) print_sword::w#2 22.0
(signed word) print_sword::w#3 7.0
(signed word) print_sword::w#4 1.3333333333333333
(void()) print_word((word) print_word::w)
(word) print_word::w

Initial phi equivalence classes
[ main::w1#2 main::w1#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable main::w2#0 to zero page equivalence class [ main::w2#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::w1#2 main::w1#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ main::w2#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_WORD:2 [ main::w1#2 main::w1#1 ]
Allocated zp ZP_BYTE:4 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated zp ZP_WORD:7 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
Allocated zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:10 [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
Allocated zp ZP_WORD:11 [ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ]
Allocated zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:15 [ main::w2#0 ]
Allocated zp ZP_BYTE:17 [ print_byte::$0 ]
Allocated zp ZP_BYTE:18 [ print_byte::$2 ]

INITIAL ASM
//SEG0 File Comments
// Tests subtracting bytes from signed words
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 5
  .label print_char_cursor = $b
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label w2 = $f
    .label w1 = 2
    .label i = 4
  //SEG11 [5] call print_cls 
  //SEG12 [51] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG15 [6] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG16 [6] phi (byte*) print_char_cursor#50 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (signed word) main::w1#2 = (signed word) $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta w1
    lda #>$4d2
    sta w1+1
    jmp b1
  //SEG18 main::@1
  b1:
  //SEG19 [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda w1
    sec
    sbc #$5b
    sta w2
    lda w1+1
    sbc #>$5b
    sta w2+1
  //SEG20 [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda w2
    sec
    sbc #$29
    sta w1
    lda w2+1
    sbc #>$29
    sta w1+1
  //SEG21 [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 -- vwsz1=vwsz2 
    lda w1
    sta print_sword.w
    lda w1+1
    sta print_sword.w+1
  //SEG22 [10] call print_sword 
  //SEG23 [26] phi from main::@1 to print_sword [phi:main::@1->print_sword]
  print_sword_from_b1:
  //SEG24 [26] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#50 [phi:main::@1->print_sword#0] -- register_copy 
  //SEG25 [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:main::@1->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG26 [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG27 main::@2
  b2:
  //SEG28 [12] call print_char 
  //SEG29 [47] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from_b2:
  //SEG30 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
  //SEG31 [47] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG32 main::@3
  b3:
  //SEG33 [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta print_sword.w
    lda w2+1
    sta print_sword.w+1
  //SEG34 [14] call print_sword 
  //SEG35 [26] phi from main::@3 to print_sword [phi:main::@3->print_sword]
  print_sword_from_b3:
  //SEG36 [26] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#12 [phi:main::@3->print_sword#0] -- register_copy 
  //SEG37 [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:main::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG38 [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG39 main::@4
  b4:
  //SEG40 [16] call print_ln 
  //SEG41 [21] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from_b4:
    jsr print_ln
    jmp b5
  //SEG42 main::@5
  b5:
  //SEG43 [17] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG44 [18] if((byte) main::i#1!=(byte) $b) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp i
    bne b6
    jmp breturn
  //SEG45 main::@return
  breturn:
  //SEG46 [19] return 
    rts
  //SEG47 main::@6
  b6:
  //SEG48 [20] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG49 [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG50 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG51 [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG52 [6] phi (byte*) print_char_cursor#50 = (byte*~) print_char_cursor#64 [phi:main::@6->main::@1#2] -- register_copy 
  //SEG53 [6] phi (signed word) main::w1#2 = (signed word) main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp b1
}
//SEG54 print_ln
// Print a newline
print_ln: {
  //SEG55 [22] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG56 [22] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG57 print_ln::@1
  b1:
  //SEG58 [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG59 [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG60 print_ln::@return
  breturn:
  //SEG61 [25] return 
    rts
}
//SEG62 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(7) w)
print_sword: {
    .label w = 7
  //SEG63 [27] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG64 [28] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG65 print_sword::@2
  b2:
  //SEG66 [29] call print_char 
  //SEG67 [47] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG68 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#46 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG69 [47] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG70 print_sword::@3
  b3:
  //SEG71 [30] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG72 [31] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG73 [31] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#46 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG74 [31] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG75 print_sword::@1
  b1:
  //SEG76 [32] call print_word 
    jsr print_word
    jmp breturn
  //SEG77 print_sword::@return
  breturn:
  //SEG78 [33] return 
    rts
}
//SEG79 print_word
// Print a word as HEX
print_word: {
  //SEG80 [34] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG81 [35] call print_byte 
  //SEG82 [39] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG83 [39] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#45 [phi:print_word->print_byte#0] -- register_copy 
  //SEG84 [39] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG85 print_word::@1
  b1:
  //SEG86 [36] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG87 [37] call print_byte 
  //SEG88 [39] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG89 [39] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG90 [39] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG91 print_word::@return
  breturn:
  //SEG92 [38] return 
    rts
}
//SEG93 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(9) b)
print_byte: {
    .label _0 = $11
    .label _2 = $12
    .label b = 9
  //SEG94 [40] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG95 [41] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG96 [42] call print_char 
  //SEG97 [47] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG98 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#48 [phi:print_byte->print_char#0] -- register_copy 
  //SEG99 [47] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG100 print_byte::@1
  b1:
  //SEG101 [43] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG102 [44] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG103 [45] call print_char 
  //SEG104 [47] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG105 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG106 [47] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG107 print_byte::@return
  breturn:
  //SEG108 [46] return 
    rts
}
//SEG109 print_char
// Print a single char
// print_char(byte zeropage($a) ch)
print_char: {
    .label ch = $a
  //SEG110 [48] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG111 [49] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG112 print_char::@return
  breturn:
  //SEG113 [50] return 
    rts
}
//SEG114 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $d
  //SEG115 [52] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG116 [52] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG117 [52] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG118 [52] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG119 print_cls::@1
  b1:
  //SEG120 [53] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG121 [54] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG122 [55] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG123 print_cls::@return
  breturn:
  //SEG124 [56] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w2#0 ] ( main:2 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::i#2 main::i#1 ]
Statement [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ( main:2 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ) always clobbers reg byte a 
Statement [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ( main:2 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [20] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 [ main::w1#1 print_char_cursor#64 print_line_cursor#1 main::i#1 ] ( main:2 [ main::w1#1 print_char_cursor#64 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [27] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 [ print_sword::w#3 print_char_cursor#46 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#46 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#46 ] ) always clobbers reg byte a 
Statement [30] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_sword::w#0 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [34] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 [ print_sword::w#4 print_char_cursor#45 print_byte::b#0 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_char_cursor#45 print_byte::b#0 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_char_cursor#45 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [36] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_byte::b#1 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [40] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#48 print_byte::$0 ] ( main:2::print_sword:10::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] main:2::print_sword:10::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [43] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_sword:10::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:10::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [48] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4 [ print_char_cursor#34 ] ( main:2::print_char:12 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#34 ] main:2::print_sword:10::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#34 ] main:2::print_sword:14::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:35::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:35::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:37::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:37::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:35::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:35::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:37::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:37::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#34 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [53] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [55] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w2#0 ] ( main:2 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w2#0 ] ) always clobbers reg byte a 
Statement [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ( main:2 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 ] ) always clobbers reg byte a 
Statement [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ( main:2 [ print_char_cursor#50 print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#2 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [20] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 [ main::w1#1 print_char_cursor#64 print_line_cursor#1 main::i#1 ] ( main:2 [ main::w1#1 print_char_cursor#64 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:16 [ main::i#2 main::w1#1 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [27] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 [ print_sword::w#3 print_char_cursor#46 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#46 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#46 ] ) always clobbers reg byte a 
Statement [30] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:10 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_sword::w#0 ] main:2::print_sword:14 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [34] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 [ print_sword::w#4 print_char_cursor#45 print_byte::b#0 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_char_cursor#45 print_byte::b#0 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_char_cursor#45 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [36] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_sword:10::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_byte::b#1 ] main:2::print_sword:14::print_word:32 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [40] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#48 print_byte::$0 ] ( main:2::print_sword:10::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] main:2::print_sword:10::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] main:2::print_sword:14::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 print_byte::b#2 print_char_cursor#48 print_byte::$0 ] ) always clobbers reg byte a 
Statement [43] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_sword:10::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:35 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:10::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:14::print_word:32::print_byte:37 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [48] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4 [ print_char_cursor#34 ] ( main:2::print_char:12 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#34 ] main:2::print_sword:10::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#3 print_char_cursor#34 ] main:2::print_sword:14::print_char:29 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#3 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:35::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:35::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:37::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:37::print_char:42 [ print_line_cursor#19 main::i#2 main::w1#1 print_byte::b#2 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:35::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_sword::w#4 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:35::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 print_sword::w#4 print_char_cursor#34 ] main:2::print_sword:10::print_word:32::print_byte:37::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 main::w2#0 print_char_cursor#34 ] main:2::print_sword:14::print_word:32::print_byte:37::print_char:45 [ print_line_cursor#19 main::i#2 main::w1#1 print_char_cursor#34 ] ) always clobbers reg byte y 
Statement [53] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [55] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::w1#2 main::w1#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ main::i#2 main::i#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_WORD:7 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:9 , reg byte x , 
Potential registers zp ZP_BYTE:10 [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:11 [ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ main::w2#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ print_byte::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ print_byte::$2 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 251.61: zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] 56.91: zp ZP_WORD:11 [ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ] 
Uplift Scope [print_sword] 56.33: zp ZP_WORD:7 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] 
Uplift Scope [main] 24.75: zp ZP_WORD:2 [ main::w1#2 main::w1#1 ] 13: zp ZP_BYTE:4 [ main::i#2 main::i#1 ] 5.5: zp ZP_WORD:15 [ main::w2#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:17 [ print_byte::$0 ] 4: zp ZP_BYTE:18 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:10 [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_word] 

Uplifting [] best 6477 combination zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] zp ZP_WORD:11 [ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ] 
Uplifting [print_sword] best 6477 combination zp ZP_WORD:7 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] 
Uplifting [main] best 6387 combination zp ZP_WORD:2 [ main::w1#2 main::w1#1 ] reg byte x [ main::i#2 main::i#1 ] zp ZP_WORD:15 [ main::w2#0 ] 
Uplifting [print_cls] best 6387 combination zp ZP_WORD:13 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_byte] best 6379 combination zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_char] best 6364 combination reg byte a [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_ln] best 6364 combination 
Uplifting [print_word] best 6364 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 6364 combination zp ZP_BYTE:9 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Allocated (was zp ZP_WORD:5) zp ZP_WORD:4 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:6 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp ZP_WORD:11) zp ZP_WORD:9 [ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:13 [ main::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests subtracting bytes from signed words
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 4
  .label print_char_cursor = 9
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label w2 = $d
    .label w1 = 2
  //SEG11 [5] call print_cls 
  //SEG12 [51] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG15 [6] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG16 [6] phi (byte*) print_char_cursor#50 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (signed word) main::w1#2 = (signed word) $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta w1
    lda #>$4d2
    sta w1+1
    jmp b1
  //SEG18 main::@1
  b1:
  //SEG19 [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda w1
    sec
    sbc #$5b
    sta w2
    lda w1+1
    sbc #>$5b
    sta w2+1
  //SEG20 [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda w2
    sec
    sbc #$29
    sta w1
    lda w2+1
    sbc #>$29
    sta w1+1
  //SEG21 [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 -- vwsz1=vwsz2 
    lda w1
    sta print_sword.w
    lda w1+1
    sta print_sword.w+1
  //SEG22 [10] call print_sword 
  //SEG23 [26] phi from main::@1 to print_sword [phi:main::@1->print_sword]
  print_sword_from_b1:
  //SEG24 [26] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#50 [phi:main::@1->print_sword#0] -- register_copy 
  //SEG25 [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:main::@1->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG26 [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG27 main::@2
  b2:
  //SEG28 [12] call print_char 
  //SEG29 [47] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from_b2:
  //SEG30 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
  //SEG31 [47] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b3
  //SEG32 main::@3
  b3:
  //SEG33 [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta print_sword.w
    lda w2+1
    sta print_sword.w+1
  //SEG34 [14] call print_sword 
  //SEG35 [26] phi from main::@3 to print_sword [phi:main::@3->print_sword]
  print_sword_from_b3:
  //SEG36 [26] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#12 [phi:main::@3->print_sword#0] -- register_copy 
  //SEG37 [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:main::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG38 [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG39 main::@4
  b4:
  //SEG40 [16] call print_ln 
  //SEG41 [21] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from_b4:
    jsr print_ln
    jmp b5
  //SEG42 main::@5
  b5:
  //SEG43 [17] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG44 [18] if((byte) main::i#1!=(byte) $b) goto main::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b6
    jmp breturn
  //SEG45 main::@return
  breturn:
  //SEG46 [19] return 
    rts
  //SEG47 main::@6
  b6:
  //SEG48 [20] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG49 [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG50 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG51 [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG52 [6] phi (byte*) print_char_cursor#50 = (byte*~) print_char_cursor#64 [phi:main::@6->main::@1#2] -- register_copy 
  //SEG53 [6] phi (signed word) main::w1#2 = (signed word) main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp b1
}
//SEG54 print_ln
// Print a newline
print_ln: {
  //SEG55 [22] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG56 [22] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG57 print_ln::@1
  b1:
  //SEG58 [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG59 [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG60 print_ln::@return
  breturn:
  //SEG61 [25] return 
    rts
}
//SEG62 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(6) w)
print_sword: {
    .label w = 6
  //SEG63 [27] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG64 [28] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG65 print_sword::@2
  b2:
  //SEG66 [29] call print_char 
  //SEG67 [47] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG68 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#46 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG69 [47] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b3
  //SEG70 print_sword::@3
  b3:
  //SEG71 [30] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG72 [31] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG73 [31] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#46 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG74 [31] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG75 print_sword::@1
  b1:
  //SEG76 [32] call print_word 
    jsr print_word
    jmp breturn
  //SEG77 print_sword::@return
  breturn:
  //SEG78 [33] return 
    rts
}
//SEG79 print_word
// Print a word as HEX
print_word: {
  //SEG80 [34] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG81 [35] call print_byte 
  //SEG82 [39] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG83 [39] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#45 [phi:print_word->print_byte#0] -- register_copy 
  //SEG84 [39] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG85 print_word::@1
  b1:
  //SEG86 [36] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG87 [37] call print_byte 
  //SEG88 [39] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG89 [39] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG90 [39] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG91 print_word::@return
  breturn:
  //SEG92 [38] return 
    rts
}
//SEG93 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label b = 8
  //SEG94 [40] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG95 [41] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG96 [42] call print_char 
  //SEG97 [47] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG98 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#48 [phi:print_byte->print_char#0] -- register_copy 
  //SEG99 [47] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG100 print_byte::@1
  b1:
  //SEG101 [43] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG102 [44] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG103 [45] call print_char 
  //SEG104 [47] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG105 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG106 [47] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG107 print_byte::@return
  breturn:
  //SEG108 [46] return 
    rts
}
//SEG109 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG110 [48] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG111 [49] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG112 print_char::@return
  breturn:
  //SEG113 [50] return 
    rts
}
//SEG114 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $b
  //SEG115 [52] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG116 [52] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG117 [52] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG118 [52] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG119 print_cls::@1
  b1:
  //SEG120 [53] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG121 [54] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG122 [55] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG123 print_cls::@return
  breturn:
  //SEG124 [56] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_b1:
Removing instruction print_char_from_b2:
Removing instruction b4_from_b3:
Removing instruction print_ln_from_b4:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b3:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction print_sword_from_b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction print_sword_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b6:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 2.0
(signed word) main::w1
(signed word) main::w1#1 w1 zp ZP_WORD:2 2.75
(signed word) main::w1#2 w1 zp ZP_WORD:2 22.0
(signed word) main::w2
(signed word) main::w2#0 w2 zp ZP_WORD:13 5.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:8 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:8 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:8 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp ZP_WORD:9 5.240000000000001
(byte*) print_char_cursor#34 print_char_cursor zp ZP_WORD:9 10.5
(byte*) print_char_cursor#45 print_char_cursor zp ZP_WORD:9 3.0
(byte*) print_char_cursor#46 print_char_cursor zp ZP_WORD:9 8.666666666666666
(byte*) print_char_cursor#48 print_char_cursor zp ZP_WORD:9 2.0
(byte*) print_char_cursor#50 print_char_cursor zp ZP_WORD:9 5.5
(byte*~) print_char_cursor#64 print_char_cursor zp ZP_WORD:9 22.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:11 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:11 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:4 46.42857142857143
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:4 1.1818181818181819
(byte*) print_line_cursor#9 print_line_cursor zp ZP_WORD:4 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:6 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:6 22.0
(signed word) print_sword::w#2 w zp ZP_WORD:6 22.0
(signed word) print_sword::w#3 w zp ZP_WORD:6 7.0
(signed word) print_sword::w#4 w zp ZP_WORD:6 1.3333333333333333
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w

zp ZP_WORD:2 [ main::w1#2 main::w1#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:4 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
zp ZP_WORD:6 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
zp ZP_BYTE:8 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:9 [ print_char_cursor#34 print_char_cursor#48 print_char_cursor#45 print_char_cursor#46 print_char_cursor#50 print_char_cursor#64 print_char_cursor#12 ]
zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:13 [ main::w2#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 5509

//SEG0 File Comments
// Tests subtracting bytes from signed words
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label print_line_cursor = 4
  .label print_char_cursor = 9
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label w2 = $d
    .label w1 = 2
  //SEG11 [5] call print_cls 
  //SEG12 [51] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG15 [6] phi (byte*) print_line_cursor#19 = (byte*) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG16 [6] phi (byte*) print_char_cursor#50 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (signed word) main::w1#2 = (signed word) $4d2 [phi:main->main::@1#3] -- vwsz1=vwsc1 
    lda #<$4d2
    sta w1
    lda #>$4d2
    sta w1+1
  //SEG18 main::@1
  b1:
  //SEG19 [7] (signed word) main::w2#0 ← (signed word) main::w1#2 - (signed byte) $5b -- vwsz1=vwsz2_minus_vbsc1 
    lda w1
    sec
    sbc #$5b
    sta w2
    lda w1+1
    sbc #>$5b
    sta w2+1
  //SEG20 [8] (signed word) main::w1#1 ← (signed word) main::w2#0 - (signed byte) $29 -- vwsz1=vwsz2_minus_vbsc1 
    lda w2
    sec
    sbc #$29
    sta w1
    lda w2+1
    sbc #>$29
    sta w1+1
  //SEG21 [9] (signed word) print_sword::w#1 ← (signed word) main::w1#1 -- vwsz1=vwsz2 
    lda w1
    sta print_sword.w
    lda w1+1
    sta print_sword.w+1
  //SEG22 [10] call print_sword 
  //SEG23 [26] phi from main::@1 to print_sword [phi:main::@1->print_sword]
  //SEG24 [26] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#50 [phi:main::@1->print_sword#0] -- register_copy 
  //SEG25 [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:main::@1->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG26 [11] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG27 main::@2
  //SEG28 [12] call print_char 
  //SEG29 [47] phi from main::@2 to print_char [phi:main::@2->print_char]
  //SEG30 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
  //SEG31 [47] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG32 main::@3
  //SEG33 [13] (signed word) print_sword::w#2 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta print_sword.w
    lda w2+1
    sta print_sword.w+1
  //SEG34 [14] call print_sword 
  //SEG35 [26] phi from main::@3 to print_sword [phi:main::@3->print_sword]
  //SEG36 [26] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#12 [phi:main::@3->print_sword#0] -- register_copy 
  //SEG37 [26] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:main::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG38 [15] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG39 main::@4
  //SEG40 [16] call print_ln 
  //SEG41 [21] phi from main::@4 to print_ln [phi:main::@4->print_ln]
    jsr print_ln
  //SEG42 main::@5
  //SEG43 [17] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG44 [18] if((byte) main::i#1!=(byte) $b) goto main::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b6
  //SEG45 main::@return
  //SEG46 [19] return 
    rts
  //SEG47 main::@6
  b6:
  //SEG48 [20] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG49 [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  //SEG50 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG51 [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG52 [6] phi (byte*) print_char_cursor#50 = (byte*~) print_char_cursor#64 [phi:main::@6->main::@1#2] -- register_copy 
  //SEG53 [6] phi (signed word) main::w1#2 = (signed word) main::w1#1 [phi:main::@6->main::@1#3] -- register_copy 
    jmp b1
}
//SEG54 print_ln
// Print a newline
print_ln: {
  //SEG55 [22] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG56 [22] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG57 print_ln::@1
  b1:
  //SEG58 [23] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG59 [24] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG60 print_ln::@return
  //SEG61 [25] return 
    rts
}
//SEG62 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(6) w)
print_sword: {
    .label w = 6
  //SEG63 [27] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG64 [28] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG65 print_sword::@2
  //SEG66 [29] call print_char 
  //SEG67 [47] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG68 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#46 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG69 [47] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG70 print_sword::@3
  //SEG71 [30] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG72 [31] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  //SEG73 [31] phi (byte*) print_char_cursor#45 = (byte*) print_char_cursor#46 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG74 [31] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
  //SEG75 print_sword::@1
  b1:
  //SEG76 [32] call print_word 
    jsr print_word
  //SEG77 print_sword::@return
  //SEG78 [33] return 
    rts
}
//SEG79 print_word
// Print a word as HEX
print_word: {
  //SEG80 [34] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG81 [35] call print_byte 
  //SEG82 [39] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG83 [39] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#45 [phi:print_word->print_byte#0] -- register_copy 
  //SEG84 [39] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG85 print_word::@1
  //SEG86 [36] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG87 [37] call print_byte 
  //SEG88 [39] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG89 [39] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG90 [39] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG91 print_word::@return
  //SEG92 [38] return 
    rts
}
//SEG93 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(8) b)
print_byte: {
    .label b = 8
  //SEG94 [40] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG95 [41] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG96 [42] call print_char 
  //SEG97 [47] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG98 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#48 [phi:print_byte->print_char#0] -- register_copy 
  //SEG99 [47] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG100 print_byte::@1
  //SEG101 [43] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG102 [44] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG103 [45] call print_char 
  //SEG104 [47] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG105 [47] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG106 [47] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG107 print_byte::@return
  //SEG108 [46] return 
    rts
}
//SEG109 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG110 [48] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG111 [49] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG112 print_char::@return
  //SEG113 [50] return 
    rts
}
//SEG114 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $b
  //SEG115 [52] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG116 [52] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG117 [52] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG118 [52] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG119 print_cls::@1
  b1:
  //SEG120 [53] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG121 [54] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG122 [55] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG123 print_cls::@return
  //SEG124 [56] return 
    rts
}
  print_hextab: .text "0123456789abcdef"

