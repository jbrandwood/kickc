
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::idx#4 = phi( main/main::idx#0, main::@1/main::idx#3 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$3 = main::i#2 * SIZEOF_STRUCT_POINT
  main::SCREEN[main::idx#4] = ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$3]
  main::idx#1 = ++ main::idx#4
  main::$4 = main::i#2 * SIZEOF_STRUCT_POINT
  main::$0 = < ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4]
  main::SCREEN[main::idx#1] = main::$0
  main::idx#2 = ++ main::idx#1
  main::$5 = main::i#2 * SIZEOF_STRUCT_POINT
  main::$1 = > ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$5]
  main::SCREEN[main::idx#2] = main::$1
  main::idx#3 = ++ main::idx#2
  main::i#1 = main::i#2 + rangenext(0,2)
  main::$2 = main::i#1 != rangelast(0,2)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const byte SIZEOF_STRUCT_POINT = 3
void __start()
void main()
byte~ main::$0
byte~ main::$1
bool~ main::$2
byte~ main::$3
byte~ main::$4
byte~ main::$5
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
byte main::idx#4
const struct Point* points[]  = { { x: 1, y: 2 }, { x: 3, y: 4 }, { x: 5, y: 6 } }

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Identified duplicate assignment right side [6] main::$4 = main::i#2 * SIZEOF_STRUCT_POINT
Identified duplicate assignment right side [10] main::$5 = main::i#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$2 [16] if(main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [14] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [16] if(main::i#1!=rangelast(0,2)) goto main::@1 to 3
Simplifying expression containing zero (byte*)points in [4] main::SCREEN[main::idx#4] = ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$3]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [13] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$4 = main::$3 main::$5 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift and addition[1] main::$4 = main::i#2 * SIZEOF_STRUCT_POINT
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Alias main::$4 = main::$7 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [15] main::i#3 = main::i#1
Coalesced [16] main::idx#5 = main::idx#3
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::idx#4 = phi( main/0, main::@1/main::idx#3 )
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$6 = main::i#2 << 1
  [3] main::$4 = main::$6 + main::i#2
  [4] main::SCREEN[main::idx#4] = ((byte*)points)[main::$4]
  [5] main::idx#1 = ++ main::idx#4
  [6] main::$0 = < ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4]
  [7] main::SCREEN[main::idx#1] = main::$0
  [8] main::idx#2 = ++ main::idx#1
  [9] main::$1 = > ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4]
  [10] main::SCREEN[main::idx#2] = main::$1
  [11] main::idx#3 = ++ main::idx#2
  [12] main::i#1 = ++ main::i#2
  [13] if(main::i#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 22.0
byte~ main::$1 22.0
byte~ main::$4 7.333333333333333
byte~ main::$6 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 4.0
byte main::idx
byte main::idx#1 11.0
byte main::idx#2 11.0
byte main::idx#3 7.333333333333333
byte main::idx#4 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#4 main::idx#3 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::idx#1 to live range equivalence class [ main::idx#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::idx#2 to live range equivalence class [ main::idx#2 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#4 main::idx#3 ]
[ main::$6 ]
[ main::$4 ]
[ main::idx#1 ]
[ main::$0 ]
[ main::idx#2 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#4 main::idx#3 ]
Allocated zp[1]:4 [ main::$6 ]
Allocated zp[1]:5 [ main::$4 ]
Allocated zp[1]:6 [ main::idx#1 ]
Allocated zp[1]:7 [ main::$0 ]
Allocated zp[1]:8 [ main::idx#2 ]
Allocated zp[1]:9 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$6 = main::i#2 << 1 [ main::i#2 main::idx#4 main::$6 ] (  [ main::i#2 main::idx#4 main::$6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::idx#4 main::idx#3 ]
Statement [3] main::$4 = main::$6 + main::i#2 [ main::i#2 main::idx#4 main::$4 ] (  [ main::i#2 main::idx#4 main::$4 ] { }  ) always clobbers reg byte a 
Statement [4] main::SCREEN[main::idx#4] = ((byte*)points)[main::$4] [ main::i#2 main::idx#4 main::$4 ] (  [ main::i#2 main::idx#4 main::$4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::$4 ]
Statement [6] main::$0 = < ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] [ main::i#2 main::$4 main::idx#1 main::$0 ] (  [ main::i#2 main::$4 main::idx#1 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::idx#1 ]
Statement [9] main::$1 = > ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] [ main::i#2 main::idx#2 main::$1 ] (  [ main::i#2 main::idx#2 main::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::idx#2 ]
Statement [2] main::$6 = main::i#2 << 1 [ main::i#2 main::idx#4 main::$6 ] (  [ main::i#2 main::idx#4 main::$6 ] { }  ) always clobbers reg byte a 
Statement [3] main::$4 = main::$6 + main::i#2 [ main::i#2 main::idx#4 main::$4 ] (  [ main::i#2 main::idx#4 main::$4 ] { }  ) always clobbers reg byte a 
Statement [4] main::SCREEN[main::idx#4] = ((byte*)points)[main::$4] [ main::i#2 main::idx#4 main::$4 ] (  [ main::i#2 main::idx#4 main::$4 ] { }  ) always clobbers reg byte a 
Statement [6] main::$0 = < ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] [ main::i#2 main::$4 main::idx#1 main::$0 ] (  [ main::i#2 main::$4 main::idx#1 main::$0 ] { }  ) always clobbers reg byte a 
Statement [9] main::$1 = > ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] [ main::i#2 main::idx#2 main::$1 ] (  [ main::i#2 main::idx#2 main::$1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#4 main::idx#3 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$6 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$4 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::idx#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::idx#2 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::$1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp[1]:4 [ main::$6 ] 22: zp[1]:7 [ main::$0 ] 22: zp[1]:9 [ main::$1 ] 20.5: zp[1]:2 [ main::i#2 main::i#1 ] 15.58: zp[1]:3 [ main::idx#4 main::idx#3 ] 11: zp[1]:6 [ main::idx#1 ] 11: zp[1]:8 [ main::idx#2 ] 7.33: zp[1]:5 [ main::$4 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 1086 combination reg byte a [ main::$6 ] reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte x [ main::i#2 main::i#1 ] zp[1]:3 [ main::idx#4 main::idx#3 ] zp[1]:6 [ main::idx#1 ] zp[1]:8 [ main::idx#2 ] zp[1]:5 [ main::$4 ] 
Limited combination testing to 100 combinations of 15552 possible.
Uplifting [Point] best 1086 combination 
Uplifting [] best 1086 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::idx#4 main::idx#3 ]
Uplifting [main] best 1086 combination zp[1]:3 [ main::idx#4 main::idx#3 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::idx#1 ]
Uplifting [main] best 1086 combination zp[1]:6 [ main::idx#1 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::idx#2 ]
Uplifting [main] best 1086 combination zp[1]:8 [ main::idx#2 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::$4 ]
Uplifting [main] best 1086 combination zp[1]:5 [ main::$4 ] 
Coalescing zero page register [ zp[1]:3 [ main::idx#4 main::idx#3 ] ] with [ zp[1]:6 [ main::idx#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:3 [ main::idx#4 main::idx#3 main::idx#1 ] ] with [ zp[1]:8 [ main::idx#2 ] ] - score: 1
Allocated (was zp[1]:3) zp[1]:2 [ main::idx#4 main::idx#3 main::idx#1 main::idx#2 ]
Allocated (was zp[1]:5) zp[1]:3 [ main::$4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates initializing an array of structs
// Array of structs containing words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    .label __4 = 3
    .label idx = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::idx#4 = main::idx#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$6 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [3] main::$4 = main::$6 + main::i#2 -- vbuz1=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    sta.z __4
    // [4] main::SCREEN[main::idx#4] = ((byte*)points)[main::$4] -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z __4
    lda points,y
    ldy.z idx
    sta SCREEN,y
    // [5] main::idx#1 = ++ main::idx#4 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [6] main::$0 = < ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] -- vbuaa=_lo_pwsc1_derefidx_vbuz1 
    ldy.z __4
    lda points+OFFSET_STRUCT_POINT_Y,y
    // [7] main::SCREEN[main::idx#1] = main::$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx
    sta SCREEN,y
    // [8] main::idx#2 = ++ main::idx#1 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [9] main::$1 = > ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] -- vbuaa=_hi_pwsc1_derefidx_vbuz1 
    ldy.z __4
    lda points+OFFSET_STRUCT_POINT_Y+1,y
    // [10] main::SCREEN[main::idx#2] = main::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx
    sta SCREEN,y
    // [11] main::idx#3 = ++ main::idx#2 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [12] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if(main::i#1!=3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
  points: .byte 1
  .word 2
  .byte 3
  .word 4
  .byte 5
  .word 6

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction ldy.z __4 with TAY
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
void main()
byte~ main::$0 reg byte a 22.0
byte~ main::$1 reg byte a 22.0
byte~ main::$4 zp[1]:3 7.333333333333333
byte~ main::$6 reg byte a 22.0
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 4.0
byte main::idx
byte main::idx#1 idx zp[1]:2 11.0
byte main::idx#2 idx zp[1]:2 11.0
byte main::idx#3 idx zp[1]:2 7.333333333333333
byte main::idx#4 idx zp[1]:2 8.25
const struct Point* points[]  = { { x: 1, y: 2 }, { x: 3, y: 4 }, { x: 5, y: 6 } }

reg byte x [ main::i#2 main::i#1 ]
zp[1]:2 [ main::idx#4 main::idx#3 main::idx#1 main::idx#2 ]
reg byte a [ main::$6 ]
zp[1]:3 [ main::$4 ]
reg byte a [ main::$0 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 896

  // File Comments
// Demonstrates initializing an array of structs
// Array of structs containing words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  // main
main: {
    .label SCREEN = $400
    .label __4 = 3
    .label idx = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    tax
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::idx#4 = main::idx#3 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[idx++] = points[i].x
    // [2] main::$6 = main::i#2 << 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [3] main::$4 = main::$6 + main::i#2 -- vbuz1=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    sta.z __4
    // [4] main::SCREEN[main::idx#4] = ((byte*)points)[main::$4] -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    tay
    lda points,y
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = points[i].x;
    // [5] main::idx#1 = ++ main::idx#4 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // <points[i].y
    // [6] main::$0 = < ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] -- vbuaa=_lo_pwsc1_derefidx_vbuz1 
    ldy.z __4
    lda points+OFFSET_STRUCT_POINT_Y,y
    // SCREEN[idx++] = <points[i].y
    // [7] main::SCREEN[main::idx#1] = main::$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = <points[i].y;
    // [8] main::idx#2 = ++ main::idx#1 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // >points[i].y
    // [9] main::$1 = > ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$4] -- vbuaa=_hi_pwsc1_derefidx_vbuz1 
    ldy.z __4
    lda points+OFFSET_STRUCT_POINT_Y+1,y
    // SCREEN[idx++] = >points[i].y
    // [10] main::SCREEN[main::idx#2] = main::$1 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z idx
    sta SCREEN,y
    // SCREEN[idx++] = >points[i].y;
    // [11] main::idx#3 = ++ main::idx#2 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // for( char i: 0..2)
    // [12] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if(main::i#1!=3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data
  points: .byte 1
  .word 2
  .byte 3
  .word 4
  .byte 5
  .word 6

