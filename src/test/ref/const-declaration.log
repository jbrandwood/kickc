
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((const byte*) BODY1) ← (byte) '*'
  *((const byte*) BODY2) ← (byte) '*'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) BODY1 = (const byte*) SCREEN+(const byte) MARGIN_TOP*(const byte) LINE_LEN+(const byte) MARGIN_LEFT
(const byte*) BODY2 = (const byte*) SCREEN+(const word) OFFSET
(const byte) LINE_LEN = (number) $28
(const byte) MARGIN_LEFT = (number) 4
(const byte) MARGIN_TOP = (number) 4
(const word) OFFSET = (number) $28*(number) 5+(number) 5
(const byte*) SCREEN = (byte*)(number) $400
(void()) main()
(label) main::@return

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) BODY1) ← (byte) '*'
  [5] *((const byte*) BODY2) ← (byte) '*'
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests a number of constant declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const LINE_LEN = $28
  .const MARGIN_TOP = 4
  .const MARGIN_LEFT = 4
  .const OFFSET = $28*5+5
  .label BODY1 = SCREEN+MARGIN_TOP*LINE_LEN+MARGIN_LEFT
  .label BODY2 = SCREEN+OFFSET
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) BODY1) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta BODY1
    // [5] *((const byte*) BODY2) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta BODY2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) BODY1) ← (byte) '*' [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) BODY2) ← (byte) '*' [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 33 combination 
Uplifting [] best 33 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests a number of constant declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const LINE_LEN = $28
  .const MARGIN_TOP = 4
  .const MARGIN_LEFT = 4
  .const OFFSET = $28*5+5
  .label BODY1 = SCREEN+MARGIN_TOP*LINE_LEN+MARGIN_LEFT
  .label BODY2 = SCREEN+OFFSET
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) BODY1) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta BODY1
    // [5] *((const byte*) BODY2) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta BODY2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'*'
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) BODY1 = (const byte*) SCREEN+(const byte) MARGIN_TOP*(const byte) LINE_LEN+(const byte) MARGIN_LEFT
(const byte*) BODY2 = (const byte*) SCREEN+(const word) OFFSET
(const byte) LINE_LEN = (number) $28
(const byte) MARGIN_LEFT = (number) 4
(const byte) MARGIN_TOP = (number) 4
(const word) OFFSET = (number) $28*(number) 5+(number) 5
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 16

  // File Comments
// Tests a number of constant declarations
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const LINE_LEN = $28
  .const MARGIN_TOP = 4
  .const MARGIN_LEFT = 4
  .const OFFSET = $28*5+5
  .label BODY1 = SCREEN+MARGIN_TOP*LINE_LEN+MARGIN_LEFT
  .label BODY2 = SCREEN+OFFSET
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // *BODY1 = '*'
    // [4] *((const byte*) BODY1) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    lda #'*'
    sta BODY1
    // *BODY2 = '*'
    // [5] *((const byte*) BODY2) ← (byte) '*' -- _deref_pbuc1=vbuc2 
    sta BODY2
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

