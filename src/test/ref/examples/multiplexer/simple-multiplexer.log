Replacing struct member reference *((const nomodify struct MOS6526_CIA*) CIA2).PORT_A_DDR with member unwinding reference *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR)
Replacing struct member reference *((const nomodify struct MOS6526_CIA*) CIA2).PORT_A with member unwinding reference *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A)
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call plexSetScreen (byte*) plexInit::screen 
Inlined call call plexFreePrepare 
Inlined call call plexFreeAdd (byte) plexShowSprite::ypos 
Inlined call (byte~) loop::$7 ← call plexFreeNextYpos 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  (byte*) PLEX_SCREEN_PTR#0 ← (byte*)(number) $400+(number) $3f8
  (volatile byte) plex_show_idx ← (byte) 0
  (volatile byte) plex_sprite_idx ← (byte) 0
  (volatile byte) plex_sprite_msb ← (byte) 1
  to:@2

(void()) plexInit((byte*) plexInit::screen)
plexInit: scope:[plexInit]  from init
  (byte*) plexInit::screen#1 ← phi( init/(byte*) plexInit::screen#0 )
  (byte*) plexInit::plexSetScreen1_screen#0 ← (byte*) plexInit::screen#1
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  (byte*) plexInit::plexSetScreen1_screen#1 ← phi( plexInit/(byte*) plexInit::plexSetScreen1_screen#0 )
  (byte*~) plexInit::plexSetScreen1_$0 ← (byte*) plexInit::plexSetScreen1_screen#1 + (number) $3f8
  (byte*) PLEX_SCREEN_PTR#1 ← (byte*~) plexInit::plexSetScreen1_$0
  to:plexInit::@2
plexInit::@2: scope:[plexInit]  from plexInit::plexSetScreen1
  (byte*) PLEX_SCREEN_PTR#22 ← phi( plexInit::plexSetScreen1/(byte*) PLEX_SCREEN_PTR#1 )
  (byte) plexInit::i#0 ← (byte) 0
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::@2
  (byte*) PLEX_SCREEN_PTR#15 ← phi( plexInit::@1/(byte*) PLEX_SCREEN_PTR#15 plexInit::@2/(byte*) PLEX_SCREEN_PTR#22 )
  (byte) plexInit::i#2 ← phi( plexInit::@1/(byte) plexInit::i#1 plexInit::@2/(byte) plexInit::i#0 )
  *((const byte*) PLEX_SORTED_IDX + (byte) plexInit::i#2) ← (byte) plexInit::i#2
  (byte) plexInit::i#1 ← (byte) plexInit::i#2 + rangenext(0,PLEX_COUNT-1)
  (bool~) plexInit::$1 ← (byte) plexInit::i#1 != rangelast(0,PLEX_COUNT-1)
  if((bool~) plexInit::$1) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  (byte*) PLEX_SCREEN_PTR#8 ← phi( plexInit::@1/(byte*) PLEX_SCREEN_PTR#15 )
  (byte*) PLEX_SCREEN_PTR#2 ← (byte*) PLEX_SCREEN_PTR#8
  return 
  to:@return

(void()) plexSort()
plexSort: scope:[plexSort]  from loop::@5
  (byte) plexSort::m#0 ← (byte) 0
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  (byte) plexSort::m#2 ← phi( plexSort/(byte) plexSort::m#0 plexSort::@2/(byte) plexSort::m#1 )
  (number~) plexSort::$1 ← (byte) plexSort::m#2 + (number) 1
  (byte) plexSort::nxt_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (number~) plexSort::$1)
  (byte) plexSort::nxt_y#0 ← *((const byte*) PLEX_YPOS + (byte) plexSort::nxt_idx#0)
  (bool~) plexSort::$2 ← (byte) plexSort::nxt_y#0 < *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))
  (bool~) plexSort::$3 ← ! (bool~) plexSort::$2
  if((bool~) plexSort::$3) goto plexSort::@2
  to:plexSort::@5
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@4
  (byte) plexSort::m#3 ← phi( plexSort::@1/(byte) plexSort::m#2 plexSort::@4/(byte) plexSort::m#5 )
  (byte) plexSort::m#1 ← (byte) plexSort::m#3 + rangenext(0,PLEX_COUNT-2)
  (bool~) plexSort::$8 ← (byte) plexSort::m#1 != rangelast(0,PLEX_COUNT-2)
  if((bool~) plexSort::$8) goto plexSort::@1
  to:plexSort::@6
plexSort::@5: scope:[plexSort]  from plexSort::@1
  (byte) plexSort::nxt_idx#3 ← phi( plexSort::@1/(byte) plexSort::nxt_idx#0 )
  (byte) plexSort::nxt_y#2 ← phi( plexSort::@1/(byte) plexSort::nxt_y#0 )
  (byte) plexSort::m#4 ← phi( plexSort::@1/(byte) plexSort::m#2 )
  (byte) plexSort::s#0 ← (byte) plexSort::m#4
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@3 plexSort::@5
  (byte) plexSort::m#6 ← phi( plexSort::@3/(byte) plexSort::m#6 plexSort::@5/(byte) plexSort::m#4 )
  (byte) plexSort::nxt_idx#2 ← phi( plexSort::@3/(byte) plexSort::nxt_idx#2 plexSort::@5/(byte) plexSort::nxt_idx#3 )
  (byte) plexSort::nxt_y#1 ← phi( plexSort::@3/(byte) plexSort::nxt_y#1 plexSort::@5/(byte) plexSort::nxt_y#2 )
  (byte) plexSort::s#3 ← phi( plexSort::@3/(byte) plexSort::s#1 plexSort::@5/(byte) plexSort::s#0 )
  (number~) plexSort::$4 ← (byte) plexSort::s#3 + (number) 1
  *((const byte*) PLEX_SORTED_IDX + (number~) plexSort::$4) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3)
  (byte) plexSort::s#1 ← -- (byte) plexSort::s#3
  (bool~) plexSort::$5 ← (byte) plexSort::s#1 != (number) $ff
  (bool~) plexSort::$6 ← (byte) plexSort::nxt_y#1 < *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))
  (bool~) plexSort::$7 ← (bool~) plexSort::$5 && (bool~) plexSort::$6
  if((bool~) plexSort::$7) goto plexSort::@3
  to:plexSort::@4
plexSort::@4: scope:[plexSort]  from plexSort::@3
  (byte) plexSort::m#5 ← phi( plexSort::@3/(byte) plexSort::m#6 )
  (byte) plexSort::nxt_idx#1 ← phi( plexSort::@3/(byte) plexSort::nxt_idx#2 )
  (byte) plexSort::s#4 ← phi( plexSort::@3/(byte) plexSort::s#1 )
  (byte) plexSort::s#2 ← ++ (byte) plexSort::s#4
  *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#1
  to:plexSort::@2
plexSort::@6: scope:[plexSort]  from plexSort::@2
  (volatile byte) plex_show_idx ← (number) 0
  (volatile byte) plex_sprite_idx ← (number) 0
  (volatile byte) plex_sprite_msb ← (number) 1
  to:plexSort::plexFreePrepare1
plexSort::plexFreePrepare1: scope:[plexSort]  from plexSort::@6
  (byte) plexSort::plexFreePrepare1_s#0 ← (byte) 0
  to:plexSort::plexFreePrepare1_@1
plexSort::plexFreePrepare1_@1: scope:[plexSort]  from plexSort::plexFreePrepare1 plexSort::plexFreePrepare1_@1
  (byte) plexSort::plexFreePrepare1_s#2 ← phi( plexSort::plexFreePrepare1/(byte) plexSort::plexFreePrepare1_s#0 plexSort::plexFreePrepare1_@1/(byte) plexSort::plexFreePrepare1_s#1 )
  *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (number) 0
  (byte) plexSort::plexFreePrepare1_s#1 ← (byte) plexSort::plexFreePrepare1_s#2 + rangenext(0,7)
  (bool~) plexSort::plexFreePrepare1_$0 ← (byte) plexSort::plexFreePrepare1_s#1 != rangelast(0,7)
  if((bool~) plexSort::plexFreePrepare1_$0) goto plexSort::plexFreePrepare1_@1
  to:plexSort::plexFreePrepare1_@2
plexSort::plexFreePrepare1_@2: scope:[plexSort]  from plexSort::plexFreePrepare1_@1
  (volatile byte) plex_free_next ← (number) 0
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::plexFreePrepare1_@2
  return 
  to:@return

(void()) plexShowSprite()
plexShowSprite: scope:[plexShowSprite]  from loop::@10
  (byte*) PLEX_SCREEN_PTR#23 ← phi( loop::@10/(byte*) PLEX_SCREEN_PTR#26 )
  (number~) plexShowSprite::$0 ← (volatile byte) plex_sprite_idx * (number) 2
  (byte) plexShowSprite::plex_sprite_idx2#0 ← (number~) plexShowSprite::$0
  (byte) plexShowSprite::ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx))
  *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::ypos#0
  (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← (byte) plexShowSprite::ypos#0
  to:plexShowSprite::plexFreeAdd1
plexShowSprite::plexFreeAdd1: scope:[plexShowSprite]  from plexShowSprite
  (byte) plexShowSprite::plex_sprite_idx2#2 ← phi( plexShowSprite/(byte) plexShowSprite::plex_sprite_idx2#0 )
  (byte*) PLEX_SCREEN_PTR#16 ← phi( plexShowSprite/(byte*) PLEX_SCREEN_PTR#23 )
  (byte) plexShowSprite::plexFreeAdd1_ypos#1 ← phi( plexShowSprite/(byte) plexShowSprite::plexFreeAdd1_ypos#0 )
  (number~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#1 + (number) $15
  *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (number~) plexShowSprite::plexFreeAdd1_$0
  (number~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (number) 1
  (number~) plexShowSprite::plexFreeAdd1_$2 ← (number~) plexShowSprite::plexFreeAdd1_$1 & (number) 7
  (volatile byte) plex_free_next ← (number~) plexShowSprite::plexFreeAdd1_$2
  to:plexShowSprite::@5
plexShowSprite::@5: scope:[plexShowSprite]  from plexShowSprite::plexFreeAdd1
  (byte) plexShowSprite::plex_sprite_idx2#1 ← phi( plexShowSprite::plexFreeAdd1/(byte) plexShowSprite::plex_sprite_idx2#2 )
  (byte*) PLEX_SCREEN_PTR#9 ← phi( plexShowSprite::plexFreeAdd1/(byte*) PLEX_SCREEN_PTR#16 )
  *((byte*) PLEX_SCREEN_PTR#9 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx))
  (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)
  (byte~) plexShowSprite::$10 ← (byte) plexShowSprite::xpos_idx#0 * (const byte) SIZEOF_WORD
  (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$10)
  *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#1) ← (byte~) plexShowSprite::$2
  (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 * (const byte) SIZEOF_WORD
  (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11)
  (bool~) plexShowSprite::$4 ← (byte~) plexShowSprite::$3 != (number) 0
  if((bool~) plexShowSprite::$4) goto plexShowSprite::@1
  to:plexShowSprite::@3
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite::@5
  *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb
  to:plexShowSprite::@2
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@5
  (number~) plexShowSprite::$9 ← (number) $ff ^ (volatile byte) plex_sprite_msb
  *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (number~) plexShowSprite::$9
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@3
  (number~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (number) 1
  (number~) plexShowSprite::$6 ← (number~) plexShowSprite::$5 & (number) 7
  (volatile byte) plex_sprite_idx ← (number~) plexShowSprite::$6
  (volatile byte) plex_show_idx ← ++ (volatile byte) plex_show_idx
  (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (number) 1
  (bool~) plexShowSprite::$7 ← (volatile byte) plex_sprite_msb == (number) 0
  (bool~) plexShowSprite::$8 ← ! (bool~) plexShowSprite::$7
  if((bool~) plexShowSprite::$8) goto plexShowSprite::@return
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite::@2
  (volatile byte) plex_sprite_msb ← (number) 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) PLEX_SCREEN_PTR#27 ← phi( @1/(byte*) PLEX_SCREEN_PTR#0 )
  (volatile byte) plex_free_next ← (byte) 0
  to:@3
@3: scope:[]  from @2
  (byte*) PLEX_SCREEN_PTR#25 ← phi( @2/(byte*) PLEX_SCREEN_PTR#27 )
  kickasm(location (const byte*) SPRITE) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  to:@4

(void()) main()
main: scope:[main]  from @4
  (byte*) PLEX_SCREEN_PTR#17 ← phi( @4/(byte*) PLEX_SCREEN_PTR#21 )
  asm { sei  }
  call init 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) PLEX_SCREEN_PTR#10 ← phi( main/(byte*) PLEX_SCREEN_PTR#6 )
  (byte*) PLEX_SCREEN_PTR#3 ← (byte*) PLEX_SCREEN_PTR#10
  call loop 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) PLEX_SCREEN_PTR#18 ← phi( main::@1/(byte*) PLEX_SCREEN_PTR#3 )
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) PLEX_SCREEN_PTR#11 ← phi( main::@2/(byte*) PLEX_SCREEN_PTR#18 )
  (byte*) PLEX_SCREEN_PTR#4 ← (byte*) PLEX_SCREEN_PTR#11
  return 
  to:@return

(void()) init()
init: scope:[init]  from main
  (byte*) PLEX_SCREEN_PTR#19 ← phi( main/(byte*) PLEX_SCREEN_PTR#17 )
  *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
  (byte*) plexInit::screen#0 ← (const byte*) SCREEN
  call plexInit 
  to:init::@4
init::@4: scope:[init]  from init
  (byte*) PLEX_SCREEN_PTR#12 ← phi( init/(byte*) PLEX_SCREEN_PTR#2 )
  (byte*) PLEX_SCREEN_PTR#5 ← (byte*) PLEX_SCREEN_PTR#12
  (word) init::xp#0 ← (word) $20
  (byte) init::sx#0 ← (byte) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@4
  (byte*) PLEX_SCREEN_PTR#28 ← phi( init::@1/(byte*) PLEX_SCREEN_PTR#28 init::@4/(byte*) PLEX_SCREEN_PTR#5 )
  (word) init::xp#2 ← phi( init::@1/(word) init::xp#1 init::@4/(word) init::xp#0 )
  (byte) init::sx#2 ← phi( init::@1/(byte) init::sx#1 init::@4/(byte) init::sx#0 )
  (byte*~) init::$1 ← (const byte*) SPRITE / (number) $40
  *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(byte*~) init::$1
  (byte~) init::$4 ← (byte) init::sx#2 * (const byte) SIZEOF_WORD
  *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2
  (word) init::xp#1 ← (word) init::xp#2 + (number) 9
  (byte) init::sx#1 ← (byte) init::sx#2 + rangenext(0,PLEX_COUNT-1)
  (bool~) init::$2 ← (byte) init::sx#1 != rangelast(0,PLEX_COUNT-1)
  if((bool~) init::$2) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  (byte*) PLEX_SCREEN_PTR#24 ← phi( init::@1/(byte*) PLEX_SCREEN_PTR#28 )
  *((const nomodify byte*) SPRITES_ENABLE) ← (number) $ff
  (byte) init::ss#0 ← (byte) 0
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  (byte*) PLEX_SCREEN_PTR#20 ← phi( init::@2/(byte*) PLEX_SCREEN_PTR#24 init::@3/(byte*) PLEX_SCREEN_PTR#20 )
  (byte) init::ss#2 ← phi( init::@2/(byte) init::ss#0 init::@3/(byte) init::ss#1 )
  *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN
  (byte) init::ss#1 ← (byte) init::ss#2 + rangenext(0,7)
  (bool~) init::$3 ← (byte) init::ss#1 != rangelast(0,7)
  if((bool~) init::$3) goto init::@3
  to:init::@return
init::@return: scope:[init]  from init::@3
  (byte*) PLEX_SCREEN_PTR#13 ← phi( init::@3/(byte*) PLEX_SCREEN_PTR#20 )
  (byte*) PLEX_SCREEN_PTR#6 ← (byte*) PLEX_SCREEN_PTR#13
  return 
  to:@return

(void()) loop()
loop: scope:[loop]  from main::@1
  (byte*) PLEX_SCREEN_PTR#43 ← phi( main::@1/(byte*) PLEX_SCREEN_PTR#3 )
  (byte) loop::sin_idx#0 ← (byte) 0
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@11
  (byte*) PLEX_SCREEN_PTR#42 ← phi( loop/(byte*) PLEX_SCREEN_PTR#43 loop::@11/(byte*) PLEX_SCREEN_PTR#44 )
  (byte) loop::sin_idx#6 ← phi( loop/(byte) loop::sin_idx#0 loop::@11/(byte) loop::sin_idx#7 )
  if(true) goto loop::@2
  to:loop::@return
loop::@2: scope:[loop]  from loop::@1 loop::@2
  (byte*) PLEX_SCREEN_PTR#41 ← phi( loop::@1/(byte*) PLEX_SCREEN_PTR#42 loop::@2/(byte*) PLEX_SCREEN_PTR#41 )
  (byte) loop::sin_idx#4 ← phi( loop::@1/(byte) loop::sin_idx#6 loop::@2/(byte) loop::sin_idx#4 )
  (bool~) loop::$0 ← *((const nomodify byte*) RASTER) != (number) $ff
  if((bool~) loop::$0) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  (byte*) PLEX_SCREEN_PTR#40 ← phi( loop::@2/(byte*) PLEX_SCREEN_PTR#41 )
  (byte) loop::sin_idx#2 ← phi( loop::@2/(byte) loop::sin_idx#4 )
  *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  (byte) loop::y_idx#0 ← (byte) loop::sin_idx#2
  (byte) loop::sy#0 ← (byte) 0
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  (byte*) PLEX_SCREEN_PTR#39 ← phi( loop::@3/(byte*) PLEX_SCREEN_PTR#40 loop::@4/(byte*) PLEX_SCREEN_PTR#39 )
  (byte) loop::sin_idx#5 ← phi( loop::@3/(byte) loop::sin_idx#2 loop::@4/(byte) loop::sin_idx#5 )
  (byte) loop::sy#2 ← phi( loop::@3/(byte) loop::sy#0 loop::@4/(byte) loop::sy#1 )
  (byte) loop::y_idx#2 ← phi( loop::@3/(byte) loop::y_idx#0 loop::@4/(byte) loop::y_idx#1 )
  *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2)
  (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (number) 8
  (byte) loop::sy#1 ← (byte) loop::sy#2 + rangenext(0,PLEX_COUNT-1)
  (bool~) loop::$2 ← (byte) loop::sy#1 != rangelast(0,PLEX_COUNT-1)
  if((bool~) loop::$2) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  (byte*) PLEX_SCREEN_PTR#38 ← phi( loop::@4/(byte*) PLEX_SCREEN_PTR#39 )
  (byte) loop::sin_idx#3 ← phi( loop::@4/(byte) loop::sin_idx#5 )
  (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#3 + (number) 1
  *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  call plexSort 
  to:loop::@13
loop::@13: scope:[loop]  from loop::@5
  (byte) loop::sin_idx#17 ← phi( loop::@5/(byte) loop::sin_idx#1 )
  (byte*) PLEX_SCREEN_PTR#37 ← phi( loop::@5/(byte*) PLEX_SCREEN_PTR#38 )
  *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  to:loop::@6
loop::@6: scope:[loop]  from loop::@13 loop::@6
  (byte) loop::sin_idx#16 ← phi( loop::@13/(byte) loop::sin_idx#17 loop::@6/(byte) loop::sin_idx#16 )
  (byte*) PLEX_SCREEN_PTR#36 ← phi( loop::@13/(byte*) PLEX_SCREEN_PTR#37 loop::@6/(byte*) PLEX_SCREEN_PTR#36 )
  (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8
  (bool~) loop::$6 ← (byte~) loop::$5 != (number) 0
  if((bool~) loop::$6) goto loop::@6
  to:loop::@7
loop::@7: scope:[loop]  from loop::@6
  (byte) loop::sin_idx#15 ← phi( loop::@6/(byte) loop::sin_idx#16 )
  (byte*) PLEX_SCREEN_PTR#35 ← phi( loop::@6/(byte*) PLEX_SCREEN_PTR#36 )
  (byte) loop::ss#0 ← (byte) 0
  to:loop::@8
loop::@8: scope:[loop]  from loop::@14 loop::@7
  (byte) loop::sin_idx#14 ← phi( loop::@14/(byte) loop::sin_idx#8 loop::@7/(byte) loop::sin_idx#15 )
  (byte*) PLEX_SCREEN_PTR#33 ← phi( loop::@14/(byte*) PLEX_SCREEN_PTR#34 loop::@7/(byte*) PLEX_SCREEN_PTR#35 )
  (byte) loop::ss#8 ← phi( loop::@14/(byte) loop::ss#1 loop::@7/(byte) loop::ss#0 )
  *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  to:loop::plexFreeNextYpos1
loop::plexFreeNextYpos1: scope:[loop]  from loop::@8
  (byte) loop::sin_idx#13 ← phi( loop::@8/(byte) loop::sin_idx#14 )
  (byte*) PLEX_SCREEN_PTR#32 ← phi( loop::@8/(byte*) PLEX_SCREEN_PTR#33 )
  (byte) loop::ss#7 ← phi( loop::@8/(byte) loop::ss#8 )
  (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next)
  to:loop::plexFreeNextYpos1_@return
loop::plexFreeNextYpos1_@return: scope:[loop]  from loop::plexFreeNextYpos1
  (byte) loop::sin_idx#12 ← phi( loop::plexFreeNextYpos1/(byte) loop::sin_idx#13 )
  (byte*) PLEX_SCREEN_PTR#31 ← phi( loop::plexFreeNextYpos1/(byte*) PLEX_SCREEN_PTR#32 )
  (byte) loop::ss#6 ← phi( loop::plexFreeNextYpos1/(byte) loop::ss#7 )
  (byte) loop::plexFreeNextYpos1_return#2 ← phi( loop::plexFreeNextYpos1/(byte) loop::plexFreeNextYpos1_return#0 )
  (byte) loop::plexFreeNextYpos1_return#1 ← (byte) loop::plexFreeNextYpos1_return#2
  to:loop::@12
loop::@12: scope:[loop]  from loop::plexFreeNextYpos1_@return
  (byte) loop::sin_idx#11 ← phi( loop::plexFreeNextYpos1_@return/(byte) loop::sin_idx#12 )
  (byte*) PLEX_SCREEN_PTR#30 ← phi( loop::plexFreeNextYpos1_@return/(byte*) PLEX_SCREEN_PTR#31 )
  (byte) loop::ss#5 ← phi( loop::plexFreeNextYpos1_@return/(byte) loop::ss#6 )
  (byte) loop::plexFreeNextYpos1_return#3 ← phi( loop::plexFreeNextYpos1_@return/(byte) loop::plexFreeNextYpos1_return#1 )
  (byte~) loop::$7 ← (byte) loop::plexFreeNextYpos1_return#3
  (byte) loop::rasterY#0 ← (byte~) loop::$7
  to:loop::@9
loop::@9: scope:[loop]  from loop::@12 loop::@9
  (byte) loop::sin_idx#10 ← phi( loop::@12/(byte) loop::sin_idx#11 loop::@9/(byte) loop::sin_idx#10 )
  (byte*) PLEX_SCREEN_PTR#29 ← phi( loop::@12/(byte*) PLEX_SCREEN_PTR#30 loop::@9/(byte*) PLEX_SCREEN_PTR#29 )
  (byte) loop::ss#4 ← phi( loop::@12/(byte) loop::ss#5 loop::@9/(byte) loop::ss#4 )
  (byte) loop::rasterY#1 ← phi( loop::@12/(byte) loop::rasterY#0 loop::@9/(byte) loop::rasterY#1 )
  (bool~) loop::$8 ← *((const nomodify byte*) RASTER) < (byte) loop::rasterY#1
  if((bool~) loop::$8) goto loop::@9
  to:loop::@10
loop::@10: scope:[loop]  from loop::@9
  (byte) loop::sin_idx#9 ← phi( loop::@9/(byte) loop::sin_idx#10 )
  (byte*) PLEX_SCREEN_PTR#26 ← phi( loop::@9/(byte*) PLEX_SCREEN_PTR#29 )
  (byte) loop::ss#3 ← phi( loop::@9/(byte) loop::ss#4 )
  *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  call plexShowSprite 
  to:loop::@14
loop::@14: scope:[loop]  from loop::@10
  (byte*) PLEX_SCREEN_PTR#34 ← phi( loop::@10/(byte*) PLEX_SCREEN_PTR#26 )
  (byte) loop::sin_idx#8 ← phi( loop::@10/(byte) loop::sin_idx#9 )
  (byte) loop::ss#2 ← phi( loop::@10/(byte) loop::ss#3 )
  (byte) loop::ss#1 ← (byte) loop::ss#2 + rangenext(0,PLEX_COUNT-1)
  (bool~) loop::$11 ← (byte) loop::ss#1 != rangelast(0,PLEX_COUNT-1)
  if((bool~) loop::$11) goto loop::@8
  to:loop::@11
loop::@11: scope:[loop]  from loop::@14
  (byte*) PLEX_SCREEN_PTR#44 ← phi( loop::@14/(byte*) PLEX_SCREEN_PTR#34 )
  (byte) loop::sin_idx#7 ← phi( loop::@14/(byte) loop::sin_idx#8 )
  *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  to:loop::@1
loop::@return: scope:[loop]  from loop::@1
  return 
  to:@return
@4: scope:[]  from @3
  (byte*) PLEX_SCREEN_PTR#21 ← phi( @3/(byte*) PLEX_SCREEN_PTR#25 )
  call main 
  to:@5
@5: scope:[]  from @4
  (byte*) PLEX_SCREEN_PTR#14 ← phi( @4/(byte*) PLEX_SCREEN_PTR#4 )
  (byte*) PLEX_SCREEN_PTR#7 ← (byte*) PLEX_SCREEN_PTR#14
  to:@end
@end: scope:[]  from @5

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @begin
(label) @end
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte*) BORDERCOL = (byte*)(number) $d020
(const nomodify byte*) D011 = (byte*)(number) $d011
(const nomodify byte) GREEN = (byte) 5
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(const nomodify byte) PLEX_COUNT = (byte) $20
(const byte*) PLEX_FREE_YPOS[(number) 8]  = { fill( 8, 0) }
(const byte*) PLEX_PTR[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(byte*) PLEX_SCREEN_PTR
(byte*) PLEX_SCREEN_PTR#0
(byte*) PLEX_SCREEN_PTR#1
(byte*) PLEX_SCREEN_PTR#10
(byte*) PLEX_SCREEN_PTR#11
(byte*) PLEX_SCREEN_PTR#12
(byte*) PLEX_SCREEN_PTR#13
(byte*) PLEX_SCREEN_PTR#14
(byte*) PLEX_SCREEN_PTR#15
(byte*) PLEX_SCREEN_PTR#16
(byte*) PLEX_SCREEN_PTR#17
(byte*) PLEX_SCREEN_PTR#18
(byte*) PLEX_SCREEN_PTR#19
(byte*) PLEX_SCREEN_PTR#2
(byte*) PLEX_SCREEN_PTR#20
(byte*) PLEX_SCREEN_PTR#21
(byte*) PLEX_SCREEN_PTR#22
(byte*) PLEX_SCREEN_PTR#23
(byte*) PLEX_SCREEN_PTR#24
(byte*) PLEX_SCREEN_PTR#25
(byte*) PLEX_SCREEN_PTR#26
(byte*) PLEX_SCREEN_PTR#27
(byte*) PLEX_SCREEN_PTR#28
(byte*) PLEX_SCREEN_PTR#29
(byte*) PLEX_SCREEN_PTR#3
(byte*) PLEX_SCREEN_PTR#30
(byte*) PLEX_SCREEN_PTR#31
(byte*) PLEX_SCREEN_PTR#32
(byte*) PLEX_SCREEN_PTR#33
(byte*) PLEX_SCREEN_PTR#34
(byte*) PLEX_SCREEN_PTR#35
(byte*) PLEX_SCREEN_PTR#36
(byte*) PLEX_SCREEN_PTR#37
(byte*) PLEX_SCREEN_PTR#38
(byte*) PLEX_SCREEN_PTR#39
(byte*) PLEX_SCREEN_PTR#4
(byte*) PLEX_SCREEN_PTR#40
(byte*) PLEX_SCREEN_PTR#41
(byte*) PLEX_SCREEN_PTR#42
(byte*) PLEX_SCREEN_PTR#43
(byte*) PLEX_SCREEN_PTR#44
(byte*) PLEX_SCREEN_PTR#5
(byte*) PLEX_SCREEN_PTR#6
(byte*) PLEX_SCREEN_PTR#7
(byte*) PLEX_SCREEN_PTR#8
(byte*) PLEX_SCREEN_PTR#9
(const byte*) PLEX_SORTED_IDX[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(const word*) PLEX_XPOS[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(const byte*) PLEX_YPOS[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(const nomodify byte*) RASTER = (byte*)(number) $d012
(const byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_WORD = (byte) 2
(const byte*) SPRITE = (byte*)(number) $2000
(const nomodify byte*) SPRITES_COLS = (byte*)(number) $d027
(const nomodify byte*) SPRITES_ENABLE = (byte*)(number) $d015
(const nomodify byte*) SPRITES_XMSB = (byte*)(number) $d010
(const nomodify byte*) SPRITES_XPOS = (byte*)(number) $d000
(const nomodify byte*) SPRITES_YPOS = (byte*)(number) $d001
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte) VIC_RST8 = (byte) $80
(const byte*) YSIN[(number) $100]  = kickasm {{ .var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
(void()) init()
(byte*~) init::$1
(bool~) init::$2
(bool~) init::$3
(byte~) init::$4
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@return
(byte) init::ss
(byte) init::ss#0
(byte) init::ss#1
(byte) init::ss#2
(byte) init::sx
(byte) init::sx#0
(byte) init::sx#1
(byte) init::sx#2
(word) init::xp
(word) init::xp#0
(word) init::xp#1
(word) init::xp#2
(void()) loop()
(bool~) loop::$0
(bool~) loop::$11
(bool~) loop::$2
(byte~) loop::$5
(bool~) loop::$6
(byte~) loop::$7
(bool~) loop::$8
(label) loop::@1
(label) loop::@10
(label) loop::@11
(label) loop::@12
(label) loop::@13
(label) loop::@14
(label) loop::@2
(label) loop::@3
(label) loop::@4
(label) loop::@5
(label) loop::@6
(label) loop::@7
(label) loop::@8
(label) loop::@9
(label) loop::@return
(label) loop::plexFreeNextYpos1
(label) loop::plexFreeNextYpos1_@return
(byte) loop::plexFreeNextYpos1_return
(byte) loop::plexFreeNextYpos1_return#0
(byte) loop::plexFreeNextYpos1_return#1
(byte) loop::plexFreeNextYpos1_return#2
(byte) loop::plexFreeNextYpos1_return#3
(byte) loop::rasterY
(byte) loop::rasterY#0
(byte) loop::rasterY#1
(byte) loop::sin_idx
(byte) loop::sin_idx#0
(byte) loop::sin_idx#1
(byte) loop::sin_idx#10
(byte) loop::sin_idx#11
(byte) loop::sin_idx#12
(byte) loop::sin_idx#13
(byte) loop::sin_idx#14
(byte) loop::sin_idx#15
(byte) loop::sin_idx#16
(byte) loop::sin_idx#17
(byte) loop::sin_idx#2
(byte) loop::sin_idx#3
(byte) loop::sin_idx#4
(byte) loop::sin_idx#5
(byte) loop::sin_idx#6
(byte) loop::sin_idx#7
(byte) loop::sin_idx#8
(byte) loop::sin_idx#9
(byte) loop::ss
(byte) loop::ss#0
(byte) loop::ss#1
(byte) loop::ss#2
(byte) loop::ss#3
(byte) loop::ss#4
(byte) loop::ss#5
(byte) loop::ss#6
(byte) loop::ss#7
(byte) loop::ss#8
(byte) loop::sy
(byte) loop::sy#0
(byte) loop::sy#1
(byte) loop::sy#2
(byte) loop::y_idx
(byte) loop::y_idx#0
(byte) loop::y_idx#1
(byte) loop::y_idx#2
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) plexInit((byte*) plexInit::screen)
(bool~) plexInit::$1
(label) plexInit::@1
(label) plexInit::@2
(label) plexInit::@return
(byte) plexInit::i
(byte) plexInit::i#0
(byte) plexInit::i#1
(byte) plexInit::i#2
(label) plexInit::plexSetScreen1
(byte*~) plexInit::plexSetScreen1_$0
(byte*) plexInit::plexSetScreen1_screen
(byte*) plexInit::plexSetScreen1_screen#0
(byte*) plexInit::plexSetScreen1_screen#1
(byte*) plexInit::screen
(byte*) plexInit::screen#0
(byte*) plexInit::screen#1
(void()) plexShowSprite()
(number~) plexShowSprite::$0
(byte~) plexShowSprite::$10
(byte~) plexShowSprite::$11
(byte~) plexShowSprite::$2
(byte~) plexShowSprite::$3
(bool~) plexShowSprite::$4
(number~) plexShowSprite::$5
(number~) plexShowSprite::$6
(bool~) plexShowSprite::$7
(bool~) plexShowSprite::$8
(number~) plexShowSprite::$9
(label) plexShowSprite::@1
(label) plexShowSprite::@2
(label) plexShowSprite::@3
(label) plexShowSprite::@4
(label) plexShowSprite::@5
(label) plexShowSprite::@return
(label) plexShowSprite::plexFreeAdd1
(number~) plexShowSprite::plexFreeAdd1_$0
(number~) plexShowSprite::plexFreeAdd1_$1
(number~) plexShowSprite::plexFreeAdd1_$2
(byte) plexShowSprite::plexFreeAdd1_ypos
(byte) plexShowSprite::plexFreeAdd1_ypos#0
(byte) plexShowSprite::plexFreeAdd1_ypos#1
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::plex_sprite_idx2#0
(byte) plexShowSprite::plex_sprite_idx2#1
(byte) plexShowSprite::plex_sprite_idx2#2
(byte) plexShowSprite::xpos_idx
(byte) plexShowSprite::xpos_idx#0
(byte) plexShowSprite::ypos
(byte) plexShowSprite::ypos#0
(void()) plexSort()
(number~) plexSort::$1
(bool~) plexSort::$2
(bool~) plexSort::$3
(number~) plexSort::$4
(bool~) plexSort::$5
(bool~) plexSort::$6
(bool~) plexSort::$7
(bool~) plexSort::$8
(label) plexSort::@1
(label) plexSort::@2
(label) plexSort::@3
(label) plexSort::@4
(label) plexSort::@5
(label) plexSort::@6
(label) plexSort::@return
(byte) plexSort::m
(byte) plexSort::m#0
(byte) plexSort::m#1
(byte) plexSort::m#2
(byte) plexSort::m#3
(byte) plexSort::m#4
(byte) plexSort::m#5
(byte) plexSort::m#6
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_idx#0
(byte) plexSort::nxt_idx#1
(byte) plexSort::nxt_idx#2
(byte) plexSort::nxt_idx#3
(byte) plexSort::nxt_y
(byte) plexSort::nxt_y#0
(byte) plexSort::nxt_y#1
(byte) plexSort::nxt_y#2
(label) plexSort::plexFreePrepare1
(bool~) plexSort::plexFreePrepare1_$0
(label) plexSort::plexFreePrepare1_@1
(label) plexSort::plexFreePrepare1_@2
(byte) plexSort::plexFreePrepare1_s
(byte) plexSort::plexFreePrepare1_s#0
(byte) plexSort::plexFreePrepare1_s#1
(byte) plexSort::plexFreePrepare1_s#2
(byte) plexSort::s
(byte) plexSort::s#0
(byte) plexSort::s#1
(byte) plexSort::s#2
(byte) plexSort::s#3
(byte) plexSort::s#4
(volatile byte) plex_free_next loadstore
(volatile byte) plex_show_idx loadstore
(volatile byte) plex_sprite_idx loadstore
(volatile byte) plex_sprite_msb loadstore

Adding number conversion cast (unumber) $3f8 in (byte*~) plexInit::plexSetScreen1_$0 ← (byte*) plexInit::plexSetScreen1_screen#1 + (number) $3f8
Adding number conversion cast (unumber) 1 in (byte) plexInit::i#1 ← (byte) plexInit::i#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) 1 in (number~) plexSort::$1 ← (byte) plexSort::m#2 + (number) 1
Adding number conversion cast (unumber) plexSort::$1 in (number~) plexSort::$1 ← (byte) plexSort::m#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 2 in (byte) plexSort::m#1 ← (byte) plexSort::m#3 + rangenext(0,PLEX_COUNT-2)
Adding number conversion cast (unumber) 1 in (number~) plexSort::$4 ← (byte) plexSort::s#3 + (number) 1
Adding number conversion cast (unumber) plexSort::$4 in (number~) plexSort::$4 ← (byte) plexSort::s#3 + (unumber)(number) 1
Adding number conversion cast (unumber) $ff in (bool~) plexSort::$5 ← (byte) plexSort::s#1 != (number) $ff
Adding number conversion cast (unumber) 0 in (volatile byte) plex_show_idx ← (number) 0
Adding number conversion cast (unumber) 0 in (volatile byte) plex_sprite_idx ← (number) 0
Adding number conversion cast (unumber) 1 in (volatile byte) plex_sprite_msb ← (number) 1
Adding number conversion cast (unumber) 0 in *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (number) 0
Adding number conversion cast (unumber) 0 in (volatile byte) plex_free_next ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) plexShowSprite::$0 ← (volatile byte) plex_sprite_idx * (number) 2
Adding number conversion cast (unumber) plexShowSprite::$0 in (number~) plexShowSprite::$0 ← (volatile byte) plex_sprite_idx * (unumber)(number) 2
Adding number conversion cast (unumber) $15 in (number~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#1 + (number) $15
Adding number conversion cast (unumber) plexShowSprite::plexFreeAdd1_$0 in (number~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#1 + (unumber)(number) $15
Adding number conversion cast (unumber) 1 in (number~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (number) 1
Adding number conversion cast (unumber) plexShowSprite::plexFreeAdd1_$1 in (number~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (unumber)(number) 1
Adding number conversion cast (unumber) 7 in (number~) plexShowSprite::plexFreeAdd1_$2 ← (unumber~) plexShowSprite::plexFreeAdd1_$1 & (number) 7
Adding number conversion cast (unumber) plexShowSprite::plexFreeAdd1_$2 in (number~) plexShowSprite::plexFreeAdd1_$2 ← (unumber~) plexShowSprite::plexFreeAdd1_$1 & (unumber)(number) 7
Adding number conversion cast (unumber) 0 in (bool~) plexShowSprite::$4 ← (byte~) plexShowSprite::$3 != (number) 0
Adding number conversion cast (unumber) $ff in (number~) plexShowSprite::$9 ← (number) $ff ^ (volatile byte) plex_sprite_msb
Adding number conversion cast (unumber) plexShowSprite::$9 in (number~) plexShowSprite::$9 ← (unumber)(number) $ff ^ (volatile byte) plex_sprite_msb
Adding number conversion cast (unumber) 1 in (number~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (number) 1
Adding number conversion cast (unumber) plexShowSprite::$5 in (number~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (unumber)(number) 1
Adding number conversion cast (unumber) 7 in (number~) plexShowSprite::$6 ← (unumber~) plexShowSprite::$5 & (number) 7
Adding number conversion cast (unumber) plexShowSprite::$6 in (number~) plexShowSprite::$6 ← (unumber~) plexShowSprite::$5 & (unumber)(number) 7
Adding number conversion cast (unumber) 1 in (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (number) 1
Adding number conversion cast (unumber) 0 in (bool~) plexShowSprite::$7 ← (volatile byte) plex_sprite_msb == (number) 0
Adding number conversion cast (unumber) 1 in (volatile byte) plex_sprite_msb ← (number) 1
Adding number conversion cast (unumber) VIC_DEN|VIC_RSEL|3 in *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) D011) ← ((unumber)) (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) $40 in (byte*~) init::$1 ← (const byte*) SPRITE / (number) $40
Adding number conversion cast (unumber) 9 in (word) init::xp#1 ← (word) init::xp#2 + (number) 9
Adding number conversion cast (unumber) 1 in (byte) init::sx#1 ← (byte) init::sx#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) $ff in *((const nomodify byte*) SPRITES_ENABLE) ← (number) $ff
Adding number conversion cast (unumber) $ff in (bool~) loop::$0 ← *((const nomodify byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) 8 in (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (number) 8
Adding number conversion cast (unumber) 1 in (byte) loop::sy#1 ← (byte) loop::sy#2 + rangenext(0,PLEX_COUNT-1)
Adding number conversion cast (unumber) 1 in (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#3 + (number) 1
Adding number conversion cast (unumber) 0 in (bool~) loop::$6 ← (byte~) loop::$5 != (number) 0
Adding number conversion cast (unumber) 1 in (byte) loop::ss#1 ← (byte) loop::ss#2 + rangenext(0,PLEX_COUNT-1)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (volatile byte) plex_show_idx ← (unumber)(number) 0
Inlining cast (volatile byte) plex_sprite_idx ← (unumber)(number) 0
Inlining cast (volatile byte) plex_sprite_msb ← (unumber)(number) 1
Inlining cast *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (unumber)(number) 0
Inlining cast (volatile byte) plex_free_next ← (unumber)(number) 0
Inlining cast (volatile byte) plex_sprite_msb ← (unumber)(number) 1
Inlining cast *((const nomodify byte*) D011) ← (unumber)(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Inlining cast *((const nomodify byte*) SPRITES_ENABLE) ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53264
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $3f8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $15
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 9
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) plexSort::$1 ← (byte) plexSort::m#2 + (byte) 1
Inferred type updated to byte in (unumber~) plexSort::$4 ← (byte) plexSort::s#3 + (byte) 1
Inferred type updated to byte in (unumber~) plexShowSprite::$0 ← (volatile byte) plex_sprite_idx * (byte) 2
Inferred type updated to byte in (unumber~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#1 + (byte) $15
Inferred type updated to byte in (unumber~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (byte) 1
Inferred type updated to byte in (unumber~) plexShowSprite::plexFreeAdd1_$2 ← (byte~) plexShowSprite::plexFreeAdd1_$1 & (byte) 7
Inferred type updated to byte in (unumber~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb
Inferred type updated to byte in (unumber~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (byte) 1
Inferred type updated to byte in (unumber~) plexShowSprite::$6 ← (byte~) plexShowSprite::$5 & (byte) 7
Inversing boolean not [25] (bool~) plexSort::$3 ← (byte) plexSort::nxt_y#0 >= *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2)) from [24] (bool~) plexSort::$2 ← (byte) plexSort::nxt_y#0 < *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))
Inversing boolean not [86] (bool~) plexShowSprite::$8 ← (volatile byte) plex_sprite_msb != (byte) 0 from [85] (bool~) plexShowSprite::$7 ← (volatile byte) plex_sprite_msb == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Alias plexInit::plexSetScreen1_screen#0 = plexInit::screen#1 plexInit::plexSetScreen1_screen#1 
Alias PLEX_SCREEN_PTR#1 = plexInit::plexSetScreen1_$0 PLEX_SCREEN_PTR#22 
Alias PLEX_SCREEN_PTR#15 = PLEX_SCREEN_PTR#8 PLEX_SCREEN_PTR#2 
Alias plexSort::m#2 = plexSort::m#4 plexSort::s#0 
Alias plexSort::nxt_y#0 = plexSort::nxt_y#2 
Alias plexSort::nxt_idx#0 = plexSort::nxt_idx#3 
Alias plexSort::s#1 = plexSort::s#4 
Alias plexSort::nxt_idx#1 = plexSort::nxt_idx#2 
Alias plexSort::m#5 = plexSort::m#6 
Alias plexShowSprite::plex_sprite_idx2#0 = plexShowSprite::$0 plexShowSprite::plex_sprite_idx2#2 plexShowSprite::plex_sprite_idx2#1 
Alias plexShowSprite::plexFreeAdd1_ypos#0 = plexShowSprite::ypos#0 plexShowSprite::plexFreeAdd1_ypos#1 
Alias PLEX_SCREEN_PTR#16 = PLEX_SCREEN_PTR#23 PLEX_SCREEN_PTR#9 
Alias PLEX_SCREEN_PTR#0 = PLEX_SCREEN_PTR#27 PLEX_SCREEN_PTR#25 PLEX_SCREEN_PTR#21 
Alias PLEX_SCREEN_PTR#10 = PLEX_SCREEN_PTR#3 PLEX_SCREEN_PTR#18 PLEX_SCREEN_PTR#11 PLEX_SCREEN_PTR#4 
Alias PLEX_SCREEN_PTR#12 = PLEX_SCREEN_PTR#5 
Alias PLEX_SCREEN_PTR#24 = PLEX_SCREEN_PTR#28 
Alias PLEX_SCREEN_PTR#13 = PLEX_SCREEN_PTR#20 PLEX_SCREEN_PTR#6 
Alias loop::sin_idx#2 = loop::sin_idx#4 loop::y_idx#0 
Alias PLEX_SCREEN_PTR#40 = PLEX_SCREEN_PTR#41 
Alias loop::sin_idx#3 = loop::sin_idx#5 
Alias PLEX_SCREEN_PTR#37 = PLEX_SCREEN_PTR#38 PLEX_SCREEN_PTR#39 
Alias loop::sin_idx#1 = loop::sin_idx#17 
Alias PLEX_SCREEN_PTR#35 = PLEX_SCREEN_PTR#36 
Alias loop::sin_idx#15 = loop::sin_idx#16 
Alias loop::ss#5 = loop::ss#7 loop::ss#8 loop::ss#6 
Alias PLEX_SCREEN_PTR#30 = PLEX_SCREEN_PTR#32 PLEX_SCREEN_PTR#33 PLEX_SCREEN_PTR#31 
Alias loop::sin_idx#11 = loop::sin_idx#13 loop::sin_idx#14 loop::sin_idx#12 
Alias loop::plexFreeNextYpos1_return#0 = loop::plexFreeNextYpos1_return#2 loop::plexFreeNextYpos1_return#1 loop::plexFreeNextYpos1_return#3 loop::$7 loop::rasterY#0 
Alias loop::ss#2 = loop::ss#3 loop::ss#4 
Alias PLEX_SCREEN_PTR#26 = PLEX_SCREEN_PTR#29 PLEX_SCREEN_PTR#34 PLEX_SCREEN_PTR#44 
Alias loop::sin_idx#10 = loop::sin_idx#9 loop::sin_idx#8 loop::sin_idx#7 
Alias PLEX_SCREEN_PTR#14 = PLEX_SCREEN_PTR#7 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Identical Phi Values (byte*) plexInit::plexSetScreen1_screen#0 (byte*) plexInit::screen#0
Identical Phi Values (byte*) PLEX_SCREEN_PTR#15 (byte*) PLEX_SCREEN_PTR#1
Identical Phi Values (byte) plexSort::nxt_y#1 (byte) plexSort::nxt_y#0
Identical Phi Values (byte) plexSort::nxt_idx#1 (byte) plexSort::nxt_idx#0
Identical Phi Values (byte) plexSort::m#5 (byte) plexSort::m#2
Identical Phi Values (byte*) PLEX_SCREEN_PTR#16 (byte*) PLEX_SCREEN_PTR#26
Identical Phi Values (byte*) PLEX_SCREEN_PTR#17 (byte*) PLEX_SCREEN_PTR#0
Identical Phi Values (byte*) PLEX_SCREEN_PTR#10 (byte*) PLEX_SCREEN_PTR#13
Identical Phi Values (byte*) PLEX_SCREEN_PTR#19 (byte*) PLEX_SCREEN_PTR#17
Identical Phi Values (byte*) PLEX_SCREEN_PTR#12 (byte*) PLEX_SCREEN_PTR#15
Identical Phi Values (byte*) PLEX_SCREEN_PTR#24 (byte*) PLEX_SCREEN_PTR#12
Identical Phi Values (byte*) PLEX_SCREEN_PTR#13 (byte*) PLEX_SCREEN_PTR#24
Identical Phi Values (byte*) PLEX_SCREEN_PTR#43 (byte*) PLEX_SCREEN_PTR#10
Identical Phi Values (byte) loop::sin_idx#2 (byte) loop::sin_idx#6
Identical Phi Values (byte*) PLEX_SCREEN_PTR#40 (byte*) PLEX_SCREEN_PTR#42
Identical Phi Values (byte) loop::sin_idx#3 (byte) loop::sin_idx#2
Identical Phi Values (byte*) PLEX_SCREEN_PTR#37 (byte*) PLEX_SCREEN_PTR#40
Identical Phi Values (byte*) PLEX_SCREEN_PTR#35 (byte*) PLEX_SCREEN_PTR#37
Identical Phi Values (byte) loop::sin_idx#15 (byte) loop::sin_idx#1
Identical Phi Values (byte) loop::rasterY#1 (byte) loop::plexFreeNextYpos1_return#0
Identical Phi Values (byte) loop::ss#2 (byte) loop::ss#5
Identical Phi Values (byte*) PLEX_SCREEN_PTR#26 (byte*) PLEX_SCREEN_PTR#30
Identical Phi Values (byte) loop::sin_idx#10 (byte) loop::sin_idx#11
Identical Phi Values (byte*) PLEX_SCREEN_PTR#14 (byte*) PLEX_SCREEN_PTR#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) plexSort::m#3 (byte) plexSort::m#2
Identical Phi Values (byte*) PLEX_SCREEN_PTR#30 (byte*) PLEX_SCREEN_PTR#42
Identical Phi Values (byte) loop::sin_idx#11 (byte) loop::sin_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) PLEX_SCREEN_PTR#42 (byte*) PLEX_SCREEN_PTR#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [73] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) plexInit::$1 [11] if((byte) plexInit::i#1!=rangelast(0,PLEX_COUNT-1)) goto plexInit::@1
Simple Condition (bool~) plexSort::$3 [19] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2
Simple Condition (bool~) plexSort::$8 [23] if((byte) plexSort::m#1!=rangelast(0,PLEX_COUNT-2)) goto plexSort::@1
Simple Condition (bool~) plexSort::plexFreePrepare1_$0 [42] if((byte) plexSort::plexFreePrepare1_s#1!=rangelast(0,7)) goto plexSort::plexFreePrepare1_@1
Simple Condition (bool~) plexShowSprite::$4 [62] if((byte~) plexShowSprite::$3!=(byte) 0) goto plexShowSprite::@1
Simple Condition (bool~) plexShowSprite::$8 [72] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return
Simple Condition (bool~) init::$2 [98] if((byte) init::sx#1!=rangelast(0,PLEX_COUNT-1)) goto init::@1
Simple Condition (bool~) init::$3 [105] if((byte) init::ss#1!=rangelast(0,7)) goto init::@3
Simple Condition (bool~) loop::$0 [113] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2
Simple Condition (bool~) loop::$2 [121] if((byte) loop::sy#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@4
Simple Condition (bool~) loop::$6 [129] if((byte~) loop::$5!=(byte) 0) goto loop::@6
Simple Condition (bool~) loop::$8 [136] if(*((const nomodify byte*) RASTER)<(byte) loop::plexFreeNextYpos1_return#0) goto loop::@9
Simple Condition (bool~) loop::$11 [141] if((byte) loop::ss#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@8
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [30] (bool~) plexSort::$7 ← (bool~) plexSort::$5 && (bool~) plexSort::$6
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [91] (byte*~) init::$1 ← (const byte*) SPRITE / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) PLEX_SCREEN_PTR#0 = (byte*)$400+$3f8
Constant (const byte) plexInit::i#0 = 0
Constant (const byte) plexSort::m#0 = 0
Constant (const byte) plexSort::plexFreePrepare1_s#0 = 0
Constant (const byte*) plexInit::screen#0 = SCREEN
Constant (const word) init::xp#0 = $20
Constant (const byte) init::sx#0 = 0
Constant (const byte*) init::$1 = SPRITE/$40
Constant (const byte) init::ss#0 = 0
Constant (const byte) loop::sin_idx#0 = 0
Constant (const byte) loop::sy#0 = 0
Constant (const byte) loop::ss#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)init::$1 in [92] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) init::$1
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [110] if(true) goto loop::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [9] plexInit::i#1 ← ++ plexInit::i#2 to ++
Resolved ranged comparison value [11] if(plexInit::i#1!=rangelast(0,PLEX_COUNT-1)) goto plexInit::@1 to (const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1
Resolved ranged next value [21] plexSort::m#1 ← ++ plexSort::m#2 to ++
Resolved ranged comparison value [23] if(plexSort::m#1!=rangelast(0,PLEX_COUNT-2)) goto plexSort::@1 to (const nomodify byte) PLEX_COUNT-(byte) 2+(number) 1
Resolved ranged next value [40] plexSort::plexFreePrepare1_s#1 ← ++ plexSort::plexFreePrepare1_s#2 to ++
Resolved ranged comparison value [42] if(plexSort::plexFreePrepare1_s#1!=rangelast(0,7)) goto plexSort::plexFreePrepare1_@1 to (number) 8
Resolved ranged next value [96] init::sx#1 ← ++ init::sx#2 to ++
Resolved ranged comparison value [98] if(init::sx#1!=rangelast(0,PLEX_COUNT-1)) goto init::@1 to (const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1
Resolved ranged next value [103] init::ss#1 ← ++ init::ss#2 to ++
Resolved ranged comparison value [105] if(init::ss#1!=rangelast(0,7)) goto init::@3 to (number) 8
Resolved ranged next value [119] loop::sy#1 ← ++ loop::sy#2 to ++
Resolved ranged comparison value [121] if(loop::sy#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@4 to (const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1
Resolved ranged next value [139] loop::ss#1 ← ++ loop::ss#5 to ++
Resolved ranged comparison value [141] if(loop::ss#1!=rangelast(0,PLEX_COUNT-1)) goto loop::@8 to (const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1
Eliminating unused constant (const byte*) PLEX_SCREEN_PTR#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block loop::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if((byte) plexInit::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto plexInit::@1
Adding number conversion cast (unumber) 1 in if((byte) plexInit::i#1!=(unumber)(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto plexInit::@1
Adding number conversion cast (unumber) PLEX_COUNT-2+1 in if((byte) plexSort::m#1!=(const nomodify byte) PLEX_COUNT-(byte) 2+(number) 1) goto plexSort::@1
Adding number conversion cast (unumber) 1 in if((byte) plexSort::m#1!=(unumber)(const nomodify byte) PLEX_COUNT-(byte) 2+(number) 1) goto plexSort::@1
Adding number conversion cast (unumber) 8 in if((byte) plexSort::plexFreePrepare1_s#1!=(number) 8) goto plexSort::plexFreePrepare1_@1
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if((byte) init::sx#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto init::@1
Adding number conversion cast (unumber) 1 in if((byte) init::sx#1!=(unumber)(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto init::@1
Adding number conversion cast (unumber) 8 in if((byte) init::ss#1!=(number) 8) goto init::@3
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if((byte) loop::sy#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto loop::@4
Adding number conversion cast (unumber) 1 in if((byte) loop::sy#1!=(unumber)(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto loop::@4
Adding number conversion cast (unumber) PLEX_COUNT-1+1 in if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto loop::@8
Adding number conversion cast (unumber) 1 in if((byte) loop::ss#1!=(unumber)(const nomodify byte) PLEX_COUNT-(byte) 1+(number) 1) goto loop::@8
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const nomodify byte) PLEX_COUNT-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify byte) PLEX_COUNT-(byte) 2+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast (const nomodify byte) PLEX_COUNT-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast (const nomodify byte) PLEX_COUNT-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const nomodify byte) PLEX_COUNT-(byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Alias plexShowSprite::$11 = plexShowSprite::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Simple Condition (bool~) plexSort::$5 [22] if((byte) plexSort::s#1!=(byte) $ff) goto plexSort::@7
Simple Condition (bool~) plexSort::$6 [105] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [22] if((byte) plexSort::s#1==(byte) $ff) goto plexSort::@4
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [3] (byte*) PLEX_SCREEN_PTR#1 ← (const byte*) plexInit::screen#0 + (word) $3f8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) PLEX_SCREEN_PTR#1 = plexInit::screen#0+$3f8
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Rewriting multiplication to use shift [31] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx * (byte) 2
Rewriting multiplication to use shift [41] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [67] (byte~) init::$4 ← (byte) init::sx#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) plexInit::i#0
Inlining constant with var siblings (const byte) plexSort::m#0
Inlining constant with var siblings (const byte) plexSort::plexFreePrepare1_s#0
Inlining constant with var siblings (const word) init::xp#0
Inlining constant with var siblings (const byte) init::sx#0
Inlining constant with var siblings (const byte) init::ss#0
Inlining constant with var siblings (const byte) loop::sin_idx#0
Inlining constant with var siblings (const byte) loop::sy#0
Inlining constant with var siblings (const byte) loop::ss#0
Constant inlined plexInit::screen#0 = (const byte*) SCREEN
Constant inlined init::xp#0 = (word) $20
Constant inlined loop::sy#0 = (byte) 0
Constant inlined loop::ss#0 = (byte) 0
Constant inlined init::sx#0 = (byte) 0
Constant inlined plexSort::plexFreePrepare1_s#0 = (byte) 0
Constant inlined init::ss#0 = (byte) 0
Constant inlined plexInit::i#0 = (byte) 0
Constant inlined plexSort::m#0 = (byte) 0
Constant inlined init::$1 = (const byte*) SPRITE/(byte) $40
Constant inlined loop::sin_idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment *(PLEX_SORTED_IDX+1 + plexSort::$1)
Consolidated array index constant in assignment *(PLEX_SORTED_IDX+1 + plexSort::$4)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Alias plexSort::m#2 = plexSort::$1 
Alias plexSort::s#3 = plexSort::$4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)plex_free_next = plexShowSprite::plexFreeAdd1_$2 
Alias candidate removed (volatile)plex_sprite_idx = plexShowSprite::$6 
Added new block during phi lifting plexInit::@3(between plexInit::@1 and plexInit::@1)
Added new block during phi lifting plexSort::@8(between plexSort::@2 and plexSort::@1)
Added new block during phi lifting plexSort::@9(between plexSort::@7 and plexSort::@3)
Added new block during phi lifting plexSort::@10(between plexSort::plexFreePrepare1_@1 and plexSort::plexFreePrepare1_@1)
Added new block during phi lifting init::@5(between init::@1 and init::@1)
Added new block during phi lifting init::@6(between init::@3 and init::@3)
Added new block during phi lifting loop::@15(between loop::@4 and loop::@4)
Added new block during phi lifting loop::@16(between loop::@14 and loop::@8)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of loop
Adding NOP phi() at start of loop::@7
Adding NOP phi() at start of loop::plexFreeNextYpos1_@return
Adding NOP phi() at start of loop::@12
Adding NOP phi() at start of plexSort
Adding NOP phi() at start of plexSort::plexFreePrepare1
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of plexInit
Adding NOP phi() at start of plexInit::plexSetScreen1
Adding NOP phi() at start of plexInit::@2
CALL GRAPH
Calls in [] to main:7 
Calls in [main] to init:11 loop:13 
Calls in [loop] to plexSort:28 plexShowSprite:40 
Calls in [init] to plexInit:103 

Created 11 initial phi equivalence classes
Not coalescing [20] loop::y_idx#3 ← loop::sin_idx#6
Coalesced [44] loop::sin_idx#18 ← loop::sin_idx#1
Coalesced [45] loop::ss#9 ← loop::ss#1
Coalesced [46] loop::y_idx#4 ← loop::y_idx#1
Coalesced [47] loop::sy#3 ← loop::sy#1
Not coalescing [79] plexSort::s#6 ← plexSort::m#2
Coalesced [99] plexSort::plexFreePrepare1_s#3 ← plexSort::plexFreePrepare1_s#1
Coalesced [100] plexSort::m#7 ← plexSort::m#1
Coalesced [101] plexSort::s#5 ← plexSort::s#1
Coalesced [118] init::ss#3 ← init::ss#1
Coalesced [119] init::sx#3 ← init::sx#1
Coalesced [120] init::xp#3 ← init::xp#1
Coalesced [129] plexInit::i#3 ← plexInit::i#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) @5
Culled Empty Block (label) main::@2
Culled Empty Block (label) loop::@7
Culled Empty Block (label) loop::plexFreeNextYpos1_@return
Culled Empty Block (label) loop::@12
Culled Empty Block (label) loop::@16
Culled Empty Block (label) loop::@15
Culled Empty Block (label) plexSort::@10
Culled Empty Block (label) plexSort::@8
Culled Empty Block (label) plexSort::@9
Culled Empty Block (label) init::@4
Culled Empty Block (label) init::@6
Culled Empty Block (label) init::@5
Culled Empty Block (label) plexInit::@2
Culled Empty Block (label) plexInit::@3
Renumbering block loop::@8 to loop::@7
Renumbering block loop::@9 to loop::@8
Renumbering block loop::@10 to loop::@9
Renumbering block loop::@11 to loop::@10
Renumbering block loop::@13 to loop::@11
Renumbering block loop::@14 to loop::@12
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of loop
Adding NOP phi() at start of plexSort
Adding NOP phi() at start of plexSort::plexFreePrepare1
Adding NOP phi() at start of plexInit
Adding NOP phi() at start of plexInit::plexSetScreen1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (volatile byte) plex_show_idx ← (byte) 0
  [2] (volatile byte) plex_sprite_idx ← (byte) 0
  [3] (volatile byte) plex_sprite_msb ← (byte) 1
  to:@2
@2: scope:[]  from @1
  [4] (volatile byte) plex_free_next ← (byte) 0
  to:@3
@3: scope:[]  from @2
  kickasm(location (const byte*) SPRITE) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  to:@4
@4: scope:[]  from @3
  [6] phi()
  [7] call main 
  to:@end
@end: scope:[]  from @4
  [8] phi()

(void()) main()
main: scope:[main]  from @4
  asm { sei  }
  [10] call init 
  to:main::@1
main::@1: scope:[main]  from main
  [11] phi()
  [12] call loop 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [13] return 
  to:@return

(void()) loop()
loop: scope:[loop]  from main::@1
  [14] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@10
  [15] (byte) loop::sin_idx#6 ← phi( loop/(byte) 0 loop::@10/(byte) loop::sin_idx#1 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [17] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  [18] (byte) loop::y_idx#3 ← (byte) loop::sin_idx#6
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  [19] (byte) loop::sy#2 ← phi( loop::@3/(byte) 0 loop::@4/(byte) loop::sy#1 )
  [19] (byte) loop::y_idx#2 ← phi( loop::@3/(byte) loop::y_idx#3 loop::@4/(byte) loop::y_idx#1 )
  [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2)
  [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8
  [22] (byte) loop::sy#1 ← ++ (byte) loop::sy#2
  [23] if((byte) loop::sy#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  [24] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte) 1
  [25] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  [26] call plexSort 
  to:loop::@11
loop::@11: scope:[loop]  from loop::@5
  [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  to:loop::@6
loop::@6: scope:[loop]  from loop::@11 loop::@6
  [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8
  [29] if((byte~) loop::$5!=(byte) 0) goto loop::@6
  to:loop::@7
loop::@7: scope:[loop]  from loop::@12 loop::@6
  [30] (byte) loop::ss#5 ← phi( loop::@12/(byte) loop::ss#1 loop::@6/(byte) 0 )
  [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  to:loop::plexFreeNextYpos1
loop::plexFreeNextYpos1: scope:[loop]  from loop::@7
  [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next)
  to:loop::@8
loop::@8: scope:[loop]  from loop::@8 loop::plexFreeNextYpos1
  [33] if(*((const nomodify byte*) RASTER)<(byte) loop::plexFreeNextYpos1_return#0) goto loop::@8
  to:loop::@9
loop::@9: scope:[loop]  from loop::@8
  [34] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL)
  [35] call plexShowSprite 
  to:loop::@12
loop::@12: scope:[loop]  from loop::@9
  [36] (byte) loop::ss#1 ← ++ (byte) loop::ss#5
  [37] if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7
  to:loop::@10
loop::@10: scope:[loop]  from loop::@12
  [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  to:loop::@1

(void()) plexShowSprite()
plexShowSprite: scope:[plexShowSprite]  from loop::@9
  [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1
  [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx))
  [41] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0
  to:plexShowSprite::plexFreeAdd1
plexShowSprite::plexFreeAdd1: scope:[plexShowSprite]  from plexShowSprite
  [42] (byte~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 + (byte) $15
  [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0
  [44] (byte~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (byte) 1
  [45] (byte~) plexShowSprite::plexFreeAdd1_$2 ← (byte~) plexShowSprite::plexFreeAdd1_$1 & (byte) 7
  [46] (volatile byte) plex_free_next ← (byte~) plexShowSprite::plexFreeAdd1_$2
  to:plexShowSprite::@5
plexShowSprite::@5: scope:[plexShowSprite]  from plexShowSprite::plexFreeAdd1
  [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx))
  [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)
  [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1
  [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11)
  [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2
  [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11)
  [53] if((byte~) plexShowSprite::$3!=(byte) 0) goto plexShowSprite::@1
  to:plexShowSprite::@3
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@5
  [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb
  [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@3
  [56] (byte~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (byte) 1
  [57] (byte~) plexShowSprite::$6 ← (byte~) plexShowSprite::$5 & (byte) 7
  [58] (volatile byte) plex_sprite_idx ← (byte~) plexShowSprite::$6
  [59] (volatile byte) plex_show_idx ← ++ (volatile byte) plex_show_idx
  [60] (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (byte) 1
  [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite::@2
  [62] (volatile byte) plex_sprite_msb ← (byte) 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@4
  [63] return 
  to:@return
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite::@5
  [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb
  to:plexShowSprite::@2

(void()) plexSort()
plexSort: scope:[plexSort]  from loop::@5
  [65] phi()
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  [66] (byte) plexSort::m#2 ← phi( plexSort/(byte) 0 plexSort::@2/(byte) plexSort::m#1 )
  [67] (byte) plexSort::nxt_idx#0 ← *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::m#2)
  [68] (byte) plexSort::nxt_y#0 ← *((const byte*) PLEX_YPOS + (byte) plexSort::nxt_idx#0)
  [69] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@1
  [70] (byte) plexSort::s#6 ← (byte) plexSort::m#2
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@5 plexSort::@7
  [71] (byte) plexSort::s#3 ← phi( plexSort::@7/(byte) plexSort::s#1 plexSort::@5/(byte) plexSort::s#6 )
  [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3)
  [73] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3
  [74] if((byte) plexSort::s#1==(byte) $ff) goto plexSort::@4
  to:plexSort::@7
plexSort::@7: scope:[plexSort]  from plexSort::@3
  [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3
  to:plexSort::@4
plexSort::@4: scope:[plexSort]  from plexSort::@3 plexSort::@7
  [76] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1
  [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0
  to:plexSort::@2
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@4
  [78] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2
  [79] if((byte) plexSort::m#1!=(const nomodify byte) PLEX_COUNT-(byte) 2+(byte) 1) goto plexSort::@1
  to:plexSort::@6
plexSort::@6: scope:[plexSort]  from plexSort::@2
  [80] (volatile byte) plex_show_idx ← (byte) 0
  [81] (volatile byte) plex_sprite_idx ← (byte) 0
  [82] (volatile byte) plex_sprite_msb ← (byte) 1
  to:plexSort::plexFreePrepare1
plexSort::plexFreePrepare1: scope:[plexSort]  from plexSort::@6
  [83] phi()
  to:plexSort::plexFreePrepare1_@1
plexSort::plexFreePrepare1_@1: scope:[plexSort]  from plexSort::plexFreePrepare1 plexSort::plexFreePrepare1_@1
  [84] (byte) plexSort::plexFreePrepare1_s#2 ← phi( plexSort::plexFreePrepare1/(byte) 0 plexSort::plexFreePrepare1_@1/(byte) plexSort::plexFreePrepare1_s#1 )
  [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0
  [86] (byte) plexSort::plexFreePrepare1_s#1 ← ++ (byte) plexSort::plexFreePrepare1_s#2
  [87] if((byte) plexSort::plexFreePrepare1_s#1!=(byte) 8) goto plexSort::plexFreePrepare1_@1
  to:plexSort::plexFreePrepare1_@2
plexSort::plexFreePrepare1_@2: scope:[plexSort]  from plexSort::plexFreePrepare1_@1
  [88] (volatile byte) plex_free_next ← (byte) 0
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::plexFreePrepare1_@2
  [89] return 
  to:@return

(void()) init()
init: scope:[init]  from main
  [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  [91] call plexInit 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [92] (word) init::xp#2 ← phi( init::@1/(word) init::xp#1 init/(word) $20 )
  [92] (byte) init::sx#2 ← phi( init::@1/(byte) init::sx#1 init/(byte) 0 )
  [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40
  [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1
  [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2
  [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9
  [97] (byte) init::sx#1 ← ++ (byte) init::sx#2
  [98] if((byte) init::sx#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  [100] (byte) init::ss#2 ← phi( init::@2/(byte) 0 init::@3/(byte) init::ss#1 )
  [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN
  [102] (byte) init::ss#1 ← ++ (byte) init::ss#2
  [103] if((byte) init::ss#1!=(byte) 8) goto init::@3
  to:init::@return
init::@return: scope:[init]  from init::@3
  [104] return 
  to:@return

(void()) plexInit((byte*) plexInit::screen)
plexInit: scope:[plexInit]  from init
  [105] phi()
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  [106] phi()
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::plexSetScreen1
  [107] (byte) plexInit::i#2 ← phi( plexInit::@1/(byte) plexInit::i#1 plexInit::plexSetScreen1/(byte) 0 )
  [108] *((const byte*) PLEX_SORTED_IDX + (byte) plexInit::i#2) ← (byte) plexInit::i#2
  [109] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2
  [110] if((byte) plexInit::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  [111] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte*) PLEX_SCREEN_PTR
(void()) init()
(byte~) init::$4 2002.0
(byte) init::ss
(byte) init::ss#1 1501.5
(byte) init::ss#2 1501.5
(byte) init::sx
(byte) init::sx#1 1501.5
(byte) init::sx#2 800.8
(word) init::xp
(word) init::xp#1 667.3333333333334
(word) init::xp#2 750.75
(void()) loop()
(byte~) loop::$5 20002.0
(byte) loop::plexFreeNextYpos1_return
(byte) loop::plexFreeNextYpos1_return#0 55001.0
(byte) loop::rasterY
(byte) loop::sin_idx
(byte) loop::sin_idx#1 133.46666666666667
(byte) loop::sin_idx#6 333.6666666666667
(byte) loop::ss
(byte) loop::ss#1 15001.5
(byte) loop::ss#5 3333.6666666666665
(byte) loop::sy
(byte) loop::sy#1 15001.5
(byte) loop::sy#2 10001.0
(byte) loop::y_idx
(byte) loop::y_idx#1 6667.333333333333
(byte) loop::y_idx#2 15502.0
(byte) loop::y_idx#3 2002.0
(void()) main()
(void()) plexInit((byte*) plexInit::screen)
(byte) plexInit::i
(byte) plexInit::i#1 15001.5
(byte) plexInit::i#2 20002.0
(byte*) plexInit::plexSetScreen1_screen
(byte*) plexInit::screen
(void()) plexShowSprite()
(byte~) plexShowSprite::$11 100001.0
(byte~) plexShowSprite::$2 200002.0
(byte~) plexShowSprite::$3 200002.0
(byte~) plexShowSprite::$5 200002.0
(byte~) plexShowSprite::$6 200002.0
(byte~) plexShowSprite::$9 200002.0
(byte~) plexShowSprite::plexFreeAdd1_$0 200002.0
(byte~) plexShowSprite::plexFreeAdd1_$1 200002.0
(byte~) plexShowSprite::plexFreeAdd1_$2 200002.0
(byte) plexShowSprite::plexFreeAdd1_ypos
(byte) plexShowSprite::plexFreeAdd1_ypos#0 150001.5
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::plex_sprite_idx2#0 25000.25
(byte) plexShowSprite::xpos_idx
(byte) plexShowSprite::xpos_idx#0 200002.0
(byte) plexShowSprite::ypos
(void()) plexSort()
(byte) plexSort::m
(byte) plexSort::m#1 1500001.5
(byte) plexSort::m#2 416667.0833333334
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_idx#0 300000.30000000005
(byte) plexSort::nxt_y
(byte) plexSort::nxt_y#0 1500000.375
(byte) plexSort::plexFreePrepare1_s
(byte) plexSort::plexFreePrepare1_s#1 1500001.5
(byte) plexSort::plexFreePrepare1_s#2 1500001.5
(byte) plexSort::s
(byte) plexSort::s#1 1.3666668333333332E7
(byte) plexSort::s#2 2000002.0
(byte) plexSort::s#3 2.05000025E7
(byte) plexSort::s#6 2000002.0
(volatile byte) plex_free_next loadstore 8421.236842105262
(volatile byte) plex_show_idx loadstore 10625.166666666664
(volatile byte) plex_sprite_idx loadstore 9111.266666666666
(volatile byte) plex_sprite_msb loadstore 13261.065217391304

Initial phi equivalence classes
[ loop::sin_idx#6 loop::sin_idx#1 ]
[ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
[ loop::sy#2 loop::sy#1 ]
[ loop::ss#5 loop::ss#1 ]
[ plexSort::m#2 plexSort::m#1 ]
[ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
[ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
[ init::sx#2 init::sx#1 ]
[ init::xp#2 init::xp#1 ]
[ init::ss#2 init::ss#1 ]
[ plexInit::i#2 plexInit::i#1 ]
Added variable plex_show_idx to live range equivalence class [ plex_show_idx ]
Added variable plex_sprite_idx to live range equivalence class [ plex_sprite_idx ]
Added variable plex_sprite_msb to live range equivalence class [ plex_sprite_msb ]
Added variable plex_free_next to live range equivalence class [ plex_free_next ]
Added variable loop::$5 to live range equivalence class [ loop::$5 ]
Added variable loop::plexFreeNextYpos1_return#0 to live range equivalence class [ loop::plexFreeNextYpos1_return#0 ]
Added variable plexShowSprite::plex_sprite_idx2#0 to live range equivalence class [ plexShowSprite::plex_sprite_idx2#0 ]
Added variable plexShowSprite::plexFreeAdd1_ypos#0 to live range equivalence class [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Added variable plexShowSprite::plexFreeAdd1_$0 to live range equivalence class [ plexShowSprite::plexFreeAdd1_$0 ]
Added variable plexShowSprite::plexFreeAdd1_$1 to live range equivalence class [ plexShowSprite::plexFreeAdd1_$1 ]
Added variable plexShowSprite::plexFreeAdd1_$2 to live range equivalence class [ plexShowSprite::plexFreeAdd1_$2 ]
Added variable plexShowSprite::xpos_idx#0 to live range equivalence class [ plexShowSprite::xpos_idx#0 ]
Added variable plexShowSprite::$11 to live range equivalence class [ plexShowSprite::$11 ]
Added variable plexShowSprite::$2 to live range equivalence class [ plexShowSprite::$2 ]
Added variable plexShowSprite::$3 to live range equivalence class [ plexShowSprite::$3 ]
Added variable plexShowSprite::$9 to live range equivalence class [ plexShowSprite::$9 ]
Added variable plexShowSprite::$5 to live range equivalence class [ plexShowSprite::$5 ]
Added variable plexShowSprite::$6 to live range equivalence class [ plexShowSprite::$6 ]
Added variable plexSort::nxt_idx#0 to live range equivalence class [ plexSort::nxt_idx#0 ]
Added variable plexSort::nxt_y#0 to live range equivalence class [ plexSort::nxt_y#0 ]
Added variable plexSort::s#2 to live range equivalence class [ plexSort::s#2 ]
Added variable init::$4 to live range equivalence class [ init::$4 ]
Complete equivalence classes
[ loop::sin_idx#6 loop::sin_idx#1 ]
[ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
[ loop::sy#2 loop::sy#1 ]
[ loop::ss#5 loop::ss#1 ]
[ plexSort::m#2 plexSort::m#1 ]
[ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
[ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
[ init::sx#2 init::sx#1 ]
[ init::xp#2 init::xp#1 ]
[ init::ss#2 init::ss#1 ]
[ plexInit::i#2 plexInit::i#1 ]
[ plex_show_idx ]
[ plex_sprite_idx ]
[ plex_sprite_msb ]
[ plex_free_next ]
[ loop::$5 ]
[ loop::plexFreeNextYpos1_return#0 ]
[ plexShowSprite::plex_sprite_idx2#0 ]
[ plexShowSprite::plexFreeAdd1_ypos#0 ]
[ plexShowSprite::plexFreeAdd1_$0 ]
[ plexShowSprite::plexFreeAdd1_$1 ]
[ plexShowSprite::plexFreeAdd1_$2 ]
[ plexShowSprite::xpos_idx#0 ]
[ plexShowSprite::$11 ]
[ plexShowSprite::$2 ]
[ plexShowSprite::$3 ]
[ plexShowSprite::$9 ]
[ plexShowSprite::$5 ]
[ plexShowSprite::$6 ]
[ plexSort::nxt_idx#0 ]
[ plexSort::nxt_y#0 ]
[ plexSort::s#2 ]
[ init::$4 ]
Allocated zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Allocated zp[1]:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Allocated zp[1]:4 [ loop::sy#2 loop::sy#1 ]
Allocated zp[1]:5 [ loop::ss#5 loop::ss#1 ]
Allocated zp[1]:6 [ plexSort::m#2 plexSort::m#1 ]
Allocated zp[1]:7 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
Allocated zp[1]:8 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
Allocated zp[1]:9 [ init::sx#2 init::sx#1 ]
Allocated zp[2]:10 [ init::xp#2 init::xp#1 ]
Allocated zp[1]:12 [ init::ss#2 init::ss#1 ]
Allocated zp[1]:13 [ plexInit::i#2 plexInit::i#1 ]
Allocated zp[1]:14 [ plex_show_idx ]
Allocated zp[1]:15 [ plex_sprite_idx ]
Allocated zp[1]:16 [ plex_sprite_msb ]
Allocated zp[1]:17 [ plex_free_next ]
Allocated zp[1]:18 [ loop::$5 ]
Allocated zp[1]:19 [ loop::plexFreeNextYpos1_return#0 ]
Allocated zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ]
Allocated zp[1]:21 [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Allocated zp[1]:22 [ plexShowSprite::plexFreeAdd1_$0 ]
Allocated zp[1]:23 [ plexShowSprite::plexFreeAdd1_$1 ]
Allocated zp[1]:24 [ plexShowSprite::plexFreeAdd1_$2 ]
Allocated zp[1]:25 [ plexShowSprite::xpos_idx#0 ]
Allocated zp[1]:26 [ plexShowSprite::$11 ]
Allocated zp[1]:27 [ plexShowSprite::$2 ]
Allocated zp[1]:28 [ plexShowSprite::$3 ]
Allocated zp[1]:29 [ plexShowSprite::$9 ]
Allocated zp[1]:30 [ plexShowSprite::$5 ]
Allocated zp[1]:31 [ plexShowSprite::$6 ]
Allocated zp[1]:32 [ plexSort::nxt_idx#0 ]
Allocated zp[1]:33 [ plexSort::nxt_y#0 ]
Allocated zp[1]:34 [ plexSort::s#2 ]
Allocated zp[1]:35 [ init::$4 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// A simple usage of the flexible sprite multiplexer routine
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label D011 = $d011
  .const VIC_RST8 = $80
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  // The number of sprites in the multiplexer
  .const PLEX_COUNT = $20
  // Location of screen & sprites
  .label SCREEN = $400
  .label SPRITE = $2000
  // The address of the sprite pointers on the current screen (screen+0x3f8).
  .label PLEX_SCREEN_PTR = SCREEN+$3f8
  .label plex_show_idx = $e
  .label plex_sprite_idx = $f
  .label plex_sprite_msb = $10
  .label plex_free_next = $11
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) plex_show_idx ← (byte) 0 -- vbuz1=vbuc1 
  // The index in the PLEX tables of the next sprite to show
  lda #0
  sta.z plex_show_idx
  // [2] (volatile byte) plex_sprite_idx ← (byte) 0 -- vbuz1=vbuc1 
  // The index the next sprite to use for showing (sprites are used round-robin)
  lda #0
  sta.z plex_sprite_idx
  // [3] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
  // The MSB bit of the next sprite to use for showing
  lda #1
  sta.z plex_sprite_msb
  jmp __b2
  // @2
__b2:
  // [4] (volatile byte) plex_free_next ← (byte) 0 -- vbuz1=vbuc1 
  // The index of the sprite that is free next. Since sprites are used round-robin this moves forward each time a sprite is shown.
  lda #0
  sta.z plex_free_next
  jmp __b3
  // @3
__b3:
  // kickasm(location (const byte*) SPRITE) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
  // [6] phi from @3 to @4 [phi:@3->@4]
__b4_from___b3:
  jmp __b4
  // @4
__b4:
  // [7] call main 
  jsr main
  // [8] phi from @4 to @end [phi:@4->@end]
__bend_from___b4:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [10] call init 
    jsr init
    // [11] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [12] call loop 
    // [14] phi from main::@1 to loop [phi:main::@1->loop]
  loop_from___b1:
    jsr loop
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // loop
// The raster loop
loop: {
    .label __5 = $12
    .label y_idx = 3
    .label sy = 4
    // The current index into the y-sinus
    .label sin_idx = 2
    .label plexFreeNextYpos1_return = $13
    .label ss = 5
    // [15] phi from loop to loop::@1 [phi:loop->loop::@1]
  __b1_from_loop:
    // [15] phi (byte) loop::sin_idx#6 = (byte) 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    jmp __b1
    // loop::@1
  __b1:
    jmp __b2
    // loop::@2
  __b2:
    // [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    jmp __b3
    // loop::@3
  __b3:
    // [17] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [18] (byte) loop::y_idx#3 ← (byte) loop::sin_idx#6 -- vbuz1=vbuz2 
    lda.z sin_idx
    sta.z y_idx
    // [19] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
  __b4_from___b3:
    // [19] phi (byte) loop::sy#2 = (byte) 0 [phi:loop::@3->loop::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sy
    // [19] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#3 [phi:loop::@3->loop::@4#1] -- register_copy 
    jmp __b4
    // [19] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
  __b4_from___b4:
    // [19] phi (byte) loop::sy#2 = (byte) loop::sy#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [19] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    jmp __b4
    // loop::@4
  __b4:
    // [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z y_idx
    lda YSIN,y
    ldy.z sy
    sta PLEX_YPOS,y
    // [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z y_idx
    axs #-[8]
    stx.z y_idx
    // [22] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 -- vbuz1=_inc_vbuz1 
    inc.z sy
    // [23] if((byte) loop::sy#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z sy
    bne __b4_from___b4
    jmp __b5
    // loop::@5
  __b5:
    // [24] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z sin_idx
    // [25] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [26] call plexSort 
    // [65] phi from loop::@5 to plexSort [phi:loop::@5->plexSort]
  plexSort_from___b5:
    jsr plexSort
    jmp __b11
    // loop::@11
  __b11:
    // [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp __b6
    // loop::@6
  __b6:
    // [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #VIC_RST8
    and D011
    sta.z __5
    // [29] if((byte~) loop::$5!=(byte) 0) goto loop::@6 -- vbuz1_neq_0_then_la1 
    lda.z __5
    cmp #0
    bne __b6
    // [30] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
  __b7_from___b6:
    // [30] phi (byte) loop::ss#5 = (byte) 0 [phi:loop::@6->loop::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ss
    jmp __b7
  // Show the sprites
    // [30] phi from loop::@12 to loop::@7 [phi:loop::@12->loop::@7]
  __b7_from___b12:
    // [30] phi (byte) loop::ss#5 = (byte) loop::ss#1 [phi:loop::@12->loop::@7#0] -- register_copy 
    jmp __b7
    // loop::@7
  __b7:
    // [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp plexFreeNextYpos1
    // loop::plexFreeNextYpos1
  plexFreeNextYpos1:
    // [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z plex_free_next
    lda PLEX_FREE_YPOS,y
    sta.z plexFreeNextYpos1_return
    jmp __b8
    // loop::@8
  __b8:
    // [33] if(*((const nomodify byte*) RASTER)<(byte) loop::plexFreeNextYpos1_return#0) goto loop::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z plexFreeNextYpos1_return
    bcc __b8
    jmp __b9
    // loop::@9
  __b9:
    // [34] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [35] call plexShowSprite 
    jsr plexShowSprite
    jmp __b12
    // loop::@12
  __b12:
    // [36] (byte) loop::ss#1 ← ++ (byte) loop::ss#5 -- vbuz1=_inc_vbuz1 
    inc.z ss
    // [37] if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z ss
    bne __b7_from___b12
    jmp __b10
    // loop::@10
  __b10:
    // [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [15] phi from loop::@10 to loop::@1 [phi:loop::@10->loop::@1]
  __b1_from___b10:
    // [15] phi (byte) loop::sin_idx#6 = (byte) loop::sin_idx#1 [phi:loop::@10->loop::@1#0] -- register_copy 
    jmp __b1
}
  // plexShowSprite
// Show the next sprite.
// plexSort() prepares showing the sprites
plexShowSprite: {
    .label __2 = $1b
    .label __3 = $1c
    .label __5 = $1e
    .label __6 = $1f
    .label __9 = $1d
    .label __11 = $1a
    .label plexFreeAdd1___0 = $16
    .label plexFreeAdd1___1 = $17
    .label plexFreeAdd1___2 = $18
    .label plex_sprite_idx2 = $14
    .label plexFreeAdd1_ypos = $15
    .label xpos_idx = $19
    // [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plex_sprite_idx
    asl
    sta.z plex_sprite_idx2
    // [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) -- vbuz1=pbuc1_derefidx_(pbuc2_derefidx_vbuz2) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    ldx PLEX_YPOS,y
    stx.z plexFreeAdd1_ypos
    // [41] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z plexFreeAdd1_ypos
    ldy.z plex_sprite_idx2
    sta SPRITES_YPOS,y
    jmp plexFreeAdd1
    // plexShowSprite::plexFreeAdd1
  plexFreeAdd1:
    // [42] (byte~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 + (byte) $15 -- vbuz1=vbuz2_plus_vbuc1 
    lax.z plexFreeAdd1_ypos
    axs #-[$15]
    stx.z plexFreeAdd1___0
    // [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z plexFreeAdd1___0
    ldy.z plex_free_next
    sta PLEX_FREE_YPOS,y
    // [44] (byte~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z plex_free_next
    iny
    sty.z plexFreeAdd1___1
    // [45] (byte~) plexShowSprite::plexFreeAdd1_$2 ← (byte~) plexShowSprite::plexFreeAdd1_$1 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z plexFreeAdd1___1
    sta.z plexFreeAdd1___2
    // [46] (volatile byte) plex_free_next ← (byte~) plexShowSprite::plexFreeAdd1_$2 -- vbuz1=vbuz2 
    lda.z plexFreeAdd1___2
    sta.z plex_free_next
    jmp __b5
    // plexShowSprite::@5
  __b5:
    // [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_(pbuc3_derefidx_vbuz2) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_PTR,y
    ldx.z plex_sprite_idx
    sta PLEX_SCREEN_PTR,x
    // [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z plex_show_idx
    lda PLEX_SORTED_IDX,y
    sta.z xpos_idx
    // [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z xpos_idx
    asl
    sta.z __11
    // [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) -- vbuz1=_lo_pwuc1_derefidx_vbuz2 
    ldy.z __11
    lda PLEX_XPOS,y
    sta.z __2
    // [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __2
    ldy.z plex_sprite_idx2
    sta SPRITES_XPOS,y
    // [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) -- vbuz1=_hi_pwuc1_derefidx_vbuz2 
    ldy.z __11
    lda PLEX_XPOS+1,y
    sta.z __3
    // [53] if((byte~) plexShowSprite::$3!=(byte) 0) goto plexShowSprite::@1 -- vbuz1_neq_0_then_la1 
    lda.z __3
    cmp #0
    bne __b1
    jmp __b3
    // plexShowSprite::@3
  __b3:
    // [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb -- vbuz1=vbuc1_bxor_vbuz2 
    lda #$ff
    eor.z plex_sprite_msb
    sta.z __9
    // [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9 -- _deref_pbuc1=_deref_pbuc1_band_vbuz1 
    lda SPRITES_XMSB
    and.z __9
    sta SPRITES_XMSB
    jmp __b2
    // plexShowSprite::@2
  __b2:
    // [56] (byte~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z plex_sprite_idx
    iny
    sty.z __5
    // [57] (byte~) plexShowSprite::$6 ← (byte~) plexShowSprite::$5 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z __5
    sta.z __6
    // [58] (volatile byte) plex_sprite_idx ← (byte~) plexShowSprite::$6 -- vbuz1=vbuz2 
    lda.z __6
    sta.z plex_sprite_idx
    // [59] (volatile byte) plex_show_idx ← ++ (volatile byte) plex_show_idx -- vbuz1=_inc_vbuz1 
    inc.z plex_show_idx
    // [60] (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z plex_sprite_msb
    // [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return -- vbuz1_neq_0_then_la1 
    lda.z plex_sprite_msb
    cmp #0
    bne __breturn
    jmp __b4
    // plexShowSprite::@4
  __b4:
    // [62] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    jmp __breturn
    // plexShowSprite::@return
  __breturn:
    // [63] return 
    rts
    // plexShowSprite::@1
  __b1:
    // [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora.z plex_sprite_msb
    sta SPRITES_XMSB
    jmp __b2
}
  // plexSort
// Ensure that the indices in PLEX_SORTED_IDX is sorted based on the y-positions in PLEX_YPOS
// Assumes that the positions are nearly sorted already (as each sprite just moves a bit)
// Uses an insertion sort:
// 1. Moves a marker (m) from the start to end of the array. Every time the marker moves forward all elements before the marker are sorted correctly.
// 2a. If the next element after the marker is larger that the current element
//     the marker can be moved forwards (as the sorting is correct).
// 2b. If the next element after the marker is smaller than the current element:
//     elements before the marker are shifted right one at a time until encountering one smaller than the current one.
//      It is then inserted at the spot. Now the marker can move forward.
plexSort: {
    .label nxt_idx = $20
    .label nxt_y = $21
    .label m = 6
    .label s = 7
    .label s_1 = $22
    .label plexFreePrepare1_s = 8
    // [66] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
  __b1_from_plexSort:
    // [66] phi (byte) plexSort::m#2 = (byte) 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z m
    jmp __b1
    // [66] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
  __b1_from___b2:
    // [66] phi (byte) plexSort::m#2 = (byte) plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    jmp __b1
    // plexSort::@1
  __b1:
    // [67] (byte) plexSort::nxt_idx#0 ← *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::m#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z m
    lda PLEX_SORTED_IDX+1,y
    sta.z nxt_idx
    // [68] (byte) plexSort::nxt_y#0 ← *((const byte*) PLEX_YPOS + (byte) plexSort::nxt_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z nxt_idx
    lda PLEX_YPOS,y
    sta.z nxt_y
    // [69] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2 -- vbuz1_ge_pbuc1_derefidx_(pbuc2_derefidx_vbuz2)_then_la1 
    lda.z nxt_y
    ldx.z m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs __b2
    jmp __b5
    // plexSort::@5
  __b5:
    // [70] (byte) plexSort::s#6 ← (byte) plexSort::m#2 -- vbuz1=vbuz2 
    lda.z m
    sta.z s
    // [71] phi from plexSort::@5 plexSort::@7 to plexSort::@3 [phi:plexSort::@5/plexSort::@7->plexSort::@3]
  __b3_from___b5:
  __b3_from___b7:
    // [71] phi (byte) plexSort::s#3 = (byte) plexSort::s#6 [phi:plexSort::@5/plexSort::@7->plexSort::@3#0] -- register_copy 
    jmp __b3
    // plexSort::@3
  __b3:
    // [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z s
    lda PLEX_SORTED_IDX,y
    sta PLEX_SORTED_IDX+1,y
    // [73] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 -- vbuz1=_dec_vbuz1 
    dec.z s
    // [74] if((byte) plexSort::s#1==(byte) $ff) goto plexSort::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ff
    cmp.z s
    beq __b4
    jmp __b7
    // plexSort::@7
  __b7:
    // [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3 -- vbuz1_lt_pbuc1_derefidx_(pbuc2_derefidx_vbuz2)_then_la1 
    lda.z nxt_y
    ldx.z s
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc __b3_from___b7
    jmp __b4
    // plexSort::@4
  __b4:
    // [76] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 -- vbuz1=_inc_vbuz2 
    ldy.z s
    iny
    sty.z s_1
    // [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z nxt_idx
    ldy.z s_1
    sta PLEX_SORTED_IDX,y
    jmp __b2
    // plexSort::@2
  __b2:
    // [78] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 -- vbuz1=_inc_vbuz1 
    inc.z m
    // [79] if((byte) plexSort::m#1!=(const nomodify byte) PLEX_COUNT-(byte) 2+(byte) 1) goto plexSort::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-2+1
    cmp.z m
    bne __b1_from___b2
    jmp __b6
    // plexSort::@6
  __b6:
    // [80] (volatile byte) plex_show_idx ← (byte) 0 -- vbuz1=vbuc1 
    // Prepare for showing the sprites
    lda #0
    sta.z plex_show_idx
    // [81] (volatile byte) plex_sprite_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_sprite_idx
    // [82] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // [83] phi from plexSort::@6 to plexSort::plexFreePrepare1 [phi:plexSort::@6->plexSort::plexFreePrepare1]
  plexFreePrepare1_from___b6:
    jmp plexFreePrepare1
    // plexSort::plexFreePrepare1
  plexFreePrepare1:
    // [84] phi from plexSort::plexFreePrepare1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1]
  plexFreePrepare1___b1_from_plexFreePrepare1:
    // [84] phi (byte) plexSort::plexFreePrepare1_s#2 = (byte) 0 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z plexFreePrepare1_s
    jmp plexFreePrepare1___b1
    // [84] phi from plexSort::plexFreePrepare1_@1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1]
  plexFreePrepare1___b1_from_plexFreePrepare1___b1:
    // [84] phi (byte) plexSort::plexFreePrepare1_s#2 = (byte) plexSort::plexFreePrepare1_s#1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1#0] -- register_copy 
    jmp plexFreePrepare1___b1
    // plexSort::plexFreePrepare1_@1
  plexFreePrepare1___b1:
    // [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z plexFreePrepare1_s
    sta PLEX_FREE_YPOS,y
    // [86] (byte) plexSort::plexFreePrepare1_s#1 ← ++ (byte) plexSort::plexFreePrepare1_s#2 -- vbuz1=_inc_vbuz1 
    inc.z plexFreePrepare1_s
    // [87] if((byte) plexSort::plexFreePrepare1_s#1!=(byte) 8) goto plexSort::plexFreePrepare1_@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z plexFreePrepare1_s
    bne plexFreePrepare1___b1_from_plexFreePrepare1___b1
    jmp plexFreePrepare1___b2
    // plexSort::plexFreePrepare1_@2
  plexFreePrepare1___b2:
    // [88] (volatile byte) plex_free_next ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_free_next
    jmp __breturn
    // plexSort::@return
  __breturn:
    // [89] return 
    rts
}
  // init
// Initialize the program
init: {
    .label __4 = $23
    // Set the x-positions & pointers
    .label xp = $a
    .label sx = 9
    .label ss = $c
    // [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta D011
    // [91] call plexInit 
  // Initialize the multiplexer
    // [105] phi from init to plexInit [phi:init->plexInit]
  plexInit_from_init:
    jsr plexInit
    // [92] phi from init to init::@1 [phi:init->init::@1]
  __b1_from_init:
    // [92] phi (word) init::xp#2 = (word) $20 [phi:init->init::@1#0] -- vwuz1=vwuc1 
    lda #<$20
    sta.z xp
    lda #>$20
    sta.z xp+1
    // [92] phi (byte) init::sx#2 = (byte) 0 [phi:init->init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z sx
    jmp __b1
    // [92] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  __b1_from___b1:
    // [92] phi (word) init::xp#2 = (word) init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
    // [92] phi (byte) init::sx#2 = (byte) init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp __b1
    // init::@1
  __b1:
    // [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #SPRITE/$40
    ldy.z sx
    sta PLEX_PTR,y
    // [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z sx
    asl
    sta.z __4
    // [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy.z __4
    lda.z xp
    sta PLEX_XPOS,y
    lda.z xp+1
    sta PLEX_XPOS+1,y
    // [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9 -- vwuz1=vwuz1_plus_vbuc1 
    lda #9
    clc
    adc.z xp
    sta.z xp
    bcc !+
    inc.z xp+1
  !:
    // [97] (byte) init::sx#1 ← ++ (byte) init::sx#2 -- vbuz1=_inc_vbuz1 
    inc.z sx
    // [98] if((byte) init::sx#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z sx
    bne __b1_from___b1
    jmp __b2
    // init::@2
  __b2:
    // [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Enable & initialize sprites
    lda #$ff
    sta SPRITES_ENABLE
    // [100] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  __b3_from___b2:
    // [100] phi (byte) init::ss#2 = (byte) 0 [phi:init::@2->init::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ss
    jmp __b3
    // [100] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  __b3_from___b3:
    // [100] phi (byte) init::ss#2 = (byte) init::ss#1 [phi:init::@3->init::@3#0] -- register_copy 
    jmp __b3
    // init::@3
  __b3:
    // [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #GREEN
    ldy.z ss
    sta SPRITES_COLS,y
    // [102] (byte) init::ss#1 ← ++ (byte) init::ss#2 -- vbuz1=_inc_vbuz1 
    inc.z ss
    // [103] if((byte) init::ss#1!=(byte) 8) goto init::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z ss
    bne __b3_from___b3
    jmp __breturn
    // init::@return
  __breturn:
    // [104] return 
    rts
}
  // plexInit
// Initialize the multiplexer data structures
plexInit: {
    .label i = $d
    // [106] phi from plexInit to plexInit::plexSetScreen1 [phi:plexInit->plexInit::plexSetScreen1]
  plexSetScreen1_from_plexInit:
    jmp plexSetScreen1
    // plexInit::plexSetScreen1
  plexSetScreen1:
    // [107] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
  __b1_from_plexSetScreen1:
    // [107] phi (byte) plexInit::i#2 = (byte) 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [107] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
  __b1_from___b1:
    // [107] phi (byte) plexInit::i#2 = (byte) plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    jmp __b1
    // plexInit::@1
  __b1:
    // [108] *((const byte*) PLEX_SORTED_IDX + (byte) plexInit::i#2) ← (byte) plexInit::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta PLEX_SORTED_IDX,y
    // [109] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [110] if((byte) plexInit::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto plexInit::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // plexInit::@return
  __breturn:
    // [111] return 
    rts
}
  // File Data
  // The x-positions of the multiplexer sprites (0x000-0x1ff)
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  // The y-positions of the multiplexer sprites.
  PLEX_YPOS: .fill PLEX_COUNT, 0
  // The sprite pointers for the multiplexed sprites
  PLEX_PTR: .fill PLEX_COUNT, 0
  // Indexes of the plex-sprites sorted by sprite y-position. Each call to plexSort() will fix the sorting if changes to the Y-positions have ruined it.
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
  // Contains the Y-position where each sprite is free again. PLEX_FREE_YPOS[s] holds the Y-position where sprite s is free to use again.
  PLEX_FREE_YPOS: .fill 8, 0
  .align $100
YSIN:
.var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = SPRITE "SPRITE"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) plex_show_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) plex_sprite_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) plex_sprite_msb ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) plex_free_next ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2 [ loop::sin_idx#6 ] ( main:7::loop:12 [ loop::sin_idx#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Statement [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:7::loop:12 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ loop::sy#2 loop::sy#1 ]
Statement [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:7::loop:12 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] { }  ) always clobbers reg byte a 
Statement [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ loop::ss#5 loop::ss#1 ]
Statement [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ loop::ss#5 loop::ss#1 ]
Statement [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ loop::sin_idx#1 ] ( main:7::loop:12 [ loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a 
Statement [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:5 [ loop::ss#5 loop::ss#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ]
Statement [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte y 
Statement [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ]
Statement [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] { }  ) always clobbers reg byte y 
Statement [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 ] { }  ) always clobbers reg byte a 
Statement [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 plexShowSprite::$2 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 plexShowSprite::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ plexShowSprite::$11 ]
Statement [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$11 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$11 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:26 [ plexShowSprite::$11 ]
Statement [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$3 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$3 ] { }  ) always clobbers reg byte a 
Statement [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$9 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$9 ] { }  ) always clobbers reg byte a 
Statement [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [62] (volatile byte) plex_sprite_msb ← (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ plexSort::m#2 plexSort::m#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ plexSort::nxt_idx#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ plexSort::nxt_y#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
Statement [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] { }  ) always clobbers reg byte a 
Statement [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 ] { }  ) always clobbers reg byte a 
Statement [80] (volatile byte) plex_show_idx ← (byte) 0 [ plex_show_idx ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx ] { }  ) always clobbers reg byte a 
Statement [81] (volatile byte) plex_sprite_idx ← (byte) 0 [ plex_show_idx plex_sprite_idx ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx ] { }  ) always clobbers reg byte a 
Statement [82] (volatile byte) plex_sprite_msb ← (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb ] { }  ) always clobbers reg byte a 
Statement [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
Statement [88] (volatile byte) plex_free_next ← (byte) 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40 [ init::sx#2 init::xp#2 ] ( main:7::init:10 [ init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ init::sx#2 init::sx#1 ]
Statement [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1 [ init::sx#2 init::xp#2 init::$4 ] ( main:7::init:10 [ init::sx#2 init::xp#2 init::$4 ] { }  ) always clobbers reg byte a 
Statement [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:7::init:10 [ init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9 [ init::sx#2 init::xp#1 ] ( main:7::init:10 [ init::sx#2 init::xp#1 ] { }  ) always clobbers reg byte a 
Statement [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN [ init::ss#2 ] ( main:7::init:10 [ init::ss#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ init::ss#2 init::ss#1 ]
Statement [1] (volatile byte) plex_show_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) plex_sprite_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) plex_sprite_msb ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) plex_free_next ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2 [ loop::sin_idx#6 ] ( main:7::loop:12 [ loop::sin_idx#6 ] { }  ) always clobbers reg byte a 
Statement [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:7::loop:12 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] { }  ) always clobbers reg byte a 
Statement [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:7::loop:12 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] { }  ) always clobbers reg byte a 
Statement [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] { }  ) always clobbers reg byte a 
Statement [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] { }  ) always clobbers reg byte y 
Statement [37] if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] { }  ) always clobbers reg byte a 
Statement [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ loop::sin_idx#1 ] ( main:7::loop:12 [ loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a 
Statement [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte x reg byte y 
Statement [41] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:21 [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Statement [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte y 
Statement [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] { }  ) always clobbers reg byte y 
Statement [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 ] { }  ) always clobbers reg byte a 
Statement [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 plexShowSprite::$2 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 plexShowSprite::$2 ] { }  ) always clobbers reg byte a 
Statement [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$11 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$11 ] { }  ) always clobbers reg byte y 
Statement [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$3 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$3 ] { }  ) always clobbers reg byte a 
Statement [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$9 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$9 ] { }  ) always clobbers reg byte a 
Statement [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [62] (volatile byte) plex_sprite_msb ← (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [69] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] { }  ) always clobbers reg byte a 
Statement [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] { }  ) always clobbers reg byte a 
Statement [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] { }  ) always clobbers reg byte a 
Statement [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 ] { }  ) always clobbers reg byte a 
Statement [80] (volatile byte) plex_show_idx ← (byte) 0 [ plex_show_idx ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx ] { }  ) always clobbers reg byte a 
Statement [81] (volatile byte) plex_sprite_idx ← (byte) 0 [ plex_show_idx plex_sprite_idx ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx ] { }  ) always clobbers reg byte a 
Statement [82] (volatile byte) plex_sprite_msb ← (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb ] { }  ) always clobbers reg byte a 
Statement [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] { }  ) always clobbers reg byte a 
Statement [88] (volatile byte) plex_free_next ← (byte) 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40 [ init::sx#2 init::xp#2 ] ( main:7::init:10 [ init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1 [ init::sx#2 init::xp#2 init::$4 ] ( main:7::init:10 [ init::sx#2 init::xp#2 init::$4 ] { }  ) always clobbers reg byte a 
Statement [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:7::init:10 [ init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9 [ init::sx#2 init::xp#1 ] ( main:7::init:10 [ init::sx#2 init::xp#1 ] { }  ) always clobbers reg byte a 
Statement [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN [ init::ss#2 ] ( main:7::init:10 [ init::ss#2 ] { }  ) always clobbers reg byte a 
Statement [1] (volatile byte) plex_show_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) plex_sprite_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) plex_sprite_msb ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] (volatile byte) plex_free_next ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2 [ loop::sin_idx#6 ] ( main:7::loop:12 [ loop::sin_idx#6 ] { }  ) always clobbers reg byte a 
Statement [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:7::loop:12 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] { }  ) always clobbers reg byte a 
Statement [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:7::loop:12 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::$5 ] { }  ) always clobbers reg byte a 
Statement [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 ] { }  ) always clobbers reg byte a 
Statement [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#5 loop::plexFreeNextYpos1_return#0 ] { }  ) always clobbers reg byte y 
Statement [37] if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] ( main:7::loop:12 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next loop::sin_idx#1 loop::ss#1 ] { }  ) always clobbers reg byte a 
Statement [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ loop::sin_idx#1 ] ( main:7::loop:12 [ loop::sin_idx#1 ] { }  ) always clobbers reg byte a 
Statement [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a 
Statement [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte x reg byte y 
Statement [41] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::plexFreeAdd1_ypos#0 ] { }  ) always clobbers reg byte y 
Statement [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte y 
Statement [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] { }  ) always clobbers reg byte y 
Statement [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 ] { }  ) always clobbers reg byte a 
Statement [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 plexShowSprite::$2 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::plex_sprite_idx2#0 plexShowSprite::$11 plexShowSprite::$2 ] { }  ) always clobbers reg byte a 
Statement [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$11 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$11 ] { }  ) always clobbers reg byte y 
Statement [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$3 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$3 ] { }  ) always clobbers reg byte a 
Statement [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$9 ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next plexShowSprite::$9 ] { }  ) always clobbers reg byte a 
Statement [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [62] (volatile byte) plex_sprite_msb ← (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#5 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [69] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] { }  ) always clobbers reg byte a 
Statement [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] { }  ) always clobbers reg byte a 
Statement [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] { }  ) always clobbers reg byte a 
Statement [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plexSort::m#2 ] { }  ) always clobbers reg byte a 
Statement [80] (volatile byte) plex_show_idx ← (byte) 0 [ plex_show_idx ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx ] { }  ) always clobbers reg byte a 
Statement [81] (volatile byte) plex_sprite_idx ← (byte) 0 [ plex_show_idx plex_sprite_idx ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx ] { }  ) always clobbers reg byte a 
Statement [82] (volatile byte) plex_sprite_msb ← (byte) 1 [ plex_show_idx plex_sprite_idx plex_sprite_msb ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb ] { }  ) always clobbers reg byte a 
Statement [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plexSort::plexFreePrepare1_s#2 ] { }  ) always clobbers reg byte a 
Statement [88] (volatile byte) plex_free_next ← (byte) 0 [ plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] ( main:7::loop:12::plexSort:26 [ loop::sin_idx#1 plex_show_idx plex_sprite_idx plex_sprite_msb plex_free_next ] { }  ) always clobbers reg byte a 
Statement [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40 [ init::sx#2 init::xp#2 ] ( main:7::init:10 [ init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1 [ init::sx#2 init::xp#2 init::$4 ] ( main:7::init:10 [ init::sx#2 init::xp#2 init::$4 ] { }  ) always clobbers reg byte a 
Statement [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:7::init:10 [ init::sx#2 init::xp#2 ] { }  ) always clobbers reg byte a 
Statement [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9 [ init::sx#2 init::xp#1 ] ( main:7::init:10 [ init::sx#2 init::xp#1 ] { }  ) always clobbers reg byte a 
Statement [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff [ ] ( main:7::init:10 [ ] { }  ) always clobbers reg byte a 
Statement [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN [ init::ss#2 ] ( main:7::init:10 [ init::ss#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ loop::sy#2 loop::sy#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ loop::ss#5 loop::ss#1 ] : zp[1]:5 , 
Potential registers zp[1]:6 [ plexSort::m#2 plexSort::m#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ init::sx#2 init::sx#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[2]:10 [ init::xp#2 init::xp#1 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ init::ss#2 init::ss#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ plexInit::i#2 plexInit::i#1 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ plex_show_idx ] : zp[1]:14 , 
Potential registers zp[1]:15 [ plex_sprite_idx ] : zp[1]:15 , 
Potential registers zp[1]:16 [ plex_sprite_msb ] : zp[1]:16 , 
Potential registers zp[1]:17 [ plex_free_next ] : zp[1]:17 , 
Potential registers zp[1]:18 [ loop::$5 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ loop::plexFreeNextYpos1_return#0 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ] : zp[1]:20 , 
Potential registers zp[1]:21 [ plexShowSprite::plexFreeAdd1_ypos#0 ] : zp[1]:21 , reg byte a , reg byte x , 
Potential registers zp[1]:22 [ plexShowSprite::plexFreeAdd1_$0 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ plexShowSprite::plexFreeAdd1_$1 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ plexShowSprite::plexFreeAdd1_$2 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ plexShowSprite::xpos_idx#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ plexShowSprite::$11 ] : zp[1]:26 , reg byte x , 
Potential registers zp[1]:27 [ plexShowSprite::$2 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ plexShowSprite::$3 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ plexShowSprite::$9 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ plexShowSprite::$5 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ plexShowSprite::$6 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ plexSort::nxt_idx#0 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ plexSort::nxt_y#0 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ plexSort::s#2 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ init::$4 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plexSort] 36,166,672.83: zp[1]:7 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] 3,000,003: zp[1]:8 [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ] 2,000,002: zp[1]:34 [ plexSort::s#2 ] 1,916,668.58: zp[1]:6 [ plexSort::m#2 plexSort::m#1 ] 1,500,000.38: zp[1]:33 [ plexSort::nxt_y#0 ] 300,000.3: zp[1]:32 [ plexSort::nxt_idx#0 ] 
Uplift Scope [plexShowSprite] 200,002: zp[1]:22 [ plexShowSprite::plexFreeAdd1_$0 ] 200,002: zp[1]:23 [ plexShowSprite::plexFreeAdd1_$1 ] 200,002: zp[1]:24 [ plexShowSprite::plexFreeAdd1_$2 ] 200,002: zp[1]:25 [ plexShowSprite::xpos_idx#0 ] 200,002: zp[1]:27 [ plexShowSprite::$2 ] 200,002: zp[1]:28 [ plexShowSprite::$3 ] 200,002: zp[1]:29 [ plexShowSprite::$9 ] 200,002: zp[1]:30 [ plexShowSprite::$5 ] 200,002: zp[1]:31 [ plexShowSprite::$6 ] 150,001.5: zp[1]:21 [ plexShowSprite::plexFreeAdd1_ypos#0 ] 100,001: zp[1]:26 [ plexShowSprite::$11 ] 25,000.25: zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ] 
Uplift Scope [loop] 55,001: zp[1]:19 [ loop::plexFreeNextYpos1_return#0 ] 25,002.5: zp[1]:4 [ loop::sy#2 loop::sy#1 ] 24,171.33: zp[1]:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] 20,002: zp[1]:18 [ loop::$5 ] 18,335.17: zp[1]:5 [ loop::ss#5 loop::ss#1 ] 467.13: zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Uplift Scope [] 13,261.07: zp[1]:16 [ plex_sprite_msb ] 10,625.17: zp[1]:14 [ plex_show_idx ] 9,111.27: zp[1]:15 [ plex_sprite_idx ] 8,421.24: zp[1]:17 [ plex_free_next ] 
Uplift Scope [plexInit] 35,003.5: zp[1]:13 [ plexInit::i#2 plexInit::i#1 ] 
Uplift Scope [init] 3,003: zp[1]:12 [ init::ss#2 init::ss#1 ] 2,302.3: zp[1]:9 [ init::sx#2 init::sx#1 ] 2,002: zp[1]:35 [ init::$4 ] 1,418.08: zp[2]:10 [ init::xp#2 init::xp#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [main] 

Uplifting [plexSort] best 82790 combination reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] reg byte x [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ] zp[1]:34 [ plexSort::s#2 ] zp[1]:6 [ plexSort::m#2 plexSort::m#1 ] zp[1]:33 [ plexSort::nxt_y#0 ] zp[1]:32 [ plexSort::nxt_idx#0 ] 
Limited combination testing to 10 combinations of 972 possible.
Uplifting [plexShowSprite] best 82780 combination reg byte a [ plexShowSprite::plexFreeAdd1_$0 ] reg byte x [ plexShowSprite::plexFreeAdd1_$1 ] zp[1]:24 [ plexShowSprite::plexFreeAdd1_$2 ] zp[1]:25 [ plexShowSprite::xpos_idx#0 ] zp[1]:27 [ plexShowSprite::$2 ] zp[1]:28 [ plexShowSprite::$3 ] zp[1]:29 [ plexShowSprite::$9 ] zp[1]:30 [ plexShowSprite::$5 ] zp[1]:31 [ plexShowSprite::$6 ] zp[1]:21 [ plexShowSprite::plexFreeAdd1_ypos#0 ] zp[1]:26 [ plexShowSprite::$11 ] zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ] 
Limited combination testing to 10 combinations of 1572864 possible.
Uplifting [loop] best 81580 combination zp[1]:19 [ loop::plexFreeNextYpos1_return#0 ] reg byte y [ loop::sy#2 loop::sy#1 ] zp[1]:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] zp[1]:18 [ loop::$5 ] zp[1]:5 [ loop::ss#5 loop::ss#1 ] zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Limited combination testing to 10 combinations of 144 possible.
Uplifting [] best 81580 combination zp[1]:16 [ plex_sprite_msb ] zp[1]:14 [ plex_show_idx ] zp[1]:15 [ plex_sprite_idx ] zp[1]:17 [ plex_free_next ] 
Uplifting [plexInit] best 81460 combination reg byte x [ plexInit::i#2 plexInit::i#1 ] 
Uplifting [init] best 81210 combination reg byte x [ init::ss#2 init::ss#1 ] reg byte x [ init::sx#2 init::sx#1 ] zp[1]:35 [ init::$4 ] zp[2]:10 [ init::xp#2 init::xp#1 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [MOS6526_CIA] best 81210 combination 
Uplifting [main] best 81210 combination 
Attempting to uplift remaining variables inzp[1]:34 [ plexSort::s#2 ]
Uplifting [plexSort] best 80610 combination reg byte x [ plexSort::s#2 ] 
Attempting to uplift remaining variables inzp[1]:6 [ plexSort::m#2 plexSort::m#1 ]
Uplifting [plexSort] best 80610 combination zp[1]:6 [ plexSort::m#2 plexSort::m#1 ] 
Attempting to uplift remaining variables inzp[1]:33 [ plexSort::nxt_y#0 ]
Uplifting [plexSort] best 80610 combination zp[1]:33 [ plexSort::nxt_y#0 ] 
Attempting to uplift remaining variables inzp[1]:32 [ plexSort::nxt_idx#0 ]
Uplifting [plexSort] best 80610 combination zp[1]:32 [ plexSort::nxt_idx#0 ] 
Attempting to uplift remaining variables inzp[1]:24 [ plexShowSprite::plexFreeAdd1_$2 ]
Uplifting [plexShowSprite] best 80606 combination reg byte a [ plexShowSprite::plexFreeAdd1_$2 ] 
Attempting to uplift remaining variables inzp[1]:25 [ plexShowSprite::xpos_idx#0 ]
Uplifting [plexShowSprite] best 80600 combination reg byte a [ plexShowSprite::xpos_idx#0 ] 
Attempting to uplift remaining variables inzp[1]:27 [ plexShowSprite::$2 ]
Uplifting [plexShowSprite] best 80594 combination reg byte a [ plexShowSprite::$2 ] 
Attempting to uplift remaining variables inzp[1]:28 [ plexShowSprite::$3 ]
Uplifting [plexShowSprite] best 80588 combination reg byte a [ plexShowSprite::$3 ] 
Attempting to uplift remaining variables inzp[1]:29 [ plexShowSprite::$9 ]
Uplifting [plexShowSprite] best 80582 combination reg byte a [ plexShowSprite::$9 ] 
Attempting to uplift remaining variables inzp[1]:30 [ plexShowSprite::$5 ]
Uplifting [plexShowSprite] best 80576 combination reg byte x [ plexShowSprite::$5 ] 
Attempting to uplift remaining variables inzp[1]:31 [ plexShowSprite::$6 ]
Uplifting [plexShowSprite] best 80572 combination reg byte a [ plexShowSprite::$6 ] 
Attempting to uplift remaining variables inzp[1]:21 [ plexShowSprite::plexFreeAdd1_ypos#0 ]
Uplifting [plexShowSprite] best 80563 combination reg byte a [ plexShowSprite::plexFreeAdd1_ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:26 [ plexShowSprite::$11 ]
Uplifting [plexShowSprite] best 80556 combination reg byte x [ plexShowSprite::$11 ] 
Attempting to uplift remaining variables inzp[1]:19 [ loop::plexFreeNextYpos1_return#0 ]
Uplifting [loop] best 80556 combination zp[1]:19 [ loop::plexFreeNextYpos1_return#0 ] 
Attempting to uplift remaining variables inzp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ]
Uplifting [plexShowSprite] best 80556 combination zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Uplifting [loop] best 79826 combination reg byte x [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:18 [ loop::$5 ]
Uplifting [loop] best 79226 combination reg byte a [ loop::$5 ] 
Attempting to uplift remaining variables inzp[1]:5 [ loop::ss#5 loop::ss#1 ]
Uplifting [loop] best 79226 combination zp[1]:5 [ loop::ss#5 loop::ss#1 ] 
Attempting to uplift remaining variables inzp[1]:16 [ plex_sprite_msb ]
Uplifting [] best 79226 combination zp[1]:16 [ plex_sprite_msb ] 
Attempting to uplift remaining variables inzp[1]:14 [ plex_show_idx ]
Uplifting [] best 79226 combination zp[1]:14 [ plex_show_idx ] 
Attempting to uplift remaining variables inzp[1]:15 [ plex_sprite_idx ]
Uplifting [] best 79226 combination zp[1]:15 [ plex_sprite_idx ] 
Attempting to uplift remaining variables inzp[1]:17 [ plex_free_next ]
Uplifting [] best 79226 combination zp[1]:17 [ plex_free_next ] 
Attempting to uplift remaining variables inzp[1]:35 [ init::$4 ]
Uplifting [init] best 79186 combination reg byte a [ init::$4 ] 
Attempting to uplift remaining variables inzp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Uplifting [loop] best 79186 combination zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Coalescing zero page register [ zp[1]:19 [ loop::plexFreeNextYpos1_return#0 ] ] with [ zp[1]:6 [ plexSort::m#2 plexSort::m#1 ] ]
Coalescing zero page register [ zp[1]:32 [ plexSort::nxt_idx#0 ] ] with [ zp[1]:20 [ plexShowSprite::plex_sprite_idx2#0 ] ]
Allocated (was zp[1]:5) zp[1]:3 [ loop::ss#5 loop::ss#1 ]
Allocated (was zp[2]:10) zp[2]:4 [ init::xp#2 init::xp#1 ]
Allocated (was zp[1]:14) zp[1]:6 [ plex_show_idx ]
Allocated (was zp[1]:15) zp[1]:7 [ plex_sprite_idx ]
Allocated (was zp[1]:16) zp[1]:8 [ plex_sprite_msb ]
Allocated (was zp[1]:17) zp[1]:9 [ plex_free_next ]
Allocated (was zp[1]:19) zp[1]:10 [ loop::plexFreeNextYpos1_return#0 plexSort::m#2 plexSort::m#1 ]
Allocated (was zp[1]:32) zp[1]:11 [ plexSort::nxt_idx#0 plexShowSprite::plex_sprite_idx2#0 ]
Allocated (was zp[1]:33) zp[1]:12 [ plexSort::nxt_y#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A simple usage of the flexible sprite multiplexer routine
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label D011 = $d011
  .const VIC_RST8 = $80
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  // The number of sprites in the multiplexer
  .const PLEX_COUNT = $20
  // Location of screen & sprites
  .label SCREEN = $400
  .label SPRITE = $2000
  // The address of the sprite pointers on the current screen (screen+0x3f8).
  .label PLEX_SCREEN_PTR = SCREEN+$3f8
  .label plex_show_idx = 6
  .label plex_sprite_idx = 7
  .label plex_sprite_msb = 8
  .label plex_free_next = 9
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) plex_show_idx ← (byte) 0 -- vbuz1=vbuc1 
  // The index in the PLEX tables of the next sprite to show
  lda #0
  sta.z plex_show_idx
  // [2] (volatile byte) plex_sprite_idx ← (byte) 0 -- vbuz1=vbuc1 
  // The index the next sprite to use for showing (sprites are used round-robin)
  lda #0
  sta.z plex_sprite_idx
  // [3] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
  // The MSB bit of the next sprite to use for showing
  lda #1
  sta.z plex_sprite_msb
  jmp __b2
  // @2
__b2:
  // [4] (volatile byte) plex_free_next ← (byte) 0 -- vbuz1=vbuc1 
  // The index of the sprite that is free next. Since sprites are used round-robin this moves forward each time a sprite is shown.
  lda #0
  sta.z plex_free_next
  jmp __b3
  // @3
__b3:
  // kickasm(location (const byte*) SPRITE) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
  // [6] phi from @3 to @4 [phi:@3->@4]
__b4_from___b3:
  jmp __b4
  // @4
__b4:
  // [7] call main 
  jsr main
  // [8] phi from @4 to @end [phi:@4->@end]
__bend_from___b4:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [10] call init 
    jsr init
    // [11] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [12] call loop 
    // [14] phi from main::@1 to loop [phi:main::@1->loop]
  loop_from___b1:
    jsr loop
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // loop
// The raster loop
loop: {
    // The current index into the y-sinus
    .label sin_idx = 2
    .label plexFreeNextYpos1_return = $a
    .label ss = 3
    // [15] phi from loop to loop::@1 [phi:loop->loop::@1]
  __b1_from_loop:
    // [15] phi (byte) loop::sin_idx#6 = (byte) 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    jmp __b1
    // loop::@1
  __b1:
    jmp __b2
    // loop::@2
  __b2:
    // [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    jmp __b3
    // loop::@3
  __b3:
    // [17] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [18] (byte) loop::y_idx#3 ← (byte) loop::sin_idx#6 -- vbuxx=vbuz1 
    ldx.z sin_idx
    // [19] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
  __b4_from___b3:
    // [19] phi (byte) loop::sy#2 = (byte) 0 [phi:loop::@3->loop::@4#0] -- vbuyy=vbuc1 
    ldy #0
    // [19] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#3 [phi:loop::@3->loop::@4#1] -- register_copy 
    jmp __b4
    // [19] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
  __b4_from___b4:
    // [19] phi (byte) loop::sy#2 = (byte) loop::sy#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [19] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    jmp __b4
    // loop::@4
  __b4:
    // [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda YSIN,x
    sta PLEX_YPOS,y
    // [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[8]
    // [22] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 -- vbuyy=_inc_vbuyy 
    iny
    // [23] if((byte) loop::sy#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@4 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLEX_COUNT-1+1
    bne __b4_from___b4
    jmp __b5
    // loop::@5
  __b5:
    // [24] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z sin_idx
    // [25] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [26] call plexSort 
    // [65] phi from loop::@5 to plexSort [phi:loop::@5->plexSort]
  plexSort_from___b5:
    jsr plexSort
    jmp __b11
    // loop::@11
  __b11:
    // [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp __b6
    // loop::@6
  __b6:
    // [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #VIC_RST8
    and D011
    // [29] if((byte~) loop::$5!=(byte) 0) goto loop::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6
    // [30] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
  __b7_from___b6:
    // [30] phi (byte) loop::ss#5 = (byte) 0 [phi:loop::@6->loop::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ss
    jmp __b7
  // Show the sprites
    // [30] phi from loop::@12 to loop::@7 [phi:loop::@12->loop::@7]
  __b7_from___b12:
    // [30] phi (byte) loop::ss#5 = (byte) loop::ss#1 [phi:loop::@12->loop::@7#0] -- register_copy 
    jmp __b7
    // loop::@7
  __b7:
    // [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp plexFreeNextYpos1
    // loop::plexFreeNextYpos1
  plexFreeNextYpos1:
    // [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z plex_free_next
    lda PLEX_FREE_YPOS,y
    sta.z plexFreeNextYpos1_return
    jmp __b8
    // loop::@8
  __b8:
    // [33] if(*((const nomodify byte*) RASTER)<(byte) loop::plexFreeNextYpos1_return#0) goto loop::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z plexFreeNextYpos1_return
    bcc __b8
    jmp __b9
    // loop::@9
  __b9:
    // [34] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [35] call plexShowSprite 
    jsr plexShowSprite
    jmp __b12
    // loop::@12
  __b12:
    // [36] (byte) loop::ss#1 ← ++ (byte) loop::ss#5 -- vbuz1=_inc_vbuz1 
    inc.z ss
    // [37] if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z ss
    bne __b7_from___b12
    jmp __b10
    // loop::@10
  __b10:
    // [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [15] phi from loop::@10 to loop::@1 [phi:loop::@10->loop::@1]
  __b1_from___b10:
    // [15] phi (byte) loop::sin_idx#6 = (byte) loop::sin_idx#1 [phi:loop::@10->loop::@1#0] -- register_copy 
    jmp __b1
}
  // plexShowSprite
// Show the next sprite.
// plexSort() prepares showing the sprites
plexShowSprite: {
    .label plex_sprite_idx2 = $b
    // [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plex_sprite_idx
    asl
    sta.z plex_sprite_idx2
    // [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) -- vbuaa=pbuc1_derefidx_(pbuc2_derefidx_vbuz1) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_YPOS,y
    // [41] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_sprite_idx2
    sta SPRITES_YPOS,y
    jmp plexFreeAdd1
    // plexShowSprite::plexFreeAdd1
  plexFreeAdd1:
    // [42] (byte~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 + (byte) $15 -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #$15
    // [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_free_next
    sta PLEX_FREE_YPOS,y
    // [44] (byte~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_free_next
    inx
    // [45] (byte~) plexShowSprite::plexFreeAdd1_$2 ← (byte~) plexShowSprite::plexFreeAdd1_$1 & (byte) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // [46] (volatile byte) plex_free_next ← (byte~) plexShowSprite::plexFreeAdd1_$2 -- vbuz1=vbuaa 
    sta.z plex_free_next
    jmp __b5
    // plexShowSprite::@5
  __b5:
    // [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_(pbuc3_derefidx_vbuz2) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_PTR,y
    ldx.z plex_sprite_idx
    sta PLEX_SCREEN_PTR,x
    // [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z plex_show_idx
    lda PLEX_SORTED_IDX,y
    // [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
    // [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) -- vbuaa=_lo_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS,x
    // [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_sprite_idx2
    sta SPRITES_XPOS,y
    // [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) -- vbuaa=_hi_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS+1,x
    // [53] if((byte~) plexShowSprite::$3!=(byte) 0) goto plexShowSprite::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1
    jmp __b3
    // plexShowSprite::@3
  __b3:
    // [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor.z plex_sprite_msb
    // [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
    jmp __b2
    // plexShowSprite::@2
  __b2:
    // [56] (byte~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_sprite_idx
    inx
    // [57] (byte~) plexShowSprite::$6 ← (byte~) plexShowSprite::$5 & (byte) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // [58] (volatile byte) plex_sprite_idx ← (byte~) plexShowSprite::$6 -- vbuz1=vbuaa 
    sta.z plex_sprite_idx
    // [59] (volatile byte) plex_show_idx ← ++ (volatile byte) plex_show_idx -- vbuz1=_inc_vbuz1 
    inc.z plex_show_idx
    // [60] (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z plex_sprite_msb
    // [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return -- vbuz1_neq_0_then_la1 
    lda.z plex_sprite_msb
    cmp #0
    bne __breturn
    jmp __b4
    // plexShowSprite::@4
  __b4:
    // [62] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    jmp __breturn
    // plexShowSprite::@return
  __breturn:
    // [63] return 
    rts
    // plexShowSprite::@1
  __b1:
    // [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora.z plex_sprite_msb
    sta SPRITES_XMSB
    jmp __b2
}
  // plexSort
// Ensure that the indices in PLEX_SORTED_IDX is sorted based on the y-positions in PLEX_YPOS
// Assumes that the positions are nearly sorted already (as each sprite just moves a bit)
// Uses an insertion sort:
// 1. Moves a marker (m) from the start to end of the array. Every time the marker moves forward all elements before the marker are sorted correctly.
// 2a. If the next element after the marker is larger that the current element
//     the marker can be moved forwards (as the sorting is correct).
// 2b. If the next element after the marker is smaller than the current element:
//     elements before the marker are shifted right one at a time until encountering one smaller than the current one.
//      It is then inserted at the spot. Now the marker can move forward.
plexSort: {
    .label nxt_idx = $b
    .label nxt_y = $c
    .label m = $a
    // [66] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
  __b1_from_plexSort:
    // [66] phi (byte) plexSort::m#2 = (byte) 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z m
    jmp __b1
    // [66] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
  __b1_from___b2:
    // [66] phi (byte) plexSort::m#2 = (byte) plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    jmp __b1
    // plexSort::@1
  __b1:
    // [67] (byte) plexSort::nxt_idx#0 ← *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::m#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z m
    lda PLEX_SORTED_IDX+1,y
    sta.z nxt_idx
    // [68] (byte) plexSort::nxt_y#0 ← *((const byte*) PLEX_YPOS + (byte) plexSort::nxt_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z nxt_idx
    lda PLEX_YPOS,y
    sta.z nxt_y
    // [69] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2 -- vbuz1_ge_pbuc1_derefidx_(pbuc2_derefidx_vbuz2)_then_la1 
    lda.z nxt_y
    ldx.z m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs __b2
    jmp __b5
    // plexSort::@5
  __b5:
    // [70] (byte) plexSort::s#6 ← (byte) plexSort::m#2 -- vbuxx=vbuz1 
    ldx.z m
    // [71] phi from plexSort::@5 plexSort::@7 to plexSort::@3 [phi:plexSort::@5/plexSort::@7->plexSort::@3]
  __b3_from___b5:
  __b3_from___b7:
    // [71] phi (byte) plexSort::s#3 = (byte) plexSort::s#6 [phi:plexSort::@5/plexSort::@7->plexSort::@3#0] -- register_copy 
    jmp __b3
    // plexSort::@3
  __b3:
    // [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PLEX_SORTED_IDX,x
    sta PLEX_SORTED_IDX+1,x
    // [73] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 -- vbuxx=_dec_vbuxx 
    dex
    // [74] if((byte) plexSort::s#1==(byte) $ff) goto plexSort::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #$ff
    beq __b4
    jmp __b7
    // plexSort::@7
  __b7:
    // [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3 -- vbuz1_lt_pbuc1_derefidx_(pbuc2_derefidx_vbuxx)_then_la1 
    lda.z nxt_y
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc __b3_from___b7
    jmp __b4
    // plexSort::@4
  __b4:
    // [76] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 -- vbuxx=_inc_vbuxx 
    inx
    // [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z nxt_idx
    sta PLEX_SORTED_IDX,x
    jmp __b2
    // plexSort::@2
  __b2:
    // [78] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 -- vbuz1=_inc_vbuz1 
    inc.z m
    // [79] if((byte) plexSort::m#1!=(const nomodify byte) PLEX_COUNT-(byte) 2+(byte) 1) goto plexSort::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-2+1
    cmp.z m
    bne __b1_from___b2
    jmp __b6
    // plexSort::@6
  __b6:
    // [80] (volatile byte) plex_show_idx ← (byte) 0 -- vbuz1=vbuc1 
    // Prepare for showing the sprites
    lda #0
    sta.z plex_show_idx
    // [81] (volatile byte) plex_sprite_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_sprite_idx
    // [82] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // [83] phi from plexSort::@6 to plexSort::plexFreePrepare1 [phi:plexSort::@6->plexSort::plexFreePrepare1]
  plexFreePrepare1_from___b6:
    jmp plexFreePrepare1
    // plexSort::plexFreePrepare1
  plexFreePrepare1:
    // [84] phi from plexSort::plexFreePrepare1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1]
  plexFreePrepare1___b1_from_plexFreePrepare1:
    // [84] phi (byte) plexSort::plexFreePrepare1_s#2 = (byte) 0 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp plexFreePrepare1___b1
    // [84] phi from plexSort::plexFreePrepare1_@1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1]
  plexFreePrepare1___b1_from_plexFreePrepare1___b1:
    // [84] phi (byte) plexSort::plexFreePrepare1_s#2 = (byte) plexSort::plexFreePrepare1_s#1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1#0] -- register_copy 
    jmp plexFreePrepare1___b1
    // plexSort::plexFreePrepare1_@1
  plexFreePrepare1___b1:
    // [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PLEX_FREE_YPOS,x
    // [86] (byte) plexSort::plexFreePrepare1_s#1 ← ++ (byte) plexSort::plexFreePrepare1_s#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] if((byte) plexSort::plexFreePrepare1_s#1!=(byte) 8) goto plexSort::plexFreePrepare1_@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne plexFreePrepare1___b1_from_plexFreePrepare1___b1
    jmp plexFreePrepare1___b2
    // plexSort::plexFreePrepare1_@2
  plexFreePrepare1___b2:
    // [88] (volatile byte) plex_free_next ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z plex_free_next
    jmp __breturn
    // plexSort::@return
  __breturn:
    // [89] return 
    rts
}
  // init
// Initialize the program
init: {
    // Set the x-positions & pointers
    .label xp = 4
    // [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta D011
    // [91] call plexInit 
  // Initialize the multiplexer
    // [105] phi from init to plexInit [phi:init->plexInit]
  plexInit_from_init:
    jsr plexInit
    // [92] phi from init to init::@1 [phi:init->init::@1]
  __b1_from_init:
    // [92] phi (word) init::xp#2 = (word) $20 [phi:init->init::@1#0] -- vwuz1=vwuc1 
    lda #<$20
    sta.z xp
    lda #>$20
    sta.z xp+1
    // [92] phi (byte) init::sx#2 = (byte) 0 [phi:init->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [92] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  __b1_from___b1:
    // [92] phi (word) init::xp#2 = (word) init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
    // [92] phi (byte) init::sx#2 = (byte) init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp __b1
    // init::@1
  __b1:
    // [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #SPRITE/$40
    sta PLEX_PTR,x
    // [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z xp
    sta PLEX_XPOS,y
    lda.z xp+1
    sta PLEX_XPOS+1,y
    // [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9 -- vwuz1=vwuz1_plus_vbuc1 
    lda #9
    clc
    adc.z xp
    sta.z xp
    bcc !+
    inc.z xp+1
  !:
    // [97] (byte) init::sx#1 ← ++ (byte) init::sx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [98] if((byte) init::sx#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1_from___b1
    jmp __b2
    // init::@2
  __b2:
    // [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Enable & initialize sprites
    lda #$ff
    sta SPRITES_ENABLE
    // [100] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  __b3_from___b2:
    // [100] phi (byte) init::ss#2 = (byte) 0 [phi:init::@2->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [100] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  __b3_from___b3:
    // [100] phi (byte) init::ss#2 = (byte) init::ss#1 [phi:init::@3->init::@3#0] -- register_copy 
    jmp __b3
    // init::@3
  __b3:
    // [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
    // [102] (byte) init::ss#1 ← ++ (byte) init::ss#2 -- vbuxx=_inc_vbuxx 
    inx
    // [103] if((byte) init::ss#1!=(byte) 8) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3_from___b3
    jmp __breturn
    // init::@return
  __breturn:
    // [104] return 
    rts
}
  // plexInit
// Initialize the multiplexer data structures
plexInit: {
    // [106] phi from plexInit to plexInit::plexSetScreen1 [phi:plexInit->plexInit::plexSetScreen1]
  plexSetScreen1_from_plexInit:
    jmp plexSetScreen1
    // plexInit::plexSetScreen1
  plexSetScreen1:
    // [107] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
  __b1_from_plexSetScreen1:
    // [107] phi (byte) plexInit::i#2 = (byte) 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [107] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
  __b1_from___b1:
    // [107] phi (byte) plexInit::i#2 = (byte) plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    jmp __b1
    // plexInit::@1
  __b1:
    // [108] *((const byte*) PLEX_SORTED_IDX + (byte) plexInit::i#2) ← (byte) plexInit::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta PLEX_SORTED_IDX,x
    // [109] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [110] if((byte) plexInit::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto plexInit::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1_from___b1
    jmp __breturn
    // plexInit::@return
  __breturn:
    // [111] return 
    rts
}
  // File Data
  // The x-positions of the multiplexer sprites (0x000-0x1ff)
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  // The y-positions of the multiplexer sprites.
  PLEX_YPOS: .fill PLEX_COUNT, 0
  // The sprite pointers for the multiplexed sprites
  PLEX_PTR: .fill PLEX_COUNT, 0
  // Indexes of the plex-sprites sorted by sprite y-position. Each call to plexSort() will fix the sorting if changes to the Y-positions have ruined it.
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
  // Contains the Y-position where each sprite is free again. PLEX_FREE_YPOS[s] holds the Y-position where sprite s is free to use again.
  PLEX_FREE_YPOS: .fill 8, 0
  .align $100
YSIN:
.var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = SPRITE "SPRITE"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b11
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp plexFreeNextYpos1
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b10
Removing instruction jmp plexFreeAdd1
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp plexFreePrepare1
Removing instruction jmp plexFreePrepare1___b1
Removing instruction jmp plexFreePrepare1___b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp plexSetScreen1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldy.z nxt_idx with TAY
Removing instruction lda.z nxt_y
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b4 with __b4
Replacing label __b7_from___b12 with __b7
Replacing label __b1 with __b2
Replacing label __b3_from___b7 with __b3
Replacing label __b1_from___b2 with __b1
Replacing label plexFreePrepare1___b1_from_plexFreePrepare1___b1 with plexFreePrepare1___b1
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b3 with __b3
Replacing label __b1_from___b1 with __b1
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction __bend_from___b4:
Removing instruction __b1_from_main:
Removing instruction loop_from___b1:
Removing instruction __b1:
Removing instruction __b4_from___b4:
Removing instruction __b7_from___b12:
Removing instruction __b1_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __b3_from___b7:
Removing instruction plexFreePrepare1_from___b6:
Removing instruction plexFreePrepare1___b1_from_plexFreePrepare1:
Removing instruction plexFreePrepare1___b1_from_plexFreePrepare1___b1:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b3:
Removing instruction plexSetScreen1_from_plexInit:
Removing instruction __b1_from_plexSetScreen1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __b4:
Removing instruction __bend:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_loop:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction __b5:
Removing instruction plexSort_from___b5:
Removing instruction __b11:
Removing instruction __b7_from___b6:
Removing instruction plexFreeNextYpos1:
Removing instruction __b9:
Removing instruction __b12:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction plexFreeAdd1:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b1_from_plexSort:
Removing instruction __b5:
Removing instruction __b7:
Removing instruction __b6:
Removing instruction plexFreePrepare1:
Removing instruction plexFreePrepare1___b2:
Removing instruction __breturn:
Removing instruction plexInit_from_init:
Removing instruction __b1_from_init:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __breturn:
Removing instruction plexSetScreen1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp plexFreePrepare1___b1
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldx.z m
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte*) BORDERCOL = (byte*) 53280
(const nomodify byte*) D011 = (byte*) 53265
(const nomodify byte) GREEN = (byte) 5
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(const nomodify byte) PLEX_COUNT = (byte) $20
(const byte*) PLEX_FREE_YPOS[(number) 8]  = { fill( 8, 0) }
(const byte*) PLEX_PTR[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(byte*) PLEX_SCREEN_PTR
(const byte*) PLEX_SCREEN_PTR#1 PLEX_SCREEN_PTR = (const byte*) SCREEN+(word) $3f8
(const byte*) PLEX_SORTED_IDX[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(const word*) PLEX_XPOS[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(const byte*) PLEX_YPOS[(const nomodify byte) PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
(const nomodify byte*) RASTER = (byte*) 53266
(const byte*) SCREEN = (byte*) 1024
(const byte*) SPRITE = (byte*) 8192
(const nomodify byte*) SPRITES_COLS = (byte*) 53287
(const nomodify byte*) SPRITES_ENABLE = (byte*) 53269
(const nomodify byte*) SPRITES_XMSB = (byte*) 53264
(const nomodify byte*) SPRITES_XPOS = (byte*) 53248
(const nomodify byte*) SPRITES_YPOS = (byte*) 53249
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte) VIC_RST8 = (byte) $80
(const byte*) YSIN[(number) $100]  = kickasm {{ .var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
(void()) init()
(byte~) init::$4 reg byte a 2002.0
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@return
(byte) init::ss
(byte) init::ss#1 reg byte x 1501.5
(byte) init::ss#2 reg byte x 1501.5
(byte) init::sx
(byte) init::sx#1 reg byte x 1501.5
(byte) init::sx#2 reg byte x 800.8
(word) init::xp
(word) init::xp#1 xp zp[2]:4 667.3333333333334
(word) init::xp#2 xp zp[2]:4 750.75
(void()) loop()
(byte~) loop::$5 reg byte a 20002.0
(label) loop::@1
(label) loop::@10
(label) loop::@11
(label) loop::@12
(label) loop::@2
(label) loop::@3
(label) loop::@4
(label) loop::@5
(label) loop::@6
(label) loop::@7
(label) loop::@8
(label) loop::@9
(label) loop::plexFreeNextYpos1
(byte) loop::plexFreeNextYpos1_return
(byte) loop::plexFreeNextYpos1_return#0 plexFreeNextYpos1_return zp[1]:10 55001.0
(byte) loop::rasterY
(byte) loop::sin_idx
(byte) loop::sin_idx#1 sin_idx zp[1]:2 133.46666666666667
(byte) loop::sin_idx#6 sin_idx zp[1]:2 333.6666666666667
(byte) loop::ss
(byte) loop::ss#1 ss zp[1]:3 15001.5
(byte) loop::ss#5 ss zp[1]:3 3333.6666666666665
(byte) loop::sy
(byte) loop::sy#1 reg byte y 15001.5
(byte) loop::sy#2 reg byte y 10001.0
(byte) loop::y_idx
(byte) loop::y_idx#1 reg byte x 6667.333333333333
(byte) loop::y_idx#2 reg byte x 15502.0
(byte) loop::y_idx#3 reg byte x 2002.0
(void()) main()
(label) main::@1
(label) main::@return
(void()) plexInit((byte*) plexInit::screen)
(label) plexInit::@1
(label) plexInit::@return
(byte) plexInit::i
(byte) plexInit::i#1 reg byte x 15001.5
(byte) plexInit::i#2 reg byte x 20002.0
(label) plexInit::plexSetScreen1
(byte*) plexInit::plexSetScreen1_screen
(byte*) plexInit::screen
(void()) plexShowSprite()
(byte~) plexShowSprite::$11 reg byte x 100001.0
(byte~) plexShowSprite::$2 reg byte a 200002.0
(byte~) plexShowSprite::$3 reg byte a 200002.0
(byte~) plexShowSprite::$5 reg byte x 200002.0
(byte~) plexShowSprite::$6 reg byte a 200002.0
(byte~) plexShowSprite::$9 reg byte a 200002.0
(label) plexShowSprite::@1
(label) plexShowSprite::@2
(label) plexShowSprite::@3
(label) plexShowSprite::@4
(label) plexShowSprite::@5
(label) plexShowSprite::@return
(label) plexShowSprite::plexFreeAdd1
(byte~) plexShowSprite::plexFreeAdd1_$0 reg byte a 200002.0
(byte~) plexShowSprite::plexFreeAdd1_$1 reg byte x 200002.0
(byte~) plexShowSprite::plexFreeAdd1_$2 reg byte a 200002.0
(byte) plexShowSprite::plexFreeAdd1_ypos
(byte) plexShowSprite::plexFreeAdd1_ypos#0 reg byte a 150001.5
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::plex_sprite_idx2#0 plex_sprite_idx2 zp[1]:11 25000.25
(byte) plexShowSprite::xpos_idx
(byte) plexShowSprite::xpos_idx#0 reg byte a 200002.0
(byte) plexShowSprite::ypos
(void()) plexSort()
(label) plexSort::@1
(label) plexSort::@2
(label) plexSort::@3
(label) plexSort::@4
(label) plexSort::@5
(label) plexSort::@6
(label) plexSort::@7
(label) plexSort::@return
(byte) plexSort::m
(byte) plexSort::m#1 m zp[1]:10 1500001.5
(byte) plexSort::m#2 m zp[1]:10 416667.0833333334
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_idx#0 nxt_idx zp[1]:11 300000.30000000005
(byte) plexSort::nxt_y
(byte) plexSort::nxt_y#0 nxt_y zp[1]:12 1500000.375
(label) plexSort::plexFreePrepare1
(label) plexSort::plexFreePrepare1_@1
(label) plexSort::plexFreePrepare1_@2
(byte) plexSort::plexFreePrepare1_s
(byte) plexSort::plexFreePrepare1_s#1 reg byte x 1500001.5
(byte) plexSort::plexFreePrepare1_s#2 reg byte x 1500001.5
(byte) plexSort::s
(byte) plexSort::s#1 reg byte x 1.3666668333333332E7
(byte) plexSort::s#2 reg byte x 2000002.0
(byte) plexSort::s#3 reg byte x 2.05000025E7
(byte) plexSort::s#6 reg byte x 2000002.0
(volatile byte) plex_free_next loadstore zp[1]:9 8421.236842105262
(volatile byte) plex_show_idx loadstore zp[1]:6 10625.166666666664
(volatile byte) plex_sprite_idx loadstore zp[1]:7 9111.266666666666
(volatile byte) plex_sprite_msb loadstore zp[1]:8 13261.065217391304

zp[1]:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
reg byte x [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
reg byte y [ loop::sy#2 loop::sy#1 ]
zp[1]:3 [ loop::ss#5 loop::ss#1 ]
reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
reg byte x [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
reg byte x [ init::sx#2 init::sx#1 ]
zp[2]:4 [ init::xp#2 init::xp#1 ]
reg byte x [ init::ss#2 init::ss#1 ]
reg byte x [ plexInit::i#2 plexInit::i#1 ]
zp[1]:6 [ plex_show_idx ]
zp[1]:7 [ plex_sprite_idx ]
zp[1]:8 [ plex_sprite_msb ]
zp[1]:9 [ plex_free_next ]
reg byte a [ loop::$5 ]
zp[1]:10 [ loop::plexFreeNextYpos1_return#0 plexSort::m#2 plexSort::m#1 ]
reg byte a [ plexShowSprite::plexFreeAdd1_ypos#0 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$0 ]
reg byte x [ plexShowSprite::plexFreeAdd1_$1 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$2 ]
reg byte a [ plexShowSprite::xpos_idx#0 ]
reg byte x [ plexShowSprite::$11 ]
reg byte a [ plexShowSprite::$2 ]
reg byte a [ plexShowSprite::$3 ]
reg byte a [ plexShowSprite::$9 ]
reg byte x [ plexShowSprite::$5 ]
reg byte a [ plexShowSprite::$6 ]
zp[1]:11 [ plexSort::nxt_idx#0 plexShowSprite::plex_sprite_idx2#0 ]
zp[1]:12 [ plexSort::nxt_y#0 ]
reg byte x [ plexSort::s#2 ]
reg byte a [ init::$4 ]


FINAL ASSEMBLER
Score: 60648

  // File Comments
// A simple usage of the flexible sprite multiplexer routine
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label D011 = $d011
  .const VIC_RST8 = $80
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  // The colors of the C64
  .const BLACK = 0
  .const GREEN = 5
  // The number of sprites in the multiplexer
  .const PLEX_COUNT = $20
  // Location of screen & sprites
  .label SCREEN = $400
  .label SPRITE = $2000
  // The address of the sprite pointers on the current screen (screen+0x3f8).
  .label PLEX_SCREEN_PTR = SCREEN+$3f8
  .label plex_show_idx = 6
  .label plex_sprite_idx = 7
  .label plex_sprite_msb = 8
  .label plex_free_next = 9
  // @begin
__bbegin:
  // @1
  // plex_show_idx=0
  // [1] (volatile byte) plex_show_idx ← (byte) 0 -- vbuz1=vbuc1 
  // The index in the PLEX tables of the next sprite to show
  lda #0
  sta.z plex_show_idx
  // plex_sprite_idx=0
  // [2] (volatile byte) plex_sprite_idx ← (byte) 0 -- vbuz1=vbuc1 
  // The index the next sprite to use for showing (sprites are used round-robin)
  sta.z plex_sprite_idx
  // plex_sprite_msb=1
  // [3] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
  // The MSB bit of the next sprite to use for showing
  lda #1
  sta.z plex_sprite_msb
  // @2
  // plex_free_next = 0
  // [4] (volatile byte) plex_free_next ← (byte) 0 -- vbuz1=vbuc1 
  // The index of the sprite that is free next. Since sprites are used round-robin this moves forward each time a sprite is shown.
  lda #0
  sta.z plex_free_next
  // @3
  // kickasm
  // kickasm(location (const byte*) SPRITE) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
  // [6] phi from @3 to @4 [phi:@3->@4]
  // @4
  // [7] call main 
  jsr main
  rts
  // [8] phi from @4 to @end [phi:@4->@end]
  // @end
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // init()
    // [10] call init 
    jsr init
    // [11] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // loop()
    // [12] call loop 
    // [14] phi from main::@1 to loop [phi:main::@1->loop]
    jsr loop
    // main::@return
    // }
    // [13] return 
    rts
}
  // loop
// The raster loop
loop: {
    // The current index into the y-sinus
    .label sin_idx = 2
    .label plexFreeNextYpos1_return = $a
    .label ss = 3
    // [15] phi from loop to loop::@1 [phi:loop->loop::@1]
    // [15] phi (byte) loop::sin_idx#6 = (byte) 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    // loop::@1
    // loop::@2
  __b2:
    // while(*RASTER!=$ff)
    // [16] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // loop::@3
    // (*BORDERCOL)++;
    // [17] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [18] (byte) loop::y_idx#3 ← (byte) loop::sin_idx#6 -- vbuxx=vbuz1 
    ldx.z sin_idx
    // [19] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
    // [19] phi (byte) loop::sy#2 = (byte) 0 [phi:loop::@3->loop::@4#0] -- vbuyy=vbuc1 
    ldy #0
    // [19] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#3 [phi:loop::@3->loop::@4#1] -- register_copy 
    // [19] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
    // [19] phi (byte) loop::sy#2 = (byte) loop::sy#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [19] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    // loop::@4
  __b4:
    // PLEX_YPOS[sy] = YSIN[y_idx]
    // [20] *((const byte*) PLEX_YPOS + (byte) loop::sy#2) ← *((const byte*) YSIN + (byte) loop::y_idx#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda YSIN,x
    sta PLEX_YPOS,y
    // y_idx += 8
    // [21] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte) 8 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[8]
    // for(char sy: 0..PLEX_COUNT-1)
    // [22] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 -- vbuyy=_inc_vbuyy 
    iny
    // [23] if((byte) loop::sy#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@4 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLEX_COUNT-1+1
    bne __b4
    // loop::@5
    // sin_idx +=1
    // [24] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte) 1 -- vbuz1=vbuz1_plus_1 
    inc.z sin_idx
    // (*BORDERCOL)++;
    // [25] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // plexSort()
    // [26] call plexSort 
    // [65] phi from loop::@5 to plexSort [phi:loop::@5->plexSort]
    jsr plexSort
    // loop::@11
    // *BORDERCOL = BLACK
    // [27] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // loop::@6
  __b6:
    // *D011&VIC_RST8
    // [28] (byte~) loop::$5 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #VIC_RST8
    and D011
    // while((*D011&VIC_RST8)!=0)
    // [29] if((byte~) loop::$5!=(byte) 0) goto loop::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6
    // [30] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
    // [30] phi (byte) loop::ss#5 = (byte) 0 [phi:loop::@6->loop::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ss
  // Show the sprites
    // [30] phi from loop::@12 to loop::@7 [phi:loop::@12->loop::@7]
    // [30] phi (byte) loop::ss#5 = (byte) loop::ss#1 [phi:loop::@12->loop::@7#0] -- register_copy 
    // loop::@7
  __b7:
    // *BORDERCOL = BLACK
    // [31] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // loop::plexFreeNextYpos1
    // return PLEX_FREE_YPOS[plex_free_next];
    // [32] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z plex_free_next
    lda PLEX_FREE_YPOS,y
    sta.z plexFreeNextYpos1_return
    // loop::@8
  __b8:
    // while(*RASTER<rasterY)
    // [33] if(*((const nomodify byte*) RASTER)<(byte) loop::plexFreeNextYpos1_return#0) goto loop::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z plexFreeNextYpos1_return
    bcc __b8
    // loop::@9
    // (*BORDERCOL)++;
    // [34] *((const nomodify byte*) BORDERCOL) ← ++ *((const nomodify byte*) BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // plexShowSprite()
    // [35] call plexShowSprite 
    jsr plexShowSprite
    // loop::@12
    // for( char ss: 0..PLEX_COUNT-1)
    // [36] (byte) loop::ss#1 ← ++ (byte) loop::ss#5 -- vbuz1=_inc_vbuz1 
    inc.z ss
    // [37] if((byte) loop::ss#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-1+1
    cmp.z ss
    bne __b7
    // loop::@10
    // *BORDERCOL = BLACK
    // [38] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [15] phi from loop::@10 to loop::@1 [phi:loop::@10->loop::@1]
    // [15] phi (byte) loop::sin_idx#6 = (byte) loop::sin_idx#1 [phi:loop::@10->loop::@1#0] -- register_copy 
    jmp __b2
}
  // plexShowSprite
// Show the next sprite.
// plexSort() prepares showing the sprites
plexShowSprite: {
    .label plex_sprite_idx2 = $b
    // plex_sprite_idx2 = plex_sprite_idx*2
    // [39] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plex_sprite_idx
    asl
    sta.z plex_sprite_idx2
    // ypos = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]]
    // [40] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) -- vbuaa=pbuc1_derefidx_(pbuc2_derefidx_vbuz1) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_YPOS,y
    // SPRITES_YPOS[plex_sprite_idx2] = ypos
    // [41] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_sprite_idx2
    sta SPRITES_YPOS,y
    // plexShowSprite::plexFreeAdd1
    // ypos+21
    // [42] (byte~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 + (byte) $15 -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #$15
    // PLEX_FREE_YPOS[plex_free_next] =  ypos+21
    // [43] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_free_next
    sta PLEX_FREE_YPOS,y
    // plex_free_next+1
    // [44] (byte~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_free_next
    inx
    // (plex_free_next+1)&7
    // [45] (byte~) plexShowSprite::plexFreeAdd1_$2 ← (byte~) plexShowSprite::plexFreeAdd1_$1 & (byte) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // plex_free_next = (plex_free_next+1)&7
    // [46] (volatile byte) plex_free_next ← (byte~) plexShowSprite::plexFreeAdd1_$2 -- vbuz1=vbuaa 
    sta.z plex_free_next
    // plexShowSprite::@5
    // PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]]
    // [47] *((const byte*) PLEX_SCREEN_PTR#1 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_(pbuc3_derefidx_vbuz2) 
    ldx.z plex_show_idx
    ldy PLEX_SORTED_IDX,x
    lda PLEX_PTR,y
    ldx.z plex_sprite_idx
    sta PLEX_SCREEN_PTR,x
    // xpos_idx = PLEX_SORTED_IDX[plex_show_idx]
    // [48] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z plex_show_idx
    lda PLEX_SORTED_IDX,y
    // <PLEX_XPOS[xpos_idx]
    // [49] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
    // [50] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) -- vbuaa=_lo_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS,x
    // SPRITES_XPOS[plex_sprite_idx2] = <PLEX_XPOS[xpos_idx]
    // [51] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z plex_sprite_idx2
    sta SPRITES_XPOS,y
    // >PLEX_XPOS[xpos_idx]
    // [52] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11) -- vbuaa=_hi_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS+1,x
    // if(>PLEX_XPOS[xpos_idx]!=0)
    // [53] if((byte~) plexShowSprite::$3!=(byte) 0) goto plexShowSprite::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1
    // plexShowSprite::@3
    // 0xff^plex_sprite_msb
    // [54] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor.z plex_sprite_msb
    // *SPRITES_XMSB &= (0xff^plex_sprite_msb)
    // [55] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
    // plexShowSprite::@2
  __b2:
    // plex_sprite_idx+1
    // [56] (byte~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z plex_sprite_idx
    inx
    // (plex_sprite_idx+1)&7
    // [57] (byte~) plexShowSprite::$6 ← (byte~) plexShowSprite::$5 & (byte) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
    // plex_sprite_idx = (plex_sprite_idx+1)&7
    // [58] (volatile byte) plex_sprite_idx ← (byte~) plexShowSprite::$6 -- vbuz1=vbuaa 
    sta.z plex_sprite_idx
    // plex_show_idx++;
    // [59] (volatile byte) plex_show_idx ← ++ (volatile byte) plex_show_idx -- vbuz1=_inc_vbuz1 
    inc.z plex_show_idx
    // plex_sprite_msb <<=1
    // [60] (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z plex_sprite_msb
    // if(plex_sprite_msb==0)
    // [61] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return -- vbuz1_neq_0_then_la1 
    lda.z plex_sprite_msb
    cmp #0
    bne __breturn
    // plexShowSprite::@4
    // plex_sprite_msb = 1
    // [62] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // plexShowSprite::@return
  __breturn:
    // }
    // [63] return 
    rts
    // plexShowSprite::@1
  __b1:
    // *SPRITES_XMSB |= plex_sprite_msb
    // [64] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora.z plex_sprite_msb
    sta SPRITES_XMSB
    jmp __b2
}
  // plexSort
// Ensure that the indices in PLEX_SORTED_IDX is sorted based on the y-positions in PLEX_YPOS
// Assumes that the positions are nearly sorted already (as each sprite just moves a bit)
// Uses an insertion sort:
// 1. Moves a marker (m) from the start to end of the array. Every time the marker moves forward all elements before the marker are sorted correctly.
// 2a. If the next element after the marker is larger that the current element
//     the marker can be moved forwards (as the sorting is correct).
// 2b. If the next element after the marker is smaller than the current element:
//     elements before the marker are shifted right one at a time until encountering one smaller than the current one.
//      It is then inserted at the spot. Now the marker can move forward.
plexSort: {
    .label nxt_idx = $b
    .label nxt_y = $c
    .label m = $a
    // [66] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
    // [66] phi (byte) plexSort::m#2 = (byte) 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z m
    // [66] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
    // [66] phi (byte) plexSort::m#2 = (byte) plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    // plexSort::@1
  __b1:
    // nxt_idx = PLEX_SORTED_IDX[m+1]
    // [67] (byte) plexSort::nxt_idx#0 ← *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::m#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z m
    lda PLEX_SORTED_IDX+1,y
    sta.z nxt_idx
    // nxt_y = PLEX_YPOS[nxt_idx]
    // [68] (byte) plexSort::nxt_y#0 ← *((const byte*) PLEX_YPOS + (byte) plexSort::nxt_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda PLEX_YPOS,y
    sta.z nxt_y
    // if(nxt_y<PLEX_YPOS[PLEX_SORTED_IDX[m]])
    // [69] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2 -- vbuz1_ge_pbuc1_derefidx_(pbuc2_derefidx_vbuz2)_then_la1 
    ldx.z m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs __b2
    // plexSort::@5
    // [70] (byte) plexSort::s#6 ← (byte) plexSort::m#2 -- vbuxx=vbuz1 
    // [71] phi from plexSort::@5 plexSort::@7 to plexSort::@3 [phi:plexSort::@5/plexSort::@7->plexSort::@3]
    // [71] phi (byte) plexSort::s#3 = (byte) plexSort::s#6 [phi:plexSort::@5/plexSort::@7->plexSort::@3#0] -- register_copy 
    // plexSort::@3
  __b3:
    // PLEX_SORTED_IDX[s+1] = PLEX_SORTED_IDX[s]
    // [72] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PLEX_SORTED_IDX,x
    sta PLEX_SORTED_IDX+1,x
    // s--;
    // [73] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 -- vbuxx=_dec_vbuxx 
    dex
    // while((s!=0xff) && (nxt_y<PLEX_YPOS[PLEX_SORTED_IDX[s]]))
    // [74] if((byte) plexSort::s#1==(byte) $ff) goto plexSort::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #$ff
    beq __b4
    // plexSort::@7
    // [75] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3 -- vbuz1_lt_pbuc1_derefidx_(pbuc2_derefidx_vbuxx)_then_la1 
    lda.z nxt_y
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc __b3
    // plexSort::@4
  __b4:
    // s++;
    // [76] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 -- vbuxx=_inc_vbuxx 
    inx
    // PLEX_SORTED_IDX[s] = nxt_idx
    // [77] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z nxt_idx
    sta PLEX_SORTED_IDX,x
    // plexSort::@2
  __b2:
    // for(char m: 0..PLEX_COUNT-2)
    // [78] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 -- vbuz1=_inc_vbuz1 
    inc.z m
    // [79] if((byte) plexSort::m#1!=(const nomodify byte) PLEX_COUNT-(byte) 2+(byte) 1) goto plexSort::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLEX_COUNT-2+1
    cmp.z m
    bne __b1
    // plexSort::@6
    // plex_show_idx = 0
    // [80] (volatile byte) plex_show_idx ← (byte) 0 -- vbuz1=vbuc1 
    // Prepare for showing the sprites
    lda #0
    sta.z plex_show_idx
    // plex_sprite_idx = 0
    // [81] (volatile byte) plex_sprite_idx ← (byte) 0 -- vbuz1=vbuc1 
    sta.z plex_sprite_idx
    // plex_sprite_msb = 1
    // [82] (volatile byte) plex_sprite_msb ← (byte) 1 -- vbuz1=vbuc1 
    lda #1
    sta.z plex_sprite_msb
    // [83] phi from plexSort::@6 to plexSort::plexFreePrepare1 [phi:plexSort::@6->plexSort::plexFreePrepare1]
    // plexSort::plexFreePrepare1
    // [84] phi from plexSort::plexFreePrepare1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1]
    // [84] phi (byte) plexSort::plexFreePrepare1_s#2 = (byte) 0 [phi:plexSort::plexFreePrepare1->plexSort::plexFreePrepare1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [84] phi from plexSort::plexFreePrepare1_@1 to plexSort::plexFreePrepare1_@1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1]
    // [84] phi (byte) plexSort::plexFreePrepare1_s#2 = (byte) plexSort::plexFreePrepare1_s#1 [phi:plexSort::plexFreePrepare1_@1->plexSort::plexFreePrepare1_@1#0] -- register_copy 
    // plexSort::plexFreePrepare1_@1
  plexFreePrepare1___b1:
    // PLEX_FREE_YPOS[s] = 0
    // [85] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PLEX_FREE_YPOS,x
    // for( char s: 0..7)
    // [86] (byte) plexSort::plexFreePrepare1_s#1 ← ++ (byte) plexSort::plexFreePrepare1_s#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] if((byte) plexSort::plexFreePrepare1_s#1!=(byte) 8) goto plexSort::plexFreePrepare1_@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne plexFreePrepare1___b1
    // plexSort::plexFreePrepare1_@2
    // plex_free_next = 0
    // [88] (volatile byte) plex_free_next ← (byte) 0 -- vbuz1=vbuc1 
    sta.z plex_free_next
    // plexSort::@return
    // }
    // [89] return 
    rts
}
  // init
// Initialize the program
init: {
    // Set the x-positions & pointers
    .label xp = 4
    // *D011 = VIC_DEN | VIC_RSEL | 3
    // [90] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta D011
    // plexInit(SCREEN)
    // [91] call plexInit 
  // Initialize the multiplexer
    // [105] phi from init to plexInit [phi:init->plexInit]
    jsr plexInit
    // [92] phi from init to init::@1 [phi:init->init::@1]
    // [92] phi (word) init::xp#2 = (word) $20 [phi:init->init::@1#0] -- vwuz1=vwuc1 
    lda #<$20
    sta.z xp
    lda #>$20
    sta.z xp+1
    // [92] phi (byte) init::sx#2 = (byte) 0 [phi:init->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
    // [92] phi (word) init::xp#2 = (word) init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
    // [92] phi (byte) init::sx#2 = (byte) init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    // init::@1
  __b1:
    // PLEX_PTR[sx] = (char)(SPRITE/$40)
    // [93] *((const byte*) PLEX_PTR + (byte) init::sx#2) ← (byte)(const byte*) SPRITE/(byte) $40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #SPRITE/$40
    sta PLEX_PTR,x
    // PLEX_XPOS[sx] = xp
    // [94] (byte~) init::$4 ← (byte) init::sx#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [95] *((const word*) PLEX_XPOS + (byte~) init::$4) ← (word) init::xp#2 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z xp
    sta PLEX_XPOS,y
    lda.z xp+1
    sta PLEX_XPOS+1,y
    // xp += 9
    // [96] (word) init::xp#1 ← (word) init::xp#2 + (byte) 9 -- vwuz1=vwuz1_plus_vbuc1 
    lda #9
    clc
    adc.z xp
    sta.z xp
    bcc !+
    inc.z xp+1
  !:
    // for(char sx: 0..PLEX_COUNT-1)
    // [97] (byte) init::sx#1 ← ++ (byte) init::sx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [98] if((byte) init::sx#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1
    // init::@2
    // *SPRITES_ENABLE = $ff
    // [99] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Enable & initialize sprites
    lda #$ff
    sta SPRITES_ENABLE
    // [100] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
    // [100] phi (byte) init::ss#2 = (byte) 0 [phi:init::@2->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [100] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
    // [100] phi (byte) init::ss#2 = (byte) init::ss#1 [phi:init::@3->init::@3#0] -- register_copy 
    // init::@3
  __b3:
    // SPRITES_COLS[ss] = GREEN
    // [101] *((const nomodify byte*) SPRITES_COLS + (byte) init::ss#2) ← (const nomodify byte) GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
    // for(char ss: 0..7)
    // [102] (byte) init::ss#1 ← ++ (byte) init::ss#2 -- vbuxx=_inc_vbuxx 
    inx
    // [103] if((byte) init::ss#1!=(byte) 8) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3
    // init::@return
    // }
    // [104] return 
    rts
}
  // plexInit
// Initialize the multiplexer data structures
plexInit: {
    // [106] phi from plexInit to plexInit::plexSetScreen1 [phi:plexInit->plexInit::plexSetScreen1]
    // plexInit::plexSetScreen1
    // [107] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
    // [107] phi (byte) plexInit::i#2 = (byte) 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [107] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
    // [107] phi (byte) plexInit::i#2 = (byte) plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    // plexInit::@1
  __b1:
    // PLEX_SORTED_IDX[i] = i
    // [108] *((const byte*) PLEX_SORTED_IDX + (byte) plexInit::i#2) ← (byte) plexInit::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta PLEX_SORTED_IDX,x
    // for(char i: 0..PLEX_COUNT-1)
    // [109] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [110] if((byte) plexInit::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto plexInit::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne __b1
    // plexInit::@return
    // }
    // [111] return 
    rts
}
  // File Data
  // The x-positions of the multiplexer sprites (0x000-0x1ff)
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  // The y-positions of the multiplexer sprites.
  PLEX_YPOS: .fill PLEX_COUNT, 0
  // The sprite pointers for the multiplexed sprites
  PLEX_PTR: .fill PLEX_COUNT, 0
  // Indexes of the plex-sprites sorted by sprite y-position. Each call to plexSort() will fix the sorting if changes to the Y-positions have ruined it.
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
  // Contains the Y-position where each sprite is free again. PLEX_FREE_YPOS[s] holds the Y-position where sprite s is free to use again.
  PLEX_FREE_YPOS: .fill 8, 0
  .align $100
YSIN:
.var min = 50
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = SPRITE "SPRITE"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


