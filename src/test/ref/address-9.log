
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$0 = 0 * SIZEOF_SIGNED_WORD
  SCREEN[main::$0] = DATA[main::$0]
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const signed word* DATA[$3e8]  = { fill( $3e8, 0) }
const nomodify signed word* SCREEN = (signed word*)$400
const byte SIZEOF_SIGNED_WORD = 2
void __start()
void main()
number~ main::$0

Adding number conversion cast (unumber) 0 in main::$0 = 0 * SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)0 * SIZEOF_SIGNED_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (signed word*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = 0 * SIZEOF_SIGNED_WORD
Constant right-side identified [0] main::$0 = 0 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = 0*SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero 0*SIZEOF_SIGNED_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero DATA in [1] SCREEN[main::$0] = DATA[main::$0]
Simplifying expression containing zero SCREEN in [1] SCREEN[main::$0] = *DATA
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$0
Eliminating unused constant SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $1000
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = *DATA
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = *DATA [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 25 combination 
Uplifting [] best 25 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring an integer array variable as at a hard-coded address
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The screen
  .label SCREEN = $400
  // main
main: {
    // [0] *SCREEN = *DATA -- _deref_pwsc1=_deref_pwsc2 
    lda DATA
    sta SCREEN
    lda DATA+1
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data
.pc = $1000 "DATA"
  // Data to be put on the screen
  DATA: .fill 2*$3e8, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const signed word* DATA[$3e8]  = { fill( $3e8, 0) }
const nomodify signed word* SCREEN = (signed word*) 1024
void main()



FINAL ASSEMBLER
Score: 22

  // File Comments
// Test declaring an integer array variable as at a hard-coded address
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The screen
  .label SCREEN = $400
  // main
main: {
    // SCREEN[0] = DATA[0]
    // [0] *SCREEN = *DATA -- _deref_pwsc1=_deref_pwsc2 
    lda DATA
    sta SCREEN
    lda DATA+1
    sta SCREEN+1
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data
.pc = $1000 "DATA"
  // Data to be put on the screen
  DATA: .fill 2*$3e8, 0

