
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLUE
  [2] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLUE
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [3] (byte*) main::col#2 ← phi( main/(const nomodify byte*) COLS main::@1/(byte*) main::col#1 )
  [4] *((byte*) main::col#2) ← (const nomodify byte) BLACK
  [5] (byte*) main::col#1 ← ++ (byte*) main::col#2
  [6] if((byte*) main::col#1!=(const nomodify byte*) COLS+(word) $3e8+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] phi()
  [8] call makecharset 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@2
  [9] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@5
  [11] (byte) c2B#1 ← phi( main::@5/(byte) 0 main::@4/(byte) c2B#2 )
  [11] (byte) c2A#1 ← phi( main::@5/(byte) 0 main::@4/(byte) c2A#2 )
  [11] (byte) c1B#1 ← phi( main::@5/(byte) 0 main::@4/(byte) c1B#2 )
  [11] (byte) c1A#1 ← phi( main::@5/(byte) 0 main::@4/(byte) c1A#2 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi()
  [13] call doplasma 
  to:main::@3

(void()) doplasma((byte*) doplasma::screen)
doplasma: scope:[doplasma]  from main::@4
  [14] (byte) doplasma::c1a#0 ← (byte) c1A#1
  [15] (byte) doplasma::c1b#0 ← (byte) c1B#1
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  [16] (byte) doplasma::yprev#2 ← phi( doplasma/(byte) 0 doplasma::@2/(byte) doplasma::yprev#4 )
  [16] (byte) doplasma::c1b#2 ← phi( doplasma/(byte) doplasma::c1b#0 doplasma::@2/(byte) doplasma::c1b#1 )
  [16] (byte) doplasma::c1a#2 ← phi( doplasma/(byte) doplasma::c1a#0 doplasma::@2/(byte) doplasma::c1a#1 )
  [16] (byte) doplasma::i#2 ← phi( doplasma/(byte) 0 doplasma::@2/(byte) doplasma::i#1 )
  [17] if((byte) doplasma::i#2<(byte) $19) goto doplasma::@2
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@1
  [18] (byte) c1A#2 ← (byte) c1A#1 + (byte) 3
  [19] (byte) c1B#2 ← (byte) c1B#1 - (byte) 5
  [20] (byte) doplasma::c2a#0 ← (byte) c2A#1
  [21] (byte) doplasma::c2b#0 ← (byte) c2B#1
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3 doplasma::@5
  [22] (byte) doplasma::c2b#2 ← phi( doplasma::@3/(byte) doplasma::c2b#0 doplasma::@5/(byte) doplasma::c2b#1 )
  [22] (byte) doplasma::c2a#2 ← phi( doplasma::@3/(byte) doplasma::c2a#0 doplasma::@5/(byte) doplasma::c2a#1 )
  [22] (byte) doplasma::i1#2 ← phi( doplasma::@3/(byte) 0 doplasma::@5/(byte) doplasma::i1#1 )
  [23] if((byte) doplasma::i1#2<(byte) $28) goto doplasma::@5
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@4
  [24] (byte) c2A#2 ← (byte) c2A#1 + (byte) 2
  [25] (byte) c2B#2 ← (byte) c2B#1 - (byte) 3
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@10 doplasma::@6
  [26] (byte) doplasma::i2#2 ← phi( doplasma::@10/(byte) doplasma::i2#1 doplasma::@6/(byte) 0 )
  [27] if((byte) doplasma::i2#2<(byte) $28) goto doplasma::@8
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  [28] return 
  to:@return
doplasma::@8: scope:[doplasma]  from doplasma::@7
  [29] (byte) doplasma::val#0 ← *((const byte*) doplasma::xbuf + (byte) doplasma::i2#2)
  to:doplasma::@9
doplasma::@9: scope:[doplasma]  from doplasma::@8
  [30] (byte) doplasma::val#1 ← (byte) doplasma::val#0 + *((const byte*) doplasma::ybuf)
  [31] *((const nomodify byte*) SCREEN1 + (byte) doplasma::i2#2) ← (byte) doplasma::val#1
  to:doplasma::@10_1
doplasma::@10_1: scope:[doplasma]  from doplasma::@9
  [32] (byte) doplasma::val#5 ← (byte) doplasma::val#1 + *((const byte*) doplasma::ybuf+(byte) 1)
  [33] *((const nomodify byte*) SCREEN1+(byte) 1*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#5
  to:doplasma::@10_2
doplasma::@10_2: scope:[doplasma]  from doplasma::@10_1
  [34] (byte) doplasma::val#7 ← (byte) doplasma::val#5 + *((const byte*) doplasma::ybuf+(byte) 2)
  [35] *((const nomodify byte*) SCREEN1+(byte) 2*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#7
  to:doplasma::@10_3
doplasma::@10_3: scope:[doplasma]  from doplasma::@10_2
  [36] (byte) doplasma::val#10 ← (byte) doplasma::val#7 + *((const byte*) doplasma::ybuf+(byte) 3)
  [37] *((const nomodify byte*) SCREEN1+(byte) 3*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#10
  to:doplasma::@10_4
doplasma::@10_4: scope:[doplasma]  from doplasma::@10_3
  [38] (byte) doplasma::val#11 ← (byte) doplasma::val#10 + *((const byte*) doplasma::ybuf+(byte) 4)
  [39] *((const nomodify byte*) SCREEN1+(byte) 4*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#11
  to:doplasma::@10_5
doplasma::@10_5: scope:[doplasma]  from doplasma::@10_4
  [40] (byte) doplasma::val#13 ← (byte) doplasma::val#11 + *((const byte*) doplasma::ybuf+(byte) 5)
  [41] *((const nomodify byte*) SCREEN1+(byte) 5*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#13
  to:doplasma::@10_6
doplasma::@10_6: scope:[doplasma]  from doplasma::@10_5
  [42] (byte) doplasma::val#15 ← (byte) doplasma::val#13 + *((const byte*) doplasma::ybuf+(byte) 6)
  [43] *((const nomodify byte*) SCREEN1+(byte) 6*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#15
  to:doplasma::@10_7
doplasma::@10_7: scope:[doplasma]  from doplasma::@10_6
  [44] (byte) doplasma::val#17 ← (byte) doplasma::val#15 + *((const byte*) doplasma::ybuf+(byte) 7)
  [45] *((const nomodify byte*) SCREEN1+(byte) 7*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#17
  to:doplasma::@10_8
doplasma::@10_8: scope:[doplasma]  from doplasma::@10_7
  [46] (byte) doplasma::val#19 ← (byte) doplasma::val#17 + *((const byte*) doplasma::ybuf+(byte) 8)
  [47] *((const nomodify byte*) SCREEN1+(byte) 8*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#19
  to:doplasma::@10_9
doplasma::@10_9: scope:[doplasma]  from doplasma::@10_8
  [48] (byte) doplasma::val#21 ← (byte) doplasma::val#19 + *((const byte*) doplasma::ybuf+(byte) 9)
  [49] *((const nomodify byte*) SCREEN1+(byte) 9*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#21
  to:doplasma::@10_10
doplasma::@10_10: scope:[doplasma]  from doplasma::@10_9
  [50] (byte) doplasma::val#23 ← (byte) doplasma::val#21 + *((const byte*) doplasma::ybuf+(byte) $a)
  [51] *((const nomodify byte*) SCREEN1+(byte) $a*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#23
  to:doplasma::@10_11
doplasma::@10_11: scope:[doplasma]  from doplasma::@10_10
  [52] (byte) doplasma::val#25 ← (byte) doplasma::val#23 + *((const byte*) doplasma::ybuf+(byte) $b)
  [53] *((const nomodify byte*) SCREEN1+(byte) $b*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#25
  to:doplasma::@10_12
doplasma::@10_12: scope:[doplasma]  from doplasma::@10_11
  [54] (byte) doplasma::val#27 ← (byte) doplasma::val#25 + *((const byte*) doplasma::ybuf+(byte) $c)
  [55] *((const nomodify byte*) SCREEN1+(byte) $c*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#27
  to:doplasma::@10_13
doplasma::@10_13: scope:[doplasma]  from doplasma::@10_12
  [56] (byte) doplasma::val#29 ← (byte) doplasma::val#27 + *((const byte*) doplasma::ybuf+(byte) $d)
  [57] *((const nomodify byte*) SCREEN1+(byte) $d*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#29
  to:doplasma::@10_14
doplasma::@10_14: scope:[doplasma]  from doplasma::@10_13
  [58] (byte) doplasma::val#31 ← (byte) doplasma::val#29 + *((const byte*) doplasma::ybuf+(byte) $e)
  [59] *((const nomodify byte*) SCREEN1+(byte) $e*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#31
  to:doplasma::@10_15
doplasma::@10_15: scope:[doplasma]  from doplasma::@10_14
  [60] (byte) doplasma::val#33 ← (byte) doplasma::val#31 + *((const byte*) doplasma::ybuf+(byte) $f)
  [61] *((const nomodify byte*) SCREEN1+(byte) $f*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#33
  to:doplasma::@10_16
doplasma::@10_16: scope:[doplasma]  from doplasma::@10_15
  [62] (byte) doplasma::val#35 ← (byte) doplasma::val#33 + *((const byte*) doplasma::ybuf+(byte) $10)
  [63] *((const nomodify byte*) SCREEN1+(byte) $10*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#35
  to:doplasma::@10_17
doplasma::@10_17: scope:[doplasma]  from doplasma::@10_16
  [64] (byte) doplasma::val#37 ← (byte) doplasma::val#35 + *((const byte*) doplasma::ybuf+(byte) $11)
  [65] *((const nomodify byte*) SCREEN1+(byte) $11*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#37
  to:doplasma::@10_18
doplasma::@10_18: scope:[doplasma]  from doplasma::@10_17
  [66] (byte) doplasma::val#39 ← (byte) doplasma::val#37 + *((const byte*) doplasma::ybuf+(byte) $12)
  [67] *((const nomodify byte*) SCREEN1+(byte) $12*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#39
  to:doplasma::@10_19
doplasma::@10_19: scope:[doplasma]  from doplasma::@10_18
  [68] (byte) doplasma::val#41 ← (byte) doplasma::val#39 + *((const byte*) doplasma::ybuf+(byte) $13)
  [69] *((const nomodify byte*) SCREEN1+(byte) $13*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#41
  to:doplasma::@10_20
doplasma::@10_20: scope:[doplasma]  from doplasma::@10_19
  [70] (byte) doplasma::val#43 ← (byte) doplasma::val#41 + *((const byte*) doplasma::ybuf+(byte) $14)
  [71] *((const nomodify byte*) SCREEN1+(byte) $14*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#43
  to:doplasma::@10_21
doplasma::@10_21: scope:[doplasma]  from doplasma::@10_20
  [72] (byte) doplasma::val#45 ← (byte) doplasma::val#43 + *((const byte*) doplasma::ybuf+(byte) $15)
  [73] *((const nomodify byte*) SCREEN1+(byte) $15*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#45
  to:doplasma::@10_22
doplasma::@10_22: scope:[doplasma]  from doplasma::@10_21
  [74] (byte) doplasma::val#47 ← (byte) doplasma::val#45 + *((const byte*) doplasma::ybuf+(byte) $16)
  [75] *((const nomodify byte*) SCREEN1+(byte) $16*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#47
  to:doplasma::@10_23
doplasma::@10_23: scope:[doplasma]  from doplasma::@10_22
  [76] (byte) doplasma::val#49 ← (byte) doplasma::val#47 + *((const byte*) doplasma::ybuf+(byte) $17)
  [77] *((const nomodify byte*) SCREEN1+(byte) $17*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#49
  to:doplasma::@10_24
doplasma::@10_24: scope:[doplasma]  from doplasma::@10_23
  [78] (byte) doplasma::val#51 ← (byte) doplasma::val#49 + *((const byte*) doplasma::ybuf+(byte) $18)
  [79] *((const nomodify byte*) SCREEN1+(byte) $18*(byte) $28 + (byte) doplasma::i2#2) ← (byte) doplasma::val#51
  to:doplasma::@10
doplasma::@10: scope:[doplasma]  from doplasma::@10_24
  [80] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2
  to:doplasma::@7
doplasma::@5: scope:[doplasma]  from doplasma::@4
  [81] (byte~) doplasma::$4 ← *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c2a#2) + *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c2b#2)
  [82] *((const byte*) doplasma::xbuf + (byte) doplasma::i1#2) ← (byte~) doplasma::$4
  [83] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3
  [84] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7
  [85] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2
  to:doplasma::@4
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [86] (byte) doplasma::yval#0 ← *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c1a#2) + *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c1b#2)
  [87] (byte~) doplasma::$2 ← (byte) doplasma::yval#0 - (byte) doplasma::yprev#2
  [88] *((const byte*) doplasma::ybuf + (byte) doplasma::i#2) ← (byte~) doplasma::$2
  [89] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4
  [90] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9
  [91] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2
  [92] (byte) doplasma::yprev#4 ← (byte) doplasma::yval#0
  to:doplasma::@1

(void()) makecharset((byte*) makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  [93] phi()
  to:makecharset::sid_rnd_init1
makecharset::sid_rnd_init1: scope:[makecharset]  from makecharset
  [94] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff
  [95] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::sid_rnd_init1
  [96] phi()
  [97] call print_cls 
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@10 makecharset::@11
  [98] (byte*) print_char_cursor#19 ← phi( makecharset::@10/(byte*) print_char_cursor#32 makecharset::@11/(const byte*) print_screen#0 )
  [98] (word) makecharset::c#2 ← phi( makecharset::@10/(word) makecharset::c#1 makecharset::@11/(word) 0 )
  [99] if((word) makecharset::c#2<(word) $100) goto makecharset::@2
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@1
  [100] return 
  to:@return
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [101] (byte~) makecharset::$3 ← < (word) makecharset::c#2
  [102] (byte) makecharset::s#0 ← *((const to_nomodify byte*) SINTABLE + (byte~) makecharset::$3)
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@6
  [103] (byte) makecharset::i#2 ← phi( makecharset::@2/(byte) 0 makecharset::@6/(byte) makecharset::i#1 )
  [104] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@5
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [105] (byte~) makecharset::$12 ← (word) makecharset::c#2 & (byte) 7
  [106] if((byte~) makecharset::$12!=(byte) 0) goto makecharset::@10
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@4
  [107] phi()
  [108] call print_char 
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@4 makecharset::@9
  [109] (byte*) print_char_cursor#32 ← phi( makecharset::@9/(byte*) print_char_cursor#0 makecharset::@4/(byte*) print_char_cursor#19 )
  [110] (word) makecharset::c#1 ← ++ (word) makecharset::c#2
  to:makecharset::@1
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [111] (byte) makecharset::b#2 ← phi( makecharset::@3/(byte) 0 makecharset::@7/(byte) makecharset::b#6 )
  [111] (byte) makecharset::ii#2 ← phi( makecharset::@3/(byte) 0 makecharset::@7/(byte) makecharset::ii#1 )
  [112] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::sid_rnd1
  to:makecharset::@6
makecharset::@6: scope:[makecharset]  from makecharset::@5
  [113] (word~) makecharset::$10 ← (word) makecharset::c#2 << (byte) 3
  [114] (word~) makecharset::$11 ← (word~) makecharset::$10 + (byte) makecharset::i#2
  [115] (byte*~) makecharset::$16 ← (const nomodify byte*) CHARSET + (word~) makecharset::$11
  [116] *((byte*~) makecharset::$16) ← (byte) makecharset::b#2
  [117] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  to:makecharset::@3
makecharset::sid_rnd1: scope:[makecharset]  from makecharset::@5
  [118] (byte) makecharset::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::sid_rnd1
  [119] (byte~) makecharset::$7 ← (byte) makecharset::sid_rnd1_return#0 & (byte) $ff
  [120] if((byte~) makecharset::$7<=(byte) makecharset::s#0) goto makecharset::@7
  to:makecharset::@8
makecharset::@8: scope:[makecharset]  from makecharset::@12
  [121] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const to_nomodify byte*) makecharset::bittab + (byte) makecharset::ii#2)
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@12 makecharset::@8
  [122] (byte) makecharset::b#6 ← phi( makecharset::@12/(byte) makecharset::b#2 makecharset::@8/(byte) makecharset::b#1 )
  [123] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  to:makecharset::@5

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from makecharset::@9
  [124] *((byte*) print_char_cursor#19) ← (const byte) print_char::ch#0
  [125] (byte*) print_char_cursor#0 ← ++ (byte*) print_char_cursor#19
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [126] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from makecharset::@11
  [127] phi()
  [128] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [129] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [130] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [131] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [132] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [133] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [134] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [135] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
