(label) @3
(label) @7
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(signed byte*) COSH
(const signed byte*) COSH#0 COSH = ((signed byte*))(word/signed word/dword/signed dword) 8192
(signed byte*) COSQ
(const signed byte*) COSQ#0 COSQ = ((signed byte*))(word/signed word/dword/signed dword) 8704
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte/signed byte/word/signed word/dword/signed dword) 14
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(signed byte*) SINH
(const signed byte*) SINH#0 SINH = (const signed byte*) COSH#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(signed byte*) SINQ
(const signed byte*) SINQ#0 SINQ = (const signed byte*) COSQ#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(void()) main()
(label) main::@13
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@4
(label) main::@6
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(void()) mulf_init()
(byte~) mulf_init::$0 reg byte a 22.0
(byte~) mulf_init::$1 reg byte y 11.0
(byte~) mulf_init::$2 reg byte a 22.0
(byte~) mulf_init::$4 reg byte a 22.0
(byte/signed word/word/dword/signed dword~) mulf_init::$5 reg byte y 11.0
(byte~) mulf_init::$6 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#1 add zp ZP_WORD:5 7.333333333333333
(signed word) mulf_init::add#2 add zp ZP_WORD:5 2.75
(byte) mulf_init::i
(byte) mulf_init::i#1 reg byte x 16.5
(byte) mulf_init::i#2 reg byte x 5.076923076923077
(signed word) mulf_init::sqr1
(signed word) mulf_init::sqr1#1 sqr1 zp ZP_WORD:3 5.5
(signed word) mulf_init::sqr1#2 sqr1 zp ZP_WORD:3 6.0
(byte[512]) mulf_sqr1
(const byte[512]) mulf_sqr1#0 mulf_sqr1 = { fill( 512, 0) }
(byte[512]) mulf_sqr2
(const byte[512]) mulf_sqr2#0 mulf_sqr2 = { fill( 512, 0) }
(void()) prepare_matrix((signed byte) prepare_matrix::sx , (signed byte) prepare_matrix::sy , (signed byte) prepare_matrix::sz)
(signed byte~) prepare_matrix::$10 reg byte a 4.0
(signed byte~) prepare_matrix::$11 reg byte a 4.0
(signed byte~) prepare_matrix::$12 reg byte a 4.0
(signed byte~) prepare_matrix::$13 $13 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$14 reg byte a 4.0
(signed byte~) prepare_matrix::$15 $15 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$16 reg byte a 4.0
(signed byte~) prepare_matrix::$17 reg byte a 4.0
(signed byte~) prepare_matrix::$18 $18 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$19 reg byte a 4.0
(signed byte~) prepare_matrix::$20 reg byte a 4.0
(signed byte~) prepare_matrix::$21 reg byte a 4.0
(signed byte~) prepare_matrix::$22 reg byte a 4.0
(signed byte~) prepare_matrix::$23 reg byte a 4.0
(signed byte~) prepare_matrix::$24 $24 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$25 reg byte a 4.0
(signed byte~) prepare_matrix::$26 reg byte a 4.0
(signed byte~) prepare_matrix::$27 reg byte a 4.0
(signed byte~) prepare_matrix::$28 reg byte a 4.0
(signed byte~) prepare_matrix::$29 $29 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$30 reg byte a 4.0
(signed byte~) prepare_matrix::$31 $31 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$32 reg byte a 4.0
(signed byte~) prepare_matrix::$33 reg byte a 4.0
(signed byte~) prepare_matrix::$34 reg byte a 4.0
(label) prepare_matrix::@return
(signed byte) prepare_matrix::sx
(const signed byte) prepare_matrix::sx#0 sx = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte) prepare_matrix::sy
(const signed byte) prepare_matrix::sy#0 sy = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte) prepare_matrix::sz
(const signed byte) prepare_matrix::sz#0 sz = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte) prepare_matrix::t1
(const signed byte) prepare_matrix::t1#0 t1 = (const signed byte) prepare_matrix::sy#0-(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t10
(const signed byte) prepare_matrix::t10#0 t10 = (const signed byte) prepare_matrix::sy#0+(const signed byte) prepare_matrix::sx#0
(signed byte) prepare_matrix::t2
(const signed byte) prepare_matrix::t2#0 t2 = (const signed byte) prepare_matrix::sy#0+(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t3
(const signed byte) prepare_matrix::t3#0 t3 = (const signed byte) prepare_matrix::sx#0+(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t4
(const signed byte) prepare_matrix::t4#0 t4 = (const signed byte) prepare_matrix::sx#0-(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t5
(const signed byte) prepare_matrix::t5#0 t5 = (const signed byte) prepare_matrix::sx#0+(const signed byte) prepare_matrix::t2#0
(signed byte) prepare_matrix::t6
(const signed byte) prepare_matrix::t6#0 t6 = (const signed byte) prepare_matrix::sx#0-(const signed byte) prepare_matrix::t1#0
(signed byte) prepare_matrix::t7
(const signed byte) prepare_matrix::t7#0 t7 = (const signed byte) prepare_matrix::sx#0+(const signed byte) prepare_matrix::t1#0
(signed byte) prepare_matrix::t8
(const signed byte) prepare_matrix::t8#0 t8 = (const signed byte) prepare_matrix::t2#0-(const signed byte) prepare_matrix::sx#0
(signed byte) prepare_matrix::t9
(const signed byte) prepare_matrix::t9#0 t9 = (const signed byte) prepare_matrix::sy#0-(const signed byte) prepare_matrix::sx#0
(void()) rotate((signed byte) rotate::x , (signed byte) rotate::y , (signed byte) rotate::z)
(label) rotate::@return
(signed byte) rotate::x
(signed byte) rotate::x#3 reg byte y 2.0
(signed byte) rotate::y
(signed byte) rotate::y#3 reg byte x 1.0
(signed byte) rotate::z
(signed byte) rotate::z#3 z zp ZP_BYTE:2 0.6666666666666666
(signed byte[9]) rotation_matrix
(const signed byte[9]) rotation_matrix#0 rotation_matrix = { fill( 9, 0) }
(signed byte*) xr
(const signed byte*) xr#0 xr = ((signed byte*))(byte/word/signed word/dword/signed dword) 240
(signed byte*) yr
(const signed byte*) yr#0 yr = ((signed byte*))(byte/word/signed word/dword/signed dword) 241
(signed byte*) zr
(const signed byte*) zr#0 zr = ((signed byte*))(byte/word/signed word/dword/signed dword) 242

reg byte y [ rotate::x#3 ]
reg byte x [ rotate::y#3 ]
zp ZP_BYTE:2 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 prepare_matrix::$18 prepare_matrix::$24 prepare_matrix::$29 prepare_matrix::$31 ]
zp ZP_WORD:3 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ]
reg byte x [ mulf_init::i#2 mulf_init::i#1 ]
zp ZP_WORD:5 [ mulf_init::add#2 mulf_init::add#1 ]
reg byte a [ prepare_matrix::$10 ]
reg byte a [ prepare_matrix::$11 ]
reg byte a [ prepare_matrix::$12 ]
reg byte a [ prepare_matrix::$14 ]
reg byte a [ prepare_matrix::$16 ]
reg byte a [ prepare_matrix::$17 ]
reg byte a [ prepare_matrix::$19 ]
reg byte a [ prepare_matrix::$20 ]
reg byte a [ prepare_matrix::$21 ]
reg byte a [ prepare_matrix::$22 ]
reg byte a [ prepare_matrix::$23 ]
reg byte a [ prepare_matrix::$25 ]
reg byte a [ prepare_matrix::$26 ]
reg byte a [ prepare_matrix::$27 ]
reg byte a [ prepare_matrix::$28 ]
reg byte a [ prepare_matrix::$30 ]
reg byte a [ prepare_matrix::$32 ]
reg byte a [ prepare_matrix::$33 ]
reg byte a [ prepare_matrix::$34 ]
reg byte a [ mulf_init::$0 ]
reg byte y [ mulf_init::$1 ]
reg byte a [ mulf_init::$2 ]
reg byte a [ mulf_init::$4 ]
reg byte y [ mulf_init::$5 ]
reg byte a [ mulf_init::$6 ]
