Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::x#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::x#2 = phi( main/main::x#0, main::@1/main::x#1 )
  SCREEN[main::x#2] = MAPDATA[main::x#2]
  COLS[main::x#2] = COLORMAP1[MAPDATA[main::x#2]]
  main::$0 = $c8 + main::x#2
  main::$1 = $c8 + main::x#2
  SCREEN[main::$0] = MAPDATA[main::$1]
  main::$2 = $c8 + main::x#2
  main::$3 = $c8 + main::x#2
  COLS[main::$2] = COLORMAP1[MAPDATA[main::$3]]
  main::$4 = $190 + main::x#2
  main::$5 = $190 + main::x#2
  SCREEN[main::$4] = MAPDATA[main::$5]
  main::$6 = $190 + main::x#2
  main::$7 = $190 + main::x#2
  COLS[main::$6] = COLORMAP1[MAPDATA[main::$7]]
  main::$8 = $258 + main::x#2
  main::$9 = $258 + main::x#2
  SCREEN[main::$8] = MAPDATA[main::$9]
  main::$10 = $258 + main::x#2
  main::$11 = $258 + main::x#2
  COLS[main::$10] = COLORMAP2[MAPDATA[main::$11]]
  main::$12 = $320 + main::x#2
  main::$13 = $320 + main::x#2
  SCREEN[main::$12] = MAPDATA[main::$13]
  main::$14 = $320 + main::x#2
  main::$15 = $320 + main::x#2
  COLS[main::$14] = COLORMAP2[MAPDATA[main::$15]]
  main::x#1 = main::x#2 + rangenext(0,$c8)
  main::$16 = main::x#1 != rangelast(0,$c8)
  if(main::$16) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* COLORMAP1[$100]  = { fill( $100, 0) }
const byte* COLORMAP2[$100]  = { fill( $100, 0) }
const byte* COLS = (byte*)$d800
const byte* MAPDATA[$3e8]  = { fill( $3e8, 0) }
const byte* SCREEN = (byte*)$400
void __start()
void main()
number~ main::$0
number~ main::$1
number~ main::$10
number~ main::$11
number~ main::$12
number~ main::$13
number~ main::$14
number~ main::$15
bool~ main::$16
number~ main::$2
number~ main::$3
number~ main::$4
number~ main::$5
number~ main::$6
number~ main::$7
number~ main::$8
number~ main::$9
byte main::x
byte main::x#0
byte main::x#1
byte main::x#2

Adding number conversion cast (unumber) $c8 in main::$0 = $c8 + main::x#2
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)$c8 + main::x#2
Adding number conversion cast (unumber) $c8 in main::$1 = $c8 + main::x#2
Adding number conversion cast (unumber) main::$1 in main::$1 = (unumber)$c8 + main::x#2
Adding number conversion cast (unumber) $c8 in main::$2 = $c8 + main::x#2
Adding number conversion cast (unumber) main::$2 in main::$2 = (unumber)$c8 + main::x#2
Adding number conversion cast (unumber) $c8 in main::$3 = $c8 + main::x#2
Adding number conversion cast (unumber) main::$3 in main::$3 = (unumber)$c8 + main::x#2
Adding number conversion cast (unumber) $190 in main::$4 = $190 + main::x#2
Adding number conversion cast (unumber) main::$4 in main::$4 = (unumber)$190 + main::x#2
Adding number conversion cast (unumber) $190 in main::$5 = $190 + main::x#2
Adding number conversion cast (unumber) main::$5 in main::$5 = (unumber)$190 + main::x#2
Adding number conversion cast (unumber) $190 in main::$6 = $190 + main::x#2
Adding number conversion cast (unumber) main::$6 in main::$6 = (unumber)$190 + main::x#2
Adding number conversion cast (unumber) $190 in main::$7 = $190 + main::x#2
Adding number conversion cast (unumber) main::$7 in main::$7 = (unumber)$190 + main::x#2
Adding number conversion cast (unumber) $258 in main::$8 = $258 + main::x#2
Adding number conversion cast (unumber) main::$8 in main::$8 = (unumber)$258 + main::x#2
Adding number conversion cast (unumber) $258 in main::$9 = $258 + main::x#2
Adding number conversion cast (unumber) main::$9 in main::$9 = (unumber)$258 + main::x#2
Adding number conversion cast (unumber) $258 in main::$10 = $258 + main::x#2
Adding number conversion cast (unumber) main::$10 in main::$10 = (unumber)$258 + main::x#2
Adding number conversion cast (unumber) $258 in main::$11 = $258 + main::x#2
Adding number conversion cast (unumber) main::$11 in main::$11 = (unumber)$258 + main::x#2
Adding number conversion cast (unumber) $320 in main::$12 = $320 + main::x#2
Adding number conversion cast (unumber) main::$12 in main::$12 = (unumber)$320 + main::x#2
Adding number conversion cast (unumber) $320 in main::$13 = $320 + main::x#2
Adding number conversion cast (unumber) main::$13 in main::$13 = (unumber)$320 + main::x#2
Adding number conversion cast (unumber) $320 in main::$14 = $320 + main::x#2
Adding number conversion cast (unumber) main::$14 in main::$14 = (unumber)$320 + main::x#2
Adding number conversion cast (unumber) $320 in main::$15 = $320 + main::x#2
Adding number conversion cast (unumber) main::$15 in main::$15 = (unumber)$320 + main::x#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast $c8
Simplifying constant integer cast $c8
Simplifying constant integer cast $c8
Simplifying constant integer cast $c8
Simplifying constant integer cast $190
Simplifying constant integer cast $190
Simplifying constant integer cast $190
Simplifying constant integer cast $190
Simplifying constant integer cast $258
Simplifying constant integer cast $258
Simplifying constant integer cast $258
Simplifying constant integer cast $258
Simplifying constant integer cast $320
Simplifying constant integer cast $320
Simplifying constant integer cast $320
Simplifying constant integer cast $320
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $c8
Finalized unsigned number type $c8
Finalized unsigned number type $c8
Finalized unsigned number type $c8
Finalized unsigned number type $190
Finalized unsigned number type $190
Finalized unsigned number type $190
Finalized unsigned number type $190
Finalized unsigned number type $258
Finalized unsigned number type $258
Finalized unsigned number type $258
Finalized unsigned number type $258
Finalized unsigned number type $320
Finalized unsigned number type $320
Finalized unsigned number type $320
Finalized unsigned number type $320
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = $c8 + main::x#2
Inferred type updated to byte in main::$1 = $c8 + main::x#2
Inferred type updated to byte in main::$2 = $c8 + main::x#2
Inferred type updated to byte in main::$3 = $c8 + main::x#2
Inferred type updated to word in main::$4 = $190 + main::x#2
Inferred type updated to word in main::$5 = $190 + main::x#2
Inferred type updated to word in main::$6 = $190 + main::x#2
Inferred type updated to word in main::$7 = $190 + main::x#2
Inferred type updated to word in main::$8 = $258 + main::x#2
Inferred type updated to word in main::$9 = $258 + main::x#2
Inferred type updated to word in main::$10 = $258 + main::x#2
Inferred type updated to word in main::$11 = $258 + main::x#2
Inferred type updated to word in main::$12 = $320 + main::x#2
Inferred type updated to word in main::$13 = $320 + main::x#2
Inferred type updated to word in main::$14 = $320 + main::x#2
Inferred type updated to word in main::$15 = $320 + main::x#2
Simple Condition main::$16 [30] if(main::x#1!=rangelast(0,$c8)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::x#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [28] main::x#1 = ++ main::x#2 to ++
Resolved ranged comparison value [30] if(main::x#1!=rangelast(0,$c8)) goto main::@1 to $c9
De-inlining pointer[w] to *(pointer+w)   [12] SCREEN[main::$4] = MAPDATA[main::$5]
De-inlining pointer[w] to *(pointer+w)   [12] SCREEN[main::$4] = *main::$17
De-inlining pointer[w] to *(pointer+w)   [15] COLS[main::$6] = COLORMAP1[MAPDATA[main::$7]]
De-inlining pointer[w] to *(pointer+w)   [15] COLS[main::$6] = COLORMAP1[*main::$19]
De-inlining pointer[w] to *(pointer+w)   [18] SCREEN[main::$8] = MAPDATA[main::$9]
De-inlining pointer[w] to *(pointer+w)   [18] SCREEN[main::$8] = *main::$21
De-inlining pointer[w] to *(pointer+w)   [21] COLS[main::$10] = COLORMAP2[MAPDATA[main::$11]]
De-inlining pointer[w] to *(pointer+w)   [21] COLS[main::$10] = COLORMAP2[*main::$23]
De-inlining pointer[w] to *(pointer+w)   [24] SCREEN[main::$12] = MAPDATA[main::$13]
De-inlining pointer[w] to *(pointer+w)   [24] SCREEN[main::$12] = *main::$25
De-inlining pointer[w] to *(pointer+w)   [27] COLS[main::$14] = COLORMAP2[MAPDATA[main::$15]]
De-inlining pointer[w] to *(pointer+w)   [27] COLS[main::$14] = COLORMAP2[*main::$27]
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $c9 in [40] if(main::x#1!=$c9) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $c9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $c9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::x#0
Constant inlined main::x#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment (MAPDATA+$c8)[main::$1]
Consolidated array index constant in assignment (SCREEN+$c8)[main::$0]
Consolidated array index constant in assignment (MAPDATA+$c8)[main::$3]
Consolidated array index constant in assignment (COLS+$c8)[main::$2]
Consolidated constant in assignment main::$17
Consolidated constant in assignment main::$18
Consolidated constant in assignment main::$19
Consolidated constant in assignment main::$20
Consolidated constant in assignment main::$21
Consolidated constant in assignment main::$22
Consolidated constant in assignment main::$23
Consolidated constant in assignment main::$24
Consolidated constant in assignment main::$25
Consolidated constant in assignment main::$26
Consolidated constant in assignment main::$27
Consolidated constant in assignment main::$28
Successful SSA optimization Pass2ConstantAdditionElimination
Alias main::x#2 = main::$0 main::$1 main::$2 main::$3 main::$4 main::$5 main::$6 main::$7 main::$8 main::$9 main::$10 main::$11 main::$12 main::$13 main::$14 main::$15 
Successful SSA optimization Pass2AliasElimination
Converting *(pointer+n) to pointer[n] [7] *main::$18 = *main::$17  -- (MAPDATA+$190)[main::x#2]
Converting *(pointer+n) to pointer[n] [7] *main::$18 = (MAPDATA+$190)[main::x#2]  -- (SCREEN+$190)[main::x#2]
Converting *(pointer+n) to pointer[n] [10] *main::$20 = COLORMAP1[*main::$19]  -- (MAPDATA+$190)[main::x#2]
Converting *(pointer+n) to pointer[n] [10] *main::$20 = COLORMAP1[(MAPDATA+$190)[main::x#2]]  -- (COLS+$190)[main::x#2]
Converting *(pointer+n) to pointer[n] [13] *main::$22 = *main::$21  -- (MAPDATA+$258)[main::x#2]
Converting *(pointer+n) to pointer[n] [13] *main::$22 = (MAPDATA+$258)[main::x#2]  -- (SCREEN+$258)[main::x#2]
Converting *(pointer+n) to pointer[n] [16] *main::$24 = COLORMAP2[*main::$23]  -- (MAPDATA+$258)[main::x#2]
Converting *(pointer+n) to pointer[n] [16] *main::$24 = COLORMAP2[(MAPDATA+$258)[main::x#2]]  -- (COLS+$258)[main::x#2]
Converting *(pointer+n) to pointer[n] [19] *main::$26 = *main::$25  -- (MAPDATA+$320)[main::x#2]
Converting *(pointer+n) to pointer[n] [19] *main::$26 = (MAPDATA+$320)[main::x#2]  -- (SCREEN+$320)[main::x#2]
Converting *(pointer+n) to pointer[n] [22] *main::$28 = COLORMAP2[*main::$27]  -- (MAPDATA+$320)[main::x#2]
Converting *(pointer+n) to pointer[n] [22] *main::$28 = COLORMAP2[(MAPDATA+$320)[main::x#2]]  -- (COLS+$320)[main::x#2]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable main::$17 and assignment [5] main::$17 = MAPDATA+$190 + main::x#2
Eliminating unused variable main::$18 and assignment [6] main::$18 = SCREEN+$190 + main::x#2
Eliminating unused variable main::$19 and assignment [8] main::$19 = MAPDATA+$190 + main::x#2
Eliminating unused variable main::$20 and assignment [9] main::$20 = COLS+$190 + main::x#2
Eliminating unused variable main::$21 and assignment [11] main::$21 = MAPDATA+$258 + main::x#2
Eliminating unused variable main::$22 and assignment [12] main::$22 = SCREEN+$258 + main::x#2
Eliminating unused variable main::$23 and assignment [14] main::$23 = MAPDATA+$258 + main::x#2
Eliminating unused variable main::$24 and assignment [15] main::$24 = COLS+$258 + main::x#2
Eliminating unused variable main::$25 and assignment [17] main::$25 = MAPDATA+$320 + main::x#2
Eliminating unused variable main::$26 and assignment [18] main::$26 = SCREEN+$320 + main::x#2
Eliminating unused variable main::$27 and assignment [20] main::$27 = MAPDATA+$320 + main::x#2
Eliminating unused variable main::$28 and assignment [21] main::$28 = COLS+$320 + main::x#2
Successful SSA optimization PassNEliminateUnusedVars
Finalized unsigned number type $3e8
Finalized unsigned number type $3e8
Finalized unsigned number type $100
Finalized unsigned number type $100
Finalized unsigned number type $100
Finalized unsigned number type $100
Successful SSA optimization Pass2FinalizeAllNumbers
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [15] main::x#3 = main::x#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::x#2 = phi( main/0, main::@1/main::x#1 )
  [2] SCREEN[main::x#2] = MAPDATA[main::x#2]
  [3] COLS[main::x#2] = COLORMAP1[MAPDATA[main::x#2]]
  [4] (SCREEN+$c8)[main::x#2] = (MAPDATA+$c8)[main::x#2]
  [5] (COLS+$c8)[main::x#2] = COLORMAP1[(MAPDATA+$c8)[main::x#2]]
  [6] (SCREEN+$190)[main::x#2] = (MAPDATA+$190)[main::x#2]
  [7] (COLS+$190)[main::x#2] = COLORMAP1[(MAPDATA+$190)[main::x#2]]
  [8] (SCREEN+$258)[main::x#2] = (MAPDATA+$258)[main::x#2]
  [9] (COLS+$258)[main::x#2] = COLORMAP2[(MAPDATA+$258)[main::x#2]]
  [10] (SCREEN+$320)[main::x#2] = (MAPDATA+$320)[main::x#2]
  [11] (COLS+$320)[main::x#2] = COLORMAP2[(MAPDATA+$320)[main::x#2]]
  [12] main::x#1 = ++ main::x#2
  [13] if(main::x#1!=$c9) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::x
byte main::x#1 16.5
byte main::x#2 22.0

Initial phi equivalence classes
[ main::x#2 main::x#1 ]
Complete equivalence classes
[ main::x#2 main::x#1 ]
Allocated zp[1]:2 [ main::x#2 main::x#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] SCREEN[main::x#2] = MAPDATA[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Statement [3] COLS[main::x#2] = COLORMAP1[MAPDATA[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [4] (SCREEN+$c8)[main::x#2] = (MAPDATA+$c8)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [5] (COLS+$c8)[main::x#2] = COLORMAP1[(MAPDATA+$c8)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [6] (SCREEN+$190)[main::x#2] = (MAPDATA+$190)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [7] (COLS+$190)[main::x#2] = COLORMAP1[(MAPDATA+$190)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [8] (SCREEN+$258)[main::x#2] = (MAPDATA+$258)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [9] (COLS+$258)[main::x#2] = COLORMAP2[(MAPDATA+$258)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [10] (SCREEN+$320)[main::x#2] = (MAPDATA+$320)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [11] (COLS+$320)[main::x#2] = COLORMAP2[(MAPDATA+$320)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [2] SCREEN[main::x#2] = MAPDATA[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [3] COLS[main::x#2] = COLORMAP1[MAPDATA[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [4] (SCREEN+$c8)[main::x#2] = (MAPDATA+$c8)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [5] (COLS+$c8)[main::x#2] = COLORMAP1[(MAPDATA+$c8)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [6] (SCREEN+$190)[main::x#2] = (MAPDATA+$190)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [7] (COLS+$190)[main::x#2] = COLORMAP1[(MAPDATA+$190)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [8] (SCREEN+$258)[main::x#2] = (MAPDATA+$258)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [9] (COLS+$258)[main::x#2] = COLORMAP2[(MAPDATA+$258)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [10] (SCREEN+$320)[main::x#2] = (MAPDATA+$320)[main::x#2] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [11] (COLS+$320)[main::x#2] = COLORMAP2[(MAPDATA+$320)[main::x#2]] [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::x#2 main::x#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::x#2 main::x#1 ] 
Uplift Scope [] 

Uplifting [main] best 1356 combination reg byte x [ main::x#2 main::x#1 ] 
Uplifting [] best 1356 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that constant offset indexing into arrays is handled correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label COLS = $d800
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::x#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::x#2 = main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] SCREEN[main::x#2] = MAPDATA[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA,x
    sta SCREEN,x
    // [3] COLS[main::x#2] = COLORMAP1[MAPDATA[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA,x
    lda COLORMAP1,y
    sta COLS,x
    // [4] (SCREEN+$c8)[main::x#2] = (MAPDATA+$c8)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$c8,x
    sta SCREEN+$c8,x
    // [5] (COLS+$c8)[main::x#2] = COLORMAP1[(MAPDATA+$c8)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$c8,x
    lda COLORMAP1,y
    sta COLS+$c8,x
    // [6] (SCREEN+$190)[main::x#2] = (MAPDATA+$190)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$190,x
    sta SCREEN+$190,x
    // [7] (COLS+$190)[main::x#2] = COLORMAP1[(MAPDATA+$190)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$190,x
    lda COLORMAP1,y
    sta COLS+$190,x
    // [8] (SCREEN+$258)[main::x#2] = (MAPDATA+$258)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$258,x
    sta SCREEN+$258,x
    // [9] (COLS+$258)[main::x#2] = COLORMAP2[(MAPDATA+$258)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$258,x
    lda COLORMAP2,y
    sta COLS+$258,x
    // [10] (SCREEN+$320)[main::x#2] = (MAPDATA+$320)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$320,x
    sta SCREEN+$320,x
    // [11] (COLS+$320)[main::x#2] = COLORMAP2[(MAPDATA+$320)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$320,x
    lda COLORMAP2,y
    sta COLS+$320,x
    // [12] main::x#1 = ++ main::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if(main::x#1!=$c9) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c9
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
  MAPDATA: .fill $3e8, 0
  COLORMAP1: .fill $100, 0
  COLORMAP2: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte* COLORMAP1[$100]  = { fill( $100, 0) }
const byte* COLORMAP2[$100]  = { fill( $100, 0) }
const byte* COLS = (byte*) 55296
const byte* MAPDATA[$3e8]  = { fill( $3e8, 0) }
const byte* SCREEN = (byte*) 1024
void main()
byte main::x
byte main::x#1 reg byte x 16.5
byte main::x#2 reg byte x 22.0

reg byte x [ main::x#2 main::x#1 ]


FINAL ASSEMBLER
Score: 1266

  // File Comments
// Tests that constant offset indexing into arrays is handled correctly
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label COLS = $d800
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::x#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::x#2 = main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[x] = MAPDATA[x]
    // [2] SCREEN[main::x#2] = MAPDATA[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA,x
    sta SCREEN,x
    // COLS[x] = COLORMAP1[MAPDATA[x]]
    // [3] COLS[main::x#2] = COLORMAP1[MAPDATA[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA,x
    lda COLORMAP1,y
    sta COLS,x
    // SCREEN[200+x] = MAPDATA[200+x]
    // [4] (SCREEN+$c8)[main::x#2] = (MAPDATA+$c8)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$c8,x
    sta SCREEN+$c8,x
    // COLS[200+x] = COLORMAP1[MAPDATA[200+x]]
    // [5] (COLS+$c8)[main::x#2] = COLORMAP1[(MAPDATA+$c8)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$c8,x
    lda COLORMAP1,y
    sta COLS+$c8,x
    // SCREEN[400+x] = MAPDATA[400+x]
    // [6] (SCREEN+$190)[main::x#2] = (MAPDATA+$190)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$190,x
    sta SCREEN+$190,x
    // COLS[400+x] = COLORMAP1[MAPDATA[400+x]]
    // [7] (COLS+$190)[main::x#2] = COLORMAP1[(MAPDATA+$190)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$190,x
    lda COLORMAP1,y
    sta COLS+$190,x
    // SCREEN[600+x] = MAPDATA[600+x]
    // [8] (SCREEN+$258)[main::x#2] = (MAPDATA+$258)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$258,x
    sta SCREEN+$258,x
    // COLS[600+x] = COLORMAP2[MAPDATA[600+x]]
    // [9] (COLS+$258)[main::x#2] = COLORMAP2[(MAPDATA+$258)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$258,x
    lda COLORMAP2,y
    sta COLS+$258,x
    // SCREEN[800+x] = MAPDATA[800+x]
    // [10] (SCREEN+$320)[main::x#2] = (MAPDATA+$320)[main::x#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MAPDATA+$320,x
    sta SCREEN+$320,x
    // COLS[800+x] = COLORMAP2[MAPDATA[800+x]]
    // [11] (COLS+$320)[main::x#2] = COLORMAP2[(MAPDATA+$320)[main::x#2]] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(pbuc3_derefidx_vbuxx) 
    ldy MAPDATA+$320,x
    lda COLORMAP2,y
    sta COLS+$320,x
    // for (byte x: 0..200)
    // [12] main::x#1 = ++ main::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [13] if(main::x#1!=$c9) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c9
    bne __b1
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data
  MAPDATA: .fill $3e8, 0
  COLORMAP1: .fill $100, 0
  COLORMAP2: .fill $100, 0

