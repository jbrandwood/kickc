(label) @1
(label) @begin
(label) @end
(const byte*) BGCOL = (byte*) 53280
(const byte*) CHARGEN = (byte*) 53248
(const byte*) PROCPORT = (byte*) 1
(const byte*) RASTER = (byte*) 53266
(const byte*) SCREEN = (byte*) 1024
(const byte*) SCROLL = (byte*) 53270
(const byte*) TEXT = (byte*) "-= this is rex of camelot testing a scroller created in kickc. kickc is an optimizing c-compiler for 6502 assembler. =-     "
(byte) current_bit
(byte) current_bit#12 current_bit zp[1]:2 420.59999999999997
(byte) current_bit#21 current_bit zp[1]:2 56166.83333333333
(byte) current_bit#29 current_bit zp[1]:2 1872.1428571428573
(byte) current_bit#5 current_bit zp[1]:2 15001.5
(byte*) current_chargen
(byte*) current_chargen#11 current_chargen zp[2]:3 420.59999999999997
(byte*) current_chargen#19 current_chargen zp[2]:3 56722.444444444445
(byte*) current_chargen#27 current_chargen zp[2]:3 1456.111111111111
(byte*) current_chargen#5 current_chargen zp[2]:3 20002.0
(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
(label) fillscreen::@1
(label) fillscreen::@2
(label) fillscreen::@return
(byte*) fillscreen::cursor
(byte*) fillscreen::cursor#1 cursor zp[2]:7 2002.0
(byte*) fillscreen::cursor#2 cursor zp[2]:7 1334.6666666666667
(byte) fillscreen::fill
(const byte) fillscreen::fill#0 fill = (byte) $20
(byte*) fillscreen::screen
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(byte()) next_char()
(label) next_char::@1
(label) next_char::@2
(label) next_char::@return
(byte) next_char::c
(byte) next_char::c#0 reg byte x 150001.5
(byte) next_char::c#1 reg byte x 200002.0
(byte) next_char::return
(byte) next_char::return#0 reg byte a 20002.0
(byte) next_char::return#1 reg byte x 52500.75
(byte*) nxt
(byte*) nxt#14 nxt zp[2]:5 420.59999999999997
(byte*) nxt#18 nxt zp[2]:5 200002.0
(byte*) nxt#19 nxt zp[2]:5 15714.57142857143
(byte*) nxt#31 nxt zp[2]:5 17758.916666666664
(byte*) nxt#35 nxt zp[2]:5 1166.8333333333333
(byte) scroll
(byte) scroll#10 reg byte x 420.59999999999997
(byte) scroll#18 reg byte x 776.0
(byte) scroll#3 reg byte x 1501.5
(void()) scroll_bit()
(word~) scroll_bit::$7 zp[2]:3 20002.0
(byte~) scroll_bit::$9 reg byte a 2000002.0
(label) scroll_bit::@1
(label) scroll_bit::@2
(label) scroll_bit::@3
(label) scroll_bit::@4
(label) scroll_bit::@5
(label) scroll_bit::@6
(label) scroll_bit::@7
(label) scroll_bit::@8
(label) scroll_bit::@return
(byte) scroll_bit::b
(byte) scroll_bit::b#2 reg byte a 1000001.0
(byte) scroll_bit::bits
(byte) scroll_bit::bits#0 reg byte a 2000002.0
(word) scroll_bit::c
(word) scroll_bit::c#0 c zp[2]:3 20002.0
(byte) scroll_bit::r
(byte) scroll_bit::r#1 reg byte x 1500001.5
(byte) scroll_bit::r#2 reg byte x 375000.375
(byte*) scroll_bit::sc
(byte*) scroll_bit::sc#1 sc zp[2]:7 666667.3333333334
(byte*) scroll_bit::sc#2 sc zp[2]:7 428571.85714285716
(void()) scroll_hard()
(label) scroll_hard::@1
(label) scroll_hard::@2
(label) scroll_hard::@return
(byte) scroll_hard::i
(byte) scroll_hard::i#1 reg byte x 2.0000002E7
(byte) scroll_hard::i#2 reg byte x 1.90000019E7
(void()) scroll_soft()
(label) scroll_soft::@1
(label) scroll_soft::@2
(label) scroll_soft::@return

reg byte x [ scroll#18 scroll#10 scroll#3 ]
zp[1]:2 [ current_bit#29 current_bit#12 current_bit#21 current_bit#5 ]
zp[2]:3 [ current_chargen#27 current_chargen#11 current_chargen#19 current_chargen#5 scroll_bit::$7 scroll_bit::c#0 ]
reg byte x [ scroll_bit::r#2 scroll_bit::r#1 ]
reg byte a [ scroll_bit::b#2 ]
reg byte x [ scroll_hard::i#2 scroll_hard::i#1 ]
zp[2]:5 [ nxt#18 nxt#31 nxt#14 nxt#35 nxt#19 ]
reg byte x [ next_char::return#1 next_char::c#0 next_char::c#1 ]
zp[2]:7 [ fillscreen::cursor#2 fillscreen::cursor#1 scroll_bit::sc#2 scroll_bit::sc#1 ]
reg byte a [ next_char::return#0 ]
reg byte a [ scroll_bit::bits#0 ]
reg byte a [ scroll_bit::$9 ]
