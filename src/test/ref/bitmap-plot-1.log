Resolved forward reference frame_cnt to frame_cnt
Resolved forward reference frame_cnt to frame_cnt
Resolved forward reference frame_cnt to frame_cnt
Resolved forward reference irq to __interrupt(hardware_clobber) void irq()
Inlined call vicSelectGfxBank::$0 = call toDd00(vicSelectGfxBank::gfx)
Inlined call main::$3 = call toD018(SCREEN, BITMAP)
Inlined call call __init
Eliminating unused variable with no statement sin16s_gen2::$0
Eliminating unused variable with no statement sin16s_gen2::$2
Eliminating unused variable with no statement sin16s_gen2::$3
Eliminating unused variable with no statement sin16s::$5
Eliminating unused variable with no statement sin16s::$6
Eliminating unused variable with no statement sin16s::$7
Eliminating unused variable with no statement sin16s::$8
Eliminating unused variable with no statement sin16s::$9
Eliminating unused variable with no statement sin16s::$10
Eliminating unused variable with no statement sin16s::$11
Eliminating unused variable with no statement sin16s::$12
Eliminating unused variable with no statement div32u16u::$1
Eliminating unused variable with no statement div32u16u::$3
Eliminating unused variable with no statement div32u16u::$4
Eliminating unused variable with no statement mul16s::$0
Eliminating unused variable with no statement bitmap_clear::$1
Eliminating unused variable with no statement memset::$2
Eliminating unused variable with no statement main::$5
Eliminating unused variable with no statement main::$9

CONTROL FLOW GRAPH SSA

void sin16s_gen2(int *sintab , unsigned int wavelength , int min , int max)
sin16s_gen2: scope:[sin16s_gen2]  from main
  sin16s_gen2::sintab#7 = phi( main/sin16s_gen2::sintab#1 )
  rem16u#22 = phi( main/rem16u#25 )
  sin16s_gen2::wavelength#1 = phi( main/sin16s_gen2::wavelength#0 )
  sin16s_gen2::min#1 = phi( main/sin16s_gen2::min#0 )
  sin16s_gen2::max#1 = phi( main/sin16s_gen2::max#0 )
  sin16s_gen2::ampl#0 = sin16s_gen2::max#1 - sin16s_gen2::min#1
  sin16s_gen2::$1 = sin16s_gen2::ampl#0 >> 1
  sin16s_gen2::offs#0 = sin16s_gen2::min#1 + sin16s_gen2::$1
  div32u16u::dividend#0 = PI2_u4f28
  div32u16u::divisor#0 = sin16s_gen2::wavelength#1
  call div32u16u
  div32u16u::return#0 = div32u16u::return#2
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  sin16s_gen2::sintab#6 = phi( sin16s_gen2/sin16s_gen2::sintab#7 )
  sin16s_gen2::offs#5 = phi( sin16s_gen2/sin16s_gen2::offs#0 )
  sin16s_gen2::ampl#4 = phi( sin16s_gen2/sin16s_gen2::ampl#0 )
  sin16s_gen2::wavelength#3 = phi( sin16s_gen2/sin16s_gen2::wavelength#1 )
  rem16u#12 = phi( sin16s_gen2/rem16u#6 )
  div32u16u::return#3 = phi( sin16s_gen2/div32u16u::return#0 )
  sin16s_gen2::step#0 = div32u16u::return#3
  rem16u#0 = rem16u#12
  sin16s_gen2::x#0 = 0
  sin16s_gen2::i#0 = 0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  sin16s_gen2::step#4 = phi( sin16s_gen2::@3/sin16s_gen2::step#0, sin16s_gen2::@5/sin16s_gen2::step#1 )
  sin16s_gen2::sintab#5 = phi( sin16s_gen2::@3/sin16s_gen2::sintab#6, sin16s_gen2::@5/sin16s_gen2::sintab#0 )
  sin16s_gen2::offs#4 = phi( sin16s_gen2::@3/sin16s_gen2::offs#5, sin16s_gen2::@5/sin16s_gen2::offs#1 )
  sin16s_gen2::ampl#3 = phi( sin16s_gen2::@3/sin16s_gen2::ampl#4, sin16s_gen2::@5/sin16s_gen2::ampl#5 )
  rem16u#23 = phi( sin16s_gen2::@3/rem16u#0, sin16s_gen2::@5/rem16u#28 )
  sin16s_gen2::x#4 = phi( sin16s_gen2::@3/sin16s_gen2::x#0, sin16s_gen2::@5/sin16s_gen2::x#1 )
  sin16s_gen2::wavelength#2 = phi( sin16s_gen2::@3/sin16s_gen2::wavelength#3, sin16s_gen2::@5/sin16s_gen2::wavelength#4 )
  sin16s_gen2::i#2 = phi( sin16s_gen2::@3/sin16s_gen2::i#0, sin16s_gen2::@5/sin16s_gen2::i#1 )
  sin16s_gen2::$4 = sin16s_gen2::i#2 < sin16s_gen2::wavelength#2
  if(sin16s_gen2::$4) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  rem16u#35 = phi( sin16s_gen2::@1/rem16u#23 )
  sin16s_gen2::wavelength#6 = phi( sin16s_gen2::@1/sin16s_gen2::wavelength#2 )
  sin16s_gen2::i#5 = phi( sin16s_gen2::@1/sin16s_gen2::i#2 )
  sin16s_gen2::step#3 = phi( sin16s_gen2::@1/sin16s_gen2::step#4 )
  sin16s_gen2::sintab#4 = phi( sin16s_gen2::@1/sin16s_gen2::sintab#5 )
  sin16s_gen2::offs#3 = phi( sin16s_gen2::@1/sin16s_gen2::offs#4 )
  sin16s_gen2::ampl#2 = phi( sin16s_gen2::@1/sin16s_gen2::ampl#3 )
  sin16s_gen2::x#2 = phi( sin16s_gen2::@1/sin16s_gen2::x#4 )
  sin16s::x#0 = sin16s_gen2::x#2
  call sin16s
  sin16s::return#0 = sin16s::return#2
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  rem16u#31 = phi( sin16s_gen2::@2/rem16u#35 )
  sin16s_gen2::wavelength#5 = phi( sin16s_gen2::@2/sin16s_gen2::wavelength#6 )
  sin16s_gen2::i#4 = phi( sin16s_gen2::@2/sin16s_gen2::i#5 )
  sin16s_gen2::step#2 = phi( sin16s_gen2::@2/sin16s_gen2::step#3 )
  sin16s_gen2::x#5 = phi( sin16s_gen2::@2/sin16s_gen2::x#2 )
  sin16s_gen2::sintab#3 = phi( sin16s_gen2::@2/sin16s_gen2::sintab#4 )
  sin16s_gen2::offs#2 = phi( sin16s_gen2::@2/sin16s_gen2::offs#3 )
  sin16s_gen2::ampl#1 = phi( sin16s_gen2::@2/sin16s_gen2::ampl#2 )
  sin16s::return#3 = phi( sin16s_gen2::@2/sin16s::return#0 )
  sin16s_gen2::$5 = sin16s::return#3
  mul16s::a#0 = sin16s_gen2::$5
  mul16s::b#0 = sin16s_gen2::ampl#1
  call mul16s
  mul16s::return#0 = mul16s::return#2
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  sin16s_gen2::ampl#5 = phi( sin16s_gen2::@4/sin16s_gen2::ampl#1 )
  rem16u#28 = phi( sin16s_gen2::@4/rem16u#31 )
  sin16s_gen2::wavelength#4 = phi( sin16s_gen2::@4/sin16s_gen2::wavelength#5 )
  sin16s_gen2::i#3 = phi( sin16s_gen2::@4/sin16s_gen2::i#4 )
  sin16s_gen2::step#1 = phi( sin16s_gen2::@4/sin16s_gen2::step#2 )
  sin16s_gen2::x#3 = phi( sin16s_gen2::@4/sin16s_gen2::x#5 )
  sin16s_gen2::sintab#2 = phi( sin16s_gen2::@4/sin16s_gen2::sintab#3 )
  sin16s_gen2::offs#1 = phi( sin16s_gen2::@4/sin16s_gen2::offs#2 )
  mul16s::return#5 = phi( sin16s_gen2::@4/mul16s::return#0 )
  sin16s_gen2::$6 = mul16s::return#5
  sin16s_gen2::$7 = word1  sin16s_gen2::$6
  sin16s_gen2::$10 = (int)sin16s_gen2::$7
  sin16s_gen2::$8 = sin16s_gen2::offs#1 + sin16s_gen2::$10
  *sin16s_gen2::sintab#2 = sin16s_gen2::$8
  sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_INT
  sin16s_gen2::$9 = sin16s_gen2::x#3 + sin16s_gen2::step#1
  sin16s_gen2::x#1 = sin16s_gen2::$9
  sin16s_gen2::i#1 = ++ sin16s_gen2::i#3
  to:sin16s_gen2::@1
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  rem16u#13 = phi( sin16s_gen2::@1/rem16u#23 )
  rem16u#1 = rem16u#13
  return 
  to:@return

int sin16s(unsigned long x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  sin16s::x#3 = phi( sin16s_gen2::@2/sin16s::x#0 )
  sin16s::isUpper#0 = 0
  sin16s::$0 = sin16s::x#3 >= PI_u4f28
  sin16s::$1 = ! sin16s::$0
  if(sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  sin16s::isUpper#8 = phi( sin16s/sin16s::isUpper#0, sin16s::@4/sin16s::isUpper#1 )
  sin16s::x#4 = phi( sin16s/sin16s::x#3, sin16s::@4/sin16s::x#1 )
  sin16s::$2 = sin16s::x#4 >= PI_HALF_u4f28
  sin16s::$3 = ! sin16s::$2
  if(sin16s::$3) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  sin16s::x#5 = phi( sin16s/sin16s::x#3 )
  sin16s::$16 = sin16s::x#5 - PI_u4f28
  sin16s::x#1 = sin16s::$16
  sin16s::isUpper#1 = 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  sin16s::isUpper#7 = phi( sin16s::@1/sin16s::isUpper#8, sin16s::@5/sin16s::isUpper#9 )
  sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  sin16s::$4 = sin16s::x#6 << 3
  sin16s::x1#0 = word1  sin16s::$4
  mulu16_sel::v1#0 = sin16s::x1#0
  mulu16_sel::v2#0 = sin16s::x1#0
  mulu16_sel::select#0 = 0
  call mulu16_sel
  mulu16_sel::return#0 = mulu16_sel::return#6
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  sin16s::isUpper#6 = phi( sin16s::@2/sin16s::isUpper#7 )
  sin16s::x1#1 = phi( sin16s::@2/sin16s::x1#0 )
  mulu16_sel::return#7 = phi( sin16s::@2/mulu16_sel::return#0 )
  sin16s::x2#0 = mulu16_sel::return#7
  mulu16_sel::v1#1 = sin16s::x2#0
  mulu16_sel::v2#1 = sin16s::x1#1
  mulu16_sel::select#1 = 1
  call mulu16_sel
  mulu16_sel::return#1 = mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  sin16s::isUpper#5 = phi( sin16s::@7/sin16s::isUpper#6 )
  sin16s::x1#4 = phi( sin16s::@7/sin16s::x1#1 )
  mulu16_sel::return#8 = phi( sin16s::@7/mulu16_sel::return#1 )
  sin16s::x3#0 = mulu16_sel::return#8
  mulu16_sel::v1#2 = sin16s::x3#0
  mulu16_sel::v2#2 = $10000/6
  mulu16_sel::select#2 = 1
  call mulu16_sel
  mulu16_sel::return#2 = mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  sin16s::isUpper#4 = phi( sin16s::@8/sin16s::isUpper#5 )
  sin16s::x3#1 = phi( sin16s::@8/sin16s::x3#0 )
  sin16s::x1#2 = phi( sin16s::@8/sin16s::x1#4 )
  mulu16_sel::return#9 = phi( sin16s::@8/mulu16_sel::return#2 )
  sin16s::x3_6#0 = mulu16_sel::return#9
  sin16s::usinx#0 = sin16s::x1#2 - sin16s::x3_6#0
  mulu16_sel::v1#3 = sin16s::x3#1
  mulu16_sel::v2#3 = sin16s::x1#2
  mulu16_sel::select#3 = 0
  call mulu16_sel
  mulu16_sel::return#3 = mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  sin16s::isUpper#3 = phi( sin16s::@9/sin16s::isUpper#4 )
  sin16s::usinx#4 = phi( sin16s::@9/sin16s::usinx#0 )
  sin16s::x1#3 = phi( sin16s::@9/sin16s::x1#2 )
  mulu16_sel::return#10 = phi( sin16s::@9/mulu16_sel::return#3 )
  sin16s::x4#0 = mulu16_sel::return#10
  mulu16_sel::v1#4 = sin16s::x4#0
  mulu16_sel::v2#4 = sin16s::x1#3
  mulu16_sel::select#4 = 0
  call mulu16_sel
  mulu16_sel::return#4 = mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  sin16s::isUpper#2 = phi( sin16s::@10/sin16s::isUpper#3 )
  sin16s::usinx#2 = phi( sin16s::@10/sin16s::usinx#4 )
  mulu16_sel::return#11 = phi( sin16s::@10/mulu16_sel::return#4 )
  sin16s::x5#0 = mulu16_sel::return#11
  sin16s::x5_128#0 = sin16s::x5#0 >> 4
  sin16s::$13 = sin16s::usinx#2 + sin16s::x5_128#0
  sin16s::usinx#1 = sin16s::$13
  sin16s::sinx#0 = (int)sin16s::usinx#1
  sin16s::$14 = sin16s::isUpper#2 != 0
  sin16s::$15 = ! sin16s::$14
  if(sin16s::$15) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  sin16s::isUpper#9 = phi( sin16s::@1/sin16s::isUpper#8 )
  sin16s::x#7 = phi( sin16s::@1/sin16s::x#4 )
  sin16s::$17 = PI_u4f28 - sin16s::x#7
  sin16s::x#2 = sin16s::$17
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@11 sin16s::@6
  sin16s::sinx#2 = phi( sin16s::@11/sin16s::sinx#0, sin16s::@6/sin16s::sinx#1 )
  sin16s::return#1 = sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@11
  sin16s::usinx#3 = phi( sin16s::@11/sin16s::usinx#1 )
  sin16s::$18 = - (int)sin16s::usinx#3
  sin16s::sinx#1 = sin16s::$18
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  sin16s::return#4 = phi( sin16s::@3/sin16s::return#1 )
  sin16s::return#2 = sin16s::return#4
  return 
  to:@return

unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  mulu16_sel::select#6 = phi( sin16s::@10/mulu16_sel::select#4, sin16s::@2/mulu16_sel::select#0, sin16s::@7/mulu16_sel::select#1, sin16s::@8/mulu16_sel::select#2, sin16s::@9/mulu16_sel::select#3 )
  mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/mulu16_sel::v2#2, sin16s::@9/mulu16_sel::v2#3 )
  mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  mul16u::a#0 = mulu16_sel::v1#5
  mul16u::b#0 = mulu16_sel::v2#5
  call mul16u
  mul16u::return#0 = mul16u::return#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  mulu16_sel::select#5 = phi( mulu16_sel/mulu16_sel::select#6 )
  mul16u::return#4 = phi( mulu16_sel/mul16u::return#0 )
  mulu16_sel::$0 = mul16u::return#4
  mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  mulu16_sel::$2 = word1  mulu16_sel::$1
  mulu16_sel::return#5 = mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  mulu16_sel::return#12 = phi( mulu16_sel::@1/mulu16_sel::return#5 )
  mulu16_sel::return#6 = mulu16_sel::return#12
  return 
  to:@return

unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  divr16u::divisor#6 = phi( div32u16u/divr16u::divisor#0, div32u16u::@1/divr16u::divisor#1 )
  divr16u::dividend#5 = phi( div32u16u/divr16u::dividend#1, div32u16u::@1/divr16u::dividend#2 )
  divr16u::rem#10 = phi( div32u16u/divr16u::rem#3, div32u16u::@1/divr16u::rem#4 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#4 = phi( divr16u/divr16u::divisor#6, divr16u::@3/divr16u::divisor#7 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#6 )
  divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  divr16u::$0 = divr16u::rem#5 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = byte1  divr16u::dividend#3
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#2 = phi( divr16u::@1/divr16u::divisor#4, divr16u::@4/divr16u::divisor#5 )
  divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#4 = phi( divr16u::@1/divr16u::dividend#3, divr16u::@4/divr16u::dividend#7 )
  divr16u::$6 = divr16u::dividend#4 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#6 >= divr16u::divisor#2
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#5 = phi( divr16u::@1/divr16u::divisor#4 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#7 = phi( divr16u::@1/divr16u::dividend#3 )
  divr16u::rem#7 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#7 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#7 = phi( divr16u::@2/divr16u::divisor#2, divr16u::@5/divr16u::divisor#3 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#6 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#8 )
  divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#8 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#3 = phi( divr16u::@2/divr16u::divisor#2 )
  divr16u::rem#8 = phi( divr16u::@2/divr16u::rem#6 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#8 - divr16u::divisor#3
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::rem#9 = phi( divr16u::@3/divr16u::rem#11 )
  rem16u#2 = divr16u::rem#9
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  rem16u#14 = phi( divr16u::@6/rem16u#2 )
  divr16u::return#4 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#4
  rem16u#3 = rem16u#14
  return 
  to:@return

unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  rem16u#24 = phi( sin16s_gen2/rem16u#22 )
  div32u16u::divisor#1 = phi( sin16s_gen2/div32u16u::divisor#0 )
  div32u16u::dividend#1 = phi( sin16s_gen2/div32u16u::dividend#0 )
  div32u16u::$0 = word1  div32u16u::dividend#1
  divr16u::dividend#1 = div32u16u::$0
  divr16u::divisor#0 = div32u16u::divisor#1
  divr16u::rem#3 = 0
  call divr16u
  divr16u::return#2 = divr16u::return#1
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  div32u16u::divisor#2 = phi( div32u16u/div32u16u::divisor#1 )
  div32u16u::dividend#2 = phi( div32u16u/div32u16u::dividend#1 )
  rem16u#15 = phi( div32u16u/rem16u#3 )
  divr16u::return#5 = phi( div32u16u/divr16u::return#2 )
  div32u16u::quotient_hi#0 = divr16u::return#5
  rem16u#4 = rem16u#15
  div32u16u::$2 = word0  div32u16u::dividend#2
  divr16u::dividend#2 = div32u16u::$2
  divr16u::divisor#1 = div32u16u::divisor#2
  divr16u::rem#4 = rem16u#4
  call divr16u
  divr16u::return#3 = divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  div32u16u::quotient_hi#1 = phi( div32u16u::@1/div32u16u::quotient_hi#0 )
  rem16u#16 = phi( div32u16u::@1/rem16u#3 )
  divr16u::return#6 = phi( div32u16u::@1/divr16u::return#3 )
  div32u16u::quotient_lo#0 = divr16u::return#6
  rem16u#5 = rem16u#16
  div32u16u::quotient#0 = div32u16u::quotient_hi#1 dw= div32u16u::quotient_lo#0
  div32u16u::return#1 = div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  rem16u#17 = phi( div32u16u::@2/rem16u#5 )
  div32u16u::return#4 = phi( div32u16u::@2/div32u16u::return#1 )
  div32u16u::return#2 = div32u16u::return#4
  rem16u#6 = rem16u#17
  return 
  to:@return

unsigned long mul16u(unsigned int a , unsigned int b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  mul16u::a#6 = phi( mul16s/mul16u::a#2, mulu16_sel/mul16u::a#0 )
  mul16u::b#2 = phi( mul16s/mul16u::b#1, mulu16_sel/mul16u::b#0 )
  mul16u::res#0 = 0
  mul16u::mb#0 = (unsigned long)mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  mul16u::mb#5 = phi( mul16u/mul16u::mb#0, mul16u::@4/mul16u::mb#1 )
  mul16u::res#4 = phi( mul16u/mul16u::res#0, mul16u::@4/mul16u::res#6 )
  mul16u::a#3 = phi( mul16u/mul16u::a#6, mul16u::@4/mul16u::a#1 )
  mul16u::$0 = mul16u::a#3 != 0
  if(mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  mul16u::res#5 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::mb#4 = phi( mul16u::@1/mul16u::mb#5 )
  mul16u::a#4 = phi( mul16u::@1/mul16u::a#3 )
  mul16u::$1 = mul16u::a#4 & 1
  mul16u::$2 = mul16u::$1 != 0
  mul16u::$3 = ! mul16u::$2
  if(mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  mul16u::res#2 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::return#1 = mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  mul16u::res#6 = phi( mul16u::@2/mul16u::res#5, mul16u::@5/mul16u::res#1 )
  mul16u::mb#2 = phi( mul16u::@2/mul16u::mb#4, mul16u::@5/mul16u::mb#3 )
  mul16u::a#5 = phi( mul16u::@2/mul16u::a#4, mul16u::@5/mul16u::a#7 )
  mul16u::$5 = mul16u::a#5 >> 1
  mul16u::a#1 = mul16u::$5
  mul16u::$6 = mul16u::mb#2 << 1
  mul16u::mb#1 = mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  mul16u::a#7 = phi( mul16u::@2/mul16u::a#4 )
  mul16u::mb#3 = phi( mul16u::@2/mul16u::mb#4 )
  mul16u::res#3 = phi( mul16u::@2/mul16u::res#5 )
  mul16u::$4 = mul16u::res#3 + mul16u::mb#3
  mul16u::res#1 = mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  mul16u::return#5 = phi( mul16u::@3/mul16u::return#1 )
  mul16u::return#2 = mul16u::return#5
  return 
  to:@return

long mul16s(int a , int b)
mul16s: scope:[mul16s]  from main::@12 main::@2 sin16s_gen2::@4
  mul16s::b#3 = phi( main::@12/mul16s::b#2, main::@2/mul16s::b#1, sin16s_gen2::@4/mul16s::b#0 )
  mul16s::a#3 = phi( main::@12/mul16s::a#2, main::@2/mul16s::a#1, sin16s_gen2::@4/mul16s::a#0 )
  mul16u::a#2 = (unsigned int)mul16s::a#3
  mul16u::b#1 = (unsigned int)mul16s::b#3
  call mul16u
  mul16u::return#3 = mul16u::return#2
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  mul16s::b#6 = phi( mul16s/mul16s::b#3 )
  mul16s::a#4 = phi( mul16s/mul16s::a#3 )
  mul16u::return#6 = phi( mul16s/mul16u::return#3 )
  mul16s::m#0 = mul16u::return#6
  mul16s::$1 = mul16s::a#4 < 0
  mul16s::$2 = ! mul16s::$1
  if(mul16s::$2) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  mul16s::a#6 = phi( mul16s::@3/mul16s::a#7, mul16s::@5/mul16s::a#4 )
  mul16s::m#6 = phi( mul16s::@3/mul16s::m#1, mul16s::@5/mul16s::m#0 )
  mul16s::b#4 = phi( mul16s::@3/mul16s::b#5, mul16s::@5/mul16s::b#6 )
  mul16s::$3 = mul16s::b#4 < 0
  mul16s::$4 = ! mul16s::$3
  if(mul16s::$4) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@5
  mul16s::a#7 = phi( mul16s::@5/mul16s::a#4 )
  mul16s::b#5 = phi( mul16s::@5/mul16s::b#6 )
  mul16s::m#3 = phi( mul16s::@5/mul16s::m#0 )
  mul16s::$6 = word1  mul16s::m#3
  mul16s::$13 = (unsigned int)mul16s::b#5
  mul16s::$7 = mul16s::$6 - mul16s::$13
  mul16s::$11 = mul16s::$7
  mul16s::m#1 = mul16s::m#3 word1= mul16s::$11
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  mul16s::m#4 = phi( mul16s::@1/mul16s::m#6, mul16s::@4/mul16s::m#2 )
  mul16s::return#1 = (long)mul16s::m#4
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  mul16s::a#5 = phi( mul16s::@1/mul16s::a#6 )
  mul16s::m#5 = phi( mul16s::@1/mul16s::m#6 )
  mul16s::$9 = word1  mul16s::m#5
  mul16s::$14 = (unsigned int)mul16s::a#5
  mul16s::$10 = mul16s::$9 - mul16s::$14
  mul16s::$12 = mul16s::$10
  mul16s::m#2 = mul16s::m#5 word1= mul16s::$12
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  mul16s::return#6 = phi( mul16s::@2/mul16s::return#1 )
  mul16s::return#2 = mul16s::return#6
  return 
  to:@return

void bitmap_init(char *gfx , char *screen)
bitmap_init: scope:[bitmap_init]  from main::@8
  bitmap_init::screen#1 = phi( main::@8/bitmap_init::screen#0 )
  bitmap_init::gfx#1 = phi( main::@8/bitmap_init::gfx#0 )
  bitmap_gfx#0 = bitmap_init::gfx#1
  bitmap_screen#0 = bitmap_init::screen#1
  bitmap_init::bits#0 = $80
  bitmap_init::x#0 = 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  bitmap_screen#30 = phi( bitmap_init/bitmap_screen#0, bitmap_init::@2/bitmap_screen#26 )
  bitmap_gfx#31 = phi( bitmap_init/bitmap_gfx#0, bitmap_init::@2/bitmap_gfx#27 )
  bitmap_init::gfx#4 = phi( bitmap_init/bitmap_init::gfx#1, bitmap_init::@2/bitmap_init::gfx#3 )
  bitmap_init::x#2 = phi( bitmap_init/bitmap_init::x#0, bitmap_init::@2/bitmap_init::x#1 )
  bitmap_init::bits#3 = phi( bitmap_init/bitmap_init::bits#0, bitmap_init::@2/bitmap_init::bits#4 )
  bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  bitmap_init::$0 = bitmap_init::bits#1 == 0
  bitmap_init::$1 = ! bitmap_init::$0
  if(bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  bitmap_screen#26 = phi( bitmap_init::@1/bitmap_screen#30, bitmap_init::@3/bitmap_screen#31 )
  bitmap_gfx#27 = phi( bitmap_init::@1/bitmap_gfx#31, bitmap_init::@3/bitmap_gfx#32 )
  bitmap_init::gfx#3 = phi( bitmap_init::@1/bitmap_init::gfx#4, bitmap_init::@3/bitmap_init::gfx#5 )
  bitmap_init::bits#4 = phi( bitmap_init::@1/bitmap_init::bits#1, bitmap_init::@3/bitmap_init::bits#2 )
  bitmap_init::x#3 = phi( bitmap_init::@1/bitmap_init::x#2, bitmap_init::@3/bitmap_init::x#4 )
  bitmap_init::x#1 = bitmap_init::x#3 + rangenext(0,$ff)
  bitmap_init::$2 = bitmap_init::x#1 != rangelast(0,$ff)
  if(bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  bitmap_screen#31 = phi( bitmap_init::@1/bitmap_screen#30 )
  bitmap_gfx#32 = phi( bitmap_init::@1/bitmap_gfx#31 )
  bitmap_init::gfx#5 = phi( bitmap_init::@1/bitmap_init::gfx#4 )
  bitmap_init::x#4 = phi( bitmap_init::@1/bitmap_init::x#2 )
  bitmap_init::bits#2 = $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  bitmap_screen#22 = phi( bitmap_init::@2/bitmap_screen#26 )
  bitmap_gfx#23 = phi( bitmap_init::@2/bitmap_gfx#27 )
  bitmap_init::gfx#2 = phi( bitmap_init::@2/bitmap_init::gfx#3 )
  bitmap_init::yoffs#0 = bitmap_init::gfx#2
  bitmap_init::y#0 = 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  bitmap_screen#17 = phi( bitmap_init::@4/bitmap_screen#22, bitmap_init::@6/bitmap_screen#13 )
  bitmap_gfx#18 = phi( bitmap_init::@4/bitmap_gfx#23, bitmap_init::@6/bitmap_gfx#13 )
  bitmap_init::yoffs#2 = phi( bitmap_init::@4/bitmap_init::yoffs#0, bitmap_init::@6/bitmap_init::yoffs#4 )
  bitmap_init::y#2 = phi( bitmap_init::@4/bitmap_init::y#0, bitmap_init::@6/bitmap_init::y#1 )
  bitmap_init::$3 = bitmap_init::y#2 & 7
  bitmap_init::$4 = byte0  bitmap_init::yoffs#2
  bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
  bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  bitmap_init::$6 = byte1  bitmap_init::yoffs#2
  bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  bitmap_init::$7 = bitmap_init::y#2 & 7
  bitmap_init::$8 = bitmap_init::$7 == 7
  bitmap_init::$9 = ! bitmap_init::$8
  if(bitmap_init::$9) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  bitmap_screen#13 = phi( bitmap_init::@5/bitmap_screen#17, bitmap_init::@7/bitmap_screen#18 )
  bitmap_gfx#13 = phi( bitmap_init::@5/bitmap_gfx#18, bitmap_init::@7/bitmap_gfx#19 )
  bitmap_init::yoffs#4 = phi( bitmap_init::@5/bitmap_init::yoffs#2, bitmap_init::@7/bitmap_init::yoffs#1 )
  bitmap_init::y#3 = phi( bitmap_init::@5/bitmap_init::y#2, bitmap_init::@7/bitmap_init::y#4 )
  bitmap_init::y#1 = bitmap_init::y#3 + rangenext(0,$ff)
  bitmap_init::$11 = bitmap_init::y#1 != rangelast(0,$ff)
  if(bitmap_init::$11) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  bitmap_screen#18 = phi( bitmap_init::@5/bitmap_screen#17 )
  bitmap_gfx#19 = phi( bitmap_init::@5/bitmap_gfx#18 )
  bitmap_init::y#4 = phi( bitmap_init::@5/bitmap_init::y#2 )
  bitmap_init::yoffs#3 = phi( bitmap_init::@5/bitmap_init::yoffs#2 )
  bitmap_init::$10 = bitmap_init::yoffs#3 + $28*8
  bitmap_init::yoffs#1 = bitmap_init::$10
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  bitmap_screen#7 = phi( bitmap_init::@6/bitmap_screen#13 )
  bitmap_gfx#7 = phi( bitmap_init::@6/bitmap_gfx#13 )
  bitmap_gfx#1 = bitmap_gfx#7
  bitmap_screen#1 = bitmap_screen#7
  return 
  to:@return

void bitmap_clear(char bgcol , char fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@9
  bitmap_gfx#14 = phi( main::@9/bitmap_gfx#2 )
  bitmap_screen#8 = phi( main::@9/bitmap_screen#2 )
  bitmap_clear::bgcol#1 = phi( main::@9/bitmap_clear::bgcol#0 )
  bitmap_clear::fgcol#1 = phi( main::@9/bitmap_clear::fgcol#0 )
  bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
  bitmap_clear::col#0 = bitmap_clear::$0 + bitmap_clear::bgcol#1
  memset::str#0 = (void *)bitmap_screen#8
  memset::c#0 = bitmap_clear::col#0
  memset::num#0 = $3e8
  call memset
  memset::return#0 = memset::return#3
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  bitmap_gfx#8 = phi( bitmap_clear/bitmap_gfx#14 )
  memset::str#1 = (void *)bitmap_gfx#8
  memset::c#1 = 0
  memset::num#1 = $1f40
  call memset
  memset::return#1 = memset::return#3
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@2
  return 
  to:@return

void bitmap_plot(unsigned int x , char y)
bitmap_plot: scope:[bitmap_plot]  from main::@13
  bitmap_plot::x#1 = phi( main::@13/bitmap_plot::x#0 )
  bitmap_plot::y#1 = phi( main::@13/bitmap_plot::y#0 )
  bitmap_plot::$0 = bitmap_plot_yhi[bitmap_plot::y#1] w= bitmap_plot_ylo[bitmap_plot::y#1]
  bitmap_plot::plotter#0 = (char *)bitmap_plot::$0
  bitmap_plot::$1 = bitmap_plot::x#1 & $fff8
  bitmap_plot::plotter#1 = bitmap_plot::plotter#0 + bitmap_plot::$1
  bitmap_plot::$2 = byte0  bitmap_plot::x#1
  *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  memset::c#5 = phi( bitmap_clear/memset::c#0, bitmap_clear::@1/memset::c#1 )
  memset::str#4 = phi( bitmap_clear/memset::str#0, bitmap_clear::@1/memset::str#1 )
  memset::num#2 = phi( bitmap_clear/memset::num#0, bitmap_clear::@1/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#2 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (char *)memset::str#3
  memset::end#0 = memset::$4 + memset::num#3
  memset::dst#0 = ((char *)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#2 )
  memset::return#3 = memset::return#4
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  bitmap_screen#19 = phi( __start::@1/bitmap_screen#16 )
  bitmap_gfx#20 = phi( __start::@1/bitmap_gfx#17 )
  rem16u#25 = phi( __start::@1/rem16u#27 )
  sin16s_gen2::sintab#1 = SINE
  sin16s_gen2::wavelength#0 = $200
  sin16s_gen2::min#0 = -$1001
  sin16s_gen2::max#0 = $1001
  call sin16s_gen2
  to:main::@8
main::@8: scope:[main]  from main
  bitmap_screen#14 = phi( main/bitmap_screen#19 )
  bitmap_gfx#15 = phi( main/bitmap_gfx#20 )
  rem16u#18 = phi( main/rem16u#1 )
  rem16u#7 = rem16u#18
  bitmap_init::gfx#0 = BITMAP
  bitmap_init::screen#0 = SCREEN
  call bitmap_init
  to:main::@9
main::@9: scope:[main]  from main::@8
  rem16u#43 = phi( main::@8/rem16u#7 )
  bitmap_screen#9 = phi( main::@8/bitmap_screen#1 )
  bitmap_gfx#9 = phi( main::@8/bitmap_gfx#1 )
  bitmap_gfx#2 = bitmap_gfx#9
  bitmap_screen#2 = bitmap_screen#9
  bitmap_clear::bgcol#0 = BLACK
  bitmap_clear::fgcol#0 = WHITE
  call bitmap_clear
  to:main::@10
main::@10: scope:[main]  from main::@9
  bitmap_screen#34 = phi( main::@9/bitmap_screen#2 )
  bitmap_gfx#35 = phi( main::@9/bitmap_gfx#2 )
  rem16u#41 = phi( main::@9/rem16u#43 )
  *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
  main::toD0181_screen#0 = SCREEN
  main::toD0181_gfx#0 = BITMAP
  to:main::toD0181
main::toD0181: scope:[main]  from main::@10
  bitmap_screen#32 = phi( main::@10/bitmap_screen#34 )
  bitmap_gfx#33 = phi( main::@10/bitmap_gfx#35 )
  rem16u#39 = phi( main::@10/rem16u#41 )
  main::toD0181_gfx#1 = phi( main::@10/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@10/main::toD0181_screen#0 )
  main::toD0181_$7 = (unsigned int)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = byte1  main::toD0181_$1
  main::toD0181_$3 = byte1  (unsigned int)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  bitmap_screen#27 = phi( main::toD0181/bitmap_screen#32 )
  bitmap_gfx#28 = phi( main::toD0181/bitmap_gfx#33 )
  rem16u#36 = phi( main::toD0181/rem16u#39 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@7
main::@7: scope:[main]  from main::toD0181_@return
  bitmap_screen#23 = phi( main::toD0181_@return/bitmap_screen#27 )
  bitmap_gfx#24 = phi( main::toD0181_@return/bitmap_gfx#28 )
  rem16u#32 = phi( main::toD0181_@return/rem16u#36 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$3 = main::toD0181_return#3
  *D018 = main::$3
  call init_irq
  to:main::@11
main::@11: scope:[main]  from main::@7
  bitmap_screen#20 = phi( main::@7/bitmap_screen#23 )
  bitmap_gfx#21 = phi( main::@7/bitmap_gfx#24 )
  rem16u#29 = phi( main::@7/rem16u#32 )
  main::idx_x#0 = 0
  main::idx_y#0 = $80
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@4
  main::idx_y#8 = phi( main::@11/main::idx_y#0, main::@4/main::idx_y#10 )
  bitmap_screen#15 = phi( main::@11/bitmap_screen#20, main::@4/bitmap_screen#21 )
  bitmap_gfx#16 = phi( main::@11/bitmap_gfx#21, main::@4/bitmap_gfx#22 )
  rem16u#26 = phi( main::@11/rem16u#29, main::@4/rem16u#30 )
  main::idx_x#5 = phi( main::@11/main::idx_x#0, main::@4/main::idx_x#7 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  bitmap_screen#36 = phi( main::@1/bitmap_screen#15 )
  bitmap_gfx#37 = phi( main::@1/bitmap_gfx#16 )
  rem16u#44 = phi( main::@1/rem16u#26 )
  main::idx_y#5 = phi( main::@1/main::idx_y#8 )
  main::idx_x#3 = phi( main::@1/main::idx_x#5 )
  main::$19 = main::idx_x#3 * SIZEOF_INT
  main::cos_x#0 = SINE[main::$19]
  mul16s::a#1 = $a0
  mul16s::b#1 = main::cos_x#0
  call mul16s
  mul16s::return#3 = mul16s::return#2
  to:main::@12
main::@12: scope:[main]  from main::@2
  bitmap_screen#35 = phi( main::@2/bitmap_screen#36 )
  bitmap_gfx#36 = phi( main::@2/bitmap_gfx#37 )
  rem16u#42 = phi( main::@2/rem16u#44 )
  main::idx_x#8 = phi( main::@2/main::idx_x#3 )
  main::idx_y#3 = phi( main::@2/main::idx_y#5 )
  mul16s::return#7 = phi( main::@2/mul16s::return#3 )
  main::xpos#0 = mul16s::return#7
  main::$6 = main::xpos#0 << 4
  main::$7 = word1  main::$6
  main::$8 = $a0 + main::$7
  main::x#0 = (unsigned int)main::$8
  main::$20 = main::idx_y#3 * SIZEOF_INT
  main::sin_y#0 = SINE[main::$20]
  mul16s::a#2 = $64
  mul16s::b#2 = main::sin_y#0
  call mul16s
  mul16s::return#4 = mul16s::return#2
  to:main::@13
main::@13: scope:[main]  from main::@12
  bitmap_screen#33 = phi( main::@12/bitmap_screen#35 )
  bitmap_gfx#34 = phi( main::@12/bitmap_gfx#36 )
  rem16u#40 = phi( main::@12/rem16u#42 )
  main::idx_y#9 = phi( main::@12/main::idx_y#3 )
  main::idx_x#6 = phi( main::@12/main::idx_x#8 )
  main::x#1 = phi( main::@12/main::x#0 )
  mul16s::return#8 = phi( main::@12/mul16s::return#4 )
  main::ypos#0 = mul16s::return#8
  main::$10 = main::ypos#0 << 4
  main::$11 = word1  main::$10
  main::$12 = $64 + main::$11
  main::y#0 = (unsigned int)main::$12
  bitmap_plot::x#0 = main::x#1
  bitmap_plot::y#0 = (char)main::y#0
  call bitmap_plot
  to:main::@14
main::@14: scope:[main]  from main::@13
  bitmap_screen#28 = phi( main::@13/bitmap_screen#33 )
  bitmap_gfx#29 = phi( main::@13/bitmap_gfx#34 )
  rem16u#37 = phi( main::@13/rem16u#40 )
  main::idx_y#6 = phi( main::@13/main::idx_y#9 )
  main::idx_x#4 = phi( main::@13/main::idx_x#6 )
  main::idx_x#1 = ++ main::idx_x#4
  main::$14 = main::idx_x#1 == $200
  main::$15 = ! main::$14
  if(main::$15) goto main::@3
  to:main::@5
main::@3: scope:[main]  from main::@14 main::@5
  bitmap_screen#24 = phi( main::@14/bitmap_screen#28, main::@5/bitmap_screen#29 )
  bitmap_gfx#25 = phi( main::@14/bitmap_gfx#29, main::@5/bitmap_gfx#30 )
  rem16u#33 = phi( main::@14/rem16u#37, main::@5/rem16u#38 )
  main::idx_x#9 = phi( main::@14/main::idx_x#1, main::@5/main::idx_x#2 )
  main::idx_y#4 = phi( main::@14/main::idx_y#6, main::@5/main::idx_y#7 )
  main::idx_y#1 = ++ main::idx_y#4
  main::$16 = main::idx_y#1 == $200
  main::$17 = ! main::$16
  if(main::$17) goto main::@4
  to:main::@6
main::@5: scope:[main]  from main::@14
  bitmap_screen#29 = phi( main::@14/bitmap_screen#28 )
  bitmap_gfx#30 = phi( main::@14/bitmap_gfx#29 )
  rem16u#38 = phi( main::@14/rem16u#37 )
  main::idx_y#7 = phi( main::@14/main::idx_y#6 )
  main::idx_x#2 = 0
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@6
  main::idx_y#10 = phi( main::@3/main::idx_y#1, main::@6/main::idx_y#2 )
  bitmap_screen#21 = phi( main::@3/bitmap_screen#24, main::@6/bitmap_screen#25 )
  bitmap_gfx#22 = phi( main::@3/bitmap_gfx#25, main::@6/bitmap_gfx#26 )
  rem16u#30 = phi( main::@3/rem16u#33, main::@6/rem16u#34 )
  main::idx_x#7 = phi( main::@3/main::idx_x#9, main::@6/main::idx_x#10 )
  plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt]
  to:main::@1
main::@6: scope:[main]  from main::@3
  bitmap_screen#25 = phi( main::@3/bitmap_screen#24 )
  bitmap_gfx#26 = phi( main::@3/bitmap_gfx#25 )
  rem16u#34 = phi( main::@3/rem16u#33 )
  main::idx_x#10 = phi( main::@3/main::idx_x#9 )
  main::idx_y#2 = 0
  to:main::@4
main::@return: scope:[main]  from main::@1
  bitmap_screen#10 = phi( main::@1/bitmap_screen#15 )
  bitmap_gfx#10 = phi( main::@1/bitmap_gfx#16 )
  rem16u#19 = phi( main::@1/rem16u#26 )
  rem16u#8 = rem16u#19
  bitmap_gfx#3 = bitmap_gfx#10
  bitmap_screen#3 = bitmap_screen#10
  return 
  to:@return

void init_irq()
init_irq: scope:[init_irq]  from main::@7
  asm { sei  }
  *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  *PROCPORT = PROCPORT_RAM_IO
  *((char *)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  *VICII_CONTROL1 = *VICII_CONTROL1 | $80
  *RASTER = 0
  *IRQ_ENABLE = IRQ_RASTER
  *HARDWARE_IRQ = &irq
  asm { cli  }
  to:init_irq::@return
init_irq::@return: scope:[init_irq]  from init_irq
  return 
  to:@return

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  *BG_COLOR = WHITE
  irq::$1 = 0 != frame_cnt
  irq::$0 = ! irq::$1
  if(irq::$0) goto irq::@1
  to:irq::@2
irq::@1: scope:[irq]  from irq irq::@2
  *BG_COLOR = BLACK
  *IRQ_STATUS = IRQ_RASTER
  to:irq::@return
irq::@2: scope:[irq]  from irq
  frame_cnt = ++ frame_cnt
  to:irq::@1
irq::@return: scope:[irq]  from irq::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  rem16u#9 = 0
  bitmap_screen#4 = (char *) 0
  bitmap_gfx#4 = (char *) 0
  frame_cnt = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  bitmap_screen#16 = phi( __start::__init1/bitmap_screen#4 )
  bitmap_gfx#17 = phi( __start::__init1/bitmap_gfx#4 )
  rem16u#27 = phi( __start::__init1/rem16u#9 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  bitmap_screen#11 = phi( __start::@1/bitmap_screen#3 )
  bitmap_gfx#11 = phi( __start::@1/bitmap_gfx#3 )
  rem16u#20 = phi( __start::@1/rem16u#8 )
  rem16u#10 = rem16u#20
  bitmap_gfx#5 = bitmap_gfx#11
  bitmap_screen#5 = bitmap_screen#11
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  bitmap_gfx#12 = phi( __start::@2/bitmap_gfx#5 )
  bitmap_screen#12 = phi( __start::@2/bitmap_screen#5 )
  rem16u#21 = phi( __start::@2/rem16u#10 )
  rem16u#11 = rem16u#21
  bitmap_screen#6 = bitmap_screen#12
  bitmap_gfx#6 = bitmap_gfx#12
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const BG_COLOR = (char *)$d021
__constant char *BITMAP = (char *)$2000
__constant const char BLACK = 0
__constant struct MOS6526_CIA * const CIA1 = (struct MOS6526_CIA *)$dc00
__constant const char CIA_INTERRUPT_CLEAR = $7f
__constant char * const D011 = (char *)$d011
__constant char * const D018 = (char *)$d018
__constant void (** const HARDWARE_IRQ)() = (void (**)())$fffe
__constant char * const IRQ_ENABLE = (char *)$d01a
__constant const char IRQ_RASTER = 1
__constant char * const IRQ_STATUS = (char *)$d019
__constant char OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
__constant const unsigned long PI2_u4f28 = $6487ed51
__constant const unsigned long PI_HALF_u4f28 = $1921fb54
__constant const unsigned long PI_u4f28 = $3243f6a9
__constant char * const PROCPORT = (char *)1
__constant char * const PROCPORT_DDR = (char *)0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_RAM_IO = 5
__constant char * const RASTER = (char *)$d012
__constant char *SCREEN = (char *)$400
__constant int SINE[$200] = { fill( $200, 0) }
__constant char SIZEOF_INT = 2
__constant const char VICII_BMM = $20
__constant char * const VICII_CONTROL1 = (char *)$d011
__constant const char VICII_DEN = $10
__constant const char VICII_RSEL = 8
__constant const char WHITE = 1
void __start()
void bitmap_clear(char bgcol , char fgcol)
number bitmap_clear::$0
char bitmap_clear::bgcol
char bitmap_clear::bgcol#0
char bitmap_clear::bgcol#1
char bitmap_clear::col
char bitmap_clear::col#0
char bitmap_clear::fgcol
char bitmap_clear::fgcol#0
char bitmap_clear::fgcol#1
char *bitmap_gfx
char *bitmap_gfx#0
char *bitmap_gfx#1
char *bitmap_gfx#10
char *bitmap_gfx#11
char *bitmap_gfx#12
char *bitmap_gfx#13
char *bitmap_gfx#14
char *bitmap_gfx#15
char *bitmap_gfx#16
char *bitmap_gfx#17
char *bitmap_gfx#18
char *bitmap_gfx#19
char *bitmap_gfx#2
char *bitmap_gfx#20
char *bitmap_gfx#21
char *bitmap_gfx#22
char *bitmap_gfx#23
char *bitmap_gfx#24
char *bitmap_gfx#25
char *bitmap_gfx#26
char *bitmap_gfx#27
char *bitmap_gfx#28
char *bitmap_gfx#29
char *bitmap_gfx#3
char *bitmap_gfx#30
char *bitmap_gfx#31
char *bitmap_gfx#32
char *bitmap_gfx#33
char *bitmap_gfx#34
char *bitmap_gfx#35
char *bitmap_gfx#36
char *bitmap_gfx#37
char *bitmap_gfx#4
char *bitmap_gfx#5
char *bitmap_gfx#6
char *bitmap_gfx#7
char *bitmap_gfx#8
char *bitmap_gfx#9
void bitmap_init(char *gfx , char *screen)
bool bitmap_init::$0
bool bitmap_init::$1
char *bitmap_init::$10
bool bitmap_init::$11
bool bitmap_init::$2
number bitmap_init::$3
char bitmap_init::$4
number bitmap_init::$5
char bitmap_init::$6
number bitmap_init::$7
bool bitmap_init::$8
bool bitmap_init::$9
char bitmap_init::bits
char bitmap_init::bits#0
char bitmap_init::bits#1
char bitmap_init::bits#2
char bitmap_init::bits#3
char bitmap_init::bits#4
char *bitmap_init::gfx
char *bitmap_init::gfx#0
char *bitmap_init::gfx#1
char *bitmap_init::gfx#2
char *bitmap_init::gfx#3
char *bitmap_init::gfx#4
char *bitmap_init::gfx#5
char *bitmap_init::screen
char *bitmap_init::screen#0
char *bitmap_init::screen#1
char bitmap_init::x
char bitmap_init::x#0
char bitmap_init::x#1
char bitmap_init::x#2
char bitmap_init::x#3
char bitmap_init::x#4
char bitmap_init::y
char bitmap_init::y#0
char bitmap_init::y#1
char bitmap_init::y#2
char bitmap_init::y#3
char bitmap_init::y#4
char *bitmap_init::yoffs
char *bitmap_init::yoffs#0
char *bitmap_init::yoffs#1
char *bitmap_init::yoffs#2
char *bitmap_init::yoffs#3
char *bitmap_init::yoffs#4
void bitmap_plot(unsigned int x , char y)
unsigned int bitmap_plot::$0
number bitmap_plot::$1
char bitmap_plot::$2
char *bitmap_plot::plotter
char *bitmap_plot::plotter#0
char *bitmap_plot::plotter#1
unsigned int bitmap_plot::x
unsigned int bitmap_plot::x#0
unsigned int bitmap_plot::x#1
char bitmap_plot::y
char bitmap_plot::y#0
char bitmap_plot::y#1
__constant const char bitmap_plot_bit[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_yhi[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_ylo[$100] = { fill( $100, 0) }
char *bitmap_screen
char *bitmap_screen#0
char *bitmap_screen#1
char *bitmap_screen#10
char *bitmap_screen#11
char *bitmap_screen#12
char *bitmap_screen#13
char *bitmap_screen#14
char *bitmap_screen#15
char *bitmap_screen#16
char *bitmap_screen#17
char *bitmap_screen#18
char *bitmap_screen#19
char *bitmap_screen#2
char *bitmap_screen#20
char *bitmap_screen#21
char *bitmap_screen#22
char *bitmap_screen#23
char *bitmap_screen#24
char *bitmap_screen#25
char *bitmap_screen#26
char *bitmap_screen#27
char *bitmap_screen#28
char *bitmap_screen#29
char *bitmap_screen#3
char *bitmap_screen#30
char *bitmap_screen#31
char *bitmap_screen#32
char *bitmap_screen#33
char *bitmap_screen#34
char *bitmap_screen#35
char *bitmap_screen#36
char *bitmap_screen#4
char *bitmap_screen#5
char *bitmap_screen#6
char *bitmap_screen#7
char *bitmap_screen#8
char *bitmap_screen#9
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned int div32u16u::$0
unsigned int div32u16u::$2
unsigned long div32u16u::dividend
unsigned long div32u16u::dividend#0
unsigned long div32u16u::dividend#1
unsigned long div32u16u::dividend#2
unsigned int div32u16u::divisor
unsigned int div32u16u::divisor#0
unsigned int div32u16u::divisor#1
unsigned int div32u16u::divisor#2
unsigned long div32u16u::quotient
unsigned long div32u16u::quotient#0
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0
unsigned int div32u16u::quotient_hi#1
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0
unsigned long div32u16u::return
unsigned long div32u16u::return#0
unsigned long div32u16u::return#1
unsigned long div32u16u::return#2
unsigned long div32u16u::return#3
unsigned long div32u16u::return#4
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
unsigned int divr16u::$0
char divr16u::$1
unsigned int divr16u::$10
bool divr16u::$11
number divr16u::$2
bool divr16u::$3
bool divr16u::$4
number divr16u::$5
unsigned int divr16u::$6
unsigned int divr16u::$7
bool divr16u::$8
bool divr16u::$9
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0
unsigned int divr16u::dividend#1
unsigned int divr16u::dividend#2
unsigned int divr16u::dividend#3
unsigned int divr16u::dividend#4
unsigned int divr16u::dividend#5
unsigned int divr16u::dividend#6
unsigned int divr16u::dividend#7
unsigned int divr16u::dividend#8
unsigned int divr16u::divisor
unsigned int divr16u::divisor#0
unsigned int divr16u::divisor#1
unsigned int divr16u::divisor#2
unsigned int divr16u::divisor#3
unsigned int divr16u::divisor#4
unsigned int divr16u::divisor#5
unsigned int divr16u::divisor#6
unsigned int divr16u::divisor#7
char divr16u::i
char divr16u::i#0
char divr16u::i#1
char divr16u::i#2
char divr16u::i#3
char divr16u::i#4
char divr16u::i#5
char divr16u::i#6
unsigned int divr16u::quotient
unsigned int divr16u::quotient#0
unsigned int divr16u::quotient#1
unsigned int divr16u::quotient#2
unsigned int divr16u::quotient#3
unsigned int divr16u::quotient#4
unsigned int divr16u::quotient#5
unsigned int divr16u::quotient#6
unsigned int divr16u::quotient#7
unsigned int divr16u::quotient#8
unsigned int divr16u::rem
unsigned int divr16u::rem#0
unsigned int divr16u::rem#1
unsigned int divr16u::rem#10
unsigned int divr16u::rem#11
unsigned int divr16u::rem#2
unsigned int divr16u::rem#3
unsigned int divr16u::rem#4
unsigned int divr16u::rem#5
unsigned int divr16u::rem#6
unsigned int divr16u::rem#7
unsigned int divr16u::rem#8
unsigned int divr16u::rem#9
unsigned int divr16u::return
unsigned int divr16u::return#0
unsigned int divr16u::return#1
unsigned int divr16u::return#2
unsigned int divr16u::return#3
unsigned int divr16u::return#4
unsigned int divr16u::return#5
unsigned int divr16u::return#6
__loadstore volatile char frame_cnt
void init_irq()
__interrupt(hardware_clobber) void irq()
bool irq::$0
bool irq::$1
void main()
long main::$10
unsigned int main::$11
number main::$12
bool main::$14
bool main::$15
bool main::$16
bool main::$17
unsigned int main::$19
unsigned int main::$20
char main::$3
long main::$6
unsigned int main::$7
number main::$8
int main::cos_x
int main::cos_x#0
unsigned int main::idx_x
unsigned int main::idx_x#0
unsigned int main::idx_x#1
unsigned int main::idx_x#10
unsigned int main::idx_x#2
unsigned int main::idx_x#3
unsigned int main::idx_x#4
unsigned int main::idx_x#5
unsigned int main::idx_x#6
unsigned int main::idx_x#7
unsigned int main::idx_x#8
unsigned int main::idx_x#9
unsigned int main::idx_y
unsigned int main::idx_y#0
unsigned int main::idx_y#1
unsigned int main::idx_y#10
unsigned int main::idx_y#2
unsigned int main::idx_y#3
unsigned int main::idx_y#4
unsigned int main::idx_y#5
unsigned int main::idx_y#6
unsigned int main::idx_y#7
unsigned int main::idx_y#8
unsigned int main::idx_y#9
int main::sin_y
int main::sin_y#0
number main::toD0181_$0
number main::toD0181_$1
char main::toD0181_$2
char main::toD0181_$3
number main::toD0181_$4
number main::toD0181_$5
number main::toD0181_$6
unsigned int main::toD0181_$7
char *main::toD0181_gfx
char *main::toD0181_gfx#0
char *main::toD0181_gfx#1
char main::toD0181_return
char main::toD0181_return#0
char main::toD0181_return#1
char main::toD0181_return#2
char main::toD0181_return#3
char *main::toD0181_screen
char *main::toD0181_screen#0
char *main::toD0181_screen#1
unsigned int main::x
unsigned int main::x#0
unsigned int main::x#1
long main::xpos
long main::xpos#0
unsigned int main::y
unsigned int main::y#0
long main::ypos
long main::ypos#0
void * memset(void *str , char c , unsigned int num)
bool memset::$0
bool memset::$1
bool memset::$3
char *memset::$4
char memset::c
char memset::c#0
char memset::c#1
char memset::c#2
char memset::c#3
char memset::c#4
char memset::c#5
char *memset::dst
char *memset::dst#0
char *memset::dst#1
char *memset::dst#2
char *memset::dst#3
char *memset::end
char *memset::end#0
char *memset::end#1
char *memset::end#2
unsigned int memset::num
unsigned int memset::num#0
unsigned int memset::num#1
unsigned int memset::num#2
unsigned int memset::num#3
void *memset::return
void *memset::return#0
void *memset::return#1
void *memset::return#2
void *memset::return#3
void *memset::return#4
void *memset::str
void *memset::str#0
void *memset::str#1
void *memset::str#2
void *memset::str#3
void *memset::str#4
void *memset::str#5
void *memset::str#6
long mul16s(int a , int b)
bool mul16s::$1
unsigned int mul16s::$10
unsigned int mul16s::$11
unsigned int mul16s::$12
unsigned int mul16s::$13
unsigned int mul16s::$14
bool mul16s::$2
bool mul16s::$3
bool mul16s::$4
unsigned int mul16s::$6
unsigned int mul16s::$7
unsigned int mul16s::$9
int mul16s::a
int mul16s::a#0
int mul16s::a#1
int mul16s::a#2
int mul16s::a#3
int mul16s::a#4
int mul16s::a#5
int mul16s::a#6
int mul16s::a#7
int mul16s::b
int mul16s::b#0
int mul16s::b#1
int mul16s::b#2
int mul16s::b#3
int mul16s::b#4
int mul16s::b#5
int mul16s::b#6
unsigned long mul16s::m
unsigned long mul16s::m#0
unsigned long mul16s::m#1
unsigned long mul16s::m#2
unsigned long mul16s::m#3
unsigned long mul16s::m#4
unsigned long mul16s::m#5
unsigned long mul16s::m#6
long mul16s::return
long mul16s::return#0
long mul16s::return#1
long mul16s::return#2
long mul16s::return#3
long mul16s::return#4
long mul16s::return#5
long mul16s::return#6
long mul16s::return#7
long mul16s::return#8
unsigned long mul16u(unsigned int a , unsigned int b)
bool mul16u::$0
number mul16u::$1
bool mul16u::$2
bool mul16u::$3
unsigned long mul16u::$4
unsigned int mul16u::$5
unsigned long mul16u::$6
unsigned int mul16u::a
unsigned int mul16u::a#0
unsigned int mul16u::a#1
unsigned int mul16u::a#2
unsigned int mul16u::a#3
unsigned int mul16u::a#4
unsigned int mul16u::a#5
unsigned int mul16u::a#6
unsigned int mul16u::a#7
unsigned int mul16u::b
unsigned int mul16u::b#0
unsigned int mul16u::b#1
unsigned int mul16u::b#2
unsigned long mul16u::mb
unsigned long mul16u::mb#0
unsigned long mul16u::mb#1
unsigned long mul16u::mb#2
unsigned long mul16u::mb#3
unsigned long mul16u::mb#4
unsigned long mul16u::mb#5
unsigned long mul16u::res
unsigned long mul16u::res#0
unsigned long mul16u::res#1
unsigned long mul16u::res#2
unsigned long mul16u::res#3
unsigned long mul16u::res#4
unsigned long mul16u::res#5
unsigned long mul16u::res#6
unsigned long mul16u::return
unsigned long mul16u::return#0
unsigned long mul16u::return#1
unsigned long mul16u::return#2
unsigned long mul16u::return#3
unsigned long mul16u::return#4
unsigned long mul16u::return#5
unsigned long mul16u::return#6
unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
unsigned long mulu16_sel::$0
unsigned long mulu16_sel::$1
unsigned int mulu16_sel::$2
unsigned int mulu16_sel::return
unsigned int mulu16_sel::return#0
unsigned int mulu16_sel::return#1
unsigned int mulu16_sel::return#10
unsigned int mulu16_sel::return#11
unsigned int mulu16_sel::return#12
unsigned int mulu16_sel::return#2
unsigned int mulu16_sel::return#3
unsigned int mulu16_sel::return#4
unsigned int mulu16_sel::return#5
unsigned int mulu16_sel::return#6
unsigned int mulu16_sel::return#7
unsigned int mulu16_sel::return#8
unsigned int mulu16_sel::return#9
char mulu16_sel::select
char mulu16_sel::select#0
char mulu16_sel::select#1
char mulu16_sel::select#2
char mulu16_sel::select#3
char mulu16_sel::select#4
char mulu16_sel::select#5
char mulu16_sel::select#6
unsigned int mulu16_sel::v1
unsigned int mulu16_sel::v1#0
unsigned int mulu16_sel::v1#1
unsigned int mulu16_sel::v1#2
unsigned int mulu16_sel::v1#3
unsigned int mulu16_sel::v1#4
unsigned int mulu16_sel::v1#5
unsigned int mulu16_sel::v2
unsigned int mulu16_sel::v2#0
unsigned int mulu16_sel::v2#1
unsigned int mulu16_sel::v2#2
unsigned int mulu16_sel::v2#3
unsigned int mulu16_sel::v2#4
unsigned int mulu16_sel::v2#5
__constant char plots_per_frame[$100] = { fill( $100, 0) }
unsigned int rem16u
unsigned int rem16u#0
unsigned int rem16u#1
unsigned int rem16u#10
unsigned int rem16u#11
unsigned int rem16u#12
unsigned int rem16u#13
unsigned int rem16u#14
unsigned int rem16u#15
unsigned int rem16u#16
unsigned int rem16u#17
unsigned int rem16u#18
unsigned int rem16u#19
unsigned int rem16u#2
unsigned int rem16u#20
unsigned int rem16u#21
unsigned int rem16u#22
unsigned int rem16u#23
unsigned int rem16u#24
unsigned int rem16u#25
unsigned int rem16u#26
unsigned int rem16u#27
unsigned int rem16u#28
unsigned int rem16u#29
unsigned int rem16u#3
unsigned int rem16u#30
unsigned int rem16u#31
unsigned int rem16u#32
unsigned int rem16u#33
unsigned int rem16u#34
unsigned int rem16u#35
unsigned int rem16u#36
unsigned int rem16u#37
unsigned int rem16u#38
unsigned int rem16u#39
unsigned int rem16u#4
unsigned int rem16u#40
unsigned int rem16u#41
unsigned int rem16u#42
unsigned int rem16u#43
unsigned int rem16u#44
unsigned int rem16u#5
unsigned int rem16u#6
unsigned int rem16u#7
unsigned int rem16u#8
unsigned int rem16u#9
int sin16s(unsigned long x)
bool sin16s::$0
bool sin16s::$1
unsigned int sin16s::$13
bool sin16s::$14
bool sin16s::$15
unsigned long sin16s::$16
unsigned long sin16s::$17
int sin16s::$18
bool sin16s::$2
bool sin16s::$3
unsigned long sin16s::$4
char sin16s::isUpper
char sin16s::isUpper#0
char sin16s::isUpper#1
char sin16s::isUpper#2
char sin16s::isUpper#3
char sin16s::isUpper#4
char sin16s::isUpper#5
char sin16s::isUpper#6
char sin16s::isUpper#7
char sin16s::isUpper#8
char sin16s::isUpper#9
int sin16s::return
int sin16s::return#0
int sin16s::return#1
int sin16s::return#2
int sin16s::return#3
int sin16s::return#4
int sin16s::sinx
int sin16s::sinx#0
int sin16s::sinx#1
int sin16s::sinx#2
unsigned int sin16s::usinx
unsigned int sin16s::usinx#0
unsigned int sin16s::usinx#1
unsigned int sin16s::usinx#2
unsigned int sin16s::usinx#3
unsigned int sin16s::usinx#4
unsigned long sin16s::x
unsigned long sin16s::x#0
unsigned long sin16s::x#1
unsigned long sin16s::x#2
unsigned long sin16s::x#3
unsigned long sin16s::x#4
unsigned long sin16s::x#5
unsigned long sin16s::x#6
unsigned long sin16s::x#7
unsigned int sin16s::x1
unsigned int sin16s::x1#0
unsigned int sin16s::x1#1
unsigned int sin16s::x1#2
unsigned int sin16s::x1#3
unsigned int sin16s::x1#4
unsigned int sin16s::x2
unsigned int sin16s::x2#0
unsigned int sin16s::x3
unsigned int sin16s::x3#0
unsigned int sin16s::x3#1
unsigned int sin16s::x3_6
unsigned int sin16s::x3_6#0
unsigned int sin16s::x4
unsigned int sin16s::x4#0
unsigned int sin16s::x5
unsigned int sin16s::x5#0
unsigned int sin16s::x5_128
unsigned int sin16s::x5_128#0
void sin16s_gen2(int *sintab , unsigned int wavelength , int min , int max)
int sin16s_gen2::$1
int sin16s_gen2::$10
bool sin16s_gen2::$4
int sin16s_gen2::$5
long sin16s_gen2::$6
unsigned int sin16s_gen2::$7
int sin16s_gen2::$8
unsigned long sin16s_gen2::$9
int sin16s_gen2::ampl
int sin16s_gen2::ampl#0
int sin16s_gen2::ampl#1
int sin16s_gen2::ampl#2
int sin16s_gen2::ampl#3
int sin16s_gen2::ampl#4
int sin16s_gen2::ampl#5
unsigned int sin16s_gen2::i
unsigned int sin16s_gen2::i#0
unsigned int sin16s_gen2::i#1
unsigned int sin16s_gen2::i#2
unsigned int sin16s_gen2::i#3
unsigned int sin16s_gen2::i#4
unsigned int sin16s_gen2::i#5
int sin16s_gen2::max
int sin16s_gen2::max#0
int sin16s_gen2::max#1
int sin16s_gen2::min
int sin16s_gen2::min#0
int sin16s_gen2::min#1
int sin16s_gen2::offs
int sin16s_gen2::offs#0
int sin16s_gen2::offs#1
int sin16s_gen2::offs#2
int sin16s_gen2::offs#3
int sin16s_gen2::offs#4
int sin16s_gen2::offs#5
int *sin16s_gen2::sintab
int *sin16s_gen2::sintab#0
int *sin16s_gen2::sintab#1
int *sin16s_gen2::sintab#2
int *sin16s_gen2::sintab#3
int *sin16s_gen2::sintab#4
int *sin16s_gen2::sintab#5
int *sin16s_gen2::sintab#6
int *sin16s_gen2::sintab#7
unsigned long sin16s_gen2::step
unsigned long sin16s_gen2::step#0
unsigned long sin16s_gen2::step#1
unsigned long sin16s_gen2::step#2
unsigned long sin16s_gen2::step#3
unsigned long sin16s_gen2::step#4
unsigned int sin16s_gen2::wavelength
unsigned int sin16s_gen2::wavelength#0
unsigned int sin16s_gen2::wavelength#1
unsigned int sin16s_gen2::wavelength#2
unsigned int sin16s_gen2::wavelength#3
unsigned int sin16s_gen2::wavelength#4
unsigned int sin16s_gen2::wavelength#5
unsigned int sin16s_gen2::wavelength#6
unsigned long sin16s_gen2::x
unsigned long sin16s_gen2::x#0
unsigned long sin16s_gen2::x#1
unsigned long sin16s_gen2::x#2
unsigned long sin16s_gen2::x#3
unsigned long sin16s_gen2::x#4
unsigned long sin16s_gen2::x#5

Adding number conversion cast (snumber) 1 in sin16s_gen2::$1 = sin16s_gen2::ampl#0 >> 1
Adding number conversion cast (unumber) 1 in sin16s::isUpper#1 = 1
Adding number conversion cast (unumber) 3 in sin16s::$4 = sin16s::x#6 << 3
Adding number conversion cast (unumber) 0 in mulu16_sel::select#0 = 0
Adding number conversion cast (unumber) 1 in mulu16_sel::select#1 = 1
Adding number conversion cast (unumber) $10000/6 in mulu16_sel::v2#2 = $10000/6
Adding number conversion cast (unumber) 1 in mulu16_sel::select#2 = 1
Adding number conversion cast (unumber) 0 in mulu16_sel::select#3 = 0
Adding number conversion cast (unumber) 0 in mulu16_sel::select#4 = 0
Adding number conversion cast (unumber) 4 in sin16s::x5_128#0 = sin16s::x5#0 >> 4
Adding number conversion cast (unumber) 0 in sin16s::$14 = sin16s::isUpper#2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#5 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#4 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#7 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#7 | (unumber)1
Adding number conversion cast (unumber) 0 in divr16u::rem#3 = 0
Adding number conversion cast (unumber) 0 in mul16u::$0 = mul16u::a#3 != 0
Adding number conversion cast (unumber) 1 in mul16u::$1 = mul16u::a#4 & 1
Adding number conversion cast (unumber) mul16u::$1 in mul16u::$1 = mul16u::a#4 & (unumber)1
Adding number conversion cast (unumber) 0 in mul16u::$2 = mul16u::$1 != 0
Adding number conversion cast (unumber) 1 in mul16u::$5 = mul16u::a#5 >> 1
Adding number conversion cast (unumber) 1 in mul16u::$6 = mul16u::mb#2 << 1
Adding number conversion cast (snumber) 0 in mul16s::$1 = mul16s::a#4 < 0
Adding number conversion cast (snumber) 0 in mul16s::$3 = mul16s::b#4 < 0
Adding number conversion cast (unumber) 1 in bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
Adding number conversion cast (unumber) 0 in bitmap_init::$0 = bitmap_init::bits#1 == 0
Adding number conversion cast (unumber) $80 in bitmap_init::bits#2 = $80
Adding number conversion cast (unumber) 7 in bitmap_init::$3 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$3 in bitmap_init::$3 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) bitmap_init::$5 in bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
Adding number conversion cast (unumber) 7 in bitmap_init::$7 = bitmap_init::y#2 & 7
Adding number conversion cast (unumber) bitmap_init::$7 in bitmap_init::$7 = bitmap_init::y#2 & (unumber)7
Adding number conversion cast (unumber) 7 in bitmap_init::$8 = bitmap_init::$7 == 7
Adding number conversion cast (unumber) $28*8 in bitmap_init::$10 = bitmap_init::yoffs#3 + $28*8
Adding number conversion cast (unumber) $10 in bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
Adding number conversion cast (unumber) bitmap_clear::$0 in bitmap_clear::$0 = bitmap_clear::fgcol#1 * (unumber)$10
Adding number conversion cast (unumber) 0 in memset::c#1 = 0
Adding number conversion cast (unumber) $fff8 in bitmap_plot::$1 = bitmap_plot::x#1 & $fff8
Adding number conversion cast (unumber) bitmap_plot::$1 in bitmap_plot::$1 = bitmap_plot::x#1 & (unumber)$fff8
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) $200 in sin16s_gen2::wavelength#0 = $200
Adding number conversion cast (snumber) -$1001 in sin16s_gen2::min#0 = -$1001
Adding number conversion cast (snumber) $1001 in sin16s_gen2::max#0 = $1001
Adding number conversion cast (unumber) VICII_BMM|VICII_DEN|VICII_RSEL|3 in *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) 3 in *D011 = ((unumber)) VICII_BMM|VICII_DEN|VICII_RSEL|3
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (snumber) $a0 in mul16s::a#1 = $a0
Adding number conversion cast (snumber) 4 in main::$6 = main::xpos#0 << 4
Adding number conversion cast (unumber) $a0 in main::$8 = $a0 + main::$7
Adding number conversion cast (unumber) main::$8 in main::$8 = (unumber)$a0 + main::$7
Adding number conversion cast (snumber) $64 in mul16s::a#2 = $64
Adding number conversion cast (snumber) 4 in main::$10 = main::ypos#0 << 4
Adding number conversion cast (unumber) $64 in main::$12 = $64 + main::$11
Adding number conversion cast (unumber) main::$12 in main::$12 = (unumber)$64 + main::$11
Adding number conversion cast (unumber) $200 in main::$14 = main::idx_x#1 == $200
Adding number conversion cast (unumber) $200 in main::$16 = main::idx_y#1 == $200
Adding number conversion cast (unumber) 0 in main::idx_x#2 = 0
Adding number conversion cast (unumber) 0 in main::idx_y#2 = 0
Adding number conversion cast (unumber) $80 in *VICII_CONTROL1 = *VICII_CONTROL1 | $80
Adding number conversion cast (unumber) 0 in *RASTER = 0
Adding number conversion cast (unumber) 0 in irq::$1 = 0 != frame_cnt
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast sin16s::isUpper#1 = (unumber)1
Inlining cast mulu16_sel::select#0 = (unumber)0
Inlining cast mulu16_sel::select#1 = (unumber)1
Inlining cast mulu16_sel::v2#2 = (unumber)$10000/6
Inlining cast mulu16_sel::select#2 = (unumber)1
Inlining cast mulu16_sel::select#3 = (unumber)0
Inlining cast mulu16_sel::select#4 = (unumber)0
Inlining cast divr16u::rem#3 = (unumber)0
Inlining cast bitmap_init::bits#2 = (unumber)$80
Inlining cast memset::c#1 = (unumber)0
Inlining cast memset::dst#0 = (char *)memset::str#3
Inlining cast sin16s_gen2::wavelength#0 = (unumber)$200
Inlining cast sin16s_gen2::min#0 = (snumber)-$1001
Inlining cast sin16s_gen2::max#0 = (snumber)$1001
Inlining cast *D011 = (unumber)VICII_BMM|VICII_DEN|VICII_RSEL|(unumber)3
Inlining cast mul16s::a#1 = (snumber)$a0
Inlining cast mul16s::a#2 = (snumber)$64
Inlining cast main::idx_x#2 = (unumber)0
Inlining cast main::idx_y#2 = (unumber)0
Inlining cast *RASTER = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 53266
Simplifying constant pointer cast (char *) 53281
Simplifying constant pointer cast (char *) 53265
Simplifying constant pointer cast (char *) 53265
Simplifying constant pointer cast (char *) 53272
Simplifying constant pointer cast (char *) 53273
Simplifying constant pointer cast (char *) 53274
Simplifying constant pointer cast (char *) 0
Simplifying constant pointer cast (char *) 1
Simplifying constant pointer cast (struct MOS6526_CIA *) 56320
Simplifying constant pointer cast (void (**)()) 65534
Simplifying constant pointer cast (char *) 8192
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $fff8
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast -$1001
Simplifying constant integer cast $1001
Simplifying constant integer cast VICII_BMM|VICII_DEN|VICII_RSEL|(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $a0
Simplifying constant integer cast 4
Simplifying constant integer cast $a0
Simplifying constant integer cast $64
Simplifying constant integer cast 4
Simplifying constant integer cast $64
Simplifying constant integer cast $200
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized signed number type (signed char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized signed number type (signed char) 0
Finalized signed number type (signed char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) 0
Finalized unsigned number type (unsigned int) $fff8
Finalized unsigned number type (char) 0
Finalized unsigned number type (unsigned int) $200
Finalized signed number type (int) -$1001
Finalized signed number type (int) $1001
Finalized unsigned number type (char) 3
Finalized unsigned number type (unsigned int) $3fff
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized signed number type (int) $a0
Finalized signed number type (signed char) 4
Finalized unsigned number type (char) $a0
Finalized signed number type (signed char) $64
Finalized signed number type (signed char) 4
Finalized unsigned number type (char) $64
Finalized unsigned number type (unsigned int) $200
Finalized unsigned number type (unsigned int) $200
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to unsigned int in divr16u::$5 = divr16u::rem#7 | 1
Inferred type updated to char in mul16u::$1 = mul16u::a#4 & 1
Inferred type updated to char in bitmap_init::$3 = bitmap_init::y#2 & 7
Inferred type updated to char in bitmap_init::$5 = bitmap_init::$3 | bitmap_init::$4
Inferred type updated to char in bitmap_init::$7 = bitmap_init::y#2 & 7
Inferred type updated to char in bitmap_clear::$0 = bitmap_clear::fgcol#1 * $10
Inferred type updated to unsigned int in bitmap_plot::$1 = bitmap_plot::x#1 & $fff8
Inferred type updated to unsigned int in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to unsigned int in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to char in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to char in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to char in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to unsigned int in main::$8 = $a0 + main::$7
Inferred type updated to unsigned int in main::$12 = $64 + main::$11
Inversing boolean not [42] sin16s::$1 = sin16s::x#3 < PI_u4f28 from [41] sin16s::$0 = sin16s::x#3 >= PI_u4f28
Inversing boolean not [46] sin16s::$3 = sin16s::x#4 < PI_HALF_u4f28 from [45] sin16s::$2 = sin16s::x#4 >= PI_HALF_u4f28
Inversing boolean not [96] sin16s::$15 = sin16s::isUpper#2 == 0 from [95] sin16s::$14 = sin16s::isUpper#2 != 0
Inversing boolean not [131] divr16u::$4 = divr16u::$2 == 0 from [130] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [139] divr16u::$9 = divr16u::rem#6 < divr16u::divisor#2 from [138] divr16u::$8 = divr16u::rem#6 >= divr16u::divisor#2
Inversing boolean not [193] mul16u::$3 = mul16u::$1 == 0 from [192] mul16u::$2 = mul16u::$1 != 0
Inversing boolean not [216] mul16s::$2 = mul16s::a#4 >= 0 from [215] mul16s::$1 = mul16s::a#4 < 0
Inversing boolean not [220] mul16s::$4 = mul16s::b#4 >= 0 from [219] mul16s::$3 = mul16s::b#4 < 0
Inversing boolean not [248] bitmap_init::$1 = bitmap_init::bits#1 != 0 from [247] bitmap_init::$0 = bitmap_init::bits#1 == 0
Inversing boolean not [268] bitmap_init::$9 = bitmap_init::$7 != 7 from [267] bitmap_init::$8 = bitmap_init::$7 == 7
Inversing boolean not [306] memset::$1 = memset::num#2 <= 0 from [305] memset::$0 = memset::num#2 > 0
Inversing boolean not [396] main::$15 = main::idx_x#1 != $200 from [395] main::$14 = main::idx_x#1 == $200
Inversing boolean not [401] main::$17 = main::idx_y#1 != $200 from [400] main::$16 = main::idx_y#1 == $200
Inversing boolean not [426] irq::$0 = 0 == frame_cnt from [425] irq::$1 = 0 != frame_cnt
Successful SSA optimization Pass2UnaryNotSimplification
Alias div32u16u::return#0 = div32u16u::return#3 
Alias sin16s_gen2::wavelength#1 = sin16s_gen2::wavelength#3 
Alias sin16s_gen2::ampl#0 = sin16s_gen2::ampl#4 
Alias sin16s_gen2::offs#0 = sin16s_gen2::offs#5 
Alias sin16s_gen2::sintab#6 = sin16s_gen2::sintab#7 
Alias rem16u#0 = rem16u#12 
Alias sin16s_gen2::x#2 = sin16s_gen2::x#4 sin16s_gen2::x#5 sin16s_gen2::x#3 
Alias sin16s_gen2::ampl#1 = sin16s_gen2::ampl#2 sin16s_gen2::ampl#3 sin16s_gen2::ampl#5 
Alias sin16s_gen2::offs#1 = sin16s_gen2::offs#3 sin16s_gen2::offs#4 sin16s_gen2::offs#2 
Alias sin16s_gen2::sintab#2 = sin16s_gen2::sintab#4 sin16s_gen2::sintab#5 sin16s_gen2::sintab#3 
Alias sin16s_gen2::step#1 = sin16s_gen2::step#3 sin16s_gen2::step#4 sin16s_gen2::step#2 
Alias sin16s_gen2::i#2 = sin16s_gen2::i#5 sin16s_gen2::i#4 sin16s_gen2::i#3 
Alias sin16s_gen2::wavelength#2 = sin16s_gen2::wavelength#6 sin16s_gen2::wavelength#5 sin16s_gen2::wavelength#4 
Alias rem16u#1 = rem16u#35 rem16u#23 rem16u#31 rem16u#28 rem16u#13 
Alias sin16s::return#0 = sin16s::return#3 
Alias mul16s::a#0 = sin16s_gen2::$5 
Alias mul16s::return#0 = mul16s::return#5 
Alias sin16s_gen2::x#1 = sin16s_gen2::$9 
Alias sin16s::x#3 = sin16s::x#5 
Alias sin16s::x#1 = sin16s::$16 
Alias mulu16_sel::return#0 = mulu16_sel::return#7 
Alias sin16s::x1#0 = sin16s::x1#1 sin16s::x1#4 sin16s::x1#2 sin16s::x1#3 
Alias sin16s::isUpper#2 = sin16s::isUpper#6 sin16s::isUpper#7 sin16s::isUpper#5 sin16s::isUpper#4 sin16s::isUpper#3 
Alias mulu16_sel::return#1 = mulu16_sel::return#8 
Alias mulu16_sel::return#2 = mulu16_sel::return#9 
Alias sin16s::x3#0 = sin16s::x3#1 
Alias mulu16_sel::return#10 = mulu16_sel::return#3 
Alias sin16s::usinx#0 = sin16s::usinx#4 sin16s::usinx#2 
Alias mulu16_sel::return#11 = mulu16_sel::return#4 
Alias sin16s::usinx#1 = sin16s::$13 sin16s::usinx#3 
Alias sin16s::x#4 = sin16s::x#7 
Alias sin16s::isUpper#8 = sin16s::isUpper#9 
Alias sin16s::x#2 = sin16s::$17 
Alias sin16s::return#1 = sin16s::sinx#2 sin16s::return#4 sin16s::return#2 
Alias sin16s::sinx#1 = sin16s::$18 
Alias mul16u::return#0 = mul16u::return#4 
Alias mulu16_sel::select#5 = mulu16_sel::select#6 
Alias mulu16_sel::return#12 = mulu16_sel::return#5 mulu16_sel::$2 mulu16_sel::return#6 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#7 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#8 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#3 = divr16u::dividend#7 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#4 = divr16u::divisor#5 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#6 = divr16u::rem#8 
Alias divr16u::divisor#2 = divr16u::divisor#3 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#11 = divr16u::rem#9 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#4 divr16u::return#1 
Alias rem16u#14 = rem16u#2 rem16u#3 
Alias divr16u::dividend#1 = div32u16u::$0 
Alias divr16u::return#2 = divr16u::return#5 
Alias div32u16u::dividend#1 = div32u16u::dividend#2 
Alias div32u16u::divisor#1 = div32u16u::divisor#2 
Alias rem16u#15 = rem16u#4 
Alias divr16u::dividend#2 = div32u16u::$2 
Alias divr16u::return#3 = divr16u::return#6 
Alias div32u16u::quotient_hi#0 = div32u16u::quotient_hi#1 
Alias rem16u#16 = rem16u#5 rem16u#17 rem16u#6 
Alias div32u16u::return#1 = div32u16u::quotient#0 div32u16u::return#4 div32u16u::return#2 
Alias mul16u::a#3 = mul16u::a#4 mul16u::a#7 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#1 mul16u::res#3 mul16u::return#5 mul16u::return#2 
Alias mul16u::a#1 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias mul16u::return#3 = mul16u::return#6 
Alias mul16s::a#3 = mul16s::a#4 mul16s::a#7 
Alias mul16s::b#3 = mul16s::b#6 mul16s::b#5 
Alias mul16s::m#0 = mul16s::m#3 
Alias mul16s::$11 = mul16s::$7 
Alias mul16s::m#5 = mul16s::m#6 
Alias mul16s::a#5 = mul16s::a#6 
Alias mul16s::$12 = mul16s::$10 
Alias mul16s::return#1 = mul16s::return#6 mul16s::return#2 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::gfx#4 = bitmap_init::gfx#5 
Alias bitmap_gfx#31 = bitmap_gfx#32 
Alias bitmap_screen#30 = bitmap_screen#31 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#3 bitmap_init::yoffs#0 
Alias bitmap_gfx#23 = bitmap_gfx#27 
Alias bitmap_screen#22 = bitmap_screen#26 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_gfx#18 = bitmap_gfx#19 
Alias bitmap_screen#17 = bitmap_screen#18 
Alias bitmap_init::yoffs#1 = bitmap_init::$10 
Alias bitmap_gfx#1 = bitmap_gfx#7 bitmap_gfx#13 
Alias bitmap_screen#1 = bitmap_screen#7 bitmap_screen#13 
Alias bitmap_gfx#14 = bitmap_gfx#8 
Alias memset::return#2 = memset::str#2 memset::return#4 memset::return#3 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias bitmap_gfx#15 = bitmap_gfx#20 
Alias bitmap_screen#14 = bitmap_screen#19 
Alias rem16u#18 = rem16u#7 rem16u#43 rem16u#41 rem16u#39 rem16u#36 rem16u#32 rem16u#29 
Alias bitmap_gfx#2 = bitmap_gfx#9 bitmap_gfx#35 bitmap_gfx#33 bitmap_gfx#28 bitmap_gfx#24 bitmap_gfx#21 
Alias bitmap_screen#2 = bitmap_screen#9 bitmap_screen#34 bitmap_screen#32 bitmap_screen#27 bitmap_screen#23 bitmap_screen#20 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$3 
Alias main::idx_x#3 = main::idx_x#5 main::idx_x#8 main::idx_x#6 main::idx_x#4 
Alias main::idx_y#3 = main::idx_y#5 main::idx_y#8 main::idx_y#9 main::idx_y#6 main::idx_y#7 
Alias rem16u#19 = rem16u#44 rem16u#26 rem16u#42 rem16u#40 rem16u#37 rem16u#38 rem16u#8 
Alias bitmap_gfx#10 = bitmap_gfx#37 bitmap_gfx#16 bitmap_gfx#36 bitmap_gfx#34 bitmap_gfx#29 bitmap_gfx#30 bitmap_gfx#3 
Alias bitmap_screen#10 = bitmap_screen#36 bitmap_screen#15 bitmap_screen#35 bitmap_screen#33 bitmap_screen#28 bitmap_screen#29 bitmap_screen#3 
Alias mul16s::return#3 = mul16s::return#7 
Alias mul16s::return#4 = mul16s::return#8 
Alias main::x#0 = main::x#1 
Alias main::idx_x#10 = main::idx_x#9 
Alias rem16u#33 = rem16u#34 
Alias bitmap_gfx#25 = bitmap_gfx#26 
Alias bitmap_screen#24 = bitmap_screen#25 
Alias rem16u#27 = rem16u#9 
Alias bitmap_gfx#17 = bitmap_gfx#4 
Alias bitmap_screen#16 = bitmap_screen#4 
Alias rem16u#10 = rem16u#20 rem16u#21 rem16u#11 
Alias bitmap_gfx#11 = bitmap_gfx#5 bitmap_gfx#12 bitmap_gfx#6 
Alias bitmap_screen#11 = bitmap_screen#5 bitmap_screen#12 bitmap_screen#6 
Successful SSA optimization Pass2AliasElimination
Alias sin16s::isUpper#2 = sin16s::isUpper#8 
Alias divr16u::dividend#3 = divr16u::dividend#4 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#2 = divr16u::divisor#4 divr16u::divisor#7 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#6 
Alias mul16u::a#3 = mul16u::a#5 
Alias mul16u::mb#2 = mul16u::mb#3 
Alias mul16s::b#3 = mul16s::b#4 
Alias mul16s::a#3 = mul16s::a#5 
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#4 
Alias bitmap_gfx#23 = bitmap_gfx#31 
Alias bitmap_screen#22 = bitmap_screen#30 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_gfx#1 = bitmap_gfx#18 
Alias bitmap_screen#1 = bitmap_screen#17 
Alias main::idx_y#3 = main::idx_y#4 
Alias rem16u#19 = rem16u#33 rem16u#30 
Alias bitmap_gfx#10 = bitmap_gfx#25 bitmap_gfx#22 
Alias bitmap_screen#10 = bitmap_screen#24 bitmap_screen#21 
Alias main::idx_x#10 = main::idx_x#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values sin16s_gen2::max#1 sin16s_gen2::max#0
Identical Phi Values sin16s_gen2::min#1 sin16s_gen2::min#0
Identical Phi Values sin16s_gen2::wavelength#1 sin16s_gen2::wavelength#0
Identical Phi Values rem16u#22 rem16u#25
Identical Phi Values sin16s_gen2::sintab#6 sin16s_gen2::sintab#1
Identical Phi Values rem16u#0 rem16u#16
Identical Phi Values sin16s_gen2::wavelength#2 sin16s_gen2::wavelength#1
Identical Phi Values rem16u#1 rem16u#0
Identical Phi Values sin16s_gen2::ampl#1 sin16s_gen2::ampl#0
Identical Phi Values sin16s_gen2::offs#1 sin16s_gen2::offs#0
Identical Phi Values sin16s_gen2::step#1 sin16s_gen2::step#0
Identical Phi Values sin16s::x#3 sin16s::x#0
Identical Phi Values divr16u::divisor#2 divr16u::divisor#6
Identical Phi Values div32u16u::dividend#1 div32u16u::dividend#0
Identical Phi Values div32u16u::divisor#1 div32u16u::divisor#0
Identical Phi Values rem16u#24 rem16u#22
Identical Phi Values rem16u#15 rem16u#14
Identical Phi Values rem16u#16 rem16u#14
Identical Phi Values bitmap_init::gfx#1 bitmap_init::gfx#0
Identical Phi Values bitmap_init::screen#1 bitmap_init::screen#0
Identical Phi Values bitmap_init::gfx#2 bitmap_init::gfx#1
Identical Phi Values bitmap_gfx#23 bitmap_gfx#0
Identical Phi Values bitmap_screen#22 bitmap_screen#0
Identical Phi Values bitmap_gfx#1 bitmap_gfx#23
Identical Phi Values bitmap_screen#1 bitmap_screen#22
Identical Phi Values bitmap_clear::fgcol#1 bitmap_clear::fgcol#0
Identical Phi Values bitmap_clear::bgcol#1 bitmap_clear::bgcol#0
Identical Phi Values bitmap_screen#8 bitmap_screen#2
Identical Phi Values bitmap_gfx#14 bitmap_gfx#2
Identical Phi Values bitmap_plot::y#1 bitmap_plot::y#0
Identical Phi Values bitmap_plot::x#1 bitmap_plot::x#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values rem16u#25 rem16u#27
Identical Phi Values bitmap_gfx#15 bitmap_gfx#17
Identical Phi Values bitmap_screen#14 bitmap_screen#16
Identical Phi Values rem16u#18 rem16u#1
Identical Phi Values bitmap_gfx#2 bitmap_gfx#1
Identical Phi Values bitmap_screen#2 bitmap_screen#1
Identical Phi Values rem16u#19 rem16u#18
Identical Phi Values bitmap_gfx#10 bitmap_gfx#2
Identical Phi Values bitmap_screen#10 bitmap_screen#2
Identical Phi Values rem16u#10 rem16u#19
Identical Phi Values bitmap_gfx#11 bitmap_gfx#10
Identical Phi Values bitmap_screen#11 bitmap_screen#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#2 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [266] bitmap_init::$7 = bitmap_init::y#2 & 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition sin16s_gen2::$4 [14] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2
Simple Condition sin16s::$1 [34] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
Simple Condition sin16s::$3 [37] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
Simple Condition sin16s::$15 [78] if(sin16s::isUpper#2==0) goto sin16s::@3
Simple Condition divr16u::$4 [100] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [105] if(divr16u::rem#6<divr16u::divisor#6) goto divr16u::@3
Simple Condition divr16u::$11 [110] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition mul16u::$0 [137] if(mul16u::a#3!=0) goto mul16u::@2
Simple Condition mul16u::$3 [140] if(mul16u::$1==0) goto mul16u::@4
Simple Condition mul16s::$2 [153] if(mul16s::a#3>=0) goto mul16s::@1
Simple Condition mul16s::$4 [156] if(mul16s::b#3>=0) goto mul16s::@2
Simple Condition bitmap_init::$1 [177] if(bitmap_init::bits#1!=0) goto bitmap_init::@2
Simple Condition bitmap_init::$2 [181] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition bitmap_init::$9 [193] if(bitmap_init::$7!=7) goto bitmap_init::@6
Simple Condition bitmap_init::$11 [197] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition memset::$1 [224] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [231] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$15 [293] if(main::idx_x#1!=$200) goto main::@3
Simple Condition main::$17 [297] if(main::idx_y#1!=$200) goto main::@4
Simple Condition irq::$0 [315] if(0==frame_cnt) goto irq::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [56] mulu16_sel::v2#2 = (unumber)$10000/6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant div32u16u::dividend#0 = PI2_u4f28
Constant sin16s_gen2::x#0 = 0
Constant sin16s_gen2::i#0 = 0
Constant sin16s::isUpper#0 = 0
Constant sin16s::isUpper#1 = 1
Constant mulu16_sel::select#0 = 0
Constant mulu16_sel::select#1 = 1
Constant mulu16_sel::v2#2 = (unumber)$10000/6
Constant mulu16_sel::select#2 = 1
Constant mulu16_sel::select#3 = 0
Constant mulu16_sel::select#4 = 0
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16u::rem#3 = 0
Constant mul16u::res#0 = 0
Constant bitmap_init::bits#0 = $80
Constant bitmap_init::x#0 = 0
Constant bitmap_init::bits#2 = $80
Constant bitmap_init::y#0 = 0
Constant memset::num#0 = $3e8
Constant memset::c#1 = 0
Constant memset::num#1 = $1f40
Constant sin16s_gen2::sintab#1 = SINE
Constant sin16s_gen2::wavelength#0 = $200
Constant sin16s_gen2::min#0 = -$1001
Constant sin16s_gen2::max#0 = $1001
Constant bitmap_init::gfx#0 = BITMAP
Constant bitmap_init::screen#0 = SCREEN
Constant bitmap_clear::bgcol#0 = BLACK
Constant bitmap_clear::fgcol#0 = WHITE
Constant main::toD0181_screen#0 = SCREEN
Constant main::toD0181_gfx#0 = BITMAP
Constant main::idx_x#0 = 0
Constant main::idx_y#0 = $80
Constant mul16s::a#1 = $a0
Constant mul16s::a#2 = $64
Constant main::idx_x#2 = 0
Constant main::idx_y#2 = 0
Constant rem16u#27 = 0
Constant bitmap_screen#16 = (char *) 0
Constant bitmap_gfx#17 = (char *) 0
Successful SSA optimization Pass2ConstantIdentification
Constant div32u16u::divisor#0 = sin16s_gen2::wavelength#0
Constant bitmap_gfx#0 = bitmap_init::gfx#0
Constant bitmap_screen#0 = bitmap_init::screen#0
Constant main::toD0181_$7 = (unsigned int)main::toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::divisor#0 = div32u16u::divisor#0
Constant divr16u::divisor#1 = div32u16u::divisor#0
Constant memset::str#0 = (void *)bitmap_screen#0
Constant memset::str#1 = (void *)bitmap_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (unsigned int)main::toD0181_gfx#0 in [256] main::toD0181_$3 = byte1  (unsigned int)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [265] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [108] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [110] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
Resolved ranged next value [179] bitmap_init::x#1 = ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [181] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to 0
Resolved ranged next value [195] bitmap_init::y#1 = ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [197] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to 0
De-inlining pointer[w] to *(pointer+w)   [267] main::cos_x#0 = SINE[main::$19]
De-inlining pointer[w] to *(pointer+w)   [278] main::sin_y#0 = SINE[main::$20]
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying expression containing zero bitmap_clear::$0 in [202] bitmap_clear::col#0 = bitmap_clear::$0 + bitmap_clear::bgcol#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable memset::return#0 and assignment [158] memset::return#0 = memset::str#3
Eliminating unused variable memset::return#1 and assignment [160] memset::return#1 = memset::str#3
Eliminating unused constant bitmap_clear::bgcol#0
Eliminating unused constant rem16u#27
Eliminating unused constant bitmap_screen#16
Eliminating unused constant bitmap_gfx#17
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $10 in if(divr16u::i#1!=$10) goto divr16u::@1
Adding number conversion cast (unumber) 0 in if(bitmap_init::x#1!=0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in if(bitmap_init::y#1!=0) goto bitmap_init::@5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast main::$8
Simplifying constant integer cast main::$12
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$7 = bitmap_init::$3 
Alias bitmap_clear::col#0 = bitmap_clear::$0 
Alias main::x#0 = main::$8 
Alias main::y#0 = main::$12 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] sin16s_gen2::ampl#0 = sin16s_gen2::max#0 - sin16s_gen2::min#0
Constant right-side identified [91] divr16u::dividend#1 = word1  div32u16u::dividend#0
Constant right-side identified [95] divr16u::dividend#2 = word0  div32u16u::dividend#0
Constant right-side identified [153] bitmap_clear::col#0 = bitmap_clear::fgcol#0 * $10
Constant right-side identified [179] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [182] main::toD0181_$3 = byte1  (unsigned int)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin16s_gen2::ampl#0 = sin16s_gen2::max#0-sin16s_gen2::min#0
Constant divr16u::dividend#1 = word1 div32u16u::dividend#0
Constant divr16u::dividend#2 = word0 div32u16u::dividend#0
Constant bitmap_clear::col#0 = bitmap_clear::fgcol#0*$10
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = byte1 (unsigned int)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant mul16s::b#0 = sin16s_gen2::ampl#0
Constant memset::c#0 = bitmap_clear::col#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] sin16s_gen2::$1 = sin16s_gen2::ampl#0 >> 1
Constant right-side identified [173] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [175] main::toD0181_$4 = main::toD0181_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin16s_gen2::$1 = sin16s_gen2::ampl#0>>1
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] sin16s_gen2::offs#0 = sin16s_gen2::min#0 + sin16s_gen2::$1
Constant right-side identified [172] main::toD0181_$2 = byte1  main::toD0181_$1
Constant right-side identified [173] main::toD0181_$5 = main::toD0181_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sin16s_gen2::offs#0 = sin16s_gen2::min#0+sin16s_gen2::$1
Constant main::toD0181_$2 = byte1 main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero sin16s_gen2::min#0+sin16s_gen2::$1 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero sin16s_gen2::$10 in [15] sin16s_gen2::$8 = sin16s_gen2::offs#0 + sin16s_gen2::$10
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant sin16s_gen2::$1
Eliminating unused constant sin16s_gen2::offs#0
Successful SSA optimization PassNEliminateUnusedVars
Alias sin16s_gen2::$8 = sin16s_gen2::$10 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [170] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [13] sin16s_gen2::$8 = (int)sin16s_gen2::$7 keeping sin16s_gen2::$8
Inlining Noop Cast [150] bitmap_plot::plotter#0 = (char *)bitmap_plot::$0 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [53] sin16s::sinx#0 = (int)sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [116] mul16s::$13 = (unsigned int)mul16s::b#3 keeping mul16s::b#3
Inlining Noop Cast [122] mul16s::$14 = (unsigned int)mul16s::a#3 keeping mul16s::a#3
Inlining Noop Cast [158] memset::$4 = (char *)memset::str#3 keeping memset::str#3
Inlining Noop Cast [160] memset::dst#0 = (char *)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [173] main::$19 = main::idx_x#3 * SIZEOF_INT
Rewriting multiplication to use shift [183] main::$20 = main::idx_y#3 * SIZEOF_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings sin16s_gen2::x#0
Inlining constant with var siblings sin16s_gen2::i#0
Inlining constant with var siblings sin16s_gen2::sintab#1
Inlining constant with var siblings sin16s::isUpper#0
Inlining constant with var siblings sin16s::isUpper#1
Inlining constant with var siblings mulu16_sel::select#0
Inlining constant with var siblings mulu16_sel::select#1
Inlining constant with var siblings mulu16_sel::v2#2
Inlining constant with var siblings mulu16_sel::select#2
Inlining constant with var siblings mulu16_sel::select#3
Inlining constant with var siblings mulu16_sel::select#4
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16u::rem#3
Inlining constant with var siblings divr16u::divisor#0
Inlining constant with var siblings divr16u::divisor#1
Inlining constant with var siblings divr16u::dividend#1
Inlining constant with var siblings divr16u::dividend#2
Inlining constant with var siblings mul16u::res#0
Inlining constant with var siblings mul16s::a#1
Inlining constant with var siblings mul16s::a#2
Inlining constant with var siblings mul16s::b#0
Inlining constant with var siblings bitmap_init::bits#0
Inlining constant with var siblings bitmap_init::x#0
Inlining constant with var siblings bitmap_init::bits#2
Inlining constant with var siblings bitmap_init::y#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings main::idx_x#0
Inlining constant with var siblings main::idx_y#0
Inlining constant with var siblings main::idx_x#2
Inlining constant with var siblings main::idx_y#2
Constant inlined bitmap_init::screen#0 = SCREEN
Constant inlined divr16u::rem#3 = 0
Constant inlined bitmap_init::gfx#0 = BITMAP
Constant inlined sin16s_gen2::i#0 = 0
Constant inlined sin16s::isUpper#0 = 0
Constant inlined memset::num#1 = $1f40
Constant inlined memset::num#0 = $3e8
Constant inlined mulu16_sel::select#4 = 0
Constant inlined mulu16_sel::select#2 = 1
Constant inlined mulu16_sel::select#3 = 0
Constant inlined mulu16_sel::select#0 = 0
Constant inlined sin16s::isUpper#1 = 1
Constant inlined mulu16_sel::select#1 = 1
Constant inlined main::idx_y#2 = 0
Constant inlined main::idx_y#0 = $80
Constant inlined mul16s::b#0 = sin16s_gen2::ampl#0
Constant inlined main::toD0181_$7 = (unsigned int)SCREEN
Constant inlined main::toD0181_$2 = byte1 (unsigned int)SCREEN&$3fff*4
Constant inlined main::toD0181_$1 = (unsigned int)SCREEN&$3fff*4
Constant inlined main::toD0181_$0 = (unsigned int)SCREEN&$3fff
Constant inlined bitmap_gfx#0 = BITMAP
Constant inlined main::toD0181_$5 = byte1 (unsigned int)BITMAP/4&$f
Constant inlined main::toD0181_$4 = byte1 (unsigned int)BITMAP/4
Constant inlined main::toD0181_$3 = byte1 (unsigned int)BITMAP
Constant inlined sin16s_gen2::sintab#1 = SINE
Constant inlined memset::c#0 = bitmap_clear::col#0
Constant inlined bitmap_init::x#0 = 0
Constant inlined memset::c#1 = 0
Constant inlined main::toD0181_screen#0 = SCREEN
Constant inlined main::toD0181_gfx#0 = BITMAP
Constant inlined divr16u::i#0 = 0
Constant inlined div32u16u::dividend#0 = PI2_u4f28
Constant inlined bitmap_init::bits#0 = $80
Constant inlined bitmap_init::bits#2 = $80
Constant inlined sin16s_gen2::x#0 = 0
Constant inlined divr16u::quotient#0 = 0
Constant inlined mul16u::res#0 = 0
Constant inlined main::idx_x#2 = 0
Constant inlined divr16u::divisor#1 = sin16s_gen2::wavelength#0
Constant inlined divr16u::divisor#0 = sin16s_gen2::wavelength#0
Constant inlined main::idx_x#0 = 0
Constant inlined mul16s::a#1 = $a0
Constant inlined memset::str#1 = (void *)BITMAP
Constant inlined mul16s::a#2 = $64
Constant inlined memset::str#0 = (void *)SCREEN
Constant inlined bitmap_clear::fgcol#0 = WHITE
Constant inlined divr16u::dividend#1 = word1 PI2_u4f28
Constant inlined divr16u::dividend#2 = word0 PI2_u4f28
Constant inlined bitmap_screen#0 = SCREEN
Constant inlined mulu16_sel::v2#2 = (unsigned int)$10000/6
Constant inlined bitmap_init::y#0 = 0
Constant inlined div32u16u::divisor#0 = sin16s_gen2::wavelength#0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values divr16u::divisor#6 sin16s_gen2::wavelength#0
Successful SSA optimization Pass2IdenticalPhiElimination
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (unsigned int) $200
Finalized unsigned number type (unsigned int) $200
Finalized unsigned number type (unsigned long) $10000
Finalized unsigned number type (char) 6
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting sin16s::@12(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@12 ) during phi lifting.
Added new block during phi lifting sin16s::@13(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@14(between sin16s::@11 and sin16s::@3)
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting mul16s::@6(between mul16s::@5 and mul16s::@1)
Added new block during phi lifting mul16s::@7(between mul16s::@1 and mul16s::@2)
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting main::@15(between main::@14 and main::@3)
Added new block during phi lifting main::@16(between main::@3 and main::@4)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_clear::@2
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of mul16u::@3
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to sin16s_gen2:13 bitmap_init:15 bitmap_clear:17 init_irq:22 mul16s:30 mul16s:41 bitmap_plot:49 
Calls in [sin16s_gen2] to div32u16u:64 sin16s:71 mul16s:75 
Calls in [bitmap_clear] to memset:117 memset:119 
Calls in [mul16s] to mul16u:137 
Calls in [div32u16u] to divr16u:163 divr16u:168 
Calls in [sin16s] to mulu16_sel:187 mulu16_sel:194 mulu16_sel:199 mulu16_sel:207 mulu16_sel:214 
Calls in [mulu16_sel] to mul16u:292 

Created 43 initial phi equivalence classes
Coalesced [29] mul16s::b#8 = mul16s::b#1
Coalesced [40] mul16s::b#7 = mul16s::b#2
Coalesced [59] main::idx_x#11 = main::idx_x#10
Coalesced [60] main::idx_y#11 = main::idx_y#10
Coalesced [61] main::idx_y#12 = main::idx_y#1
Coalesced [62] main::idx_x#12 = main::idx_x#1
Coalesced [74] mul16s::a#8 = mul16s::a#0
Coalesced [83] sin16s_gen2::i#6 = sin16s_gen2::i#1
Coalesced [84] sin16s_gen2::x#6 = sin16s_gen2::x#1
Coalesced [85] sin16s_gen2::sintab#8 = sin16s_gen2::sintab#0
Coalesced [105] bitmap_init::yoffs#7 = bitmap_init::yoffs#1
Coalesced [110] bitmap_init::y#5 = bitmap_init::y#1
Coalesced [111] bitmap_init::yoffs#5 = bitmap_init::yoffs#4
Coalesced (already) [112] bitmap_init::yoffs#6 = bitmap_init::yoffs#2
Coalesced [113] bitmap_init::bits#5 = bitmap_init::bits#4
Coalesced [114] bitmap_init::x#5 = bitmap_init::x#1
Coalesced [115] bitmap_init::bits#6 = bitmap_init::bits#1
Coalesced [135] mul16u::b#3 = mul16u::b#1
Coalesced [136] mul16u::a#8 = mul16u::a#2
Coalesced [144] mul16s::m#7 = mul16s::m#1
Coalesced [150] mul16s::m#10 = mul16s::m#2
Coalesced [154] mul16s::m#9 = mul16s::m#5
Coalesced [155] mul16s::m#8 = mul16s::m#0
Coalesced [167] divr16u::rem#12 = divr16u::rem#4
Coalesced [175] sin16s::x#9 = sin16s::x#1
Coalesced [179] sin16s::x#11 = sin16s::x#2
Coalesced [185] mulu16_sel::v1#7 = mulu16_sel::v1#0
Coalesced [186] mulu16_sel::v2#7 = mulu16_sel::v2#0
Coalesced [192] mulu16_sel::v1#8 = mulu16_sel::v1#1
Coalesced [193] mulu16_sel::v2#8 = mulu16_sel::v2#1
Coalesced [198] mulu16_sel::v1#9 = mulu16_sel::v1#2
Coalesced [205] mulu16_sel::v1#10 = mulu16_sel::v1#3
Coalesced [206] mulu16_sel::v2#9 = mulu16_sel::v2#3
Coalesced [212] mulu16_sel::v1#6 = mulu16_sel::v1#4
Coalesced [213] mulu16_sel::v2#6 = mulu16_sel::v2#4
Coalesced [221] sin16s::return#6 = sin16s::sinx#1
Coalesced [225] sin16s::x#10 = sin16s::x#4
Coalesced [226] sin16s::x#8 = sin16s::x#0
Coalesced [237] memset::dst#5 = memset::dst#1
Coalesced [240] mul16u::a#10 = mul16u::a#6
Coalesced [241] mul16u::mb#6 = mul16u::mb#0
Coalesced [249] mul16u::res#9 = mul16u::res#1
Coalesced [253] mul16u::a#11 = mul16u::a#1
Coalesced [254] mul16u::res#7 = mul16u::res#6
Coalesced [255] mul16u::mb#7 = mul16u::mb#1
Coalesced (already) [256] mul16u::res#8 = mul16u::res#2
Coalesced [258] divr16u::rem#13 = divr16u::rem#10
Coalesced [259] divr16u::dividend#9 = divr16u::dividend#5
Coalesced [266] divr16u::rem#16 = divr16u::rem#1
Coalesced [273] divr16u::rem#18 = divr16u::rem#2
Coalesced [274] divr16u::return#8 = divr16u::quotient#2
Coalesced [280] divr16u::rem#14 = divr16u::rem#11
Coalesced [281] divr16u::dividend#10 = divr16u::dividend#0
Coalesced [282] divr16u::quotient#9 = divr16u::return#0
Coalesced [283] divr16u::i#7 = divr16u::i#1
Coalesced [284] divr16u::rem#17 = divr16u::rem#6
Coalesced [285] divr16u::return#7 = divr16u::quotient#1
Coalesced [286] divr16u::rem#15 = divr16u::rem#0
Coalesced [290] mul16u::b#4 = mul16u::b#0
Coalesced [291] mul16u::a#9 = mul16u::a#0
Coalesced down to 30 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@11
Culled Empty Block label main::@5
Culled Empty Block label main::@6
Culled Empty Block label bitmap_init::@3
Culled Empty Block label bitmap_init::@4
Culled Empty Block label bitmap_init::@10
Culled Empty Block label bitmap_init::@11
Culled Empty Block label bitmap_init::@8
Culled Empty Block label bitmap_clear::@2
Culled Empty Block label mul16s::@7
Culled Empty Block label mul16s::@6
Culled Empty Block label sin16s::@13
Culled Empty Block label sin16s::@12
Culled Empty Block label memset::@1
Culled Empty Block label mul16u::@3
Culled Empty Block label mul16u::@6
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Renumbering block sin16s::@14 to sin16s::@12
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Renumbering block main::@9 to main::@7
Renumbering block main::@10 to main::@8
Renumbering block main::@12 to main::@9
Renumbering block main::@13 to main::@10
Renumbering block main::@14 to main::@11
Renumbering block main::@15 to main::@12
Renumbering block main::@16 to main::@13
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of sin16s_gen2
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of div32u16u

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] frame_cnt = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__interrupt(hardware_clobber) void irq()
irq: scope:[irq]  from
  [5] *BG_COLOR = WHITE
  [6] if(0==frame_cnt) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [7] frame_cnt = ++ frame_cnt
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [8] *BG_COLOR = BLACK
  [9] *IRQ_STATUS = IRQ_RASTER
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [10] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [11] phi()
  [12] call sin16s_gen2
  to:main::@6
main::@6: scope:[main]  from main
  [13] phi()
  [14] call bitmap_init
  to:main::@7
main::@7: scope:[main]  from main::@6
  [15] phi()
  [16] call bitmap_clear
  to:main::@8
main::@8: scope:[main]  from main::@7
  [17] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
  to:main::toD0181
main::toD0181: scope:[main]  from main::@8
  [18] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [19] *D018 = main::toD0181_return#0
  [20] call init_irq
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  [21] main::idx_y#3 = phi( main::@5/$80, main::@4/main::idx_y#10 )
  [21] main::idx_x#3 = phi( main::@5/0, main::@4/main::idx_x#10 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [22] main::$19 = main::idx_x#3 << 1
  [23] main::$21 = SINE + main::$19
  [24] main::cos_x#0 = *main::$21
  [25] mul16s::b#1 = main::cos_x#0
  [26] call mul16s
  [27] mul16s::return#3 = mul16s::return#1
  to:main::@9
main::@9: scope:[main]  from main::@2
  [28] main::xpos#0 = mul16s::return#3
  [29] main::$6 = main::xpos#0 << 4
  [30] main::$7 = word1  main::$6
  [31] main::x#0 = $a0 + main::$7
  [32] main::$20 = main::idx_y#3 << 1
  [33] main::$22 = SINE + main::$20
  [34] main::sin_y#0 = *main::$22
  [35] mul16s::b#2 = main::sin_y#0
  [36] call mul16s
  [37] mul16s::return#4 = mul16s::return#1
  to:main::@10
main::@10: scope:[main]  from main::@9
  [38] main::ypos#0 = mul16s::return#4
  [39] main::$10 = main::ypos#0 << 4
  [40] main::$11 = word1  main::$10
  [41] main::y#0 = $64 + main::$11
  [42] bitmap_plot::x#0 = main::x#0
  [43] bitmap_plot::y#0 = (char)main::y#0
  [44] call bitmap_plot
  to:main::@11
main::@11: scope:[main]  from main::@10
  [45] main::idx_x#1 = ++ main::idx_x#3
  [46] if(main::idx_x#1!=$200) goto main::@12
  to:main::@3
main::@12: scope:[main]  from main::@11
  [47] phi()
  to:main::@3
main::@3: scope:[main]  from main::@11 main::@12
  [48] main::idx_x#10 = phi( main::@12/main::idx_x#1, main::@11/0 )
  [49] main::idx_y#1 = ++ main::idx_y#3
  [50] if(main::idx_y#1!=$200) goto main::@13
  to:main::@4
main::@13: scope:[main]  from main::@3
  [51] phi()
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@3
  [52] main::idx_y#10 = phi( main::@13/main::idx_y#1, main::@3/0 )
  [53] plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt]
  to:main::@1

void sin16s_gen2(int *sintab , unsigned int wavelength , int min , int max)
sin16s_gen2: scope:[sin16s_gen2]  from main
  [54] phi()
  [55] call div32u16u
  [56] div32u16u::return#0 = div32u16u::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [57] sin16s_gen2::step#0 = div32u16u::return#0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [58] sin16s_gen2::sintab#2 = phi( sin16s_gen2::@3/SINE, sin16s_gen2::@5/sin16s_gen2::sintab#0 )
  [58] sin16s_gen2::x#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::x#1 )
  [58] sin16s_gen2::i#2 = phi( sin16s_gen2::@3/0, sin16s_gen2::@5/sin16s_gen2::i#1 )
  [59] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [60] return 
  to:@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [61] sin16s::x#0 = sin16s_gen2::x#2
  [62] call sin16s
  [63] sin16s::return#0 = sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  [64] mul16s::a#0 = sin16s::return#0
  [65] call mul16s
  [66] mul16s::return#0 = mul16s::return#1
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [67] sin16s_gen2::$6 = mul16s::return#0
  [68] sin16s_gen2::$8 = word1  sin16s_gen2::$6
  [69] *sin16s_gen2::sintab#2 = (int)sin16s_gen2::$8
  [70] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_INT
  [71] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0
  [72] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2
  to:sin16s_gen2::@1

void bitmap_init(char *gfx , char *screen)
bitmap_init: scope:[bitmap_init]  from main::@6
  [73] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [74] bitmap_init::x#2 = phi( bitmap_init/0, bitmap_init::@2/bitmap_init::x#1 )
  [74] bitmap_init::bits#3 = phi( bitmap_init/$80, bitmap_init::@2/bitmap_init::bits#4 )
  [75] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3
  [76] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1
  [77] if(bitmap_init::bits#1!=0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [78] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [79] bitmap_init::bits#4 = phi( bitmap_init::@6/bitmap_init::bits#1, bitmap_init::@1/$80 )
  [80] bitmap_init::x#1 = ++ bitmap_init::x#2
  [81] if(bitmap_init::x#1!=0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [82] bitmap_init::yoffs#2 = phi( bitmap_init::@2/BITMAP, bitmap_init::@4/bitmap_init::yoffs#4 )
  [82] bitmap_init::y#2 = phi( bitmap_init::@2/0, bitmap_init::@4/bitmap_init::y#1 )
  [83] bitmap_init::$7 = bitmap_init::y#2 & 7
  [84] bitmap_init::$4 = byte0  bitmap_init::yoffs#2
  [85] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4
  [86] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5
  [87] bitmap_init::$6 = byte1  bitmap_init::yoffs#2
  [88] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6
  [89] if(bitmap_init::$7!=7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [90] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (unsigned int)$28*8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [91] bitmap_init::yoffs#4 = phi( bitmap_init::@3/bitmap_init::yoffs#2, bitmap_init::@5/bitmap_init::yoffs#1 )
  [92] bitmap_init::y#1 = ++ bitmap_init::y#2
  [93] if(bitmap_init::y#1!=0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [94] return 
  to:@return

void bitmap_clear(char bgcol , char fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@7
  [95] phi()
  [96] call memset
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [97] phi()
  [98] call memset
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [99] return 
  to:@return

void init_irq()
init_irq: scope:[init_irq]  from main::@5
  asm { sei  }
  [101] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [102] *PROCPORT = PROCPORT_RAM_IO
  [103] *((char *)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [104] *VICII_CONTROL1 = *VICII_CONTROL1 | $80
  [105] *RASTER = 0
  [106] *IRQ_ENABLE = IRQ_RASTER
  [107] *HARDWARE_IRQ = &irq
  asm { cli  }
  to:init_irq::@return
init_irq::@return: scope:[init_irq]  from init_irq
  [109] return 
  to:@return

long mul16s(int a , int b)
mul16s: scope:[mul16s]  from main::@2 main::@9 sin16s_gen2::@4
  [110] mul16s::b#3 = phi( main::@9/mul16s::b#2, main::@2/mul16s::b#1, sin16s_gen2::@4/sin16s_gen2::ampl#0 )
  [110] mul16s::a#3 = phi( main::@9/$64, main::@2/$a0, sin16s_gen2::@4/mul16s::a#0 )
  [111] mul16u::a#2 = (unsigned int)mul16s::a#3
  [112] mul16u::b#1 = (unsigned int)mul16s::b#3
  [113] call mul16u
  [114] mul16u::return#3 = mul16u::res#2
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  [115] mul16s::m#0 = mul16u::return#3
  [116] if(mul16s::a#3>=0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@5
  [117] mul16s::$6 = word1  mul16s::m#0
  [118] mul16s::$11 = mul16s::$6 - (unsigned int)mul16s::b#3
  [119] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  [120] mul16s::m#5 = phi( mul16s::@3/mul16s::m#1, mul16s::@5/mul16s::m#0 )
  [121] if(mul16s::b#3>=0) goto mul16s::@2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s::@1
  [122] mul16s::$9 = word1  mul16s::m#5
  [123] mul16s::$12 = mul16s::$9 - (unsigned int)mul16s::a#3
  [124] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  [125] mul16s::m#4 = phi( mul16s::@1/mul16s::m#5, mul16s::@4/mul16s::m#2 )
  [126] mul16s::return#1 = (long)mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [127] return 
  to:@return

void bitmap_plot(unsigned int x , char y)
bitmap_plot: scope:[bitmap_plot]  from main::@10
  [128] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#0] w= bitmap_plot_ylo[bitmap_plot::y#0]
  [129] bitmap_plot::$1 = bitmap_plot::x#0 & $fff8
  [130] bitmap_plot::plotter#1 = (char *)bitmap_plot::plotter#0 + bitmap_plot::$1
  [131] bitmap_plot::$2 = byte0  bitmap_plot::x#0
  [132] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2]
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [133] return 
  to:@return

unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [134] phi()
  [135] call divr16u
  [136] divr16u::return#2 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [137] div32u16u::quotient_hi#0 = divr16u::return#2
  [138] divr16u::rem#4 = rem16u#14
  [139] call divr16u
  [140] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [141] div32u16u::quotient_lo#0 = divr16u::return#3
  [142] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [143] return 
  to:@return

int sin16s(unsigned long x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  [144] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [145] sin16s::x#1 = sin16s::x#0 - PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [146] sin16s::isUpper#2 = phi( sin16s/0, sin16s::@4/1 )
  [146] sin16s::x#4 = phi( sin16s/sin16s::x#0, sin16s::@4/sin16s::x#1 )
  [147] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [148] sin16s::x#2 = PI_u4f28 - sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [149] sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  [150] sin16s::$4 = sin16s::x#6 << 3
  [151] sin16s::x1#0 = word1  sin16s::$4
  [152] mulu16_sel::v1#0 = sin16s::x1#0
  [153] mulu16_sel::v2#0 = sin16s::x1#0
  [154] call mulu16_sel
  [155] mulu16_sel::return#0 = mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [156] sin16s::x2#0 = mulu16_sel::return#0
  [157] mulu16_sel::v1#1 = sin16s::x2#0
  [158] mulu16_sel::v2#1 = sin16s::x1#0
  [159] call mulu16_sel
  [160] mulu16_sel::return#1 = mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [161] sin16s::x3#0 = mulu16_sel::return#1
  [162] mulu16_sel::v1#2 = sin16s::x3#0
  [163] call mulu16_sel
  [164] mulu16_sel::return#2 = mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [165] sin16s::x3_6#0 = mulu16_sel::return#2
  [166] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0
  [167] mulu16_sel::v1#3 = sin16s::x3#0
  [168] mulu16_sel::v2#3 = sin16s::x1#0
  [169] call mulu16_sel
  [170] mulu16_sel::return#10 = mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [171] sin16s::x4#0 = mulu16_sel::return#10
  [172] mulu16_sel::v1#4 = sin16s::x4#0
  [173] mulu16_sel::v2#4 = sin16s::x1#0
  [174] call mulu16_sel
  [175] mulu16_sel::return#11 = mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [176] sin16s::x5#0 = mulu16_sel::return#11
  [177] sin16s::x5_128#0 = sin16s::x5#0 >> 4
  [178] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0
  [179] if(sin16s::isUpper#2==0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [180] sin16s::sinx#1 = - (int)sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [181] sin16s::return#1 = phi( sin16s::@12/sin16s::return#5, sin16s::@6/sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [182] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [183] sin16s::return#5 = (int)sin16s::usinx#1
  to:sin16s::@3

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [184] memset::c#4 = phi( bitmap_clear/bitmap_clear::col#0, bitmap_clear::@1/0 )
  [184] memset::str#3 = phi( bitmap_clear/(void *)SCREEN, bitmap_clear::@1/(void *)BITMAP )
  [184] memset::num#2 = phi( bitmap_clear/$3e8, bitmap_clear::@1/$1f40 )
  [185] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [186] memset::end#0 = (char *)memset::str#3 + memset::num#2
  [187] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [188] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [189] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [190] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [191] *memset::dst#2 = memset::c#4
  [192] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

unsigned long mul16u(unsigned int a , unsigned int b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [193] mul16u::a#6 = phi( mul16s/mul16u::a#2, mulu16_sel/mul16u::a#0 )
  [193] mul16u::b#2 = phi( mul16s/mul16u::b#1, mulu16_sel/mul16u::b#0 )
  [194] mul16u::mb#0 = (unsigned long)mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [195] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [195] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [195] mul16u::a#3 = phi( mul16u/mul16u::a#6, mul16u::@3/mul16u::a#1 )
  [196] if(mul16u::a#3!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [197] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [198] mul16u::$1 = mul16u::a#3 & 1
  [199] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [200] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [201] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [202] mul16u::a#1 = mul16u::a#3 >> 1
  [203] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1

unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [204] divr16u::dividend#5 = phi( div32u16u/word1 PI2_u4f28, div32u16u::@1/word0 PI2_u4f28 )
  [204] divr16u::rem#10 = phi( div32u16u/0, div32u16u::@1/divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [205] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [205] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [205] divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#0 )
  [205] divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  [206] divr16u::rem#0 = divr16u::rem#5 << 1
  [207] divr16u::$1 = byte1  divr16u::dividend#3
  [208] divr16u::$2 = divr16u::$1 & $80
  [209] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [210] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [211] divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [212] divr16u::dividend#0 = divr16u::dividend#3 << 1
  [213] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [214] if(divr16u::rem#6<sin16s_gen2::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [215] divr16u::quotient#2 = ++ divr16u::quotient#1
  [216] divr16u::rem#2 = divr16u::rem#6 - sin16s_gen2::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [217] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [217] divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  [218] divr16u::i#1 = ++ divr16u::i#2
  [219] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [220] rem16u#14 = divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [221] return 
  to:@return

unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [222] mulu16_sel::select#5 = phi( sin16s::@10/0, sin16s::@2/0, sin16s::@7/1, sin16s::@8/1, sin16s::@9/0 )
  [222] mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/(unsigned int)$10000/6, sin16s::@9/mulu16_sel::v2#3 )
  [222] mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  [223] mul16u::a#0 = mulu16_sel::v1#5
  [224] mul16u::b#0 = mulu16_sel::v2#5
  [225] call mul16u
  [226] mul16u::return#0 = mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [227] mulu16_sel::$0 = mul16u::return#0
  [228] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  [229] mulu16_sel::return#12 = word1  mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [230] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
void bitmap_clear(char bgcol , char fgcol)
char bitmap_clear::bgcol
char bitmap_clear::col
char bitmap_clear::fgcol
char *bitmap_gfx
void bitmap_init(char *gfx , char *screen)
char bitmap_init::$4 // 2002.0
char bitmap_init::$5 // 2002.0
char bitmap_init::$6 // 2002.0
char bitmap_init::$7 // 500.5
char bitmap_init::bits
char bitmap_init::bits#1 // 1001.0
char bitmap_init::bits#3 // 1501.5
char bitmap_init::bits#4 // 667.3333333333334
char *bitmap_init::gfx
char *bitmap_init::screen
char bitmap_init::x
char bitmap_init::x#1 // 1501.5
char bitmap_init::x#2 // 500.5
char bitmap_init::y
char bitmap_init::y#1 // 1501.5
char bitmap_init::y#2 // 500.5
char *bitmap_init::yoffs
char *bitmap_init::yoffs#1 // 2002.0
char *bitmap_init::yoffs#2 // 625.625
char *bitmap_init::yoffs#4 // 1001.0
void bitmap_plot(unsigned int x , char y)
unsigned int bitmap_plot::$1 // 2002.0
char bitmap_plot::$2 // 2002.0
char *bitmap_plot::plotter
unsigned int bitmap_plot::plotter#0 // 500.5
char *bitmap_plot::plotter#1 // 1501.5
unsigned int bitmap_plot::x
unsigned int bitmap_plot::x#0 // 420.59999999999997
char bitmap_plot::y
char bitmap_plot::y#0 // 2103.0
char *bitmap_screen
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned long div32u16u::dividend
unsigned int div32u16u::divisor
unsigned long div32u16u::quotient
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0 // 400.4
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0 // 2002.0
unsigned long div32u16u::return
unsigned long div32u16u::return#0 // 202.0
unsigned long div32u16u::return#1 // 367.33333333333337
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // 200002.0
char divr16u::$2 // 200002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // 25000.25
unsigned int divr16u::dividend#3 // 44286.28571428572
unsigned int divr16u::dividend#5 // 10001.0
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // 150001.5
char divr16u::i#2 // 15384.76923076923
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // 150001.5
unsigned int divr16u::quotient#2 // 100001.0
unsigned int divr16u::quotient#3 // 25000.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // 75000.75
unsigned int divr16u::rem#1 // 200002.0
unsigned int divr16u::rem#10 // 11002.0
unsigned int divr16u::rem#11 // 103334.66666666667
unsigned int divr16u::rem#2 // 200002.0
unsigned int divr16u::rem#4 // 2002.0
unsigned int divr16u::rem#5 // 210003.0
unsigned int divr16u::rem#6 // 100001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // 43143.57142857143
unsigned int divr16u::return#2 // 2002.0
unsigned int divr16u::return#3 // 2002.0
__loadstore volatile char frame_cnt // 4.468085106382979
void init_irq()
__interrupt(hardware_clobber) void irq()
void main()
long main::$10 // 202.0
unsigned int main::$11 // 202.0
unsigned int main::$19 // 202.0
unsigned int main::$20 // 202.0
int *main::$21 // 202.0
int *main::$22 // 202.0
long main::$6 // 202.0
unsigned int main::$7 // 202.0
int main::cos_x
int main::cos_x#0 // 202.0
unsigned int main::idx_x
unsigned int main::idx_x#1 // 101.0
unsigned int main::idx_x#10 // 33.666666666666664
unsigned int main::idx_x#3 // 12.625
unsigned int main::idx_y
unsigned int main::idx_y#1 // 101.0
unsigned int main::idx_y#10 // 101.0
unsigned int main::idx_y#3 // 10.821428571428571
int main::sin_y
int main::sin_y#0 // 202.0
char *main::toD0181_gfx
char main::toD0181_return
char *main::toD0181_screen
unsigned int main::x
unsigned int main::x#0 // 18.363636363636363
long main::xpos
long main::xpos#0 // 202.0
unsigned int main::y
unsigned int main::y#0 // 50.5
long main::ypos
long main::ypos#0 // 202.0
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // 1250.125
char *memset::dst
char *memset::dst#1 // 20002.0
char *memset::dst#2 // 13668.333333333332
char *memset::dst#4 // 2002.0
char *memset::end
char *memset::end#0 // 1833.6666666666665
unsigned int memset::num
unsigned int memset::num#2 // 1001.0
void *memset::return
void *memset::str
void *memset::str#3
long mul16s(int a , int b)
unsigned int mul16s::$11 // 20002.0
unsigned int mul16s::$12 // 20002.0
unsigned int mul16s::$6 // 20002.0
unsigned int mul16s::$9 // 20002.0
int mul16s::a
int mul16s::a#0 // 2002.0
int mul16s::a#3 // 846.3076923076923
int mul16s::b
int mul16s::b#1 // 202.0
int mul16s::b#2 // 202.0
int mul16s::b#3 // 927.5454545454545
unsigned long mul16s::m
unsigned long mul16s::m#0 // 10001.0
unsigned long mul16s::m#1 // 20002.0
unsigned long mul16s::m#2 // 20002.0
unsigned long mul16s::m#4 // 20002.0
unsigned long mul16s::m#5 // 12501.25
long mul16s::return
long mul16s::return#0 // 2002.0
long mul16s::return#1 // 2240.8
long mul16s::return#3 // 202.0
long mul16s::return#4 // 202.0
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // 2.00000002E8
unsigned int mul16u::a
unsigned int mul16u::a#0 // 100001.0
unsigned int mul16u::a#1 // 1.00000001E8
unsigned int mul16u::a#2 // 10001.0
unsigned int mul16u::a#3 // 6.683333416666667E7
unsigned int mul16u::a#6 // 555001.5
unsigned int mul16u::b
unsigned int mul16u::b#0 // 200002.0
unsigned int mul16u::b#1 // 20002.0
unsigned int mul16u::b#2 // 110002.0
unsigned long mul16u::mb
unsigned long mul16u::mb#0 // 2000002.0
unsigned long mul16u::mb#1 // 2.00000002E8
unsigned long mul16u::mb#2 // 4.300000057142857E7
unsigned long mul16u::res
unsigned long mul16u::res#1 // 2.00000002E8
unsigned long mul16u::res#2 // 4.287285785714286E7
unsigned long mul16u::res#6 // 1.00000001E8
unsigned long mul16u::return
unsigned long mul16u::return#0 // 200002.0
unsigned long mul16u::return#3 // 20002.0
unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
unsigned long mulu16_sel::$0 // 200002.0
unsigned long mulu16_sel::$1 // 200002.0
unsigned int mulu16_sel::return
unsigned int mulu16_sel::return#0 // 20002.0
unsigned int mulu16_sel::return#1 // 20002.0
unsigned int mulu16_sel::return#10 // 20002.0
unsigned int mulu16_sel::return#11 // 20002.0
unsigned int mulu16_sel::return#12 // 21429.428571428572
unsigned int mulu16_sel::return#2 // 20002.0
char mulu16_sel::select
char mulu16_sel::select#5 // 16666.833333333332
unsigned int mulu16_sel::v1
unsigned int mulu16_sel::v1#0 // 10001.0
unsigned int mulu16_sel::v1#1 // 10001.0
unsigned int mulu16_sel::v1#2 // 20002.0
unsigned int mulu16_sel::v1#3 // 10001.0
unsigned int mulu16_sel::v1#4 // 10001.0
unsigned int mulu16_sel::v1#5 // 150006.0
unsigned int mulu16_sel::v2
unsigned int mulu16_sel::v2#0 // 20002.0
unsigned int mulu16_sel::v2#1 // 20002.0
unsigned int mulu16_sel::v2#3 // 20002.0
unsigned int mulu16_sel::v2#4 // 20002.0
unsigned int mulu16_sel::v2#5 // 70002.5
unsigned int rem16u
unsigned int rem16u#14 // 2200.4
int sin16s(unsigned long x)
unsigned long sin16s::$4 // 20002.0
char sin16s::isUpper
char sin16s::isUpper#2 // 303.06060606060606
int sin16s::return
int sin16s::return#0 // 2002.0
int sin16s::return#1 // 7001.0
int sin16s::return#5 // 20002.0
int sin16s::sinx
int sin16s::sinx#1 // 20002.0
unsigned int sin16s::usinx
unsigned int sin16s::usinx#0 // 1666.8333333333333
unsigned int sin16s::usinx#1 // 5000.5
unsigned long sin16s::x
unsigned long sin16s::x#0 // 15502.0
unsigned long sin16s::x#1 // 20002.0
unsigned long sin16s::x#2 // 20002.0
unsigned long sin16s::x#4 // 25002.5
unsigned long sin16s::x#6 // 30003.0
unsigned int sin16s::x1
unsigned int sin16s::x1#0 // 3182.1363636363635
unsigned int sin16s::x2
unsigned int sin16s::x2#0 // 20002.0
unsigned int sin16s::x3
unsigned int sin16s::x3#0 // 5000.5
unsigned int sin16s::x3_6
unsigned int sin16s::x3_6#0 // 20002.0
unsigned int sin16s::x4
unsigned int sin16s::x4#0 // 20002.0
unsigned int sin16s::x5
unsigned int sin16s::x5#0 // 20002.0
unsigned int sin16s::x5_128
unsigned int sin16s::x5_128#0 // 20002.0
void sin16s_gen2(int *sintab , unsigned int wavelength , int min , int max)
long sin16s_gen2::$6 // 2002.0
unsigned int sin16s_gen2::$8 // 1001.0
int sin16s_gen2::ampl
unsigned int sin16s_gen2::i
unsigned int sin16s_gen2::i#1 // 2002.0
unsigned int sin16s_gen2::i#2 // 231.0
int sin16s_gen2::max
int sin16s_gen2::min
int sin16s_gen2::offs
int *sin16s_gen2::sintab
int *sin16s_gen2::sintab#0 // 667.3333333333334
int *sin16s_gen2::sintab#2 // 273.0
unsigned long sin16s_gen2::step
unsigned long sin16s_gen2::step#0 // 73.46666666666667
unsigned int sin16s_gen2::wavelength
unsigned long sin16s_gen2::x
unsigned long sin16s_gen2::x#1 // 1001.0
unsigned long sin16s_gen2::x#2 // 250.25

Initial phi equivalence classes
[ main::idx_x#3 main::idx_x#10 main::idx_x#1 ]
[ main::idx_y#3 main::idx_y#10 main::idx_y#1 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ mul16s::a#3 mul16s::a#0 ]
[ mul16s::b#3 mul16s::b#2 mul16s::b#1 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ mul16u::b#2 mul16u::b#1 mul16u::b#0 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
Added variable frame_cnt to live range equivalence class [ frame_cnt ]
Added variable main::$19 to live range equivalence class [ main::$19 ]
Added variable main::$21 to live range equivalence class [ main::$21 ]
Added variable main::cos_x#0 to live range equivalence class [ main::cos_x#0 ]
Added variable mul16s::return#3 to live range equivalence class [ mul16s::return#3 ]
Added variable main::xpos#0 to live range equivalence class [ main::xpos#0 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable main::x#0 to live range equivalence class [ main::x#0 ]
Added variable main::$20 to live range equivalence class [ main::$20 ]
Added variable main::$22 to live range equivalence class [ main::$22 ]
Added variable main::sin_y#0 to live range equivalence class [ main::sin_y#0 ]
Added variable mul16s::return#4 to live range equivalence class [ mul16s::return#4 ]
Added variable main::ypos#0 to live range equivalence class [ main::ypos#0 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable main::y#0 to live range equivalence class [ main::y#0 ]
Added variable bitmap_plot::x#0 to live range equivalence class [ bitmap_plot::x#0 ]
Added variable bitmap_plot::y#0 to live range equivalence class [ bitmap_plot::y#0 ]
Added variable div32u16u::return#0 to live range equivalence class [ div32u16u::return#0 ]
Added variable sin16s_gen2::step#0 to live range equivalence class [ sin16s_gen2::step#0 ]
Added variable sin16s::return#0 to live range equivalence class [ sin16s::return#0 ]
Added variable mul16s::return#0 to live range equivalence class [ mul16s::return#0 ]
Added variable sin16s_gen2::$6 to live range equivalence class [ sin16s_gen2::$6 ]
Added variable sin16s_gen2::$8 to live range equivalence class [ sin16s_gen2::$8 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$4 to live range equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to live range equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to live range equivalence class [ bitmap_init::$6 ]
Added variable mul16u::return#3 to live range equivalence class [ mul16u::return#3 ]
Added variable mul16s::$6 to live range equivalence class [ mul16s::$6 ]
Added variable mul16s::$11 to live range equivalence class [ mul16s::$11 ]
Added variable mul16s::$9 to live range equivalence class [ mul16s::$9 ]
Added variable mul16s::$12 to live range equivalence class [ mul16s::$12 ]
Added variable mul16s::return#1 to live range equivalence class [ mul16s::return#1 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_plot::plotter#1 to live range equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$2 to live range equivalence class [ bitmap_plot::$2 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div32u16u::quotient_hi#0 to live range equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#3 to live range equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_lo#0 to live range equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#1 to live range equivalence class [ div32u16u::return#1 ]
Added variable sin16s::$4 to live range equivalence class [ sin16s::$4 ]
Added variable sin16s::x1#0 to live range equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to live range equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to live range equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to live range equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to live range equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to live range equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to live range equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to live range equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to live range equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to live range equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to live range equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to live range equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to live range equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to live range equivalence class [ sin16s::usinx#1 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#14 to live range equivalence class [ rem16u#14 ]
Added variable mul16u::return#0 to live range equivalence class [ mul16u::return#0 ]
Added variable mulu16_sel::$0 to live range equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to live range equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to live range equivalence class [ mulu16_sel::return#12 ]
Complete equivalence classes
[ main::idx_x#3 main::idx_x#10 main::idx_x#1 ]
[ main::idx_y#3 main::idx_y#10 main::idx_y#1 ]
[ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
[ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
[ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ mul16s::a#3 mul16s::a#0 ]
[ mul16s::b#3 mul16s::b#2 mul16s::b#1 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ mul16u::b#2 mul16u::b#1 mul16u::b#0 ]
[ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ frame_cnt ]
[ main::$19 ]
[ main::$21 ]
[ main::cos_x#0 ]
[ mul16s::return#3 ]
[ main::xpos#0 ]
[ main::$6 ]
[ main::$7 ]
[ main::x#0 ]
[ main::$20 ]
[ main::$22 ]
[ main::sin_y#0 ]
[ mul16s::return#4 ]
[ main::ypos#0 ]
[ main::$10 ]
[ main::$11 ]
[ main::y#0 ]
[ bitmap_plot::x#0 ]
[ bitmap_plot::y#0 ]
[ div32u16u::return#0 ]
[ sin16s_gen2::step#0 ]
[ sin16s::return#0 ]
[ mul16s::return#0 ]
[ sin16s_gen2::$6 ]
[ sin16s_gen2::$8 ]
[ bitmap_init::$7 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
[ mul16u::return#3 ]
[ mul16s::$6 ]
[ mul16s::$11 ]
[ mul16s::$9 ]
[ mul16s::$12 ]
[ mul16s::return#1 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$1 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$2 ]
[ divr16u::return#2 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#1 ]
[ sin16s::$4 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ memset::end#0 ]
[ mul16u::$1 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#14 ]
[ mul16u::return#0 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
Allocated zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:6 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp[1]:10 [ mul16u::$1 ]
Allocated zp[2]:11 [ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
Allocated zp[2]:13 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:15 [ mul16u::b#2 mul16u::b#1 mul16u::b#0 ]
Allocated zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
Allocated zp[1]:21 [ divr16u::$1 ]
Allocated zp[1]:22 [ divr16u::$2 ]
Allocated zp[4]:23 [ mul16u::return#0 ]
Allocated zp[4]:27 [ mulu16_sel::$0 ]
Allocated zp[4]:31 [ mulu16_sel::$1 ]
Allocated zp[1]:35 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[2]:36 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
Allocated zp[4]:38 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
Allocated zp[2]:46 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
Allocated zp[2]:48 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp[2]:50 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:52 [ mulu16_sel::return#12 ]
Allocated zp[4]:54 [ mul16u::return#3 ]
Allocated zp[2]:58 [ mul16s::$6 ]
Allocated zp[2]:60 [ mul16s::$11 ]
Allocated zp[2]:62 [ mul16s::$9 ]
Allocated zp[2]:64 [ mul16s::$12 ]
Allocated zp[4]:66 [ sin16s::$4 ]
Allocated zp[2]:70 [ mulu16_sel::return#0 ]
Allocated zp[2]:72 [ sin16s::x2#0 ]
Allocated zp[2]:74 [ mulu16_sel::return#1 ]
Allocated zp[2]:76 [ mulu16_sel::return#2 ]
Allocated zp[2]:78 [ sin16s::x3_6#0 ]
Allocated zp[2]:80 [ mulu16_sel::return#10 ]
Allocated zp[2]:82 [ sin16s::x4#0 ]
Allocated zp[2]:84 [ mulu16_sel::return#11 ]
Allocated zp[2]:86 [ sin16s::x5#0 ]
Allocated zp[2]:88 [ sin16s::x5_128#0 ]
Allocated zp[1]:90 [ mulu16_sel::select#5 ]
Allocated zp[2]:91 [ sin16s::x3#0 ]
Allocated zp[2]:93 [ sin16s::usinx#1 ]
Allocated zp[2]:95 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[2]:97 [ sin16s::x1#0 ]
Allocated zp[1]:99 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[2]:100 [ mul16s::a#3 mul16s::a#0 ]
Allocated zp[4]:102 [ mul16s::return#1 ]
Allocated zp[2]:106 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ]
Allocated zp[2]:108 [ rem16u#14 ]
Allocated zp[1]:110 [ bitmap_plot::y#0 ]
Allocated zp[1]:111 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:112 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:113 [ sin16s::return#0 ]
Allocated zp[4]:115 [ mul16s::return#0 ]
Allocated zp[4]:119 [ sin16s_gen2::$6 ]
Allocated zp[1]:123 [ bitmap_init::$4 ]
Allocated zp[1]:124 [ bitmap_init::$5 ]
Allocated zp[1]:125 [ bitmap_init::$6 ]
Allocated zp[2]:126 [ bitmap_plot::$1 ]
Allocated zp[1]:128 [ bitmap_plot::$2 ]
Allocated zp[2]:129 [ divr16u::return#2 ]
Allocated zp[2]:131 [ divr16u::return#3 ]
Allocated zp[2]:133 [ div32u16u::quotient_lo#0 ]
Allocated zp[2]:135 [ memset::end#0 ]
Allocated zp[2]:137 [ sin16s::usinx#0 ]
Allocated zp[2]:139 [ bitmap_plot::plotter#1 ]
Allocated zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 ]
Allocated zp[4]:143 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated zp[1]:147 [ memset::c#4 ]
Allocated zp[2]:148 [ memset::num#2 ]
Allocated zp[2]:150 [ sin16s_gen2::$8 ]
Allocated zp[2]:152 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
Allocated zp[1]:154 [ bitmap_init::$7 ]
Allocated zp[2]:155 [ bitmap_plot::plotter#0 ]
Allocated zp[2]:157 [ bitmap_plot::x#0 ]
Allocated zp[2]:159 [ div32u16u::quotient_hi#0 ]
Allocated zp[4]:161 [ div32u16u::return#1 ]
Allocated zp[1]:165 [ sin16s::isUpper#2 ]
Allocated zp[2]:166 [ main::idx_y#3 main::idx_y#10 main::idx_y#1 ]
Allocated zp[2]:168 [ main::$19 ]
Allocated zp[2]:170 [ main::$21 ]
Allocated zp[2]:172 [ main::cos_x#0 ]
Allocated zp[4]:174 [ mul16s::return#3 ]
Allocated zp[4]:178 [ main::xpos#0 ]
Allocated zp[4]:182 [ main::$6 ]
Allocated zp[2]:186 [ main::$7 ]
Allocated zp[2]:188 [ main::$20 ]
Allocated zp[2]:190 [ main::$22 ]
Allocated zp[2]:192 [ main::sin_y#0 ]
Allocated zp[4]:194 [ mul16s::return#4 ]
Allocated zp[4]:198 [ main::ypos#0 ]
Allocated zp[4]:202 [ main::$10 ]
Allocated zp[2]:206 [ main::$11 ]
Allocated zp[4]:208 [ div32u16u::return#0 ]
Allocated zp[2]:212 [ main::idx_x#3 main::idx_x#10 main::idx_x#1 ]
Allocated zp[4]:214 [ sin16s_gen2::step#0 ]
Allocated zp[2]:218 [ main::y#0 ]
Allocated zp[2]:220 [ main::x#0 ]
Allocated zp[1]:222 [ frame_cnt ]
Allocated zp[2]:223 [ memset::str#3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[2]:186 [ main::$7 ] has ALU potential.
Equivalence Class zp[2]:206 [ main::$11 ] has ALU potential.
Equivalence Class zp[1]:123 [ bitmap_init::$4 ] has ALU potential.
Statement [1] frame_cnt = 1 [ frame_cnt ] (  [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [5] *BG_COLOR = WHITE [ frame_cnt ] (  [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [6] if(0==frame_cnt) goto irq::@1 [ frame_cnt ] (  [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [8] *BG_COLOR = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *IRQ_STATUS = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [17] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 [ frame_cnt ] ( main:3 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [19] *D018 = main::toD0181_return#0 [ frame_cnt ] ( main:3 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [22] main::$19 = main::idx_x#3 << 1 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$19 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$19 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [23] main::$21 = SINE + main::$19 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$21 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$21 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [24] main::cos_x#0 = *main::$21 [ frame_cnt main::idx_x#3 main::idx_y#3 main::cos_x#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::cos_x#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [25] mul16s::b#1 = main::cos_x#0 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::b#1 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::b#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [27] mul16s::return#3 = mul16s::return#1 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::return#3 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::return#3 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [28] main::xpos#0 = mul16s::return#3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::xpos#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::xpos#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [29] main::$6 = main::xpos#0 << 4 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$6 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$6 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [31] main::x#0 = $a0 + main::$7 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [32] main::$20 = main::idx_y#3 << 1 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$20 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$20 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [33] main::$22 = SINE + main::$20 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$22 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$22 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [34] main::sin_y#0 = *main::$22 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::sin_y#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::sin_y#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [35] mul16s::b#2 = main::sin_y#0 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::b#2 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::b#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [37] mul16s::return#4 = mul16s::return#1 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::return#4 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::return#4 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [38] main::ypos#0 = mul16s::return#4 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::ypos#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::ypos#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [39] main::$10 = main::ypos#0 << 4 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$10 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$10 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [41] main::y#0 = $64 + main::$11 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::y#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::y#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [42] bitmap_plot::x#0 = main::x#0 [ frame_cnt main::idx_x#3 main::idx_y#3 main::y#0 bitmap_plot::x#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::y#0 bitmap_plot::x#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [46] if(main::idx_x#1!=$200) goto main::@12 [ frame_cnt main::idx_y#3 main::idx_x#1 ] ( main:3 [ frame_cnt main::idx_y#3 main::idx_x#1 ] { }  ) always clobbers reg byte a 
Statement [50] if(main::idx_y#1!=$200) goto main::@13 [ frame_cnt main::idx_x#10 main::idx_y#1 ] ( main:3 [ frame_cnt main::idx_x#10 main::idx_y#1 ] { }  ) always clobbers reg byte a 
Statement [53] plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt] [ frame_cnt main::idx_x#10 main::idx_y#10 ] ( main:3 [ frame_cnt main::idx_x#10 main::idx_y#10 ] { }  ) always clobbers reg byte x 
Statement [56] div32u16u::return#0 = div32u16u::return#1 [ div32u16u::return#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#1 } }  ) always clobbers reg byte a 
Statement [57] sin16s_gen2::step#0 = div32u16u::return#0 [ sin16s_gen2::step#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 ] { }  ) always clobbers reg byte a 
Statement [59] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [61] sin16s::x#0 = sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [63] sin16s::return#0 = sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [64] mul16s::a#0 = sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [66] mul16s::return#0 = mul16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [67] sin16s_gen2::$6 = mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] { }  ) always clobbers reg byte a 
Statement [68] sin16s_gen2::$8 = word1  sin16s_gen2::$6 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] { }  ) always clobbers reg byte a 
Statement [69] *sin16s_gen2::sintab#2 = (int)sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_INT [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [71] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [90] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (unsigned int)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:3::bitmap_init:14 [ frame_cnt bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:112 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [101] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [102] *PROCPORT = PROCPORT_RAM_IO [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [103] *((char *)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [104] *VICII_CONTROL1 = *VICII_CONTROL1 | $80 [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [105] *RASTER = 0 [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [106] *IRQ_ENABLE = IRQ_RASTER [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [107] *HARDWARE_IRQ = &irq [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [111] mul16u::a#2 = (unsigned int)mul16s::a#3 [ mul16s::a#3 mul16s::b#3 mul16u::a#2 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#2 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#2 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [112] mul16u::b#1 = (unsigned int)mul16s::b#3 [ mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [114] mul16u::return#3 = mul16u::res#2 [ mul16s::a#3 mul16s::b#3 mul16u::return#3 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::return#3 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::return#3 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::return#3 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [115] mul16s::m#0 = mul16u::return#3 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [116] if(mul16s::a#3>=0) goto mul16s::@1 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [117] mul16s::$6 = word1  mul16s::m#0 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [118] mul16s::$11 = mul16s::$6 - (unsigned int)mul16s::b#3 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [119] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 [ mul16s::a#3 mul16s::b#3 mul16s::m#1 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [121] if(mul16s::b#3>=0) goto mul16s::@2 [ mul16s::a#3 mul16s::m#5 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::m#5 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::m#5 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::m#5 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [122] mul16s::$9 = word1  mul16s::m#5 [ mul16s::a#3 mul16s::m#5 mul16s::$9 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::m#5 mul16s::$9 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::m#5 mul16s::$9 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::m#5 mul16s::$9 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [123] mul16s::$12 = mul16s::$9 - (unsigned int)mul16s::a#3 [ mul16s::m#5 mul16s::$12 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::m#5 mul16s::$12 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::m#5 mul16s::$12 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#5 mul16s::$12 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [124] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 [ mul16s::m#2 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::m#2 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::m#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#2 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [126] mul16s::return#1 = (long)mul16s::m#4 [ mul16s::return#1 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::return#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::return#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [128] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#0] w= bitmap_plot_ylo[bitmap_plot::y#0] [ bitmap_plot::x#0 bitmap_plot::plotter#0 ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 bitmap_plot::x#0 bitmap_plot::plotter#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [129] bitmap_plot::$1 = bitmap_plot::x#0 & $fff8 [ bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [130] bitmap_plot::plotter#1 = (char *)bitmap_plot::plotter#0 + bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 bitmap_plot::x#0 bitmap_plot::plotter#1 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [132] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2] [ ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a reg byte y 
Statement [136] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 rem16u#14 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt divr16u::return#2 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [137] div32u16u::quotient_hi#0 = divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#14 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [138] divr16u::rem#4 = rem16u#14 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 divr16u::rem#4 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [140] divr16u::return#3 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 divr16u::return#3 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [141] div32u16u::quotient_lo#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#1 } }  ) always clobbers reg byte a 
Statement [142] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#1 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::return#1 ] { { div32u16u::return#0 = div32u16u::return#1 } }  ) always clobbers reg byte a 
Statement [144] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [145] sin16s::x#1 = sin16s::x#0 - PI_u4f28 [ sin16s::x#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [147] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:165 [ sin16s::isUpper#2 ]
Statement [148] sin16s::x#2 = PI_u4f28 - sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [150] sin16s::$4 = sin16s::x#6 << 3 [ sin16s::isUpper#2 sin16s::$4 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [151] sin16s::x1#0 = word1  sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [152] mulu16_sel::v1#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [153] mulu16_sel::v2#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [155] mulu16_sel::return#0 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [156] sin16s::x2#0 = mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [157] mulu16_sel::v1#1 = sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [158] mulu16_sel::v2#1 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [160] mulu16_sel::return#1 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [161] sin16s::x3#0 = mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [162] mulu16_sel::v1#2 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [164] mulu16_sel::return#2 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [165] sin16s::x3_6#0 = mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [166] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [167] mulu16_sel::v1#3 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [168] mulu16_sel::v2#3 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [170] mulu16_sel::return#10 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [171] sin16s::x4#0 = mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [172] mulu16_sel::v1#4 = sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [173] mulu16_sel::v2#4 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [175] mulu16_sel::return#11 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [176] sin16s::x5#0 = mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [177] sin16s::x5_128#0 = sin16s::x5#0 >> 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [178] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [180] sin16s::sinx#1 = - (int)sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [183] sin16s::return#5 = (int)sin16s::usinx#1 [ sin16s::return#5 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [185] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::num#2 memset::str#3 memset::c#4 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:147 [ memset::c#4 ]
Statement [186] memset::end#0 = (char *)memset::str#3 + memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::str#3 memset::c#4 memset::end#0 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [187] memset::dst#4 = (char *)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::c#4 memset::end#0 memset::dst#4 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [189] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [191] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:147 [ memset::c#4 ]
Statement [194] mul16u::mb#0 = (unsigned long)mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#6 mul16u::mb#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#6 mul16u::mb#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#6 mul16u::mb#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:90 [ mulu16_sel::select#5 ]
Statement [196] if(mul16u::a#3!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [198] mul16u::$1 = mul16u::a#3 & 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [200] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [210] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:35 [ divr16u::i#2 divr16u::i#1 ]
Statement [214] if(divr16u::rem#6<sin16s_gen2::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [216] divr16u::rem#2 = divr16u::rem#6 - sin16s_gen2::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [220] rem16u#14 = divr16u::rem#11 [ divr16u::return#0 rem16u#14 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::return#0 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::return#0 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [223] mul16u::a#0 = mulu16_sel::v1#5 [ mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [224] mul16u::b#0 = mulu16_sel::v2#5 [ mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [226] mul16u::return#0 = mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#0 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [227] mulu16_sel::$0 = mul16u::return#0 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [228] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [229] mulu16_sel::return#12 = word1  mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [1] frame_cnt = 1 [ frame_cnt ] (  [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [5] *BG_COLOR = WHITE [ frame_cnt ] (  [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [6] if(0==frame_cnt) goto irq::@1 [ frame_cnt ] (  [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [8] *BG_COLOR = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *IRQ_STATUS = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [17] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 [ frame_cnt ] ( main:3 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [19] *D018 = main::toD0181_return#0 [ frame_cnt ] ( main:3 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [22] main::$19 = main::idx_x#3 << 1 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$19 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$19 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [23] main::$21 = SINE + main::$19 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$21 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$21 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [24] main::cos_x#0 = *main::$21 [ frame_cnt main::idx_x#3 main::idx_y#3 main::cos_x#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::cos_x#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [25] mul16s::b#1 = main::cos_x#0 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::b#1 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::b#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [27] mul16s::return#3 = mul16s::return#1 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::return#3 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::return#3 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  ) always clobbers reg byte a 
Statement [28] main::xpos#0 = mul16s::return#3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::xpos#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::xpos#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [29] main::$6 = main::xpos#0 << 4 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$6 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::$6 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [31] main::x#0 = $a0 + main::$7 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [32] main::$20 = main::idx_y#3 << 1 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$20 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$20 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [33] main::$22 = SINE + main::$20 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$22 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$22 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [34] main::sin_y#0 = *main::$22 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::sin_y#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::sin_y#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [35] mul16s::b#2 = main::sin_y#0 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::b#2 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::b#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [37] mul16s::return#4 = mul16s::return#1 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::return#4 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::return#4 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  ) always clobbers reg byte a 
Statement [38] main::ypos#0 = mul16s::return#4 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::ypos#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::ypos#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [39] main::$10 = main::ypos#0 << 4 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$10 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::$10 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [41] main::y#0 = $64 + main::$11 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::y#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 main::y#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [42] bitmap_plot::x#0 = main::x#0 [ frame_cnt main::idx_x#3 main::idx_y#3 main::y#0 bitmap_plot::x#0 ] ( main:3 [ frame_cnt main::idx_x#3 main::idx_y#3 main::y#0 bitmap_plot::x#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [46] if(main::idx_x#1!=$200) goto main::@12 [ frame_cnt main::idx_y#3 main::idx_x#1 ] ( main:3 [ frame_cnt main::idx_y#3 main::idx_x#1 ] { }  ) always clobbers reg byte a 
Statement [50] if(main::idx_y#1!=$200) goto main::@13 [ frame_cnt main::idx_x#10 main::idx_y#1 ] ( main:3 [ frame_cnt main::idx_x#10 main::idx_y#1 ] { }  ) always clobbers reg byte a 
Statement [53] plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt] [ frame_cnt main::idx_x#10 main::idx_y#10 ] ( main:3 [ frame_cnt main::idx_x#10 main::idx_y#10 ] { }  ) always clobbers reg byte x 
Statement [56] div32u16u::return#0 = div32u16u::return#1 [ div32u16u::return#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#1 } }  ) always clobbers reg byte a 
Statement [57] sin16s_gen2::step#0 = div32u16u::return#0 [ sin16s_gen2::step#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 ] { }  ) always clobbers reg byte a 
Statement [59] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [61] sin16s::x#0 = sin16s_gen2::x#2 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [63] sin16s::return#0 = sin16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [64] mul16s::a#0 = sin16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [66] mul16s::return#0 = mul16s::return#1 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [67] sin16s_gen2::$6 = mul16s::return#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$6 ] { }  ) always clobbers reg byte a 
Statement [68] sin16s_gen2::$8 = word1  sin16s_gen2::$6 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s_gen2::$8 ] { }  ) always clobbers reg byte a 
Statement [69] *sin16s_gen2::sintab#2 = (int)sin16s_gen2::$8 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_INT [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [71] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 [ sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] ( main:3::sin16s_gen2:12 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#1 sin16s_gen2::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [83] bitmap_init::$7 = bitmap_init::y#2 & 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:3::bitmap_init:14 [ frame_cnt bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] { }  ) always clobbers reg byte a 
Statement [90] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (unsigned int)$28*8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:3::bitmap_init:14 [ frame_cnt bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [101] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [102] *PROCPORT = PROCPORT_RAM_IO [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [103] *((char *)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [104] *VICII_CONTROL1 = *VICII_CONTROL1 | $80 [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [105] *RASTER = 0 [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [106] *IRQ_ENABLE = IRQ_RASTER [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [107] *HARDWARE_IRQ = &irq [ ] ( main:3::init_irq:20 [ frame_cnt ] { }  ) always clobbers reg byte a 
Statement [111] mul16u::a#2 = (unsigned int)mul16s::a#3 [ mul16s::a#3 mul16s::b#3 mul16u::a#2 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#2 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#2 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [112] mul16u::b#1 = (unsigned int)mul16s::b#3 [ mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#2 mul16u::b#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [114] mul16u::return#3 = mul16u::res#2 [ mul16s::a#3 mul16s::b#3 mul16u::return#3 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::return#3 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::return#3 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::return#3 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [115] mul16s::m#0 = mul16u::return#3 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [116] if(mul16s::a#3>=0) goto mul16s::@1 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [117] mul16s::$6 = word1  mul16s::m#0 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [118] mul16s::$11 = mul16s::$6 - (unsigned int)mul16s::b#3 [ mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [119] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 [ mul16s::a#3 mul16s::b#3 mul16s::m#1 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16s::m#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16s::m#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16s::m#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [121] if(mul16s::b#3>=0) goto mul16s::@2 [ mul16s::a#3 mul16s::m#5 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::m#5 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::m#5 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::m#5 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [122] mul16s::$9 = word1  mul16s::m#5 [ mul16s::a#3 mul16s::m#5 mul16s::$9 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::m#5 mul16s::$9 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::m#5 mul16s::$9 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::m#5 mul16s::$9 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [123] mul16s::$12 = mul16s::$9 - (unsigned int)mul16s::a#3 [ mul16s::m#5 mul16s::$12 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::m#5 mul16s::$12 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::m#5 mul16s::$12 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#5 mul16s::$12 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [124] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 [ mul16s::m#2 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::m#2 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::m#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::m#2 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [126] mul16s::return#1 = (long)mul16s::m#4 [ mul16s::return#1 ] ( main:3::mul16s:26 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::return#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } }  main:3::mul16s:36 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::return#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } }  main:3::sin16s_gen2:12::mul16s:65 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::return#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } }  ) always clobbers reg byte a 
Statement [128] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#0] w= bitmap_plot_ylo[bitmap_plot::y#0] [ bitmap_plot::x#0 bitmap_plot::plotter#0 ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 bitmap_plot::x#0 bitmap_plot::plotter#0 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [129] bitmap_plot::$1 = bitmap_plot::x#0 & $fff8 [ bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [130] bitmap_plot::plotter#1 = (char *)bitmap_plot::plotter#0 + bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 bitmap_plot::x#0 bitmap_plot::plotter#1 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a 
Statement [132] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2] [ ] ( main:3::bitmap_plot:44 [ frame_cnt main::idx_x#3 main::idx_y#3 ] { { bitmap_plot::x#0 = main::x#0 } }  ) always clobbers reg byte a reg byte y 
Statement [136] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 rem16u#14 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt divr16u::return#2 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [137] div32u16u::quotient_hi#0 = divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#14 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [138] divr16u::rem#4 = rem16u#14 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 divr16u::rem#4 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [140] divr16u::return#3 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 divr16u::return#3 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [141] div32u16u::quotient_lo#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#1 } }  ) always clobbers reg byte a 
Statement [142] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#1 ] ( main:3::sin16s_gen2:12::div32u16u:55 [ frame_cnt div32u16u::return#1 ] { { div32u16u::return#0 = div32u16u::return#1 } }  ) always clobbers reg byte a 
Statement [144] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [145] sin16s::x#1 = sin16s::x#0 - PI_u4f28 [ sin16s::x#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [147] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [148] sin16s::x#2 = PI_u4f28 - sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [150] sin16s::$4 = sin16s::x#6 << 3 [ sin16s::isUpper#2 sin16s::$4 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [151] sin16s::x1#0 = word1  sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [152] mulu16_sel::v1#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [153] mulu16_sel::v2#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [155] mulu16_sel::return#0 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [156] sin16s::x2#0 = mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [157] mulu16_sel::v1#1 = sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [158] mulu16_sel::v2#1 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [160] mulu16_sel::return#1 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [161] sin16s::x3#0 = mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [162] mulu16_sel::v1#2 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [164] mulu16_sel::return#2 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [165] sin16s::x3_6#0 = mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [166] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [167] mulu16_sel::v1#3 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [168] mulu16_sel::v2#3 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [170] mulu16_sel::return#10 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [171] sin16s::x4#0 = mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [172] mulu16_sel::v1#4 = sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [173] mulu16_sel::v2#4 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [175] mulu16_sel::return#11 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [176] sin16s::x5#0 = mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [177] sin16s::x5_128#0 = sin16s::x5#0 >> 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [178] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [180] sin16s::sinx#1 = - (int)sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [183] sin16s::return#5 = (int)sin16s::usinx#1 [ sin16s::return#5 ] ( main:3::sin16s_gen2:12::sin16s:62 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [185] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::num#2 memset::str#3 memset::c#4 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [186] memset::end#0 = (char *)memset::str#3 + memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::str#3 memset::c#4 memset::end#0 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [187] memset::dst#4 = (char *)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::c#4 memset::end#0 memset::dst#4 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [189] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [191] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:3::bitmap_clear:16::memset:96 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  main:3::bitmap_clear:16::memset:98 [ frame_cnt memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [194] mul16u::mb#0 = (unsigned long)mul16u::b#2 [ mul16u::a#6 mul16u::mb#0 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#6 mul16u::mb#0 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#6 mul16u::mb#0 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#6 mul16u::mb#0 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#6 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [196] if(mul16u::a#3!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [198] mul16u::$1 = mul16u::a#3 & 1 [ mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#3 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [200] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] ( main:3::mul16s:26::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 mul16s::a#3 mul16s::b#3 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::b#1 = mul16s::b#3 main::cos_x#0 } { mul16s::return#1 = mul16s::return#3 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::mul16s:36::mul16u:113 [ frame_cnt main::idx_x#3 main::idx_y#3 main::x#0 mul16s::a#3 mul16s::b#3 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::b#2 = mul16s::b#3 main::sin_y#0 } { mul16s::return#1 = mul16s::return#4 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::mul16s:65::mul16u:113 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 mul16s::a#3 mul16s::b#3 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = mul16s::a#3 sin16s::return#0 } { mul16s::return#0 = mul16s::return#1 } { mul16u::b#1 = mul16u::b#2 } { mul16u::a#2 = mul16u::a#6 } { mul16u::return#3 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174::mul16u:225 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#3 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [210] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [214] if(divr16u::rem#6<sin16s_gen2::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [216] divr16u::rem#2 = divr16u::rem#6 - sin16s_gen2::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [220] rem16u#14 = divr16u::rem#11 [ divr16u::return#0 rem16u#14 ] ( main:3::sin16s_gen2:12::div32u16u:55::divr16u:135 [ frame_cnt divr16u::return#0 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::return#0 = divr16u::return#2 } }  main:3::sin16s_gen2:12::div32u16u:55::divr16u:139 [ frame_cnt div32u16u::quotient_hi#0 divr16u::return#0 rem16u#14 ] { { div32u16u::return#0 = div32u16u::return#1 } { divr16u::rem#10 = divr16u::rem#4 rem16u#14 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [223] mul16u::a#0 = mulu16_sel::v1#5 [ mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::a#0 mulu16_sel::v2#5 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [224] mul16u::b#0 = mulu16_sel::v2#5 [ mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mul16u::b#0 mul16u::a#0 mulu16_sel::select#5 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [226] mul16u::return#0 = mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#0 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::a#0 = mul16u::a#6 mul16u::b#2 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#0 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#1 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#1 sin16s::x2#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#2 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#3 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#3 sin16s::x3#0 } { mul16u::return#0 = mul16u::res#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::b#0 = mul16u::b#2 mulu16_sel::v2#5 mulu16_sel::v2#4 sin16s::x1#0 } { mul16u::a#0 = mul16u::a#6 mulu16_sel::v1#5 mulu16_sel::v1#4 sin16s::x4#0 } { mul16u::return#0 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [227] mulu16_sel::$0 = mul16u::return#0 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [228] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 [ mulu16_sel::$1 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [229] mulu16_sel::return#12 = word1  mulu16_sel::$1 [ mulu16_sel::return#12 ] ( main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:154 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:159 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:163 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:169 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  main:3::sin16s_gen2:12::sin16s:62::mulu16_sel:174 [ frame_cnt sin16s_gen2::step#0 sin16s_gen2::i#2 sin16s_gen2::x#2 sin16s_gen2::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen2::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Potential registers zp[2]:212 [ main::idx_x#3 main::idx_x#10 main::idx_x#1 ] : zp[2]:212 , 
Potential registers zp[2]:166 [ main::idx_y#3 main::idx_y#10 main::idx_y#1 ] : zp[2]:166 , 
Potential registers zp[2]:106 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] : zp[2]:106 , 
Potential registers zp[4]:143 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] : zp[4]:143 , 
Potential registers zp[2]:152 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] : zp[2]:152 , 
Potential registers zp[1]:99 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:111 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:111 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:112 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:112 , reg byte x , reg byte y , 
Potential registers zp[2]:95 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:95 , 
Potential registers zp[2]:100 [ mul16s::a#3 mul16s::a#0 ] : zp[2]:100 , 
Potential registers zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 ] : zp[2]:141 , 
Potential registers zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] : zp[4]:42 , 
Potential registers zp[1]:165 [ sin16s::isUpper#2 ] : zp[1]:165 , reg byte x , reg byte y , 
Potential registers zp[4]:38 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp[4]:38 , 
Potential registers zp[2]:48 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp[2]:48 , 
Potential registers zp[2]:148 [ memset::num#2 ] : zp[2]:148 , 
Potential registers zp[2]:223 [ memset::str#3 ] : zp[2]:223 , 
Potential registers zp[1]:147 [ memset::c#4 ] : zp[1]:147 , reg byte x , 
Potential registers zp[2]:50 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:50 , 
Potential registers zp[2]:15 [ mul16u::b#2 mul16u::b#1 mul16u::b#0 ] : zp[2]:15 , 
Potential registers zp[2]:11 [ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ] : zp[2]:11 , 
Potential registers zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:2 , 
Potential registers zp[4]:6 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp[4]:6 , 
Potential registers zp[2]:13 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:13 , 
Potential registers zp[2]:46 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] : zp[2]:46 , 
Potential registers zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:17 , 
Potential registers zp[1]:35 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:35 , reg byte x , reg byte y , 
Potential registers zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] : zp[2]:19 , 
Potential registers zp[2]:36 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] : zp[2]:36 , 
Potential registers zp[1]:90 [ mulu16_sel::select#5 ] : zp[1]:90 , reg byte x , reg byte y , 
Potential registers zp[1]:222 [ frame_cnt ] : zp[1]:222 , 
Potential registers zp[2]:168 [ main::$19 ] : zp[2]:168 , 
Potential registers zp[2]:170 [ main::$21 ] : zp[2]:170 , 
Potential registers zp[2]:172 [ main::cos_x#0 ] : zp[2]:172 , 
Potential registers zp[4]:174 [ mul16s::return#3 ] : zp[4]:174 , 
Potential registers zp[4]:178 [ main::xpos#0 ] : zp[4]:178 , 
Potential registers zp[4]:182 [ main::$6 ] : zp[4]:182 , 
Potential registers zp[2]:186 [ main::$7 ] : zp[2]:186 , reg byte alu , 
Potential registers zp[2]:220 [ main::x#0 ] : zp[2]:220 , 
Potential registers zp[2]:188 [ main::$20 ] : zp[2]:188 , 
Potential registers zp[2]:190 [ main::$22 ] : zp[2]:190 , 
Potential registers zp[2]:192 [ main::sin_y#0 ] : zp[2]:192 , 
Potential registers zp[4]:194 [ mul16s::return#4 ] : zp[4]:194 , 
Potential registers zp[4]:198 [ main::ypos#0 ] : zp[4]:198 , 
Potential registers zp[4]:202 [ main::$10 ] : zp[4]:202 , 
Potential registers zp[2]:206 [ main::$11 ] : zp[2]:206 , reg byte alu , 
Potential registers zp[2]:218 [ main::y#0 ] : zp[2]:218 , 
Potential registers zp[2]:157 [ bitmap_plot::x#0 ] : zp[2]:157 , 
Potential registers zp[1]:110 [ bitmap_plot::y#0 ] : zp[1]:110 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:208 [ div32u16u::return#0 ] : zp[4]:208 , 
Potential registers zp[4]:214 [ sin16s_gen2::step#0 ] : zp[4]:214 , 
Potential registers zp[2]:113 [ sin16s::return#0 ] : zp[2]:113 , 
Potential registers zp[4]:115 [ mul16s::return#0 ] : zp[4]:115 , 
Potential registers zp[4]:119 [ sin16s_gen2::$6 ] : zp[4]:119 , 
Potential registers zp[2]:150 [ sin16s_gen2::$8 ] : zp[2]:150 , 
Potential registers zp[1]:154 [ bitmap_init::$7 ] : zp[1]:154 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:123 [ bitmap_init::$4 ] : zp[1]:123 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:124 [ bitmap_init::$5 ] : zp[1]:124 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:125 [ bitmap_init::$6 ] : zp[1]:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:54 [ mul16u::return#3 ] : zp[4]:54 , 
Potential registers zp[2]:58 [ mul16s::$6 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ mul16s::$11 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ mul16s::$9 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ mul16s::$12 ] : zp[2]:64 , 
Potential registers zp[4]:102 [ mul16s::return#1 ] : zp[4]:102 , 
Potential registers zp[2]:155 [ bitmap_plot::plotter#0 ] : zp[2]:155 , 
Potential registers zp[2]:126 [ bitmap_plot::$1 ] : zp[2]:126 , 
Potential registers zp[2]:139 [ bitmap_plot::plotter#1 ] : zp[2]:139 , 
Potential registers zp[1]:128 [ bitmap_plot::$2 ] : zp[1]:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:129 [ divr16u::return#2 ] : zp[2]:129 , 
Potential registers zp[2]:159 [ div32u16u::quotient_hi#0 ] : zp[2]:159 , 
Potential registers zp[2]:131 [ divr16u::return#3 ] : zp[2]:131 , 
Potential registers zp[2]:133 [ div32u16u::quotient_lo#0 ] : zp[2]:133 , 
Potential registers zp[4]:161 [ div32u16u::return#1 ] : zp[4]:161 , 
Potential registers zp[4]:66 [ sin16s::$4 ] : zp[4]:66 , 
Potential registers zp[2]:97 [ sin16s::x1#0 ] : zp[2]:97 , 
Potential registers zp[2]:70 [ mulu16_sel::return#0 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ sin16s::x2#0 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ mulu16_sel::return#1 ] : zp[2]:74 , 
Potential registers zp[2]:91 [ sin16s::x3#0 ] : zp[2]:91 , 
Potential registers zp[2]:76 [ mulu16_sel::return#2 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ sin16s::x3_6#0 ] : zp[2]:78 , 
Potential registers zp[2]:137 [ sin16s::usinx#0 ] : zp[2]:137 , 
Potential registers zp[2]:80 [ mulu16_sel::return#10 ] : zp[2]:80 , 
Potential registers zp[2]:82 [ sin16s::x4#0 ] : zp[2]:82 , 
Potential registers zp[2]:84 [ mulu16_sel::return#11 ] : zp[2]:84 , 
Potential registers zp[2]:86 [ sin16s::x5#0 ] : zp[2]:86 , 
Potential registers zp[2]:88 [ sin16s::x5_128#0 ] : zp[2]:88 , 
Potential registers zp[2]:93 [ sin16s::usinx#1 ] : zp[2]:93 , 
Potential registers zp[2]:135 [ memset::end#0 ] : zp[2]:135 , 
Potential registers zp[1]:10 [ mul16u::$1 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ divr16u::$1 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ divr16u::$2 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:108 [ rem16u#14 ] : zp[2]:108 , 
Potential registers zp[4]:23 [ mul16u::return#0 ] : zp[4]:23 , 
Potential registers zp[4]:27 [ mulu16_sel::$0 ] : zp[4]:27 , 
Potential registers zp[4]:31 [ mulu16_sel::$1 ] : zp[4]:31 , 
Potential registers zp[2]:52 [ mulu16_sel::return#12 ] : zp[2]:52 , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul16u] 342,872,860.86: zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 245,000,004.57: zp[4]:6 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 200,000,002: zp[1]:10 [ mul16u::$1 ] 167,498,338.67: zp[2]:11 [ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ] 330,006: zp[2]:15 [ mul16u::b#2 mul16u::b#1 mul16u::b#0 ] 200,002: zp[4]:23 [ mul16u::return#0 ] 20,002: zp[4]:54 [ mul16u::return#3 ] 
Uplift Scope [divr16u] 901,347.42: zp[2]:13 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 318,146.32: zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 200,002: zp[1]:21 [ divr16u::$1 ] 200,002: zp[1]:22 [ divr16u::$2 ] 165,386.27: zp[1]:35 [ divr16u::i#2 divr16u::i#1 ] 79,287.54: zp[2]:46 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] 2,002: zp[2]:129 [ divr16u::return#2 ] 2,002: zp[2]:131 [ divr16u::return#3 ] 
Uplift Scope [mulu16_sel] 210,012: zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] 200,002: zp[4]:27 [ mulu16_sel::$0 ] 200,002: zp[4]:31 [ mulu16_sel::$1 ] 150,010.5: zp[2]:36 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] 21,429.43: zp[2]:52 [ mulu16_sel::return#12 ] 20,002: zp[2]:70 [ mulu16_sel::return#0 ] 20,002: zp[2]:74 [ mulu16_sel::return#1 ] 20,002: zp[2]:76 [ mulu16_sel::return#2 ] 20,002: zp[2]:80 [ mulu16_sel::return#10 ] 20,002: zp[2]:84 [ mulu16_sel::return#11 ] 16,666.83: zp[1]:90 [ mulu16_sel::select#5 ] 
Uplift Scope [sin16s] 110,511.5: zp[4]:38 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 47,005: zp[2]:48 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 20,002: zp[4]:66 [ sin16s::$4 ] 20,002: zp[2]:72 [ sin16s::x2#0 ] 20,002: zp[2]:78 [ sin16s::x3_6#0 ] 20,002: zp[2]:82 [ sin16s::x4#0 ] 20,002: zp[2]:86 [ sin16s::x5#0 ] 20,002: zp[2]:88 [ sin16s::x5_128#0 ] 5,000.5: zp[2]:91 [ sin16s::x3#0 ] 5,000.5: zp[2]:93 [ sin16s::usinx#1 ] 3,182.14: zp[2]:97 [ sin16s::x1#0 ] 2,002: zp[2]:113 [ sin16s::return#0 ] 1,666.83: zp[2]:137 [ sin16s::usinx#0 ] 303.06: zp[1]:165 [ sin16s::isUpper#2 ] 
Uplift Scope [mul16s] 82,508.25: zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] 20,002: zp[2]:58 [ mul16s::$6 ] 20,002: zp[2]:60 [ mul16s::$11 ] 20,002: zp[2]:62 [ mul16s::$9 ] 20,002: zp[2]:64 [ mul16s::$12 ] 2,848.31: zp[2]:100 [ mul16s::a#3 mul16s::a#0 ] 2,240.8: zp[4]:102 [ mul16s::return#1 ] 2,002: zp[4]:115 [ mul16s::return#0 ] 1,331.55: zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 ] 202: zp[4]:174 [ mul16s::return#3 ] 202: zp[4]:194 [ mul16s::return#4 ] 
Uplift Scope [memset] 35,672.33: zp[2]:50 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,833.67: zp[2]:135 [ memset::end#0 ] 1,250.12: zp[1]:147 [ memset::c#4 ] 1,001: zp[2]:148 [ memset::num#2 ] 0: zp[2]:223 [ memset::str#3 ] 
Uplift Scope [bitmap_init] 3,628.62: zp[2]:95 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 3,169.83: zp[1]:99 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 2,002: zp[1]:111 [ bitmap_init::x#2 bitmap_init::x#1 ] 2,002: zp[1]:112 [ bitmap_init::y#2 bitmap_init::y#1 ] 2,002: zp[1]:123 [ bitmap_init::$4 ] 2,002: zp[1]:124 [ bitmap_init::$5 ] 2,002: zp[1]:125 [ bitmap_init::$6 ] 500.5: zp[1]:154 [ bitmap_init::$7 ] 
Uplift Scope [bitmap_plot] 2,103: zp[1]:110 [ bitmap_plot::y#0 ] 2,002: zp[2]:126 [ bitmap_plot::$1 ] 2,002: zp[1]:128 [ bitmap_plot::$2 ] 1,501.5: zp[2]:139 [ bitmap_plot::plotter#1 ] 500.5: zp[2]:155 [ bitmap_plot::plotter#0 ] 420.6: zp[2]:157 [ bitmap_plot::x#0 ] 
Uplift Scope [sin16s_gen2] 2,233: zp[2]:106 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] 2,002: zp[4]:119 [ sin16s_gen2::$6 ] 1,251.25: zp[4]:143 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] 1,001: zp[2]:150 [ sin16s_gen2::$8 ] 940.33: zp[2]:152 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] 73.47: zp[4]:214 [ sin16s_gen2::step#0 ] 
Uplift Scope [div32u16u] 2,002: zp[2]:133 [ div32u16u::quotient_lo#0 ] 400.4: zp[2]:159 [ div32u16u::quotient_hi#0 ] 367.33: zp[4]:161 [ div32u16u::return#1 ] 202: zp[4]:208 [ div32u16u::return#0 ] 
Uplift Scope [main] 212.82: zp[2]:166 [ main::idx_y#3 main::idx_y#10 main::idx_y#1 ] 202: zp[2]:168 [ main::$19 ] 202: zp[2]:170 [ main::$21 ] 202: zp[2]:172 [ main::cos_x#0 ] 202: zp[4]:178 [ main::xpos#0 ] 202: zp[4]:182 [ main::$6 ] 202: zp[2]:186 [ main::$7 ] 202: zp[2]:188 [ main::$20 ] 202: zp[2]:190 [ main::$22 ] 202: zp[2]:192 [ main::sin_y#0 ] 202: zp[4]:198 [ main::ypos#0 ] 202: zp[4]:202 [ main::$10 ] 202: zp[2]:206 [ main::$11 ] 147.29: zp[2]:212 [ main::idx_x#3 main::idx_x#10 main::idx_x#1 ] 50.5: zp[2]:218 [ main::y#0 ] 18.36: zp[2]:220 [ main::x#0 ] 
Uplift Scope [] 2,200.4: zp[2]:108 [ rem16u#14 ] 4.47: zp[1]:222 [ frame_cnt ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [bitmap_clear] 
Uplift Scope [init_irq] 
Uplift Scope [irq] 
Uplift Scope [__start] 

Uplifting [mul16u] best 27419 combination zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:6 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:11 [ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ] zp[2]:15 [ mul16u::b#2 mul16u::b#1 mul16u::b#0 ] zp[4]:23 [ mul16u::return#0 ] zp[4]:54 [ mul16u::return#3 ] 
Uplifting [divr16u] best 27229 combination zp[2]:13 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:46 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] zp[2]:129 [ divr16u::return#2 ] zp[2]:131 [ divr16u::return#3 ] 
Uplifting [mulu16_sel] best 27211 combination zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] zp[4]:27 [ mulu16_sel::$0 ] zp[4]:31 [ mulu16_sel::$1 ] zp[2]:36 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] zp[2]:52 [ mulu16_sel::return#12 ] zp[2]:70 [ mulu16_sel::return#0 ] zp[2]:74 [ mulu16_sel::return#1 ] zp[2]:76 [ mulu16_sel::return#2 ] zp[2]:80 [ mulu16_sel::return#10 ] zp[2]:84 [ mulu16_sel::return#11 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [sin16s] best 27204 combination zp[4]:38 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp[2]:48 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp[4]:66 [ sin16s::$4 ] zp[2]:72 [ sin16s::x2#0 ] zp[2]:78 [ sin16s::x3_6#0 ] zp[2]:82 [ sin16s::x4#0 ] zp[2]:86 [ sin16s::x5#0 ] zp[2]:88 [ sin16s::x5_128#0 ] zp[2]:91 [ sin16s::x3#0 ] zp[2]:93 [ sin16s::usinx#1 ] zp[2]:97 [ sin16s::x1#0 ] zp[2]:113 [ sin16s::return#0 ] zp[2]:137 [ sin16s::usinx#0 ] reg byte y [ sin16s::isUpper#2 ] 
Uplifting [mul16s] best 27204 combination zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] zp[2]:58 [ mul16s::$6 ] zp[2]:60 [ mul16s::$11 ] zp[2]:62 [ mul16s::$9 ] zp[2]:64 [ mul16s::$12 ] zp[2]:100 [ mul16s::a#3 mul16s::a#0 ] zp[4]:102 [ mul16s::return#1 ] zp[4]:115 [ mul16s::return#0 ] zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 ] zp[4]:174 [ mul16s::return#3 ] zp[4]:194 [ mul16s::return#4 ] 
Uplifting [memset] best 27188 combination zp[2]:50 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:135 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:148 [ memset::num#2 ] zp[2]:223 [ memset::str#3 ] 
Uplifting [bitmap_init] best 26738 combination zp[2]:95 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte a [ bitmap_init::$4 ] zp[1]:124 [ bitmap_init::$5 ] zp[1]:125 [ bitmap_init::$6 ] zp[1]:154 [ bitmap_init::$7 ] 
Limited combination testing to 100 combinations of 15360 possible.
Uplifting [bitmap_plot] best 26699 combination reg byte x [ bitmap_plot::y#0 ] zp[2]:126 [ bitmap_plot::$1 ] reg byte x [ bitmap_plot::$2 ] zp[2]:139 [ bitmap_plot::plotter#1 ] zp[2]:155 [ bitmap_plot::plotter#0 ] zp[2]:157 [ bitmap_plot::x#0 ] 
Uplifting [sin16s_gen2] best 26699 combination zp[2]:106 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] zp[4]:119 [ sin16s_gen2::$6 ] zp[4]:143 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ] zp[2]:150 [ sin16s_gen2::$8 ] zp[2]:152 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] zp[4]:214 [ sin16s_gen2::step#0 ] 
Uplifting [div32u16u] best 26699 combination zp[2]:133 [ div32u16u::quotient_lo#0 ] zp[2]:159 [ div32u16u::quotient_hi#0 ] zp[4]:161 [ div32u16u::return#1 ] zp[4]:208 [ div32u16u::return#0 ] 
Uplifting [main] best 26459 combination zp[2]:166 [ main::idx_y#3 main::idx_y#10 main::idx_y#1 ] zp[2]:168 [ main::$19 ] zp[2]:170 [ main::$21 ] zp[2]:172 [ main::cos_x#0 ] zp[4]:178 [ main::xpos#0 ] zp[4]:182 [ main::$6 ] reg byte alu [ main::$7 ] zp[2]:188 [ main::$20 ] zp[2]:190 [ main::$22 ] zp[2]:192 [ main::sin_y#0 ] zp[4]:198 [ main::ypos#0 ] zp[4]:202 [ main::$10 ] reg byte alu [ main::$11 ] zp[2]:212 [ main::idx_x#3 main::idx_x#10 main::idx_x#1 ] zp[2]:218 [ main::y#0 ] zp[2]:220 [ main::x#0 ] 
Uplifting [] best 26459 combination zp[2]:108 [ rem16u#14 ] zp[1]:222 [ frame_cnt ] 
Uplifting [MOS6526_CIA] best 26459 combination 
Uplifting [MOS6569_VICII] best 26459 combination 
Uplifting [MOS6581_SID] best 26459 combination 
Uplifting [bitmap_clear] best 26459 combination 
Uplifting [init_irq] best 26459 combination 
Uplifting [irq] best 26459 combination 
Uplifting [__start] best 26459 combination 
Attempting to uplift remaining variables inzp[1]:124 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 26399 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp[1]:125 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 26339 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp[1]:154 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 26339 combination zp[1]:154 [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:222 [ frame_cnt ]
Uplifting [] best 26339 combination zp[1]:222 [ frame_cnt ] 
Coalescing zero page register [ zp[2]:48 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp[2]:93 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] ] with [ zp[2]:91 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:100 [ mul16s::a#3 mul16s::a#0 ] ] with [ zp[2]:113 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:100 [ mul16s::a#3 mul16s::a#0 sin16s::return#0 ] ] with [ zp[2]:64 [ mul16s::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 ] ] with [ zp[2]:172 [ main::cos_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 main::cos_x#0 ] ] with [ zp[2]:192 [ main::sin_y#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] ] with [ zp[4]:54 [ mul16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 ] ] with [ zp[4]:102 [ mul16s::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:148 [ memset::num#2 ] ] with [ zp[2]:135 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:223 [ memset::str#3 ] ] with [ zp[2]:50 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ mul16u::b#2 mul16u::b#1 mul16u::b#0 ] ] with [ zp[2]:36 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] ] - score: 1
Coalescing zero page register [ zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:23 [ mul16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:129 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:131 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 ] ] with [ zp[2]:72 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp[2]:82 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:168 [ main::$19 ] ] with [ zp[2]:170 [ main::$21 ] ] - score: 1
Coalescing zero page register [ zp[4]:174 [ mul16s::return#3 ] ] with [ zp[4]:178 [ main::xpos#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:220 [ main::x#0 ] ] with [ zp[2]:157 [ bitmap_plot::x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:188 [ main::$20 ] ] with [ zp[2]:190 [ main::$22 ] ] - score: 1
Coalescing zero page register [ zp[4]:194 [ mul16s::return#4 ] ] with [ zp[4]:198 [ main::ypos#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:208 [ div32u16u::return#0 ] ] with [ zp[4]:214 [ sin16s_gen2::step#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:208 [ div32u16u::return#0 sin16s_gen2::step#0 ] ] with [ zp[4]:161 [ div32u16u::return#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:115 [ mul16s::return#0 ] ] with [ zp[4]:119 [ sin16s_gen2::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ mul16s::$6 ] ] with [ zp[2]:60 [ mul16s::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:155 [ bitmap_plot::plotter#0 ] ] with [ zp[2]:139 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:70 [ mulu16_sel::return#0 ] ] with [ zp[2]:52 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register [ zp[2]:76 [ mulu16_sel::return#2 ] ] with [ zp[2]:78 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:84 [ mulu16_sel::return#11 ] ] with [ zp[2]:86 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:27 [ mulu16_sel::$0 ] ] with [ zp[4]:31 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:100 [ mul16s::a#3 mul16s::a#0 sin16s::return#0 mul16s::$12 ] ] with [ zp[2]:48 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 main::cos_x#0 main::sin_y#0 ] ] with [ zp[2]:168 [ main::$19 main::$21 ] ] - score: 1
Coalescing zero page register [ zp[2]:141 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 main::cos_x#0 main::sin_y#0 main::$19 main::$21 ] ] with [ zp[2]:188 [ main::$20 main::$22 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 ] ] with [ zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 ] ] with [ zp[4]:174 [ mul16s::return#3 main::xpos#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 ] ] with [ zp[4]:194 [ mul16s::return#4 main::ypos#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 ] ] with [ zp[4]:115 [ mul16s::return#0 sin16s_gen2::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp[2]:133 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp[2]:74 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp[2]:80 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:70 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp[2]:76 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:70 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp[2]:84 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:100 [ mul16s::a#3 mul16s::a#0 sin16s::return#0 mul16s::$12 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp[2]:137 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 mul16s::return#0 sin16s_gen2::$6 ] ] with [ zp[4]:182 [ main::$6 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 mul16s::return#0 sin16s_gen2::$6 main::$6 ] ] with [ zp[4]:202 [ main::$10 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 mul16s::return#0 sin16s_gen2::$6 main::$6 main::$10 ] ] with [ zp[4]:27 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:70 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp[2]:88 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:95 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:106 [ sin16s_gen2::i#2 sin16s_gen2::i#1 ] ]
Coalescing zero page register [ zp[2]:148 [ memset::num#2 memset::end#0 ] ] with [ zp[2]:152 [ sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] ]
Coalescing zero page register [ zp[2]:223 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:100 [ mul16s::a#3 mul16s::a#0 sin16s::return#0 mul16s::$12 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::usinx#0 ] ]
Coalescing zero page register [ zp[2]:13 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:15 [ mul16u::b#2 mul16u::b#1 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] ]
Coalescing zero page register [ zp[2]:46 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ] with [ zp[2]:11 [ mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ] ]
Coalescing zero page register [ zp[2]:19 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ] ] with [ zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ]
Coalescing zero page register [ zp[2]:155 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ] ] with [ zp[2]:150 [ sin16s_gen2::$8 ] ]
Coalescing zero page register [ zp[2]:126 [ bitmap_plot::$1 ] ] with [ zp[2]:58 [ mul16s::$6 mul16s::$11 ] ]
Coalescing zero page register [ zp[2]:159 [ div32u16u::quotient_hi#0 ] ] with [ zp[2]:62 [ mul16s::$9 ] ]
Coalescing zero page register [ zp[4]:66 [ sin16s::$4 ] ] with [ zp[4]:6 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] ]
Coalescing zero page register [ zp[2]:220 [ main::x#0 bitmap_plot::x#0 ] ] with [ zp[2]:95 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 sin16s_gen2::i#2 sin16s_gen2::i#1 ] ]
Coalescing zero page register [ zp[2]:218 [ main::y#0 ] ] with [ zp[2]:148 [ memset::num#2 memset::end#0 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ] ]
Coalescing zero page register [ zp[2]:155 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sin16s_gen2::$8 ] ] with [ zp[2]:223 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mul16s::a#3 mul16s::a#0 sin16s::return#0 mul16s::$12 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::usinx#0 ] ]
Coalescing zero page register [ zp[2]:126 [ bitmap_plot::$1 mul16s::$6 mul16s::$11 ] ] with [ zp[2]:13 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 mul16u::b#2 mul16u::b#1 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] ]
Coalescing zero page register [ zp[2]:97 [ sin16s::x1#0 ] ] with [ zp[2]:159 [ div32u16u::quotient_hi#0 mul16s::$9 ] ]
Coalescing zero page register [ zp[2]:70 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ] ] with [ zp[2]:46 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ] ]
Allocated (was zp[4]:42) zp[4]:2 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 mul16s::return#0 sin16s_gen2::$6 main::$6 main::$10 mulu16_sel::$0 mulu16_sel::$1 ]
Allocated (was zp[4]:66) zp[4]:6 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp[2]:70) zp[2]:10 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
Allocated (was zp[2]:126) zp[2]:12 [ bitmap_plot::$1 mul16s::$6 mul16s::$11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 mul16u::b#2 mul16u::b#1 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
Allocated (was zp[2]:19) zp[2]:14 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
Allocated (was zp[2]:155) zp[2]:16 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sin16s_gen2::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mul16s::a#3 mul16s::a#0 sin16s::return#0 mul16s::$12 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::usinx#0 ]
Allocated (was zp[4]:38) zp[4]:18 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated (was zp[2]:97) zp[2]:22 [ sin16s::x1#0 div32u16u::quotient_hi#0 mul16s::$9 ]
Allocated (was zp[2]:220) zp[2]:24 [ main::x#0 bitmap_plot::x#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 sin16s_gen2::i#2 sin16s_gen2::i#1 ]
Allocated (was zp[2]:218) zp[2]:26 [ main::y#0 memset::num#2 memset::end#0 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
Allocated (was zp[2]:141) zp[2]:28 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 main::cos_x#0 main::sin_y#0 main::$19 main::$21 main::$20 main::$22 ]
Allocated (was zp[2]:108) zp[2]:30 [ rem16u#14 ]
Allocated (was zp[4]:143) zp[4]:32 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
Allocated (was zp[4]:208) zp[4]:36 [ div32u16u::return#0 sin16s_gen2::step#0 div32u16u::return#1 ]
Allocated (was zp[1]:154) zp[1]:40 [ bitmap_init::$7 ]
Allocated (was zp[2]:166) zp[2]:41 [ main::idx_y#3 main::idx_y#10 main::idx_y#1 ]
Allocated (was zp[2]:212) zp[2]:43 [ main::idx_x#3 main::idx_x#10 main::idx_x#1 ]
Allocated (was zp[1]:222) zp[1]:45 [ frame_cnt ]
Interrupt procedure irq clobbers AnzP

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the simple bitmap plotter - and counts plots per frame in an IRQ
// Plots a fullscreen elipsis
/// @file
/// Commodore 64 Registers and Constants
/// @file
/// The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bitmap-plot-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  /// Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  /// $D011 Control Register #1  Bit#5: BMM Turn Bitmap Mode on/off
  .const VICII_BMM = $20
  /// $D011 Control Register #1  Bit#4: DEN Switch VIC-II output on/off
  .const VICII_DEN = $10
  /// $D011 Control Register #1  Bit#3: RSEL Switch betweem 25 or 24 visible rows
  ///          RSEL|  Display window height   | First line  | Last line
  ///          ----+--------------------------+-------------+----------
  ///            0 | 24 text lines/192 pixels |   55 ($37)  | 246 ($f6)
  ///            1 | 25 text lines/200 pixels |   51 ($33)  | 250 ($fa)
  .const VICII_RSEL = 8
  /// VICII IRQ Status/Enable Raster
  // @see #IRQ_ENABLE #IRQ_STATUS
  ///  0 | RST| Reaching a certain raster line. The line is specified by writing
  ///    |    | to register 0xd012 and bit 7 of $d011 and internally stored by
  ///    |    | the VIC for the raster compare. The test for reaching the
  ///    |    | interrupt raster line is done in cycle 0 of every line (for line
  ///    |    | 0, in cycle 1).
  .const IRQ_RASTER = 1
  /// Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  /// RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  /// The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .const SIZEOF_INT = 2
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  /// $D012 RASTER Raster counter
  .label RASTER = $d012
  /// $D021 Background Color 0
  .label BG_COLOR = $d021
  /// $D011 Control Register #1
  /// - Bit#0-#2: YSCROLL Screen Soft Scroll Vertical
  /// - Bit#3: RSEL Switch betweem 25 or 24 visible rows
  ///          RSEL|  Display window height   | First line  | Last line
  ///          ----+--------------------------+-------------+----------
  ///            0 | 24 text lines/192 pixels |   55 ($37)  | 246 ($f6)
  ///            1 | 25 text lines/200 pixels |   51 ($33)  | 250 ($fa)
  /// - Bit#4: DEN Switch VIC-II output on/off
  /// - Bit#5: BMM Turn Bitmap Mode on/off
  /// - Bit#6: ECM Turn Extended Color Mode on/off
  /// - Bit#7: RST8 9th Bit for $D012 Rasterline counter
  /// Initial Value: %10011011
  .label VICII_CONTROL1 = $d011
  /// $D011 Control Register #1
  /// @see #VICII_CONTROL1
  .label D011 = $d011
  /// $D018 VIC-II base addresses
  // @see #VICII_MEMORY
  .label D018 = $d018
  /// VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  /// VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  /// Processor port data direction register
  .label PROCPORT_DDR = 0
  /// Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  /// The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  /// The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .label BITMAP = $2000
  .label SCREEN = $400
  // Counts frames - updated by the IRQ
  .label frame_cnt = $2d
  // Remainder after unsigned 16-bit division
  .label rem16u = $1e
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] frame_cnt = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z frame_cnt
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main
    // [11] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // irq
// Interrupt Routine counting frames
irq: {
    // interrupt(isr_hardware_clobber_entry) -- isr_hardware_all_entry 
    sta rega+1
    // [5] *BG_COLOR = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // [6] if(0==frame_cnt) goto irq::@1 -- 0_eq_vbuz1_then_la1 
    lda.z frame_cnt
    beq __b1
    jmp __b2
    // irq::@2
  __b2:
    // [7] frame_cnt = ++ frame_cnt -- vbuz1=_inc_vbuz1 
    inc.z frame_cnt
    jmp __b1
    // irq::@1
  __b1:
    // [8] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // [9] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // irq::@return
  __breturn:
    // [10] return 
    // interrupt(isr_hardware_clobber_exit) -- isr_hardware_all_exit 
  rega:
    lda #0
    rti
}
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>BITMAP)/4&$f
    .label __6 = 2
    .label __10 = 2
    .label __19 = $1c
    .label __20 = $1c
    .label cos_x = $1c
    .label xpos = 2
    .label x = $18
    .label sin_y = $1c
    .label ypos = 2
    .label y = $1a
    .label idx_x = $2b
    .label idx_y = $29
    .label __21 = $1c
    .label __22 = $1c
    // [12] call sin16s_gen2
    // [54] phi from main to sin16s_gen2 [phi:main->sin16s_gen2]
  sin16s_gen2_from_main:
    jsr sin16s_gen2
    // [13] phi from main to main::@6 [phi:main->main::@6]
  __b6_from_main:
    jmp __b6
    // main::@6
  __b6:
    // [14] call bitmap_init
    // [73] phi from main::@6 to bitmap_init [phi:main::@6->bitmap_init]
  bitmap_init_from___b6:
    jsr bitmap_init
    // [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [16] call bitmap_clear
    // [95] phi from main::@7 to bitmap_clear [phi:main::@7->bitmap_clear]
  bitmap_clear_from___b7:
    jsr bitmap_clear
    jmp __b8
    // main::@8
  __b8:
    // [17] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VICII_BMM|VICII_DEN|VICII_RSEL|3
    sta D011
    // [18] phi from main::@8 to main::toD0181 [phi:main::@8->main::toD0181]
  toD0181_from___b8:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b5
    // main::@5
  __b5:
    // [19] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [20] call init_irq
    jsr init_irq
    // [21] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [21] phi main::idx_y#3 = $80 [phi:main::@5->main::@1#0] -- vwuz1=vwuc1 
    lda #<$80
    sta.z idx_y
    lda #>$80
    sta.z idx_y+1
    // [21] phi main::idx_x#3 = 0 [phi:main::@5->main::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z idx_x
    lda #>0
    sta.z idx_x+1
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [22] main::$19 = main::idx_x#3 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z idx_x
    asl
    sta.z __19
    lda.z idx_x+1
    rol
    sta.z __19+1
    // [23] main::$21 = SINE + main::$19 -- pwsz1=pwsc1_plus_vwuz1 
    lda.z __21
    clc
    adc #<SINE
    sta.z __21
    lda.z __21+1
    adc #>SINE
    sta.z __21+1
    // [24] main::cos_x#0 = *main::$21 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (cos_x),y
    pha
    iny
    lda (cos_x),y
    sta.z cos_x+1
    pla
    sta.z cos_x
    // [25] mul16s::b#1 = main::cos_x#0
    // [26] call mul16s
    // [110] phi from main::@2 to mul16s [phi:main::@2->mul16s]
  mul16s_from___b2:
    // [110] phi mul16s::b#3 = mul16s::b#1 [phi:main::@2->mul16s#0] -- register_copy 
    // [110] phi mul16s::a#3 = $a0 [phi:main::@2->mul16s#1] -- vwsz1=vwsc1 
    lda #<$a0
    sta.z mul16s.a
    lda #>$a0
    sta.z mul16s.a+1
    jsr mul16s
    // [27] mul16s::return#3 = mul16s::return#1
    jmp __b9
    // main::@9
  __b9:
    // [28] main::xpos#0 = mul16s::return#3
    // [29] main::$6 = main::xpos#0 << 4 -- vdsz1=vdsz1_rol_4 
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    // [30] main::$7 = word1  main::$6
    // [31] main::x#0 = $a0 + main::$7 -- vwuz1=vwuc1_plus__word1_vdsz2 
    lda #<$a0
    clc
    adc.z __6+2
    sta.z x
    lda #>$a0
    adc.z __6+3
    sta.z x+1
    // [32] main::$20 = main::idx_y#3 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z idx_y
    asl
    sta.z __20
    lda.z idx_y+1
    rol
    sta.z __20+1
    // [33] main::$22 = SINE + main::$20 -- pwsz1=pwsc1_plus_vwuz1 
    lda.z __22
    clc
    adc #<SINE
    sta.z __22
    lda.z __22+1
    adc #>SINE
    sta.z __22+1
    // [34] main::sin_y#0 = *main::$22 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin_y),y
    pha
    iny
    lda (sin_y),y
    sta.z sin_y+1
    pla
    sta.z sin_y
    // [35] mul16s::b#2 = main::sin_y#0
    // [36] call mul16s
    // [110] phi from main::@9 to mul16s [phi:main::@9->mul16s]
  mul16s_from___b9:
    // [110] phi mul16s::b#3 = mul16s::b#2 [phi:main::@9->mul16s#0] -- register_copy 
    // [110] phi mul16s::a#3 = $64 [phi:main::@9->mul16s#1] -- vwsz1=vbsc1 
    lda #<$64
    sta.z mul16s.a
    lda #>$64
    sta.z mul16s.a+1
    jsr mul16s
    // [37] mul16s::return#4 = mul16s::return#1
    jmp __b10
    // main::@10
  __b10:
    // [38] main::ypos#0 = mul16s::return#4
    // [39] main::$10 = main::ypos#0 << 4 -- vdsz1=vdsz1_rol_4 
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    // [40] main::$11 = word1  main::$10
    // [41] main::y#0 = $64 + main::$11 -- vwuz1=vwuc1_plus__word1_vdsz2 
    lda #<$64
    clc
    adc.z __10+2
    sta.z y
    lda #>$64
    adc.z __10+3
    sta.z y+1
    // [42] bitmap_plot::x#0 = main::x#0
    // [43] bitmap_plot::y#0 = (char)main::y#0 -- vbuxx=_byte_vwuz1 
    ldx.z y
    // [44] call bitmap_plot
    jsr bitmap_plot
    jmp __b11
    // main::@11
  __b11:
    // [45] main::idx_x#1 = ++ main::idx_x#3 -- vwuz1=_inc_vwuz1 
    inc.z idx_x
    bne !+
    inc.z idx_x+1
  !:
    // [46] if(main::idx_x#1!=$200) goto main::@12 -- vwuz1_neq_vwuc1_then_la1 
    lda.z idx_x+1
    cmp #>$200
    bne __b12_from___b11
    lda.z idx_x
    cmp #<$200
    bne __b12_from___b11
    // [48] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
  __b3_from___b11:
    // [48] phi main::idx_x#10 = 0 [phi:main::@11->main::@3#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z idx_x
    lda #>0
    sta.z idx_x+1
    jmp __b3
    // [47] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [48] phi from main::@12 to main::@3 [phi:main::@12->main::@3]
  __b3_from___b12:
    // [48] phi main::idx_x#10 = main::idx_x#1 [phi:main::@12->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [49] main::idx_y#1 = ++ main::idx_y#3 -- vwuz1=_inc_vwuz1 
    inc.z idx_y
    bne !+
    inc.z idx_y+1
  !:
    // [50] if(main::idx_y#1!=$200) goto main::@13 -- vwuz1_neq_vwuc1_then_la1 
    lda.z idx_y+1
    cmp #>$200
    bne __b13_from___b3
    lda.z idx_y
    cmp #<$200
    bne __b13_from___b3
    // [52] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [52] phi main::idx_y#10 = 0 [phi:main::@3->main::@4#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z idx_y
    lda #>0
    sta.z idx_y+1
    jmp __b4
    // [51] phi from main::@3 to main::@13 [phi:main::@3->main::@13]
  __b13_from___b3:
    jmp __b13
    // main::@13
  __b13:
    // [52] phi from main::@13 to main::@4 [phi:main::@13->main::@4]
  __b4_from___b13:
    // [52] phi main::idx_y#10 = main::idx_y#1 [phi:main::@13->main::@4#0] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [53] plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt] -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z frame_cnt
    inc plots_per_frame,x
    // [21] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [21] phi main::idx_y#3 = main::idx_y#10 [phi:main::@4->main::@1#0] -- register_copy 
    // [21] phi main::idx_x#3 = main::idx_x#10 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
}
  // sin16s_gen2
// Generate signed int sine table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// void sin16s_gen2(__zp($1a) int *sintab, unsigned int wavelength, int min, int max)
sin16s_gen2: {
    .const min = -$1001
    .const max = $1001
    .const ampl = max-min
    .label wavelength = $200
    .label __6 = 2
    .label __8 = $10
    .label step = $24
    .label sintab = $1a
    // u[4.28]
    // Iterate over the table
    .label x = $20
    .label i = $18
    // [55] call div32u16u
  // ampl is always positive so shifting left does not alter the sign
  // u[4.28] step = PI*2/wavelength
    // [134] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
  div32u16u_from_sin16s_gen2:
    jsr div32u16u
    // [56] div32u16u::return#0 = div32u16u::return#1
    jmp __b3
    // sin16s_gen2::@3
  __b3:
    // [57] sin16s_gen2::step#0 = div32u16u::return#0
    // [58] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
  __b1_from___b3:
    // [58] phi sin16s_gen2::sintab#2 = SINE [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- pwsz1=pwsc1 
    lda #<SINE
    sta.z sintab
    lda #>SINE
    sta.z sintab+1
    // [58] phi sin16s_gen2::x#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [58] phi sin16s_gen2::i#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.28]
    // sin16s_gen2::@1
  __b1:
    // [59] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin16s_gen2::@return
  __breturn:
    // [60] return 
    rts
    // sin16s_gen2::@2
  __b2:
    // [61] sin16s::x#0 = sin16s_gen2::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [62] call sin16s
    jsr sin16s
    // [63] sin16s::return#0 = sin16s::return#1
    jmp __b4
    // sin16s_gen2::@4
  __b4:
    // [64] mul16s::a#0 = sin16s::return#0
    // [65] call mul16s
    // [110] phi from sin16s_gen2::@4 to mul16s [phi:sin16s_gen2::@4->mul16s]
  mul16s_from___b4:
    // [110] phi mul16s::b#3 = sin16s_gen2::ampl#0 [phi:sin16s_gen2::@4->mul16s#0] -- vwsz1=vwsc1 
    lda #<ampl
    sta.z mul16s.b
    lda #>ampl
    sta.z mul16s.b+1
    // [110] phi mul16s::a#3 = mul16s::a#0 [phi:sin16s_gen2::@4->mul16s#1] -- register_copy 
    jsr mul16s
    // [66] mul16s::return#0 = mul16s::return#1
    jmp __b5
    // sin16s_gen2::@5
  __b5:
    // [67] sin16s_gen2::$6 = mul16s::return#0
    // [68] sin16s_gen2::$8 = word1  sin16s_gen2::$6 -- vwuz1=_word1_vdsz2 
    lda.z __6+2
    sta.z __8
    lda.z __6+3
    sta.z __8+1
    // [69] *sin16s_gen2::sintab#2 = (int)sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __8
    sta (sintab),y
    iny
    lda.z __8+1
    sta (sintab),y
    // [70] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_INT -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_INT
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // [71] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    clc
    lda.z x
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // [72] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [58] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
  __b1_from___b5:
    // [58] phi sin16s_gen2::sintab#2 = sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
    // [58] phi sin16s_gen2::x#2 = sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
    // [58] phi sin16s_gen2::i#2 = sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
// void bitmap_init(char *gfx, char *screen)
bitmap_init: {
    .label __7 = $28
    .label yoffs = $18
    // [74] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [74] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [74] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp __b1
    // [74] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [74] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [74] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [75] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // [76] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // [77] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6_from___b1
    // [79] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [79] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp __b2
    // [78] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [79] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [79] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [80] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [81] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [82] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [82] phi bitmap_init::yoffs#2 = BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [82] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [82] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [82] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [82] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [83] bitmap_init::$7 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // [84] bitmap_init::$4 = byte0  bitmap_init::yoffs#2 -- vbuaa=_byte0_pbuz1 
    lda.z yoffs
    // [85] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // [86] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [87] bitmap_init::$6 = byte1  bitmap_init::yoffs#2 -- vbuaa=_byte1_pbuz1 
    lda.z yoffs+1
    // [88] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [89] if(bitmap_init::$7!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [90] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (unsigned int)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    lda.z yoffs
    clc
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [91] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [91] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [92] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [93] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [94] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
// void bitmap_clear(char bgcol, char fgcol)
bitmap_clear: {
    .const col = WHITE*$10
    // [96] call memset
    // [184] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [184] phi memset::c#4 = bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [184] phi memset::str#3 = (void *)SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [184] phi memset::num#2 = $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [97] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [98] call memset
    // [184] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [184] phi memset::c#4 = 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [184] phi memset::str#3 = (void *)BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [184] phi memset::num#2 = $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [99] return 
    rts
}
  // init_irq
// Setup the IRQ
init_irq: {
    // asm { sei  }
    sei
    // [101] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta.z PROCPORT_DDR
    // [102] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta.z PROCPORT
    // [103] *((char *)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [104] *VICII_CONTROL1 = *VICII_CONTROL1 | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VICII_CONTROL1
    sta VICII_CONTROL1
    // [105] *RASTER = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // [106] *IRQ_ENABLE = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [107] *HARDWARE_IRQ = &irq -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // init_irq::@return
  __breturn:
    // [109] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// __zp(2) long mul16s(__zp($10) int a, __zp($1c) int b)
mul16s: {
    .label __6 = $c
    .label __9 = $16
    .label __11 = $c
    .label __12 = $10
    .label a = $10
    .label return = 2
    .label m = 2
    .label b = $1c
    // [111] mul16u::a#2 = (unsigned int)mul16s::a#3 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [112] mul16u::b#1 = (unsigned int)mul16s::b#3 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [113] call mul16u
    // [193] phi from mul16s to mul16u [phi:mul16s->mul16u]
  mul16u_from_mul16s:
    // [193] phi mul16u::a#6 = mul16u::a#2 [phi:mul16s->mul16u#0] -- register_copy 
    // [193] phi mul16u::b#2 = mul16u::b#1 [phi:mul16s->mul16u#1] -- register_copy 
    jsr mul16u
    // [114] mul16u::return#3 = mul16u::res#2
    jmp __b5
    // mul16s::@5
  __b5:
    // [115] mul16s::m#0 = mul16u::return#3
    // [116] if(mul16s::a#3>=0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b5
    jmp __b3
    // mul16s::@3
  __b3:
    // [117] mul16s::$6 = word1  mul16s::m#0 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [118] mul16s::$11 = mul16s::$6 - (unsigned int)mul16s::b#3 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [119] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [120] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [120] phi mul16s::m#5 = mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    jmp __b1
    // mul16s::@1
  __b1:
    // [121] if(mul16s::b#3>=0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2_from___b1
    jmp __b4
    // mul16s::@4
  __b4:
    // [122] mul16s::$9 = word1  mul16s::m#5 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // [123] mul16s::$12 = mul16s::$9 - (unsigned int)mul16s::a#3 -- vwuz1=vwuz2_minus_vwuz1 
    lda.z __9
    sec
    sbc.z __12
    sta.z __12
    lda.z __9+1
    sbc.z __12+1
    sta.z __12+1
    // [124] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [125] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [125] phi mul16s::m#4 = mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    jmp __b2
    // mul16s::@2
  __b2:
    // [126] mul16s::return#1 = (long)mul16s::m#4
    jmp __breturn
    // mul16s::@return
  __breturn:
    // [127] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// void bitmap_plot(__zp($18) unsigned int x, __register(X) char y)
bitmap_plot: {
    .label __1 = $c
    .label plotter = $10
    .label x = $18
    // [128] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#0] w= bitmap_plot_ylo[bitmap_plot::y#0] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter+1
    lda bitmap_plot_ylo,x
    sta.z plotter
    // [129] bitmap_plot::$1 = bitmap_plot::x#0 & $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __1
    lda.z x+1
    and #>$fff8
    sta.z __1+1
    // [130] bitmap_plot::plotter#1 = (char *)bitmap_plot::plotter#0 + bitmap_plot::$1 -- pbuz1=pbuz1_plus_vwuz2 
    clc
    lda.z plotter
    adc.z __1
    sta.z plotter
    lda.z plotter+1
    adc.z __1+1
    sta.z plotter+1
    // [131] bitmap_plot::$2 = byte0  bitmap_plot::x#0 -- vbuxx=_byte0_vwuz1 
    ldx.z x
    // [132] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2] -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [133] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
// __zp($24) unsigned long div32u16u(unsigned long dividend, unsigned int divisor)
div32u16u: {
    .label return = $24
    .label quotient_hi = $16
    .label quotient_lo = $e
    // [135] call divr16u
    // [204] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [204] phi divr16u::dividend#5 = word1 PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [204] phi divr16u::rem#10 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [136] divr16u::return#2 = divr16u::return#0
    jmp __b1
    // div32u16u::@1
  __b1:
    // [137] div32u16u::quotient_hi#0 = divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // [138] divr16u::rem#4 = rem16u#14 -- vwuz1=vwuz2 
    lda.z rem16u
    sta.z divr16u.rem
    lda.z rem16u+1
    sta.z divr16u.rem+1
    // [139] call divr16u
    // [204] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from___b1:
    // [204] phi divr16u::dividend#5 = word0 PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [204] phi divr16u::rem#10 = divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [140] divr16u::return#3 = divr16u::return#0
    jmp __b2
    // div32u16u::@2
  __b2:
    // [141] div32u16u::quotient_lo#0 = divr16u::return#3
    // [142] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    jmp __breturn
    // div32u16u::@return
  __breturn:
    // [143] return 
    rts
}
  // sin16s
// Calculate signed int sine sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// __zp($10) int sin16s(__zp($12) unsigned long x)
sin16s: {
    .label __4 = 6
    .label x = $12
    .label return = $10
    .label x1 = $16
    .label x2 = $e
    .label x3 = $e
    .label x3_6 = $a
    .label usinx = $10
    .label x4 = $e
    .label x5 = $a
    .label x5_128 = $a
    .label sinx = $10
    // [144] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b1_from_sin16s
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b1_from_sin16s
  !:
    jmp __b4
    // sin16s::@4
  __b4:
    // [145] sin16s::x#1 = sin16s::x#0 - PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [146] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  __b1_from___b4:
    // [146] phi sin16s::isUpper#2 = 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [146] phi sin16s::x#4 = sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [146] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b1_from_sin16s:
    // [146] phi sin16s::isUpper#2 = 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [146] phi sin16s::x#4 = sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp __b1
    // sin16s::@1
  __b1:
    // [147] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2_from___b1
  !:
    jmp __b5
    // sin16s::@5
  __b5:
    // [148] sin16s::x#2 = PI_u4f28 - sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [149] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [149] phi sin16s::x#6 = sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp __b2
    // sin16s::@2
  __b2:
    // [150] sin16s::$4 = sin16s::x#6 << 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // [151] sin16s::x1#0 = word1  sin16s::$4 -- vwuz1=_word1_vduz2 
    // sinx = x - x^3/6 + x5/128;
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // [152] mulu16_sel::v1#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [153] mulu16_sel::v2#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [154] call mulu16_sel
  // u[1.15]
    // [222] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from___b2:
    // [222] phi mulu16_sel::select#5 = 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [155] mulu16_sel::return#0 = mulu16_sel::return#12
    jmp __b7
    // sin16s::@7
  __b7:
    // [156] sin16s::x2#0 = mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // [157] mulu16_sel::v1#1 = sin16s::x2#0
    // [158] mulu16_sel::v2#1 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [159] call mulu16_sel
  // u[2.14] x^2
    // [222] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from___b7:
    // [222] phi mulu16_sel::select#5 = 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [160] mulu16_sel::return#1 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b8
    // sin16s::@8
  __b8:
    // [161] sin16s::x3#0 = mulu16_sel::return#1
    // [162] mulu16_sel::v1#2 = sin16s::x3#0
    // [163] call mulu16_sel
  // u[2.14] x^3
    // [222] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from___b8:
    // [222] phi mulu16_sel::select#5 = 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [222] phi mulu16_sel::v2#5 = (unsigned int)$10000/6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [164] mulu16_sel::return#2 = mulu16_sel::return#12
    jmp __b9
    // sin16s::@9
  __b9:
    // [165] sin16s::x3_6#0 = mulu16_sel::return#2
    // [166] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    // u[1.15] x^3/6;
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // [167] mulu16_sel::v1#3 = sin16s::x3#0
    // [168] mulu16_sel::v2#3 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [169] call mulu16_sel
  // u[1.15] x - x^3/6
    // [222] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from___b9:
    // [222] phi mulu16_sel::select#5 = 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [170] mulu16_sel::return#10 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b10
    // sin16s::@10
  __b10:
    // [171] sin16s::x4#0 = mulu16_sel::return#10
    // [172] mulu16_sel::v1#4 = sin16s::x4#0
    // [173] mulu16_sel::v2#4 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [174] call mulu16_sel
  // u[3.13] x^4
    // [222] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from___b10:
    // [222] phi mulu16_sel::select#5 = 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [175] mulu16_sel::return#11 = mulu16_sel::return#12
    jmp __b11
    // sin16s::@11
  __b11:
    // [176] sin16s::x5#0 = mulu16_sel::return#11
    // [177] sin16s::x5_128#0 = sin16s::x5#0 >> 4 -- vwuz1=vwuz1_ror_4 
    // u[4.12] x^5
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // [178] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z usinx
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // [179] if(sin16s::isUpper#2==0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b12
    jmp __b6
    // sin16s::@6
  __b6:
    // [180] sin16s::sinx#1 = - (int)sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    lda #0
    sec
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [181] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  __b3_from___b12:
  __b3_from___b6:
    // [181] phi sin16s::return#1 = sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp __b3
    // sin16s::@3
  __b3:
    jmp __breturn
    // sin16s::@return
  __breturn:
    // [182] return 
    rts
    // sin16s::@12
  __b12:
    // [183] sin16s::return#5 = (int)sin16s::usinx#1
    jmp __b3_from___b12
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(__zp($10) void *str, __register(X) char c, __zp($1a) unsigned int num)
memset: {
    .label end = $1a
    .label dst = $10
    .label num = $1a
    .label str = $10
    // [185] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [186] memset::end#0 = (char *)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    clc
    lda.z end
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [187] memset::dst#4 = (char *)memset::str#3
    // [188] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [188] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [189] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [190] return 
    rts
    // memset::@3
  __b3:
    // [191] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [192] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// __zp(2) unsigned long mul16u(__zp($a) unsigned int a, __zp($c) unsigned int b)
mul16u: {
    .label a = $a
    .label b = $c
    .label return = 2
    .label mb = 6
    .label res = 2
    // [194] mul16u::mb#0 = (unsigned long)mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [195] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [195] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [195] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [195] phi mul16u::a#3 = mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [196] if(mul16u::a#3!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [197] return 
    rts
    // mul16u::@2
  __b2:
    // [198] mul16u::$1 = mul16u::a#3 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [199] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [200] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [201] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [201] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [202] mul16u::a#1 = mul16u::a#3 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [203] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [195] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [195] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [195] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [195] phi mul16u::a#3 = mul16u::a#1 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// __zp($e) unsigned int divr16u(__zp($a) unsigned int dividend, unsigned int divisor, __zp($c) unsigned int rem)
divr16u: {
    .label rem = $c
    .label dividend = $a
    .label quotient = $e
    .label return = $e
    // [205] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [205] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [205] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [205] phi divr16u::dividend#3 = divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [205] phi divr16u::rem#5 = divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp __b1
    // [205] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [205] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [205] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [205] phi divr16u::dividend#3 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [205] phi divr16u::rem#5 = divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [206] divr16u::rem#0 = divr16u::rem#5 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [207] divr16u::$1 = byte1  divr16u::dividend#3 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // [208] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [209] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [210] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [211] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [211] phi divr16u::rem#6 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [212] divr16u::dividend#0 = divr16u::dividend#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [213] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [214] if(divr16u::rem#6<sin16s_gen2::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>sin16s_gen2.wavelength
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<sin16s_gen2.wavelength
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [215] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [216] divr16u::rem#2 = divr16u::rem#6 - sin16s_gen2::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<sin16s_gen2.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>sin16s_gen2.wavelength
    sta.z rem+1
    // [217] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [217] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [217] phi divr16u::rem#11 = divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [218] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [219] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [220] rem16u#14 = divr16u::rem#11 -- vwuz1=vwuz2 
    lda.z rem
    sta.z rem16u
    lda.z rem+1
    sta.z rem16u+1
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [221] return 
    rts
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// __zp($a) unsigned int mulu16_sel(__zp($e) unsigned int v1, __zp($c) unsigned int v2, __register(X) char select)
mulu16_sel: {
    .label __0 = 2
    .label __1 = 2
    .label v1 = $e
    .label v2 = $c
    .label return = $a
    .label return_1 = $e
    // [223] mul16u::a#0 = mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [224] mul16u::b#0 = mulu16_sel::v2#5
    // [225] call mul16u
    // [193] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
  mul16u_from_mulu16_sel:
    // [193] phi mul16u::a#6 = mul16u::a#0 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [193] phi mul16u::b#2 = mul16u::b#0 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
    // [226] mul16u::return#0 = mul16u::res#2
    jmp __b1
    // mulu16_sel::@1
  __b1:
    // [227] mulu16_sel::$0 = mul16u::return#0
    // [228] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // [229] mulu16_sel::return#12 = word1  mulu16_sel::$1 -- vwuz1=_word1_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    jmp __breturn
    // mulu16_sel::@return
  __breturn:
    // [230] return 
    rts
}
  // File Data
.segment Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  plots_per_frame: .fill $100, 0
  .align $100
  SINE: .fill 2*$200, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp toD0181
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b12_from___b11 with __b3
Replacing label __b12_from___b11 with __b3
Replacing label __b13_from___b3 with __b4
Replacing label __b13_from___b3 with __b4
Replacing label __b1 with __b2
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b12 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __breturn:
Removing instruction __b6_from_main:
Removing instruction bitmap_init_from___b6:
Removing instruction __b7_from___b6:
Removing instruction bitmap_clear_from___b7:
Removing instruction toD0181_from___b8:
Removing instruction toD0181:
Removing instruction __b1:
Removing instruction __b12_from___b11:
Removing instruction __b12:
Removing instruction __b3_from___b12:
Removing instruction __b13_from___b3:
Removing instruction __b13:
Removing instruction __b4_from___b13:
Removing instruction __b1_from___b3:
Removing instruction mul16s_from___b4:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from_bitmap_clear:
Removing instruction memset_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b6:
Removing instruction __breturn:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction sin16s_gen2_from_main:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction mul16s_from___b2:
Removing instruction __b9:
Removing instruction mul16s_from___b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b3_from___b11:
Removing instruction __b4_from___b3:
Removing instruction __b1_from___b4:
Removing instruction div32u16u_from_sin16s_gen2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction memset_from_bitmap_clear:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction mul16u_from_mul16s:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction divr16u_from_div32u16u:
Removing instruction __b1:
Removing instruction divr16u_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b5:
Removing instruction mulu16_sel_from___b2:
Removing instruction __b7:
Removing instruction mulu16_sel_from___b7:
Removing instruction __b8:
Removing instruction mulu16_sel_from___b8:
Removing instruction __b9:
Removing instruction mulu16_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu16_sel_from___b10:
Removing instruction __b11:
Removing instruction __b6:
Removing instruction __b1:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction mul16u_from_mulu16_sel:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b3 in beq __b12
Replacing jump to rts with rts in jmp __b3
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin16s to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
__constant char * const BG_COLOR = (char *) 53281
__constant char *BITMAP = (char *) 8192
__constant const char BLACK = 0
__constant struct MOS6526_CIA * const CIA1 = (struct MOS6526_CIA *) 56320
__constant const char CIA_INTERRUPT_CLEAR = $7f
__constant char * const D011 = (char *) 53265
__constant char * const D018 = (char *) 53272
__constant void (** const HARDWARE_IRQ)() = (void (**)()) 65534
__constant char * const IRQ_ENABLE = (char *) 53274
__constant const char IRQ_RASTER = 1
__constant char * const IRQ_STATUS = (char *) 53273
__constant char OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
__constant const unsigned long PI2_u4f28 = $6487ed51
__constant const unsigned long PI_HALF_u4f28 = $1921fb54
__constant const unsigned long PI_u4f28 = $3243f6a9
__constant char * const PROCPORT = (char *) 1
__constant char * const PROCPORT_DDR = (char *) 0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_RAM_IO = 5
__constant char * const RASTER = (char *) 53266
__constant char *SCREEN = (char *) 1024
__constant int SINE[$200] = { fill( $200, 0) }
__constant char SIZEOF_INT = 2
__constant const char VICII_BMM = $20
__constant char * const VICII_CONTROL1 = (char *) 53265
__constant const char VICII_DEN = $10
__constant const char VICII_RSEL = 8
__constant const char WHITE = 1
void __start()
void bitmap_clear(char bgcol , char fgcol)
char bitmap_clear::bgcol
char bitmap_clear::col
__constant char bitmap_clear::col#0 = WHITE*$10 // col
char bitmap_clear::fgcol
char *bitmap_gfx
void bitmap_init(char *gfx , char *screen)
char bitmap_init::$4 // reg byte a 2002.0
char bitmap_init::$5 // reg byte a 2002.0
char bitmap_init::$6 // reg byte a 2002.0
char bitmap_init::$7 // zp[1]:40 500.5
char bitmap_init::bits
char bitmap_init::bits#1 // reg byte a 1001.0
char bitmap_init::bits#3 // reg byte a 1501.5
char bitmap_init::bits#4 // reg byte a 667.3333333333334
char *bitmap_init::gfx
char *bitmap_init::screen
char bitmap_init::x
char bitmap_init::x#1 // reg byte x 1501.5
char bitmap_init::x#2 // reg byte x 500.5
char bitmap_init::y
char bitmap_init::y#1 // reg byte x 1501.5
char bitmap_init::y#2 // reg byte x 500.5
char *bitmap_init::yoffs
char *bitmap_init::yoffs#1 // yoffs zp[2]:24 2002.0
char *bitmap_init::yoffs#2 // yoffs zp[2]:24 625.625
char *bitmap_init::yoffs#4 // yoffs zp[2]:24 1001.0
void bitmap_plot(unsigned int x , char y)
unsigned int bitmap_plot::$1 // zp[2]:12 2002.0
char bitmap_plot::$2 // reg byte x 2002.0
char *bitmap_plot::plotter
unsigned int bitmap_plot::plotter#0 // plotter zp[2]:16 500.5
char *bitmap_plot::plotter#1 // plotter zp[2]:16 1501.5
unsigned int bitmap_plot::x
unsigned int bitmap_plot::x#0 // x zp[2]:24 420.59999999999997
char bitmap_plot::y
char bitmap_plot::y#0 // reg byte x 2103.0
__constant const char bitmap_plot_bit[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_yhi[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_ylo[$100] = { fill( $100, 0) }
char *bitmap_screen
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned long div32u16u::dividend
unsigned int div32u16u::divisor
unsigned long div32u16u::quotient
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0 // quotient_hi zp[2]:22 400.4
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0 // quotient_lo zp[2]:14 2002.0
unsigned long div32u16u::return
unsigned long div32u16u::return#0 // return zp[4]:36 202.0
unsigned long div32u16u::return#1 // return zp[4]:36 367.33333333333337
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 200002.0
char divr16u::$2 // reg byte a 200002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:10 25000.25
unsigned int divr16u::dividend#3 // dividend zp[2]:10 44286.28571428572
unsigned int divr16u::dividend#5 // dividend zp[2]:10 10001.0
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 150001.5
char divr16u::i#2 // reg byte x 15384.76923076923
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:14 150001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:14 100001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:14 25000.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:12 75000.75
unsigned int divr16u::rem#1 // rem zp[2]:12 200002.0
unsigned int divr16u::rem#10 // rem zp[2]:12 11002.0
unsigned int divr16u::rem#11 // rem zp[2]:12 103334.66666666667
unsigned int divr16u::rem#2 // rem zp[2]:12 200002.0
unsigned int divr16u::rem#4 // rem zp[2]:12 2002.0
unsigned int divr16u::rem#5 // rem zp[2]:12 210003.0
unsigned int divr16u::rem#6 // rem zp[2]:12 100001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:14 43143.57142857143
unsigned int divr16u::return#2 // return zp[2]:14 2002.0
unsigned int divr16u::return#3 // return zp[2]:14 2002.0
__loadstore volatile char frame_cnt // zp[1]:45 4.468085106382979
void init_irq()
__interrupt(hardware_clobber) void irq()
void main()
long main::$10 // zp[4]:2 202.0
unsigned int main::$11 // reg byte alu 202.0
unsigned int main::$19 // zp[2]:28 202.0
unsigned int main::$20 // zp[2]:28 202.0
int *main::$21 // zp[2]:28 202.0
int *main::$22 // zp[2]:28 202.0
long main::$6 // zp[4]:2 202.0
unsigned int main::$7 // reg byte alu 202.0
int main::cos_x
int main::cos_x#0 // cos_x zp[2]:28 202.0
unsigned int main::idx_x
unsigned int main::idx_x#1 // idx_x zp[2]:43 101.0
unsigned int main::idx_x#10 // idx_x zp[2]:43 33.666666666666664
unsigned int main::idx_x#3 // idx_x zp[2]:43 12.625
unsigned int main::idx_y
unsigned int main::idx_y#1 // idx_y zp[2]:41 101.0
unsigned int main::idx_y#10 // idx_y zp[2]:41 101.0
unsigned int main::idx_y#3 // idx_y zp[2]:41 10.821428571428571
int main::sin_y
int main::sin_y#0 // sin_y zp[2]:28 202.0
char *main::toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)SCREEN&$3fff*4|byte1 (unsigned int)BITMAP/4&$f // toD0181_return
char *main::toD0181_screen
unsigned int main::x
unsigned int main::x#0 // x zp[2]:24 18.363636363636363
long main::xpos
long main::xpos#0 // xpos zp[4]:2 202.0
unsigned int main::y
unsigned int main::y#0 // y zp[2]:26 50.5
long main::ypos
long main::ypos#0 // ypos zp[4]:2 202.0
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 1250.125
char *memset::dst
char *memset::dst#1 // dst zp[2]:16 20002.0
char *memset::dst#2 // dst zp[2]:16 13668.333333333332
char *memset::dst#4 // dst zp[2]:16 2002.0
char *memset::end
char *memset::end#0 // end zp[2]:26 1833.6666666666665
unsigned int memset::num
unsigned int memset::num#2 // num zp[2]:26 1001.0
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:16
long mul16s(int a , int b)
unsigned int mul16s::$11 // zp[2]:12 20002.0
unsigned int mul16s::$12 // zp[2]:16 20002.0
unsigned int mul16s::$6 // zp[2]:12 20002.0
unsigned int mul16s::$9 // zp[2]:22 20002.0
int mul16s::a
int mul16s::a#0 // a zp[2]:16 2002.0
int mul16s::a#3 // a zp[2]:16 846.3076923076923
int mul16s::b
int mul16s::b#1 // b zp[2]:28 202.0
int mul16s::b#2 // b zp[2]:28 202.0
int mul16s::b#3 // b zp[2]:28 927.5454545454545
unsigned long mul16s::m
unsigned long mul16s::m#0 // m zp[4]:2 10001.0
unsigned long mul16s::m#1 // m zp[4]:2 20002.0
unsigned long mul16s::m#2 // m zp[4]:2 20002.0
unsigned long mul16s::m#4 // m zp[4]:2 20002.0
unsigned long mul16s::m#5 // m zp[4]:2 12501.25
long mul16s::return
long mul16s::return#0 // return zp[4]:2 2002.0
long mul16s::return#1 // return zp[4]:2 2240.8
long mul16s::return#3 // return zp[4]:2 202.0
long mul16s::return#4 // return zp[4]:2 202.0
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // reg byte a 2.00000002E8
unsigned int mul16u::a
unsigned int mul16u::a#0 // a zp[2]:10 100001.0
unsigned int mul16u::a#1 // a zp[2]:10 1.00000001E8
unsigned int mul16u::a#2 // a zp[2]:10 10001.0
unsigned int mul16u::a#3 // a zp[2]:10 6.683333416666667E7
unsigned int mul16u::a#6 // a zp[2]:10 555001.5
unsigned int mul16u::b
unsigned int mul16u::b#0 // b zp[2]:12 200002.0
unsigned int mul16u::b#1 // b zp[2]:12 20002.0
unsigned int mul16u::b#2 // b zp[2]:12 110002.0
unsigned long mul16u::mb
unsigned long mul16u::mb#0 // mb zp[4]:6 2000002.0
unsigned long mul16u::mb#1 // mb zp[4]:6 2.00000002E8
unsigned long mul16u::mb#2 // mb zp[4]:6 4.300000057142857E7
unsigned long mul16u::res
unsigned long mul16u::res#1 // res zp[4]:2 2.00000002E8
unsigned long mul16u::res#2 // res zp[4]:2 4.287285785714286E7
unsigned long mul16u::res#6 // res zp[4]:2 1.00000001E8
unsigned long mul16u::return
unsigned long mul16u::return#0 // return zp[4]:2 200002.0
unsigned long mul16u::return#3 // return zp[4]:2 20002.0
unsigned int mulu16_sel(unsigned int v1 , unsigned int v2 , char select)
unsigned long mulu16_sel::$0 // zp[4]:2 200002.0
unsigned long mulu16_sel::$1 // zp[4]:2 200002.0
unsigned int mulu16_sel::return
unsigned int mulu16_sel::return#0 // return zp[2]:10 20002.0
unsigned int mulu16_sel::return#1 // return_1 zp[2]:14 20002.0
unsigned int mulu16_sel::return#10 // return_1 zp[2]:14 20002.0
unsigned int mulu16_sel::return#11 // return zp[2]:10 20002.0
unsigned int mulu16_sel::return#12 // return zp[2]:10 21429.428571428572
unsigned int mulu16_sel::return#2 // return zp[2]:10 20002.0
char mulu16_sel::select
char mulu16_sel::select#5 // reg byte x 16666.833333333332
unsigned int mulu16_sel::v1
unsigned int mulu16_sel::v1#0 // v1 zp[2]:14 10001.0
unsigned int mulu16_sel::v1#1 // v1 zp[2]:14 10001.0
unsigned int mulu16_sel::v1#2 // v1 zp[2]:14 20002.0
unsigned int mulu16_sel::v1#3 // v1 zp[2]:14 10001.0
unsigned int mulu16_sel::v1#4 // v1 zp[2]:14 10001.0
unsigned int mulu16_sel::v1#5 // v1 zp[2]:14 150006.0
unsigned int mulu16_sel::v2
unsigned int mulu16_sel::v2#0 // v2 zp[2]:12 20002.0
unsigned int mulu16_sel::v2#1 // v2 zp[2]:12 20002.0
unsigned int mulu16_sel::v2#3 // v2 zp[2]:12 20002.0
unsigned int mulu16_sel::v2#4 // v2 zp[2]:12 20002.0
unsigned int mulu16_sel::v2#5 // v2 zp[2]:12 70002.5
__constant char plots_per_frame[$100] = { fill( $100, 0) }
unsigned int rem16u
unsigned int rem16u#14 // rem16u zp[2]:30 2200.4
int sin16s(unsigned long x)
unsigned long sin16s::$4 // zp[4]:6 20002.0
char sin16s::isUpper
char sin16s::isUpper#2 // reg byte y 303.06060606060606
int sin16s::return
int sin16s::return#0 // return zp[2]:16 2002.0
int sin16s::return#1 // return zp[2]:16 7001.0
int sin16s::return#5 // return zp[2]:16 20002.0
int sin16s::sinx
int sin16s::sinx#1 // sinx zp[2]:16 20002.0
unsigned int sin16s::usinx
unsigned int sin16s::usinx#0 // usinx zp[2]:16 1666.8333333333333
unsigned int sin16s::usinx#1 // usinx zp[2]:16 5000.5
unsigned long sin16s::x
unsigned long sin16s::x#0 // x zp[4]:18 15502.0
unsigned long sin16s::x#1 // x zp[4]:18 20002.0
unsigned long sin16s::x#2 // x zp[4]:18 20002.0
unsigned long sin16s::x#4 // x zp[4]:18 25002.5
unsigned long sin16s::x#6 // x zp[4]:18 30003.0
unsigned int sin16s::x1
unsigned int sin16s::x1#0 // x1 zp[2]:22 3182.1363636363635
unsigned int sin16s::x2
unsigned int sin16s::x2#0 // x2 zp[2]:14 20002.0
unsigned int sin16s::x3
unsigned int sin16s::x3#0 // x3 zp[2]:14 5000.5
unsigned int sin16s::x3_6
unsigned int sin16s::x3_6#0 // x3_6 zp[2]:10 20002.0
unsigned int sin16s::x4
unsigned int sin16s::x4#0 // x4 zp[2]:14 20002.0
unsigned int sin16s::x5
unsigned int sin16s::x5#0 // x5 zp[2]:10 20002.0
unsigned int sin16s::x5_128
unsigned int sin16s::x5_128#0 // x5_128 zp[2]:10 20002.0
void sin16s_gen2(int *sintab , unsigned int wavelength , int min , int max)
long sin16s_gen2::$6 // zp[4]:2 2002.0
unsigned int sin16s_gen2::$8 // zp[2]:16 1001.0
int sin16s_gen2::ampl
__constant int sin16s_gen2::ampl#0 = sin16s_gen2::max#0-sin16s_gen2::min#0 // ampl
unsigned int sin16s_gen2::i
unsigned int sin16s_gen2::i#1 // i zp[2]:24 2002.0
unsigned int sin16s_gen2::i#2 // i zp[2]:24 231.0
int sin16s_gen2::max
__constant int sin16s_gen2::max#0 = $1001 // max
int sin16s_gen2::min
__constant int sin16s_gen2::min#0 = -$1001 // min
int sin16s_gen2::offs
int *sin16s_gen2::sintab
int *sin16s_gen2::sintab#0 // sintab zp[2]:26 667.3333333333334
int *sin16s_gen2::sintab#2 // sintab zp[2]:26 273.0
unsigned long sin16s_gen2::step
unsigned long sin16s_gen2::step#0 // step zp[4]:36 73.46666666666667
unsigned int sin16s_gen2::wavelength
__constant unsigned int sin16s_gen2::wavelength#0 = $200 // wavelength
unsigned long sin16s_gen2::x
unsigned long sin16s_gen2::x#1 // x zp[4]:32 1001.0
unsigned long sin16s_gen2::x#2 // x zp[4]:32 250.25

zp[2]:43 [ main::idx_x#3 main::idx_x#10 main::idx_x#1 ]
zp[2]:41 [ main::idx_y#3 main::idx_y#10 main::idx_y#1 ]
zp[4]:32 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:28 [ mul16s::b#3 mul16s::b#2 mul16s::b#1 main::cos_x#0 main::sin_y#0 main::$19 main::$21 main::$20 main::$22 ]
zp[4]:2 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#3 main::xpos#0 mul16s::return#4 main::ypos#0 mul16s::return#0 sin16s_gen2::$6 main::$6 main::$10 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:18 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
reg byte x [ memset::c#4 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:14 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ mulu16_sel::select#5 ]
zp[1]:45 [ frame_cnt ]
reg byte alu [ main::$7 ]
zp[2]:24 [ main::x#0 bitmap_plot::x#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 sin16s_gen2::i#2 sin16s_gen2::i#1 ]
reg byte alu [ main::$11 ]
zp[2]:26 [ main::y#0 memset::num#2 memset::end#0 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
reg byte x [ bitmap_plot::y#0 ]
zp[4]:36 [ div32u16u::return#0 sin16s_gen2::step#0 div32u16u::return#1 ]
zp[1]:40 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[2]:16 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sin16s_gen2::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mul16s::a#3 mul16s::a#0 sin16s::return#0 mul16s::$12 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::usinx#0 ]
zp[2]:12 [ bitmap_plot::$1 mul16s::$6 mul16s::$11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 mul16u::b#2 mul16u::b#1 mul16u::b#0 mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
reg byte x [ bitmap_plot::$2 ]
zp[4]:6 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:22 [ sin16s::x1#0 div32u16u::quotient_hi#0 mul16s::$9 ]
zp[2]:10 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
reg byte a [ mul16u::$1 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp[2]:30 [ rem16u#14 ]


FINAL ASSEMBLER
Score: 20488

  // File Comments
// Tests the simple bitmap plotter - and counts plots per frame in an IRQ
// Plots a fullscreen elipsis
/// @file
/// Commodore 64 Registers and Constants
/// @file
/// The MOS 6526 Complex Interface Adapter (CIA)
///
/// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bitmap-plot-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  /// Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  /// $D011 Control Register #1  Bit#5: BMM Turn Bitmap Mode on/off
  .const VICII_BMM = $20
  /// $D011 Control Register #1  Bit#4: DEN Switch VIC-II output on/off
  .const VICII_DEN = $10
  /// $D011 Control Register #1  Bit#3: RSEL Switch betweem 25 or 24 visible rows
  ///          RSEL|  Display window height   | First line  | Last line
  ///          ----+--------------------------+-------------+----------
  ///            0 | 24 text lines/192 pixels |   55 ($37)  | 246 ($f6)
  ///            1 | 25 text lines/200 pixels |   51 ($33)  | 250 ($fa)
  .const VICII_RSEL = 8
  /// VICII IRQ Status/Enable Raster
  // @see #IRQ_ENABLE #IRQ_STATUS
  ///  0 | RST| Reaching a certain raster line. The line is specified by writing
  ///    |    | to register 0xd012 and bit 7 of $d011 and internally stored by
  ///    |    | the VIC for the raster compare. The test for reaching the
  ///    |    | interrupt raster line is done in cycle 0 of every line (for line
  ///    |    | 0, in cycle 1).
  .const IRQ_RASTER = 1
  /// Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  /// RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  /// The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  .const SIZEOF_INT = 2
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  /// $D012 RASTER Raster counter
  .label RASTER = $d012
  /// $D021 Background Color 0
  .label BG_COLOR = $d021
  /// $D011 Control Register #1
  /// - Bit#0-#2: YSCROLL Screen Soft Scroll Vertical
  /// - Bit#3: RSEL Switch betweem 25 or 24 visible rows
  ///          RSEL|  Display window height   | First line  | Last line
  ///          ----+--------------------------+-------------+----------
  ///            0 | 24 text lines/192 pixels |   55 ($37)  | 246 ($f6)
  ///            1 | 25 text lines/200 pixels |   51 ($33)  | 250 ($fa)
  /// - Bit#4: DEN Switch VIC-II output on/off
  /// - Bit#5: BMM Turn Bitmap Mode on/off
  /// - Bit#6: ECM Turn Extended Color Mode on/off
  /// - Bit#7: RST8 9th Bit for $D012 Rasterline counter
  /// Initial Value: %10011011
  .label VICII_CONTROL1 = $d011
  /// $D011 Control Register #1
  /// @see #VICII_CONTROL1
  .label D011 = $d011
  /// $D018 VIC-II base addresses
  // @see #VICII_MEMORY
  .label D018 = $d018
  /// VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  /// VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  /// Processor port data direction register
  .label PROCPORT_DDR = 0
  /// Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  /// The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  /// The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .label BITMAP = $2000
  .label SCREEN = $400
  // Counts frames - updated by the IRQ
  .label frame_cnt = $2d
  // Remainder after unsigned 16-bit division
  .label rem16u = $1e
.segment Code
  // __start
__start: {
    // __start::__init1
    // volatile byte frame_cnt = 1
    // [1] frame_cnt = 1 -- vbuz1=vbuc1 
    lda #1
    sta.z frame_cnt
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main
    // [11] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // irq
// Interrupt Routine counting frames
irq: {
    // interrupt(isr_hardware_clobber_entry) -- isr_hardware_all_entry 
    sta rega+1
    // *BG_COLOR = WHITE
    // [5] *BG_COLOR = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // if(frame_cnt)
    // [6] if(0==frame_cnt) goto irq::@1 -- 0_eq_vbuz1_then_la1 
    lda.z frame_cnt
    beq __b1
    // irq::@2
    // frame_cnt++;
    // [7] frame_cnt = ++ frame_cnt -- vbuz1=_inc_vbuz1 
    inc.z frame_cnt
    // irq::@1
  __b1:
    // *BG_COLOR = BLACK
    // [8] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // *IRQ_STATUS = IRQ_RASTER
    // [9] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // irq::@return
    // }
    // [10] return 
    // interrupt(isr_hardware_clobber_exit) -- isr_hardware_all_exit 
  rega:
    lda #0
    rti
}
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>BITMAP)/4&$f
    .label __6 = 2
    .label __10 = 2
    .label __19 = $1c
    .label __20 = $1c
    .label cos_x = $1c
    .label xpos = 2
    .label x = $18
    .label sin_y = $1c
    .label ypos = 2
    .label y = $1a
    .label idx_x = $2b
    .label idx_y = $29
    .label __21 = $1c
    .label __22 = $1c
    // sin16s_gen2(SINE, 512, -0x1001, 0x1001)
    // [12] call sin16s_gen2
    // [54] phi from main to sin16s_gen2 [phi:main->sin16s_gen2]
    jsr sin16s_gen2
    // [13] phi from main to main::@6 [phi:main->main::@6]
    // main::@6
    // bitmap_init(BITMAP, SCREEN)
    // [14] call bitmap_init
    // [73] phi from main::@6 to bitmap_init [phi:main::@6->bitmap_init]
    jsr bitmap_init
    // [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // bitmap_clear(BLACK, WHITE)
    // [16] call bitmap_clear
    // [95] phi from main::@7 to bitmap_clear [phi:main::@7->bitmap_clear]
    jsr bitmap_clear
    // main::@8
    // *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3
    // [17] *D011 = VICII_BMM|VICII_DEN|VICII_RSEL|3 -- _deref_pbuc1=vbuc2 
    lda #VICII_BMM|VICII_DEN|VICII_RSEL|3
    sta D011
    // [18] phi from main::@8 to main::toD0181 [phi:main::@8->main::toD0181]
    // main::toD0181
    // main::@5
    // *D018 = toD018(SCREEN, BITMAP)
    // [19] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // init_irq()
    // [20] call init_irq
    jsr init_irq
    // [21] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [21] phi main::idx_y#3 = $80 [phi:main::@5->main::@1#0] -- vwuz1=vwuc1 
    lda #<$80
    sta.z idx_y
    lda #>$80
    sta.z idx_y+1
    // [21] phi main::idx_x#3 = 0 [phi:main::@5->main::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z idx_x
    sta.z idx_x+1
    // main::@1
    // main::@2
  __b2:
    // signed word cos_x = SINE[idx_x]
    // [22] main::$19 = main::idx_x#3 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z idx_x
    asl
    sta.z __19
    lda.z idx_x+1
    rol
    sta.z __19+1
    // [23] main::$21 = SINE + main::$19 -- pwsz1=pwsc1_plus_vwuz1 
    lda.z __21
    clc
    adc #<SINE
    sta.z __21
    lda.z __21+1
    adc #>SINE
    sta.z __21+1
    // [24] main::cos_x#0 = *main::$21 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (cos_x),y
    pha
    iny
    lda (cos_x),y
    sta.z cos_x+1
    pla
    sta.z cos_x
    // signed dword xpos = mul16s(160, cos_x)
    // [25] mul16s::b#1 = main::cos_x#0
    // [26] call mul16s
    // [110] phi from main::@2 to mul16s [phi:main::@2->mul16s]
    // [110] phi mul16s::b#3 = mul16s::b#1 [phi:main::@2->mul16s#0] -- register_copy 
    // [110] phi mul16s::a#3 = $a0 [phi:main::@2->mul16s#1] -- vwsz1=vwsc1 
    lda #<$a0
    sta.z mul16s.a
    lda #>$a0
    sta.z mul16s.a+1
    jsr mul16s
    // signed dword xpos = mul16s(160, cos_x)
    // [27] mul16s::return#3 = mul16s::return#1
    // main::@9
    // [28] main::xpos#0 = mul16s::return#3
    // xpos<<4
    // [29] main::$6 = main::xpos#0 << 4 -- vdsz1=vdsz1_rol_4 
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    asl.z __6
    rol.z __6+1
    rol.z __6+2
    rol.z __6+3
    // WORD1(xpos<<4)
    // [30] main::$7 = word1  main::$6
    // word x = (word)(160 + WORD1(xpos<<4))
    // [31] main::x#0 = $a0 + main::$7 -- vwuz1=vwuc1_plus__word1_vdsz2 
    lda #<$a0
    clc
    adc.z __6+2
    sta.z x
    lda #>$a0
    adc.z __6+3
    sta.z x+1
    // signed word sin_y = SINE[idx_y]
    // [32] main::$20 = main::idx_y#3 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z idx_y
    asl
    sta.z __20
    lda.z idx_y+1
    rol
    sta.z __20+1
    // [33] main::$22 = SINE + main::$20 -- pwsz1=pwsc1_plus_vwuz1 
    lda.z __22
    clc
    adc #<SINE
    sta.z __22
    lda.z __22+1
    adc #>SINE
    sta.z __22+1
    // [34] main::sin_y#0 = *main::$22 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sin_y),y
    pha
    iny
    lda (sin_y),y
    sta.z sin_y+1
    pla
    sta.z sin_y
    // signed dword ypos = mul16s(100, sin_y)
    // [35] mul16s::b#2 = main::sin_y#0
    // [36] call mul16s
    // [110] phi from main::@9 to mul16s [phi:main::@9->mul16s]
    // [110] phi mul16s::b#3 = mul16s::b#2 [phi:main::@9->mul16s#0] -- register_copy 
    // [110] phi mul16s::a#3 = $64 [phi:main::@9->mul16s#1] -- vwsz1=vbsc1 
    lda #<$64
    sta.z mul16s.a
    lda #>$64
    sta.z mul16s.a+1
    jsr mul16s
    // signed dword ypos = mul16s(100, sin_y)
    // [37] mul16s::return#4 = mul16s::return#1
    // main::@10
    // [38] main::ypos#0 = mul16s::return#4
    // ypos<<4
    // [39] main::$10 = main::ypos#0 << 4 -- vdsz1=vdsz1_rol_4 
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    asl.z __10
    rol.z __10+1
    rol.z __10+2
    rol.z __10+3
    // WORD1(ypos<<4)
    // [40] main::$11 = word1  main::$10
    // word y = (word)(100 + WORD1(ypos<<4))
    // [41] main::y#0 = $64 + main::$11 -- vwuz1=vwuc1_plus__word1_vdsz2 
    lda #<$64
    clc
    adc.z __10+2
    sta.z y
    lda #>$64
    adc.z __10+3
    sta.z y+1
    // bitmap_plot(x, (byte)y)
    // [42] bitmap_plot::x#0 = main::x#0
    // [43] bitmap_plot::y#0 = (char)main::y#0 -- vbuxx=_byte_vwuz1 
    ldx.z y
    // [44] call bitmap_plot
    jsr bitmap_plot
    // main::@11
    // if(++idx_x==512)
    // [45] main::idx_x#1 = ++ main::idx_x#3 -- vwuz1=_inc_vwuz1 
    inc.z idx_x
    bne !+
    inc.z idx_x+1
  !:
    // [46] if(main::idx_x#1!=$200) goto main::@12 -- vwuz1_neq_vwuc1_then_la1 
    lda.z idx_x+1
    cmp #>$200
    bne __b3
    lda.z idx_x
    cmp #<$200
    bne __b3
    // [48] phi from main::@11 to main::@3 [phi:main::@11->main::@3]
    // [48] phi main::idx_x#10 = 0 [phi:main::@11->main::@3#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z idx_x
    sta.z idx_x+1
    // [47] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // [48] phi from main::@12 to main::@3 [phi:main::@12->main::@3]
    // [48] phi main::idx_x#10 = main::idx_x#1 [phi:main::@12->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // if(++idx_y==512)
    // [49] main::idx_y#1 = ++ main::idx_y#3 -- vwuz1=_inc_vwuz1 
    inc.z idx_y
    bne !+
    inc.z idx_y+1
  !:
    // [50] if(main::idx_y#1!=$200) goto main::@13 -- vwuz1_neq_vwuc1_then_la1 
    lda.z idx_y+1
    cmp #>$200
    bne __b4
    lda.z idx_y
    cmp #<$200
    bne __b4
    // [52] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // [52] phi main::idx_y#10 = 0 [phi:main::@3->main::@4#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z idx_y
    sta.z idx_y+1
    // [51] phi from main::@3 to main::@13 [phi:main::@3->main::@13]
    // main::@13
    // [52] phi from main::@13 to main::@4 [phi:main::@13->main::@4]
    // [52] phi main::idx_y#10 = main::idx_y#1 [phi:main::@13->main::@4#0] -- register_copy 
    // main::@4
  __b4:
    // plots_per_frame[frame_cnt]++;
    // [53] plots_per_frame[frame_cnt] = ++ plots_per_frame[frame_cnt] -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z frame_cnt
    inc plots_per_frame,x
    // [21] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [21] phi main::idx_y#3 = main::idx_y#10 [phi:main::@4->main::@1#0] -- register_copy 
    // [21] phi main::idx_x#3 = main::idx_x#10 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b2
}
  // sin16s_gen2
// Generate signed int sine table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// void sin16s_gen2(__zp($1a) int *sintab, unsigned int wavelength, int min, int max)
sin16s_gen2: {
    .const min = -$1001
    .const max = $1001
    .const ampl = max-min
    .label wavelength = $200
    .label __6 = 2
    .label __8 = $10
    .label step = $24
    .label sintab = $1a
    // u[4.28]
    // Iterate over the table
    .label x = $20
    .label i = $18
    // unsigned long step = div32u16u(PI2_u4f28, wavelength)
    // [55] call div32u16u
  // ampl is always positive so shifting left does not alter the sign
  // u[4.28] step = PI*2/wavelength
    // [134] phi from sin16s_gen2 to div32u16u [phi:sin16s_gen2->div32u16u]
    jsr div32u16u
    // unsigned long step = div32u16u(PI2_u4f28, wavelength)
    // [56] div32u16u::return#0 = div32u16u::return#1
    // sin16s_gen2::@3
    // [57] sin16s_gen2::step#0 = div32u16u::return#0
    // [58] phi from sin16s_gen2::@3 to sin16s_gen2::@1 [phi:sin16s_gen2::@3->sin16s_gen2::@1]
    // [58] phi sin16s_gen2::sintab#2 = SINE [phi:sin16s_gen2::@3->sin16s_gen2::@1#0] -- pwsz1=pwsc1 
    lda #<SINE
    sta.z sintab
    lda #>SINE
    sta.z sintab+1
    // [58] phi sin16s_gen2::x#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [58] phi sin16s_gen2::i#2 = 0 [phi:sin16s_gen2::@3->sin16s_gen2::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // u[4.28]
    // sin16s_gen2::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [59] if(sin16s_gen2::i#2<sin16s_gen2::wavelength#0) goto sin16s_gen2::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<wavelength
    bcc __b2
  !:
    // sin16s_gen2::@return
    // }
    // [60] return 
    rts
    // sin16s_gen2::@2
  __b2:
    // sin16s(x)
    // [61] sin16s::x#0 = sin16s_gen2::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [62] call sin16s
    jsr sin16s
    // [63] sin16s::return#0 = sin16s::return#1
    // sin16s_gen2::@4
    // mul16s(sin16s(x), ampl)
    // [64] mul16s::a#0 = sin16s::return#0
    // [65] call mul16s
    // [110] phi from sin16s_gen2::@4 to mul16s [phi:sin16s_gen2::@4->mul16s]
    // [110] phi mul16s::b#3 = sin16s_gen2::ampl#0 [phi:sin16s_gen2::@4->mul16s#0] -- vwsz1=vwsc1 
    lda #<ampl
    sta.z mul16s.b
    lda #>ampl
    sta.z mul16s.b+1
    // [110] phi mul16s::a#3 = mul16s::a#0 [phi:sin16s_gen2::@4->mul16s#1] -- register_copy 
    jsr mul16s
    // mul16s(sin16s(x), ampl)
    // [66] mul16s::return#0 = mul16s::return#1
    // sin16s_gen2::@5
    // [67] sin16s_gen2::$6 = mul16s::return#0
    // WORD1(mul16s(sin16s(x), ampl))
    // [68] sin16s_gen2::$8 = word1  sin16s_gen2::$6 -- vwuz1=_word1_vdsz2 
    lda.z __6+2
    sta.z __8
    lda.z __6+3
    sta.z __8+1
    // *sintab++ = offs + (signed int)WORD1(mul16s(sin16s(x), ampl))
    // [69] *sin16s_gen2::sintab#2 = (int)sin16s_gen2::$8 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __8
    sta (sintab),y
    iny
    lda.z __8+1
    sta (sintab),y
    // *sintab++ = offs + (signed int)WORD1(mul16s(sin16s(x), ampl));
    // [70] sin16s_gen2::sintab#0 = sin16s_gen2::sintab#2 + SIZEOF_INT -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_INT
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // x = x + step
    // [71] sin16s_gen2::x#1 = sin16s_gen2::x#2 + sin16s_gen2::step#0 -- vduz1=vduz1_plus_vduz2 
    clc
    lda.z x
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // for( unsigned int i=0; i<wavelength; i++)
    // [72] sin16s_gen2::i#1 = ++ sin16s_gen2::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [58] phi from sin16s_gen2::@5 to sin16s_gen2::@1 [phi:sin16s_gen2::@5->sin16s_gen2::@1]
    // [58] phi sin16s_gen2::sintab#2 = sin16s_gen2::sintab#0 [phi:sin16s_gen2::@5->sin16s_gen2::@1#0] -- register_copy 
    // [58] phi sin16s_gen2::x#2 = sin16s_gen2::x#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#1] -- register_copy 
    // [58] phi sin16s_gen2::i#2 = sin16s_gen2::i#1 [phi:sin16s_gen2::@5->sin16s_gen2::@1#2] -- register_copy 
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
// void bitmap_init(char *gfx, char *screen)
bitmap_init: {
    .label __7 = $28
    .label yoffs = $18
    // [74] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [74] phi bitmap_init::x#2 = 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [74] phi bitmap_init::bits#3 = $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    // [74] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [74] phi bitmap_init::x#2 = bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [74] phi bitmap_init::bits#3 = bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // bitmap_plot_bit[x] = bits
    // [75] bitmap_plot_bit[bitmap_init::x#2] = bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // bits >>= 1
    // [76] bitmap_init::bits#1 = bitmap_init::bits#3 >> 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // if(bits==0)
    // [77] if(bitmap_init::bits#1!=0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // [79] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [79] phi bitmap_init::bits#4 = $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    // [78] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [79] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [79] phi bitmap_init::bits#4 = bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [80] bitmap_init::x#1 = ++ bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [81] if(bitmap_init::x#1!=0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [82] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [82] phi bitmap_init::yoffs#2 = BITMAP [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP
    sta.z yoffs
    lda #>BITMAP
    sta.z yoffs+1
    // [82] phi bitmap_init::y#2 = 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [82] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [82] phi bitmap_init::yoffs#2 = bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [82] phi bitmap_init::y#2 = bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [83] bitmap_init::$7 = bitmap_init::y#2 & 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // BYTE0(yoffs)
    // [84] bitmap_init::$4 = byte0  bitmap_init::yoffs#2 -- vbuaa=_byte0_pbuz1 
    lda.z yoffs
    // y&$7 | BYTE0(yoffs)
    // [85] bitmap_init::$5 = bitmap_init::$7 | bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // bitmap_plot_ylo[y] = y&$7 | BYTE0(yoffs)
    // [86] bitmap_plot_ylo[bitmap_init::y#2] = bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // BYTE1(yoffs)
    // [87] bitmap_init::$6 = byte1  bitmap_init::yoffs#2 -- vbuaa=_byte1_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = BYTE1(yoffs)
    // [88] bitmap_plot_yhi[bitmap_init::y#2] = bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [89] if(bitmap_init::$7!=7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [90] bitmap_init::yoffs#1 = bitmap_init::yoffs#2 + (unsigned int)$28*8 -- pbuz1=pbuz1_plus_vwuc1 
    lda.z yoffs
    clc
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [91] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [91] phi bitmap_init::yoffs#4 = bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [92] bitmap_init::y#1 = ++ bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [93] if(bitmap_init::y#1!=0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [94] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
// void bitmap_clear(char bgcol, char fgcol)
bitmap_clear: {
    .const col = WHITE*$10
    // memset(bitmap_screen, col, 1000uw)
    // [96] call memset
    // [184] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
    // [184] phi memset::c#4 = bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [184] phi memset::str#3 = (void *)SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [184] phi memset::num#2 = $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [97] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // bitmap_clear::@1
    // memset(bitmap_gfx, 0, 8000uw)
    // [98] call memset
    // [184] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
    // [184] phi memset::c#4 = 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [184] phi memset::str#3 = (void *)BITMAP [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP
    sta.z memset.str
    lda #>BITMAP
    sta.z memset.str+1
    // [184] phi memset::num#2 = $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    // bitmap_clear::@return
    // }
    // [99] return 
    rts
}
  // init_irq
// Setup the IRQ
init_irq: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [101] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta.z PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [102] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta.z PROCPORT
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [103] *((char *)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // *VICII_CONTROL1 |=$80
    // [104] *VICII_CONTROL1 = *VICII_CONTROL1 | $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VICII_CONTROL1
    sta VICII_CONTROL1
    // *RASTER = $00
    // [105] *RASTER = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [106] *IRQ_ENABLE = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *HARDWARE_IRQ = &irq
    // [107] *HARDWARE_IRQ = &irq -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm
    // asm { cli  }
    cli
    // init_irq::@return
    // }
    // [109] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// __zp(2) long mul16s(__zp($10) int a, __zp($1c) int b)
mul16s: {
    .label __6 = $c
    .label __9 = $16
    .label __11 = $c
    .label __12 = $10
    .label a = $10
    .label return = 2
    .label m = 2
    .label b = $1c
    // unsigned long m = mul16u((unsigned int)a, (unsigned int) b)
    // [111] mul16u::a#2 = (unsigned int)mul16s::a#3 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [112] mul16u::b#1 = (unsigned int)mul16s::b#3 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [113] call mul16u
    // [193] phi from mul16s to mul16u [phi:mul16s->mul16u]
    // [193] phi mul16u::a#6 = mul16u::a#2 [phi:mul16s->mul16u#0] -- register_copy 
    // [193] phi mul16u::b#2 = mul16u::b#1 [phi:mul16s->mul16u#1] -- register_copy 
    jsr mul16u
    // unsigned long m = mul16u((unsigned int)a, (unsigned int) b)
    // [114] mul16u::return#3 = mul16u::res#2
    // mul16s::@5
    // [115] mul16s::m#0 = mul16u::return#3
    // if(a<0)
    // [116] if(mul16s::a#3>=0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1
    // mul16s::@3
    // WORD1(m)
    // [117] mul16s::$6 = word1  mul16s::m#0 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // WORD1(m) = WORD1(m)-(unsigned int)b
    // [118] mul16s::$11 = mul16s::$6 - (unsigned int)mul16s::b#3 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [119] mul16s::m#1 = mul16s::m#0 word1= mul16s::$11 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [120] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
    // [120] phi mul16s::m#5 = mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    // mul16s::@1
  __b1:
    // if(b<0)
    // [121] if(mul16s::b#3>=0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2
    // mul16s::@4
    // WORD1(m)
    // [122] mul16s::$9 = word1  mul16s::m#5 -- vwuz1=_word1_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // WORD1(m) = WORD1(m)-(unsigned int)a
    // [123] mul16s::$12 = mul16s::$9 - (unsigned int)mul16s::a#3 -- vwuz1=vwuz2_minus_vwuz1 
    lda.z __9
    sec
    sbc.z __12
    sta.z __12
    lda.z __9+1
    sbc.z __12+1
    sta.z __12+1
    // [124] mul16s::m#2 = mul16s::m#5 word1= mul16s::$12 -- vduz1=vduz1_setword1_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [125] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
    // [125] phi mul16s::m#4 = mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    // mul16s::@2
  __b2:
    // return (signed long)m;
    // [126] mul16s::return#1 = (long)mul16s::m#4
    // mul16s::@return
    // }
    // [127] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// void bitmap_plot(__zp($18) unsigned int x, __register(X) char y)
bitmap_plot: {
    .label __1 = $c
    .label plotter = $10
    .label x = $18
    // MAKEWORD( bitmap_plot_yhi[y], bitmap_plot_ylo[y] )
    // [128] bitmap_plot::plotter#0 = bitmap_plot_yhi[bitmap_plot::y#0] w= bitmap_plot_ylo[bitmap_plot::y#0] -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_yhi,x
    sta.z plotter+1
    lda bitmap_plot_ylo,x
    sta.z plotter
    // x & $fff8
    // [129] bitmap_plot::$1 = bitmap_plot::x#0 & $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __1
    lda.z x+1
    and #>$fff8
    sta.z __1+1
    // plotter += ( x & $fff8 )
    // [130] bitmap_plot::plotter#1 = (char *)bitmap_plot::plotter#0 + bitmap_plot::$1 -- pbuz1=pbuz1_plus_vwuz2 
    clc
    lda.z plotter
    adc.z __1
    sta.z plotter
    lda.z plotter+1
    adc.z __1+1
    sta.z plotter+1
    // BYTE0(x)
    // [131] bitmap_plot::$2 = byte0  bitmap_plot::x#0 -- vbuxx=_byte0_vwuz1 
    ldx.z x
    // *plotter |= bitmap_plot_bit[BYTE0(x)]
    // [132] *bitmap_plot::plotter#1 = *bitmap_plot::plotter#1 | bitmap_plot_bit[bitmap_plot::$2] -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [133] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
// __zp($24) unsigned long div32u16u(unsigned long dividend, unsigned int divisor)
div32u16u: {
    .label return = $24
    .label quotient_hi = $16
    .label quotient_lo = $e
    // unsigned int quotient_hi = divr16u(WORD1(dividend), divisor, 0)
    // [135] call divr16u
    // [204] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
    // [204] phi divr16u::dividend#5 = word1 PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [204] phi divr16u::rem#10 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // unsigned int quotient_hi = divr16u(WORD1(dividend), divisor, 0)
    // [136] divr16u::return#2 = divr16u::return#0
    // div32u16u::@1
    // [137] div32u16u::quotient_hi#0 = divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // unsigned int quotient_lo = divr16u(WORD0(dividend), divisor, rem16u)
    // [138] divr16u::rem#4 = rem16u#14 -- vwuz1=vwuz2 
    lda.z rem16u
    sta.z divr16u.rem
    lda.z rem16u+1
    sta.z divr16u.rem+1
    // [139] call divr16u
    // [204] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
    // [204] phi divr16u::dividend#5 = word0 PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [204] phi divr16u::rem#10 = divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // unsigned int quotient_lo = divr16u(WORD0(dividend), divisor, rem16u)
    // [140] divr16u::return#3 = divr16u::return#0
    // div32u16u::@2
    // [141] div32u16u::quotient_lo#0 = divr16u::return#3
    // unsigned long quotient = MAKELONG( quotient_hi, quotient_lo )
    // [142] div32u16u::return#1 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    // div32u16u::@return
    // }
    // [143] return 
    rts
}
  // sin16s
// Calculate signed int sine sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// __zp($10) int sin16s(__zp($12) unsigned long x)
sin16s: {
    .label __4 = 6
    .label x = $12
    .label return = $10
    .label x1 = $16
    .label x2 = $e
    .label x3 = $e
    .label x3_6 = $a
    .label usinx = $10
    .label x4 = $e
    .label x5 = $a
    .label x5_128 = $a
    .label sinx = $10
    // if(x >= PI_u4f28 )
    // [144] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b4
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b4
  !:
    // sin16s::@4
    // x = x - PI_u4f28
    // [145] sin16s::x#1 = sin16s::x#0 - PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [146] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
    // [146] phi sin16s::isUpper#2 = 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [146] phi sin16s::x#4 = sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [146] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b4:
    // [146] phi sin16s::isUpper#2 = 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [146] phi sin16s::x#4 = sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    // sin16s::@1
  __b1:
    // if(x >= PI_HALF_u4f28 )
    // [147] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2
  !:
    // sin16s::@5
    // x = PI_u4f28 - x
    // [148] sin16s::x#2 = PI_u4f28 - sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [149] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
    // [149] phi sin16s::x#6 = sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    // sin16s::@2
  __b2:
    // x<<3
    // [150] sin16s::$4 = sin16s::x#6 << 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // unsigned int x1 = WORD1(x<<3)
    // [151] sin16s::x1#0 = word1  sin16s::$4 -- vwuz1=_word1_vduz2 
    // sinx = x - x^3/6 + x5/128;
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // unsigned int x2 = mulu16_sel(x1, x1, 0)
    // [152] mulu16_sel::v1#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [153] mulu16_sel::v2#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [154] call mulu16_sel
  // u[1.15]
    // [222] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
    // [222] phi mulu16_sel::select#5 = 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // unsigned int x2 = mulu16_sel(x1, x1, 0)
    // [155] mulu16_sel::return#0 = mulu16_sel::return#12
    // sin16s::@7
    // [156] sin16s::x2#0 = mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // unsigned int x3 = mulu16_sel(x2, x1, 1)
    // [157] mulu16_sel::v1#1 = sin16s::x2#0
    // [158] mulu16_sel::v2#1 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [159] call mulu16_sel
  // u[2.14] x^2
    // [222] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
    // [222] phi mulu16_sel::select#5 = 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // unsigned int x3 = mulu16_sel(x2, x1, 1)
    // [160] mulu16_sel::return#1 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@8
    // [161] sin16s::x3#0 = mulu16_sel::return#1
    // unsigned int x3_6 = mulu16_sel(x3, $10000/6, 1)
    // [162] mulu16_sel::v1#2 = sin16s::x3#0
    // [163] call mulu16_sel
  // u[2.14] x^3
    // [222] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
    // [222] phi mulu16_sel::select#5 = 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [222] phi mulu16_sel::v2#5 = (unsigned int)$10000/6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // unsigned int x3_6 = mulu16_sel(x3, $10000/6, 1)
    // [164] mulu16_sel::return#2 = mulu16_sel::return#12
    // sin16s::@9
    // [165] sin16s::x3_6#0 = mulu16_sel::return#2
    // unsigned int usinx = x1 - x3_6
    // [166] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    // u[1.15] x^3/6;
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // unsigned int x4 = mulu16_sel(x3, x1, 0)
    // [167] mulu16_sel::v1#3 = sin16s::x3#0
    // [168] mulu16_sel::v2#3 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [169] call mulu16_sel
  // u[1.15] x - x^3/6
    // [222] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
    // [222] phi mulu16_sel::select#5 = 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // unsigned int x4 = mulu16_sel(x3, x1, 0)
    // [170] mulu16_sel::return#10 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@10
    // [171] sin16s::x4#0 = mulu16_sel::return#10
    // unsigned int x5 = mulu16_sel(x4, x1, 0)
    // [172] mulu16_sel::v1#4 = sin16s::x4#0
    // [173] mulu16_sel::v2#4 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [174] call mulu16_sel
  // u[3.13] x^4
    // [222] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
    // [222] phi mulu16_sel::select#5 = 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [222] phi mulu16_sel::v2#5 = mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [222] phi mulu16_sel::v1#5 = mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // unsigned int x5 = mulu16_sel(x4, x1, 0)
    // [175] mulu16_sel::return#11 = mulu16_sel::return#12
    // sin16s::@11
    // [176] sin16s::x5#0 = mulu16_sel::return#11
    // unsigned int x5_128 = x5>>4
    // [177] sin16s::x5_128#0 = sin16s::x5#0 >> 4 -- vwuz1=vwuz1_ror_4 
    // u[4.12] x^5
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // usinx = usinx + x5_128
    // [178] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z usinx
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // if(isUpper!=0)
    // [179] if(sin16s::isUpper#2==0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b3
    // sin16s::@6
    // sinx = -(signed int)usinx
    // [180] sin16s::sinx#1 = - (int)sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    lda #0
    sec
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [181] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
    // [181] phi sin16s::return#1 = sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    // sin16s::@3
  __b3:
    // sin16s::@return
    // }
    // [182] return 
    rts
    // sin16s::@12
    // [183] sin16s::return#5 = (int)sin16s::usinx#1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(__zp($10) void *str, __register(X) char c, __zp($1a) unsigned int num)
memset: {
    .label end = $1a
    .label dst = $10
    .label num = $1a
    .label str = $10
    // if(num>0)
    // [185] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // char* end = (char*)str + num
    // [186] memset::end#0 = (char *)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    clc
    lda.z end
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [187] memset::dst#4 = (char *)memset::str#3
    // [188] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [188] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [189] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [190] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [191] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [192] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// __zp(2) unsigned long mul16u(__zp($a) unsigned int a, __zp($c) unsigned int b)
mul16u: {
    .label a = $a
    .label b = $c
    .label return = 2
    .label mb = 6
    .label res = 2
    // unsigned long mb = b
    // [194] mul16u::mb#0 = (unsigned long)mul16u::b#2 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [195] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [195] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [195] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [195] phi mul16u::a#3 = mul16u::a#6 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [196] if(mul16u::a#3!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [197] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [198] mul16u::$1 = mul16u::a#3 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [199] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [200] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [201] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [201] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [202] mul16u::a#1 = mul16u::a#3 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [203] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [195] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [195] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [195] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [195] phi mul16u::a#3 = mul16u::a#1 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// __zp($e) unsigned int divr16u(__zp($a) unsigned int dividend, unsigned int divisor, __zp($c) unsigned int rem)
divr16u: {
    .label rem = $c
    .label dividend = $a
    .label quotient = $e
    .label return = $e
    // [205] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [205] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [205] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [205] phi divr16u::dividend#3 = divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [205] phi divr16u::rem#5 = divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    // [205] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [205] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [205] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [205] phi divr16u::dividend#3 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [205] phi divr16u::rem#5 = divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [206] divr16u::rem#0 = divr16u::rem#5 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // BYTE1(dividend)
    // [207] divr16u::$1 = byte1  divr16u::dividend#3 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // BYTE1(dividend) & $80
    // [208] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (BYTE1(dividend) & $80) != 0 )
    // [209] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [210] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [211] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [211] phi divr16u::rem#6 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [212] divr16u::dividend#0 = divr16u::dividend#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [213] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [214] if(divr16u::rem#6<sin16s_gen2::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>sin16s_gen2.wavelength
    bcc __b3
    bne !+
    lda.z rem
    cmp #<sin16s_gen2.wavelength
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [215] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [216] divr16u::rem#2 = divr16u::rem#6 - sin16s_gen2::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<sin16s_gen2.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>sin16s_gen2.wavelength
    sta.z rem+1
    // [217] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [217] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [217] phi divr16u::rem#11 = divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [218] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [219] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [220] rem16u#14 = divr16u::rem#11 -- vwuz1=vwuz2 
    lda.z rem
    sta.z rem16u
    lda.z rem+1
    sta.z rem16u+1
    // divr16u::@return
    // }
    // [221] return 
    rts
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// __zp($a) unsigned int mulu16_sel(__zp($e) unsigned int v1, __zp($c) unsigned int v2, __register(X) char select)
mulu16_sel: {
    .label __0 = 2
    .label __1 = 2
    .label v1 = $e
    .label v2 = $c
    .label return = $a
    .label return_1 = $e
    // mul16u(v1, v2)
    // [223] mul16u::a#0 = mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [224] mul16u::b#0 = mulu16_sel::v2#5
    // [225] call mul16u
    // [193] phi from mulu16_sel to mul16u [phi:mulu16_sel->mul16u]
    // [193] phi mul16u::a#6 = mul16u::a#0 [phi:mulu16_sel->mul16u#0] -- register_copy 
    // [193] phi mul16u::b#2 = mul16u::b#0 [phi:mulu16_sel->mul16u#1] -- register_copy 
    jsr mul16u
    // mul16u(v1, v2)
    // [226] mul16u::return#0 = mul16u::res#2
    // mulu16_sel::@1
    // [227] mulu16_sel::$0 = mul16u::return#0
    // mul16u(v1, v2)<<select
    // [228] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // WORD1(mul16u(v1, v2)<<select)
    // [229] mulu16_sel::return#12 = word1  mulu16_sel::$1 -- vwuz1=_word1_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    // mulu16_sel::@return
    // }
    // [230] return 
    rts
}
  // File Data
.segment Data
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  plots_per_frame: .fill $100, 0
  .align $100
  SINE: .fill 2*$200, 0

