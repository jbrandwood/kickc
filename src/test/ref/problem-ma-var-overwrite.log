Setting inferred volatile on symbol affected by address-of: test::dst in asm { ldy#0 lda#1 sta(dst),y  }
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void test(byte* test::videoMem , byte* test::colorMem , byte* test::other)
test: scope:[test]  from main
  test::other#1 = phi( main/test::other#0 )
  test::videoMem#1 = phi( main/test::videoMem#0 )
  test::colorMem#1 = phi( main/test::colorMem#0 )
  test::diff#0 = (byte*) 0
  test::dst = (byte*) 0
  test::$0 = test::colorMem#1 - test::videoMem#1
  test::diff#1 = ((byte*)) test::$0
  test::$2 = (word)test::diff#1
  test::$1 = test::other#1 + test::$2
  test::dst = test::$1
  test::dst[0] = 1
  asm { ldy#0 lda#1 sta(dst),y  }
  to:test::@return
test::@return: scope:[test]  from test
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  test::videoMem#0 = h1
  test::colorMem#0 = (byte*)$d800
  test::other#0 = (byte*)$c000
  call test 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  h1 = (byte*) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
volatile byte* h1 loadstore
void main()
void test(byte* test::videoMem , byte* test::colorMem , byte* test::other)
word~ test::$0
byte*~ test::$1
word~ test::$2
byte* test::colorMem
byte* test::colorMem#0
byte* test::colorMem#1
byte* test::diff
byte* test::diff#0
byte* test::diff#1
volatile byte* test::dst loadstore
byte* test::other
byte* test::other#0
byte* test::other#1
byte* test::videoMem
byte* test::videoMem#0
byte* test::videoMem#1

Adding number conversion cast (unumber) 1 in test::dst[0] = 1
Adding number conversion cast (unumber) 0 in test::dst[0] = ((unumber)) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast test::diff#1 = (byte*)test::$0
Inlining cast test::dst[(unumber)0] = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 49152
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)test::dst = test::$1 
Identical Phi Values test::colorMem#1 test::colorMem#0
Identical Phi Values test::videoMem#1 test::videoMem#0
Identical Phi Values test::other#1 test::other#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant test::diff#0 = (byte*) 0
Constant test::colorMem#0 = (byte*) 55296
Constant test::other#0 = (byte*) 49152
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero test::dst in [8] test::dst[0] = 1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant test::diff#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)test::dst = test::$1 
Inlining Noop Cast [2] test::diff#1 = (byte*)test::$0 keeping test::diff#1
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [3] test::$2 = (word)(byte*)test::diff#1 keeping (byte*)test::diff#1
Successful SSA optimization Pass2NopCastInlining
Alias candidate removed (volatile)test::dst = test::$1 
Alias candidate removed (volatile)test::dst = test::$1 
Alias candidate removed (volatile)test::dst = test::$1 
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to test:7 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@1
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] h1 = (byte*) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [5] test::videoMem#0 = h1
  [6] call test 
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return

void test(byte* test::videoMem , byte* test::colorMem , byte* test::other)
test: scope:[test]  from main
  [8] test::dst = (byte*) 0
  [9] test::diff#1 = test::colorMem#0 - test::videoMem#0
  [10] test::$1 = test::other#0 + (word)(byte*)test::diff#1
  [11] test::dst = test::$1
  [12] *test::dst = 1
  asm { ldy#0 lda#1 sta(dst),y  }
  to:test::@return
test::@return: scope:[test]  from test
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
volatile byte* h1 loadstore 6.5
void main()
void test(byte* test::videoMem , byte* test::colorMem , byte* test::other)
byte*~ test::$1 202.0
byte* test::colorMem
byte* test::diff
word test::diff#1 101.0
volatile byte* test::dst loadstore 151.5
byte* test::other
byte* test::videoMem
byte* test::videoMem#0 56.0

Initial phi equivalence classes
Added variable h1 to live range equivalence class [ h1 ]
Added variable test::videoMem#0 to live range equivalence class [ test::videoMem#0 ]
Added variable test::dst to live range equivalence class [ test::dst ]
Added variable test::diff#1 to live range equivalence class [ test::diff#1 ]
Added variable test::$1 to live range equivalence class [ test::$1 ]
Complete equivalence classes
[ h1 ]
[ test::videoMem#0 ]
[ test::dst ]
[ test::diff#1 ]
[ test::$1 ]
Allocated zp[2]:2 [ h1 ]
Allocated zp[2]:4 [ test::videoMem#0 ]
Allocated zp[2]:6 [ test::dst ]
Allocated zp[2]:8 [ test::diff#1 ]
Allocated zp[2]:10 [ test::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] h1 = (byte*) 0 [ h1 ] (  [ h1 ] { }  ) always clobbers reg byte a 
Statement [5] test::videoMem#0 = h1 [ test::videoMem#0 ] ( main:3 [ test::videoMem#0 ] { { test::videoMem#0 = h1 } }  ) always clobbers reg byte a 
Statement [8] test::dst = (byte*) 0 [ test::videoMem#0 ] ( main:3::test:6 [ test::videoMem#0 ] { { test::videoMem#0 = h1 } }  ) always clobbers reg byte a 
Statement [9] test::diff#1 = test::colorMem#0 - test::videoMem#0 [ test::diff#1 ] ( main:3::test:6 [ test::diff#1 ] { { test::videoMem#0 = h1 } }  ) always clobbers reg byte a 
Statement [10] test::$1 = test::other#0 + (word)(byte*)test::diff#1 [ test::$1 ] ( main:3::test:6 [ test::$1 ] { { test::videoMem#0 = h1 } }  ) always clobbers reg byte a 
Statement [11] test::dst = test::$1 [ test::dst ] ( main:3::test:6 [ test::dst ] { { test::videoMem#0 = h1 } }  ) always clobbers reg byte a 
Statement [12] *test::dst = 1 [ test::dst ] ( main:3::test:6 [ test::dst ] { { test::videoMem#0 = h1 } }  ) always clobbers reg byte a reg byte y 
Statement asm { ldy#0 lda#1 sta(dst),y  } always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ h1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ test::videoMem#0 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ test::dst ] : zp[2]:6 , 
Potential registers zp[2]:8 [ test::diff#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ test::$1 ] : zp[2]:10 , 

REGISTER UPLIFT SCOPES
Uplift Scope [test] 202: zp[2]:10 [ test::$1 ] 151.5: zp[2]:6 [ test::dst ] 101: zp[2]:8 [ test::diff#1 ] 56: zp[2]:4 [ test::videoMem#0 ] 
Uplift Scope [] 6.5: zp[2]:2 [ h1 ] 
Uplift Scope [main] 
Uplift Scope [__start] 

Uplifting [test] best 172 combination zp[2]:10 [ test::$1 ] zp[2]:6 [ test::dst ] zp[2]:8 [ test::diff#1 ] zp[2]:4 [ test::videoMem#0 ] 
Uplifting [] best 172 combination zp[2]:2 [ h1 ] 
Uplifting [main] best 172 combination 
Uplifting [__start] best 172 combination 
Coalescing zero page register [ zp[2]:4 [ test::videoMem#0 ] ] with [ zp[2]:8 [ test::diff#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ test::videoMem#0 test::diff#1 ] ] with [ zp[2]:10 [ test::$1 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates that a local __ma variable overwrites a parameterÂ§
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label h1 = 2
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] h1 = (byte*) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z h1
    lda #>0
    sta.z h1+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [5] test::videoMem#0 = h1 -- pbuz1=pbuz2 
    lda.z h1
    sta.z test.videoMem
    lda.z h1+1
    sta.z test.videoMem+1
    // [6] call test 
    jsr test
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // test
// This must be volatile because is used in an interrupt routine...
// test(byte* zp(4) videoMem)
test: {
    .label colorMem = $d800
    .label other = $c000
    .label dst = 6
    .label __1 = 4
    .label diff = 4
    .label videoMem = 4
    // [8] test::dst = (byte*) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z dst
    lda #>0
    sta.z dst+1
    // [9] test::diff#1 = test::colorMem#0 - test::videoMem#0 -- vwuz1=pbuc1_minus_pbuz1 
    sec
    lda #<colorMem
    sbc.z diff
    sta.z diff
    lda #>colorMem
    sbc.z diff+1
    sta.z diff+1
    // [10] test::$1 = test::other#0 + (word)(byte*)test::diff#1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<other
    sta.z __1
    lda.z __1+1
    adc #>other
    sta.z __1+1
    // [11] test::dst = test::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z dst
    lda.z __1+1
    sta.z dst+1
    // [12] *test::dst = 1 -- _deref_pbuz1=vbuc1 
    lda #1
    ldy #0
    sta (dst),y
    // asm { ldy#0 lda#1 sta(dst),y  }
    ldy #0
    lda #1
    sta (dst),y
    jmp __breturn
    // test::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction ldy #0
Removing instruction lda #1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void __start()
volatile byte* h1 loadstore zp[2]:2 6.5
void main()
void test(byte* test::videoMem , byte* test::colorMem , byte* test::other)
byte*~ test::$1 zp[2]:4 202.0
byte* test::colorMem
const byte* test::colorMem#0 colorMem = (byte*) 55296
byte* test::diff
word test::diff#1 diff zp[2]:4 101.0
volatile byte* test::dst loadstore zp[2]:6 151.5
byte* test::other
const byte* test::other#0 other = (byte*) 49152
byte* test::videoMem
byte* test::videoMem#0 videoMem zp[2]:4 56.0

zp[2]:2 [ h1 ]
zp[2]:4 [ test::videoMem#0 test::diff#1 test::$1 ]
zp[2]:6 [ test::dst ]


FINAL ASSEMBLER
Score: 122

  // File Comments
// Demonstrates that a local __ma variable overwrites a parameterÂ§
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label h1 = 2
  // __start
__start: {
    // __start::__init1
    // h1
    // [1] h1 = (byte*) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z h1
    sta.z h1+1
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    // test(h1, 0xD800, 0xC000)
    // [5] test::videoMem#0 = h1 -- pbuz1=pbuz2 
    lda.z h1
    sta.z test.videoMem
    lda.z h1+1
    sta.z test.videoMem+1
    // [6] call test 
    jsr test
    // main::@return
    // }
    // [7] return 
    rts
}
  // test
// This must be volatile because is used in an interrupt routine...
// test(byte* zp(4) videoMem)
test: {
    .label colorMem = $d800
    .label other = $c000
    .label dst = 6
    .label __1 = 4
    .label diff = 4
    .label videoMem = 4
    // dst
    // [8] test::dst = (byte*) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z dst
    sta.z dst+1
    // colorMem - videoMem
    // [9] test::diff#1 = test::colorMem#0 - test::videoMem#0 -- vwuz1=pbuc1_minus_pbuz1 
    sec
    lda #<colorMem
    sbc.z diff
    sta.z diff
    lda #>colorMem
    sbc.z diff+1
    sta.z diff+1
    // other + ((unsigned int)diff)
    // [10] test::$1 = test::other#0 + (word)(byte*)test::diff#1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<other
    sta.z __1
    lda.z __1+1
    adc #>other
    sta.z __1+1
    // dst = other + ((unsigned int)diff)
    // [11] test::dst = test::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z dst
    lda.z __1+1
    sta.z dst+1
    // dst[0] = 1
    // [12] *test::dst = 1 -- _deref_pbuz1=vbuc1 
    lda #1
    ldy #0
    sta (dst),y
    // asm
    // asm { ldy#0 lda#1 sta(dst),y  }
    sta (dst),y
    // test::@return
    // }
    // [14] return 
    rts
}
  // File Data

