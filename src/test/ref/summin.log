
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) screen#4 ← phi( @2/(byte*) screen#5 )
  (byte) sum::a#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) sum::b#0 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  call sum 
  (byte) sum::return#0 ← (byte) sum::return#4
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#3 ← phi( main/(byte*) screen#4 )
  (byte) sum::return#5 ← phi( main/(byte) sum::return#0 )
  (byte~) main::$0 ← (byte) sum::return#5
  (byte) main::s1#0 ← (byte~) main::$0
  (byte) sum::a#1 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) sum::b#1 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  call sum 
  (byte) sum::return#1 ← (byte) sum::return#4
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#2 ← phi( main::@1/(byte*) screen#3 )
  (byte) main::s1#2 ← phi( main::@1/(byte) main::s1#0 )
  (byte) sum::return#6 ← phi( main::@1/(byte) sum::return#1 )
  (byte~) main::$1 ← (byte) sum::return#6
  (byte) main::s2#0 ← (byte~) main::$1
  (byte) sum::a#2 ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) sum::b#2 ← (byte/signed byte/word/signed word/dword/signed dword) 13
  call sum 
  (byte) sum::return#2 ← (byte) sum::return#4
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) screen#1 ← phi( main::@2/(byte*) screen#2 )
  (byte) main::s2#1 ← phi( main::@2/(byte) main::s2#0 )
  (byte) main::s1#1 ← phi( main::@2/(byte) main::s1#2 )
  (byte) sum::return#7 ← phi( main::@2/(byte) sum::return#2 )
  (byte~) main::$2 ← (byte) sum::return#7
  (byte) main::s3#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1#1 + (byte) main::s2#1
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3#0
  (byte) main::s4#0 ← (byte~) main::$4
  *((byte*) screen#1) ← (byte) main::s4#0
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 main::@2/(byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 main::@2/(byte) sum::a#2 )
  (byte~) sum::$0 ← (byte) sum::a#3 + (byte) sum::b#3
  (byte) sum::return#3 ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#8 ← phi( sum/(byte) sum::return#3 )
  (byte) sum::return#4 ← (byte) sum::return#8
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) screen#5 ← phi( @begin/(byte*) screen#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::s1
(byte) main::s1#0
(byte) main::s1#1
(byte) main::s1#2
(byte) main::s2
(byte) main::s2#0
(byte) main::s2#1
(byte) main::s3
(byte) main::s3#0
(byte) main::s4
(byte) main::s4#0
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#2
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte~) sum::$0
(label) sum::@return
(byte) sum::a
(byte) sum::a#0
(byte) sum::a#1
(byte) sum::a#2
(byte) sum::a#3
(byte) sum::b
(byte) sum::b#0
(byte) sum::b#1
(byte) sum::b#2
(byte) sum::b#3
(byte) sum::return
(byte) sum::return#0
(byte) sum::return#1
(byte) sum::return#2
(byte) sum::return#3
(byte) sum::return#4
(byte) sum::return#5
(byte) sum::return#6
(byte) sum::return#7
(byte) sum::return#8

Culled Empty Block (label) @3
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) sum::return#0 = (byte) sum::return#5 
Alias (byte*) screen#1 = (byte*) screen#3 (byte*) screen#4 (byte*) screen#2 
Alias (byte) main::s1#0 = (byte~) main::$0 (byte) main::s1#2 (byte) main::s1#1 
Alias (byte) sum::return#1 = (byte) sum::return#6 
Alias (byte) main::s2#0 = (byte~) main::$1 (byte) main::s2#1 
Alias (byte) sum::return#2 = (byte) sum::return#7 
Alias (byte) main::s3#0 = (byte~) main::$2 
Alias (byte) main::s4#0 = (byte~) main::$4 
Alias (byte) sum::return#3 = (byte~) sum::$0 (byte) sum::return#8 (byte) sum::return#4 
Alias (byte*) screen#0 = (byte*) screen#5 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte*) screen#1 (byte*) screen#0
Successful SSA optimization Pass2RedundantPhiElimination
Constant (const byte*) screen#0 = ((byte*))1024
Constant (const byte) sum::a#0 = 1
Constant (const byte) sum::b#0 = 2
Constant (const byte) sum::a#1 = 3
Constant (const byte) sum::b#1 = 4
Constant (const byte) sum::a#2 = 9
Constant (const byte) sum::b#2 = 13
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) sum::a#0
Inlining constant with var siblings (const byte) sum::b#0
Inlining constant with var siblings (const byte) sum::a#1
Inlining constant with var siblings (const byte) sum::b#1
Inlining constant with var siblings (const byte) sum::a#2
Inlining constant with var siblings (const byte) sum::b#2
Constant inlined sum::b#1 = (byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined sum::a#2 = (byte/signed byte/word/signed word/dword/signed dword) 9
Constant inlined sum::b#0 = (byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined sum::a#1 = (byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined sum::b#2 = (byte/signed byte/word/signed word/dword/signed dword) 13
Constant inlined sum::a#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to sum:5 sum:8 sum:11 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@2
@2: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @2
  [3] phi()
main: scope:[main]  from @2
  [4] phi()
  [5] call sum 
  [6] (byte) sum::return#0 ← (byte) sum::return#3
  to:main::@1
main::@1: scope:[main]  from main
  [7] (byte) main::s1#0 ← (byte) sum::return#0
  [8] call sum 
  [9] (byte) sum::return#1 ← (byte) sum::return#3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] (byte) main::s2#0 ← (byte) sum::return#1
  [11] call sum 
  [12] (byte) sum::return#2 ← (byte) sum::return#3
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] (byte) main::s3#0 ← (byte) sum::return#2
  [14] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0
  [15] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0
  [16] *((const byte*) screen#0) ← (byte) main::s4#0
  to:main::@return
main::@return: scope:[main]  from main::@3
  [17] return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  [18] (byte) sum::b#3 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 2 main::@1/(byte/signed byte/word/signed word/dword/signed dword) 4 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 13 )
  [18] (byte) sum::a#3 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 1 main::@1/(byte/signed byte/word/signed word/dword/signed dword) 3 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 9 )
  [19] (byte) sum::return#3 ← (byte) sum::a#3 + (byte) sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$3 4.0
(byte) main::s1
(byte) main::s1#0 0.5714285714285714
(byte) main::s2
(byte) main::s2#0 1.0
(byte) main::s3
(byte) main::s3#0 2.0
(byte) main::s4
(byte) main::s4#0 4.0
(byte*) screen
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte) sum::a
(byte) sum::a#3 2.0
(byte) sum::b
(byte) sum::b#3 2.0
(byte) sum::return
(byte) sum::return#0 4.0
(byte) sum::return#1 4.0
(byte) sum::return#2 4.0
(byte) sum::return#3 1.6

Initial phi equivalence classes
[ sum::a#3 ]
[ sum::b#3 ]
Added variable sum::return#0 to zero page equivalence class [ sum::return#0 ]
Added variable main::s1#0 to zero page equivalence class [ main::s1#0 ]
Added variable sum::return#1 to zero page equivalence class [ sum::return#1 ]
Added variable main::s2#0 to zero page equivalence class [ main::s2#0 ]
Added variable sum::return#2 to zero page equivalence class [ sum::return#2 ]
Added variable main::s3#0 to zero page equivalence class [ main::s3#0 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::s4#0 to zero page equivalence class [ main::s4#0 ]
Added variable sum::return#3 to zero page equivalence class [ sum::return#3 ]
Complete equivalence classes
[ sum::a#3 ]
[ sum::b#3 ]
[ sum::return#0 ]
[ main::s1#0 ]
[ sum::return#1 ]
[ main::s2#0 ]
[ sum::return#2 ]
[ main::s3#0 ]
[ main::$3 ]
[ main::s4#0 ]
[ sum::return#3 ]
Allocated zp ZP_BYTE:2 [ sum::a#3 ]
Allocated zp ZP_BYTE:3 [ sum::b#3 ]
Allocated zp ZP_BYTE:4 [ sum::return#0 ]
Allocated zp ZP_BYTE:5 [ main::s1#0 ]
Allocated zp ZP_BYTE:6 [ sum::return#1 ]
Allocated zp ZP_BYTE:7 [ main::s2#0 ]
Allocated zp ZP_BYTE:8 [ sum::return#2 ]
Allocated zp ZP_BYTE:9 [ main::s3#0 ]
Allocated zp ZP_BYTE:10 [ main::$3 ]
Allocated zp ZP_BYTE:11 [ main::s4#0 ]
Allocated zp ZP_BYTE:12 [ sum::return#3 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label screen = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG5 @2
b2:
//SEG6 [2] call main 
//SEG7 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG8 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _3 = $a
    .label s1 = 5
    .label s2 = 7
    .label s3 = 9
    .label s4 = $b
  //SEG11 [5] call sum 
  //SEG12 [18] phi from main to sum [phi:main->sum]
  sum_from_main:
  //SEG13 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main->sum#0] -- vbuz1=vbuc1 
    lda #2
    sta sum.b
  //SEG14 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main->sum#1] -- vbuz1=vbuc1 
    lda #1
    sta sum.a
    jsr sum
  //SEG15 [6] (byte) sum::return#0 ← (byte) sum::return#3 -- vbuz1=vbuz2 
    lda sum.return_3
    sta sum.return
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte) main::s1#0 ← (byte) sum::return#0 -- vbuz1=vbuz2 
    lda sum.return
    sta s1
  //SEG18 [8] call sum 
  //SEG19 [18] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
  //SEG20 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 4 [phi:main::@1->sum#0] -- vbuz1=vbuc1 
    lda #4
    sta sum.b
  //SEG21 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@1->sum#1] -- vbuz1=vbuc1 
    lda #3
    sta sum.a
    jsr sum
  //SEG22 [9] (byte) sum::return#1 ← (byte) sum::return#3 -- vbuz1=vbuz2 
    lda sum.return_3
    sta sum.return_1
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [10] (byte) main::s2#0 ← (byte) sum::return#1 -- vbuz1=vbuz2 
    lda sum.return_1
    sta s2
  //SEG25 [11] call sum 
  //SEG26 [18] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
  //SEG27 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 13 [phi:main::@2->sum#0] -- vbuz1=vbuc1 
    lda #$d
    sta sum.b
  //SEG28 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 9 [phi:main::@2->sum#1] -- vbuz1=vbuc1 
    lda #9
    sta sum.a
    jsr sum
  //SEG29 [12] (byte) sum::return#2 ← (byte) sum::return#3 -- vbuz1=vbuz2 
    lda sum.return_3
    sta sum.return_2
    jmp b3
  //SEG30 main::@3
  b3:
  //SEG31 [13] (byte) main::s3#0 ← (byte) sum::return#2 -- vbuz1=vbuz2 
    lda sum.return_2
    sta s3
  //SEG32 [14] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda s1
    clc
    adc s2
    sta _3
  //SEG33 [15] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 -- vbuz1=vbuz2_plus_vbuz3 
    lda _3
    clc
    adc s3
    sta s4
  //SEG34 [16] *((const byte*) screen#0) ← (byte) main::s4#0 -- _deref_pbuc1=vbuz1 
    lda s4
    sta screen
    jmp breturn
  //SEG35 main::@return
  breturn:
  //SEG36 [17] return 
    rts
}
//SEG37 sum
// sum(byte zeropage(2) a, byte zeropage(3) b)
sum: {
    .label return = 4
    .label return_1 = 6
    .label return_2 = 8
    .label return_3 = $c
    .label a = 2
    .label b = 3
  //SEG38 [19] (byte) sum::return#3 ← (byte) sum::a#3 + (byte) sum::b#3 -- vbuz1=vbuz2_plus_vbuz3 
    lda a
    clc
    adc b
    sta return_3
    jmp breturn
  //SEG39 sum::@return
  breturn:
  //SEG40 [20] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [14] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:2 [ main::s3#0 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ main::s3#0 ]
Statement [15] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ main::s4#0 ] ( main:2 [ main::s4#0 ] ) always clobbers reg byte a 
Statement [19] (byte) sum::return#3 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#3 ] ( main:2::sum:5 [ sum::return#3 ] main:2::sum:8 [ main::s1#0 sum::return#3 ] main:2::sum:11 [ main::s1#0 main::s2#0 sum::return#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::s1#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ main::s2#0 ]
Statement [14] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:2 [ main::s3#0 main::$3 ] ) always clobbers reg byte a 
Statement [15] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ main::s4#0 ] ( main:2 [ main::s4#0 ] ) always clobbers reg byte a 
Statement [19] (byte) sum::return#3 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#3 ] ( main:2::sum:5 [ sum::return#3 ] main:2::sum:8 [ main::s1#0 sum::return#3 ] main:2::sum:11 [ main::s1#0 main::s2#0 sum::return#3 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ sum::a#3 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ sum::b#3 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ sum::return#0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::s1#0 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ sum::return#1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::s2#0 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ sum::return#2 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ main::s3#0 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ main::$3 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ main::s4#0 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ sum::return#3 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [sum] 4: zp ZP_BYTE:4 [ sum::return#0 ] 4: zp ZP_BYTE:6 [ sum::return#1 ] 4: zp ZP_BYTE:8 [ sum::return#2 ] 2: zp ZP_BYTE:2 [ sum::a#3 ] 2: zp ZP_BYTE:3 [ sum::b#3 ] 1.6: zp ZP_BYTE:12 [ sum::return#3 ] 
Uplift Scope [main] 4: zp ZP_BYTE:10 [ main::$3 ] 4: zp ZP_BYTE:11 [ main::s4#0 ] 2: zp ZP_BYTE:9 [ main::s3#0 ] 1: zp ZP_BYTE:7 [ main::s2#0 ] 0.57: zp ZP_BYTE:5 [ main::s1#0 ] 
Uplift Scope [] 

Uplifting [sum] best 145 combination reg byte a [ sum::return#0 ] reg byte a [ sum::return#1 ] reg byte a [ sum::return#2 ] zp ZP_BYTE:2 [ sum::a#3 ] zp ZP_BYTE:3 [ sum::b#3 ] zp ZP_BYTE:12 [ sum::return#3 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [main] best 131 combination reg byte a [ main::$3 ] reg byte a [ main::s4#0 ] zp ZP_BYTE:9 [ main::s3#0 ] reg byte x [ main::s2#0 ] zp ZP_BYTE:5 [ main::s1#0 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [] best 131 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ sum::a#3 ]
Uplifting [sum] best 121 combination reg byte y [ sum::a#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ sum::b#3 ]
Uplifting [sum] best 113 combination reg byte a [ sum::b#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ main::s3#0 ]
Uplifting [main] best 113 combination zp ZP_BYTE:9 [ main::s3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ sum::return#3 ]
Uplifting [sum] best 101 combination reg byte a [ sum::return#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::s1#0 ]
Uplifting [main] best 101 combination zp ZP_BYTE:5 [ main::s1#0 ] 
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:2 [ main::s1#0 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:3 [ main::s3#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label screen = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG5 @2
b2:
//SEG6 [2] call main 
//SEG7 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG8 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label s1 = 2
    .label s3 = 3
  //SEG11 [5] call sum 
  //SEG12 [18] phi from main to sum [phi:main->sum]
  sum_from_main:
  //SEG13 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #2
  //SEG14 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main->sum#1] -- vbuyy=vbuc1 
    ldy #1
    jsr sum
  //SEG15 [6] (byte) sum::return#0 ← (byte) sum::return#3
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte) main::s1#0 ← (byte) sum::return#0 -- vbuz1=vbuaa 
    sta s1
  //SEG18 [8] call sum 
  //SEG19 [18] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
  //SEG20 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 4 [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #4
  //SEG21 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@1->sum#1] -- vbuyy=vbuc1 
    ldy #3
    jsr sum
  //SEG22 [9] (byte) sum::return#1 ← (byte) sum::return#3
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [10] (byte) main::s2#0 ← (byte) sum::return#1 -- vbuxx=vbuaa 
    tax
  //SEG25 [11] call sum 
  //SEG26 [18] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
  //SEG27 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 13 [phi:main::@2->sum#0] -- vbuaa=vbuc1 
    lda #$d
  //SEG28 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 9 [phi:main::@2->sum#1] -- vbuyy=vbuc1 
    ldy #9
    jsr sum
  //SEG29 [12] (byte) sum::return#2 ← (byte) sum::return#3
    jmp b3
  //SEG30 main::@3
  b3:
  //SEG31 [13] (byte) main::s3#0 ← (byte) sum::return#2 -- vbuz1=vbuaa 
    sta s3
  //SEG32 [14] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc s1
  //SEG33 [15] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc s3
  //SEG34 [16] *((const byte*) screen#0) ← (byte) main::s4#0 -- _deref_pbuc1=vbuaa 
    sta screen
    jmp breturn
  //SEG35 main::@return
  breturn:
  //SEG36 [17] return 
    rts
}
//SEG37 sum
// sum(byte register(Y) a, byte register(A) b)
sum: {
  //SEG38 [19] (byte) sum::return#3 ← (byte) sum::a#3 + (byte) sum::b#3 -- vbuaa=vbuyy_plus_vbuaa 
    sty $ff
    clc
    adc $ff
    jmp breturn
  //SEG39 sum::@return
  breturn:
  //SEG40 [20] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b2_from_bbegin:
Removing instruction b2:
Removing instruction main_from_b2:
Removing instruction bend_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction sum_from_main:
Removing instruction b1:
Removing instruction sum_from_b1:
Removing instruction b2:
Removing instruction sum_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$3 reg byte a 4.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::s1
(byte) main::s1#0 s1 zp ZP_BYTE:2 0.5714285714285714
(byte) main::s2
(byte) main::s2#0 reg byte x 1.0
(byte) main::s3
(byte) main::s3#0 s3 zp ZP_BYTE:3 2.0
(byte) main::s4
(byte) main::s4#0 reg byte a 4.0
(byte*) screen
(const byte*) screen#0 screen = ((byte*))(word/signed word/dword/signed dword) 1024
(byte()) sum((byte) sum::a , (byte) sum::b)
(label) sum::@return
(byte) sum::a
(byte) sum::a#3 reg byte y 2.0
(byte) sum::b
(byte) sum::b#3 reg byte a 2.0
(byte) sum::return
(byte) sum::return#0 reg byte a 4.0
(byte) sum::return#1 reg byte a 4.0
(byte) sum::return#2 reg byte a 4.0
(byte) sum::return#3 reg byte a 1.6

reg byte y [ sum::a#3 ]
reg byte a [ sum::b#3 ]
reg byte a [ sum::return#0 ]
zp ZP_BYTE:2 [ main::s1#0 ]
reg byte a [ sum::return#1 ]
reg byte x [ main::s2#0 ]
reg byte a [ sum::return#2 ]
zp ZP_BYTE:3 [ main::s3#0 ]
reg byte a [ main::$3 ]
reg byte a [ main::s4#0 ]
reg byte a [ sum::return#3 ]


FINAL ASSEMBLER
Score: 74

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label screen = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG5 @2
//SEG6 [2] call main 
//SEG7 [4] phi from @2 to main [phi:@2->main]
//SEG8 [3] phi from @2 to @end [phi:@2->@end]
//SEG9 @end
//SEG10 main
main: {
    .label s1 = 2
    .label s3 = 3
  //SEG11 [5] call sum 
  //SEG12 [18] phi from main to sum [phi:main->sum]
  //SEG13 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 2 [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #2
  //SEG14 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:main->sum#1] -- vbuyy=vbuc1 
    ldy #1
    jsr sum
  //SEG15 [6] (byte) sum::return#0 ← (byte) sum::return#3
  //SEG16 main::@1
  //SEG17 [7] (byte) main::s1#0 ← (byte) sum::return#0 -- vbuz1=vbuaa 
    sta s1
  //SEG18 [8] call sum 
  //SEG19 [18] phi from main::@1 to sum [phi:main::@1->sum]
  //SEG20 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 4 [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #4
  //SEG21 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 3 [phi:main::@1->sum#1] -- vbuyy=vbuc1 
    ldy #3
    jsr sum
  //SEG22 [9] (byte) sum::return#1 ← (byte) sum::return#3
  //SEG23 main::@2
  //SEG24 [10] (byte) main::s2#0 ← (byte) sum::return#1 -- vbuxx=vbuaa 
    tax
  //SEG25 [11] call sum 
  //SEG26 [18] phi from main::@2 to sum [phi:main::@2->sum]
  //SEG27 [18] phi (byte) sum::b#3 = (byte/signed byte/word/signed word/dword/signed dword) 13 [phi:main::@2->sum#0] -- vbuaa=vbuc1 
    lda #$d
  //SEG28 [18] phi (byte) sum::a#3 = (byte/signed byte/word/signed word/dword/signed dword) 9 [phi:main::@2->sum#1] -- vbuyy=vbuc1 
    ldy #9
    jsr sum
  //SEG29 [12] (byte) sum::return#2 ← (byte) sum::return#3
  //SEG30 main::@3
  //SEG31 [13] (byte) main::s3#0 ← (byte) sum::return#2 -- vbuz1=vbuaa 
    sta s3
  //SEG32 [14] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 -- vbuaa=vbuz1_plus_vbuxx 
    txa
    clc
    adc s1
  //SEG33 [15] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc s3
  //SEG34 [16] *((const byte*) screen#0) ← (byte) main::s4#0 -- _deref_pbuc1=vbuaa 
    sta screen
  //SEG35 main::@return
  //SEG36 [17] return 
    rts
}
//SEG37 sum
// sum(byte register(Y) a, byte register(A) b)
sum: {
  //SEG38 [19] (byte) sum::return#3 ← (byte) sum::a#3 + (byte) sum::b#3 -- vbuaa=vbuyy_plus_vbuaa 
    sty $ff
    clc
    adc $ff
  //SEG39 sum::@return
  //SEG40 [20] return 
    rts
}

