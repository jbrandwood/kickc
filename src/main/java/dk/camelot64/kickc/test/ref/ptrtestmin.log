// Test all types of pointers

main();

void main() {

  // A constant pointer
  byte[1024] SCREEN = $0400;

  byte b;

  // RValue constant array variable index
  byte i=2;
  while(i<10) {
    b = SCREEN[i++];
  }

}

Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
PROGRAM
  (void~) $0 ← call main 
proc (void()) main()
  (byte[1024]) main::SCREEN ← (word) 1024
  (byte) main::i ← (byte) 2
main::@1:
  (boolean~) main::$0 ← (byte) main::i < (byte) 10
  if((boolean~) main::$0) goto main::@2
  goto main::@3
main::@2:
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  goto main::@1
main::@3:
main::@return:
  return 
endproc // main()

SYMBOLS
(void~) $0
(void()) main()
(boolean~) main::$0
(byte~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte[1024]) main::SCREEN
(byte) main::b
(byte) main::i

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (byte[1024]) main::SCREEN ← (word) 1024
  (byte) main::i ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@1 main::@5
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@4: scope:[main]  from main::@1
  to:main::@3
main::@3: scope:[main]  from main::@4 main::@6
  to:main::@return
main::@5: scope:[main]  from
  to:main::@2
main::@6: scope:[main]  from
  to:main::@3
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
Removing empty block main::@3
Removing empty block main::@5
Removing empty block main::@6
Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (byte[1024]) main::SCREEN ← (word) 1024
  (byte) main::i ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[1024]) main::SCREEN ← (word) 1024
  (byte) main::i ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte~) main::$1 ← (byte[1024]) main::SCREEN *idx (byte) main::i
  (byte) main::b ← (byte~) main::$1
  (byte) main::i ← ++ (byte) main::i
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[1024]) main::SCREEN#0 ← (word) 1024
  (byte) main::i#0 ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[1024]) main::SCREEN#0 ← (word) 1024
  (byte) main::i#0 ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(byte~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte[1024]) main::SCREEN
(byte[1024]) main::SCREEN#0
(byte[1024]) main::SCREEN#1
(byte[1024]) main::SCREEN#2
(byte) main::b
(byte) main::b#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte[1024]) main::SCREEN#0 ← (word) 1024
  (byte) main::i#0 ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(byte[1024]) main::SCREEN#0 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte[1024]) main::SCREEN#0 (word) 1024
Constant (byte) main::i#0 (byte) 2
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#2 ← phi( main/(word) 1024 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte[1024]) main::SCREEN#1 ← phi( main::@1/(byte[1024]) main::SCREEN#2 )
  (byte~) main::$1 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#3
  (byte) main::b#0 ← (byte~) main::$1
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte[1024]) main::SCREEN#1 = (byte[1024]) main::SCREEN#2 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte) main::b#0 = (byte~) main::$1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#1 ← phi( main/(word) 1024 main::@2/(byte[1024]) main::SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte[1024]) main::SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#1 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte) 10
  if((boolean~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$0 if((byte) main::i#2<(byte) 10) goto main::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte[1024]) main::SCREEN#1 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<(byte) 10) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (byte[1024]) main::SCREEN#1 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte[1024]) main::SCREEN#1 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte) main::i#1 )
  if((byte) main::i#2<(byte) 10) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
FINAL SYMBOL TABLE
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[1024]) main::SCREEN
(byte) main::b
(byte) main::b#0
(byte) main::i
(byte) main::i#1
(byte) main::i#2

Block Sequence Planned @begin @end main main::@1 main::@return main::@2 
Block Sequence Planned @begin @end main main::@1 main::@return main::@2 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte~) main::i#4 )
  if((byte) main::i#2<(byte) 10) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
main::@2: scope:[main]  from main::@1
  (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (byte~) main::i#4 ← (byte) main::i#1
  to:main::@1

Adding empty live range for unused variable main::b#0
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte~) main::i#4 ) [ main::i#2 ]
  [2] if((byte) main::i#2<(byte) 10) goto main::@2 [ main::i#2 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [4] (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2 [ main::i#2 ]
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [6] (byte~) main::i#4 ← (byte) main::i#1 [ main::i#4 ]
  to:main::@1

Created 1 initial phi equivalence classes
Coalesced [6] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Block Sequence Planned @begin @end main main::@1 main::@return main::@2 
Adding empty live range for unused variable main::b#0
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 2 main::@2/(byte) main::i#1 ) [ main::i#2 ]
  [2] if((byte) main::i#2<(byte) 10) goto main::@2 [ main::i#2 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return  [ ]
  to:@return
main::@2: scope:[main]  from main::@1
  [4] (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2 [ main::i#2 ]
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  to:main::@1

CALL GRAPH
Calls in [] to 0:main 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@return dominated by  main::@return @begin main::@1 main 
main::@2 dominated by  @begin main::@2 main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte[1024]) main::SCREEN
(byte) main::b
(byte) main::b#0 Infinity
(byte) main::i
(byte) main::i#1 22.0
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::b#0 to zero page equivalence class [ main::b#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::b#0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::b#0 ]
INITIAL ASM
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG3 @end
bend:
//SEG4 main
main: {
    .label b = 3
    .label i = 2
  //SEG5 [1] phi from main to main::@1
  b1_from_main:
  //SEG6 [1] phi (byte) main::i#2 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta i
    jmp b1
  //SEG7 main::@1
  b1:
  //SEG8 [2] if((byte) main::i#2<(byte) 10) goto main::@2 [ main::i#2 ] -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #$a
    bcc b2
    jmp breturn
  //SEG9 main::@return
  breturn:
  //SEG10 [3] return  [ ]
    rts
  //SEG11 main::@2
  b2:
  //SEG12 [4] (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2 [ main::i#2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda $400,x
    sta b
  //SEG13 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG14 [1] phi from main::@2 to main::@1
  b1_from_b2:
  //SEG15 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::b#0 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] ∞: zp ZP_BYTE:3 [ main::b#0 ] 36.67: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 235 combination reg byte a [ main::b#0 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 235 combination 
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  b1_from_main:
  //SEG6 [1] phi (byte) main::i#2 = (byte) 2 -- xby=coby1 
    ldx #$2
  //SEG7 main::@1
  b1:
  //SEG8 [2] if((byte) main::i#2<(byte) 10) goto main::@2 [ main::i#2 ] -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG9 main::@return
  breturn:
  //SEG10 [3] return  [ ]
    rts
  //SEG11 main::@2
  b2:
  //SEG12 [4] (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2 [ main::i#2 ] -- aby=cowo1_staridx_xby 
    lda $400,x
  //SEG13 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [1] phi from main::@2 to main::@1
  b1_from_b2:
  //SEG15 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  //SEG6 [1] phi (byte) main::i#2 = (byte) 2 -- xby=coby1 
    ldx #$2
  //SEG7 main::@1
  b1:
  //SEG8 [2] if((byte) main::i#2<(byte) 10) goto main::@2 [ main::i#2 ] -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG9 main::@return
  //SEG10 [3] return  [ ]
    rts
  //SEG11 main::@2
  b2:
  //SEG12 [4] (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2 [ main::i#2 ] -- aby=cowo1_staridx_xby 
    lda $400,x
  //SEG13 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [1] phi from main::@2 to main::@1
  //SEG15 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[1024]) main::SCREEN
(byte) main::b
(byte) main::b#0 reg byte a Infinity
(byte) main::i
(byte) main::i#1 reg byte x 22.0
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::b#0 ]

FINAL CODE
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] phi from main to main::@1
  //SEG6 [1] phi (byte) main::i#2 = (byte) 2 -- xby=coby1 
    ldx #$2
  //SEG7 main::@1
  b1:
  //SEG8 [2] if((byte) main::i#2<(byte) 10) goto main::@2 [ main::i#2 ] -- xby_lt_coby1_then_la1 
    cpx #$a
    bcc b2
  //SEG9 main::@return
  //SEG10 [3] return  [ ]
    rts
  //SEG11 main::@2
  b2:
  //SEG12 [4] (byte) main::b#0 ← (word) 1024 *idx (byte) main::i#2 [ main::i#2 ] -- aby=cowo1_staridx_xby 
    lda $400,x
  //SEG13 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG14 [1] phi from main::@2 to main::@1
  //SEG15 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
}

