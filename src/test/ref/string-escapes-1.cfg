@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte*) main::cursor#3 ← phi( main/(byte*) 1024 main::@5/(byte*) main::cursor#6 )
  [5] (byte*) main::line#2 ← phi( main/(byte*) 1024 main::@5/(byte*) main::line#5 )
  [5] (byte*) main::msg#2 ← phi( main/(const byte[]) MESSAGE#0 main::@5/(byte*) main::msg#1 )
  [6] if((byte) 0!=*((byte*) main::msg#2)) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] if(*((byte*) main::msg#2)==(byte) '
') goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [9] *((byte*) main::cursor#3) ← *((byte*) main::msg#2)
  [10] (byte*) main::cursor#2 ← ++ (byte*) main::cursor#3
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  [11] (byte*) main::cursor#6 ← phi( main::@3/(byte*) main::cursor#1 main::@4/(byte*) main::cursor#2 )
  [11] (byte*) main::line#5 ← phi( main::@3/(byte*~) main::line#8 main::@4/(byte*) main::line#2 )
  [12] (byte*) main::msg#1 ← ++ (byte*) main::msg#2
  to:main::@1
main::@3: scope:[main]  from main::@2
  [13] (byte*) main::cursor#1 ← (byte*) main::line#2 + (byte) $28
  [14] (byte*~) main::line#8 ← (byte*) main::cursor#1
  to:main::@5
