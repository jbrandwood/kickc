@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  to:toD0181
toD0181: scope:[]  from @1
  [6] phi()
  to:@3
@3: scope:[]  from toD0181
  [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0
  [8] (volatile byte) canvas_show_flag ← (byte) 0
  to:@2
@2: scope:[]  from @3
  [9] phi()
  [10] call main 
  to:@end
@end: scope:[]  from @2
  [11] phi()

(void()) main()
main: scope:[main]  from @2
  [12] phi()
  [13] call memset 
  to:main::@12
main::@12: scope:[main]  from main
  [14] phi()
  [15] call memset 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [16] phi()
  [17] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@6
  [18] (byte*) main::screen#5 ← phi( main::@13/(const nomodify byte*) SCREEN+(byte) $c main::@6/(byte*) main::screen#1 )
  [18] (byte*) main::cols#5 ← phi( main::@13/(const nomodify byte*) COLS+(byte) $c main::@6/(byte*) main::cols#1 )
  [18] (byte) main::y#2 ← phi( main::@13/(byte) 0 main::@6/(byte) main::y#1 )
  [19] if((byte) main::y#2<(byte) $10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK
  [22] call setup_irq 
  to:main::@14
main::@14: scope:[main]  from main::@3
  [23] phi()
  [24] call textcolor 
  to:main::@7
main::@7: scope:[main]  from main::@14 main::@26
  [25] (byte*) main::canvas#10 ← phi( main::@14/(const nomodify byte*) CANVAS1 main::@26/(byte*) main::canvas#24 )
  [25] (byte) main::p2_idx#2 ← phi( main::@14/(byte) $88+(byte) $aa main::@26/(byte) main::p2_idx#1 )
  [25] (byte) main::p1_idx#2 ← phi( main::@14/(byte) $88+(byte) $f main::@26/(byte) main::p1_idx#1 )
  [25] (byte) main::p0_idx#11 ← phi( main::@14/(byte) $88 main::@26/(byte) main::p0_idx#1 )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [26] phi()
  [27] call clock_start 
  to:main::@15
main::@15: scope:[main]  from main::@8
  [28] phi()
  [29] call memset 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [30] (byte) main::x0#0 ← *((const byte*) COSTAB + (byte) main::p0_idx#11)
  [31] (byte) main::y0#0 ← *((const byte*) SINTAB + (byte) main::p0_idx#11)
  [32] (byte) main::x1#0 ← *((const byte*) COSTAB + (byte) main::p1_idx#2)
  [33] (byte) main::y1#0 ← *((const byte*) SINTAB + (byte) main::p1_idx#2)
  [34] (byte) line::x1#0 ← (byte) main::x0#0
  [35] (byte) line::y1#0 ← (byte) main::y0#0
  [36] (byte) line::x2#0 ← (byte) main::x1#0
  [37] (byte) line::y2#0 ← (byte) main::y1#0
  [38] call line 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [39] (byte) main::x2#0 ← *((const byte*) COSTAB + (byte) main::p2_idx#2)
  [40] (byte) main::y2#0 ← *((const byte*) SINTAB + (byte) main::p2_idx#2)
  [41] (byte) line::x1#1 ← (byte) main::x1#0
  [42] (byte) line::y1#1 ← (byte) main::y1#0
  [43] (byte) line::x2#1 ← (byte) main::x2#0
  [44] (byte) line::y2#1 ← (byte) main::y2#0
  [45] call line 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [46] (byte) line::x1#2 ← (byte) main::x2#0
  [47] (byte) line::y1#2 ← (byte) main::y2#0
  [48] (byte) line::x2#2 ← (byte) main::x0#0
  [49] (byte) line::y2#2 ← (byte) main::y0#0
  [50] call line 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [51] (byte) main::p0_idx#1 ← ++ (byte) main::p0_idx#11
  [52] (byte) main::p1_idx#1 ← ++ (byte) main::p1_idx#2
  [53] (byte) main::p2_idx#1 ← ++ (byte) main::p2_idx#2
  [54] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10
  [55] call eorfill 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED
  to:main::@9
main::@9: scope:[main]  from main::@20 main::@9
  [57] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@9
  [58] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  to:main::toD0181
main::toD0181: scope:[main]  from main::@10
  [59] phi()
  to:main::toD0182
main::toD0182: scope:[main]  from main::toD0181
  [60] phi()
  to:main::@11
main::@11: scope:[main]  from main::toD0182
  [61] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0
  [62] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2
  [63] (volatile byte) canvas_show_flag ← (byte) 1
  [64] call clock 
  [65] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@21
main::@21: scope:[main]  from main::@11
  [66] (dword~) main::$18 ← (dword) clock::return#2
  [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT
  [68] call gotoxy 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [69] phi()
  [70] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [71] (byte) printf_uchar::uvalue#0 ← (byte) main::p0_idx#1
  [72] call printf_uchar 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [73] phi()
  [74] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0
  [76] call printf_ulong 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1
  to:main::@7
main::@2: scope:[main]  from main::@1
  [78] (byte) main::c#4 ← (byte) main::y#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [79] (byte) main::c#2 ← phi( main::@2/(byte) main::c#4 main::@5/(byte) main::c#1 )
  [79] (byte) main::x#2 ← phi( main::@2/(byte) 0 main::@5/(byte) main::x#1 )
  [80] if((byte) main::x#2<(byte) $10) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28
  [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28
  [83] (byte) main::y#1 ← ++ (byte) main::y#2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE
  [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2
  [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10
  [87] (byte) main::x#1 ← ++ (byte) main::x#2
  to:main::@4

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@25
  [88] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
  [91] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [92] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [93] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [94] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_ulong::@2
  [95] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_upper_case#0 printf_ulong::@2/(const byte) printf_ulong::format_upper_case#0 )
  [95] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [95] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_zero_padding#0 printf_ulong::@2/(const byte) printf_ulong::format_zero_padding#0 )
  [95] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_justify_left#0 printf_ulong::@2/(const byte) printf_ulong::format_justify_left#0 )
  [95] (byte) printf_number_buffer::format_min_length#2 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_min_length#0 printf_ulong::@2/(const byte) printf_ulong::format_min_length#0 )
  [96] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [97] phi()
  [98] call strlen 
  [99] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [102] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [103] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [104] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2
  [106] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [107] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [108] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [109] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [110] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [111] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [112] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [113] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [114] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [115] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10
  [116] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [117] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [118] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [119] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [120] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [121] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [122] phi()
  [123] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [124] phi()
  [125] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [126] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [127] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [128] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [129] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [130] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [131] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [132] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [132] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [133] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [134] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [135] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [136] (byte) cputc::c#1 ← (byte) printf_padding::pad#5
  [137] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [138] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [139] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  [140] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  [142] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  [144] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [145] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [147] (byte) conio_cursor_x ← (byte) 0
  [148] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [149] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [150] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [151] phi()
  [152] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [158] (byte) conio_cursor_x ← (byte) 0
  [159] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [160] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [161] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [163] phi()
  [164] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [165] phi()
  [166] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [167] phi()
  [168] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [169] (byte) memset::c#1 ← (byte) conio_textcolor
  [170] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [175] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [176] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4 main main::@12 main::@13 main::@15
  [177] (byte) memset::c#8 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(byte) memset::c#1 main/(byte) ' ' main::@12/(byte) 0 main::@13/(const nomodify byte) BLACK main::@15/(byte) 0 )
  [177] (void*) memset::str#7 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 main/(void*)(const nomodify byte*) CONSOLE main::@12/(void*)(const nomodify byte*) SCREEN main::@13/(void*)(const nomodify byte*) COLS main::@15/(void*)(const nomodify byte*) LINE_BUFFER )
  [177] (word) memset::num#6 ← phi( cscroll::@3/(byte) $28 cscroll::@4/(byte) $28 main/(word)(number) $28*(number) $19 main::@12/(word)(number) $28*(number) $19 main::@13/(word)(number) $28*(number) $19 main::@15/(word) $800 )
  [178] if((word) memset::num#6<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6
  [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [181] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [183] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [184] *((byte*) memset::dst#2) ← (byte) memset::c#8
  [185] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [186] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [186] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [190] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [190] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [192] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [194] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [195] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@22 main::@24 printf_number_buffer::@5
  [196] (to_nomodify byte*) cputs::s#5 ← phi( main::@22/(const byte*) main::s main::@24/(const byte*) main::s1 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [197] (to_nomodify byte*) cputs::s#4 ← phi( cputs/(to_nomodify byte*) cputs::s#5 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4)
  [199] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4
  [200] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [201] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [202] (byte) cputc::c#0 ← (byte) cputs::c#1
  [203] call cputc 
  to:cputs::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [204] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [205] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [207] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [209] call toupper 
  [210] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [211] (byte~) strupr::$0 ← (byte) toupper::return#3
  [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [213] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [214] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [215] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [217] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [218] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [219] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [220] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [220] (byte*) strlen::str#2 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [222] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [223] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [224] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [225] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [226] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [226] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [226] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [226] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [227] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [231] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [232] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [235] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [237] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [237] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [237] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [238] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [242] call ultoa_append 
  [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [245] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [246] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [247] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [247] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [250] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [251] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@23
  [253] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [255] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#0
  [256] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [257] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [258] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [259] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [260] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [261] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [261] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [261] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [261] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [262] if((byte) uctoa::digit#2<(const byte) uctoa::max_digits#2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [265] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [266] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [267] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [268] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [269] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [270] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [270] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [270] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [271] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [273] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [274] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [275] call uctoa_append 
  [276] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [277] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [278] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [279] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [280] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [280] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [281] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [283] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [284] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@21
  [286] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0
  [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [291] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@11
  [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [293] return 
  to:@return

(void()) eorfill((byte*) eorfill::line_buffer , (byte*) eorfill::canvas)
eorfill: scope:[eorfill]  from main::@19
  [294] phi()
  to:eorfill::@1
eorfill::@1: scope:[eorfill]  from eorfill eorfill::@5
  [295] (byte*) eorfill::fill_column#5 ← phi( eorfill/(byte*) eorfill::canvas#0 eorfill::@5/(byte*) eorfill::fill_column#1 )
  [295] (byte*) eorfill::line_column#2 ← phi( eorfill/(const nomodify byte*) LINE_BUFFER eorfill::@5/(byte*) eorfill::line_column#1 )
  [295] (byte) eorfill::x#2 ← phi( eorfill/(byte) 0 eorfill::@5/(byte) eorfill::x#1 )
  [296] if((byte) eorfill::x#2<(byte) $10) goto eorfill::@2
  to:eorfill::@return
eorfill::@return: scope:[eorfill]  from eorfill::@1
  [297] return 
  to:@return
eorfill::@2: scope:[eorfill]  from eorfill::@1
  [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2)
  to:eorfill::@3
eorfill::@3: scope:[eorfill]  from eorfill::@2 eorfill::@4
  [299] (byte) eorfill::eor#2 ← phi( eorfill::@2/(byte) eorfill::eor#0 eorfill::@4/(byte) eorfill::eor#1 )
  [299] (byte) eorfill::y#2 ← phi( eorfill::@2/(byte) 1 eorfill::@4/(byte) eorfill::y#1 )
  [300] if((byte) eorfill::y#2<(byte)(number) $10*(number) 8) goto eorfill::@4
  to:eorfill::@5
eorfill::@5: scope:[eorfill]  from eorfill::@3
  [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8
  [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8
  [303] (byte) eorfill::x#1 ← ++ (byte) eorfill::x#2
  to:eorfill::@1
eorfill::@4: scope:[eorfill]  from eorfill::@3
  [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2)
  [305] *((byte*) eorfill::fill_column#5 + (byte) eorfill::y#2) ← (byte) eorfill::eor#1
  [306] (byte) eorfill::y#1 ← ++ (byte) eorfill::y#2
  to:eorfill::@3

(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
line: scope:[line]  from main::@16 main::@17 main::@18
  [307] (byte) line::y2#10 ← phi( main::@16/(byte) line::y2#0 main::@17/(byte) line::y2#1 main::@18/(byte) line::y2#2 )
  [307] (byte) line::x2#10 ← phi( main::@16/(byte) line::x2#0 main::@17/(byte) line::x2#1 main::@18/(byte) line::x2#2 )
  [307] (byte) line::y#0 ← phi( main::@16/(byte) line::y1#0 main::@17/(byte) line::y1#1 main::@18/(byte) line::y1#2 )
  [307] (byte) line::x#0 ← phi( main::@16/(byte) line::x1#0 main::@17/(byte) line::x1#1 main::@18/(byte) line::x1#2 )
  [308] (byte) abs_u8::u#0 ← (byte) line::x2#10 - (byte) line::x#0
  [309] call abs_u8 
  [310] (byte) abs_u8::return#0 ← (byte) abs_u8::return#4
  to:line::@12
line::@12: scope:[line]  from line
  [311] (byte) line::dx#0 ← (byte) abs_u8::return#0
  [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0
  [313] call abs_u8 
  [314] (byte) abs_u8::return#1 ← (byte) abs_u8::return#4
  to:line::@13
line::@13: scope:[line]  from line::@12
  [315] (byte) line::dy#0 ← (byte) abs_u8::return#1
  [316] (byte) sgn_u8::u#0 ← (byte) line::x2#10 - (byte) line::x#0
  [317] call sgn_u8 
  [318] (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4
  to:line::@14
line::@14: scope:[line]  from line::@13
  [319] (byte) line::sx#0 ← (byte) sgn_u8::return#0
  [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0
  [321] call sgn_u8 
  [322] (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4
  to:line::@15
line::@15: scope:[line]  from line::@14
  [323] (byte) line::sy#0 ← (byte) sgn_u8::return#1
  [324] if((byte) line::sx#0!=(byte) $ff) goto line::@1
  to:line::@3
line::@3: scope:[line]  from line::@15
  [325] (byte) line::y#1 ← ++ (byte) line::y#0
  [326] (byte) line::y2#3 ← ++ (byte) line::y2#10
  to:line::@1
line::@1: scope:[line]  from line::@15 line::@3
  [327] (byte) line::y2#13 ← phi( line::@15/(byte) line::y2#10 line::@3/(byte) line::y2#3 )
  [327] (byte) line::y#13 ← phi( line::@15/(byte) line::y#0 line::@3/(byte) line::y#1 )
  [328] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2
  to:line::@4
line::@4: scope:[line]  from line::@1
  [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1
  [330] (byte) plot::x#0 ← (byte) line::x#0
  [331] (byte) plot::y#0 ← (byte) line::y#13
  [332] call plot 
  to:line::@5
line::@5: scope:[line]  from line::@4 line::@6
  [333] (byte) line::x#10 ← phi( line::@4/(byte) line::x#0 line::@6/(byte) line::x#16 )
  [333] (byte) line::e#3 ← phi( line::@4/(byte) line::e#0 line::@6/(byte) line::e#6 )
  [333] (byte) line::y#6 ← phi( line::@4/(byte) line::y#13 line::@6/(byte) line::y#15 )
  [334] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0
  [335] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0
  [336] if((byte) line::dy#0>=(byte) line::e#1) goto line::@6
  to:line::@7
line::@7: scope:[line]  from line::@5
  [337] (byte) line::x#1 ← (byte) line::x#10 + (byte) line::sx#0
  [338] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0
  [339] (byte) plot::x#1 ← (byte) line::x#1
  [340] (byte) plot::y#1 ← (byte) line::y#15
  [341] call plot 
  to:line::@6
line::@6: scope:[line]  from line::@5 line::@7
  [342] (byte) line::x#16 ← phi( line::@7/(byte) line::x#1 line::@5/(byte) line::x#10 )
  [342] (byte) line::e#6 ← phi( line::@7/(byte) line::e#2 line::@5/(byte) line::e#1 )
  [343] if((byte) line::y#15!=(byte) line::y2#13) goto line::@5
  to:line::@return
line::@return: scope:[line]  from line::@11 line::@6
  [344] return 
  to:@return
line::@2: scope:[line]  from line::@1
  [345] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1
  to:line::@8
line::@8: scope:[line]  from line::@2 line::@9
  [346] (byte) line::e1#3 ← phi( line::@2/(byte) line::e1#0 line::@9/(byte) line::e1#6 )
  [346] (byte) line::y#10 ← phi( line::@2/(byte) line::y#13 line::@9/(byte) line::y#11 )
  [346] (byte) line::x#5 ← phi( line::@2/(byte) line::x#0 line::@9/(byte) line::x#12 )
  [347] (byte) plot::x#2 ← (byte) line::x#5
  [348] (byte) plot::y#2 ← (byte) line::y#10
  [349] call plot 
  to:line::@16
line::@16: scope:[line]  from line::@8
  [350] (byte) line::x#12 ← (byte) line::x#5 + (byte) line::sx#0
  [351] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0
  [352] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@9
  to:line::@10
line::@10: scope:[line]  from line::@16
  [353] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0
  [354] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0
  to:line::@9
line::@9: scope:[line]  from line::@10 line::@16
  [355] (byte) line::e1#6 ← phi( line::@10/(byte) line::e1#2 line::@16/(byte) line::e1#1 )
  [355] (byte) line::y#11 ← phi( line::@10/(byte) line::y#3 line::@16/(byte) line::y#10 )
  [356] if((byte) line::x#12!=(byte) line::x2#10) goto line::@8
  to:line::@11
line::@11: scope:[line]  from line::@9
  [357] (byte) plot::x#3 ← (byte) line::x#12
  [358] (byte) plot::y#3 ← (byte) line::y#11
  [359] call plot 
  to:line::@return

(void()) plot((byte*) plot::canvas , (byte) plot::x , (byte) plot::y)
plot: scope:[plot]  from line::@11 line::@4 line::@7 line::@8
  [360] (byte) plot::y#4 ← phi( line::@11/(byte) plot::y#3 line::@4/(byte) plot::y#0 line::@7/(byte) plot::y#1 line::@8/(byte) plot::y#2 )
  [360] (byte) plot::x#4 ← phi( line::@11/(byte) plot::x#3 line::@4/(byte) plot::x#0 line::@7/(byte) plot::x#1 line::@8/(byte) plot::x#2 )
  [361] (byte~) plot::$0 ← (byte) plot::x#4 >> (byte) 3
  [362] (byte~) plot::$3 ← (byte~) plot::$0 << (byte) 1
  [363] (byte*) plot::column#0 ← (const nomodify byte*) LINE_BUFFER + *((const word*) plot_column + (byte~) plot::$3)
  [364] (byte~) plot::$2 ← (byte) plot::x#4 & (byte) 7
  [365] *((byte*) plot::column#0 + (byte) plot::y#4) ← *((byte*) plot::column#0 + (byte) plot::y#4) | *((const byte*) plot_bit + (byte~) plot::$2)
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [366] return 
  to:@return

(byte()) sgn_u8((byte) sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@13 line::@14
  [367] (byte) sgn_u8::u#2 ← phi( line::@13/(byte) sgn_u8::u#0 line::@14/(byte) sgn_u8::u#1 )
  [368] (byte~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80
  [369] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1
  to:sgn_u8::@return
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  [370] phi()
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8 sgn_u8::@1
  [371] (byte) sgn_u8::return#4 ← phi( sgn_u8::@1/(byte) -1 sgn_u8/(byte) 1 )
  [372] return 
  to:@return

(byte()) abs_u8((byte) abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@12
  [373] (byte) abs_u8::u#2 ← phi( line/(byte) abs_u8::u#0 line::@12/(byte) abs_u8::u#1 )
  [374] (byte~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80
  [375] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1
  to:abs_u8::@return
abs_u8::@1: scope:[abs_u8]  from abs_u8
  [376] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8 abs_u8::@1
  [377] (byte) abs_u8::return#4 ← phi( abs_u8::@1/(byte) abs_u8::return#2 abs_u8/(byte) abs_u8::u#2 )
  [378] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main::@8
  [379] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0
  [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [381] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [382] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [384] return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from main::@14
  [385] (byte) conio_textcolor ← (const nomodify byte) WHITE
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [386] return 
  to:@return

(void()) setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  [388] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [389] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f
  [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8
  [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [392] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  [394] return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  [395] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [396] call kbhit 
  [397] (byte) kbhit::return#2 ← (byte) kbhit::return#0
  to:irq_bottom_2::@3
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2
  [398] (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#2
  [399] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1
  to:irq_bottom_2::@2
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@3
  [400] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory
  to:irq_bottom_2::@1
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@2 irq_bottom_2::@3
  [401] (volatile byte) canvas_show_flag ← (byte) 0
  [402] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8
  [404] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@1
  [405] return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  [406] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0
  [407] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [408] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  [409] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  [410] phi()
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  [411] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0
  [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM
  [414] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  [415] return 
  to:@return
