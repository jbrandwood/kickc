Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::nxt#0 = TEXT
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#3 = phi( main/main::i#0, main::@2/main::i#1 )
  main::nxt#3 = phi( main/main::nxt#0, main::@2/main::nxt#1 )
  main::c#0 = *main::nxt#3
  main::$0 = main::c#0 == 0
  main::$1 = ! main::$0
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::nxt#4 = phi( main::@1/main::nxt#3, main::@3/main::nxt#2 )
  main::c#2 = phi( main::@1/main::c#0, main::@3/main::c#1 )
  main::i#2 = phi( main::@1/main::i#3, main::@3/main::i#4 )
  main::i#1 = ++ main::i#2
  SCREEN[main::i#1] = main::c#2
  main::nxt#1 = ++ main::nxt#4
  if(true) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#3 )
  main::nxt#2 = TEXT
  main::c#1 = *main::nxt#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
const byte* TEXT[]  = "01234567"
void __start()
void main()
bool~ main::$0
bool~ main::$1
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte* main::nxt
byte* main::nxt#0
byte* main::nxt#1
byte* main::nxt#2
byte* main::nxt#3
byte* main::nxt#4

Adding number conversion cast (unumber) 0 in main::$0 = main::c#0 == 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [5] main::$1 = main::c#0 != 0 from [4] main::$0 = main::c#0 == 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#3 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [5] if(main::c#0!=0) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::nxt#0 = TEXT
Constant main::i#0 = 0
Constant main::nxt#2 = TEXT
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [10] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::nxt#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::nxt#2
Constant inlined main::i#0 = 0
Constant inlined main::nxt#0 = TEXT
Constant inlined main::nxt#2 = TEXT
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@1 and main::@2)
Adding NOP phi() at start of main
CALL GRAPH

Created 4 initial phi equivalence classes
Coalesced [5] main::c#4 = main::c#1
Coalesced [10] main::nxt#5 = main::nxt#1
Coalesced [11] main::i#5 = main::i#1
Coalesced [12] main::c#3 = main::c#0
Coalesced [13] main::nxt#6 = main::nxt#3
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [1] main::nxt#3 = phi( main/TEXT, main::@2/main::nxt#1 )
  [2] main::c#0 = *main::nxt#3
  [3] if(main::c#0!=0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] main::c#1 = *TEXT
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [5] main::nxt#4 = phi( main::@1/main::nxt#3, main::@3/TEXT )
  [5] main::c#2 = phi( main::@1/main::c#0, main::@3/main::c#1 )
  [6] main::i#1 = ++ main::i#2
  [7] SCREEN[main::i#1] = main::c#2
  [8] main::nxt#1 = ++ main::nxt#4
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::c
byte main::c#0 16.5
byte main::c#1 22.0
byte main::c#2 16.5
byte main::i
byte main::i#1 11.0
byte main::i#2 4.4
byte* main::nxt
byte* main::nxt#1 22.0
byte* main::nxt#3 11.0
byte* main::nxt#4 7.333333333333333

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::c#2 main::c#0 main::c#1 ]
[ main::nxt#4 main::nxt#3 main::nxt#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::c#2 main::c#0 main::c#1 ]
[ main::nxt#4 main::nxt#3 main::nxt#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::c#2 main::c#0 main::c#1 ]
Allocated zp[2]:4 [ main::nxt#4 main::nxt#3 main::nxt#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::c#0 = *main::nxt#3 [ main::nxt#3 main::i#2 main::c#0 ] (  [ main::nxt#3 main::i#2 main::c#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [2] main::c#0 = *main::nxt#3 [ main::nxt#3 main::i#2 main::c#0 ] (  [ main::nxt#3 main::i#2 main::c#0 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::c#2 main::c#0 main::c#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ main::nxt#4 main::nxt#3 main::nxt#1 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55: zp[1]:3 [ main::c#2 main::c#0 main::c#1 ] 40.33: zp[2]:4 [ main::nxt#4 main::nxt#3 main::nxt#1 ] 15.4: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 765 combination reg byte y [ main::c#2 main::c#0 main::c#1 ] zp[2]:4 [ main::nxt#4 main::nxt#3 main::nxt#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 765 combination 
Allocated (was zp[2]:4) zp[2]:2 [ main::nxt#4 main::nxt#3 main::nxt#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="scroll-clobber.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label nxt = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::nxt#3 = TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    jmp __b1
    // main::@1
  __b1:
    // [2] main::c#0 = *main::nxt#3 -- vbuyy=_deref_pbuz1 
    ldy #0
    lda (nxt),y
    tay
    // [3] if(main::c#0!=0) goto main::@2 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2_from___b1
    jmp __b3
    // main::@3
  __b3:
    // [4] main::c#1 = *TEXT -- vbuyy=_deref_pbuc1 
    ldy TEXT
    // [5] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [5] phi main::nxt#4 = TEXT [phi:main::@3->main::@2#0] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // [5] phi main::c#2 = main::c#1 [phi:main::@3->main::@2#1] -- register_copy 
    jmp __b2
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi main::nxt#4 = main::nxt#3 [phi:main::@1->main::@2#0] -- register_copy 
    // [5] phi main::c#2 = main::c#0 [phi:main::@1->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] SCREEN[main::i#1] = main::c#2 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SCREEN,x
    // [8] main::nxt#1 = ++ main::nxt#4 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::nxt#3 = main::nxt#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  TEXT: .text "01234567"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from___b1 with __b2
Removing instruction __b2_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
const byte* TEXT[]  = "01234567"
void main()
byte main::c
byte main::c#0 reg byte y 16.5
byte main::c#1 reg byte y 22.0
byte main::c#2 reg byte y 16.5
byte main::i
byte main::i#1 reg byte x 11.0
byte main::i#2 reg byte x 4.4
byte* main::nxt
byte* main::nxt#1 nxt zp[2]:2 22.0
byte* main::nxt#3 nxt zp[2]:2 11.0
byte* main::nxt#4 nxt zp[2]:2 7.333333333333333

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::c#2 main::c#0 main::c#1 ]
zp[2]:2 [ main::nxt#4 main::nxt#3 main::nxt#1 ]


FINAL ASSEMBLER
Score: 645

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="scroll-clobber.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label nxt = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::nxt#3 = TEXT [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // main::@1
  __b1:
    // c = *nxt
    // [2] main::c#0 = *main::nxt#3 -- vbuyy=_deref_pbuz1 
    ldy #0
    lda (nxt),y
    tay
    // if(c==0)
    // [3] if(main::c#0!=0) goto main::@2 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // main::@3
    // c = *nxt
    // [4] main::c#1 = *TEXT -- vbuyy=_deref_pbuc1 
    ldy TEXT
    // [5] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [5] phi main::nxt#4 = TEXT [phi:main::@3->main::@2#0] -- pbuz1=pbuc1 
    lda #<TEXT
    sta.z nxt
    lda #>TEXT
    sta.z nxt+1
    // [5] phi main::c#2 = main::c#1 [phi:main::@3->main::@2#1] -- register_copy 
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [5] phi main::nxt#4 = main::nxt#3 [phi:main::@1->main::@2#0] -- register_copy 
    // [5] phi main::c#2 = main::c#0 [phi:main::@1->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // SCREEN[++i] = c;
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[++i] = c
    // [7] SCREEN[main::i#1] = main::c#2 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SCREEN,x
    // nxt++;
    // [8] main::nxt#1 = ++ main::nxt#4 -- pbuz1=_inc_pbuz1 
    inc.z nxt
    bne !+
    inc.z nxt+1
  !:
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::nxt#3 = main::nxt#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  TEXT: .text "01234567"
  .byte 0

