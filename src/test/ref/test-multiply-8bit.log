Inlined call call mulf8s_prepare (signed byte) mulf8s::a 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from mul8s_compare::@3 mul8s_error mul8s_error::@2 mul8s_error::@4 mul8s_error::@6 mul8s_error::@8 mul8u_compare::@10 mul8u_error mul8u_error::@2 mul8u_error::@4 mul8u_error::@6 mul8u_error::@8 mulf_tables_cmp::@3 mulf_tables_cmp::@5 mulf_tables_cmp::@9
  (byte*) print_char_cursor#158 ← phi( mul8s_compare::@3/(byte*) print_char_cursor#154 mul8s_error/(byte*) print_char_cursor#156 mul8s_error::@2/(byte*) print_char_cursor#55 mul8s_error::@4/(byte*) print_char_cursor#57 mul8s_error::@6/(byte*) print_char_cursor#59 mul8s_error::@8/(byte*) print_char_cursor#61 mul8u_compare::@10/(byte*) print_char_cursor#152 mul8u_error/(byte*) print_char_cursor#153 mul8u_error::@2/(byte*) print_char_cursor#39 mul8u_error::@4/(byte*) print_char_cursor#41 mul8u_error::@6/(byte*) print_char_cursor#43 mul8u_error::@8/(byte*) print_char_cursor#45 mulf_tables_cmp::@3/(byte*) print_char_cursor#149 mulf_tables_cmp::@5/(byte*) print_char_cursor#150 mulf_tables_cmp::@9/(byte*) print_char_cursor#30 )
  (byte*) print_str::str#19 ← phi( mul8s_compare::@3/(byte*) print_str::str#10 mul8s_error/(byte*) print_str::str#11 mul8s_error::@2/(byte*) print_str::str#12 mul8s_error::@4/(byte*) print_str::str#13 mul8s_error::@6/(byte*) print_str::str#14 mul8s_error::@8/(byte*) print_str::str#15 mul8u_compare::@10/(byte*) print_str::str#4 mul8u_error/(byte*) print_str::str#5 mul8u_error::@2/(byte*) print_str::str#6 mul8u_error::@4/(byte*) print_str::str#7 mul8u_error::@6/(byte*) print_str::str#8 mul8u_error::@8/(byte*) print_str::str#9 mulf_tables_cmp::@3/(byte*) print_str::str#1 mulf_tables_cmp::@5/(byte*) print_str::str#2 mulf_tables_cmp::@9/(byte*) print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#137 ← phi( print_str/(byte*) print_char_cursor#158 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#16 ← phi( print_str/(byte*) print_str::str#19 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#16)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#136 ← phi( print_str::@1/(byte*) print_char_cursor#137 )
  (byte*) print_str::str#17 ← phi( print_str::@1/(byte*) print_str::str#16 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#17)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#18 ← phi( print_str::@2/(byte*) print_str::str#17 )
  (byte*) print_char_cursor#69 ← phi( print_str::@2/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#69
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#18
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#70 ← phi( print_str::@1/(byte*) print_char_cursor#137 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#70
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from mul8s_compare::@13 mul8s_error::@10 mul8u_compare::@15 mul8u_error::@10 mulf_tables_cmp::@6
  (byte*) print_char_cursor#138 ← phi( mul8s_compare::@13/(byte*) print_char_cursor#50 mul8s_error::@10/(byte*) print_char_cursor#63 mul8u_compare::@15/(byte*) print_char_cursor#36 mul8u_error::@10/(byte*) print_char_cursor#47 mulf_tables_cmp::@6/(byte*) print_char_cursor#27 )
  (byte*) print_line_cursor#47 ← phi( mul8s_compare::@13/(byte*) print_line_cursor#55 mul8s_error::@10/(byte*) print_line_cursor#57 mul8u_compare::@15/(byte*) print_line_cursor#53 mul8u_error::@10/(byte*) print_line_cursor#54 mulf_tables_cmp::@6/(byte*) print_line_cursor#50 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#71 ← phi( print_ln/(byte*) print_char_cursor#138 print_ln::@1/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#24 ← phi( print_ln/(byte*) print_line_cursor#47 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#24 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#71
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#25 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#2 ← (byte*) print_line_cursor#25
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#72 ← phi( print_ln::@2/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#26 ← phi( print_ln::@2/(byte*) print_line_cursor#25 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#72
  return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from mul8s_error::@5 mul8s_error::@7 mul8s_error::@9
  (byte*) print_char_cursor#159 ← phi( mul8s_error::@5/(byte*) print_char_cursor#58 mul8s_error::@7/(byte*) print_char_cursor#60 mul8s_error::@9/(byte*) print_char_cursor#62 )
  (signed word) print_sint::w#4 ← phi( mul8s_error::@5/(signed word) print_sint::w#1 mul8s_error::@7/(signed word) print_sint::w#2 mul8s_error::@9/(signed word) print_sint::w#3 )
  (bool~) print_sint::$0 ← (signed word) print_sint::w#4 < (number) 0
  if((bool~) print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#7 ← phi( print_sint/(signed word) print_sint::w#4 )
  (byte*) print_char_cursor#139 ← phi( print_sint/(byte*) print_char_cursor#159 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  (signed word) print_sint::w#5 ← phi( print_sint::@1/(signed word) print_sint::w#7 )
  (byte*) print_char_cursor#73 ← phi( print_sint::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#73
  (signed word~) print_sint::$4 ← - (signed word) print_sint::w#5
  (signed word) print_sint::w#0 ← (signed word~) print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#9 ← phi( print_sint/(signed word) print_sint::w#4 )
  (byte*) print_char_cursor#140 ← phi( print_sint/(byte*) print_char_cursor#159 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  (signed word) print_sint::w#8 ← phi( print_sint::@3/(signed word) print_sint::w#9 )
  (byte*) print_char_cursor#74 ← phi( print_sint::@3/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#74
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  (byte*) print_char_cursor#141 ← phi( print_sint::@4/(byte*) print_char_cursor#4 print_sint::@5/(byte*) print_char_cursor#5 )
  (signed word) print_sint::w#6 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@5/(signed word) print_sint::w#8 )
  (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6
  call print_uint 
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  (byte*) print_char_cursor#75 ← phi( print_sint::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#75
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  (byte*) print_char_cursor#76 ← phi( print_sint::@6/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#76
  return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from mul8s_error::@1 mul8s_error::@3
  (byte*) print_char_cursor#160 ← phi( mul8s_error::@1/(byte*) print_char_cursor#54 mul8s_error::@3/(byte*) print_char_cursor#56 )
  (signed byte) print_schar::b#3 ← phi( mul8s_error::@1/(signed byte) print_schar::b#1 mul8s_error::@3/(signed byte) print_schar::b#2 )
  (bool~) print_schar::$0 ← (signed byte) print_schar::b#3 < (number) 0
  if((bool~) print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#6 ← phi( print_schar/(signed byte) print_schar::b#3 )
  (byte*) print_char_cursor#142 ← phi( print_schar/(byte*) print_char_cursor#160 )
  (byte) print_char::ch#3 ← (byte) '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  (signed byte) print_schar::b#4 ← phi( print_schar::@1/(signed byte) print_schar::b#6 )
  (byte*) print_char_cursor#77 ← phi( print_schar::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#77
  (signed byte~) print_schar::$4 ← - (signed byte) print_schar::b#4
  (signed byte) print_schar::b#0 ← (signed byte~) print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  (signed byte) print_schar::b#8 ← phi( print_schar/(signed byte) print_schar::b#3 )
  (byte*) print_char_cursor#143 ← phi( print_schar/(byte*) print_char_cursor#160 )
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  (signed byte) print_schar::b#7 ← phi( print_schar::@3/(signed byte) print_schar::b#8 )
  (byte*) print_char_cursor#78 ← phi( print_schar::@3/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#78
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  (byte*) print_char_cursor#144 ← phi( print_schar::@4/(byte*) print_char_cursor#8 print_schar::@5/(byte*) print_char_cursor#9 )
  (signed byte) print_schar::b#5 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@5/(signed byte) print_schar::b#7 )
  (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#5
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  (byte*) print_char_cursor#79 ← phi( print_schar::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#79
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  (byte*) print_char_cursor#80 ← phi( print_schar::@6/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#80
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from mul8u_error::@5 mul8u_error::@7 mul8u_error::@9 mulf_tables_cmp::@10 mulf_tables_cmp::@8 print_sint::@2
  (byte*) print_char_cursor#145 ← phi( mul8u_error::@5/(byte*) print_char_cursor#42 mul8u_error::@7/(byte*) print_char_cursor#44 mul8u_error::@9/(byte*) print_char_cursor#46 mulf_tables_cmp::@10/(byte*) print_char_cursor#31 mulf_tables_cmp::@8/(byte*) print_char_cursor#29 print_sint::@2/(byte*) print_char_cursor#141 )
  (word) print_uint::w#6 ← phi( mul8u_error::@5/(word) print_uint::w#3 mul8u_error::@7/(word) print_uint::w#4 mul8u_error::@9/(word) print_uint::w#5 mulf_tables_cmp::@10/(word) print_uint::w#2 mulf_tables_cmp::@8/(word) print_uint::w#1 print_sint::@2/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#6
  (byte) print_uchar::b#1 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#7 ← phi( print_uint/(word) print_uint::w#6 )
  (byte*) print_char_cursor#81 ← phi( print_uint/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#81
  (byte~) print_uint::$2 ← < (word) print_uint::w#7
  (byte) print_uchar::b#2 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#82 ← phi( print_uint::@1/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#82
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#83 ← phi( print_uint::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#83
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from mul8u_error::@1 mul8u_error::@3 print_schar::@2 print_uint print_uint::@1
  (byte*) print_char_cursor#146 ← phi( mul8u_error::@1/(byte*) print_char_cursor#38 mul8u_error::@3/(byte*) print_char_cursor#40 print_schar::@2/(byte*) print_char_cursor#144 print_uint/(byte*) print_char_cursor#145 print_uint::@1/(byte*) print_char_cursor#12 )
  (byte) print_uchar::b#5 ← phi( mul8u_error::@1/(byte) print_uchar::b#3 mul8u_error::@3/(byte) print_uchar::b#4 print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (number) 4
  (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#6 ← phi( print_uchar/(byte) print_uchar::b#5 )
  (byte*) print_char_cursor#84 ← phi( print_uchar/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#84
  (number~) print_uchar::$2 ← (byte) print_uchar::b#6 & (number) $f
  (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#85 ← phi( print_uchar::@1/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#85
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#86 ← phi( print_uchar::@2/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#86
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  (byte*) print_char_cursor#87 ← phi( print_schar::@1/(byte*) print_char_cursor#142 print_schar::@3/(byte*) print_char_cursor#143 print_sint::@1/(byte*) print_char_cursor#139 print_sint::@3/(byte*) print_char_cursor#140 print_str::@2/(byte*) print_char_cursor#136 print_uchar/(byte*) print_char_cursor#146 print_uchar::@1/(byte*) print_char_cursor#15 )
  (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) print_char::ch#3 print_schar::@3/(byte) print_char::ch#4 print_sint::@1/(byte) print_char::ch#1 print_sint::@3/(byte) print_char::ch#2 print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7
  (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#87
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#88 ← phi( print_char/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#88
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#2 ← phi( main/(byte*) print_screen#5 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#2
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#3 ← phi( print_cls/(byte*) print_screen#2 )
  (byte*) print_line_cursor#2 ← (byte*) print_screen#3
  (byte*) print_char_cursor#20 ← (byte*) print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#89 ← phi( print_cls::@1/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#27 ← phi( print_cls::@1/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#27
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#89
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8s mul8u_compare::@12
  (byte) mul8u::a#6 ← phi( mul8s/(byte) mul8u::a#1 mul8u_compare::@12/(byte) mul8u::a#2 )
  (byte) mul8u::b#2 ← phi( mul8s/(byte) mul8u::b#0 mul8u_compare::@12/(byte) mul8u::b#1 )
  (word) mul8u::res#0 ← (word) 0
  (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#4 ← phi( mul8u::@1/(byte) mul8u::a#3 )
  (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@5/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@5/(word) mul8u::mb#3 )
  (byte) mul8u::a#5 ← phi( mul8u::@2/(byte) mul8u::a#4 mul8u::@5/(byte) mul8u::a#7 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#7 ← phi( mul8u::@2/(byte) mul8u::a#4 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#4 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#4
  return 
  to:@return

(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
mul8s: scope:[mul8s]  from mul8s_compare::@16
  (signed byte) mul8s::b#1 ← phi( mul8s_compare::@16/(signed byte) mul8s::b#0 )
  (signed byte) mul8s::a#1 ← phi( mul8s_compare::@16/(signed byte) mul8s::a#0 )
  (byte) mul8u::a#1 ← (byte)(signed byte) mul8s::a#1
  (byte) mul8u::b#0 ← (byte)(signed byte) mul8s::b#1
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:mul8s::@5
mul8s::@5: scope:[mul8s]  from mul8s
  (signed byte) mul8s::b#4 ← phi( mul8s/(signed byte) mul8s::b#1 )
  (signed byte) mul8s::a#2 ← phi( mul8s/(signed byte) mul8s::a#1 )
  (word) mul8u::return#5 ← phi( mul8s/(word) mul8u::return#2 )
  (word~) mul8s::$0 ← (word) mul8u::return#5
  (word) mul8s::m#0 ← (word~) mul8s::$0
  (bool~) mul8s::$1 ← (signed byte) mul8s::a#2 < (number) 0
  (bool~) mul8s::$2 ← ! (bool~) mul8s::$1
  if((bool~) mul8s::$2) goto mul8s::@1
  to:mul8s::@3
mul8s::@1: scope:[mul8s]  from mul8s::@3 mul8s::@5
  (signed byte) mul8s::a#4 ← phi( mul8s::@3/(signed byte) mul8s::a#5 mul8s::@5/(signed byte) mul8s::a#2 )
  (word) mul8s::m#6 ← phi( mul8s::@3/(word) mul8s::m#1 mul8s::@5/(word) mul8s::m#0 )
  (signed byte) mul8s::b#2 ← phi( mul8s::@3/(signed byte) mul8s::b#3 mul8s::@5/(signed byte) mul8s::b#4 )
  (bool~) mul8s::$3 ← (signed byte) mul8s::b#2 < (number) 0
  (bool~) mul8s::$4 ← ! (bool~) mul8s::$3
  if((bool~) mul8s::$4) goto mul8s::@2
  to:mul8s::@4
mul8s::@3: scope:[mul8s]  from mul8s::@5
  (signed byte) mul8s::a#5 ← phi( mul8s::@5/(signed byte) mul8s::a#2 )
  (signed byte) mul8s::b#3 ← phi( mul8s::@5/(signed byte) mul8s::b#4 )
  (word) mul8s::m#3 ← phi( mul8s::@5/(word) mul8s::m#0 )
  (byte~) mul8s::$6 ← > (word) mul8s::m#3
  (byte~) mul8s::$13 ← (byte)(signed byte) mul8s::b#3
  (byte~) mul8s::$7 ← (byte~) mul8s::$6 - (byte~) mul8s::$13
  (byte~) mul8s::$11 ← (byte~) mul8s::$7
  (word) mul8s::m#1 ← (word) mul8s::m#3 hi= (byte~) mul8s::$11
  to:mul8s::@1
mul8s::@2: scope:[mul8s]  from mul8s::@1 mul8s::@4
  (word) mul8s::m#4 ← phi( mul8s::@1/(word) mul8s::m#6 mul8s::@4/(word) mul8s::m#2 )
  (signed word) mul8s::return#0 ← (signed word)(word) mul8s::m#4
  to:mul8s::@return
mul8s::@4: scope:[mul8s]  from mul8s::@1
  (signed byte) mul8s::a#3 ← phi( mul8s::@1/(signed byte) mul8s::a#4 )
  (word) mul8s::m#5 ← phi( mul8s::@1/(word) mul8s::m#6 )
  (byte~) mul8s::$9 ← > (word) mul8s::m#5
  (byte~) mul8s::$14 ← (byte)(signed byte) mul8s::a#3
  (byte~) mul8s::$10 ← (byte~) mul8s::$9 - (byte~) mul8s::$14
  (byte~) mul8s::$12 ← (byte~) mul8s::$10
  (word) mul8s::m#2 ← (word) mul8s::m#5 hi= (byte~) mul8s::$12
  to:mul8s::@2
mul8s::@return: scope:[mul8s]  from mul8s::@2
  (signed word) mul8s::return#3 ← phi( mul8s::@2/(signed word) mul8s::return#0 )
  (signed word) mul8s::return#1 ← (signed word) mul8s::return#3
  return 
  to:@return

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main::@1
  (word) mulf_init::sqr#0 ← (word) 0
  (byte) mulf_init::x_2#0 ← (byte) 0
  (byte) mulf_init::c#0 ← (byte) 0
  (byte*) mulf_init::sqr1_hi#0 ← (const byte*) mulf_sqr1_hi+(number) 1
  (byte*) mulf_init::sqr1_lo#0 ← (const byte*) mulf_sqr1_lo+(number) 1
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@4
  (byte) mulf_init::x_2#5 ← phi( mulf_init/(byte) mulf_init::x_2#0 mulf_init::@4/(byte) mulf_init::x_2#2 )
  (byte*) mulf_init::sqr1_hi#5 ← phi( mulf_init/(byte*) mulf_init::sqr1_hi#0 mulf_init::@4/(byte*) mulf_init::sqr1_hi#1 )
  (word) mulf_init::sqr#6 ← phi( mulf_init/(word) mulf_init::sqr#0 mulf_init::@4/(word) mulf_init::sqr#1 )
  (byte) mulf_init::c#3 ← phi( mulf_init/(byte) mulf_init::c#0 mulf_init::@4/(byte) mulf_init::c#4 )
  (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(byte*) mulf_init::sqr1_lo#0 mulf_init::@4/(byte*) mulf_init::sqr1_lo#1 )
  (bool~) mulf_init::$0 ← (byte*) mulf_init::sqr1_lo#2 != (const byte*) mulf_sqr1_lo+(number) $200
  if((bool~) mulf_init::$0) goto mulf_init::@2
  to:mulf_init::@3
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::x_2#4 ← phi( mulf_init::@1/(byte) mulf_init::x_2#5 )
  (byte*) mulf_init::sqr1_hi#3 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#5 )
  (byte*) mulf_init::sqr1_lo#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#2 )
  (word) mulf_init::sqr#5 ← phi( mulf_init::@1/(word) mulf_init::sqr#6 )
  (byte) mulf_init::c#2 ← phi( mulf_init::@1/(byte) mulf_init::c#3 )
  (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  (number~) mulf_init::$1 ← (byte) mulf_init::c#1 & (number) 1
  (bool~) mulf_init::$2 ← (number~) mulf_init::$1 == (number) 0
  (bool~) mulf_init::$3 ← ! (bool~) mulf_init::$2
  if((bool~) mulf_init::$3) goto mulf_init::@4
  to:mulf_init::@5
mulf_init::@3: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::x_255#0 ← (byte)(number) -1
  (byte) mulf_init::dir#0 ← (byte) $ff
  (byte*) mulf_init::sqr2_hi#0 ← (const byte*) mulf_sqr2_hi
  (byte*) mulf_init::sqr2_lo#0 ← (const byte*) mulf_sqr2_lo
  to:mulf_init::@6
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2 mulf_init::@5
  (byte) mulf_init::c#4 ← phi( mulf_init::@2/(byte) mulf_init::c#1 mulf_init::@5/(byte) mulf_init::c#5 )
  (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#4 mulf_init::@5/(byte) mulf_init::x_2#1 )
  (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_hi#3 mulf_init::@5/(byte*) mulf_init::sqr1_hi#4 )
  (byte*) mulf_init::sqr1_lo#3 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_lo#4 mulf_init::@5/(byte*) mulf_init::sqr1_lo#5 )
  (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#5 mulf_init::@5/(word) mulf_init::sqr#2 )
  (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_lo#3) ← (byte~) mulf_init::$4
  (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  (word~) mulf_init::$6 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  (word) mulf_init::sqr#1 ← (word~) mulf_init::$6
  (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#3
  to:mulf_init::@1
mulf_init::@5: scope:[mulf_init]  from mulf_init::@2
  (byte) mulf_init::c#5 ← phi( mulf_init::@2/(byte) mulf_init::c#1 )
  (byte*) mulf_init::sqr1_hi#4 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_hi#3 )
  (byte*) mulf_init::sqr1_lo#5 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_lo#4 )
  (word) mulf_init::sqr#4 ← phi( mulf_init::@2/(word) mulf_init::sqr#5 )
  (byte) mulf_init::x_2#3 ← phi( mulf_init::@2/(byte) mulf_init::x_2#4 )
  (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@4
mulf_init::@6: scope:[mulf_init]  from mulf_init::@3 mulf_init::@9
  (byte) mulf_init::dir#3 ← phi( mulf_init::@3/(byte) mulf_init::dir#0 mulf_init::@9/(byte) mulf_init::dir#4 )
  (byte*) mulf_init::sqr2_hi#3 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_hi#0 mulf_init::@9/(byte*) mulf_init::sqr2_hi#4 )
  (byte) mulf_init::x_255#3 ← phi( mulf_init::@3/(byte) mulf_init::x_255#0 mulf_init::@9/(byte) mulf_init::x_255#4 )
  (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_lo#0 mulf_init::@9/(byte*) mulf_init::sqr2_lo#1 )
  (bool~) mulf_init::$7 ← (byte*) mulf_init::sqr2_lo#2 != (const byte*) mulf_sqr2_lo+(number) $1ff
  if((bool~) mulf_init::$7) goto mulf_init::@7
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@6
  (byte) mulf_init::dir#2 ← phi( mulf_init::@6/(byte) mulf_init::dir#3 )
  (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@6/(byte*) mulf_init::sqr2_hi#3 )
  (byte*) mulf_init::sqr2_lo#3 ← phi( mulf_init::@6/(byte*) mulf_init::sqr2_lo#2 )
  (byte) mulf_init::x_255#2 ← phi( mulf_init::@6/(byte) mulf_init::x_255#3 )
  *((byte*) mulf_init::sqr2_lo#3) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  (byte~) mulf_init::$8 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  (byte) mulf_init::x_255#1 ← (byte~) mulf_init::$8
  (bool~) mulf_init::$9 ← (byte) mulf_init::x_255#1 == (number) 0
  (bool~) mulf_init::$10 ← ! (bool~) mulf_init::$9
  if((bool~) mulf_init::$10) goto mulf_init::@9
  to:mulf_init::@10
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6
  *((const byte*) mulf_sqr2_lo+(number) $1ff) ← *((const byte*) mulf_sqr1_lo+(number) $100)
  *((const byte*) mulf_sqr2_hi+(number) $1ff) ← *((const byte*) mulf_sqr1_hi+(number) $100)
  to:mulf_init::@return
mulf_init::@9: scope:[mulf_init]  from mulf_init::@10 mulf_init::@7
  (byte) mulf_init::dir#4 ← phi( mulf_init::@10/(byte) mulf_init::dir#1 mulf_init::@7/(byte) mulf_init::dir#2 )
  (byte*) mulf_init::sqr2_hi#4 ← phi( mulf_init::@10/(byte*) mulf_init::sqr2_hi#5 mulf_init::@7/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#4 ← phi( mulf_init::@10/(byte) mulf_init::x_255#5 mulf_init::@7/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#4 ← phi( mulf_init::@10/(byte*) mulf_init::sqr2_lo#5 mulf_init::@7/(byte*) mulf_init::sqr2_lo#3 )
  (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#4
  to:mulf_init::@6
mulf_init::@10: scope:[mulf_init]  from mulf_init::@7
  (byte*) mulf_init::sqr2_hi#5 ← phi( mulf_init::@7/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#5 ← phi( mulf_init::@7/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#5 ← phi( mulf_init::@7/(byte*) mulf_init::sqr2_lo#3 )
  (byte) mulf_init::dir#1 ← (number) 1
  to:mulf_init::@9
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return

(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1 mulf8u
  (byte) mulf8u_prepare::a#2 ← phi( mulf8s::mulf8s_prepare1/(byte) mulf8u_prepare::a#1 mulf8u/(byte) mulf8u_prepare::a#0 )
  *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  return 
  to:@return

(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared mulf8u::@1
  (byte) mulf8u_prepared::b#2 ← phi( mulf8s_prepared/(byte) mulf8u_prepared::b#1 mulf8u::@1/(byte) mulf8u_prepared::b#0 )
  *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#2
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  (word) mulf8u_prepared::return#0 ← ((word)) { *((const nomodify byte*) mulf8u_prepared::memB), *((const nomodify byte*) mulf8u_prepared::resL) }
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  (word) mulf8u_prepared::return#4 ← phi( mulf8u_prepared/(word) mulf8u_prepared::return#0 )
  (word) mulf8u_prepared::return#1 ← (word) mulf8u_prepared::return#4
  return 
  to:@return

(word()) mulf8u((byte) mulf8u::a , (byte) mulf8u::b)
mulf8u: scope:[mulf8u]  from mul8u_compare::@11
  (byte) mulf8u::b#2 ← phi( mul8u_compare::@11/(byte) mulf8u::b#0 )
  (byte) mulf8u::a#1 ← phi( mul8u_compare::@11/(byte) mulf8u::a#0 )
  (byte) mulf8u_prepare::a#0 ← (byte) mulf8u::a#1
  call mulf8u_prepare 
  to:mulf8u::@1
mulf8u::@1: scope:[mulf8u]  from mulf8u
  (byte) mulf8u::b#1 ← phi( mulf8u/(byte) mulf8u::b#2 )
  (byte) mulf8u_prepared::b#0 ← (byte) mulf8u::b#1
  call mulf8u_prepared 
  (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#1
  to:mulf8u::@2
mulf8u::@2: scope:[mulf8u]  from mulf8u::@1
  (word) mulf8u_prepared::return#5 ← phi( mulf8u::@1/(word) mulf8u_prepared::return#2 )
  (word~) mulf8u::$1 ← (word) mulf8u_prepared::return#5
  (word) mulf8u::return#0 ← (word~) mulf8u::$1
  to:mulf8u::@return
mulf8u::@return: scope:[mulf8u]  from mulf8u::@2
  (word) mulf8u::return#3 ← phi( mulf8u::@2/(word) mulf8u::return#0 )
  (word) mulf8u::return#1 ← (word) mulf8u::return#3
  return 
  to:@return

(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  (signed byte) mulf8s_prepared::b#1 ← phi( mulf8s::@1/(signed byte) mulf8s_prepared::b#0 )
  (byte) mulf8u_prepared::b#1 ← (byte)(signed byte) mulf8s_prepared::b#1
  call mulf8u_prepared 
  (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#1
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  (signed byte) mulf8s_prepared::b#4 ← phi( mulf8s_prepared/(signed byte) mulf8s_prepared::b#1 )
  (word) mulf8u_prepared::return#6 ← phi( mulf8s_prepared/(word) mulf8u_prepared::return#3 )
  (word~) mulf8s_prepared::$0 ← (word) mulf8u_prepared::return#6
  (word) mulf8s_prepared::m#0 ← (word~) mulf8s_prepared::$0
  (bool~) mulf8s_prepared::$1 ← *((const nomodify signed byte*) mulf8s_prepared::memA) < (number) 0
  (bool~) mulf8s_prepared::$2 ← ! (bool~) mulf8s_prepared::$1
  if((bool~) mulf8s_prepared::$2) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  (word) mulf8s_prepared::m#6 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  (signed byte) mulf8s_prepared::b#2 ← phi( mulf8s_prepared::@3/(signed byte) mulf8s_prepared::b#3 mulf8s_prepared::@5/(signed byte) mulf8s_prepared::b#4 )
  (bool~) mulf8s_prepared::$3 ← (signed byte) mulf8s_prepared::b#2 < (number) 0
  (bool~) mulf8s_prepared::$4 ← ! (bool~) mulf8s_prepared::$3
  if((bool~) mulf8s_prepared::$4) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  (signed byte) mulf8s_prepared::b#3 ← phi( mulf8s_prepared::@5/(signed byte) mulf8s_prepared::b#4 )
  (word) mulf8s_prepared::m#3 ← phi( mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#3
  (byte~) mulf8s_prepared::$13 ← (byte)(signed byte) mulf8s_prepared::b#3
  (byte~) mulf8s_prepared::$7 ← (byte~) mulf8s_prepared::$6 - (byte~) mulf8s_prepared::$13
  (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$7
  (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#3 hi= (byte~) mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#6 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  (signed word) mulf8s_prepared::return#0 ← (signed word)(word) mulf8s_prepared::m#4
  to:mulf8s_prepared::@return
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#6 )
  (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5
  (byte~) mulf8s_prepared::$14 ← (byte)*((const nomodify signed byte*) mulf8s_prepared::memA)
  (byte~) mulf8s_prepared::$10 ← (byte~) mulf8s_prepared::$9 - (byte~) mulf8s_prepared::$14
  (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$10
  (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  (signed word) mulf8s_prepared::return#3 ← phi( mulf8s_prepared::@2/(signed word) mulf8s_prepared::return#0 )
  (signed word) mulf8s_prepared::return#1 ← (signed word) mulf8s_prepared::return#3
  return 
  to:@return

(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
mulf8s: scope:[mulf8s]  from mul8s_compare::@15
  (signed byte) mulf8s::b#4 ← phi( mul8s_compare::@15/(signed byte) mulf8s::b#0 )
  (signed byte) mulf8s::a#1 ← phi( mul8s_compare::@15/(signed byte) mulf8s::a#0 )
  (signed byte) mulf8s::mulf8s_prepare1_a#0 ← (signed byte) mulf8s::a#1
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  (signed byte) mulf8s::b#3 ← phi( mulf8s/(signed byte) mulf8s::b#4 )
  (signed byte) mulf8s::mulf8s_prepare1_a#1 ← phi( mulf8s/(signed byte) mulf8s::mulf8s_prepare1_a#0 )
  (byte) mulf8u_prepare::a#1 ← (byte)(signed byte) mulf8s::mulf8s_prepare1_a#1
  call mulf8u_prepare 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  (signed byte) mulf8s::b#2 ← phi( mulf8s::mulf8s_prepare1/(signed byte) mulf8s::b#3 )
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::@2
  (signed byte) mulf8s::b#1 ← phi( mulf8s::@2/(signed byte) mulf8s::b#2 )
  (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#1
  call mulf8s_prepared 
  (signed word) mulf8s_prepared::return#2 ← (signed word) mulf8s_prepared::return#1
  to:mulf8s::@3
mulf8s::@3: scope:[mulf8s]  from mulf8s::@1
  (signed word) mulf8s_prepared::return#4 ← phi( mulf8s::@1/(signed word) mulf8s_prepared::return#2 )
  (signed word~) mulf8s::$1 ← (signed word) mulf8s_prepared::return#4
  (signed word) mulf8s::return#0 ← (signed word~) mulf8s::$1
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@3
  (signed word) mulf8s::return#3 ← phi( mulf8s::@3/(signed word) mulf8s::return#0 )
  (signed word) mulf8s::return#1 ← (signed word) mulf8s::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) print_char_cursor#147 ← phi( __start::@1/(byte*) print_char_cursor#157 )
  (byte*) print_line_cursor#48 ← phi( __start::@1/(byte*) print_line_cursor#58 )
  (byte*) print_screen#5 ← phi( __start::@1/(byte*) print_screen#7 )
  *((const byte*) BG_COLOR) ← (number) 5
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#90 ← phi( main/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#28 ← phi( main/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#90
  call mulf_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#59 ← phi( main::@1/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#161 ← phi( main::@1/(byte*) print_char_cursor#22 )
  call mulf_init_asm 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) print_line_cursor#49 ← phi( main::@2/(byte*) print_line_cursor#59 )
  (byte*) print_char_cursor#148 ← phi( main::@2/(byte*) print_char_cursor#161 )
  call mulf_tables_cmp 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_line_cursor#29 ← phi( main::@3/(byte*) print_line_cursor#10 )
  (byte*) print_char_cursor#91 ← phi( main::@3/(byte*) print_char_cursor#33 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#91
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#29
  call mul8u_compare 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) print_line_cursor#30 ← phi( main::@4/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#92 ← phi( main::@4/(byte*) print_char_cursor#35 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#92
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#30
  call mul8s_compare 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_line_cursor#31 ← phi( main::@5/(byte*) print_line_cursor#18 )
  (byte*) print_char_cursor#93 ← phi( main::@5/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#93
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#31
  to:main::@return
main::@return: scope:[main]  from main::@6
  (byte*) print_char_cursor#94 ← phi( main::@6/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#32 ← phi( main::@6/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#94
  return 
  to:@return

(word()) muls8u((byte) muls8u::a , (byte) muls8u::b)
muls8u: scope:[muls8u]  from mul8u_compare::@2
  (byte) muls8u::b#4 ← phi( mul8u_compare::@2/(byte) muls8u::b#0 )
  (byte) muls8u::a#1 ← phi( mul8u_compare::@2/(byte) muls8u::a#0 )
  (word) muls8u::m#0 ← (word) 0
  (bool~) muls8u::$0 ← (byte) muls8u::a#1 != (number) 0
  (bool~) muls8u::$1 ← ! (bool~) muls8u::$0
  if((bool~) muls8u::$1) goto muls8u::@1
  to:muls8u::@2
muls8u::@1: scope:[muls8u]  from muls8u muls8u::@3
  (word) muls8u::m#2 ← phi( muls8u/(word) muls8u::m#0 muls8u::@3/(word) muls8u::m#4 )
  (word) muls8u::return#0 ← (word) muls8u::m#2
  to:muls8u::@return
muls8u::@2: scope:[muls8u]  from muls8u
  (byte) muls8u::b#3 ← phi( muls8u/(byte) muls8u::b#4 )
  (word) muls8u::m#5 ← phi( muls8u/(word) muls8u::m#0 )
  (byte) muls8u::a#3 ← phi( muls8u/(byte) muls8u::a#1 )
  (byte) muls8u::i#0 ← (byte) 0
  to:muls8u::@3
muls8u::@3: scope:[muls8u]  from muls8u::@2 muls8u::@4
  (byte) muls8u::b#2 ← phi( muls8u::@2/(byte) muls8u::b#3 muls8u::@4/(byte) muls8u::b#1 )
  (word) muls8u::m#4 ← phi( muls8u::@2/(word) muls8u::m#5 muls8u::@4/(word) muls8u::m#1 )
  (byte) muls8u::a#2 ← phi( muls8u::@2/(byte) muls8u::a#3 muls8u::@4/(byte) muls8u::a#4 )
  (byte) muls8u::i#2 ← phi( muls8u::@2/(byte) muls8u::i#0 muls8u::@4/(byte) muls8u::i#1 )
  (bool~) muls8u::$2 ← (byte) muls8u::i#2 != (byte) muls8u::a#2
  if((bool~) muls8u::$2) goto muls8u::@4
  to:muls8u::@1
muls8u::@4: scope:[muls8u]  from muls8u::@3
  (byte) muls8u::a#4 ← phi( muls8u::@3/(byte) muls8u::a#2 )
  (byte) muls8u::i#3 ← phi( muls8u::@3/(byte) muls8u::i#2 )
  (byte) muls8u::b#1 ← phi( muls8u::@3/(byte) muls8u::b#2 )
  (word) muls8u::m#3 ← phi( muls8u::@3/(word) muls8u::m#4 )
  (word~) muls8u::$3 ← (word) muls8u::m#3 + (byte) muls8u::b#1
  (word) muls8u::m#1 ← (word~) muls8u::$3
  (byte) muls8u::i#1 ← ++ (byte) muls8u::i#3
  to:muls8u::@3
muls8u::@return: scope:[muls8u]  from muls8u::@1
  (word) muls8u::return#3 ← phi( muls8u::@1/(word) muls8u::return#0 )
  (word) muls8u::return#1 ← (word) muls8u::return#3
  return 
  to:@return

(signed word()) muls8s((signed byte) muls8s::a , (signed byte) muls8s::b)
muls8s: scope:[muls8s]  from mul8s_compare::@5
  (signed byte) muls8s::b#7 ← phi( mul8s_compare::@5/(signed byte) muls8s::b#0 )
  (signed byte) muls8s::a#1 ← phi( mul8s_compare::@5/(signed byte) muls8s::a#0 )
  (signed word) muls8s::m#0 ← (signed word) 0
  (bool~) muls8s::$0 ← (signed byte) muls8s::a#1 < (number) 0
  if((bool~) muls8s::$0) goto muls8s::@1
  to:muls8s::@3
muls8s::@1: scope:[muls8s]  from muls8s
  (signed byte) muls8s::b#6 ← phi( muls8s/(signed byte) muls8s::b#7 )
  (signed word) muls8s::m#10 ← phi( muls8s/(signed word) muls8s::m#0 )
  (signed byte) muls8s::a#7 ← phi( muls8s/(signed byte) muls8s::a#1 )
  (signed byte) muls8s::i#0 ← (signed byte) 0
  to:muls8s::@7
muls8s::@3: scope:[muls8s]  from muls8s
  (signed byte) muls8s::b#8 ← phi( muls8s/(signed byte) muls8s::b#7 )
  (signed word) muls8s::m#7 ← phi( muls8s/(signed word) muls8s::m#0 )
  (signed byte) muls8s::a#2 ← phi( muls8s/(signed byte) muls8s::a#1 )
  (bool~) muls8s::$1 ← (signed byte) muls8s::a#2 > (number) 0
  (bool~) muls8s::$2 ← ! (bool~) muls8s::$1
  if((bool~) muls8s::$2) goto muls8s::@2
  to:muls8s::@4
muls8s::@4: scope:[muls8s]  from muls8s::@3
  (signed byte) muls8s::b#5 ← phi( muls8s::@3/(signed byte) muls8s::b#8 )
  (signed word) muls8s::m#9 ← phi( muls8s::@3/(signed word) muls8s::m#7 )
  (signed byte) muls8s::a#5 ← phi( muls8s::@3/(signed byte) muls8s::a#2 )
  (signed byte) muls8s::j#0 ← (signed byte) 0
  to:muls8s::@5
muls8s::@5: scope:[muls8s]  from muls8s::@4 muls8s::@6
  (signed byte) muls8s::b#3 ← phi( muls8s::@4/(signed byte) muls8s::b#5 muls8s::@6/(signed byte) muls8s::b#1 )
  (signed word) muls8s::m#6 ← phi( muls8s::@4/(signed word) muls8s::m#9 muls8s::@6/(signed word) muls8s::m#1 )
  (signed byte) muls8s::a#3 ← phi( muls8s::@4/(signed byte) muls8s::a#5 muls8s::@6/(signed byte) muls8s::a#6 )
  (signed byte) muls8s::j#2 ← phi( muls8s::@4/(signed byte) muls8s::j#0 muls8s::@6/(signed byte) muls8s::j#1 )
  (bool~) muls8s::$3 ← (signed byte) muls8s::j#2 != (signed byte) muls8s::a#3
  if((bool~) muls8s::$3) goto muls8s::@6
  to:muls8s::@2
muls8s::@6: scope:[muls8s]  from muls8s::@5
  (signed byte) muls8s::a#6 ← phi( muls8s::@5/(signed byte) muls8s::a#3 )
  (signed byte) muls8s::j#3 ← phi( muls8s::@5/(signed byte) muls8s::j#2 )
  (signed byte) muls8s::b#1 ← phi( muls8s::@5/(signed byte) muls8s::b#3 )
  (signed word) muls8s::m#3 ← phi( muls8s::@5/(signed word) muls8s::m#6 )
  (signed word~) muls8s::$4 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#1
  (signed word) muls8s::m#1 ← (signed word~) muls8s::$4
  (signed byte) muls8s::j#1 ← ++ (signed byte) muls8s::j#3
  to:muls8s::@5
muls8s::@2: scope:[muls8s]  from muls8s::@3 muls8s::@5 muls8s::@7
  (signed word) muls8s::m#4 ← phi( muls8s::@3/(signed word) muls8s::m#7 muls8s::@5/(signed word) muls8s::m#6 muls8s::@7/(signed word) muls8s::m#8 )
  (signed word) muls8s::return#0 ← (signed word) muls8s::m#4
  to:muls8s::@return
muls8s::@7: scope:[muls8s]  from muls8s::@1 muls8s::@8
  (signed byte) muls8s::b#4 ← phi( muls8s::@1/(signed byte) muls8s::b#6 muls8s::@8/(signed byte) muls8s::b#2 )
  (signed word) muls8s::m#8 ← phi( muls8s::@1/(signed word) muls8s::m#10 muls8s::@8/(signed word) muls8s::m#2 )
  (signed byte) muls8s::a#4 ← phi( muls8s::@1/(signed byte) muls8s::a#7 muls8s::@8/(signed byte) muls8s::a#8 )
  (signed byte) muls8s::i#2 ← phi( muls8s::@1/(signed byte) muls8s::i#0 muls8s::@8/(signed byte) muls8s::i#1 )
  (bool~) muls8s::$5 ← (signed byte) muls8s::i#2 != (signed byte) muls8s::a#4
  if((bool~) muls8s::$5) goto muls8s::@8
  to:muls8s::@2
muls8s::@8: scope:[muls8s]  from muls8s::@7
  (signed byte) muls8s::a#8 ← phi( muls8s::@7/(signed byte) muls8s::a#4 )
  (signed byte) muls8s::i#3 ← phi( muls8s::@7/(signed byte) muls8s::i#2 )
  (signed byte) muls8s::b#2 ← phi( muls8s::@7/(signed byte) muls8s::b#4 )
  (signed word) muls8s::m#5 ← phi( muls8s::@7/(signed word) muls8s::m#8 )
  (signed word~) muls8s::$6 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#2
  (signed word) muls8s::m#2 ← (signed word~) muls8s::$6
  (signed byte) muls8s::i#1 ← -- (signed byte) muls8s::i#3
  to:muls8s::@7
muls8s::@return: scope:[muls8s]  from muls8s::@2
  (signed word) muls8s::return#3 ← phi( muls8s::@2/(signed word) muls8s::return#0 )
  (signed word) muls8s::return#1 ← (signed word) muls8s::return#3
  return 
  to:@return

(void()) mulf_init_asm()
mulf_init_asm: scope:[mulf_init_asm]  from main::@2
  asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  }
  *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo)
  *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi)
  *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo)
  *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi)
  to:mulf_init_asm::@return
mulf_init_asm::@return: scope:[mulf_init_asm]  from mulf_init_asm
  return 
  to:@return

(void()) mulf_tables_cmp()
mulf_tables_cmp: scope:[mulf_tables_cmp]  from main::@3
  (byte*) print_line_cursor#78 ← phi( main::@3/(byte*) print_line_cursor#49 )
  (byte*) print_char_cursor#168 ← phi( main::@3/(byte*) print_char_cursor#148 )
  (byte*) mulf_tables_cmp::asm_sqr#0 ← (const byte*) mula_sqr1_lo
  (byte*) mulf_tables_cmp::kc_sqr#0 ← (const byte*) mulf_sqr1_lo
  to:mulf_tables_cmp::@1
mulf_tables_cmp::@1: scope:[mulf_tables_cmp]  from mulf_tables_cmp mulf_tables_cmp::@4
  (byte*) print_line_cursor#68 ← phi( mulf_tables_cmp/(byte*) print_line_cursor#78 mulf_tables_cmp::@4/(byte*) print_line_cursor#79 )
  (byte*) print_char_cursor#162 ← phi( mulf_tables_cmp/(byte*) print_char_cursor#168 mulf_tables_cmp::@4/(byte*) print_char_cursor#169 )
  (byte*) mulf_tables_cmp::asm_sqr#5 ← phi( mulf_tables_cmp/(byte*) mulf_tables_cmp::asm_sqr#0 mulf_tables_cmp::@4/(byte*) mulf_tables_cmp::asm_sqr#1 )
  (byte*) mulf_tables_cmp::kc_sqr#2 ← phi( mulf_tables_cmp/(byte*) mulf_tables_cmp::kc_sqr#0 mulf_tables_cmp::@4/(byte*) mulf_tables_cmp::kc_sqr#1 )
  (bool~) mulf_tables_cmp::$2 ← (byte*) mulf_tables_cmp::kc_sqr#2 < (const byte*) mulf_sqr1_lo+(number) $200*(number) 4
  if((bool~) mulf_tables_cmp::$2) goto mulf_tables_cmp::@2
  to:mulf_tables_cmp::@3
mulf_tables_cmp::@2: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@1
  (byte*) print_line_cursor#90 ← phi( mulf_tables_cmp::@1/(byte*) print_line_cursor#68 )
  (byte*) print_char_cursor#163 ← phi( mulf_tables_cmp::@1/(byte*) print_char_cursor#162 )
  (byte*) mulf_tables_cmp::asm_sqr#2 ← phi( mulf_tables_cmp::@1/(byte*) mulf_tables_cmp::asm_sqr#5 )
  (byte*) mulf_tables_cmp::kc_sqr#3 ← phi( mulf_tables_cmp::@1/(byte*) mulf_tables_cmp::kc_sqr#2 )
  (bool~) mulf_tables_cmp::$3 ← *((byte*) mulf_tables_cmp::kc_sqr#3) != *((byte*) mulf_tables_cmp::asm_sqr#2)
  (bool~) mulf_tables_cmp::$4 ← ! (bool~) mulf_tables_cmp::$3
  if((bool~) mulf_tables_cmp::$4) goto mulf_tables_cmp::@4
  to:mulf_tables_cmp::@5
mulf_tables_cmp::@3: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@1
  (byte*) print_line_cursor#60 ← phi( mulf_tables_cmp::@1/(byte*) print_line_cursor#68 )
  (byte*) print_char_cursor#149 ← phi( mulf_tables_cmp::@1/(byte*) print_char_cursor#162 )
  (byte*) print_str::str#1 ← (const byte*) mulf_tables_cmp::str
  call print_str 
  to:mulf_tables_cmp::@6
mulf_tables_cmp::@6: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@3
  (byte*) print_line_cursor#50 ← phi( mulf_tables_cmp::@3/(byte*) print_line_cursor#60 )
  (byte*) print_char_cursor#95 ← phi( mulf_tables_cmp::@3/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#95
  call print_ln 
  to:mulf_tables_cmp::@7
mulf_tables_cmp::@7: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@6
  (byte*) print_char_cursor#96 ← phi( mulf_tables_cmp::@6/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#33 ← phi( mulf_tables_cmp::@6/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#33
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#96
  to:mulf_tables_cmp::@return
mulf_tables_cmp::@4: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@2
  (byte*) print_line_cursor#79 ← phi( mulf_tables_cmp::@2/(byte*) print_line_cursor#90 )
  (byte*) print_char_cursor#169 ← phi( mulf_tables_cmp::@2/(byte*) print_char_cursor#163 )
  (byte*) mulf_tables_cmp::kc_sqr#4 ← phi( mulf_tables_cmp::@2/(byte*) mulf_tables_cmp::kc_sqr#3 )
  (byte*) mulf_tables_cmp::asm_sqr#3 ← phi( mulf_tables_cmp::@2/(byte*) mulf_tables_cmp::asm_sqr#2 )
  (byte*) mulf_tables_cmp::asm_sqr#1 ← ++ (byte*) mulf_tables_cmp::asm_sqr#3
  (byte*) mulf_tables_cmp::kc_sqr#1 ← ++ (byte*) mulf_tables_cmp::kc_sqr#4
  to:mulf_tables_cmp::@1
mulf_tables_cmp::@5: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@2
  (byte*) print_line_cursor#91 ← phi( mulf_tables_cmp::@2/(byte*) print_line_cursor#90 )
  (byte*) mulf_tables_cmp::kc_sqr#8 ← phi( mulf_tables_cmp::@2/(byte*) mulf_tables_cmp::kc_sqr#3 )
  (byte*) mulf_tables_cmp::asm_sqr#6 ← phi( mulf_tables_cmp::@2/(byte*) mulf_tables_cmp::asm_sqr#2 )
  (byte*) print_char_cursor#150 ← phi( mulf_tables_cmp::@2/(byte*) print_char_cursor#163 )
  *((const byte*) BG_COLOR) ← (number) 2
  (byte*) print_str::str#2 ← (const byte*) mulf_tables_cmp::str1
  call print_str 
  to:mulf_tables_cmp::@8
mulf_tables_cmp::@8: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@5
  (byte*) print_line_cursor#80 ← phi( mulf_tables_cmp::@5/(byte*) print_line_cursor#91 )
  (byte*) mulf_tables_cmp::kc_sqr#7 ← phi( mulf_tables_cmp::@5/(byte*) mulf_tables_cmp::kc_sqr#8 )
  (byte*) mulf_tables_cmp::asm_sqr#4 ← phi( mulf_tables_cmp::@5/(byte*) mulf_tables_cmp::asm_sqr#6 )
  (byte*) print_char_cursor#97 ← phi( mulf_tables_cmp::@5/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#97
  (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#4
  call print_uint 
  to:mulf_tables_cmp::@9
mulf_tables_cmp::@9: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@8
  (byte*) print_line_cursor#69 ← phi( mulf_tables_cmp::@8/(byte*) print_line_cursor#80 )
  (byte*) mulf_tables_cmp::kc_sqr#6 ← phi( mulf_tables_cmp::@8/(byte*) mulf_tables_cmp::kc_sqr#7 )
  (byte*) print_char_cursor#98 ← phi( mulf_tables_cmp::@8/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#98
  (byte*) print_str::str#3 ← (const byte*) mulf_tables_cmp::str2
  call print_str 
  to:mulf_tables_cmp::@10
mulf_tables_cmp::@10: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@9
  (byte*) print_line_cursor#61 ← phi( mulf_tables_cmp::@9/(byte*) print_line_cursor#69 )
  (byte*) mulf_tables_cmp::kc_sqr#5 ← phi( mulf_tables_cmp::@9/(byte*) mulf_tables_cmp::kc_sqr#6 )
  (byte*) print_char_cursor#99 ← phi( mulf_tables_cmp::@9/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#99
  (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#5
  call print_uint 
  to:mulf_tables_cmp::@11
mulf_tables_cmp::@11: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@10
  (byte*) print_line_cursor#51 ← phi( mulf_tables_cmp::@10/(byte*) print_line_cursor#61 )
  (byte*) print_char_cursor#100 ← phi( mulf_tables_cmp::@10/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#100
  to:mulf_tables_cmp::@return
mulf_tables_cmp::@return: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@11 mulf_tables_cmp::@7
  (byte*) print_line_cursor#34 ← phi( mulf_tables_cmp::@11/(byte*) print_line_cursor#51 mulf_tables_cmp::@7/(byte*) print_line_cursor#9 )
  (byte*) print_char_cursor#101 ← phi( mulf_tables_cmp::@11/(byte*) print_char_cursor#32 mulf_tables_cmp::@7/(byte*) print_char_cursor#28 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#101
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#34
  return 
  to:@return

(void()) mul8u_compare()
mul8u_compare: scope:[mul8u_compare]  from main::@4
  (byte*) print_line_cursor#110 ← phi( main::@4/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#191 ← phi( main::@4/(byte*) print_char_cursor#23 )
  (byte) mul8u_compare::a#0 ← (byte) 0
  to:mul8u_compare::@1
mul8u_compare::@1: scope:[mul8u_compare]  from mul8u_compare mul8u_compare::@9
  (byte*) print_line_cursor#107 ← phi( mul8u_compare/(byte*) print_line_cursor#110 mul8u_compare::@9/(byte*) print_line_cursor#72 )
  (byte*) print_char_cursor#190 ← phi( mul8u_compare/(byte*) print_char_cursor#191 mul8u_compare::@9/(byte*) print_char_cursor#165 )
  (byte) mul8u_compare::a#7 ← phi( mul8u_compare/(byte) mul8u_compare::a#0 mul8u_compare::@9/(byte) mul8u_compare::a#1 )
  (byte) mul8u_compare::b#0 ← (byte) 0
  to:mul8u_compare::@2
mul8u_compare::@2: scope:[mul8u_compare]  from mul8u_compare::@1 mul8u_compare::@5
  (byte*) print_line_cursor#103 ← phi( mul8u_compare::@1/(byte*) print_line_cursor#107 mul8u_compare::@5/(byte*) print_line_cursor#83 )
  (byte*) print_char_cursor#188 ← phi( mul8u_compare::@1/(byte*) print_char_cursor#190 mul8u_compare::@5/(byte*) print_char_cursor#172 )
  (byte) mul8u_compare::b#2 ← phi( mul8u_compare::@1/(byte) mul8u_compare::b#0 mul8u_compare::@5/(byte) mul8u_compare::b#1 )
  (byte) mul8u_compare::a#2 ← phi( mul8u_compare::@1/(byte) mul8u_compare::a#7 mul8u_compare::@5/(byte) mul8u_compare::a#8 )
  (byte) muls8u::a#0 ← (byte) mul8u_compare::a#2
  (byte) muls8u::b#0 ← (byte) mul8u_compare::b#2
  call muls8u 
  (word) muls8u::return#2 ← (word) muls8u::return#1
  to:mul8u_compare::@11
mul8u_compare::@11: scope:[mul8u_compare]  from mul8u_compare::@2
  (byte*) print_line_cursor#97 ← phi( mul8u_compare::@2/(byte*) print_line_cursor#103 )
  (byte*) print_char_cursor#186 ← phi( mul8u_compare::@2/(byte*) print_char_cursor#188 )
  (byte) mul8u_compare::b#3 ← phi( mul8u_compare::@2/(byte) mul8u_compare::b#2 )
  (byte) mul8u_compare::a#3 ← phi( mul8u_compare::@2/(byte) mul8u_compare::a#2 )
  (word) muls8u::return#4 ← phi( mul8u_compare::@2/(word) muls8u::return#2 )
  (word~) mul8u_compare::$2 ← (word) muls8u::return#4
  (word) mul8u_compare::ms#0 ← (word~) mul8u_compare::$2
  (byte) mulf8u::a#0 ← (byte) mul8u_compare::a#3
  (byte) mulf8u::b#0 ← (byte) mul8u_compare::b#3
  call mulf8u 
  (word) mulf8u::return#2 ← (word) mulf8u::return#1
  to:mul8u_compare::@12
mul8u_compare::@12: scope:[mul8u_compare]  from mul8u_compare::@11
  (byte*) print_line_cursor#92 ← phi( mul8u_compare::@11/(byte*) print_line_cursor#97 )
  (byte*) print_char_cursor#182 ← phi( mul8u_compare::@11/(byte*) print_char_cursor#186 )
  (word) mul8u_compare::ms#4 ← phi( mul8u_compare::@11/(word) mul8u_compare::ms#0 )
  (byte) mul8u_compare::b#4 ← phi( mul8u_compare::@11/(byte) mul8u_compare::b#3 )
  (byte) mul8u_compare::a#4 ← phi( mul8u_compare::@11/(byte) mul8u_compare::a#3 )
  (word) mulf8u::return#4 ← phi( mul8u_compare::@11/(word) mulf8u::return#2 )
  (word~) mul8u_compare::$3 ← (word) mulf8u::return#4
  (word) mul8u_compare::mf#0 ← (word~) mul8u_compare::$3
  (byte) mul8u::a#2 ← (byte) mul8u_compare::a#4
  (byte) mul8u::b#1 ← (byte) mul8u_compare::b#4
  call mul8u 
  (word) mul8u::return#3 ← (word) mul8u::return#1
  to:mul8u_compare::@13
mul8u_compare::@13: scope:[mul8u_compare]  from mul8u_compare::@12
  (byte*) print_line_cursor#81 ← phi( mul8u_compare::@12/(byte*) print_line_cursor#92 )
  (byte*) print_char_cursor#177 ← phi( mul8u_compare::@12/(byte*) print_char_cursor#182 )
  (byte) mul8u_compare::a#12 ← phi( mul8u_compare::@12/(byte) mul8u_compare::a#4 )
  (byte) mul8u_compare::b#10 ← phi( mul8u_compare::@12/(byte) mul8u_compare::b#4 )
  (word) mul8u_compare::mf#1 ← phi( mul8u_compare::@12/(word) mul8u_compare::mf#0 )
  (word) mul8u_compare::ms#1 ← phi( mul8u_compare::@12/(word) mul8u_compare::ms#4 )
  (word) mul8u::return#6 ← phi( mul8u_compare::@12/(word) mul8u::return#3 )
  (word~) mul8u_compare::$4 ← (word) mul8u::return#6
  (word) mul8u_compare::mn#0 ← (word~) mul8u_compare::$4
  (byte) mul8u_compare::ok#0 ← (byte) 1
  (bool~) mul8u_compare::$5 ← (word) mul8u_compare::ms#1 != (word) mul8u_compare::mf#1
  (bool~) mul8u_compare::$6 ← ! (bool~) mul8u_compare::$5
  if((bool~) mul8u_compare::$6) goto mul8u_compare::@3
  to:mul8u_compare::@6
mul8u_compare::@3: scope:[mul8u_compare]  from mul8u_compare::@13 mul8u_compare::@6
  (byte*) print_line_cursor#70 ← phi( mul8u_compare::@13/(byte*) print_line_cursor#81 mul8u_compare::@6/(byte*) print_line_cursor#82 )
  (byte*) print_char_cursor#170 ← phi( mul8u_compare::@13/(byte*) print_char_cursor#177 mul8u_compare::@6/(byte*) print_char_cursor#178 )
  (word) mul8u_compare::mf#4 ← phi( mul8u_compare::@13/(word) mul8u_compare::mf#1 mul8u_compare::@6/(word) mul8u_compare::mf#6 )
  (byte) mul8u_compare::a#10 ← phi( mul8u_compare::@13/(byte) mul8u_compare::a#12 mul8u_compare::@6/(byte) mul8u_compare::a#13 )
  (byte) mul8u_compare::b#8 ← phi( mul8u_compare::@13/(byte) mul8u_compare::b#10 mul8u_compare::@6/(byte) mul8u_compare::b#11 )
  (byte) mul8u_compare::ok#4 ← phi( mul8u_compare::@13/(byte) mul8u_compare::ok#0 mul8u_compare::@6/(byte) mul8u_compare::ok#1 )
  (word) mul8u_compare::mn#1 ← phi( mul8u_compare::@13/(word) mul8u_compare::mn#0 mul8u_compare::@6/(word) mul8u_compare::mn#3 )
  (word) mul8u_compare::ms#2 ← phi( mul8u_compare::@13/(word) mul8u_compare::ms#1 mul8u_compare::@6/(word) mul8u_compare::ms#5 )
  (bool~) mul8u_compare::$7 ← (word) mul8u_compare::ms#2 != (word) mul8u_compare::mn#1
  (bool~) mul8u_compare::$8 ← ! (bool~) mul8u_compare::$7
  if((bool~) mul8u_compare::$8) goto mul8u_compare::@4
  to:mul8u_compare::@7
mul8u_compare::@6: scope:[mul8u_compare]  from mul8u_compare::@13
  (byte*) print_line_cursor#82 ← phi( mul8u_compare::@13/(byte*) print_line_cursor#81 )
  (byte*) print_char_cursor#178 ← phi( mul8u_compare::@13/(byte*) print_char_cursor#177 )
  (word) mul8u_compare::mf#6 ← phi( mul8u_compare::@13/(word) mul8u_compare::mf#1 )
  (byte) mul8u_compare::a#13 ← phi( mul8u_compare::@13/(byte) mul8u_compare::a#12 )
  (byte) mul8u_compare::b#11 ← phi( mul8u_compare::@13/(byte) mul8u_compare::b#10 )
  (word) mul8u_compare::mn#3 ← phi( mul8u_compare::@13/(word) mul8u_compare::mn#0 )
  (word) mul8u_compare::ms#5 ← phi( mul8u_compare::@13/(word) mul8u_compare::ms#1 )
  (byte) mul8u_compare::ok#1 ← (number) 0
  to:mul8u_compare::@3
mul8u_compare::@4: scope:[mul8u_compare]  from mul8u_compare::@3 mul8u_compare::@7
  (byte*) print_line_cursor#62 ← phi( mul8u_compare::@3/(byte*) print_line_cursor#70 mul8u_compare::@7/(byte*) print_line_cursor#71 )
  (byte*) print_char_cursor#164 ← phi( mul8u_compare::@3/(byte*) print_char_cursor#170 mul8u_compare::@7/(byte*) print_char_cursor#171 )
  (word) mul8u_compare::mf#3 ← phi( mul8u_compare::@3/(word) mul8u_compare::mf#4 mul8u_compare::@7/(word) mul8u_compare::mf#5 )
  (word) mul8u_compare::mn#4 ← phi( mul8u_compare::@3/(word) mul8u_compare::mn#1 mul8u_compare::@7/(word) mul8u_compare::mn#5 )
  (word) mul8u_compare::ms#6 ← phi( mul8u_compare::@3/(word) mul8u_compare::ms#2 mul8u_compare::@7/(word) mul8u_compare::ms#7 )
  (byte) mul8u_compare::a#9 ← phi( mul8u_compare::@3/(byte) mul8u_compare::a#10 mul8u_compare::@7/(byte) mul8u_compare::a#11 )
  (byte) mul8u_compare::b#7 ← phi( mul8u_compare::@3/(byte) mul8u_compare::b#8 mul8u_compare::@7/(byte) mul8u_compare::b#9 )
  (byte) mul8u_compare::ok#3 ← phi( mul8u_compare::@3/(byte) mul8u_compare::ok#4 mul8u_compare::@7/(byte) mul8u_compare::ok#2 )
  (bool~) mul8u_compare::$9 ← (byte) mul8u_compare::ok#3 == (number) 0
  (bool~) mul8u_compare::$10 ← ! (bool~) mul8u_compare::$9
  if((bool~) mul8u_compare::$10) goto mul8u_compare::@5
  to:mul8u_compare::@8
mul8u_compare::@7: scope:[mul8u_compare]  from mul8u_compare::@3
  (byte*) print_line_cursor#71 ← phi( mul8u_compare::@3/(byte*) print_line_cursor#70 )
  (byte*) print_char_cursor#171 ← phi( mul8u_compare::@3/(byte*) print_char_cursor#170 )
  (word) mul8u_compare::mf#5 ← phi( mul8u_compare::@3/(word) mul8u_compare::mf#4 )
  (word) mul8u_compare::mn#5 ← phi( mul8u_compare::@3/(word) mul8u_compare::mn#1 )
  (word) mul8u_compare::ms#7 ← phi( mul8u_compare::@3/(word) mul8u_compare::ms#2 )
  (byte) mul8u_compare::a#11 ← phi( mul8u_compare::@3/(byte) mul8u_compare::a#10 )
  (byte) mul8u_compare::b#9 ← phi( mul8u_compare::@3/(byte) mul8u_compare::b#8 )
  (byte) mul8u_compare::ok#2 ← (number) 0
  to:mul8u_compare::@4
mul8u_compare::@5: scope:[mul8u_compare]  from mul8u_compare::@4
  (byte*) print_line_cursor#83 ← phi( mul8u_compare::@4/(byte*) print_line_cursor#62 )
  (byte*) print_char_cursor#172 ← phi( mul8u_compare::@4/(byte*) print_char_cursor#164 )
  (byte) mul8u_compare::a#8 ← phi( mul8u_compare::@4/(byte) mul8u_compare::a#9 )
  (byte) mul8u_compare::b#5 ← phi( mul8u_compare::@4/(byte) mul8u_compare::b#7 )
  (byte) mul8u_compare::b#1 ← (byte) mul8u_compare::b#5 + rangenext(0,$ff)
  (bool~) mul8u_compare::$12 ← (byte) mul8u_compare::b#1 != rangelast(0,$ff)
  if((bool~) mul8u_compare::$12) goto mul8u_compare::@2
  to:mul8u_compare::@9
mul8u_compare::@8: scope:[mul8u_compare]  from mul8u_compare::@4
  (byte*) print_line_cursor#52 ← phi( mul8u_compare::@4/(byte*) print_line_cursor#62 )
  (byte*) print_char_cursor#151 ← phi( mul8u_compare::@4/(byte*) print_char_cursor#164 )
  (word) mul8u_compare::mf#2 ← phi( mul8u_compare::@4/(word) mul8u_compare::mf#3 )
  (word) mul8u_compare::mn#2 ← phi( mul8u_compare::@4/(word) mul8u_compare::mn#4 )
  (word) mul8u_compare::ms#3 ← phi( mul8u_compare::@4/(word) mul8u_compare::ms#6 )
  (byte) mul8u_compare::b#6 ← phi( mul8u_compare::@4/(byte) mul8u_compare::b#7 )
  (byte) mul8u_compare::a#5 ← phi( mul8u_compare::@4/(byte) mul8u_compare::a#9 )
  *((const byte*) BG_COLOR) ← (number) 2
  (byte) mul8u_error::a#0 ← (byte) mul8u_compare::a#5
  (byte) mul8u_error::b#0 ← (byte) mul8u_compare::b#6
  (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#3
  (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#2
  (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#2
  call mul8u_error 
  to:mul8u_compare::@14
mul8u_compare::@14: scope:[mul8u_compare]  from mul8u_compare::@8
  (byte*) print_line_cursor#35 ← phi( mul8u_compare::@8/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#102 ← phi( mul8u_compare::@8/(byte*) print_char_cursor#49 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#102
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#35
  to:mul8u_compare::@return
mul8u_compare::@return: scope:[mul8u_compare]  from mul8u_compare::@14 mul8u_compare::@16
  (byte*) print_line_cursor#36 ← phi( mul8u_compare::@14/(byte*) print_line_cursor#11 mul8u_compare::@16/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#103 ← phi( mul8u_compare::@14/(byte*) print_char_cursor#34 mul8u_compare::@16/(byte*) print_char_cursor#37 )
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#103
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#36
  return 
  to:@return
mul8u_compare::@9: scope:[mul8u_compare]  from mul8u_compare::@5
  (byte*) print_line_cursor#72 ← phi( mul8u_compare::@5/(byte*) print_line_cursor#83 )
  (byte*) print_char_cursor#165 ← phi( mul8u_compare::@5/(byte*) print_char_cursor#172 )
  (byte) mul8u_compare::a#6 ← phi( mul8u_compare::@5/(byte) mul8u_compare::a#8 )
  (byte) mul8u_compare::a#1 ← (byte) mul8u_compare::a#6 + rangenext(0,$ff)
  (bool~) mul8u_compare::$13 ← (byte) mul8u_compare::a#1 != rangelast(0,$ff)
  if((bool~) mul8u_compare::$13) goto mul8u_compare::@1
  to:mul8u_compare::@10
mul8u_compare::@10: scope:[mul8u_compare]  from mul8u_compare::@9
  (byte*) print_line_cursor#63 ← phi( mul8u_compare::@9/(byte*) print_line_cursor#72 )
  (byte*) print_char_cursor#152 ← phi( mul8u_compare::@9/(byte*) print_char_cursor#165 )
  (byte*) print_str::str#4 ← (const byte*) mul8u_compare::str
  call print_str 
  to:mul8u_compare::@15
mul8u_compare::@15: scope:[mul8u_compare]  from mul8u_compare::@10
  (byte*) print_line_cursor#53 ← phi( mul8u_compare::@10/(byte*) print_line_cursor#63 )
  (byte*) print_char_cursor#104 ← phi( mul8u_compare::@10/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#104
  call print_ln 
  to:mul8u_compare::@16
mul8u_compare::@16: scope:[mul8u_compare]  from mul8u_compare::@15
  (byte*) print_char_cursor#105 ← phi( mul8u_compare::@15/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#37 ← phi( mul8u_compare::@15/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#37
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#105
  to:mul8u_compare::@return

(void()) mul8u_error((byte) mul8u_error::a , (byte) mul8u_error::b , (word) mul8u_error::ms , (word) mul8u_error::mn , (word) mul8u_error::mf)
mul8u_error: scope:[mul8u_error]  from mul8u_compare::@8
  (byte*) print_line_cursor#115 ← phi( mul8u_compare::@8/(byte*) print_line_cursor#52 )
  (word) mul8u_error::mf#10 ← phi( mul8u_compare::@8/(word) mul8u_error::mf#0 )
  (word) mul8u_error::mn#8 ← phi( mul8u_compare::@8/(word) mul8u_error::mn#0 )
  (word) mul8u_error::ms#6 ← phi( mul8u_compare::@8/(word) mul8u_error::ms#0 )
  (byte) mul8u_error::b#4 ← phi( mul8u_compare::@8/(byte) mul8u_error::b#0 )
  (byte) mul8u_error::a#2 ← phi( mul8u_compare::@8/(byte) mul8u_error::a#0 )
  (byte*) print_char_cursor#153 ← phi( mul8u_compare::@8/(byte*) print_char_cursor#151 )
  (byte*) print_str::str#5 ← (const byte*) mul8u_error::str
  call print_str 
  to:mul8u_error::@1
mul8u_error::@1: scope:[mul8u_error]  from mul8u_error
  (byte*) print_line_cursor#113 ← phi( mul8u_error/(byte*) print_line_cursor#115 )
  (word) mul8u_error::mf#9 ← phi( mul8u_error/(word) mul8u_error::mf#10 )
  (word) mul8u_error::mn#7 ← phi( mul8u_error/(word) mul8u_error::mn#8 )
  (word) mul8u_error::ms#5 ← phi( mul8u_error/(word) mul8u_error::ms#6 )
  (byte) mul8u_error::b#3 ← phi( mul8u_error/(byte) mul8u_error::b#4 )
  (byte) mul8u_error::a#1 ← phi( mul8u_error/(byte) mul8u_error::a#2 )
  (byte*) print_char_cursor#106 ← phi( mul8u_error/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#106
  (byte) print_uchar::b#3 ← (byte) mul8u_error::a#1
  call print_uchar 
  to:mul8u_error::@2
mul8u_error::@2: scope:[mul8u_error]  from mul8u_error::@1
  (byte*) print_line_cursor#111 ← phi( mul8u_error::@1/(byte*) print_line_cursor#113 )
  (word) mul8u_error::mf#8 ← phi( mul8u_error::@1/(word) mul8u_error::mf#9 )
  (word) mul8u_error::mn#6 ← phi( mul8u_error::@1/(word) mul8u_error::mn#7 )
  (word) mul8u_error::ms#4 ← phi( mul8u_error::@1/(word) mul8u_error::ms#5 )
  (byte) mul8u_error::b#2 ← phi( mul8u_error::@1/(byte) mul8u_error::b#3 )
  (byte*) print_char_cursor#107 ← phi( mul8u_error::@1/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#107
  (byte*) print_str::str#6 ← (const byte*) mul8u_error::str1
  call print_str 
  to:mul8u_error::@3
mul8u_error::@3: scope:[mul8u_error]  from mul8u_error::@2
  (byte*) print_line_cursor#108 ← phi( mul8u_error::@2/(byte*) print_line_cursor#111 )
  (word) mul8u_error::mf#7 ← phi( mul8u_error::@2/(word) mul8u_error::mf#8 )
  (word) mul8u_error::mn#5 ← phi( mul8u_error::@2/(word) mul8u_error::mn#6 )
  (word) mul8u_error::ms#3 ← phi( mul8u_error::@2/(word) mul8u_error::ms#4 )
  (byte) mul8u_error::b#1 ← phi( mul8u_error::@2/(byte) mul8u_error::b#2 )
  (byte*) print_char_cursor#108 ← phi( mul8u_error::@2/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#108
  (byte) print_uchar::b#4 ← (byte) mul8u_error::b#1
  call print_uchar 
  to:mul8u_error::@4
mul8u_error::@4: scope:[mul8u_error]  from mul8u_error::@3
  (byte*) print_line_cursor#104 ← phi( mul8u_error::@3/(byte*) print_line_cursor#108 )
  (word) mul8u_error::mf#6 ← phi( mul8u_error::@3/(word) mul8u_error::mf#7 )
  (word) mul8u_error::mn#4 ← phi( mul8u_error::@3/(word) mul8u_error::mn#5 )
  (word) mul8u_error::ms#2 ← phi( mul8u_error::@3/(word) mul8u_error::ms#3 )
  (byte*) print_char_cursor#109 ← phi( mul8u_error::@3/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#109
  (byte*) print_str::str#7 ← (const byte*) mul8u_error::str2
  call print_str 
  to:mul8u_error::@5
mul8u_error::@5: scope:[mul8u_error]  from mul8u_error::@4
  (byte*) print_line_cursor#98 ← phi( mul8u_error::@4/(byte*) print_line_cursor#104 )
  (word) mul8u_error::mf#5 ← phi( mul8u_error::@4/(word) mul8u_error::mf#6 )
  (word) mul8u_error::mn#3 ← phi( mul8u_error::@4/(word) mul8u_error::mn#4 )
  (word) mul8u_error::ms#1 ← phi( mul8u_error::@4/(word) mul8u_error::ms#2 )
  (byte*) print_char_cursor#110 ← phi( mul8u_error::@4/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#110
  (word) print_uint::w#3 ← (word) mul8u_error::ms#1
  call print_uint 
  to:mul8u_error::@6
mul8u_error::@6: scope:[mul8u_error]  from mul8u_error::@5
  (byte*) print_line_cursor#93 ← phi( mul8u_error::@5/(byte*) print_line_cursor#98 )
  (word) mul8u_error::mf#4 ← phi( mul8u_error::@5/(word) mul8u_error::mf#5 )
  (word) mul8u_error::mn#2 ← phi( mul8u_error::@5/(word) mul8u_error::mn#3 )
  (byte*) print_char_cursor#111 ← phi( mul8u_error::@5/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#111
  (byte*) print_str::str#8 ← (const byte*) mul8u_error::str3
  call print_str 
  to:mul8u_error::@7
mul8u_error::@7: scope:[mul8u_error]  from mul8u_error::@6
  (byte*) print_line_cursor#84 ← phi( mul8u_error::@6/(byte*) print_line_cursor#93 )
  (word) mul8u_error::mf#3 ← phi( mul8u_error::@6/(word) mul8u_error::mf#4 )
  (word) mul8u_error::mn#1 ← phi( mul8u_error::@6/(word) mul8u_error::mn#2 )
  (byte*) print_char_cursor#112 ← phi( mul8u_error::@6/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#112
  (word) print_uint::w#4 ← (word) mul8u_error::mn#1
  call print_uint 
  to:mul8u_error::@8
mul8u_error::@8: scope:[mul8u_error]  from mul8u_error::@7
  (byte*) print_line_cursor#73 ← phi( mul8u_error::@7/(byte*) print_line_cursor#84 )
  (word) mul8u_error::mf#2 ← phi( mul8u_error::@7/(word) mul8u_error::mf#3 )
  (byte*) print_char_cursor#113 ← phi( mul8u_error::@7/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#113
  (byte*) print_str::str#9 ← (const byte*) mul8u_error::str4
  call print_str 
  to:mul8u_error::@9
mul8u_error::@9: scope:[mul8u_error]  from mul8u_error::@8
  (byte*) print_line_cursor#64 ← phi( mul8u_error::@8/(byte*) print_line_cursor#73 )
  (word) mul8u_error::mf#1 ← phi( mul8u_error::@8/(word) mul8u_error::mf#2 )
  (byte*) print_char_cursor#114 ← phi( mul8u_error::@8/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#114
  (word) print_uint::w#5 ← (word) mul8u_error::mf#1
  call print_uint 
  to:mul8u_error::@10
mul8u_error::@10: scope:[mul8u_error]  from mul8u_error::@9
  (byte*) print_line_cursor#54 ← phi( mul8u_error::@9/(byte*) print_line_cursor#64 )
  (byte*) print_char_cursor#115 ← phi( mul8u_error::@9/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#115
  call print_ln 
  to:mul8u_error::@11
mul8u_error::@11: scope:[mul8u_error]  from mul8u_error::@10
  (byte*) print_char_cursor#116 ← phi( mul8u_error::@10/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#38 ← phi( mul8u_error::@10/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#38
  (byte*) print_char_cursor#48 ← (byte*) print_char_cursor#116
  to:mul8u_error::@return
mul8u_error::@return: scope:[mul8u_error]  from mul8u_error::@11
  (byte*) print_line_cursor#39 ← phi( mul8u_error::@11/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#117 ← phi( mul8u_error::@11/(byte*) print_char_cursor#48 )
  (byte*) print_char_cursor#49 ← (byte*) print_char_cursor#117
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#39
  return 
  to:@return

(void()) mul8s_compare()
mul8s_compare: scope:[mul8s_compare]  from main::@5
  (byte*) print_line_cursor#85 ← phi( main::@5/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#173 ← phi( main::@5/(byte*) print_char_cursor#24 )
  (signed byte) mul8s_compare::a#0 ← (signed byte) -$80
  to:mul8s_compare::@1
mul8s_compare::@1: scope:[mul8s_compare]  from mul8s_compare mul8s_compare::@6
  (byte*) print_line_cursor#74 ← phi( mul8s_compare/(byte*) print_line_cursor#85 mul8s_compare::@6/(byte*) print_line_cursor#86 )
  (byte*) print_char_cursor#166 ← phi( mul8s_compare/(byte*) print_char_cursor#173 mul8s_compare::@6/(byte*) print_char_cursor#174 )
  (signed byte) mul8s_compare::a#2 ← phi( mul8s_compare/(signed byte) mul8s_compare::a#0 mul8s_compare::@6/(signed byte) mul8s_compare::a#1 )
  (bool~) mul8s_compare::$2 ← (signed byte) mul8s_compare::a#2 != (number) -$80
  if((bool~) mul8s_compare::$2) goto mul8s_compare::@2
  to:mul8s_compare::@3
mul8s_compare::@2: scope:[mul8s_compare]  from mul8s_compare::@1
  (byte*) print_line_cursor#99 ← phi( mul8s_compare::@1/(byte*) print_line_cursor#74 )
  (byte*) print_char_cursor#183 ← phi( mul8s_compare::@1/(byte*) print_char_cursor#166 )
  (signed byte) mul8s_compare::a#10 ← phi( mul8s_compare::@1/(signed byte) mul8s_compare::a#2 )
  (signed byte) mul8s_compare::b#0 ← (signed byte) -$80
  to:mul8s_compare::@4
mul8s_compare::@3: scope:[mul8s_compare]  from mul8s_compare::@1
  (byte*) print_line_cursor#65 ← phi( mul8s_compare::@1/(byte*) print_line_cursor#74 )
  (byte*) print_char_cursor#154 ← phi( mul8s_compare::@1/(byte*) print_char_cursor#166 )
  (byte*) print_str::str#10 ← (const byte*) mul8s_compare::str
  call print_str 
  to:mul8s_compare::@13
mul8s_compare::@13: scope:[mul8s_compare]  from mul8s_compare::@3
  (byte*) print_line_cursor#55 ← phi( mul8s_compare::@3/(byte*) print_line_cursor#65 )
  (byte*) print_char_cursor#118 ← phi( mul8s_compare::@3/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#50 ← (byte*) print_char_cursor#118
  call print_ln 
  to:mul8s_compare::@14
mul8s_compare::@14: scope:[mul8s_compare]  from mul8s_compare::@13
  (byte*) print_char_cursor#119 ← phi( mul8s_compare::@13/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#40 ← phi( mul8s_compare::@13/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#40
  (byte*) print_char_cursor#51 ← (byte*) print_char_cursor#119
  to:mul8s_compare::@return
mul8s_compare::@4: scope:[mul8s_compare]  from mul8s_compare::@2 mul8s_compare::@9
  (byte*) print_line_cursor#95 ← phi( mul8s_compare::@2/(byte*) print_line_cursor#99 mul8s_compare::@9/(byte*) print_line_cursor#100 )
  (byte*) print_char_cursor#179 ← phi( mul8s_compare::@2/(byte*) print_char_cursor#183 mul8s_compare::@9/(byte*) print_char_cursor#184 )
  (signed byte) mul8s_compare::a#8 ← phi( mul8s_compare::@2/(signed byte) mul8s_compare::a#10 mul8s_compare::@9/(signed byte) mul8s_compare::a#11 )
  (signed byte) mul8s_compare::b#2 ← phi( mul8s_compare::@2/(signed byte) mul8s_compare::b#0 mul8s_compare::@9/(signed byte) mul8s_compare::b#1 )
  (bool~) mul8s_compare::$3 ← (signed byte) mul8s_compare::b#2 != (number) -$80
  if((bool~) mul8s_compare::$3) goto mul8s_compare::@5
  to:mul8s_compare::@6
mul8s_compare::@5: scope:[mul8s_compare]  from mul8s_compare::@4
  (byte*) print_line_cursor#105 ← phi( mul8s_compare::@4/(byte*) print_line_cursor#95 )
  (byte*) print_char_cursor#189 ← phi( mul8s_compare::@4/(byte*) print_char_cursor#179 )
  (signed byte) mul8s_compare::b#3 ← phi( mul8s_compare::@4/(signed byte) mul8s_compare::b#2 )
  (signed byte) mul8s_compare::a#3 ← phi( mul8s_compare::@4/(signed byte) mul8s_compare::a#8 )
  (signed byte) muls8s::a#0 ← (signed byte) mul8s_compare::a#3
  (signed byte) muls8s::b#0 ← (signed byte) mul8s_compare::b#3
  call muls8s 
  (signed word) muls8s::return#2 ← (signed word) muls8s::return#1
  to:mul8s_compare::@15
mul8s_compare::@15: scope:[mul8s_compare]  from mul8s_compare::@5
  (byte*) print_line_cursor#101 ← phi( mul8s_compare::@5/(byte*) print_line_cursor#105 )
  (byte*) print_char_cursor#187 ← phi( mul8s_compare::@5/(byte*) print_char_cursor#189 )
  (signed byte) mul8s_compare::b#4 ← phi( mul8s_compare::@5/(signed byte) mul8s_compare::b#3 )
  (signed byte) mul8s_compare::a#4 ← phi( mul8s_compare::@5/(signed byte) mul8s_compare::a#3 )
  (signed word) muls8s::return#4 ← phi( mul8s_compare::@5/(signed word) muls8s::return#2 )
  (signed word~) mul8s_compare::$4 ← (signed word) muls8s::return#4
  (signed word) mul8s_compare::ms#0 ← (signed word~) mul8s_compare::$4
  (signed byte) mulf8s::a#0 ← (signed byte) mul8s_compare::a#4
  (signed byte) mulf8s::b#0 ← (signed byte) mul8s_compare::b#4
  call mulf8s 
  (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#1
  to:mul8s_compare::@16
mul8s_compare::@16: scope:[mul8s_compare]  from mul8s_compare::@15
  (byte*) print_line_cursor#94 ← phi( mul8s_compare::@15/(byte*) print_line_cursor#101 )
  (byte*) print_char_cursor#185 ← phi( mul8s_compare::@15/(byte*) print_char_cursor#187 )
  (signed word) mul8s_compare::ms#4 ← phi( mul8s_compare::@15/(signed word) mul8s_compare::ms#0 )
  (signed byte) mul8s_compare::b#5 ← phi( mul8s_compare::@15/(signed byte) mul8s_compare::b#4 )
  (signed byte) mul8s_compare::a#5 ← phi( mul8s_compare::@15/(signed byte) mul8s_compare::a#4 )
  (signed word) mulf8s::return#4 ← phi( mul8s_compare::@15/(signed word) mulf8s::return#2 )
  (signed word~) mul8s_compare::$5 ← (signed word) mulf8s::return#4
  (signed word) mul8s_compare::mf#0 ← (signed word~) mul8s_compare::$5
  (signed byte) mul8s::a#0 ← (signed byte) mul8s_compare::a#5
  (signed byte) mul8s::b#0 ← (signed byte) mul8s_compare::b#5
  call mul8s 
  (signed word) mul8s::return#2 ← (signed word) mul8s::return#1
  to:mul8s_compare::@17
mul8s_compare::@17: scope:[mul8s_compare]  from mul8s_compare::@16
  (byte*) print_line_cursor#88 ← phi( mul8s_compare::@16/(byte*) print_line_cursor#94 )
  (byte*) print_char_cursor#181 ← phi( mul8s_compare::@16/(byte*) print_char_cursor#185 )
  (signed byte) mul8s_compare::a#15 ← phi( mul8s_compare::@16/(signed byte) mul8s_compare::a#5 )
  (signed byte) mul8s_compare::b#12 ← phi( mul8s_compare::@16/(signed byte) mul8s_compare::b#5 )
  (signed word) mul8s_compare::mf#1 ← phi( mul8s_compare::@16/(signed word) mul8s_compare::mf#0 )
  (signed word) mul8s_compare::ms#1 ← phi( mul8s_compare::@16/(signed word) mul8s_compare::ms#4 )
  (signed word) mul8s::return#4 ← phi( mul8s_compare::@16/(signed word) mul8s::return#2 )
  (signed word~) mul8s_compare::$6 ← (signed word) mul8s::return#4
  (signed word) mul8s_compare::mn#0 ← (signed word~) mul8s_compare::$6
  (byte) mul8s_compare::ok#0 ← (byte) 1
  (bool~) mul8s_compare::$7 ← (signed word) mul8s_compare::ms#1 != (signed word) mul8s_compare::mf#1
  (bool~) mul8s_compare::$8 ← ! (bool~) mul8s_compare::$7
  if((bool~) mul8s_compare::$8) goto mul8s_compare::@7
  to:mul8s_compare::@10
mul8s_compare::@6: scope:[mul8s_compare]  from mul8s_compare::@4
  (byte*) print_line_cursor#86 ← phi( mul8s_compare::@4/(byte*) print_line_cursor#95 )
  (byte*) print_char_cursor#174 ← phi( mul8s_compare::@4/(byte*) print_char_cursor#179 )
  (signed byte) mul8s_compare::a#6 ← phi( mul8s_compare::@4/(signed byte) mul8s_compare::a#8 )
  (signed byte) mul8s_compare::a#1 ← ++ (signed byte) mul8s_compare::a#6
  to:mul8s_compare::@1
mul8s_compare::@7: scope:[mul8s_compare]  from mul8s_compare::@10 mul8s_compare::@17
  (byte*) print_line_cursor#76 ← phi( mul8s_compare::@10/(byte*) print_line_cursor#87 mul8s_compare::@17/(byte*) print_line_cursor#88 )
  (byte*) print_char_cursor#176 ← phi( mul8s_compare::@10/(byte*) print_char_cursor#180 mul8s_compare::@17/(byte*) print_char_cursor#181 )
  (signed word) mul8s_compare::mf#5 ← phi( mul8s_compare::@10/(signed word) mul8s_compare::mf#6 mul8s_compare::@17/(signed word) mul8s_compare::mf#1 )
  (signed byte) mul8s_compare::a#13 ← phi( mul8s_compare::@10/(signed byte) mul8s_compare::a#14 mul8s_compare::@17/(signed byte) mul8s_compare::a#15 )
  (signed byte) mul8s_compare::b#10 ← phi( mul8s_compare::@10/(signed byte) mul8s_compare::b#11 mul8s_compare::@17/(signed byte) mul8s_compare::b#12 )
  (byte) mul8s_compare::ok#4 ← phi( mul8s_compare::@10/(byte) mul8s_compare::ok#1 mul8s_compare::@17/(byte) mul8s_compare::ok#0 )
  (signed word) mul8s_compare::mn#1 ← phi( mul8s_compare::@10/(signed word) mul8s_compare::mn#3 mul8s_compare::@17/(signed word) mul8s_compare::mn#0 )
  (signed word) mul8s_compare::ms#2 ← phi( mul8s_compare::@10/(signed word) mul8s_compare::ms#5 mul8s_compare::@17/(signed word) mul8s_compare::ms#1 )
  (bool~) mul8s_compare::$9 ← (signed word) mul8s_compare::ms#2 != (signed word) mul8s_compare::mn#1
  (bool~) mul8s_compare::$10 ← ! (bool~) mul8s_compare::$9
  if((bool~) mul8s_compare::$10) goto mul8s_compare::@8
  to:mul8s_compare::@11
mul8s_compare::@10: scope:[mul8s_compare]  from mul8s_compare::@17
  (byte*) print_line_cursor#87 ← phi( mul8s_compare::@17/(byte*) print_line_cursor#88 )
  (byte*) print_char_cursor#180 ← phi( mul8s_compare::@17/(byte*) print_char_cursor#181 )
  (signed word) mul8s_compare::mf#6 ← phi( mul8s_compare::@17/(signed word) mul8s_compare::mf#1 )
  (signed byte) mul8s_compare::a#14 ← phi( mul8s_compare::@17/(signed byte) mul8s_compare::a#15 )
  (signed byte) mul8s_compare::b#11 ← phi( mul8s_compare::@17/(signed byte) mul8s_compare::b#12 )
  (signed word) mul8s_compare::mn#3 ← phi( mul8s_compare::@17/(signed word) mul8s_compare::mn#0 )
  (signed word) mul8s_compare::ms#5 ← phi( mul8s_compare::@17/(signed word) mul8s_compare::ms#1 )
  (byte) mul8s_compare::ok#1 ← (number) 0
  to:mul8s_compare::@7
mul8s_compare::@8: scope:[mul8s_compare]  from mul8s_compare::@11 mul8s_compare::@7
  (byte*) print_line_cursor#66 ← phi( mul8s_compare::@11/(byte*) print_line_cursor#75 mul8s_compare::@7/(byte*) print_line_cursor#76 )
  (byte*) print_char_cursor#167 ← phi( mul8s_compare::@11/(byte*) print_char_cursor#175 mul8s_compare::@7/(byte*) print_char_cursor#176 )
  (signed word) mul8s_compare::mf#3 ← phi( mul8s_compare::@11/(signed word) mul8s_compare::mf#4 mul8s_compare::@7/(signed word) mul8s_compare::mf#5 )
  (signed word) mul8s_compare::mn#4 ← phi( mul8s_compare::@11/(signed word) mul8s_compare::mn#5 mul8s_compare::@7/(signed word) mul8s_compare::mn#1 )
  (signed word) mul8s_compare::ms#6 ← phi( mul8s_compare::@11/(signed word) mul8s_compare::ms#7 mul8s_compare::@7/(signed word) mul8s_compare::ms#2 )
  (signed byte) mul8s_compare::a#9 ← phi( mul8s_compare::@11/(signed byte) mul8s_compare::a#12 mul8s_compare::@7/(signed byte) mul8s_compare::a#13 )
  (signed byte) mul8s_compare::b#8 ← phi( mul8s_compare::@11/(signed byte) mul8s_compare::b#9 mul8s_compare::@7/(signed byte) mul8s_compare::b#10 )
  (byte) mul8s_compare::ok#3 ← phi( mul8s_compare::@11/(byte) mul8s_compare::ok#2 mul8s_compare::@7/(byte) mul8s_compare::ok#4 )
  (bool~) mul8s_compare::$11 ← (byte) mul8s_compare::ok#3 == (number) 0
  (bool~) mul8s_compare::$12 ← ! (bool~) mul8s_compare::$11
  if((bool~) mul8s_compare::$12) goto mul8s_compare::@9
  to:mul8s_compare::@12
mul8s_compare::@11: scope:[mul8s_compare]  from mul8s_compare::@7
  (byte*) print_line_cursor#75 ← phi( mul8s_compare::@7/(byte*) print_line_cursor#76 )
  (byte*) print_char_cursor#175 ← phi( mul8s_compare::@7/(byte*) print_char_cursor#176 )
  (signed word) mul8s_compare::mf#4 ← phi( mul8s_compare::@7/(signed word) mul8s_compare::mf#5 )
  (signed word) mul8s_compare::mn#5 ← phi( mul8s_compare::@7/(signed word) mul8s_compare::mn#1 )
  (signed word) mul8s_compare::ms#7 ← phi( mul8s_compare::@7/(signed word) mul8s_compare::ms#2 )
  (signed byte) mul8s_compare::a#12 ← phi( mul8s_compare::@7/(signed byte) mul8s_compare::a#13 )
  (signed byte) mul8s_compare::b#9 ← phi( mul8s_compare::@7/(signed byte) mul8s_compare::b#10 )
  (byte) mul8s_compare::ok#2 ← (number) 0
  to:mul8s_compare::@8
mul8s_compare::@9: scope:[mul8s_compare]  from mul8s_compare::@8
  (byte*) print_line_cursor#100 ← phi( mul8s_compare::@8/(byte*) print_line_cursor#66 )
  (byte*) print_char_cursor#184 ← phi( mul8s_compare::@8/(byte*) print_char_cursor#167 )
  (signed byte) mul8s_compare::a#11 ← phi( mul8s_compare::@8/(signed byte) mul8s_compare::a#9 )
  (signed byte) mul8s_compare::b#6 ← phi( mul8s_compare::@8/(signed byte) mul8s_compare::b#8 )
  (signed byte) mul8s_compare::b#1 ← ++ (signed byte) mul8s_compare::b#6
  to:mul8s_compare::@4
mul8s_compare::@12: scope:[mul8s_compare]  from mul8s_compare::@8
  (byte*) print_line_cursor#56 ← phi( mul8s_compare::@8/(byte*) print_line_cursor#66 )
  (byte*) print_char_cursor#155 ← phi( mul8s_compare::@8/(byte*) print_char_cursor#167 )
  (signed word) mul8s_compare::mf#2 ← phi( mul8s_compare::@8/(signed word) mul8s_compare::mf#3 )
  (signed word) mul8s_compare::mn#2 ← phi( mul8s_compare::@8/(signed word) mul8s_compare::mn#4 )
  (signed word) mul8s_compare::ms#3 ← phi( mul8s_compare::@8/(signed word) mul8s_compare::ms#6 )
  (signed byte) mul8s_compare::b#7 ← phi( mul8s_compare::@8/(signed byte) mul8s_compare::b#8 )
  (signed byte) mul8s_compare::a#7 ← phi( mul8s_compare::@8/(signed byte) mul8s_compare::a#9 )
  *((const byte*) BG_COLOR) ← (number) 2
  (signed byte) mul8s_error::a#0 ← (signed byte) mul8s_compare::a#7
  (signed byte) mul8s_error::b#0 ← (signed byte) mul8s_compare::b#7
  (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#3
  (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#2
  (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#2
  call mul8s_error 
  to:mul8s_compare::@18
mul8s_compare::@18: scope:[mul8s_compare]  from mul8s_compare::@12
  (byte*) print_line_cursor#41 ← phi( mul8s_compare::@12/(byte*) print_line_cursor#20 )
  (byte*) print_char_cursor#120 ← phi( mul8s_compare::@12/(byte*) print_char_cursor#65 )
  (byte*) print_char_cursor#52 ← (byte*) print_char_cursor#120
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#41
  to:mul8s_compare::@return
mul8s_compare::@return: scope:[mul8s_compare]  from mul8s_compare::@14 mul8s_compare::@18
  (byte*) print_line_cursor#42 ← phi( mul8s_compare::@14/(byte*) print_line_cursor#16 mul8s_compare::@18/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#121 ← phi( mul8s_compare::@14/(byte*) print_char_cursor#51 mul8s_compare::@18/(byte*) print_char_cursor#52 )
  (byte*) print_char_cursor#53 ← (byte*) print_char_cursor#121
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#42
  return 
  to:@return

(void()) mul8s_error((signed byte) mul8s_error::a , (signed byte) mul8s_error::b , (signed word) mul8s_error::ms , (signed word) mul8s_error::mn , (signed word) mul8s_error::mf)
mul8s_error: scope:[mul8s_error]  from mul8s_compare::@12
  (byte*) print_line_cursor#116 ← phi( mul8s_compare::@12/(byte*) print_line_cursor#56 )
  (signed word) mul8s_error::mf#10 ← phi( mul8s_compare::@12/(signed word) mul8s_error::mf#0 )
  (signed word) mul8s_error::mn#8 ← phi( mul8s_compare::@12/(signed word) mul8s_error::mn#0 )
  (signed word) mul8s_error::ms#6 ← phi( mul8s_compare::@12/(signed word) mul8s_error::ms#0 )
  (signed byte) mul8s_error::b#4 ← phi( mul8s_compare::@12/(signed byte) mul8s_error::b#0 )
  (signed byte) mul8s_error::a#2 ← phi( mul8s_compare::@12/(signed byte) mul8s_error::a#0 )
  (byte*) print_char_cursor#156 ← phi( mul8s_compare::@12/(byte*) print_char_cursor#155 )
  (byte*) print_str::str#11 ← (const byte*) mul8s_error::str
  call print_str 
  to:mul8s_error::@1
mul8s_error::@1: scope:[mul8s_error]  from mul8s_error
  (byte*) print_line_cursor#114 ← phi( mul8s_error/(byte*) print_line_cursor#116 )
  (signed word) mul8s_error::mf#9 ← phi( mul8s_error/(signed word) mul8s_error::mf#10 )
  (signed word) mul8s_error::mn#7 ← phi( mul8s_error/(signed word) mul8s_error::mn#8 )
  (signed word) mul8s_error::ms#5 ← phi( mul8s_error/(signed word) mul8s_error::ms#6 )
  (signed byte) mul8s_error::b#3 ← phi( mul8s_error/(signed byte) mul8s_error::b#4 )
  (signed byte) mul8s_error::a#1 ← phi( mul8s_error/(signed byte) mul8s_error::a#2 )
  (byte*) print_char_cursor#122 ← phi( mul8s_error/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#54 ← (byte*) print_char_cursor#122
  (signed byte) print_schar::b#1 ← (signed byte) mul8s_error::a#1
  call print_schar 
  to:mul8s_error::@2
mul8s_error::@2: scope:[mul8s_error]  from mul8s_error::@1
  (byte*) print_line_cursor#112 ← phi( mul8s_error::@1/(byte*) print_line_cursor#114 )
  (signed word) mul8s_error::mf#8 ← phi( mul8s_error::@1/(signed word) mul8s_error::mf#9 )
  (signed word) mul8s_error::mn#6 ← phi( mul8s_error::@1/(signed word) mul8s_error::mn#7 )
  (signed word) mul8s_error::ms#4 ← phi( mul8s_error::@1/(signed word) mul8s_error::ms#5 )
  (signed byte) mul8s_error::b#2 ← phi( mul8s_error::@1/(signed byte) mul8s_error::b#3 )
  (byte*) print_char_cursor#123 ← phi( mul8s_error::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#55 ← (byte*) print_char_cursor#123
  (byte*) print_str::str#12 ← (const byte*) mul8s_error::str1
  call print_str 
  to:mul8s_error::@3
mul8s_error::@3: scope:[mul8s_error]  from mul8s_error::@2
  (byte*) print_line_cursor#109 ← phi( mul8s_error::@2/(byte*) print_line_cursor#112 )
  (signed word) mul8s_error::mf#7 ← phi( mul8s_error::@2/(signed word) mul8s_error::mf#8 )
  (signed word) mul8s_error::mn#5 ← phi( mul8s_error::@2/(signed word) mul8s_error::mn#6 )
  (signed word) mul8s_error::ms#3 ← phi( mul8s_error::@2/(signed word) mul8s_error::ms#4 )
  (signed byte) mul8s_error::b#1 ← phi( mul8s_error::@2/(signed byte) mul8s_error::b#2 )
  (byte*) print_char_cursor#124 ← phi( mul8s_error::@2/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#56 ← (byte*) print_char_cursor#124
  (signed byte) print_schar::b#2 ← (signed byte) mul8s_error::b#1
  call print_schar 
  to:mul8s_error::@4
mul8s_error::@4: scope:[mul8s_error]  from mul8s_error::@3
  (byte*) print_line_cursor#106 ← phi( mul8s_error::@3/(byte*) print_line_cursor#109 )
  (signed word) mul8s_error::mf#6 ← phi( mul8s_error::@3/(signed word) mul8s_error::mf#7 )
  (signed word) mul8s_error::mn#4 ← phi( mul8s_error::@3/(signed word) mul8s_error::mn#5 )
  (signed word) mul8s_error::ms#2 ← phi( mul8s_error::@3/(signed word) mul8s_error::ms#3 )
  (byte*) print_char_cursor#125 ← phi( mul8s_error::@3/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#57 ← (byte*) print_char_cursor#125
  (byte*) print_str::str#13 ← (const byte*) mul8s_error::str2
  call print_str 
  to:mul8s_error::@5
mul8s_error::@5: scope:[mul8s_error]  from mul8s_error::@4
  (byte*) print_line_cursor#102 ← phi( mul8s_error::@4/(byte*) print_line_cursor#106 )
  (signed word) mul8s_error::mf#5 ← phi( mul8s_error::@4/(signed word) mul8s_error::mf#6 )
  (signed word) mul8s_error::mn#3 ← phi( mul8s_error::@4/(signed word) mul8s_error::mn#4 )
  (signed word) mul8s_error::ms#1 ← phi( mul8s_error::@4/(signed word) mul8s_error::ms#2 )
  (byte*) print_char_cursor#126 ← phi( mul8s_error::@4/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#58 ← (byte*) print_char_cursor#126
  (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#1
  call print_sint 
  to:mul8s_error::@6
mul8s_error::@6: scope:[mul8s_error]  from mul8s_error::@5
  (byte*) print_line_cursor#96 ← phi( mul8s_error::@5/(byte*) print_line_cursor#102 )
  (signed word) mul8s_error::mf#4 ← phi( mul8s_error::@5/(signed word) mul8s_error::mf#5 )
  (signed word) mul8s_error::mn#2 ← phi( mul8s_error::@5/(signed word) mul8s_error::mn#3 )
  (byte*) print_char_cursor#127 ← phi( mul8s_error::@5/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#59 ← (byte*) print_char_cursor#127
  (byte*) print_str::str#14 ← (const byte*) mul8s_error::str3
  call print_str 
  to:mul8s_error::@7
mul8s_error::@7: scope:[mul8s_error]  from mul8s_error::@6
  (byte*) print_line_cursor#89 ← phi( mul8s_error::@6/(byte*) print_line_cursor#96 )
  (signed word) mul8s_error::mf#3 ← phi( mul8s_error::@6/(signed word) mul8s_error::mf#4 )
  (signed word) mul8s_error::mn#1 ← phi( mul8s_error::@6/(signed word) mul8s_error::mn#2 )
  (byte*) print_char_cursor#128 ← phi( mul8s_error::@6/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#60 ← (byte*) print_char_cursor#128
  (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#1
  call print_sint 
  to:mul8s_error::@8
mul8s_error::@8: scope:[mul8s_error]  from mul8s_error::@7
  (byte*) print_line_cursor#77 ← phi( mul8s_error::@7/(byte*) print_line_cursor#89 )
  (signed word) mul8s_error::mf#2 ← phi( mul8s_error::@7/(signed word) mul8s_error::mf#3 )
  (byte*) print_char_cursor#129 ← phi( mul8s_error::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#61 ← (byte*) print_char_cursor#129
  (byte*) print_str::str#15 ← (const byte*) mul8s_error::str4
  call print_str 
  to:mul8s_error::@9
mul8s_error::@9: scope:[mul8s_error]  from mul8s_error::@8
  (byte*) print_line_cursor#67 ← phi( mul8s_error::@8/(byte*) print_line_cursor#77 )
  (signed word) mul8s_error::mf#1 ← phi( mul8s_error::@8/(signed word) mul8s_error::mf#2 )
  (byte*) print_char_cursor#130 ← phi( mul8s_error::@8/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#62 ← (byte*) print_char_cursor#130
  (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#1
  call print_sint 
  to:mul8s_error::@10
mul8s_error::@10: scope:[mul8s_error]  from mul8s_error::@9
  (byte*) print_line_cursor#57 ← phi( mul8s_error::@9/(byte*) print_line_cursor#67 )
  (byte*) print_char_cursor#131 ← phi( mul8s_error::@9/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#63 ← (byte*) print_char_cursor#131
  call print_ln 
  to:mul8s_error::@11
mul8s_error::@11: scope:[mul8s_error]  from mul8s_error::@10
  (byte*) print_char_cursor#132 ← phi( mul8s_error::@10/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#43 ← phi( mul8s_error::@10/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#43
  (byte*) print_char_cursor#64 ← (byte*) print_char_cursor#132
  to:mul8s_error::@return
mul8s_error::@return: scope:[mul8s_error]  from mul8s_error::@11
  (byte*) print_line_cursor#44 ← phi( mul8s_error::@11/(byte*) print_line_cursor#19 )
  (byte*) print_char_cursor#133 ← phi( mul8s_error::@11/(byte*) print_char_cursor#64 )
  (byte*) print_char_cursor#65 ← (byte*) print_char_cursor#133
  (byte*) print_line_cursor#20 ← (byte*) print_line_cursor#44
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#21 ← (byte*) print_screen#0
  (byte*) print_char_cursor#66 ← (byte*) print_line_cursor#21
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte*) print_screen#7 ← phi( __start::__init1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#157 ← phi( __start::__init1/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#58 ← phi( __start::__init1/(byte*) print_line_cursor#21 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte*) print_screen#6 ← phi( __start::@1/(byte*) print_screen#7 )
  (byte*) print_char_cursor#134 ← phi( __start::@1/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#45 ← phi( __start::@1/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#45
  (byte*) print_char_cursor#67 ← (byte*) print_char_cursor#134
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte*) print_char_cursor#135 ← phi( __start::@2/(byte*) print_char_cursor#67 )
  (byte*) print_line_cursor#46 ← phi( __start::@2/(byte*) print_line_cursor#22 )
  (byte*) print_screen#4 ← phi( __start::@2/(byte*) print_screen#6 )
  (byte*) print_screen#1 ← (byte*) print_screen#4
  (byte*) print_line_cursor#23 ← (byte*) print_line_cursor#46
  (byte*) print_char_cursor#68 ← (byte*) print_char_cursor#135
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) BG_COLOR = (byte*)(number) $d021
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
(word~) mul8s::$0
(bool~) mul8s::$1
(byte~) mul8s::$10
(byte~) mul8s::$11
(byte~) mul8s::$12
(byte~) mul8s::$13
(byte~) mul8s::$14
(bool~) mul8s::$2
(bool~) mul8s::$3
(bool~) mul8s::$4
(byte~) mul8s::$6
(byte~) mul8s::$7
(byte~) mul8s::$9
(label) mul8s::@1
(label) mul8s::@2
(label) mul8s::@3
(label) mul8s::@4
(label) mul8s::@5
(label) mul8s::@return
(signed byte) mul8s::a
(signed byte) mul8s::a#0
(signed byte) mul8s::a#1
(signed byte) mul8s::a#2
(signed byte) mul8s::a#3
(signed byte) mul8s::a#4
(signed byte) mul8s::a#5
(signed byte) mul8s::b
(signed byte) mul8s::b#0
(signed byte) mul8s::b#1
(signed byte) mul8s::b#2
(signed byte) mul8s::b#3
(signed byte) mul8s::b#4
(word) mul8s::m
(word) mul8s::m#0
(word) mul8s::m#1
(word) mul8s::m#2
(word) mul8s::m#3
(word) mul8s::m#4
(word) mul8s::m#5
(word) mul8s::m#6
(signed word) mul8s::return
(signed word) mul8s::return#0
(signed word) mul8s::return#1
(signed word) mul8s::return#2
(signed word) mul8s::return#3
(signed word) mul8s::return#4
(void()) mul8s_compare()
(bool~) mul8s_compare::$10
(bool~) mul8s_compare::$11
(bool~) mul8s_compare::$12
(bool~) mul8s_compare::$2
(bool~) mul8s_compare::$3
(signed word~) mul8s_compare::$4
(signed word~) mul8s_compare::$5
(signed word~) mul8s_compare::$6
(bool~) mul8s_compare::$7
(bool~) mul8s_compare::$8
(bool~) mul8s_compare::$9
(label) mul8s_compare::@1
(label) mul8s_compare::@10
(label) mul8s_compare::@11
(label) mul8s_compare::@12
(label) mul8s_compare::@13
(label) mul8s_compare::@14
(label) mul8s_compare::@15
(label) mul8s_compare::@16
(label) mul8s_compare::@17
(label) mul8s_compare::@18
(label) mul8s_compare::@2
(label) mul8s_compare::@3
(label) mul8s_compare::@4
(label) mul8s_compare::@5
(label) mul8s_compare::@6
(label) mul8s_compare::@7
(label) mul8s_compare::@8
(label) mul8s_compare::@9
(label) mul8s_compare::@return
(signed byte) mul8s_compare::a
(signed byte) mul8s_compare::a#0
(signed byte) mul8s_compare::a#1
(signed byte) mul8s_compare::a#10
(signed byte) mul8s_compare::a#11
(signed byte) mul8s_compare::a#12
(signed byte) mul8s_compare::a#13
(signed byte) mul8s_compare::a#14
(signed byte) mul8s_compare::a#15
(signed byte) mul8s_compare::a#2
(signed byte) mul8s_compare::a#3
(signed byte) mul8s_compare::a#4
(signed byte) mul8s_compare::a#5
(signed byte) mul8s_compare::a#6
(signed byte) mul8s_compare::a#7
(signed byte) mul8s_compare::a#8
(signed byte) mul8s_compare::a#9
(signed byte) mul8s_compare::b
(signed byte) mul8s_compare::b#0
(signed byte) mul8s_compare::b#1
(signed byte) mul8s_compare::b#10
(signed byte) mul8s_compare::b#11
(signed byte) mul8s_compare::b#12
(signed byte) mul8s_compare::b#2
(signed byte) mul8s_compare::b#3
(signed byte) mul8s_compare::b#4
(signed byte) mul8s_compare::b#5
(signed byte) mul8s_compare::b#6
(signed byte) mul8s_compare::b#7
(signed byte) mul8s_compare::b#8
(signed byte) mul8s_compare::b#9
(signed word) mul8s_compare::mf
(signed word) mul8s_compare::mf#0
(signed word) mul8s_compare::mf#1
(signed word) mul8s_compare::mf#2
(signed word) mul8s_compare::mf#3
(signed word) mul8s_compare::mf#4
(signed word) mul8s_compare::mf#5
(signed word) mul8s_compare::mf#6
(signed word) mul8s_compare::mn
(signed word) mul8s_compare::mn#0
(signed word) mul8s_compare::mn#1
(signed word) mul8s_compare::mn#2
(signed word) mul8s_compare::mn#3
(signed word) mul8s_compare::mn#4
(signed word) mul8s_compare::mn#5
(signed word) mul8s_compare::ms
(signed word) mul8s_compare::ms#0
(signed word) mul8s_compare::ms#1
(signed word) mul8s_compare::ms#2
(signed word) mul8s_compare::ms#3
(signed word) mul8s_compare::ms#4
(signed word) mul8s_compare::ms#5
(signed word) mul8s_compare::ms#6
(signed word) mul8s_compare::ms#7
(byte) mul8s_compare::ok
(byte) mul8s_compare::ok#0
(byte) mul8s_compare::ok#1
(byte) mul8s_compare::ok#2
(byte) mul8s_compare::ok#3
(byte) mul8s_compare::ok#4
(const byte*) mul8s_compare::str[(byte) $1f]  = (byte*) "signed multiply results match!"
(void()) mul8s_error((signed byte) mul8s_error::a , (signed byte) mul8s_error::b , (signed word) mul8s_error::ms , (signed word) mul8s_error::mn , (signed word) mul8s_error::mf)
(label) mul8s_error::@1
(label) mul8s_error::@10
(label) mul8s_error::@11
(label) mul8s_error::@2
(label) mul8s_error::@3
(label) mul8s_error::@4
(label) mul8s_error::@5
(label) mul8s_error::@6
(label) mul8s_error::@7
(label) mul8s_error::@8
(label) mul8s_error::@9
(label) mul8s_error::@return
(signed byte) mul8s_error::a
(signed byte) mul8s_error::a#0
(signed byte) mul8s_error::a#1
(signed byte) mul8s_error::a#2
(signed byte) mul8s_error::b
(signed byte) mul8s_error::b#0
(signed byte) mul8s_error::b#1
(signed byte) mul8s_error::b#2
(signed byte) mul8s_error::b#3
(signed byte) mul8s_error::b#4
(signed word) mul8s_error::mf
(signed word) mul8s_error::mf#0
(signed word) mul8s_error::mf#1
(signed word) mul8s_error::mf#10
(signed word) mul8s_error::mf#2
(signed word) mul8s_error::mf#3
(signed word) mul8s_error::mf#4
(signed word) mul8s_error::mf#5
(signed word) mul8s_error::mf#6
(signed word) mul8s_error::mf#7
(signed word) mul8s_error::mf#8
(signed word) mul8s_error::mf#9
(signed word) mul8s_error::mn
(signed word) mul8s_error::mn#0
(signed word) mul8s_error::mn#1
(signed word) mul8s_error::mn#2
(signed word) mul8s_error::mn#3
(signed word) mul8s_error::mn#4
(signed word) mul8s_error::mn#5
(signed word) mul8s_error::mn#6
(signed word) mul8s_error::mn#7
(signed word) mul8s_error::mn#8
(signed word) mul8s_error::ms
(signed word) mul8s_error::ms#0
(signed word) mul8s_error::ms#1
(signed word) mul8s_error::ms#2
(signed word) mul8s_error::ms#3
(signed word) mul8s_error::ms#4
(signed word) mul8s_error::ms#5
(signed word) mul8s_error::ms#6
(const byte*) mul8s_error::str[(byte) $1a]  = (byte*) "signed multiply mismatch "
(const byte*) mul8s_error::str1[(byte) 2]  = (byte*) "*"
(const byte*) mul8s_error::str2[(byte) 7]  = (byte*) " slow:"
(const byte*) mul8s_error::str3[(byte) $b]  = (byte*) " / normal:"
(const byte*) mul8s_error::str4[(byte) 9]  = (byte*) " / fast:"
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@5
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::a#7
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(byte) mul8u::b#2
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(word) mul8u::return#5
(word) mul8u::return#6
(void()) mul8u_compare()
(bool~) mul8u_compare::$10
(bool~) mul8u_compare::$12
(bool~) mul8u_compare::$13
(word~) mul8u_compare::$2
(word~) mul8u_compare::$3
(word~) mul8u_compare::$4
(bool~) mul8u_compare::$5
(bool~) mul8u_compare::$6
(bool~) mul8u_compare::$7
(bool~) mul8u_compare::$8
(bool~) mul8u_compare::$9
(label) mul8u_compare::@1
(label) mul8u_compare::@10
(label) mul8u_compare::@11
(label) mul8u_compare::@12
(label) mul8u_compare::@13
(label) mul8u_compare::@14
(label) mul8u_compare::@15
(label) mul8u_compare::@16
(label) mul8u_compare::@2
(label) mul8u_compare::@3
(label) mul8u_compare::@4
(label) mul8u_compare::@5
(label) mul8u_compare::@6
(label) mul8u_compare::@7
(label) mul8u_compare::@8
(label) mul8u_compare::@9
(label) mul8u_compare::@return
(byte) mul8u_compare::a
(byte) mul8u_compare::a#0
(byte) mul8u_compare::a#1
(byte) mul8u_compare::a#10
(byte) mul8u_compare::a#11
(byte) mul8u_compare::a#12
(byte) mul8u_compare::a#13
(byte) mul8u_compare::a#2
(byte) mul8u_compare::a#3
(byte) mul8u_compare::a#4
(byte) mul8u_compare::a#5
(byte) mul8u_compare::a#6
(byte) mul8u_compare::a#7
(byte) mul8u_compare::a#8
(byte) mul8u_compare::a#9
(byte) mul8u_compare::b
(byte) mul8u_compare::b#0
(byte) mul8u_compare::b#1
(byte) mul8u_compare::b#10
(byte) mul8u_compare::b#11
(byte) mul8u_compare::b#2
(byte) mul8u_compare::b#3
(byte) mul8u_compare::b#4
(byte) mul8u_compare::b#5
(byte) mul8u_compare::b#6
(byte) mul8u_compare::b#7
(byte) mul8u_compare::b#8
(byte) mul8u_compare::b#9
(word) mul8u_compare::mf
(word) mul8u_compare::mf#0
(word) mul8u_compare::mf#1
(word) mul8u_compare::mf#2
(word) mul8u_compare::mf#3
(word) mul8u_compare::mf#4
(word) mul8u_compare::mf#5
(word) mul8u_compare::mf#6
(word) mul8u_compare::mn
(word) mul8u_compare::mn#0
(word) mul8u_compare::mn#1
(word) mul8u_compare::mn#2
(word) mul8u_compare::mn#3
(word) mul8u_compare::mn#4
(word) mul8u_compare::mn#5
(word) mul8u_compare::ms
(word) mul8u_compare::ms#0
(word) mul8u_compare::ms#1
(word) mul8u_compare::ms#2
(word) mul8u_compare::ms#3
(word) mul8u_compare::ms#4
(word) mul8u_compare::ms#5
(word) mul8u_compare::ms#6
(word) mul8u_compare::ms#7
(byte) mul8u_compare::ok
(byte) mul8u_compare::ok#0
(byte) mul8u_compare::ok#1
(byte) mul8u_compare::ok#2
(byte) mul8u_compare::ok#3
(byte) mul8u_compare::ok#4
(const byte*) mul8u_compare::str[(byte) $18]  = (byte*) "multiply results match!"
(void()) mul8u_error((byte) mul8u_error::a , (byte) mul8u_error::b , (word) mul8u_error::ms , (word) mul8u_error::mn , (word) mul8u_error::mf)
(label) mul8u_error::@1
(label) mul8u_error::@10
(label) mul8u_error::@11
(label) mul8u_error::@2
(label) mul8u_error::@3
(label) mul8u_error::@4
(label) mul8u_error::@5
(label) mul8u_error::@6
(label) mul8u_error::@7
(label) mul8u_error::@8
(label) mul8u_error::@9
(label) mul8u_error::@return
(byte) mul8u_error::a
(byte) mul8u_error::a#0
(byte) mul8u_error::a#1
(byte) mul8u_error::a#2
(byte) mul8u_error::b
(byte) mul8u_error::b#0
(byte) mul8u_error::b#1
(byte) mul8u_error::b#2
(byte) mul8u_error::b#3
(byte) mul8u_error::b#4
(word) mul8u_error::mf
(word) mul8u_error::mf#0
(word) mul8u_error::mf#1
(word) mul8u_error::mf#10
(word) mul8u_error::mf#2
(word) mul8u_error::mf#3
(word) mul8u_error::mf#4
(word) mul8u_error::mf#5
(word) mul8u_error::mf#6
(word) mul8u_error::mf#7
(word) mul8u_error::mf#8
(word) mul8u_error::mf#9
(word) mul8u_error::mn
(word) mul8u_error::mn#0
(word) mul8u_error::mn#1
(word) mul8u_error::mn#2
(word) mul8u_error::mn#3
(word) mul8u_error::mn#4
(word) mul8u_error::mn#5
(word) mul8u_error::mn#6
(word) mul8u_error::mn#7
(word) mul8u_error::mn#8
(word) mul8u_error::ms
(word) mul8u_error::ms#0
(word) mul8u_error::ms#1
(word) mul8u_error::ms#2
(word) mul8u_error::ms#3
(word) mul8u_error::ms#4
(word) mul8u_error::ms#5
(word) mul8u_error::ms#6
(const byte*) mul8u_error::str[(byte) $13]  = (byte*) "multiply mismatch "
(const byte*) mul8u_error::str1[(byte) 2]  = (byte*) "*"
(const byte*) mul8u_error::str2[(byte) 7]  = (byte*) " slow:"
(const byte*) mul8u_error::str3[(byte) $b]  = (byte*) " / normal:"
(const byte*) mul8u_error::str4[(byte) 9]  = (byte*) " / fast:"
(const byte*) mula_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mula_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mula_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mula_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
(signed word~) mulf8s::$1
(label) mulf8s::@1
(label) mulf8s::@2
(label) mulf8s::@3
(label) mulf8s::@return
(signed byte) mulf8s::a
(signed byte) mulf8s::a#0
(signed byte) mulf8s::a#1
(signed byte) mulf8s::b
(signed byte) mulf8s::b#0
(signed byte) mulf8s::b#1
(signed byte) mulf8s::b#2
(signed byte) mulf8s::b#3
(signed byte) mulf8s::b#4
(label) mulf8s::mulf8s_prepare1
(signed byte) mulf8s::mulf8s_prepare1_a
(signed byte) mulf8s::mulf8s_prepare1_a#0
(signed byte) mulf8s::mulf8s_prepare1_a#1
(signed word) mulf8s::return
(signed word) mulf8s::return#0
(signed word) mulf8s::return#1
(signed word) mulf8s::return#2
(signed word) mulf8s::return#3
(signed word) mulf8s::return#4
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(word~) mulf8s_prepared::$0
(bool~) mulf8s_prepared::$1
(byte~) mulf8s_prepared::$10
(byte~) mulf8s_prepared::$11
(byte~) mulf8s_prepared::$12
(byte~) mulf8s_prepared::$13
(byte~) mulf8s_prepared::$14
(bool~) mulf8s_prepared::$2
(bool~) mulf8s_prepared::$3
(bool~) mulf8s_prepared::$4
(byte~) mulf8s_prepared::$6
(byte~) mulf8s_prepared::$7
(byte~) mulf8s_prepared::$9
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@5
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0
(signed byte) mulf8s_prepared::b#1
(signed byte) mulf8s_prepared::b#2
(signed byte) mulf8s_prepared::b#3
(signed byte) mulf8s_prepared::b#4
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0
(word) mulf8s_prepared::m#1
(word) mulf8s_prepared::m#2
(word) mulf8s_prepared::m#3
(word) mulf8s_prepared::m#4
(word) mulf8s_prepared::m#5
(word) mulf8s_prepared::m#6
(const nomodify signed byte*) mulf8s_prepared::memA = (signed byte*)(number) $fd
(signed word) mulf8s_prepared::return
(signed word) mulf8s_prepared::return#0
(signed word) mulf8s_prepared::return#1
(signed word) mulf8s_prepared::return#2
(signed word) mulf8s_prepared::return#3
(signed word) mulf8s_prepared::return#4
(word()) mulf8u((byte) mulf8u::a , (byte) mulf8u::b)
(word~) mulf8u::$1
(label) mulf8u::@1
(label) mulf8u::@2
(label) mulf8u::@return
(byte) mulf8u::a
(byte) mulf8u::a#0
(byte) mulf8u::a#1
(byte) mulf8u::b
(byte) mulf8u::b#0
(byte) mulf8u::b#1
(byte) mulf8u::b#2
(word) mulf8u::return
(word) mulf8u::return#0
(word) mulf8u::return#1
(word) mulf8u::return#2
(word) mulf8u::return#3
(word) mulf8u::return#4
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#0
(byte) mulf8u_prepare::a#1
(byte) mulf8u_prepare::a#2
(const nomodify byte*) mulf8u_prepare::memA = (byte*)(number) $fd
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0
(byte) mulf8u_prepared::b#1
(byte) mulf8u_prepared::b#2
(const nomodify byte*) mulf8u_prepared::memB = (byte*)(number) $ff
(const nomodify byte*) mulf8u_prepared::resL = (byte*)(number) $fe
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0
(word) mulf8u_prepared::return#1
(word) mulf8u_prepared::return#2
(word) mulf8u_prepared::return#3
(word) mulf8u_prepared::return#4
(word) mulf8u_prepared::return#5
(word) mulf8u_prepared::return#6
(void()) mulf_init()
(bool~) mulf_init::$0
(number~) mulf_init::$1
(bool~) mulf_init::$10
(bool~) mulf_init::$2
(bool~) mulf_init::$3
(byte~) mulf_init::$4
(byte~) mulf_init::$5
(word~) mulf_init::$6
(bool~) mulf_init::$7
(byte~) mulf_init::$8
(bool~) mulf_init::$9
(label) mulf_init::@1
(label) mulf_init::@10
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#0
(byte) mulf_init::c#1
(byte) mulf_init::c#2
(byte) mulf_init::c#3
(byte) mulf_init::c#4
(byte) mulf_init::c#5
(byte) mulf_init::dir
(byte) mulf_init::dir#0
(byte) mulf_init::dir#1
(byte) mulf_init::dir#2
(byte) mulf_init::dir#3
(byte) mulf_init::dir#4
(word) mulf_init::sqr
(word) mulf_init::sqr#0
(word) mulf_init::sqr#1
(word) mulf_init::sqr#2
(word) mulf_init::sqr#3
(word) mulf_init::sqr#4
(word) mulf_init::sqr#5
(word) mulf_init::sqr#6
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#0
(byte*) mulf_init::sqr1_hi#1
(byte*) mulf_init::sqr1_hi#2
(byte*) mulf_init::sqr1_hi#3
(byte*) mulf_init::sqr1_hi#4
(byte*) mulf_init::sqr1_hi#5
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#0
(byte*) mulf_init::sqr1_lo#1
(byte*) mulf_init::sqr1_lo#2
(byte*) mulf_init::sqr1_lo#3
(byte*) mulf_init::sqr1_lo#4
(byte*) mulf_init::sqr1_lo#5
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#0
(byte*) mulf_init::sqr2_hi#1
(byte*) mulf_init::sqr2_hi#2
(byte*) mulf_init::sqr2_hi#3
(byte*) mulf_init::sqr2_hi#4
(byte*) mulf_init::sqr2_hi#5
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#0
(byte*) mulf_init::sqr2_lo#1
(byte*) mulf_init::sqr2_lo#2
(byte*) mulf_init::sqr2_lo#3
(byte*) mulf_init::sqr2_lo#4
(byte*) mulf_init::sqr2_lo#5
(byte) mulf_init::x_2
(byte) mulf_init::x_2#0
(byte) mulf_init::x_2#1
(byte) mulf_init::x_2#2
(byte) mulf_init::x_2#3
(byte) mulf_init::x_2#4
(byte) mulf_init::x_2#5
(byte) mulf_init::x_255
(byte) mulf_init::x_255#0
(byte) mulf_init::x_255#1
(byte) mulf_init::x_255#2
(byte) mulf_init::x_255#3
(byte) mulf_init::x_255#4
(byte) mulf_init::x_255#5
(void()) mulf_init_asm()
(label) mulf_init_asm::@return
(const byte*) mulf_init_asm::mem = (byte*)(number) $ff
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(void()) mulf_tables_cmp()
(bool~) mulf_tables_cmp::$2
(bool~) mulf_tables_cmp::$3
(bool~) mulf_tables_cmp::$4
(label) mulf_tables_cmp::@1
(label) mulf_tables_cmp::@10
(label) mulf_tables_cmp::@11
(label) mulf_tables_cmp::@2
(label) mulf_tables_cmp::@3
(label) mulf_tables_cmp::@4
(label) mulf_tables_cmp::@5
(label) mulf_tables_cmp::@6
(label) mulf_tables_cmp::@7
(label) mulf_tables_cmp::@8
(label) mulf_tables_cmp::@9
(label) mulf_tables_cmp::@return
(byte*) mulf_tables_cmp::asm_sqr
(byte*) mulf_tables_cmp::asm_sqr#0
(byte*) mulf_tables_cmp::asm_sqr#1
(byte*) mulf_tables_cmp::asm_sqr#2
(byte*) mulf_tables_cmp::asm_sqr#3
(byte*) mulf_tables_cmp::asm_sqr#4
(byte*) mulf_tables_cmp::asm_sqr#5
(byte*) mulf_tables_cmp::asm_sqr#6
(byte*) mulf_tables_cmp::kc_sqr
(byte*) mulf_tables_cmp::kc_sqr#0
(byte*) mulf_tables_cmp::kc_sqr#1
(byte*) mulf_tables_cmp::kc_sqr#2
(byte*) mulf_tables_cmp::kc_sqr#3
(byte*) mulf_tables_cmp::kc_sqr#4
(byte*) mulf_tables_cmp::kc_sqr#5
(byte*) mulf_tables_cmp::kc_sqr#6
(byte*) mulf_tables_cmp::kc_sqr#7
(byte*) mulf_tables_cmp::kc_sqr#8
(const byte*) mulf_tables_cmp::str[(byte) $17]  = (byte*) "multiply tables match!"
(const byte*) mulf_tables_cmp::str1[(byte) $1c]  = (byte*) "multiply table mismatch at "
(const byte*) mulf_tables_cmp::str2[(byte) 4]  = (byte*) " / "
(signed word()) muls8s((signed byte) muls8s::a , (signed byte) muls8s::b)
(bool~) muls8s::$0
(bool~) muls8s::$1
(bool~) muls8s::$2
(bool~) muls8s::$3
(signed word~) muls8s::$4
(bool~) muls8s::$5
(signed word~) muls8s::$6
(label) muls8s::@1
(label) muls8s::@2
(label) muls8s::@3
(label) muls8s::@4
(label) muls8s::@5
(label) muls8s::@6
(label) muls8s::@7
(label) muls8s::@8
(label) muls8s::@return
(signed byte) muls8s::a
(signed byte) muls8s::a#0
(signed byte) muls8s::a#1
(signed byte) muls8s::a#2
(signed byte) muls8s::a#3
(signed byte) muls8s::a#4
(signed byte) muls8s::a#5
(signed byte) muls8s::a#6
(signed byte) muls8s::a#7
(signed byte) muls8s::a#8
(signed byte) muls8s::b
(signed byte) muls8s::b#0
(signed byte) muls8s::b#1
(signed byte) muls8s::b#2
(signed byte) muls8s::b#3
(signed byte) muls8s::b#4
(signed byte) muls8s::b#5
(signed byte) muls8s::b#6
(signed byte) muls8s::b#7
(signed byte) muls8s::b#8
(signed byte) muls8s::i
(signed byte) muls8s::i#0
(signed byte) muls8s::i#1
(signed byte) muls8s::i#2
(signed byte) muls8s::i#3
(signed byte) muls8s::j
(signed byte) muls8s::j#0
(signed byte) muls8s::j#1
(signed byte) muls8s::j#2
(signed byte) muls8s::j#3
(signed word) muls8s::m
(signed word) muls8s::m#0
(signed word) muls8s::m#1
(signed word) muls8s::m#10
(signed word) muls8s::m#2
(signed word) muls8s::m#3
(signed word) muls8s::m#4
(signed word) muls8s::m#5
(signed word) muls8s::m#6
(signed word) muls8s::m#7
(signed word) muls8s::m#8
(signed word) muls8s::m#9
(signed word) muls8s::return
(signed word) muls8s::return#0
(signed word) muls8s::return#1
(signed word) muls8s::return#2
(signed word) muls8s::return#3
(signed word) muls8s::return#4
(word()) muls8u((byte) muls8u::a , (byte) muls8u::b)
(bool~) muls8u::$0
(bool~) muls8u::$1
(bool~) muls8u::$2
(word~) muls8u::$3
(label) muls8u::@1
(label) muls8u::@2
(label) muls8u::@3
(label) muls8u::@4
(label) muls8u::@return
(byte) muls8u::a
(byte) muls8u::a#0
(byte) muls8u::a#1
(byte) muls8u::a#2
(byte) muls8u::a#3
(byte) muls8u::a#4
(byte) muls8u::b
(byte) muls8u::b#0
(byte) muls8u::b#1
(byte) muls8u::b#2
(byte) muls8u::b#3
(byte) muls8u::b#4
(byte) muls8u::i
(byte) muls8u::i#0
(byte) muls8u::i#1
(byte) muls8u::i#2
(byte) muls8u::i#3
(word) muls8u::m
(word) muls8u::m#0
(word) muls8u::m#1
(word) muls8u::m#2
(word) muls8u::m#3
(word) muls8u::m#4
(word) muls8u::m#5
(word) muls8u::return
(word) muls8u::return#0
(word) muls8u::return#1
(word) muls8u::return#2
(word) muls8u::return#3
(word) muls8u::return#4
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte) print_char::ch#7
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#141
(byte*) print_char_cursor#142
(byte*) print_char_cursor#143
(byte*) print_char_cursor#144
(byte*) print_char_cursor#145
(byte*) print_char_cursor#146
(byte*) print_char_cursor#147
(byte*) print_char_cursor#148
(byte*) print_char_cursor#149
(byte*) print_char_cursor#15
(byte*) print_char_cursor#150
(byte*) print_char_cursor#151
(byte*) print_char_cursor#152
(byte*) print_char_cursor#153
(byte*) print_char_cursor#154
(byte*) print_char_cursor#155
(byte*) print_char_cursor#156
(byte*) print_char_cursor#157
(byte*) print_char_cursor#158
(byte*) print_char_cursor#159
(byte*) print_char_cursor#16
(byte*) print_char_cursor#160
(byte*) print_char_cursor#161
(byte*) print_char_cursor#162
(byte*) print_char_cursor#163
(byte*) print_char_cursor#164
(byte*) print_char_cursor#165
(byte*) print_char_cursor#166
(byte*) print_char_cursor#167
(byte*) print_char_cursor#168
(byte*) print_char_cursor#169
(byte*) print_char_cursor#17
(byte*) print_char_cursor#170
(byte*) print_char_cursor#171
(byte*) print_char_cursor#172
(byte*) print_char_cursor#173
(byte*) print_char_cursor#174
(byte*) print_char_cursor#175
(byte*) print_char_cursor#176
(byte*) print_char_cursor#177
(byte*) print_char_cursor#178
(byte*) print_char_cursor#179
(byte*) print_char_cursor#18
(byte*) print_char_cursor#180
(byte*) print_char_cursor#181
(byte*) print_char_cursor#182
(byte*) print_char_cursor#183
(byte*) print_char_cursor#184
(byte*) print_char_cursor#185
(byte*) print_char_cursor#186
(byte*) print_char_cursor#187
(byte*) print_char_cursor#188
(byte*) print_char_cursor#189
(byte*) print_char_cursor#19
(byte*) print_char_cursor#190
(byte*) print_char_cursor#191
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#100
(byte*) print_line_cursor#101
(byte*) print_line_cursor#102
(byte*) print_line_cursor#103
(byte*) print_line_cursor#104
(byte*) print_line_cursor#105
(byte*) print_line_cursor#106
(byte*) print_line_cursor#107
(byte*) print_line_cursor#108
(byte*) print_line_cursor#109
(byte*) print_line_cursor#11
(byte*) print_line_cursor#110
(byte*) print_line_cursor#111
(byte*) print_line_cursor#112
(byte*) print_line_cursor#113
(byte*) print_line_cursor#114
(byte*) print_line_cursor#115
(byte*) print_line_cursor#116
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#84
(byte*) print_line_cursor#85
(byte*) print_line_cursor#86
(byte*) print_line_cursor#87
(byte*) print_line_cursor#88
(byte*) print_line_cursor#89
(byte*) print_line_cursor#9
(byte*) print_line_cursor#90
(byte*) print_line_cursor#91
(byte*) print_line_cursor#92
(byte*) print_line_cursor#93
(byte*) print_line_cursor#94
(byte*) print_line_cursor#95
(byte*) print_line_cursor#96
(byte*) print_line_cursor#97
(byte*) print_line_cursor#98
(byte*) print_line_cursor#99
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(bool~) print_schar::$0
(signed byte~) print_schar::$4
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@5
(label) print_schar::@6
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0
(signed byte) print_schar::b#1
(signed byte) print_schar::b#2
(signed byte) print_schar::b#3
(signed byte) print_schar::b#4
(signed byte) print_schar::b#5
(signed byte) print_schar::b#6
(signed byte) print_schar::b#7
(signed byte) print_schar::b#8
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(void()) print_sint((signed word) print_sint::w)
(bool~) print_sint::$0
(signed word~) print_sint::$4
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@5
(label) print_sint::@6
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0
(signed word) print_sint::w#1
(signed word) print_sint::w#2
(signed word) print_sint::w#3
(signed word) print_sint::w#4
(signed word) print_sint::w#5
(signed word) print_sint::w#6
(signed word) print_sint::w#7
(signed word) print_sint::w#8
(signed word) print_sint::w#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#14
(byte*) print_str::str#15
(byte*) print_str::str#16
(byte*) print_str::str#17
(byte*) print_str::str#18
(byte*) print_str::str#19
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(byte) print_uchar::b#4
(byte) print_uchar::b#5
(byte) print_uchar::b#6
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word) print_uint::w#3
(word) print_uint::w#4
(word) print_uint::w#5
(word) print_uint::w#6
(word) print_uint::w#7

Fixing inline constructor with mulf8u_prepared::$0 ← (byte)*(mulf8u_prepared::memB) w= (byte)*(mulf8u_prepared::resL)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#16)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#24 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sint::$0 ← (signed word) print_sint::w#4 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_schar::$0 ← (signed byte) print_schar::b#3 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#6 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#6 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#3 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#4 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mul8s::$1 ← (signed byte) mul8s::a#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mul8s::$3 ← (signed byte) mul8s::b#2 < (number) 0
Adding number conversion cast (unumber) 1 in (byte*) mulf_init::sqr1_hi#0 ← (const byte*) mulf_sqr1_hi+(number) 1
Adding number conversion cast (unumber) 1 in (byte*) mulf_init::sqr1_lo#0 ← (const byte*) mulf_sqr1_lo+(number) 1
Adding number conversion cast (unumber) $200 in (bool~) mulf_init::$0 ← (byte*) mulf_init::sqr1_lo#2 != (const byte*) mulf_sqr1_lo+(number) $200
Adding number conversion cast (unumber) 1 in (number~) mulf_init::$1 ← (byte) mulf_init::c#1 & (number) 1
Adding number conversion cast (unumber) mulf_init::$1 in (number~) mulf_init::$1 ← (byte) mulf_init::c#1 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mulf_init::$2 ← (unumber~) mulf_init::$1 == (number) 0
Adding number conversion cast (unumber) $1ff in (bool~) mulf_init::$7 ← (byte*) mulf_init::sqr2_lo#2 != (const byte*) mulf_sqr2_lo+(number) $1ff
Adding number conversion cast (unumber) 0 in (bool~) mulf_init::$9 ← (byte) mulf_init::x_255#1 == (number) 0
Adding number conversion cast (unumber) $100 in *((const byte*) mulf_sqr2_lo+(number) $1ff) ← *((const byte*) mulf_sqr1_lo+(number) $100)
Adding number conversion cast (unumber) $1ff in *((const byte*) mulf_sqr2_lo+(number) $1ff) ← *((const byte*) mulf_sqr1_lo+(unumber)(number) $100)
Adding number conversion cast (unumber) $100 in *((const byte*) mulf_sqr2_hi+(number) $1ff) ← *((const byte*) mulf_sqr1_hi+(number) $100)
Adding number conversion cast (unumber) $1ff in *((const byte*) mulf_sqr2_hi+(number) $1ff) ← *((const byte*) mulf_sqr1_hi+(unumber)(number) $100)
Adding number conversion cast (unumber) 1 in (byte) mulf_init::dir#1 ← (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mulf8s_prepared::$1 ← *((const nomodify signed byte*) mulf8s_prepared::memA) < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mulf8s_prepared::$3 ← (signed byte) mulf8s_prepared::b#2 < (number) 0
Adding number conversion cast (unumber) 5 in *((const byte*) BG_COLOR) ← (number) 5
Adding number conversion cast (unumber) 0 in (bool~) muls8u::$0 ← (byte) muls8u::a#1 != (number) 0
Adding number conversion cast (snumber) 0 in (bool~) muls8s::$0 ← (signed byte) muls8s::a#1 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) muls8s::$1 ← (signed byte) muls8s::a#2 > (number) 0
Adding number conversion cast (unumber) $200*4 in (bool~) mulf_tables_cmp::$2 ← (byte*) mulf_tables_cmp::kc_sqr#2 < (const byte*) mulf_sqr1_lo+(number) $200*(number) 4
Adding number conversion cast (unumber) 2 in *((const byte*) BG_COLOR) ← (number) 2
Adding number conversion cast (unumber) 0 in (byte) mul8u_compare::ok#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u_compare::$9 ← (byte) mul8u_compare::ok#3 == (number) 0
Adding number conversion cast (unumber) 0 in (byte) mul8u_compare::ok#2 ← (number) 0
Adding number conversion cast (unumber) 2 in *((const byte*) BG_COLOR) ← (number) 2
Adding number conversion cast (snumber) -$80 in (bool~) mul8s_compare::$2 ← (signed byte) mul8s_compare::a#2 != (number) -$80
Adding number conversion cast (snumber) -$80 in (bool~) mul8s_compare::$3 ← (signed byte) mul8s_compare::b#2 != (number) -$80
Adding number conversion cast (unumber) 0 in (byte) mul8s_compare::ok#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8s_compare::$11 ← (byte) mul8s_compare::ok#3 == (number) 0
Adding number conversion cast (unumber) 0 in (byte) mul8s_compare::ok#2 ← (number) 0
Adding number conversion cast (unumber) 2 in *((const byte*) BG_COLOR) ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) mulf_init::dir#1 ← (unumber)(number) 1
Inlining cast *((const byte*) BG_COLOR) ← (unumber)(number) 5
Inlining cast *((const byte*) BG_COLOR) ← (unumber)(number) 2
Inlining cast (byte) mul8u_compare::ok#1 ← (unumber)(number) 0
Inlining cast (byte) mul8u_compare::ok#2 ← (unumber)(number) 0
Inlining cast *((const byte*) BG_COLOR) ← (unumber)(number) 2
Inlining cast (byte) mul8s_compare::ok#1 ← (unumber)(number) 0
Inlining cast (byte) mul8s_compare::ok#2 ← (unumber)(number) 0
Inlining cast *((const byte*) BG_COLOR) ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 253
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (signed byte*) 253
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $200
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast $1ff
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast 1
Simplifying constant integer cast *((const nomodify byte*) mulf8u_prepared::memB)
Simplifying constant integer cast *((const nomodify byte*) mulf8u_prepared::resL)
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast -$80
Simplifying constant integer cast -$80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized signed number type (signed byte) -$80
Finalized signed number type (signed byte) -$80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#6 & (byte) $f
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#4 & (byte) 1
Inferred type updated to byte in (unumber~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [147] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [146] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Inversing boolean not [171] (bool~) mul8s::$2 ← (signed byte) mul8s::a#2 >= (signed byte) 0 from [170] (bool~) mul8s::$1 ← (signed byte) mul8s::a#2 < (signed byte) 0
Inversing boolean not [175] (bool~) mul8s::$4 ← (signed byte) mul8s::b#2 >= (signed byte) 0 from [174] (bool~) mul8s::$3 ← (signed byte) mul8s::b#2 < (signed byte) 0
Inversing boolean not [206] (bool~) mulf_init::$3 ← (byte~) mulf_init::$1 != (byte) 0 from [205] (bool~) mulf_init::$2 ← (byte~) mulf_init::$1 == (byte) 0
Inversing boolean not [234] (bool~) mulf_init::$10 ← (byte) mulf_init::x_255#1 != (byte) 0 from [233] (bool~) mulf_init::$9 ← (byte) mulf_init::x_255#1 == (byte) 0
Inversing boolean not [276] (bool~) mulf8s_prepared::$2 ← *((const nomodify signed byte*) mulf8s_prepared::memA) >= (signed byte) 0 from [275] (bool~) mulf8s_prepared::$1 ← *((const nomodify signed byte*) mulf8s_prepared::memA) < (signed byte) 0
Inversing boolean not [280] (bool~) mulf8s_prepared::$4 ← (signed byte) mulf8s_prepared::b#2 >= (signed byte) 0 from [279] (bool~) mulf8s_prepared::$3 ← (signed byte) mulf8s_prepared::b#2 < (signed byte) 0
Inversing boolean not [344] (bool~) muls8u::$1 ← (byte) muls8u::a#1 == (byte) 0 from [343] (bool~) muls8u::$0 ← (byte) muls8u::a#1 != (byte) 0
Inversing boolean not [368] (bool~) muls8s::$2 ← (signed byte) muls8s::a#2 <= (signed byte) 0 from [367] (bool~) muls8s::$1 ← (signed byte) muls8s::a#2 > (signed byte) 0
Inversing boolean not [405] (bool~) mulf_tables_cmp::$4 ← *((byte*) mulf_tables_cmp::kc_sqr#3) == *((byte*) mulf_tables_cmp::asm_sqr#2) from [404] (bool~) mulf_tables_cmp::$3 ← *((byte*) mulf_tables_cmp::kc_sqr#3) != *((byte*) mulf_tables_cmp::asm_sqr#2)
Inversing boolean not [469] (bool~) mul8u_compare::$6 ← (word) mul8u_compare::ms#1 == (word) mul8u_compare::mf#1 from [468] (bool~) mul8u_compare::$5 ← (word) mul8u_compare::ms#1 != (word) mul8u_compare::mf#1
Inversing boolean not [473] (bool~) mul8u_compare::$8 ← (word) mul8u_compare::ms#2 == (word) mul8u_compare::mn#1 from [472] (bool~) mul8u_compare::$7 ← (word) mul8u_compare::ms#2 != (word) mul8u_compare::mn#1
Inversing boolean not [479] (bool~) mul8u_compare::$10 ← (byte) mul8u_compare::ok#3 != (byte) 0 from [478] (bool~) mul8u_compare::$9 ← (byte) mul8u_compare::ok#3 == (byte) 0
Inversing boolean not [607] (bool~) mul8s_compare::$8 ← (signed word) mul8s_compare::ms#1 == (signed word) mul8s_compare::mf#1 from [606] (bool~) mul8s_compare::$7 ← (signed word) mul8s_compare::ms#1 != (signed word) mul8s_compare::mf#1
Inversing boolean not [613] (bool~) mul8s_compare::$10 ← (signed word) mul8s_compare::ms#2 == (signed word) mul8s_compare::mn#1 from [612] (bool~) mul8s_compare::$9 ← (signed word) mul8s_compare::ms#2 != (signed word) mul8s_compare::mn#1
Inversing boolean not [619] (bool~) mul8s_compare::$12 ← (byte) mul8s_compare::ok#3 != (byte) 0 from [618] (bool~) mul8s_compare::$11 ← (byte) mul8s_compare::ok#3 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#16 = print_str::str#17 print_str::str#18 
Alias print_char_cursor#1 = print_char_cursor#136 print_char_cursor#137 print_char_cursor#70 
Alias print_char_cursor#0 = print_char_cursor#69 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#25 print_char_cursor#2 print_line_cursor#26 print_char_cursor#72 print_line_cursor#1 print_char_cursor#3 
Alias print_char_cursor#139 = print_char_cursor#159 print_char_cursor#140 
Alias print_sint::w#4 = print_sint::w#7 print_sint::w#5 print_sint::w#9 print_sint::w#8 
Alias print_char_cursor#4 = print_char_cursor#73 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#5 = print_char_cursor#74 
Alias print_char_cursor#6 = print_char_cursor#75 print_char_cursor#76 print_char_cursor#7 
Alias print_char_cursor#142 = print_char_cursor#160 print_char_cursor#143 
Alias print_schar::b#3 = print_schar::b#6 print_schar::b#4 print_schar::b#8 print_schar::b#7 
Alias print_char_cursor#77 = print_char_cursor#8 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#78 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#79 print_char_cursor#80 print_char_cursor#11 
Alias print_uchar::b#1 = print_uint::$0 
Alias print_uint::w#6 = print_uint::w#7 
Alias print_char_cursor#12 = print_char_cursor#81 
Alias print_uchar::b#2 = print_uint::$2 
Alias print_char_cursor#13 = print_char_cursor#82 print_char_cursor#83 print_char_cursor#14 
Alias print_uchar::b#5 = print_uchar::b#6 
Alias print_char_cursor#15 = print_char_cursor#84 
Alias print_char_cursor#16 = print_char_cursor#85 print_char_cursor#86 print_char_cursor#17 
Alias print_char_cursor#18 = print_char_cursor#88 print_char_cursor#19 
Alias print_line_cursor#2 = print_screen#3 print_screen#2 print_char_cursor#20 print_line_cursor#27 print_char_cursor#89 print_line_cursor#3 print_char_cursor#21 
Alias mul8u::a#3 = mul8u::a#4 mul8u::a#7 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#4 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul8u::return#2 = mul8u::return#5 
Alias mul8s::a#1 = mul8s::a#2 mul8s::a#5 
Alias mul8s::b#1 = mul8s::b#4 mul8s::b#3 
Alias mul8s::m#0 = mul8s::$0 mul8s::m#3 
Alias mul8s::$11 = mul8s::$7 
Alias mul8s::m#5 = mul8s::m#6 
Alias mul8s::a#3 = mul8s::a#4 
Alias mul8s::$12 = mul8s::$10 
Alias mul8s::return#0 = mul8s::return#3 mul8s::return#1 
Alias mulf_init::c#2 = mulf_init::c#3 
Alias mulf_init::sqr#4 = mulf_init::sqr#5 mulf_init::sqr#6 
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#4 mulf_init::sqr1_lo#5 
Alias mulf_init::sqr1_hi#3 = mulf_init::sqr1_hi#5 mulf_init::sqr1_hi#4 
Alias mulf_init::x_2#3 = mulf_init::x_2#4 mulf_init::x_2#5 
Alias mulf_init::sqr#1 = mulf_init::$6 
Alias mulf_init::c#1 = mulf_init::c#5 
Alias mulf_init::x_255#2 = mulf_init::x_255#3 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#3 mulf_init::sqr2_lo#5 
Alias mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#3 
Alias mulf_init::dir#2 = mulf_init::dir#3 
Alias mulf_init::x_255#1 = mulf_init::$8 mulf_init::x_255#5 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#5 
Alias mulf8u_prepared::return#0 = mulf8u_prepared::$0 mulf8u_prepared::return#4 mulf8u_prepared::return#1 
Alias mulf8u::b#1 = mulf8u::b#2 
Alias mulf8u_prepared::return#2 = mulf8u_prepared::return#5 
Alias mulf8u::return#0 = mulf8u::$1 mulf8u::return#3 mulf8u::return#1 
Alias mulf8u_prepared::return#3 = mulf8u_prepared::return#6 
Alias mulf8s_prepared::b#1 = mulf8s_prepared::b#4 mulf8s_prepared::b#3 
Alias mulf8s_prepared::m#0 = mulf8s_prepared::$0 mulf8s_prepared::m#3 
Alias mulf8s_prepared::$11 = mulf8s_prepared::$7 
Alias mulf8s_prepared::m#5 = mulf8s_prepared::m#6 
Alias mulf8s_prepared::$12 = mulf8s_prepared::$10 
Alias mulf8s_prepared::return#0 = mulf8s_prepared::return#3 mulf8s_prepared::return#1 
Alias mulf8s::mulf8s_prepare1_a#0 = mulf8s::a#1 mulf8s::mulf8s_prepare1_a#1 
Alias mulf8s::b#1 = mulf8s::b#3 mulf8s::b#4 mulf8s::b#2 
Alias mulf8s_prepared::return#2 = mulf8s_prepared::return#4 
Alias mulf8s::return#0 = mulf8s::$1 mulf8s::return#3 mulf8s::return#1 
Alias print_line_cursor#28 = print_line_cursor#4 print_line_cursor#59 print_line_cursor#49 
Alias print_char_cursor#148 = print_char_cursor#22 print_char_cursor#90 print_char_cursor#161 
Alias print_char_cursor#23 = print_char_cursor#91 
Alias print_line_cursor#29 = print_line_cursor#5 
Alias print_char_cursor#24 = print_char_cursor#92 
Alias print_line_cursor#30 = print_line_cursor#6 
Alias print_char_cursor#25 = print_char_cursor#93 print_char_cursor#94 print_char_cursor#26 
Alias print_line_cursor#31 = print_line_cursor#7 print_line_cursor#32 print_line_cursor#8 
Alias muls8u::return#0 = muls8u::m#2 muls8u::return#3 muls8u::return#1 
Alias muls8u::a#1 = muls8u::a#3 
Alias muls8u::m#0 = muls8u::m#5 
Alias muls8u::b#3 = muls8u::b#4 
Alias muls8u::m#3 = muls8u::m#4 
Alias muls8u::b#1 = muls8u::b#2 
Alias muls8u::i#2 = muls8u::i#3 
Alias muls8u::a#2 = muls8u::a#4 
Alias muls8u::m#1 = muls8u::$3 
Alias muls8s::a#1 = muls8s::a#7 muls8s::a#2 muls8s::a#5 
Alias muls8s::m#0 = muls8s::m#10 muls8s::m#7 muls8s::m#9 
Alias muls8s::b#5 = muls8s::b#6 muls8s::b#7 muls8s::b#8 
Alias muls8s::m#3 = muls8s::m#6 
Alias muls8s::b#1 = muls8s::b#3 
Alias muls8s::j#2 = muls8s::j#3 
Alias muls8s::a#3 = muls8s::a#6 
Alias muls8s::m#1 = muls8s::$4 
Alias muls8s::return#0 = muls8s::m#4 muls8s::return#3 muls8s::return#1 
Alias muls8s::m#5 = muls8s::m#8 
Alias muls8s::b#2 = muls8s::b#4 
Alias muls8s::i#2 = muls8s::i#3 
Alias muls8s::a#4 = muls8s::a#8 
Alias muls8s::m#2 = muls8s::$6 
Alias mulf_tables_cmp::kc_sqr#2 = mulf_tables_cmp::kc_sqr#3 mulf_tables_cmp::kc_sqr#4 mulf_tables_cmp::kc_sqr#8 mulf_tables_cmp::kc_sqr#7 mulf_tables_cmp::kc_sqr#6 mulf_tables_cmp::kc_sqr#5 
Alias mulf_tables_cmp::asm_sqr#2 = mulf_tables_cmp::asm_sqr#5 mulf_tables_cmp::asm_sqr#3 mulf_tables_cmp::asm_sqr#6 mulf_tables_cmp::asm_sqr#4 
Alias print_char_cursor#149 = print_char_cursor#163 print_char_cursor#162 print_char_cursor#169 print_char_cursor#150 
Alias print_line_cursor#50 = print_line_cursor#90 print_line_cursor#68 print_line_cursor#60 print_line_cursor#79 print_line_cursor#91 print_line_cursor#80 print_line_cursor#69 print_line_cursor#61 print_line_cursor#51 
Alias print_char_cursor#27 = print_char_cursor#95 
Alias print_line_cursor#33 = print_line_cursor#9 
Alias print_char_cursor#28 = print_char_cursor#96 
Alias print_char_cursor#29 = print_char_cursor#97 
Alias print_char_cursor#30 = print_char_cursor#98 
Alias print_char_cursor#31 = print_char_cursor#99 
Alias print_char_cursor#100 = print_char_cursor#32 
Alias print_char_cursor#101 = print_char_cursor#33 
Alias print_line_cursor#10 = print_line_cursor#34 
Alias muls8u::return#2 = muls8u::return#4 
Alias mul8u_compare::a#12 = mul8u_compare::a#3 mul8u_compare::a#2 mul8u_compare::a#4 mul8u_compare::a#13 
Alias mul8u_compare::b#10 = mul8u_compare::b#3 mul8u_compare::b#2 mul8u_compare::b#4 mul8u_compare::b#11 
Alias print_char_cursor#177 = print_char_cursor#186 print_char_cursor#188 print_char_cursor#182 print_char_cursor#178 
Alias print_line_cursor#103 = print_line_cursor#97 print_line_cursor#92 print_line_cursor#81 print_line_cursor#82 
Alias mul8u_compare::ms#0 = mul8u_compare::$2 mul8u_compare::ms#4 mul8u_compare::ms#1 mul8u_compare::ms#5 
Alias mulf8u::return#2 = mulf8u::return#4 
Alias mul8u_compare::mf#0 = mul8u_compare::$3 mul8u_compare::mf#1 mul8u_compare::mf#6 
Alias mul8u::return#3 = mul8u::return#6 
Alias mul8u_compare::mn#0 = mul8u_compare::$4 mul8u_compare::mn#3 
Alias mul8u_compare::b#8 = mul8u_compare::b#9 
Alias mul8u_compare::a#10 = mul8u_compare::a#11 
Alias mul8u_compare::ms#2 = mul8u_compare::ms#7 
Alias mul8u_compare::mn#1 = mul8u_compare::mn#5 
Alias mul8u_compare::mf#4 = mul8u_compare::mf#5 
Alias print_char_cursor#170 = print_char_cursor#171 
Alias print_line_cursor#70 = print_line_cursor#71 
Alias mul8u_compare::b#5 = mul8u_compare::b#7 mul8u_compare::b#6 
Alias mul8u_compare::a#5 = mul8u_compare::a#8 mul8u_compare::a#9 mul8u_compare::a#6 
Alias print_char_cursor#151 = print_char_cursor#172 print_char_cursor#164 print_char_cursor#165 print_char_cursor#152 
Alias print_line_cursor#52 = print_line_cursor#83 print_line_cursor#62 print_line_cursor#72 print_line_cursor#63 print_line_cursor#53 
Alias mul8u_compare::ms#3 = mul8u_compare::ms#6 
Alias mul8u_compare::mn#2 = mul8u_compare::mn#4 
Alias mul8u_compare::mf#2 = mul8u_compare::mf#3 
Alias print_char_cursor#102 = print_char_cursor#34 
Alias print_line_cursor#11 = print_line_cursor#35 
Alias print_char_cursor#103 = print_char_cursor#35 
Alias print_line_cursor#12 = print_line_cursor#36 
Alias print_char_cursor#104 = print_char_cursor#36 
Alias print_line_cursor#13 = print_line_cursor#37 
Alias print_char_cursor#105 = print_char_cursor#37 
Alias mul8u_error::a#1 = mul8u_error::a#2 
Alias mul8u_error::b#1 = mul8u_error::b#3 mul8u_error::b#4 mul8u_error::b#2 
Alias mul8u_error::ms#1 = mul8u_error::ms#5 mul8u_error::ms#6 mul8u_error::ms#4 mul8u_error::ms#3 mul8u_error::ms#2 
Alias mul8u_error::mn#1 = mul8u_error::mn#7 mul8u_error::mn#8 mul8u_error::mn#6 mul8u_error::mn#5 mul8u_error::mn#4 mul8u_error::mn#3 mul8u_error::mn#2 
Alias mul8u_error::mf#1 = mul8u_error::mf#9 mul8u_error::mf#10 mul8u_error::mf#8 mul8u_error::mf#7 mul8u_error::mf#6 mul8u_error::mf#5 mul8u_error::mf#4 mul8u_error::mf#3 mul8u_error::mf#2 
Alias print_line_cursor#104 = print_line_cursor#113 print_line_cursor#115 print_line_cursor#111 print_line_cursor#108 print_line_cursor#98 print_line_cursor#93 print_line_cursor#84 print_line_cursor#73 print_line_cursor#64 print_line_cursor#54 
Alias print_char_cursor#106 = print_char_cursor#38 
Alias print_char_cursor#107 = print_char_cursor#39 
Alias print_char_cursor#108 = print_char_cursor#40 
Alias print_char_cursor#109 = print_char_cursor#41 
Alias print_char_cursor#110 = print_char_cursor#42 
Alias print_char_cursor#111 = print_char_cursor#43 
Alias print_char_cursor#112 = print_char_cursor#44 
Alias print_char_cursor#113 = print_char_cursor#45 
Alias print_char_cursor#114 = print_char_cursor#46 
Alias print_char_cursor#115 = print_char_cursor#47 
Alias print_line_cursor#14 = print_line_cursor#38 print_line_cursor#39 print_line_cursor#15 
Alias print_char_cursor#116 = print_char_cursor#48 print_char_cursor#117 print_char_cursor#49 
Alias mul8s_compare::a#10 = mul8s_compare::a#2 
Alias print_char_cursor#154 = print_char_cursor#183 print_char_cursor#166 
Alias print_line_cursor#55 = print_line_cursor#99 print_line_cursor#74 print_line_cursor#65 
Alias print_char_cursor#118 = print_char_cursor#50 
Alias print_line_cursor#16 = print_line_cursor#40 
Alias print_char_cursor#119 = print_char_cursor#51 
Alias mul8s_compare::a#14 = mul8s_compare::a#3 mul8s_compare::a#8 mul8s_compare::a#4 mul8s_compare::a#5 mul8s_compare::a#15 mul8s_compare::a#6 
Alias mul8s_compare::b#11 = mul8s_compare::b#3 mul8s_compare::b#2 mul8s_compare::b#4 mul8s_compare::b#5 mul8s_compare::b#12 
Alias print_char_cursor#174 = print_char_cursor#189 print_char_cursor#179 print_char_cursor#187 print_char_cursor#185 print_char_cursor#181 print_char_cursor#180 
Alias print_line_cursor#101 = print_line_cursor#105 print_line_cursor#95 print_line_cursor#94 print_line_cursor#88 print_line_cursor#86 print_line_cursor#87 
Alias muls8s::return#2 = muls8s::return#4 
Alias mul8s_compare::ms#0 = mul8s_compare::$4 mul8s_compare::ms#4 mul8s_compare::ms#1 mul8s_compare::ms#5 
Alias mulf8s::return#2 = mulf8s::return#4 
Alias mul8s_compare::mf#0 = mul8s_compare::$5 mul8s_compare::mf#1 mul8s_compare::mf#6 
Alias mul8s::return#2 = mul8s::return#4 
Alias mul8s_compare::mn#0 = mul8s_compare::$6 mul8s_compare::mn#3 
Alias mul8s_compare::b#10 = mul8s_compare::b#9 
Alias mul8s_compare::a#12 = mul8s_compare::a#13 
Alias mul8s_compare::ms#2 = mul8s_compare::ms#7 
Alias mul8s_compare::mn#1 = mul8s_compare::mn#5 
Alias mul8s_compare::mf#4 = mul8s_compare::mf#5 
Alias print_char_cursor#175 = print_char_cursor#176 
Alias print_line_cursor#75 = print_line_cursor#76 
Alias mul8s_compare::b#6 = mul8s_compare::b#8 mul8s_compare::b#7 
Alias mul8s_compare::a#11 = mul8s_compare::a#9 mul8s_compare::a#7 
Alias print_char_cursor#155 = print_char_cursor#184 print_char_cursor#167 
Alias print_line_cursor#100 = print_line_cursor#66 print_line_cursor#56 
Alias mul8s_compare::ms#3 = mul8s_compare::ms#6 
Alias mul8s_compare::mn#2 = mul8s_compare::mn#4 
Alias mul8s_compare::mf#2 = mul8s_compare::mf#3 
Alias print_char_cursor#120 = print_char_cursor#52 
Alias print_line_cursor#17 = print_line_cursor#41 
Alias print_char_cursor#121 = print_char_cursor#53 
Alias print_line_cursor#18 = print_line_cursor#42 
Alias mul8s_error::a#1 = mul8s_error::a#2 
Alias mul8s_error::b#1 = mul8s_error::b#3 mul8s_error::b#4 mul8s_error::b#2 
Alias mul8s_error::ms#1 = mul8s_error::ms#5 mul8s_error::ms#6 mul8s_error::ms#4 mul8s_error::ms#3 mul8s_error::ms#2 
Alias mul8s_error::mn#1 = mul8s_error::mn#7 mul8s_error::mn#8 mul8s_error::mn#6 mul8s_error::mn#5 mul8s_error::mn#4 mul8s_error::mn#3 mul8s_error::mn#2 
Alias mul8s_error::mf#1 = mul8s_error::mf#9 mul8s_error::mf#10 mul8s_error::mf#8 mul8s_error::mf#7 mul8s_error::mf#6 mul8s_error::mf#5 mul8s_error::mf#4 mul8s_error::mf#3 mul8s_error::mf#2 
Alias print_line_cursor#102 = print_line_cursor#114 print_line_cursor#116 print_line_cursor#112 print_line_cursor#109 print_line_cursor#106 print_line_cursor#96 print_line_cursor#89 print_line_cursor#77 print_line_cursor#67 print_line_cursor#57 
Alias print_char_cursor#122 = print_char_cursor#54 
Alias print_char_cursor#123 = print_char_cursor#55 
Alias print_char_cursor#124 = print_char_cursor#56 
Alias print_char_cursor#125 = print_char_cursor#57 
Alias print_char_cursor#126 = print_char_cursor#58 
Alias print_char_cursor#127 = print_char_cursor#59 
Alias print_char_cursor#128 = print_char_cursor#60 
Alias print_char_cursor#129 = print_char_cursor#61 
Alias print_char_cursor#130 = print_char_cursor#62 
Alias print_char_cursor#131 = print_char_cursor#63 
Alias print_line_cursor#19 = print_line_cursor#43 print_line_cursor#44 print_line_cursor#20 
Alias print_char_cursor#132 = print_char_cursor#64 print_char_cursor#133 print_char_cursor#65 
Alias print_screen#0 = print_line_cursor#21 print_char_cursor#66 print_line_cursor#58 print_char_cursor#157 print_screen#7 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#22 = print_line_cursor#45 print_line_cursor#46 print_line_cursor#23 
Alias print_char_cursor#134 = print_char_cursor#67 print_char_cursor#135 print_char_cursor#68 
Successful SSA optimization Pass2AliasElimination
Alias mul8u::a#3 = mul8u::a#5 
Alias mul8u::mb#2 = mul8u::mb#3 
Alias mul8s::b#1 = mul8s::b#2 
Alias mul8s::a#1 = mul8s::a#3 
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#3 
Alias mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#3 
Alias mulf_init::c#1 = mulf_init::c#4 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#4 
Alias mulf_init::x_255#1 = mulf_init::x_255#4 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#4 
Alias mulf8s_prepared::b#1 = mulf8s_prepared::b#2 
Alias mul8u_compare::ms#0 = mul8u_compare::ms#2 mul8u_compare::ms#3 
Alias mul8u_compare::mn#0 = mul8u_compare::mn#1 mul8u_compare::mn#2 
Alias mul8u_compare::b#10 = mul8u_compare::b#8 mul8u_compare::b#5 
Alias mul8u_compare::a#10 = mul8u_compare::a#12 mul8u_compare::a#5 
Alias mul8u_compare::mf#0 = mul8u_compare::mf#4 mul8u_compare::mf#2 
Alias print_char_cursor#151 = print_char_cursor#170 print_char_cursor#177 
Alias print_line_cursor#103 = print_line_cursor#70 print_line_cursor#52 
Alias mul8s_compare::ms#0 = mul8s_compare::ms#2 mul8s_compare::ms#3 
Alias mul8s_compare::mn#0 = mul8s_compare::mn#1 mul8s_compare::mn#2 
Alias mul8s_compare::b#10 = mul8s_compare::b#11 mul8s_compare::b#6 
Alias mul8s_compare::a#11 = mul8s_compare::a#12 mul8s_compare::a#14 
Alias mul8s_compare::mf#0 = mul8s_compare::mf#4 mul8s_compare::mf#2 
Alias print_char_cursor#155 = print_char_cursor#175 print_char_cursor#174 
Alias print_line_cursor#100 = print_line_cursor#75 print_line_cursor#101 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#71 (byte*) print_char_cursor#138
Identical Phi Values (byte*) print_char_cursor#4 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#6 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#77 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#78 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_line_cursor#2 (byte*) print_screen#5
Identical Phi Values (signed byte) mul8s::a#1 (signed byte) mul8s::a#0
Identical Phi Values (signed byte) mul8s::b#1 (signed byte) mul8s::b#0
Identical Phi Values (byte) mulf8u::a#1 (byte) mulf8u::a#0
Identical Phi Values (byte) mulf8u::b#1 (byte) mulf8u::b#0
Identical Phi Values (signed byte) mulf8s_prepared::b#1 (signed byte) mulf8s_prepared::b#0
Identical Phi Values (signed byte) mulf8s::mulf8s_prepare1_a#0 (signed byte) mulf8s::a#0
Identical Phi Values (signed byte) mulf8s::b#1 (signed byte) mulf8s::b#0
Identical Phi Values (byte*) print_screen#5 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#48 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#147 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#28 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#148 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#101
Identical Phi Values (byte*) print_line_cursor#29 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#103
Identical Phi Values (byte*) print_line_cursor#30 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#121
Identical Phi Values (byte*) print_line_cursor#31 (byte*) print_line_cursor#18
Identical Phi Values (byte) muls8u::a#1 (byte) muls8u::a#0
Identical Phi Values (byte) muls8u::b#3 (byte) muls8u::b#0
Identical Phi Values (byte) muls8u::a#2 (byte) muls8u::a#1
Identical Phi Values (byte) muls8u::b#1 (byte) muls8u::b#3
Identical Phi Values (signed byte) muls8s::a#1 (signed byte) muls8s::a#0
Identical Phi Values (signed byte) muls8s::b#5 (signed byte) muls8s::b#0
Identical Phi Values (signed byte) muls8s::a#3 (signed byte) muls8s::a#1
Identical Phi Values (signed byte) muls8s::b#1 (signed byte) muls8s::b#5
Identical Phi Values (signed byte) muls8s::a#4 (signed byte) muls8s::a#1
Identical Phi Values (signed byte) muls8s::b#2 (signed byte) muls8s::b#5
Identical Phi Values (byte*) print_char_cursor#168 (byte*) print_char_cursor#148
Identical Phi Values (byte*) print_line_cursor#78 (byte*) print_line_cursor#28
Identical Phi Values (byte*) print_char_cursor#149 (byte*) print_char_cursor#168
Identical Phi Values (byte*) print_line_cursor#50 (byte*) print_line_cursor#78
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_line_cursor#33 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#191 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#110 (byte*) print_line_cursor#29
Identical Phi Values (byte) mul8u_compare::a#10 (byte) mul8u_compare::a#7
Identical Phi Values (byte*) print_char_cursor#151 (byte*) print_char_cursor#190
Identical Phi Values (byte*) print_line_cursor#103 (byte*) print_line_cursor#107
Identical Phi Values (byte*) print_char_cursor#102 (byte*) print_char_cursor#116
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#104 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#153 (byte*) print_char_cursor#151
Identical Phi Values (byte) mul8u_error::a#1 (byte) mul8u_error::a#0
Identical Phi Values (byte) mul8u_error::b#1 (byte) mul8u_error::b#0
Identical Phi Values (word) mul8u_error::ms#1 (word) mul8u_error::ms#0
Identical Phi Values (word) mul8u_error::mn#1 (word) mul8u_error::mn#0
Identical Phi Values (word) mul8u_error::mf#1 (word) mul8u_error::mf#0
Identical Phi Values (byte*) print_line_cursor#104 (byte*) print_line_cursor#103
Identical Phi Values (byte*) print_char_cursor#106 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#108 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#109 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#110 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#111 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#112 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#113 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_char_cursor#114 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#115 (byte*) print_char_cursor#13
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#116 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#173 (byte*) print_char_cursor#24
Identical Phi Values (byte*) print_line_cursor#85 (byte*) print_line_cursor#30
Identical Phi Values (byte*) print_char_cursor#118 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#119 (byte*) print_line_cursor#0
Identical Phi Values (signed byte) mul8s_compare::a#11 (signed byte) mul8s_compare::a#10
Identical Phi Values (byte*) print_char_cursor#155 (byte*) print_char_cursor#154
Identical Phi Values (byte*) print_line_cursor#100 (byte*) print_line_cursor#55
Identical Phi Values (byte*) print_char_cursor#120 (byte*) print_char_cursor#132
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#156 (byte*) print_char_cursor#155
Identical Phi Values (signed byte) mul8s_error::a#1 (signed byte) mul8s_error::a#0
Identical Phi Values (signed byte) mul8s_error::b#1 (signed byte) mul8s_error::b#0
Identical Phi Values (signed word) mul8s_error::ms#1 (signed word) mul8s_error::ms#0
Identical Phi Values (signed word) mul8s_error::mn#1 (signed word) mul8s_error::mn#0
Identical Phi Values (signed word) mul8s_error::mf#1 (signed word) mul8s_error::mf#0
Identical Phi Values (byte*) print_line_cursor#102 (byte*) print_line_cursor#100
Identical Phi Values (byte*) print_char_cursor#122 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#123 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#124 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#125 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#126 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#127 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_char_cursor#128 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#129 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_char_cursor#130 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#131 (byte*) print_char_cursor#6
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#132 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#22 (byte*) print_line_cursor#31
Identical Phi Values (byte*) print_char_cursor#134 (byte*) print_char_cursor#25
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#139 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#141 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#142 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#144 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#190 (byte*) print_char_cursor#101
Identical Phi Values (byte*) print_line_cursor#107 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#103 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#154 (byte*) print_char_cursor#103
Identical Phi Values (byte*) print_line_cursor#55 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#121 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [16] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [26] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1
Simple Condition (bool~) print_sint::$0 [30] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1
Simple Condition (bool~) print_schar::$0 [45] if((signed byte) print_schar::b#3<(signed byte) 0) goto print_schar::@1
Simple Condition (bool~) mul8u::$0 [92] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [95] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) mul8s::$2 [108] if((signed byte) mul8s::a#0>=(signed byte) 0) goto mul8s::@1
Simple Condition (bool~) mul8s::$4 [111] if((signed byte) mul8s::b#0>=(signed byte) 0) goto mul8s::@2
Simple Condition (bool~) mulf_init::$0 [130] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
Simple Condition (bool~) mulf_init::$3 [134] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@4
Simple Condition (bool~) mulf_init::$7 [151] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@7
Simple Condition (bool~) mulf_init::$10 [157] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
Simple Condition (bool~) mulf8s_prepared::$2 [187] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1
Simple Condition (bool~) mulf8s_prepared::$4 [190] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2
Simple Condition (bool~) muls8u::$1 [226] if((byte) muls8u::a#0==(byte) 0) goto muls8u::@1
Simple Condition (bool~) muls8u::$2 [231] if((byte) muls8u::i#2!=(byte) muls8u::a#0) goto muls8u::@4
Simple Condition (bool~) muls8s::$0 [238] if((signed byte) muls8s::a#0<(signed byte) 0) goto muls8s::@1
Simple Condition (bool~) muls8s::$2 [241] if((signed byte) muls8s::a#0<=(signed byte) 0) goto muls8s::@2
Simple Condition (bool~) muls8s::$3 [245] if((signed byte) muls8s::j#2!=(signed byte) muls8s::a#0) goto muls8s::@6
Simple Condition (bool~) muls8s::$5 [251] if((signed byte) muls8s::i#2!=(signed byte) muls8s::a#0) goto muls8s::@8
Simple Condition (bool~) mulf_tables_cmp::$2 [266] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2
Simple Condition (bool~) mulf_tables_cmp::$4 [268] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4
Simple Condition (bool~) mul8u_compare::$6 [313] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3
Simple Condition (bool~) mul8u_compare::$8 [316] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@4
Simple Condition (bool~) mul8u_compare::$10 [320] if((byte) mul8u_compare::ok#3!=(byte) 0) goto mul8u_compare::@5
Simple Condition (bool~) mul8u_compare::$12 [324] if((byte) mul8u_compare::b#1!=rangelast(0,$ff)) goto mul8u_compare::@2
Simple Condition (bool~) mul8u_compare::$13 [337] if((byte) mul8u_compare::a#1!=rangelast(0,$ff)) goto mul8u_compare::@1
Simple Condition (bool~) mul8s_compare::$2 [381] if((signed byte) mul8s_compare::a#10!=(signed byte) -$80) goto mul8s_compare::@2
Simple Condition (bool~) mul8s_compare::$3 [390] if((signed byte) mul8s_compare::b#10!=(signed byte) -$80) goto mul8s_compare::@5
Simple Condition (bool~) mul8s_compare::$8 [408] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@7
Simple Condition (bool~) mul8s_compare::$10 [412] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@8
Simple Condition (bool~) mul8s_compare::$12 [416] if((byte) mul8s_compare::ok#3!=(byte) 0) goto mul8s_compare::@9
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#3 = '-'
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const word) mul8u::res#0 = 0
Constant (const word) mulf_init::sqr#0 = 0
Constant (const byte) mulf_init::x_2#0 = 0
Constant (const byte) mulf_init::c#0 = 0
Constant (const byte*) mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Constant (const byte*) mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Constant (const byte) mulf_init::x_255#0 = -1
Constant (const byte) mulf_init::dir#0 = $ff
Constant (const byte*) mulf_init::sqr2_hi#0 = mulf_sqr2_hi
Constant (const byte*) mulf_init::sqr2_lo#0 = mulf_sqr2_lo
Constant (const byte) mulf_init::dir#1 = 1
Constant (const word) muls8u::m#0 = 0
Constant (const byte) muls8u::i#0 = 0
Constant (const signed word) muls8s::m#0 = 0
Constant (const signed byte) muls8s::i#0 = 0
Constant (const signed byte) muls8s::j#0 = 0
Constant (const byte*) mulf_tables_cmp::asm_sqr#0 = mula_sqr1_lo
Constant (const byte*) mulf_tables_cmp::kc_sqr#0 = mulf_sqr1_lo
Constant (const byte*) print_str::str#1 = mulf_tables_cmp::str
Constant (const byte*) print_str::str#2 = mulf_tables_cmp::str1
Constant (const byte*) print_str::str#3 = mulf_tables_cmp::str2
Constant (const byte) mul8u_compare::a#0 = 0
Constant (const byte) mul8u_compare::b#0 = 0
Constant (const byte) mul8u_compare::ok#0 = 1
Constant (const byte) mul8u_compare::ok#1 = 0
Constant (const byte) mul8u_compare::ok#2 = 0
Constant (const byte*) print_str::str#4 = mul8u_compare::str
Constant (const byte*) print_str::str#5 = mul8u_error::str
Constant (const byte*) print_str::str#6 = mul8u_error::str1
Constant (const byte*) print_str::str#7 = mul8u_error::str2
Constant (const byte*) print_str::str#8 = mul8u_error::str3
Constant (const byte*) print_str::str#9 = mul8u_error::str4
Constant (const signed byte) mul8s_compare::a#0 = -$80
Constant (const signed byte) mul8s_compare::b#0 = -$80
Constant (const byte*) print_str::str#10 = mul8s_compare::str
Constant (const byte) mul8s_compare::ok#0 = 1
Constant (const byte) mul8s_compare::ok#1 = 0
Constant (const byte) mul8s_compare::ok#2 = 0
Constant (const byte*) print_str::str#11 = mul8s_error::str
Constant (const byte*) print_str::str#12 = mul8s_error::str1
Constant (const byte*) print_str::str#13 = mul8s_error::str2
Constant (const byte*) print_str::str#14 = mul8s_error::str3
Constant (const byte*) print_str::str#15 = mul8s_error::str4
Constant (const byte*) print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) str1
Consolidated constant strings into (const byte*) str2
Consolidated constant strings into (const byte*) str3
Consolidated constant strings into (const byte*) str4
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [322] mul8u_compare::b#1 ← ++ mul8u_compare::b#10 to ++
Resolved ranged comparison value [324] if(mul8u_compare::b#1!=rangelast(0,$ff)) goto mul8u_compare::@2 to (number) 0
Resolved ranged next value [335] mul8u_compare::a#1 ← ++ mul8u_compare::a#7 to ++
Resolved ranged comparison value [337] if(mul8u_compare::a#1!=rangelast(0,$ff)) goto mul8u_compare::@1 to (number) 0
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [226] if((byte) mul8u_compare::b#1!=(number) 0) goto mul8u_compare::@2
Adding number conversion cast (unumber) 0 in [236] if((byte) mul8u_compare::a#1!=(number) 0) goto mul8u_compare::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [75] (byte~) mul8s::$13 ← (byte)(signed byte) mul8s::b#0 keeping mul8s::b#0
Inlining Noop Cast [79] (signed word) mul8s::return#0 ← (signed word)(word) mul8s::m#4 keeping mul8s::m#4
Inlining Noop Cast [81] (byte~) mul8s::$14 ← (byte)(signed byte) mul8s::a#0 keeping mul8s::a#0
Inlining Noop Cast [136] (byte~) mulf8s_prepared::$13 ← (byte)(signed byte) mulf8s_prepared::b#0 keeping mulf8s_prepared::b#0
Inlining Noop Cast [140] (signed word) mulf8s_prepared::return#0 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [142] (byte~) mulf8s_prepared::$14 ← (byte)*((const nomodify signed byte*) mulf8s_prepared::memA) keeping *(mulf8s_prepared::memA)
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [150] (signed word) mulf8s_prepared::return#2 ← (signed word)(word) mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [274] (signed word) mul8s::return#2 ← (signed word)(word) mul8s::m#4 keeping mul8s::m#4
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte*) print_str::str#3
Inlining constant with var siblings (const byte*) print_str::str#4
Inlining constant with var siblings (const byte*) print_str::str#5
Inlining constant with var siblings (const byte*) print_str::str#6
Inlining constant with var siblings (const byte*) print_str::str#7
Inlining constant with var siblings (const byte*) print_str::str#8
Inlining constant with var siblings (const byte*) print_str::str#9
Inlining constant with var siblings (const byte*) print_str::str#10
Inlining constant with var siblings (const byte*) print_str::str#11
Inlining constant with var siblings (const byte*) print_str::str#12
Inlining constant with var siblings (const byte*) print_str::str#13
Inlining constant with var siblings (const byte*) print_str::str#14
Inlining constant with var siblings (const byte*) print_str::str#15
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const word) mulf_init::sqr#0
Inlining constant with var siblings (const byte) mulf_init::x_2#0
Inlining constant with var siblings (const byte) mulf_init::c#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_lo#0
Inlining constant with var siblings (const byte) mulf_init::x_255#0
Inlining constant with var siblings (const byte) mulf_init::dir#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_lo#0
Inlining constant with var siblings (const byte) mulf_init::dir#1
Inlining constant with var siblings (const word) muls8u::m#0
Inlining constant with var siblings (const byte) muls8u::i#0
Inlining constant with var siblings (const signed word) muls8s::m#0
Inlining constant with var siblings (const signed byte) muls8s::i#0
Inlining constant with var siblings (const signed byte) muls8s::j#0
Inlining constant with var siblings (const byte*) mulf_tables_cmp::asm_sqr#0
Inlining constant with var siblings (const byte*) mulf_tables_cmp::kc_sqr#0
Inlining constant with var siblings (const byte) mul8u_compare::a#0
Inlining constant with var siblings (const byte) mul8u_compare::b#0
Inlining constant with var siblings (const byte) mul8u_compare::ok#0
Inlining constant with var siblings (const byte) mul8u_compare::ok#1
Inlining constant with var siblings (const byte) mul8u_compare::ok#2
Inlining constant with var siblings (const signed byte) mul8s_compare::a#0
Inlining constant with var siblings (const signed byte) mul8s_compare::b#0
Inlining constant with var siblings (const byte) mul8s_compare::ok#0
Inlining constant with var siblings (const byte) mul8s_compare::ok#1
Inlining constant with var siblings (const byte) mul8s_compare::ok#2
Constant inlined mulf_init::sqr2_lo#0 = (const byte*) mulf_sqr2_lo
Constant inlined mulf_init::sqr2_hi#0 = (const byte*) mulf_sqr2_hi
Constant inlined mul8u_compare::ok#2 = (byte) 0
Constant inlined mul8u_compare::ok#1 = (byte) 0
Constant inlined mul8u_compare::ok#0 = (byte) 1
Constant inlined mul8s_compare::b#0 = (signed byte) -$80
Constant inlined mulf_init::dir#1 = (byte) 1
Constant inlined mulf_init::dir#0 = (byte) $ff
Constant inlined mulf_init::x_255#0 = (byte) -1
Constant inlined mulf_tables_cmp::kc_sqr#0 = (const byte*) mulf_sqr1_lo
Constant inlined mul8u_compare::b#0 = (byte) 0
Constant inlined mulf_init::x_2#0 = (byte) 0
Constant inlined mul8s_compare::ok#0 = (byte) 1
Constant inlined mul8s_compare::ok#1 = (byte) 0
Constant inlined muls8s::m#0 = (signed word) 0
Constant inlined muls8s::i#0 = (signed byte) 0
Constant inlined print_str::str#9 = (const byte*) str4
Constant inlined mul8u::res#0 = (word) 0
Constant inlined mulf_init::sqr1_hi#0 = (const byte*) mulf_sqr1_hi+(byte) 1
Constant inlined mul8s_compare::ok#2 = (byte) 0
Constant inlined mulf_init::sqr1_lo#0 = (const byte*) mulf_sqr1_lo+(byte) 1
Constant inlined print_str::str#4 = (const byte*) mul8u_compare::str
Constant inlined print_str::str#3 = (const byte*) mulf_tables_cmp::str2
Constant inlined print_str::str#2 = (const byte*) mulf_tables_cmp::str1
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_str::str#1 = (const byte*) mulf_tables_cmp::str
Constant inlined print_str::str#8 = (const byte*) str3
Constant inlined print_str::str#7 = (const byte*) str2
Constant inlined print_str::str#6 = (const byte*) str1
Constant inlined print_str::str#5 = (const byte*) mul8u_error::str
Constant inlined mulf_init::c#0 = (byte) 0
Constant inlined print_str::str#13 = (const byte*) str2
Constant inlined print_str::str#12 = (const byte*) str1
Constant inlined print_str::str#11 = (const byte*) mul8s_error::str
Constant inlined print_str::str#10 = (const byte*) mul8s_compare::str
Constant inlined print_str::str#15 = (const byte*) str4
Constant inlined print_str::str#14 = (const byte*) str3
Constant inlined mul8u_compare::a#0 = (byte) 0
Constant inlined mul8s_compare::a#0 = (signed byte) -$80
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined mulf_init::sqr#0 = (word) 0
Constant inlined muls8u::i#0 = (byte) 0
Constant inlined mul8s_error::str1 = (const byte*) str1
Constant inlined mul8s_error::str2 = (const byte*) str2
Constant inlined mul8s_error::str3 = (const byte*) str3
Constant inlined muls8u::m#0 = (word) 0
Constant inlined mul8s_error::str4 = (const byte*) str4
Constant inlined print_char::ch#3 = (byte) '-'
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined muls8s::j#0 = (signed byte) 0
Constant inlined mulf_tables_cmp::asm_sqr#0 = (const byte*) mula_sqr1_lo
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined mul8u_error::str1 = (const byte*) str1
Constant inlined mul8u_error::str2 = (const byte*) str2
Constant inlined mul8u_error::str3 = (const byte*) str3
Constant inlined mul8u_error::str4 = (const byte*) str4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul8s::@6(between mul8s::@5 and mul8s::@1)
Added new block during phi lifting mul8s::@7(between mul8s::@1 and mul8s::@2)
Added new block during phi lifting mulf_init::@11(between mulf_init::@2 and mulf_init::@4)
Added new block during phi lifting mulf_init::@12(between mulf_init::@7 and mulf_init::@9)
Added new block during phi lifting mulf8s_prepared::@6(between mulf8s_prepared::@5 and mulf8s_prepared::@1)
Added new block during phi lifting mulf8s_prepared::@7(between mulf8s_prepared::@1 and mulf8s_prepared::@2)
Added new block during phi lifting muls8u::@5(between muls8u::@3 and muls8u::@1)
Added new block during phi lifting muls8s::@9(between muls8s::@5 and muls8s::@2)
Added new block during phi lifting muls8s::@10(between muls8s::@7 and muls8s::@2)
Added new block during phi lifting mul8u_compare::@17(between mul8u_compare::@9 and mul8u_compare::@1)
Added new block during phi lifting mul8u_compare::@18(between mul8u_compare::@5 and mul8u_compare::@2)
Added new block during phi lifting mul8u_compare::@19(between mul8u_compare::@3 and mul8u_compare::@4)
Added new block during phi lifting mul8s_compare::@19(between mul8s_compare::@7 and mul8s_compare::@8)
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of mul8s_compare
Adding NOP phi() at start of mul8s_compare::@14
Adding NOP phi() at start of mul8s_compare::@2
Adding NOP phi() at start of mul8s_compare::@10
Adding NOP phi() at start of mul8s_compare::@11
Adding NOP phi() at start of mul8s_compare::@18
Adding NOP phi() at start of mul8s_error::@11
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sint::@6
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of mulf8s
Adding NOP phi() at start of mulf8s::@2
Adding NOP phi() at start of muls8s::@4
Adding NOP phi() at start of muls8s::@1
Adding NOP phi() at start of mul8u_compare
Adding NOP phi() at start of mul8u_compare::@6
Adding NOP phi() at start of mul8u_compare::@7
Adding NOP phi() at start of mul8u_compare::@14
Adding NOP phi() at start of mul8u_compare::@16
Adding NOP phi() at start of mul8u_error::@11
Adding NOP phi() at start of muls8u::@2
Adding NOP phi() at start of mulf_tables_cmp
Adding NOP phi() at start of mulf_tables_cmp::@3
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@3
Adding NOP phi() at start of mulf_init::@10
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [main] to print_cls:1 mulf_init:3 mulf_init_asm:5 mulf_tables_cmp:7 mul8u_compare:9 mul8s_compare:11 
Calls in [mul8s_compare] to print_str:18 print_ln:21 muls8s:31 mulf8s:36 mul8s:41 mul8s_error:56 
Calls in [mul8s_error] to print_str:62 print_schar:65 print_str:67 print_schar:70 print_str:72 print_sint:75 print_str:77 print_sint:80 print_str:82 print_sint:85 print_ln:88 
Calls in [print_sint] to print_char:102 print_uint:108 print_char:112 
Calls in [print_uint] to print_uchar:123 print_uchar:127 
Calls in [print_uchar] to print_char:135 print_char:140 
Calls in [print_str] to print_char:152 
Calls in [print_schar] to print_char:159 print_uchar:165 print_char:169 
Calls in [mul8s] to mul8u:176 
Calls in [mulf8s] to mulf8u_prepare:216 mulf8s_prepared:219 
Calls in [mulf8s_prepared] to mulf8u_prepared:224 
Calls in [mul8u_compare] to muls8u:276 mulf8u:281 mul8u:288 mul8u_error:304 print_str:312 print_ln:315 
Calls in [mul8u_error] to print_str:321 print_uchar:325 print_str:327 print_uchar:331 print_str:333 print_uint:337 print_str:339 print_uint:343 print_str:345 print_uint:349 print_ln:352 
Calls in [mulf8u] to mulf8u_prepare:357 mulf8u_prepared:360 
Calls in [mulf_tables_cmp] to print_str:379 print_ln:381 print_str:388 print_uint:392 print_str:394 print_uint:398 
Calls in [print_cls] to memset:455 

Created 62 initial phi equivalence classes
Not coalescing [17] print_char_cursor#192 ← print_line_cursor#0
Coalesced [19] print_line_cursor#117 ← print_line_cursor#0
Coalesced [20] print_char_cursor#207 ← print_char_cursor#1
Coalesced [28] mul8s_compare::a#16 ← mul8s_compare::a#1
Coalesced [59] mul8s_compare::b#13 ← mul8s_compare::b#1
Coalesced [60] mul8s_compare::ok#5 ← mul8s_compare::ok#4
Not coalescing [61] print_char_cursor#193 ← print_line_cursor#0
Coalesced [64] print_schar::b#9 ← print_schar::b#1
Coalesced [66] print_char_cursor#194 ← print_char_cursor#18
Coalesced [69] print_schar::b#10 ← print_schar::b#2
Coalesced (already) [71] print_char_cursor#195 ← print_char_cursor#18
Coalesced [74] print_sint::w#10 ← print_sint::w#1
Coalesced (already) [76] print_char_cursor#196 ← print_char_cursor#18
Coalesced [79] print_sint::w#11 ← print_sint::w#2
Coalesced (already) [81] print_char_cursor#197 ← print_char_cursor#18
Coalesced [84] print_sint::w#12 ← print_sint::w#3
Coalesced (already) [86] print_line_cursor#118 ← print_line_cursor#0
Coalesced [87] print_char_cursor#208 ← print_char_cursor#18
Coalesced [92] print_line_cursor#121 ← print_line_cursor#47
Coalesced (already) [98] print_line_cursor#122 ← print_line_cursor#0
Coalesced [101] print_char_cursor#226 ← print_char_cursor#1
Coalesced [103] print_sint::w#14 ← print_sint::w#4
Coalesced [106] print_uint::w#13 ← print_uint::w#0
Coalesced [107] print_char_cursor#217 ← print_char_cursor#18
Coalesced (already) [111] print_char_cursor#225 ← print_char_cursor#1
Coalesced [114] print_sint::w#13 ← print_sint::w#0
Coalesced [121] print_uchar::b#10 ← print_uchar::b#1
Coalesced [122] print_char_cursor#221 ← print_char_cursor#145
Coalesced [125] print_uchar::b#11 ← print_uchar::b#2
Coalesced (already) [126] print_char_cursor#222 ← print_char_cursor#18
Coalesced [133] print_char::ch#9 ← print_char::ch#5
Coalesced (already) [134] print_char_cursor#228 ← print_char_cursor#146
Coalesced [138] print_char::ch#10 ← print_char::ch#6
Coalesced (already) [139] print_char_cursor#229 ← print_char_cursor#18
Coalesced [144] print_str::str#20 ← print_str::str#19
Coalesced (already) [145] print_char_cursor#205 ← print_char_cursor#158
Coalesced [150] print_char::ch#8 ← print_char::ch#0
Coalesced (already) [151] print_char_cursor#227 ← print_char_cursor#1
Coalesced [154] print_str::str#21 ← print_str::str#0
Coalesced (already) [155] print_char_cursor#206 ← print_char_cursor#18
Coalesced (already) [158] print_char_cursor#224 ← print_char_cursor#1
Coalesced [160] print_schar::b#12 ← print_schar::b#3
Coalesced [163] print_uchar::b#9 ← print_uchar::b#0
Coalesced (already) [164] print_char_cursor#220 ← print_char_cursor#18
Coalesced (already) [168] print_char_cursor#223 ← print_char_cursor#1
Coalesced [171] print_schar::b#11 ← print_schar::b#0
Coalesced [174] mul8u::b#3 ← mul8u::b#0
Coalesced [175] mul8u::a#8 ← mul8u::a#1
Coalesced [183] mul8s::m#7 ← mul8s::m#1
Coalesced [189] mul8s::m#10 ← mul8s::m#2
Coalesced [192] mul8s::m#9 ← mul8s::m#5
Coalesced [193] mul8s::m#8 ← mul8s::m#0
Coalesced [196] mul8u::a#10 ← mul8u::a#6
Coalesced [197] mul8u::mb#6 ← mul8u::mb#0
Coalesced [205] mul8u::res#9 ← mul8u::res#1
Coalesced [209] mul8u::a#11 ← mul8u::a#0
Coalesced [210] mul8u::res#7 ← mul8u::res#6
Coalesced [211] mul8u::mb#7 ← mul8u::mb#1
Coalesced (already) [212] mul8u::res#8 ← mul8u::res#2
Coalesced [215] mulf8u_prepare::a#3 ← mulf8u_prepare::a#1
Coalesced [223] mulf8u_prepared::b#3 ← mulf8u_prepared::b#1
Coalesced [231] mulf8s_prepared::m#7 ← mulf8s_prepared::m#1
Coalesced [237] mulf8s_prepared::m#10 ← mulf8s_prepared::m#2
Coalesced [240] mulf8s_prepared::m#9 ← mulf8s_prepared::m#5
Coalesced [241] mulf8s_prepared::m#8 ← mulf8s_prepared::m#0
Coalesced [256] muls8s::return#5 ← muls8s::m#3
Coalesced [261] muls8s::j#4 ← muls8s::j#1
Coalesced [262] muls8s::m#11 ← muls8s::m#1
Coalesced [266] muls8s::return#6 ← muls8s::m#5
Coalesced [269] muls8s::i#4 ← muls8s::i#1
Coalesced [270] muls8s::m#12 ← muls8s::m#2
Coalesced [286] mul8u::b#4 ← mul8u::b#1
Coalesced [287] mul8u::a#9 ← mul8u::a#2
Coalesced [311] print_char_cursor#198 ← print_char_cursor#101
Coalesced [313] print_line_cursor#119 ← print_line_cursor#10
Coalesced (already) [314] print_char_cursor#209 ← print_char_cursor#1
Coalesced [317] mul8u_compare::a#14 ← mul8u_compare::a#1
Coalesced [318] mul8u_compare::b#12 ← mul8u_compare::b#1
Coalesced [319] mul8u_compare::ok#5 ← mul8u_compare::ok#4
Coalesced (already) [320] print_char_cursor#199 ← print_char_cursor#101
Coalesced [323] print_uchar::b#7 ← print_uchar::b#3
Coalesced (already) [324] print_char_cursor#218 ← print_char_cursor#1
Coalesced (already) [326] print_char_cursor#200 ← print_char_cursor#18
Coalesced [329] print_uchar::b#8 ← print_uchar::b#4
Coalesced (already) [330] print_char_cursor#219 ← print_char_cursor#1
Coalesced (already) [332] print_char_cursor#201 ← print_char_cursor#18
Coalesced [335] print_uint::w#8 ← print_uint::w#3
Coalesced (already) [336] print_char_cursor#212 ← print_char_cursor#1
Coalesced (already) [338] print_char_cursor#202 ← print_char_cursor#18
Coalesced [341] print_uint::w#9 ← print_uint::w#4
Coalesced (already) [342] print_char_cursor#213 ← print_char_cursor#1
Coalesced (already) [344] print_char_cursor#203 ← print_char_cursor#18
Coalesced [347] print_uint::w#10 ← print_uint::w#5
Coalesced (already) [348] print_char_cursor#214 ← print_char_cursor#1
Coalesced (already) [350] print_line_cursor#120 ← print_line_cursor#10
Coalesced (already) [351] print_char_cursor#210 ← print_char_cursor#18
Coalesced [356] mulf8u_prepare::a#4 ← mulf8u_prepare::a#0
Coalesced [359] mulf8u_prepared::b#4 ← mulf8u_prepared::b#0
Coalesced [368] muls8u::return#5 ← muls8u::m#3
Coalesced [373] muls8u::i#4 ← muls8u::i#1
Coalesced [374] muls8u::m#6 ← muls8u::m#1
Coalesced (already) [380] print_char_cursor#211 ← print_char_cursor#1
Not coalescing [382] print_char_cursor#231 ← print_line_cursor#0
Coalesced (already) [383] print_line_cursor#123 ← print_line_cursor#0
Coalesced [390] print_uint::w#12 ← print_uint::w#1
Coalesced (already) [391] print_char_cursor#216 ← print_char_cursor#1
Coalesced (already) [393] print_char_cursor#204 ← print_char_cursor#18
Coalesced [396] print_uint::w#11 ← print_uint::w#2
Coalesced (already) [397] print_char_cursor#215 ← print_char_cursor#1
Coalesced (already) [399] print_char_cursor#230 ← print_char_cursor#18
Coalesced [402] mulf_tables_cmp::kc_sqr#9 ← mulf_tables_cmp::kc_sqr#1
Coalesced [403] mulf_tables_cmp::asm_sqr#7 ← mulf_tables_cmp::asm_sqr#1
Coalesced [427] mulf_init::sqr2_lo#6 ← mulf_init::sqr2_lo#1
Coalesced [428] mulf_init::x_255#6 ← mulf_init::x_255#1
Coalesced [429] mulf_init::sqr2_hi#6 ← mulf_init::sqr2_hi#1
Coalesced [430] mulf_init::dir#5 ← mulf_init::dir#4
Coalesced (already) [431] mulf_init::dir#6 ← mulf_init::dir#2
Coalesced [437] mulf_init::sqr#9 ← mulf_init::sqr#2
Coalesced [438] mulf_init::x_2#8 ← mulf_init::x_2#1
Coalesced [447] mulf_init::sqr1_lo#6 ← mulf_init::sqr1_lo#1
Coalesced [448] mulf_init::c#6 ← mulf_init::c#1
Coalesced [449] mulf_init::sqr#7 ← mulf_init::sqr#1
Coalesced [450] mulf_init::sqr1_hi#6 ← mulf_init::sqr1_hi#1
Coalesced [451] mulf_init::x_2#6 ← mulf_init::x_2#2
Coalesced [452] mulf_init::sqr#8 ← mulf_init::sqr#4
Coalesced (already) [453] mulf_init::x_2#7 ← mulf_init::x_2#3
Coalesced [466] memset::dst#4 ← memset::dst#1
Coalesced down to 39 phi equivalence classes
Culled Empty Block (label) main::@6
Culled Empty Block (label) mul8s_compare::@14
Culled Empty Block (label) mul8s_compare::@2
Culled Empty Block (label) mul8s_compare::@11
Culled Empty Block (label) mul8s_compare::@18
Culled Empty Block (label) mul8s_error::@11
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sint::@5
Culled Empty Block (label) print_sint::@6
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_schar::@5
Culled Empty Block (label) print_schar::@6
Culled Empty Block (label) mul8s::@7
Culled Empty Block (label) mul8s::@6
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) mulf8s::@2
Culled Empty Block (label) mulf8s_prepared::@7
Culled Empty Block (label) mulf8s_prepared::@6
Culled Empty Block (label) muls8s::@4
Culled Empty Block (label) muls8s::@9
Culled Empty Block (label) muls8s::@1
Culled Empty Block (label) muls8s::@10
Culled Empty Block (label) mul8u_compare::@7
Culled Empty Block (label) mul8u_compare::@14
Culled Empty Block (label) mul8u_compare::@16
Culled Empty Block (label) mul8u_compare::@17
Culled Empty Block (label) mul8u_compare::@18
Culled Empty Block (label) mul8u_error::@11
Culled Empty Block (label) muls8u::@2
Culled Empty Block (label) muls8u::@5
Culled Empty Block (label) mulf_tables_cmp::@11
Culled Empty Block (label) mulf_init::@3
Culled Empty Block (label) mulf_init::@10
Culled Empty Block (label) mulf_init::@11
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block mulf_init::@4 to mulf_init::@3
Renumbering block mulf_init::@5 to mulf_init::@4
Renumbering block mulf_init::@6 to mulf_init::@5
Renumbering block mulf_init::@7 to mulf_init::@6
Renumbering block mulf_init::@8 to mulf_init::@7
Renumbering block mulf_init::@9 to mulf_init::@8
Renumbering block mulf_init::@12 to mulf_init::@9
Renumbering block mulf8s::@3 to mulf8s::@2
Renumbering block muls8u::@3 to muls8u::@2
Renumbering block muls8u::@4 to muls8u::@3
Renumbering block muls8s::@2 to muls8s::@1
Renumbering block muls8s::@3 to muls8s::@2
Renumbering block muls8s::@5 to muls8s::@3
Renumbering block muls8s::@6 to muls8s::@4
Renumbering block muls8s::@7 to muls8s::@5
Renumbering block muls8s::@8 to muls8s::@6
Renumbering block mul8u_compare::@8 to mul8u_compare::@7
Renumbering block mul8u_compare::@9 to mul8u_compare::@8
Renumbering block mul8u_compare::@10 to mul8u_compare::@9
Renumbering block mul8u_compare::@11 to mul8u_compare::@10
Renumbering block mul8u_compare::@12 to mul8u_compare::@11
Renumbering block mul8u_compare::@13 to mul8u_compare::@12
Renumbering block mul8u_compare::@15 to mul8u_compare::@13
Renumbering block mul8u_compare::@19 to mul8u_compare::@14
Renumbering block mul8s_compare::@3 to mul8s_compare::@2
Renumbering block mul8s_compare::@4 to mul8s_compare::@3
Renumbering block mul8s_compare::@5 to mul8s_compare::@4
Renumbering block mul8s_compare::@6 to mul8s_compare::@5
Renumbering block mul8s_compare::@7 to mul8s_compare::@6
Renumbering block mul8s_compare::@8 to mul8s_compare::@7
Renumbering block mul8s_compare::@9 to mul8s_compare::@8
Renumbering block mul8s_compare::@10 to mul8s_compare::@9
Renumbering block mul8s_compare::@12 to mul8s_compare::@10
Renumbering block mul8s_compare::@13 to mul8s_compare::@11
Renumbering block mul8s_compare::@15 to mul8s_compare::@12
Renumbering block mul8s_compare::@16 to mul8s_compare::@13
Renumbering block mul8s_compare::@17 to mul8s_compare::@14
Renumbering block mul8s_compare::@19 to mul8s_compare::@15
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of mul8s_compare
Adding NOP phi() at start of mul8s_compare::@11
Adding NOP phi() at start of mul8s_compare::@9
Adding NOP phi() at start of mul8s_compare::@15
Adding NOP phi() at start of mul8s_error::@2
Adding NOP phi() at start of mul8s_error::@4
Adding NOP phi() at start of mul8s_error::@6
Adding NOP phi() at start of mul8s_error::@8
Adding NOP phi() at start of mul8s_error::@10
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of mulf8s
Adding NOP phi() at start of mul8u_compare
Adding NOP phi() at start of mul8u_compare::@6
Adding NOP phi() at start of mul8u_compare::@14
Adding NOP phi() at start of mul8u_compare::@9
Adding NOP phi() at start of mul8u_compare::@13
Adding NOP phi() at start of mul8u_error
Adding NOP phi() at start of mul8u_error::@2
Adding NOP phi() at start of mul8u_error::@4
Adding NOP phi() at start of mul8u_error::@6
Adding NOP phi() at start of mul8u_error::@8
Adding NOP phi() at start of mul8u_error::@10
Adding NOP phi() at start of mulf_tables_cmp
Adding NOP phi() at start of mulf_tables_cmp::@3
Adding NOP phi() at start of mulf_tables_cmp::@6
Adding NOP phi() at start of mulf_tables_cmp::@9
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@9
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) BG_COLOR) ← (byte) 5
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call mulf_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call mulf_init_asm 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] phi()
  [7] call mulf_tables_cmp 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call mul8u_compare 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call mul8s_compare 
  to:main::@return
main::@return: scope:[main]  from main::@5
  [12] return 
  to:@return

(void()) mul8s_compare()
mul8s_compare: scope:[mul8s_compare]  from main::@5
  [13] phi()
  to:mul8s_compare::@1
mul8s_compare::@1: scope:[mul8s_compare]  from mul8s_compare mul8s_compare::@5
  [14] (signed byte) mul8s_compare::a#10 ← phi( mul8s_compare/(signed byte) -$80 mul8s_compare::@5/(signed byte) mul8s_compare::a#1 )
  [15] if((signed byte) mul8s_compare::a#10!=(signed byte) -$80) goto mul8s_compare::@3
  to:mul8s_compare::@2
mul8s_compare::@2: scope:[mul8s_compare]  from mul8s_compare::@1
  [16] (byte*) print_char_cursor#192 ← (byte*) print_line_cursor#0
  [17] call print_str 
  to:mul8s_compare::@11
mul8s_compare::@11: scope:[mul8s_compare]  from mul8s_compare::@2
  [18] phi()
  [19] call print_ln 
  to:mul8s_compare::@return
mul8s_compare::@return: scope:[mul8s_compare]  from mul8s_compare::@10 mul8s_compare::@11
  [20] return 
  to:@return
mul8s_compare::@3: scope:[mul8s_compare]  from mul8s_compare::@1 mul8s_compare::@8
  [21] (signed byte) mul8s_compare::b#10 ← phi( mul8s_compare::@1/(signed byte) -$80 mul8s_compare::@8/(signed byte) mul8s_compare::b#1 )
  [22] if((signed byte) mul8s_compare::b#10!=(signed byte) -$80) goto mul8s_compare::@4
  to:mul8s_compare::@5
mul8s_compare::@5: scope:[mul8s_compare]  from mul8s_compare::@3
  [23] (signed byte) mul8s_compare::a#1 ← ++ (signed byte) mul8s_compare::a#10
  to:mul8s_compare::@1
mul8s_compare::@4: scope:[mul8s_compare]  from mul8s_compare::@3
  [24] (signed byte) muls8s::a#0 ← (signed byte) mul8s_compare::a#10
  [25] (signed byte) muls8s::b#0 ← (signed byte) mul8s_compare::b#10
  [26] call muls8s 
  [27] (signed word) muls8s::return#2 ← (signed word) muls8s::return#0
  to:mul8s_compare::@12
mul8s_compare::@12: scope:[mul8s_compare]  from mul8s_compare::@4
  [28] (signed word) mul8s_compare::ms#0 ← (signed word) muls8s::return#2
  [29] (signed byte) mulf8s::a#0 ← (signed byte) mul8s_compare::a#10
  [30] (signed byte) mulf8s::b#0 ← (signed byte) mul8s_compare::b#10
  [31] call mulf8s 
  [32] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0
  to:mul8s_compare::@13
mul8s_compare::@13: scope:[mul8s_compare]  from mul8s_compare::@12
  [33] (signed word) mul8s_compare::mf#0 ← (signed word) mulf8s::return#2
  [34] (signed byte) mul8s::a#0 ← (signed byte) mul8s_compare::a#10
  [35] (signed byte) mul8s::b#0 ← (signed byte) mul8s_compare::b#10
  [36] call mul8s 
  to:mul8s_compare::@14
mul8s_compare::@14: scope:[mul8s_compare]  from mul8s_compare::@13
  [37] (signed word) mul8s_compare::mn#0 ← (signed word)(word) mul8s::m#4
  [38] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@6
  to:mul8s_compare::@9
mul8s_compare::@9: scope:[mul8s_compare]  from mul8s_compare::@14
  [39] phi()
  to:mul8s_compare::@6
mul8s_compare::@6: scope:[mul8s_compare]  from mul8s_compare::@14 mul8s_compare::@9
  [40] (byte) mul8s_compare::ok#4 ← phi( mul8s_compare::@9/(byte) 0 mul8s_compare::@14/(byte) 1 )
  [41] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@15
  to:mul8s_compare::@7
mul8s_compare::@15: scope:[mul8s_compare]  from mul8s_compare::@6
  [42] phi()
  to:mul8s_compare::@7
mul8s_compare::@7: scope:[mul8s_compare]  from mul8s_compare::@15 mul8s_compare::@6
  [43] (byte) mul8s_compare::ok#3 ← phi( mul8s_compare::@6/(byte) 0 mul8s_compare::@15/(byte) mul8s_compare::ok#4 )
  [44] if((byte) mul8s_compare::ok#3!=(byte) 0) goto mul8s_compare::@8
  to:mul8s_compare::@10
mul8s_compare::@10: scope:[mul8s_compare]  from mul8s_compare::@7
  [45] *((const byte*) BG_COLOR) ← (byte) 2
  [46] (signed byte) mul8s_error::a#0 ← (signed byte) mul8s_compare::a#10
  [47] (signed byte) mul8s_error::b#0 ← (signed byte) mul8s_compare::b#10
  [48] (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#0
  [49] (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#0
  [50] (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#0
  [51] call mul8s_error 
  to:mul8s_compare::@return
mul8s_compare::@8: scope:[mul8s_compare]  from mul8s_compare::@7
  [52] (signed byte) mul8s_compare::b#1 ← ++ (signed byte) mul8s_compare::b#10
  to:mul8s_compare::@3

(void()) mul8s_error((signed byte) mul8s_error::a , (signed byte) mul8s_error::b , (signed word) mul8s_error::ms , (signed word) mul8s_error::mn , (signed word) mul8s_error::mf)
mul8s_error: scope:[mul8s_error]  from mul8s_compare::@10
  [53] (byte*) print_char_cursor#193 ← (byte*) print_line_cursor#0
  [54] call print_str 
  to:mul8s_error::@1
mul8s_error::@1: scope:[mul8s_error]  from mul8s_error
  [55] (signed byte) print_schar::b#1 ← (signed byte) mul8s_error::a#0
  [56] call print_schar 
  to:mul8s_error::@2
mul8s_error::@2: scope:[mul8s_error]  from mul8s_error::@1
  [57] phi()
  [58] call print_str 
  to:mul8s_error::@3
mul8s_error::@3: scope:[mul8s_error]  from mul8s_error::@2
  [59] (signed byte) print_schar::b#2 ← (signed byte) mul8s_error::b#0
  [60] call print_schar 
  to:mul8s_error::@4
mul8s_error::@4: scope:[mul8s_error]  from mul8s_error::@3
  [61] phi()
  [62] call print_str 
  to:mul8s_error::@5
mul8s_error::@5: scope:[mul8s_error]  from mul8s_error::@4
  [63] (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#0
  [64] call print_sint 
  to:mul8s_error::@6
mul8s_error::@6: scope:[mul8s_error]  from mul8s_error::@5
  [65] phi()
  [66] call print_str 
  to:mul8s_error::@7
mul8s_error::@7: scope:[mul8s_error]  from mul8s_error::@6
  [67] (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#0
  [68] call print_sint 
  to:mul8s_error::@8
mul8s_error::@8: scope:[mul8s_error]  from mul8s_error::@7
  [69] phi()
  [70] call print_str 
  to:mul8s_error::@9
mul8s_error::@9: scope:[mul8s_error]  from mul8s_error::@8
  [71] (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#0
  [72] call print_sint 
  to:mul8s_error::@10
mul8s_error::@10: scope:[mul8s_error]  from mul8s_error::@9
  [73] phi()
  [74] call print_ln 
  to:mul8s_error::@return
mul8s_error::@return: scope:[mul8s_error]  from mul8s_error::@10
  [75] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from mul8s_compare::@11 mul8s_error::@10 mul8u_compare::@13 mul8u_error::@10 mulf_tables_cmp::@6
  [76] (byte*) print_char_cursor#138 ← phi( mul8s_compare::@11/(byte*) print_char_cursor#1 mul8s_error::@10/(byte*) print_char_cursor#18 mul8u_compare::@13/(byte*) print_char_cursor#1 mul8u_error::@10/(byte*) print_char_cursor#18 mulf_tables_cmp::@6/(byte*) print_char_cursor#1 )
  [76] (byte*) print_line_cursor#47 ← phi( mul8s_compare::@11/(byte*) print_line_cursor#0 mul8s_error::@10/(byte*) print_line_cursor#0 mul8u_compare::@13/(byte*) print_line_cursor#10 mul8u_error::@10/(byte*) print_line_cursor#10 mulf_tables_cmp::@6/(const byte*) print_screen#0 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [77] (byte*) print_line_cursor#24 ← phi( print_ln/(byte*) print_line_cursor#47 print_ln::@1/(byte*) print_line_cursor#0 )
  [78] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#24 + (byte) $28
  [79] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [80] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from mul8s_error::@5 mul8s_error::@7 mul8s_error::@9
  [81] (signed word) print_sint::w#4 ← phi( mul8s_error::@5/(signed word) print_sint::w#1 mul8s_error::@7/(signed word) print_sint::w#2 mul8s_error::@9/(signed word) print_sint::w#3 )
  [82] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [83] phi()
  [84] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [85] (signed word) print_sint::w#6 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#4 )
  [86] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6
  [87] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [88] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [89] phi()
  [90] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [91] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#4
  to:print_sint::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [92] (byte*) print_char_cursor#87 ← phi( print_schar::@1/(byte*) print_char_cursor#1 print_schar::@3/(byte*) print_char_cursor#1 print_sint::@1/(byte*) print_char_cursor#1 print_sint::@3/(byte*) print_char_cursor#1 print_str::@2/(byte*) print_char_cursor#1 print_uchar/(byte*) print_char_cursor#146 print_uchar::@1/(byte*) print_char_cursor#18 )
  [92] (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  [93] *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7
  [94] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#87
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [95] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from mul8u_error::@5 mul8u_error::@7 mul8u_error::@9 mulf_tables_cmp::@10 mulf_tables_cmp::@8 print_sint::@2
  [96] (byte*) print_char_cursor#145 ← phi( mul8u_error::@5/(byte*) print_char_cursor#1 mul8u_error::@7/(byte*) print_char_cursor#1 mul8u_error::@9/(byte*) print_char_cursor#1 mulf_tables_cmp::@10/(byte*) print_char_cursor#1 mulf_tables_cmp::@8/(byte*) print_char_cursor#1 print_sint::@2/(byte*) print_char_cursor#18 )
  [96] (word) print_uint::w#6 ← phi( mul8u_error::@5/(word) print_uint::w#3 mul8u_error::@7/(word) print_uint::w#4 mul8u_error::@9/(word) print_uint::w#5 mulf_tables_cmp::@10/(word) print_uint::w#2 mulf_tables_cmp::@8/(word) print_uint::w#1 print_sint::@2/(word) print_uint::w#0 )
  [97] (byte) print_uchar::b#1 ← > (word) print_uint::w#6
  [98] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [99] (byte) print_uchar::b#2 ← < (word) print_uint::w#6
  [100] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [101] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from mul8u_error::@1 mul8u_error::@3 print_schar::@2 print_uint print_uint::@1
  [102] (byte*) print_char_cursor#146 ← phi( mul8u_error::@1/(byte*) print_char_cursor#1 mul8u_error::@3/(byte*) print_char_cursor#1 print_schar::@2/(byte*) print_char_cursor#18 print_uint/(byte*) print_char_cursor#145 print_uint::@1/(byte*) print_char_cursor#18 )
  [102] (byte) print_uchar::b#5 ← phi( mul8u_error::@1/(byte) print_uchar::b#3 mul8u_error::@3/(byte) print_uchar::b#4 print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 )
  [103] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4
  [104] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [105] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [106] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f
  [107] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [108] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [109] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from mul8s_compare::@2 mul8s_error mul8s_error::@2 mul8s_error::@4 mul8s_error::@6 mul8s_error::@8 mul8u_compare::@9 mul8u_error mul8u_error::@2 mul8u_error::@4 mul8u_error::@6 mul8u_error::@8 mulf_tables_cmp::@3 mulf_tables_cmp::@5 mulf_tables_cmp::@9
  [110] (byte*) print_char_cursor#158 ← phi( mul8s_compare::@2/(byte*) print_char_cursor#192 mul8s_error/(byte*) print_char_cursor#193 mul8s_error::@2/(byte*) print_char_cursor#18 mul8s_error::@4/(byte*) print_char_cursor#18 mul8s_error::@6/(byte*) print_char_cursor#18 mul8s_error::@8/(byte*) print_char_cursor#18 mul8u_compare::@9/(byte*) print_char_cursor#101 mul8u_error/(byte*) print_char_cursor#101 mul8u_error::@2/(byte*) print_char_cursor#18 mul8u_error::@4/(byte*) print_char_cursor#18 mul8u_error::@6/(byte*) print_char_cursor#18 mul8u_error::@8/(byte*) print_char_cursor#18 mulf_tables_cmp::@3/(const byte*) print_screen#0 mulf_tables_cmp::@5/(const byte*) print_screen#0 mulf_tables_cmp::@9/(byte*) print_char_cursor#18 )
  [110] (byte*) print_str::str#19 ← phi( mul8s_compare::@2/(const byte*) mul8s_compare::str mul8s_error/(const byte*) mul8s_error::str mul8s_error::@2/(const byte*) str1 mul8s_error::@4/(const byte*) str2 mul8s_error::@6/(const byte*) str3 mul8s_error::@8/(const byte*) str4 mul8u_compare::@9/(const byte*) mul8u_compare::str mul8u_error/(const byte*) mul8u_error::str mul8u_error::@2/(const byte*) str1 mul8u_error::@4/(const byte*) str2 mul8u_error::@6/(const byte*) str3 mul8u_error::@8/(const byte*) str4 mulf_tables_cmp::@3/(const byte*) mulf_tables_cmp::str mulf_tables_cmp::@5/(const byte*) mulf_tables_cmp::str1 mulf_tables_cmp::@9/(const byte*) mulf_tables_cmp::str2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [111] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#158 print_str::@3/(byte*) print_char_cursor#18 )
  [111] (byte*) print_str::str#16 ← phi( print_str/(byte*) print_str::str#19 print_str::@3/(byte*) print_str::str#0 )
  [112] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [113] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [114] (byte) print_char::ch#0 ← *((byte*) print_str::str#16)
  [115] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [116] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#16
  to:print_str::@1

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from mul8s_error::@1 mul8s_error::@3
  [117] (signed byte) print_schar::b#3 ← phi( mul8s_error::@1/(signed byte) print_schar::b#1 mul8s_error::@3/(signed byte) print_schar::b#2 )
  [118] if((signed byte) print_schar::b#3<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [119] phi()
  [120] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [121] (signed byte) print_schar::b#5 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#3 )
  [122] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#5
  [123] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [124] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [125] phi()
  [126] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [127] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#3
  to:print_schar::@2

(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
mul8s: scope:[mul8s]  from mul8s_compare::@13
  [128] (byte) mul8u::a#1 ← (byte)(signed byte) mul8s::a#0
  [129] (byte) mul8u::b#0 ← (byte)(signed byte) mul8s::b#0
  [130] call mul8u 
  [131] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mul8s::@5
mul8s::@5: scope:[mul8s]  from mul8s
  [132] (word) mul8s::m#0 ← (word) mul8u::return#2
  [133] if((signed byte) mul8s::a#0>=(signed byte) 0) goto mul8s::@1
  to:mul8s::@3
mul8s::@3: scope:[mul8s]  from mul8s::@5
  [134] (byte~) mul8s::$6 ← > (word) mul8s::m#0
  [135] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#0
  [136] (word) mul8s::m#1 ← (word) mul8s::m#0 hi= (byte~) mul8s::$11
  to:mul8s::@1
mul8s::@1: scope:[mul8s]  from mul8s::@3 mul8s::@5
  [137] (word) mul8s::m#5 ← phi( mul8s::@3/(word) mul8s::m#1 mul8s::@5/(word) mul8s::m#0 )
  [138] if((signed byte) mul8s::b#0>=(signed byte) 0) goto mul8s::@2
  to:mul8s::@4
mul8s::@4: scope:[mul8s]  from mul8s::@1
  [139] (byte~) mul8s::$9 ← > (word) mul8s::m#5
  [140] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#0
  [141] (word) mul8s::m#2 ← (word) mul8s::m#5 hi= (byte~) mul8s::$12
  to:mul8s::@2
mul8s::@2: scope:[mul8s]  from mul8s::@1 mul8s::@4
  [142] (word) mul8s::m#4 ← phi( mul8s::@1/(word) mul8s::m#5 mul8s::@4/(word) mul8s::m#2 )
  to:mul8s::@return
mul8s::@return: scope:[mul8s]  from mul8s::@2
  [143] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mul8s mul8u_compare::@11
  [144] (byte) mul8u::a#6 ← phi( mul8s/(byte) mul8u::a#1 mul8u_compare::@11/(byte) mul8u::a#2 )
  [144] (byte) mul8u::b#2 ← phi( mul8s/(byte) mul8u::b#0 mul8u_compare::@11/(byte) mul8u::b#1 )
  [145] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [146] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [146] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [146] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [147] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [148] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [149] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [150] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [151] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [152] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [153] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [154] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
mulf8s: scope:[mulf8s]  from mul8s_compare::@12
  [155] phi()
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  [156] (byte) mulf8u_prepare::a#1 ← (byte)(signed byte) mulf8s::a#0
  [157] call mulf8u_prepare 
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  [158] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#0
  [159] call mulf8s_prepared 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::@1
  [160] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@2
  [161] return 
  to:@return

(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  [162] (byte) mulf8u_prepared::b#1 ← (byte)(signed byte) mulf8s_prepared::b#0
  [163] call mulf8u_prepared 
  [164] (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [165] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#3
  [166] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [167] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0
  [168] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0
  [169] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [170] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  [171] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [172] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5
  [173] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA)
  [174] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [175] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [176] return 
  to:@return

(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared mulf8u::@1
  [177] (byte) mulf8u_prepared::b#2 ← phi( mulf8s_prepared/(byte) mulf8u_prepared::b#1 mulf8u::@1/(byte) mulf8u_prepared::b#0 )
  [178] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#2
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [180] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL)
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [181] return 
  to:@return

(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1 mulf8u
  [182] (byte) mulf8u_prepare::a#2 ← phi( mulf8s::mulf8s_prepare1/(byte) mulf8u_prepare::a#1 mulf8u/(byte) mulf8u_prepare::a#0 )
  [183] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [185] return 
  to:@return

(signed word()) muls8s((signed byte) muls8s::a , (signed byte) muls8s::b)
muls8s: scope:[muls8s]  from mul8s_compare::@4
  [186] if((signed byte) muls8s::a#0<(signed byte) 0) goto muls8s::@5
  to:muls8s::@2
muls8s::@2: scope:[muls8s]  from muls8s
  [187] if((signed byte) muls8s::a#0<=(signed byte) 0) goto muls8s::@1
  to:muls8s::@3
muls8s::@3: scope:[muls8s]  from muls8s::@2 muls8s::@4
  [188] (signed word) muls8s::m#3 ← phi( muls8s::@2/(signed word) 0 muls8s::@4/(signed word) muls8s::m#1 )
  [188] (signed byte) muls8s::j#2 ← phi( muls8s::@2/(signed byte) 0 muls8s::@4/(signed byte) muls8s::j#1 )
  [189] if((signed byte) muls8s::j#2!=(signed byte) muls8s::a#0) goto muls8s::@4
  to:muls8s::@1
muls8s::@1: scope:[muls8s]  from muls8s::@2 muls8s::@3 muls8s::@5
  [190] (signed word) muls8s::return#0 ← phi( muls8s::@2/(signed word) 0 muls8s::@3/(signed word) muls8s::m#3 muls8s::@5/(signed word) muls8s::m#5 )
  to:muls8s::@return
muls8s::@return: scope:[muls8s]  from muls8s::@1
  [191] return 
  to:@return
muls8s::@4: scope:[muls8s]  from muls8s::@3
  [192] (signed word) muls8s::m#1 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#0
  [193] (signed byte) muls8s::j#1 ← ++ (signed byte) muls8s::j#2
  to:muls8s::@3
muls8s::@5: scope:[muls8s]  from muls8s muls8s::@6
  [194] (signed word) muls8s::m#5 ← phi( muls8s/(signed word) 0 muls8s::@6/(signed word) muls8s::m#2 )
  [194] (signed byte) muls8s::i#2 ← phi( muls8s/(signed byte) 0 muls8s::@6/(signed byte) muls8s::i#1 )
  [195] if((signed byte) muls8s::i#2!=(signed byte) muls8s::a#0) goto muls8s::@6
  to:muls8s::@1
muls8s::@6: scope:[muls8s]  from muls8s::@5
  [196] (signed word) muls8s::m#2 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#0
  [197] (signed byte) muls8s::i#1 ← -- (signed byte) muls8s::i#2
  to:muls8s::@5

(void()) mul8u_compare()
mul8u_compare: scope:[mul8u_compare]  from main::@4
  [198] phi()
  to:mul8u_compare::@1
mul8u_compare::@1: scope:[mul8u_compare]  from mul8u_compare mul8u_compare::@8
  [199] (byte) mul8u_compare::a#7 ← phi( mul8u_compare/(byte) 0 mul8u_compare::@8/(byte) mul8u_compare::a#1 )
  to:mul8u_compare::@2
mul8u_compare::@2: scope:[mul8u_compare]  from mul8u_compare::@1 mul8u_compare::@5
  [200] (byte) mul8u_compare::b#10 ← phi( mul8u_compare::@1/(byte) 0 mul8u_compare::@5/(byte) mul8u_compare::b#1 )
  [201] (byte) muls8u::a#0 ← (byte) mul8u_compare::a#7
  [202] (byte) muls8u::b#0 ← (byte) mul8u_compare::b#10
  [203] call muls8u 
  [204] (word) muls8u::return#2 ← (word) muls8u::return#0
  to:mul8u_compare::@10
mul8u_compare::@10: scope:[mul8u_compare]  from mul8u_compare::@2
  [205] (word) mul8u_compare::ms#0 ← (word) muls8u::return#2
  [206] (byte) mulf8u::a#0 ← (byte) mul8u_compare::a#7
  [207] (byte) mulf8u::b#0 ← (byte) mul8u_compare::b#10
  [208] call mulf8u 
  [209] (word) mulf8u::return#2 ← (word) mulf8u::return#0
  to:mul8u_compare::@11
mul8u_compare::@11: scope:[mul8u_compare]  from mul8u_compare::@10
  [210] (word) mul8u_compare::mf#0 ← (word) mulf8u::return#2
  [211] (byte) mul8u::a#2 ← (byte) mul8u_compare::a#7
  [212] (byte) mul8u::b#1 ← (byte) mul8u_compare::b#10
  [213] call mul8u 
  [214] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:mul8u_compare::@12
mul8u_compare::@12: scope:[mul8u_compare]  from mul8u_compare::@11
  [215] (word) mul8u_compare::mn#0 ← (word) mul8u::return#3
  [216] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3
  to:mul8u_compare::@6
mul8u_compare::@6: scope:[mul8u_compare]  from mul8u_compare::@12
  [217] phi()
  to:mul8u_compare::@3
mul8u_compare::@3: scope:[mul8u_compare]  from mul8u_compare::@12 mul8u_compare::@6
  [218] (byte) mul8u_compare::ok#4 ← phi( mul8u_compare::@12/(byte) 1 mul8u_compare::@6/(byte) 0 )
  [219] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@14
  to:mul8u_compare::@4
mul8u_compare::@14: scope:[mul8u_compare]  from mul8u_compare::@3
  [220] phi()
  to:mul8u_compare::@4
mul8u_compare::@4: scope:[mul8u_compare]  from mul8u_compare::@14 mul8u_compare::@3
  [221] (byte) mul8u_compare::ok#3 ← phi( mul8u_compare::@14/(byte) mul8u_compare::ok#4 mul8u_compare::@3/(byte) 0 )
  [222] if((byte) mul8u_compare::ok#3!=(byte) 0) goto mul8u_compare::@5
  to:mul8u_compare::@7
mul8u_compare::@7: scope:[mul8u_compare]  from mul8u_compare::@4
  [223] *((const byte*) BG_COLOR) ← (byte) 2
  [224] (byte) mul8u_error::a#0 ← (byte) mul8u_compare::a#7
  [225] (byte) mul8u_error::b#0 ← (byte) mul8u_compare::b#10
  [226] (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#0
  [227] (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#0
  [228] (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#0
  [229] call mul8u_error 
  to:mul8u_compare::@return
mul8u_compare::@return: scope:[mul8u_compare]  from mul8u_compare::@13 mul8u_compare::@7
  [230] return 
  to:@return
mul8u_compare::@5: scope:[mul8u_compare]  from mul8u_compare::@4
  [231] (byte) mul8u_compare::b#1 ← ++ (byte) mul8u_compare::b#10
  [232] if((byte) mul8u_compare::b#1!=(byte) 0) goto mul8u_compare::@2
  to:mul8u_compare::@8
mul8u_compare::@8: scope:[mul8u_compare]  from mul8u_compare::@5
  [233] (byte) mul8u_compare::a#1 ← ++ (byte) mul8u_compare::a#7
  [234] if((byte) mul8u_compare::a#1!=(byte) 0) goto mul8u_compare::@1
  to:mul8u_compare::@9
mul8u_compare::@9: scope:[mul8u_compare]  from mul8u_compare::@8
  [235] phi()
  [236] call print_str 
  to:mul8u_compare::@13
mul8u_compare::@13: scope:[mul8u_compare]  from mul8u_compare::@9
  [237] phi()
  [238] call print_ln 
  to:mul8u_compare::@return

(void()) mul8u_error((byte) mul8u_error::a , (byte) mul8u_error::b , (word) mul8u_error::ms , (word) mul8u_error::mn , (word) mul8u_error::mf)
mul8u_error: scope:[mul8u_error]  from mul8u_compare::@7
  [239] phi()
  [240] call print_str 
  to:mul8u_error::@1
mul8u_error::@1: scope:[mul8u_error]  from mul8u_error
  [241] (byte) print_uchar::b#3 ← (byte) mul8u_error::a#0
  [242] call print_uchar 
  to:mul8u_error::@2
mul8u_error::@2: scope:[mul8u_error]  from mul8u_error::@1
  [243] phi()
  [244] call print_str 
  to:mul8u_error::@3
mul8u_error::@3: scope:[mul8u_error]  from mul8u_error::@2
  [245] (byte) print_uchar::b#4 ← (byte) mul8u_error::b#0
  [246] call print_uchar 
  to:mul8u_error::@4
mul8u_error::@4: scope:[mul8u_error]  from mul8u_error::@3
  [247] phi()
  [248] call print_str 
  to:mul8u_error::@5
mul8u_error::@5: scope:[mul8u_error]  from mul8u_error::@4
  [249] (word) print_uint::w#3 ← (word) mul8u_error::ms#0
  [250] call print_uint 
  to:mul8u_error::@6
mul8u_error::@6: scope:[mul8u_error]  from mul8u_error::@5
  [251] phi()
  [252] call print_str 
  to:mul8u_error::@7
mul8u_error::@7: scope:[mul8u_error]  from mul8u_error::@6
  [253] (word) print_uint::w#4 ← (word) mul8u_error::mn#0
  [254] call print_uint 
  to:mul8u_error::@8
mul8u_error::@8: scope:[mul8u_error]  from mul8u_error::@7
  [255] phi()
  [256] call print_str 
  to:mul8u_error::@9
mul8u_error::@9: scope:[mul8u_error]  from mul8u_error::@8
  [257] (word) print_uint::w#5 ← (word) mul8u_error::mf#0
  [258] call print_uint 
  to:mul8u_error::@10
mul8u_error::@10: scope:[mul8u_error]  from mul8u_error::@9
  [259] phi()
  [260] call print_ln 
  to:mul8u_error::@return
mul8u_error::@return: scope:[mul8u_error]  from mul8u_error::@10
  [261] return 
  to:@return

(word()) mulf8u((byte) mulf8u::a , (byte) mulf8u::b)
mulf8u: scope:[mulf8u]  from mul8u_compare::@10
  [262] (byte) mulf8u_prepare::a#0 ← (byte) mulf8u::a#0
  [263] call mulf8u_prepare 
  to:mulf8u::@1
mulf8u::@1: scope:[mulf8u]  from mulf8u
  [264] (byte) mulf8u_prepared::b#0 ← (byte) mulf8u::b#0
  [265] call mulf8u_prepared 
  [266] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
  to:mulf8u::@2
mulf8u::@2: scope:[mulf8u]  from mulf8u::@1
  [267] (word) mulf8u::return#0 ← (word) mulf8u_prepared::return#2
  to:mulf8u::@return
mulf8u::@return: scope:[mulf8u]  from mulf8u::@2
  [268] return 
  to:@return

(word()) muls8u((byte) muls8u::a , (byte) muls8u::b)
muls8u: scope:[muls8u]  from mul8u_compare::@2
  [269] if((byte) muls8u::a#0==(byte) 0) goto muls8u::@1
  to:muls8u::@2
muls8u::@2: scope:[muls8u]  from muls8u muls8u::@3
  [270] (word) muls8u::m#3 ← phi( muls8u/(word) 0 muls8u::@3/(word) muls8u::m#1 )
  [270] (byte) muls8u::i#2 ← phi( muls8u/(byte) 0 muls8u::@3/(byte) muls8u::i#1 )
  [271] if((byte) muls8u::i#2!=(byte) muls8u::a#0) goto muls8u::@3
  to:muls8u::@1
muls8u::@1: scope:[muls8u]  from muls8u muls8u::@2
  [272] (word) muls8u::return#0 ← phi( muls8u/(word) 0 muls8u::@2/(word) muls8u::m#3 )
  to:muls8u::@return
muls8u::@return: scope:[muls8u]  from muls8u::@1
  [273] return 
  to:@return
muls8u::@3: scope:[muls8u]  from muls8u::@2
  [274] (word) muls8u::m#1 ← (word) muls8u::m#3 + (byte) muls8u::b#0
  [275] (byte) muls8u::i#1 ← ++ (byte) muls8u::i#2
  to:muls8u::@2

(void()) mulf_tables_cmp()
mulf_tables_cmp: scope:[mulf_tables_cmp]  from main::@3
  [276] phi()
  to:mulf_tables_cmp::@1
mulf_tables_cmp::@1: scope:[mulf_tables_cmp]  from mulf_tables_cmp mulf_tables_cmp::@4
  [277] (byte*) mulf_tables_cmp::asm_sqr#2 ← phi( mulf_tables_cmp/(const byte*) mula_sqr1_lo mulf_tables_cmp::@4/(byte*) mulf_tables_cmp::asm_sqr#1 )
  [277] (byte*) mulf_tables_cmp::kc_sqr#2 ← phi( mulf_tables_cmp/(const byte*) mulf_sqr1_lo mulf_tables_cmp::@4/(byte*) mulf_tables_cmp::kc_sqr#1 )
  [278] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2
  to:mulf_tables_cmp::@3
mulf_tables_cmp::@3: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@1
  [279] phi()
  [280] call print_str 
  to:mulf_tables_cmp::@6
mulf_tables_cmp::@6: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@3
  [281] phi()
  [282] call print_ln 
  to:mulf_tables_cmp::@7
mulf_tables_cmp::@7: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@6
  [283] (byte*) print_char_cursor#231 ← (byte*) print_line_cursor#0
  to:mulf_tables_cmp::@return
mulf_tables_cmp::@return: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@10 mulf_tables_cmp::@7
  [284] (byte*) print_line_cursor#10 ← phi( mulf_tables_cmp::@10/(const byte*) print_screen#0 mulf_tables_cmp::@7/(byte*) print_line_cursor#0 )
  [284] (byte*) print_char_cursor#101 ← phi( mulf_tables_cmp::@10/(byte*) print_char_cursor#18 mulf_tables_cmp::@7/(byte*) print_char_cursor#231 )
  [285] return 
  to:@return
mulf_tables_cmp::@2: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@1
  [286] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4
  to:mulf_tables_cmp::@5
mulf_tables_cmp::@5: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@2
  [287] *((const byte*) BG_COLOR) ← (byte) 2
  [288] call print_str 
  to:mulf_tables_cmp::@8
mulf_tables_cmp::@8: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@5
  [289] (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#2
  [290] call print_uint 
  to:mulf_tables_cmp::@9
mulf_tables_cmp::@9: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@8
  [291] phi()
  [292] call print_str 
  to:mulf_tables_cmp::@10
mulf_tables_cmp::@10: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@9
  [293] (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#2
  [294] call print_uint 
  to:mulf_tables_cmp::@return
mulf_tables_cmp::@4: scope:[mulf_tables_cmp]  from mulf_tables_cmp::@2
  [295] (byte*) mulf_tables_cmp::asm_sqr#1 ← ++ (byte*) mulf_tables_cmp::asm_sqr#2
  [296] (byte*) mulf_tables_cmp::kc_sqr#1 ← ++ (byte*) mulf_tables_cmp::kc_sqr#2
  to:mulf_tables_cmp::@1

(void()) mulf_init_asm()
mulf_init_asm: scope:[mulf_init_asm]  from main::@2
  asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  }
  [298] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo)
  [299] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi)
  [300] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo)
  [301] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi)
  to:mulf_init_asm::@return
mulf_init_asm::@return: scope:[mulf_init_asm]  from mulf_init_asm
  [302] return 
  to:@return

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main::@1
  [303] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [304] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [304] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [304] (word) mulf_init::sqr#4 ← phi( mulf_init/(word) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [304] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [304] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [305] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [306] (byte) mulf_init::dir#2 ← phi( mulf_init::@1/(byte) $ff mulf_init::@8/(byte) mulf_init::dir#4 )
  [306] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_hi mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 )
  [306] (byte) mulf_init::x_255#2 ← phi( mulf_init::@1/(byte) -1 mulf_init::@8/(byte) mulf_init::x_255#1 )
  [306] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_lo mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 )
  [307] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [308] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [309] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [310] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [311] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [312] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [313] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [314] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [315] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [316] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [317] (byte) mulf_init::dir#4 ← phi( mulf_init::@6/(byte) 1 mulf_init::@9/(byte) mulf_init::dir#2 )
  [318] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [319] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [320] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [321] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [322] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [323] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [324] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [324] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [325] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [326] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [327] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [328] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [329] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [330] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [331] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [332] phi()
  [333] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [334] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [335] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [336] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [337] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [338] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [339] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [340] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1334.6666666666667
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
(byte~) mul8s::$11 20002.0
(byte~) mul8s::$12 20002.0
(byte~) mul8s::$6 20002.0
(byte~) mul8s::$9 20002.0
(signed byte) mul8s::a
(signed byte) mul8s::a#0 785.8571428571429
(signed byte) mul8s::b
(signed byte) mul8s::b#0 1000.1818181818181
(word) mul8s::m
(word) mul8s::m#0 10001.0
(word) mul8s::m#1 20002.0
(word) mul8s::m#2 20002.0
(word) mul8s::m#4 6667.333333333333
(word) mul8s::m#5 12501.25
(signed word) mul8s::return
(void()) mul8s_compare()
(signed byte) mul8s_compare::a
(signed byte) mul8s_compare::a#1 202.0
(signed byte) mul8s_compare::a#10 122.85185185185186
(signed byte) mul8s_compare::b
(signed byte) mul8s_compare::b#1 2002.0
(signed byte) mul8s_compare::b#10 240.67999999999998
(signed word) mul8s_compare::mf
(signed word) mul8s_compare::mf#0 118.41176470588235
(signed word) mul8s_compare::mn
(signed word) mul8s_compare::mn#0 167.75
(signed word) mul8s_compare::ms
(signed word) mul8s_compare::ms#0 150.7
(byte) mul8s_compare::ok
(byte) mul8s_compare::ok#3 2002.0
(byte) mul8s_compare::ok#4 333.6666666666667
(void()) mul8s_error((signed byte) mul8s_error::a , (signed byte) mul8s_error::b , (signed word) mul8s_error::ms , (signed word) mul8s_error::mn , (signed word) mul8s_error::mf)
(signed byte) mul8s_error::a
(signed byte) mul8s_error::a#0 16.0
(signed byte) mul8s_error::b
(signed byte) mul8s_error::b#0 11.2
(signed word) mul8s_error::mf
(signed word) mul8s_error::mf#0 5.894736842105264
(signed word) mul8s_error::mn
(signed word) mul8s_error::mn#0 7.0
(signed word) mul8s_error::ms
(signed word) mul8s_error::ms#0 8.615384615384615
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 2.00000002E8
(byte) mul8u::a
(byte) mul8u::a#0 1.00000001E8
(byte) mul8u::a#1 10001.0
(byte) mul8u::a#2 1001.0
(byte) mul8u::a#3 6.668333416666667E7
(byte) mul8u::a#6 55501.5
(byte) mul8u::b
(byte) mul8u::b#0 20002.0
(byte) mul8u::b#1 2002.0
(byte) mul8u::b#2 11002.0
(word) mul8u::mb
(word) mul8u::mb#0 200002.0
(word) mul8u::mb#1 2.00000002E8
(word) mul8u::mb#2 4.287142914285715E7
(word) mul8u::res
(word) mul8u::res#1 2.00000002E8
(word) mul8u::res#2 4.2858715E7
(word) mul8u::res#6 1.00000001E8
(word) mul8u::return
(word) mul8u::return#2 20002.0
(word) mul8u::return#3 2002.0
(void()) mul8u_compare()
(byte) mul8u_compare::a
(byte) mul8u_compare::a#1 151.5
(byte) mul8u_compare::a#7 119.11111111111111
(byte) mul8u_compare::b
(byte) mul8u_compare::b#1 1501.5
(byte) mul8u_compare::b#10 200.64
(word) mul8u_compare::mf
(word) mul8u_compare::mf#0 111.83333333333334
(word) mul8u_compare::mn
(word) mul8u_compare::mn#0 167.75
(word) mul8u_compare::ms
(word) mul8u_compare::ms#0 143.52380952380952
(byte) mul8u_compare::ok
(byte) mul8u_compare::ok#3 2002.0
(byte) mul8u_compare::ok#4 333.6666666666667
(void()) mul8u_error((byte) mul8u_error::a , (byte) mul8u_error::b , (word) mul8u_error::ms , (word) mul8u_error::mn , (word) mul8u_error::mf)
(byte) mul8u_error::a
(byte) mul8u_error::a#0 16.0
(byte) mul8u_error::b
(byte) mul8u_error::b#0 11.2
(word) mul8u_error::mf
(word) mul8u_error::mf#0 5.894736842105264
(word) mul8u_error::mn
(word) mul8u_error::mn#0 7.0
(word) mul8u_error::ms
(word) mul8u_error::ms#0 8.615384615384615
(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
(signed byte) mulf8s::a
(signed byte) mulf8s::a#0 333.6666666666667
(signed byte) mulf8s::b
(signed byte) mulf8s::b#0 2750.5
(signed byte) mulf8s::mulf8s_prepare1_a
(signed word) mulf8s::return
(signed word) mulf8s::return#0 3667.333333333333
(signed word) mulf8s::return#2 2002.0
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$11 200002.0
(byte~) mulf8s_prepared::$12 200002.0
(byte~) mulf8s_prepared::$6 200002.0
(byte~) mulf8s_prepared::$9 200002.0
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0 11000.2
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 100001.0
(word) mulf8s_prepared::m#1 200002.0
(word) mulf8s_prepared::m#2 200002.0
(word) mulf8s_prepared::m#4 66667.33333333333
(word) mulf8s_prepared::m#5 125001.25
(signed word) mulf8s_prepared::return
(word()) mulf8u((byte) mulf8u::a , (byte) mulf8u::b)
(byte) mulf8u::a
(byte) mulf8u::a#0 5501.0
(byte) mulf8u::b
(byte) mulf8u::b#0 3667.333333333333
(word) mulf8u::return
(word) mulf8u::return#0 3667.333333333333
(word) mulf8u::return#2 2002.0
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#0 20002.0
(byte) mulf8u_prepare::a#1 20002.0
(byte) mulf8u_prepare::a#2 120003.0
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0 20002.0
(byte) mulf8u_prepared::b#1 200002.0
(byte) mulf8u_prepared::b#2 1110003.0
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 277500.75
(word) mulf8u_prepared::return#2 20002.0
(word) mulf8u_prepared::return#3 200002.0
(void()) mulf_init()
(byte~) mulf_init::$1 202.0
(byte~) mulf_init::$4 202.0
(byte~) mulf_init::$5 202.0
(byte) mulf_init::c
(byte) mulf_init::c#1 23.307692307692307
(byte) mulf_init::c#2 101.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 37.875
(byte) mulf_init::dir#4 101.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 101.0
(word) mulf_init::sqr#2 202.0
(word) mulf_init::sqr#3 84.16666666666666
(word) mulf_init::sqr#4 50.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 67.33333333333333
(byte*) mulf_init::sqr1_hi#2 25.25
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 202.0
(byte*) mulf_init::sqr1_lo#2 28.857142857142858
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 33.666666666666664
(byte*) mulf_init::sqr2_hi#2 75.75
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 202.0
(byte*) mulf_init::sqr2_lo#2 44.888888888888886
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 101.0
(byte) mulf_init::x_2#2 50.5
(byte) mulf_init::x_2#3 60.599999999999994
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 60.599999999999994
(byte) mulf_init::x_255#2 80.8
(void()) mulf_init_asm()
(void()) mulf_tables_cmp()
(byte*) mulf_tables_cmp::asm_sqr
(byte*) mulf_tables_cmp::asm_sqr#1 101.0
(byte*) mulf_tables_cmp::asm_sqr#2 60.599999999999994
(byte*) mulf_tables_cmp::kc_sqr
(byte*) mulf_tables_cmp::kc_sqr#1 202.0
(byte*) mulf_tables_cmp::kc_sqr#2 40.4
(signed word()) muls8s((signed byte) muls8s::a , (signed byte) muls8s::b)
(signed byte) muls8s::a
(signed byte) muls8s::a#0 1668417.0833333333
(signed byte) muls8s::b
(signed byte) muls8s::b#0 1818273.0
(signed byte) muls8s::i
(signed byte) muls8s::i#1 2.0000002E7
(signed byte) muls8s::i#2 1.0000001E7
(signed byte) muls8s::j
(signed byte) muls8s::j#1 2.0000002E7
(signed byte) muls8s::j#2 1.0000001E7
(signed word) muls8s::m
(signed word) muls8s::m#1 1.0000001E7
(signed word) muls8s::m#2 1.0000001E7
(signed word) muls8s::m#3 1.50000015E7
(signed word) muls8s::m#5 1.50000015E7
(signed word) muls8s::return
(signed word) muls8s::return#0 6667001.0
(signed word) muls8s::return#2 2002.0
(word()) muls8u((byte) muls8u::a , (byte) muls8u::b)
(byte) muls8u::a
(byte) muls8u::a#0 1430143.2857142857
(byte) muls8u::b
(byte) muls8u::b#0 1666833.6666666665
(byte) muls8u::i
(byte) muls8u::i#1 2.0000002E7
(byte) muls8u::i#2 1.0000001E7
(word) muls8u::m
(word) muls8u::m#1 1.0000001E7
(word) muls8u::m#3 1.50000015E7
(word) muls8u::return
(word) muls8u::return#0 3333667.333333333
(word) muls8u::return#2 2002.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 20002.0
(byte) print_char::ch#5 200002.0
(byte) print_char::ch#6 200002.0
(byte) print_char::ch#7 1210004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 608.7380952380953
(byte*) print_char_cursor#101 3.2682926829268295
(byte*) print_char_cursor#138 2559.0
(byte*) print_char_cursor#145 5663.5
(byte*) print_char_cursor#146 40401.999999999985
(byte*) print_char_cursor#158 2044.0
(byte*) print_char_cursor#18 22460.76000000001
(byte*) print_char_cursor#192 22.0
(byte*) print_char_cursor#193 202.0
(byte*) print_char_cursor#231 22.0
(byte*) print_char_cursor#87 1107004.5
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#0 432.1285714285714
(byte*) print_line_cursor#10 1.9523809523809526
(byte*) print_line_cursor#24 21003.0
(byte*) print_line_cursor#47 1225.0
(void()) print_ln()
(void()) print_schar((signed byte) print_schar::b)
(signed byte) print_schar::b
(signed byte) print_schar::b#0 2002.0
(signed byte) print_schar::b#1 202.0
(signed byte) print_schar::b#2 202.0
(signed byte) print_schar::b#3 534.1666666666667
(signed byte) print_schar::b#5 2002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(signed word) print_sint::w
(signed word) print_sint::w#0 2002.0
(signed word) print_sint::w#1 202.0
(signed word) print_sint::w#2 202.0
(signed word) print_sint::w#3 202.0
(signed word) print_sint::w#4 551.0
(signed word) print_sint::w#6 2002.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 20002.0
(byte*) print_str::str#16 10251.25
(byte*) print_str::str#19 1001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 200002.0
(byte~) print_uchar::$2 200002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 2002.0
(byte) print_uchar::b#1 20002.0
(byte) print_uchar::b#2 20002.0
(byte) print_uchar::b#3 202.0
(byte) print_uchar::b#4 202.0
(byte) print_uchar::b#5 55301.75
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 2002.0
(word) print_uint::w#1 22.0
(word) print_uint::w#2 22.0
(word) print_uint::w#3 202.0
(word) print_uint::w#4 202.0
(word) print_uint::w#5 202.0
(word) print_uint::w#6 7109.333333333333

Initial phi equivalence classes
[ mul8s_compare::a#10 mul8s_compare::a#1 ]
[ mul8s_compare::b#10 mul8s_compare::b#1 ]
[ mul8s_compare::ok#3 mul8s_compare::ok#4 ]
[ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ]
[ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
[ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ]
[ print_str::str#16 print_str::str#19 print_str::str#0 ]
[ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
[ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ]
[ mul8u::b#2 mul8u::b#0 mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ]
[ muls8s::j#2 muls8s::j#1 ]
[ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ]
[ muls8s::i#2 muls8s::i#1 ]
[ mul8u_compare::a#7 mul8u_compare::a#1 ]
[ mul8u_compare::b#10 mul8u_compare::b#1 ]
[ mul8u_compare::ok#3 mul8u_compare::ok#4 ]
[ muls8u::i#2 muls8u::i#1 ]
[ muls8u::return#0 muls8u::m#3 muls8u::m#1 ]
[ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ]
[ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ memset::dst#2 memset::dst#1 ]
Added variable muls8s::a#0 to live range equivalence class [ muls8s::a#0 ]
Added variable muls8s::b#0 to live range equivalence class [ muls8s::b#0 ]
Added variable muls8s::return#2 to live range equivalence class [ muls8s::return#2 ]
Added variable mul8s_compare::ms#0 to live range equivalence class [ mul8s_compare::ms#0 ]
Added variable mulf8s::a#0 to live range equivalence class [ mulf8s::a#0 ]
Added variable mulf8s::b#0 to live range equivalence class [ mulf8s::b#0 ]
Added variable mulf8s::return#2 to live range equivalence class [ mulf8s::return#2 ]
Added variable mul8s_compare::mf#0 to live range equivalence class [ mul8s_compare::mf#0 ]
Added variable mul8s::a#0 to live range equivalence class [ mul8s::a#0 ]
Added variable mul8s::b#0 to live range equivalence class [ mul8s::b#0 ]
Added variable mul8s_compare::mn#0 to live range equivalence class [ mul8s_compare::mn#0 ]
Added variable mul8s_error::a#0 to live range equivalence class [ mul8s_error::a#0 ]
Added variable mul8s_error::b#0 to live range equivalence class [ mul8s_error::b#0 ]
Added variable mul8s_error::ms#0 to live range equivalence class [ mul8s_error::ms#0 ]
Added variable mul8s_error::mn#0 to live range equivalence class [ mul8s_error::mn#0 ]
Added variable mul8s_error::mf#0 to live range equivalence class [ mul8s_error::mf#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable mul8s::$6 to live range equivalence class [ mul8s::$6 ]
Added variable mul8s::$11 to live range equivalence class [ mul8s::$11 ]
Added variable mul8s::$9 to live range equivalence class [ mul8s::$9 ]
Added variable mul8s::$12 to live range equivalence class [ mul8s::$12 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Added variable mulf8s_prepared::b#0 to live range equivalence class [ mulf8s_prepared::b#0 ]
Added variable mulf8s::return#0 to live range equivalence class [ mulf8s::return#0 ]
Added variable mulf8u_prepared::return#3 to live range equivalence class [ mulf8u_prepared::return#3 ]
Added variable mulf8s_prepared::$6 to live range equivalence class [ mulf8s_prepared::$6 ]
Added variable mulf8s_prepared::$11 to live range equivalence class [ mulf8s_prepared::$11 ]
Added variable mulf8s_prepared::$9 to live range equivalence class [ mulf8s_prepared::$9 ]
Added variable mulf8s_prepared::$12 to live range equivalence class [ mulf8s_prepared::$12 ]
Added variable mulf8u_prepared::return#0 to live range equivalence class [ mulf8u_prepared::return#0 ]
Added variable muls8u::a#0 to live range equivalence class [ muls8u::a#0 ]
Added variable muls8u::b#0 to live range equivalence class [ muls8u::b#0 ]
Added variable muls8u::return#2 to live range equivalence class [ muls8u::return#2 ]
Added variable mul8u_compare::ms#0 to live range equivalence class [ mul8u_compare::ms#0 ]
Added variable mulf8u::a#0 to live range equivalence class [ mulf8u::a#0 ]
Added variable mulf8u::b#0 to live range equivalence class [ mulf8u::b#0 ]
Added variable mulf8u::return#2 to live range equivalence class [ mulf8u::return#2 ]
Added variable mul8u_compare::mf#0 to live range equivalence class [ mul8u_compare::mf#0 ]
Added variable mul8u::return#3 to live range equivalence class [ mul8u::return#3 ]
Added variable mul8u_compare::mn#0 to live range equivalence class [ mul8u_compare::mn#0 ]
Added variable mul8u_error::a#0 to live range equivalence class [ mul8u_error::a#0 ]
Added variable mul8u_error::b#0 to live range equivalence class [ mul8u_error::b#0 ]
Added variable mul8u_error::ms#0 to live range equivalence class [ mul8u_error::ms#0 ]
Added variable mul8u_error::mn#0 to live range equivalence class [ mul8u_error::mn#0 ]
Added variable mul8u_error::mf#0 to live range equivalence class [ mul8u_error::mf#0 ]
Added variable mulf8u_prepared::return#2 to live range equivalence class [ mulf8u_prepared::return#2 ]
Added variable mulf8u::return#0 to live range equivalence class [ mulf8u::return#0 ]
Added variable mulf_init::$1 to live range equivalence class [ mulf_init::$1 ]
Added variable mulf_init::$4 to live range equivalence class [ mulf_init::$4 ]
Added variable mulf_init::$5 to live range equivalence class [ mulf_init::$5 ]
Complete equivalence classes
[ mul8s_compare::a#10 mul8s_compare::a#1 ]
[ mul8s_compare::b#10 mul8s_compare::b#1 ]
[ mul8s_compare::ok#3 mul8s_compare::ok#4 ]
[ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ]
[ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ]
[ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
[ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
[ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ]
[ print_str::str#16 print_str::str#19 print_str::str#0 ]
[ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
[ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ]
[ mul8u::b#2 mul8u::b#0 mul8u::b#1 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ]
[ muls8s::j#2 muls8s::j#1 ]
[ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ]
[ muls8s::i#2 muls8s::i#1 ]
[ mul8u_compare::a#7 mul8u_compare::a#1 ]
[ mul8u_compare::b#10 mul8u_compare::b#1 ]
[ mul8u_compare::ok#3 mul8u_compare::ok#4 ]
[ muls8u::i#2 muls8u::i#1 ]
[ muls8u::return#0 muls8u::m#3 muls8u::m#1 ]
[ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ]
[ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ memset::dst#2 memset::dst#1 ]
[ muls8s::a#0 ]
[ muls8s::b#0 ]
[ muls8s::return#2 ]
[ mul8s_compare::ms#0 ]
[ mulf8s::a#0 ]
[ mulf8s::b#0 ]
[ mulf8s::return#2 ]
[ mul8s_compare::mf#0 ]
[ mul8s::a#0 ]
[ mul8s::b#0 ]
[ mul8s_compare::mn#0 ]
[ mul8s_error::a#0 ]
[ mul8s_error::b#0 ]
[ mul8s_error::ms#0 ]
[ mul8s_error::mn#0 ]
[ mul8s_error::mf#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ mul8u::return#2 ]
[ mul8s::$6 ]
[ mul8s::$11 ]
[ mul8s::$9 ]
[ mul8s::$12 ]
[ mul8u::$1 ]
[ mulf8s_prepared::b#0 ]
[ mulf8s::return#0 ]
[ mulf8u_prepared::return#3 ]
[ mulf8s_prepared::$6 ]
[ mulf8s_prepared::$11 ]
[ mulf8s_prepared::$9 ]
[ mulf8s_prepared::$12 ]
[ mulf8u_prepared::return#0 ]
[ muls8u::a#0 ]
[ muls8u::b#0 ]
[ muls8u::return#2 ]
[ mul8u_compare::ms#0 ]
[ mulf8u::a#0 ]
[ mulf8u::b#0 ]
[ mulf8u::return#2 ]
[ mul8u_compare::mf#0 ]
[ mul8u::return#3 ]
[ mul8u_compare::mn#0 ]
[ mul8u_error::a#0 ]
[ mul8u_error::b#0 ]
[ mul8u_error::ms#0 ]
[ mul8u_error::mn#0 ]
[ mul8u_error::mf#0 ]
[ mulf8u_prepared::return#2 ]
[ mulf8u::return#0 ]
[ mulf_init::$1 ]
[ mulf_init::$4 ]
[ mulf_init::$5 ]
Allocated zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ]
Allocated zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ]
Allocated zp[1]:4 [ mul8s_compare::ok#3 mul8s_compare::ok#4 ]
Allocated zp[2]:5 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ]
Allocated zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ]
Allocated zp[1]:9 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
Allocated zp[2]:10 [ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
Allocated zp[1]:12 [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
Allocated zp[2]:13 [ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ]
Allocated zp[2]:15 [ print_str::str#16 print_str::str#19 print_str::str#0 ]
Allocated zp[1]:17 [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
Allocated zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ]
Allocated zp[1]:20 [ mul8u::b#2 mul8u::b#0 mul8u::b#1 ]
Allocated zp[1]:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Allocated zp[2]:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
Allocated zp[1]:28 [ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ]
Allocated zp[1]:29 [ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ]
Allocated zp[1]:30 [ muls8s::j#2 muls8s::j#1 ]
Allocated zp[2]:31 [ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ]
Allocated zp[1]:33 [ muls8s::i#2 muls8s::i#1 ]
Allocated zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ]
Allocated zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ]
Allocated zp[1]:36 [ mul8u_compare::ok#3 mul8u_compare::ok#4 ]
Allocated zp[1]:37 [ muls8u::i#2 muls8u::i#1 ]
Allocated zp[2]:38 [ muls8u::return#0 muls8u::m#3 muls8u::m#1 ]
Allocated zp[2]:40 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ]
Allocated zp[2]:42 [ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ]
Allocated zp[2]:44 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp[2]:47 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp[1]:49 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp[2]:50 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp[2]:53 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ]
Allocated zp[2]:56 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp[2]:58 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:60 [ muls8s::a#0 ]
Allocated zp[1]:61 [ muls8s::b#0 ]
Allocated zp[2]:62 [ muls8s::return#2 ]
Allocated zp[2]:64 [ mul8s_compare::ms#0 ]
Allocated zp[1]:66 [ mulf8s::a#0 ]
Allocated zp[1]:67 [ mulf8s::b#0 ]
Allocated zp[2]:68 [ mulf8s::return#2 ]
Allocated zp[2]:70 [ mul8s_compare::mf#0 ]
Allocated zp[1]:72 [ mul8s::a#0 ]
Allocated zp[1]:73 [ mul8s::b#0 ]
Allocated zp[2]:74 [ mul8s_compare::mn#0 ]
Allocated zp[1]:76 [ mul8s_error::a#0 ]
Allocated zp[1]:77 [ mul8s_error::b#0 ]
Allocated zp[2]:78 [ mul8s_error::ms#0 ]
Allocated zp[2]:80 [ mul8s_error::mn#0 ]
Allocated zp[2]:82 [ mul8s_error::mf#0 ]
Allocated zp[1]:84 [ print_uchar::$0 ]
Allocated zp[1]:85 [ print_uchar::$2 ]
Allocated zp[2]:86 [ mul8u::return#2 ]
Allocated zp[1]:88 [ mul8s::$6 ]
Allocated zp[1]:89 [ mul8s::$11 ]
Allocated zp[1]:90 [ mul8s::$9 ]
Allocated zp[1]:91 [ mul8s::$12 ]
Allocated zp[1]:92 [ mul8u::$1 ]
Allocated zp[1]:93 [ mulf8s_prepared::b#0 ]
Allocated zp[2]:94 [ mulf8s::return#0 ]
Allocated zp[2]:96 [ mulf8u_prepared::return#3 ]
Allocated zp[1]:98 [ mulf8s_prepared::$6 ]
Allocated zp[1]:99 [ mulf8s_prepared::$11 ]
Allocated zp[1]:100 [ mulf8s_prepared::$9 ]
Allocated zp[1]:101 [ mulf8s_prepared::$12 ]
Allocated zp[2]:102 [ mulf8u_prepared::return#0 ]
Allocated zp[1]:104 [ muls8u::a#0 ]
Allocated zp[1]:105 [ muls8u::b#0 ]
Allocated zp[2]:106 [ muls8u::return#2 ]
Allocated zp[2]:108 [ mul8u_compare::ms#0 ]
Allocated zp[1]:110 [ mulf8u::a#0 ]
Allocated zp[1]:111 [ mulf8u::b#0 ]
Allocated zp[2]:112 [ mulf8u::return#2 ]
Allocated zp[2]:114 [ mul8u_compare::mf#0 ]
Allocated zp[2]:116 [ mul8u::return#3 ]
Allocated zp[2]:118 [ mul8u_compare::mn#0 ]
Allocated zp[1]:120 [ mul8u_error::a#0 ]
Allocated zp[1]:121 [ mul8u_error::b#0 ]
Allocated zp[2]:122 [ mul8u_error::ms#0 ]
Allocated zp[2]:124 [ mul8u_error::mn#0 ]
Allocated zp[2]:126 [ mul8u_error::mf#0 ]
Allocated zp[2]:128 [ mulf8u_prepared::return#2 ]
Allocated zp[2]:130 [ mulf8u::return#0 ]
Allocated zp[1]:132 [ mulf_init::$1 ]
Allocated zp[1]:133 [ mulf_init::$4 ]
Allocated zp[1]:134 [ mulf_init::$5 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test the fast multiplication library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BG_COLOR = $d021
  .label print_screen = $400
  .label print_char_cursor = $d
  .label print_line_cursor = 5
  // main
main: {
    // [0] *((const byte*) BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    // [1] call print_cls 
    // [332] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call mulf_init 
    // [303] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
  mulf_init_from___b1:
    jsr mulf_init
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call mulf_init_asm 
    jsr mulf_init_asm
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [7] call mulf_tables_cmp 
    // [276] phi from main::@3 to mulf_tables_cmp [phi:main::@3->mulf_tables_cmp]
  mulf_tables_cmp_from___b3:
    jsr mulf_tables_cmp
    // [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [9] call mul8u_compare 
    // [198] phi from main::@4 to mul8u_compare [phi:main::@4->mul8u_compare]
  mul8u_compare_from___b4:
    jsr mul8u_compare
    // [10] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [11] call mul8s_compare 
    // [13] phi from main::@5 to mul8s_compare [phi:main::@5->mul8s_compare]
  mul8s_compare_from___b5:
    jsr mul8s_compare
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // mul8s_compare
// Perform all possible signed byte multiplications (slow and fast) and compare the results
mul8s_compare: {
    .label ms = $40
    .label mf = $46
    .label mn = $4a
    .label a = 2
    .label b = 3
    .label ok = 4
    // [14] phi from mul8s_compare to mul8s_compare::@1 [phi:mul8s_compare->mul8s_compare::@1]
  __b1_from_mul8s_compare:
    // [14] phi (signed byte) mul8s_compare::a#10 = (signed byte) -$80 [phi:mul8s_compare->mul8s_compare::@1#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z a
    jmp __b1
    // mul8s_compare::@1
  __b1:
    // [15] if((signed byte) mul8s_compare::a#10!=(signed byte) -$80) goto mul8s_compare::@3 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z a
    bne __b3_from___b1
    jmp __b2
    // mul8s_compare::@2
  __b2:
    // [16] (byte*) print_char_cursor#192 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [17] call print_str 
    // [110] phi from mul8s_compare::@2 to print_str [phi:mul8s_compare::@2->print_str]
  print_str_from___b2:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#192 [phi:mul8s_compare::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8s_compare::str [phi:mul8s_compare::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from mul8s_compare::@2 to mul8s_compare::@11 [phi:mul8s_compare::@2->mul8s_compare::@11]
  __b11_from___b2:
    jmp __b11
    // mul8s_compare::@11
  __b11:
    // [19] call print_ln 
    // [76] phi from mul8s_compare::@11 to print_ln [phi:mul8s_compare::@11->print_ln]
  print_ln_from___b11:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mul8s_compare::@11->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#0 [phi:mul8s_compare::@11->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // mul8s_compare::@return
  __breturn:
    // [20] return 
    rts
    // [21] phi from mul8s_compare::@1 to mul8s_compare::@3 [phi:mul8s_compare::@1->mul8s_compare::@3]
  __b3_from___b1:
    // [21] phi (signed byte) mul8s_compare::b#10 = (signed byte) -$80 [phi:mul8s_compare::@1->mul8s_compare::@3#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z b
    jmp __b3
    // mul8s_compare::@3
  __b3:
    // [22] if((signed byte) mul8s_compare::b#10!=(signed byte) -$80) goto mul8s_compare::@4 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z b
    bne __b4
    jmp __b5
    // mul8s_compare::@5
  __b5:
    // [23] (signed byte) mul8s_compare::a#1 ← ++ (signed byte) mul8s_compare::a#10 -- vbsz1=_inc_vbsz1 
    inc.z a
    // [14] phi from mul8s_compare::@5 to mul8s_compare::@1 [phi:mul8s_compare::@5->mul8s_compare::@1]
  __b1_from___b5:
    // [14] phi (signed byte) mul8s_compare::a#10 = (signed byte) mul8s_compare::a#1 [phi:mul8s_compare::@5->mul8s_compare::@1#0] -- register_copy 
    jmp __b1
    // mul8s_compare::@4
  __b4:
    // [24] (signed byte) muls8s::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsz1=vbsz2 
    lda.z a
    sta.z muls8s.a
    // [25] (signed byte) muls8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsz1=vbsz2 
    lda.z b
    sta.z muls8s.b
    // [26] call muls8s 
    jsr muls8s
    // [27] (signed word) muls8s::return#2 ← (signed word) muls8s::return#0 -- vwsz1=vwsz2 
    lda.z muls8s.return
    sta.z muls8s.return_1
    lda.z muls8s.return+1
    sta.z muls8s.return_1+1
    jmp __b12
    // mul8s_compare::@12
  __b12:
    // [28] (signed word) mul8s_compare::ms#0 ← (signed word) muls8s::return#2 -- vwsz1=vwsz2 
    lda.z muls8s.return_1
    sta.z ms
    lda.z muls8s.return_1+1
    sta.z ms+1
    // [29] (signed byte) mulf8s::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsz1=vbsz2 
    lda.z a
    sta.z mulf8s.a
    // [30] (signed byte) mulf8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsz1=vbsz2 
    lda.z b
    sta.z mulf8s.b
    // [31] call mulf8s 
    // [155] phi from mul8s_compare::@12 to mulf8s [phi:mul8s_compare::@12->mulf8s]
  mulf8s_from___b12:
    jsr mulf8s
    // [32] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0 -- vwsz1=vwsz2 
    lda.z mulf8s.return
    sta.z mulf8s.return_1
    lda.z mulf8s.return+1
    sta.z mulf8s.return_1+1
    jmp __b13
    // mul8s_compare::@13
  __b13:
    // [33] (signed word) mul8s_compare::mf#0 ← (signed word) mulf8s::return#2 -- vwsz1=vwsz2 
    lda.z mulf8s.return_1
    sta.z mf
    lda.z mulf8s.return_1+1
    sta.z mf+1
    // [34] (signed byte) mul8s::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsz1=vbsz2 
    lda.z a
    sta.z mul8s.a
    // [35] (signed byte) mul8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsz1=vbsz2 
    lda.z b
    sta.z mul8s.b
    // [36] call mul8s 
    jsr mul8s
    jmp __b14
    // mul8s_compare::@14
  __b14:
    // [37] (signed word) mul8s_compare::mn#0 ← (signed word)(word) mul8s::m#4 -- vwsz1=vwsz2 
    lda.z mul8s.m
    sta.z mn
    lda.z mul8s.m+1
    sta.z mn+1
    // [38] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@6 -- vwsz1_eq_vwsz2_then_la1 
    lda.z ms
    cmp.z mf
    bne !+
    lda.z ms+1
    cmp.z mf+1
    beq __b6_from___b14
  !:
    // [39] phi from mul8s_compare::@14 to mul8s_compare::@9 [phi:mul8s_compare::@14->mul8s_compare::@9]
  __b9_from___b14:
    jmp __b9
    // mul8s_compare::@9
  __b9:
    // [40] phi from mul8s_compare::@9 to mul8s_compare::@6 [phi:mul8s_compare::@9->mul8s_compare::@6]
  __b6_from___b9:
    // [40] phi (byte) mul8s_compare::ok#4 = (byte) 0 [phi:mul8s_compare::@9->mul8s_compare::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ok
    jmp __b6
    // [40] phi from mul8s_compare::@14 to mul8s_compare::@6 [phi:mul8s_compare::@14->mul8s_compare::@6]
  __b6_from___b14:
    // [40] phi (byte) mul8s_compare::ok#4 = (byte) 1 [phi:mul8s_compare::@14->mul8s_compare::@6#0] -- vbuz1=vbuc1 
    lda #1
    sta.z ok
    jmp __b6
    // mul8s_compare::@6
  __b6:
    // [41] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@15 -- vwsz1_eq_vwsz2_then_la1 
    lda.z ms
    cmp.z mn
    bne !+
    lda.z ms+1
    cmp.z mn+1
    beq __b15_from___b6
  !:
    // [43] phi from mul8s_compare::@6 to mul8s_compare::@7 [phi:mul8s_compare::@6->mul8s_compare::@7]
  __b7_from___b6:
    // [43] phi (byte) mul8s_compare::ok#3 = (byte) 0 [phi:mul8s_compare::@6->mul8s_compare::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ok
    jmp __b7
    // [42] phi from mul8s_compare::@6 to mul8s_compare::@15 [phi:mul8s_compare::@6->mul8s_compare::@15]
  __b15_from___b6:
    jmp __b15
    // mul8s_compare::@15
  __b15:
    // [43] phi from mul8s_compare::@15 to mul8s_compare::@7 [phi:mul8s_compare::@15->mul8s_compare::@7]
  __b7_from___b15:
    // [43] phi (byte) mul8s_compare::ok#3 = (byte) mul8s_compare::ok#4 [phi:mul8s_compare::@15->mul8s_compare::@7#0] -- register_copy 
    jmp __b7
    // mul8s_compare::@7
  __b7:
    // [44] if((byte) mul8s_compare::ok#3!=(byte) 0) goto mul8s_compare::@8 -- vbuz1_neq_0_then_la1 
    lda.z ok
    cmp #0
    bne __b8
    jmp __b10
    // mul8s_compare::@10
  __b10:
    // [45] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // [46] (signed byte) mul8s_error::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsz1=vbsz2 
    lda.z a
    sta.z mul8s_error.a
    // [47] (signed byte) mul8s_error::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsz1=vbsz2 
    lda.z b
    sta.z mul8s_error.b
    // [48] (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#0 -- vwsz1=vwsz2 
    lda.z ms
    sta.z mul8s_error.ms
    lda.z ms+1
    sta.z mul8s_error.ms+1
    // [49] (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#0 -- vwsz1=vwsz2 
    lda.z mn
    sta.z mul8s_error.mn
    lda.z mn+1
    sta.z mul8s_error.mn+1
    // [50] (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#0 -- vwsz1=vwsz2 
    lda.z mf
    sta.z mul8s_error.mf
    lda.z mf+1
    sta.z mul8s_error.mf+1
    // [51] call mul8s_error 
    jsr mul8s_error
    jmp __breturn
    // mul8s_compare::@8
  __b8:
    // [52] (signed byte) mul8s_compare::b#1 ← ++ (signed byte) mul8s_compare::b#10 -- vbsz1=_inc_vbsz1 
    inc.z b
    // [21] phi from mul8s_compare::@8 to mul8s_compare::@3 [phi:mul8s_compare::@8->mul8s_compare::@3]
  __b3_from___b8:
    // [21] phi (signed byte) mul8s_compare::b#10 = (signed byte) mul8s_compare::b#1 [phi:mul8s_compare::@8->mul8s_compare::@3#0] -- register_copy 
    jmp __b3
    str: .text "signed multiply results match!"
    .byte 0
}
  // mul8s_error
// mul8s_error(signed byte zp($4c) a, signed byte zp($4d) b, signed word zp($4e) ms, signed word zp($50) mn, signed word zp($52) mf)
mul8s_error: {
    .label a = $4c
    .label b = $4d
    .label ms = $4e
    .label mn = $50
    .label mf = $52
    // [53] (byte*) print_char_cursor#193 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [54] call print_str 
    // [110] phi from mul8s_error to print_str [phi:mul8s_error->print_str]
  print_str_from_mul8s_error:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#193 [phi:mul8s_error->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8s_error::str [phi:mul8s_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b1
    // mul8s_error::@1
  __b1:
    // [55] (signed byte) print_schar::b#1 ← (signed byte) mul8s_error::a#0 -- vbsz1=vbsz2 
    lda.z a
    sta.z print_schar.b
    // [56] call print_schar 
    // [117] phi from mul8s_error::@1 to print_schar [phi:mul8s_error::@1->print_schar]
  print_schar_from___b1:
    // [117] phi (signed byte) print_schar::b#3 = (signed byte) print_schar::b#1 [phi:mul8s_error::@1->print_schar#0] -- register_copy 
    jsr print_schar
    // [57] phi from mul8s_error::@1 to mul8s_error::@2 [phi:mul8s_error::@1->mul8s_error::@2]
  __b2_from___b1:
    jmp __b2
    // mul8s_error::@2
  __b2:
    // [58] call print_str 
    // [110] phi from mul8s_error::@2 to print_str [phi:mul8s_error::@2->print_str]
  print_str_from___b2:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str1 [phi:mul8s_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b3
    // mul8s_error::@3
  __b3:
    // [59] (signed byte) print_schar::b#2 ← (signed byte) mul8s_error::b#0 -- vbsz1=vbsz2 
    lda.z b
    sta.z print_schar.b
    // [60] call print_schar 
    // [117] phi from mul8s_error::@3 to print_schar [phi:mul8s_error::@3->print_schar]
  print_schar_from___b3:
    // [117] phi (signed byte) print_schar::b#3 = (signed byte) print_schar::b#2 [phi:mul8s_error::@3->print_schar#0] -- register_copy 
    jsr print_schar
    // [61] phi from mul8s_error::@3 to mul8s_error::@4 [phi:mul8s_error::@3->mul8s_error::@4]
  __b4_from___b3:
    jmp __b4
    // mul8s_error::@4
  __b4:
    // [62] call print_str 
    // [110] phi from mul8s_error::@4 to print_str [phi:mul8s_error::@4->print_str]
  print_str_from___b4:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@4->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str2 [phi:mul8s_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // mul8s_error::@5
  __b5:
    // [63] (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#0 -- vwsz1=vwsz2 
    lda.z ms
    sta.z print_sint.w
    lda.z ms+1
    sta.z print_sint.w+1
    // [64] call print_sint 
    // [81] phi from mul8s_error::@5 to print_sint [phi:mul8s_error::@5->print_sint]
  print_sint_from___b5:
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:mul8s_error::@5->print_sint#0] -- register_copy 
    jsr print_sint
    // [65] phi from mul8s_error::@5 to mul8s_error::@6 [phi:mul8s_error::@5->mul8s_error::@6]
  __b6_from___b5:
    jmp __b6
    // mul8s_error::@6
  __b6:
    // [66] call print_str 
    // [110] phi from mul8s_error::@6 to print_str [phi:mul8s_error::@6->print_str]
  print_str_from___b6:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@6->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str3 [phi:mul8s_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    jmp __b7
    // mul8s_error::@7
  __b7:
    // [67] (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#0 -- vwsz1=vwsz2 
    lda.z mn
    sta.z print_sint.w
    lda.z mn+1
    sta.z print_sint.w+1
    // [68] call print_sint 
    // [81] phi from mul8s_error::@7 to print_sint [phi:mul8s_error::@7->print_sint]
  print_sint_from___b7:
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#2 [phi:mul8s_error::@7->print_sint#0] -- register_copy 
    jsr print_sint
    // [69] phi from mul8s_error::@7 to mul8s_error::@8 [phi:mul8s_error::@7->mul8s_error::@8]
  __b8_from___b7:
    jmp __b8
    // mul8s_error::@8
  __b8:
    // [70] call print_str 
    // [110] phi from mul8s_error::@8 to print_str [phi:mul8s_error::@8->print_str]
  print_str_from___b8:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@8->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str4 [phi:mul8s_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    jmp __b9
    // mul8s_error::@9
  __b9:
    // [71] (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#0 -- vwsz1=vwsz2 
    lda.z mf
    sta.z print_sint.w
    lda.z mf+1
    sta.z print_sint.w+1
    // [72] call print_sint 
    // [81] phi from mul8s_error::@9 to print_sint [phi:mul8s_error::@9->print_sint]
  print_sint_from___b9:
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#3 [phi:mul8s_error::@9->print_sint#0] -- register_copy 
    jsr print_sint
    // [73] phi from mul8s_error::@9 to mul8s_error::@10 [phi:mul8s_error::@9->mul8s_error::@10]
  __b10_from___b9:
    jmp __b10
    // mul8s_error::@10
  __b10:
    // [74] call print_ln 
    // [76] phi from mul8s_error::@10 to print_ln [phi:mul8s_error::@10->print_ln]
  print_ln_from___b10:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:mul8s_error::@10->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#0 [phi:mul8s_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // mul8s_error::@return
  __breturn:
    // [75] return 
    rts
    str: .text "signed multiply mismatch "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [77] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [77] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#47 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [78] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#24 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [79] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [80] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(7) w)
print_sint: {
    .label w = 7
    // [82] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [83] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [84] call print_char 
    // [92] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [85] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [85] phi (signed word) print_sint::w#6 = (signed word) print_sint::w#4 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [86] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_uint.w
    lda.z w+1
    sta.z print_uint.w+1
    // [87] call print_uint 
    // [96] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [88] return 
    rts
    // [89] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [90] call print_char 
    // [92] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [91] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#4 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte zp(9) ch)
print_char: {
    .label ch = 9
    // [93] *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [94] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#87 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [95] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($a) w)
print_uint: {
    .label w = $a
    // [97] (byte) print_uchar::b#1 ← > (word) print_uint::w#6 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [98] call print_uchar 
    // [102] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#145 [phi:print_uint->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [99] (byte) print_uchar::b#2 ← < (word) print_uint::w#6 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [100] call print_uchar 
    // [102] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [101] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($c) b)
print_uchar: {
    .label __0 = $54
    .label __2 = $55
    .label b = $c
    // [103] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [104] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [105] call print_char 
  // Table of hexadecimal digits
    // [92] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#146 [phi:print_uchar->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [106] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [107] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [108] call print_char 
    // [92] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [109] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($f) str)
print_str: {
    .label str = $f
    // [111] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [111] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#158 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [111] phi (byte*) print_str::str#16 = (byte*) print_str::str#19 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [112] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [113] return 
    rts
    // print_str::@2
  __b2:
    // [114] (byte) print_char::ch#0 ← *((byte*) print_str::str#16) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [115] call print_char 
    // [92] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [116] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#16 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte zp($11) b)
print_schar: {
    .label b = $11
    // [118] if((signed byte) print_schar::b#3<(signed byte) 0) goto print_schar::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_schar
    // [119] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [120] call print_char 
    // [92] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [121] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [121] phi (signed byte) print_schar::b#5 = (signed byte) print_schar::b#3 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [122] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#5 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar.b
    // [123] call print_uchar 
    // [102] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [124] return 
    rts
    // [125] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [126] call print_char 
    // [92] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [127] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#3 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // mul8s
// Multiply of two signed chars to a signed int
// Fixes offsets introduced by using unsigned multiplication
// mul8s(signed byte zp($48) a, signed byte zp($49) b)
mul8s: {
    .label __6 = $58
    .label __9 = $5a
    .label __11 = $59
    .label __12 = $5b
    .label m = $12
    .label a = $48
    .label b = $49
    // [128] (byte) mul8u::a#1 ← (byte)(signed byte) mul8s::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z mul8u.a
    // [129] (byte) mul8u::b#0 ← (byte)(signed byte) mul8s::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z mul8u.b
    // [130] call mul8u 
    // [144] phi from mul8s to mul8u [phi:mul8s->mul8u]
  mul8u_from_mul8s:
    // [144] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8s->mul8u#0] -- register_copy 
    // [144] phi (byte) mul8u::b#2 = (byte) mul8u::b#0 [phi:mul8s->mul8u#1] -- register_copy 
    jsr mul8u
    // [131] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp __b5
    // mul8s::@5
  __b5:
    // [132] (word) mul8s::m#0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z m
    lda.z mul8u.return+1
    sta.z m+1
    // [133] if((signed byte) mul8s::a#0>=(signed byte) 0) goto mul8s::@1 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b1_from___b5
    jmp __b3
    // mul8s::@3
  __b3:
    // [134] (byte~) mul8s::$6 ← > (word) mul8s::m#0 -- vbuz1=_hi_vwuz2 
    lda.z m+1
    sta.z __6
    // [135] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z __6
    sec
    sbc.z b
    sta.z __11
    // [136] (word) mul8s::m#1 ← (word) mul8s::m#0 hi= (byte~) mul8s::$11 -- vwuz1=vwuz1_sethi_vbuz2 
    lda.z __11
    sta.z m+1
    // [137] phi from mul8s::@3 mul8s::@5 to mul8s::@1 [phi:mul8s::@3/mul8s::@5->mul8s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [137] phi (word) mul8s::m#5 = (word) mul8s::m#1 [phi:mul8s::@3/mul8s::@5->mul8s::@1#0] -- register_copy 
    jmp __b1
    // mul8s::@1
  __b1:
    // [138] if((signed byte) mul8s::b#0>=(signed byte) 0) goto mul8s::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2_from___b1
    jmp __b4
    // mul8s::@4
  __b4:
    // [139] (byte~) mul8s::$9 ← > (word) mul8s::m#5 -- vbuz1=_hi_vwuz2 
    lda.z m+1
    sta.z __9
    // [140] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z __9
    sec
    sbc.z a
    sta.z __12
    // [141] (word) mul8s::m#2 ← (word) mul8s::m#5 hi= (byte~) mul8s::$12 -- vwuz1=vwuz1_sethi_vbuz2 
    lda.z __12
    sta.z m+1
    // [142] phi from mul8s::@1 mul8s::@4 to mul8s::@2 [phi:mul8s::@1/mul8s::@4->mul8s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [142] phi (word) mul8s::m#4 = (word) mul8s::m#5 [phi:mul8s::@1/mul8s::@4->mul8s::@2#0] -- register_copy 
    jmp __b2
    // mul8s::@2
  __b2:
    jmp __breturn
    // mul8s::@return
  __breturn:
    // [143] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte zp($15) a, byte zp($14) b)
mul8u: {
    .label __1 = $5c
    .label mb = $18
    .label a = $15
    .label res = $16
    .label b = $14
    .label return = $56
    .label return_1 = $74
    // [145] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 -- vwuz1=_word_vbuz2 
    lda.z b
    sta.z mb
    lda #0
    sta.z mb+1
    // [146] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [146] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [146] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [146] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [147] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [148] return 
    rts
    // mul8u::@2
  __b2:
    // [149] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [150] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [151] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [152] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [152] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [153] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [154] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [146] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [146] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [146] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [146] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // mulf8s
// Fast multiply two signed chars to a unsigned int result
// mulf8s(signed byte zp($42) a, signed byte zp($43) b)
mulf8s: {
    .label return = $5e
    .label a = $42
    .label b = $43
    .label return_1 = $44
    jmp mulf8s_prepare1
    // mulf8s::mulf8s_prepare1
  mulf8s_prepare1:
    // [156] (byte) mulf8u_prepare::a#1 ← (byte)(signed byte) mulf8s::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z mulf8u_prepare.a
    // [157] call mulf8u_prepare 
    // [182] phi from mulf8s::mulf8s_prepare1 to mulf8u_prepare [phi:mulf8s::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
    // [182] phi (byte) mulf8u_prepare::a#2 = (byte) mulf8u_prepare::a#1 [phi:mulf8s::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp __b1
    // mulf8s::@1
  __b1:
    // [158] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#0 -- vbsz1=vbsz2 
    lda.z b
    sta.z mulf8s_prepared.b
    // [159] call mulf8s_prepared 
    jsr mulf8s_prepared
    jmp __b2
    // mulf8s::@2
  __b2:
    // [160] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4 -- vwsz1=vwsz2 
    lda.z mulf8s_prepared.m
    sta.z return
    lda.z mulf8s_prepared.m+1
    sta.z return+1
    jmp __breturn
    // mulf8s::@return
  __breturn:
    // [161] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte zp($5d) b)
mulf8s_prepared: {
    .label memA = $fd
    .label __6 = $62
    .label __9 = $64
    .label __11 = $63
    .label __12 = $65
    .label m = $1a
    .label b = $5d
    // [162] (byte) mulf8u_prepared::b#1 ← (byte)(signed byte) mulf8s_prepared::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z mulf8u_prepared.b
    // [163] call mulf8u_prepared 
    // [177] phi from mulf8s_prepared to mulf8u_prepared [phi:mulf8s_prepared->mulf8u_prepared]
  mulf8u_prepared_from_mulf8s_prepared:
    // [177] phi (byte) mulf8u_prepared::b#2 = (byte) mulf8u_prepared::b#1 [phi:mulf8s_prepared->mulf8u_prepared#0] -- register_copy 
    jsr mulf8u_prepared
    // [164] (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#0 -- vwuz1=vwuz2 
    lda.z mulf8u_prepared.return
    sta.z mulf8u_prepared.return_2
    lda.z mulf8u_prepared.return+1
    sta.z mulf8u_prepared.return_2+1
    jmp __b5
    // mulf8s_prepared::@5
  __b5:
    // [165] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#3 -- vwuz1=vwuz2 
    lda.z mulf8u_prepared.return_2
    sta.z m
    lda.z mulf8u_prepared.return_2+1
    sta.z m+1
    // [166] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1_from___b5
    jmp __b3
    // mulf8s_prepared::@3
  __b3:
    // [167] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0 -- vbuz1=_hi_vwuz2 
    lda.z m+1
    sta.z __6
    // [168] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z __6
    sec
    sbc.z b
    sta.z __11
    // [169] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuz2 
    lda.z __11
    sta.z m+1
    // [170] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [170] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    jmp __b1
    // mulf8s_prepared::@1
  __b1:
    // [171] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2_from___b1
    jmp __b4
    // mulf8s_prepared::@4
  __b4:
    // [172] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5 -- vbuz1=_hi_vwuz2 
    lda.z m+1
    sta.z __9
    // [173] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA) -- vbuz1=vbuz2_minus__deref_pbuc1 
    lda.z __9
    sec
    sbc memA
    sta.z __12
    // [174] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuz2 
    lda.z __12
    sta.z m+1
    // [175] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [175] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp __b2
    // mulf8s_prepared::@2
  __b2:
    jmp __breturn
    // mulf8s_prepared::@return
  __breturn:
    // [176] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte zp($1c) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $66
    .label b = $1c
    .label return_1 = $80
    .label return_2 = $60
    // [178] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#2 -- _deref_pbuc1=vbuz1 
    lda.z b
    sta memB
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // [180] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    jmp __breturn
    // mulf8u_prepared::@return
  __breturn:
    // [181] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte zp($1d) a)
mulf8u_prepare: {
    .label memA = $fd
    .label a = $1d
    // [183] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#2 -- _deref_pbuc1=vbuz1 
    lda.z a
    sta memA
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp __breturn
    // mulf8u_prepare::@return
  __breturn:
    // [185] return 
    rts
}
  // muls8s
// Slow multiplication of signed bytes
// Perform a signed multiplication by repeated addition/subtraction
// muls8s(signed byte zp($3c) a, signed byte zp($3d) b)
muls8s: {
    .label m = $1f
    .label j = $1e
    .label return = $1f
    .label i = $21
    .label a = $3c
    .label b = $3d
    .label return_1 = $3e
    // [186] if((signed byte) muls8s::a#0<(signed byte) 0) goto muls8s::@5 -- vbsz1_lt_0_then_la1 
    lda.z a
    bmi __b5_from_muls8s
    jmp __b2
    // muls8s::@2
  __b2:
    // [187] if((signed byte) muls8s::a#0<=(signed byte) 0) goto muls8s::@1 -- vbsz1_le_0_then_la1 
    lda.z a
    cmp #1
    bmi __b1_from___b2
    // [188] phi from muls8s::@2 to muls8s::@3 [phi:muls8s::@2->muls8s::@3]
  __b3_from___b2:
    // [188] phi (signed word) muls8s::m#3 = (signed word) 0 [phi:muls8s::@2->muls8s::@3#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z m
    lda #>0
    sta.z m+1
    // [188] phi (signed byte) muls8s::j#2 = (signed byte) 0 [phi:muls8s::@2->muls8s::@3#1] -- vbsz1=vbsc1 
    lda #0
    sta.z j
    jmp __b3
    // muls8s::@3
  __b3:
    // [189] if((signed byte) muls8s::j#2!=(signed byte) muls8s::a#0) goto muls8s::@4 -- vbsz1_neq_vbsz2_then_la1 
    lda.z j
    cmp.z a
    bne __b4
    // [190] phi from muls8s::@3 muls8s::@5 to muls8s::@1 [phi:muls8s::@3/muls8s::@5->muls8s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [190] phi (signed word) muls8s::return#0 = (signed word) muls8s::m#3 [phi:muls8s::@3/muls8s::@5->muls8s::@1#0] -- register_copy 
    jmp __b1
    // [190] phi from muls8s::@2 to muls8s::@1 [phi:muls8s::@2->muls8s::@1]
  __b1_from___b2:
    // [190] phi (signed word) muls8s::return#0 = (signed word) 0 [phi:muls8s::@2->muls8s::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z return
    lda #>0
    sta.z return+1
    jmp __b1
    // muls8s::@1
  __b1:
    jmp __breturn
    // muls8s::@return
  __breturn:
    // [191] return 
    rts
    // muls8s::@4
  __b4:
    // [192] (signed word) muls8s::m#1 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#0 -- vwsz1=vwsz1_plus_vbsz2 
    lda.z b
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    clc
    lda.z m
    adc.z $fe
    sta.z m
    lda.z m+1
    adc.z $ff
    sta.z m+1
    // [193] (signed byte) muls8s::j#1 ← ++ (signed byte) muls8s::j#2 -- vbsz1=_inc_vbsz1 
    inc.z j
    // [188] phi from muls8s::@4 to muls8s::@3 [phi:muls8s::@4->muls8s::@3]
  __b3_from___b4:
    // [188] phi (signed word) muls8s::m#3 = (signed word) muls8s::m#1 [phi:muls8s::@4->muls8s::@3#0] -- register_copy 
    // [188] phi (signed byte) muls8s::j#2 = (signed byte) muls8s::j#1 [phi:muls8s::@4->muls8s::@3#1] -- register_copy 
    jmp __b3
    // [194] phi from muls8s to muls8s::@5 [phi:muls8s->muls8s::@5]
  __b5_from_muls8s:
    // [194] phi (signed word) muls8s::m#5 = (signed word) 0 [phi:muls8s->muls8s::@5#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z m
    lda #>0
    sta.z m+1
    // [194] phi (signed byte) muls8s::i#2 = (signed byte) 0 [phi:muls8s->muls8s::@5#1] -- vbsz1=vbsc1 
    lda #0
    sta.z i
    jmp __b5
    // muls8s::@5
  __b5:
    // [195] if((signed byte) muls8s::i#2!=(signed byte) muls8s::a#0) goto muls8s::@6 -- vbsz1_neq_vbsz2_then_la1 
    lda.z i
    cmp.z a
    bne __b6
    jmp __b1_from___b5
    // muls8s::@6
  __b6:
    // [196] (signed word) muls8s::m#2 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#0 -- vwsz1=vwsz1_minus_vbsz2 
    lda.z b
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    sec
    lda.z m
    sbc.z $fe
    sta.z m
    lda.z m+1
    sbc.z $ff
    sta.z m+1
    // [197] (signed byte) muls8s::i#1 ← -- (signed byte) muls8s::i#2 -- vbsz1=_dec_vbsz1 
    dec.z i
    // [194] phi from muls8s::@6 to muls8s::@5 [phi:muls8s::@6->muls8s::@5]
  __b5_from___b6:
    // [194] phi (signed word) muls8s::m#5 = (signed word) muls8s::m#2 [phi:muls8s::@6->muls8s::@5#0] -- register_copy 
    // [194] phi (signed byte) muls8s::i#2 = (signed byte) muls8s::i#1 [phi:muls8s::@6->muls8s::@5#1] -- register_copy 
    jmp __b5
}
  // mul8u_compare
// Perform all possible byte multiplications (slow and fast) and compare the results
mul8u_compare: {
    .label ms = $6c
    .label mf = $72
    .label mn = $76
    .label b = $23
    .label a = $22
    .label ok = $24
    // [199] phi from mul8u_compare to mul8u_compare::@1 [phi:mul8u_compare->mul8u_compare::@1]
  __b1_from_mul8u_compare:
    // [199] phi (byte) mul8u_compare::a#7 = (byte) 0 [phi:mul8u_compare->mul8u_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [199] phi from mul8u_compare::@8 to mul8u_compare::@1 [phi:mul8u_compare::@8->mul8u_compare::@1]
  __b1_from___b8:
    // [199] phi (byte) mul8u_compare::a#7 = (byte) mul8u_compare::a#1 [phi:mul8u_compare::@8->mul8u_compare::@1#0] -- register_copy 
    jmp __b1
    // mul8u_compare::@1
  __b1:
    // [200] phi from mul8u_compare::@1 to mul8u_compare::@2 [phi:mul8u_compare::@1->mul8u_compare::@2]
  __b2_from___b1:
    // [200] phi (byte) mul8u_compare::b#10 = (byte) 0 [phi:mul8u_compare::@1->mul8u_compare::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b2
    // [200] phi from mul8u_compare::@5 to mul8u_compare::@2 [phi:mul8u_compare::@5->mul8u_compare::@2]
  __b2_from___b5:
    // [200] phi (byte) mul8u_compare::b#10 = (byte) mul8u_compare::b#1 [phi:mul8u_compare::@5->mul8u_compare::@2#0] -- register_copy 
    jmp __b2
    // mul8u_compare::@2
  __b2:
    // [201] (byte) muls8u::a#0 ← (byte) mul8u_compare::a#7 -- vbuz1=vbuz2 
    lda.z a
    sta.z muls8u.a
    // [202] (byte) muls8u::b#0 ← (byte) mul8u_compare::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z muls8u.b
    // [203] call muls8u 
    jsr muls8u
    // [204] (word) muls8u::return#2 ← (word) muls8u::return#0 -- vwuz1=vwuz2 
    lda.z muls8u.return
    sta.z muls8u.return_1
    lda.z muls8u.return+1
    sta.z muls8u.return_1+1
    jmp __b10
    // mul8u_compare::@10
  __b10:
    // [205] (word) mul8u_compare::ms#0 ← (word) muls8u::return#2 -- vwuz1=vwuz2 
    lda.z muls8u.return_1
    sta.z ms
    lda.z muls8u.return_1+1
    sta.z ms+1
    // [206] (byte) mulf8u::a#0 ← (byte) mul8u_compare::a#7 -- vbuz1=vbuz2 
    lda.z a
    sta.z mulf8u.a
    // [207] (byte) mulf8u::b#0 ← (byte) mul8u_compare::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z mulf8u.b
    // [208] call mulf8u 
    jsr mulf8u
    // [209] (word) mulf8u::return#2 ← (word) mulf8u::return#0 -- vwuz1=vwuz2 
    lda.z mulf8u.return
    sta.z mulf8u.return_1
    lda.z mulf8u.return+1
    sta.z mulf8u.return_1+1
    jmp __b11
    // mul8u_compare::@11
  __b11:
    // [210] (word) mul8u_compare::mf#0 ← (word) mulf8u::return#2 -- vwuz1=vwuz2 
    lda.z mulf8u.return_1
    sta.z mf
    lda.z mulf8u.return_1+1
    sta.z mf+1
    // [211] (byte) mul8u::a#2 ← (byte) mul8u_compare::a#7 -- vbuz1=vbuz2 
    lda.z a
    sta.z mul8u.a
    // [212] (byte) mul8u::b#1 ← (byte) mul8u_compare::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z mul8u.b
    // [213] call mul8u 
    // [144] phi from mul8u_compare::@11 to mul8u [phi:mul8u_compare::@11->mul8u]
  mul8u_from___b11:
    // [144] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mul8u_compare::@11->mul8u#0] -- register_copy 
    // [144] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mul8u_compare::@11->mul8u#1] -- register_copy 
    jsr mul8u
    // [214] (word) mul8u::return#3 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return_1
    lda.z mul8u.res+1
    sta.z mul8u.return_1+1
    jmp __b12
    // mul8u_compare::@12
  __b12:
    // [215] (word) mul8u_compare::mn#0 ← (word) mul8u::return#3 -- vwuz1=vwuz2 
    lda.z mul8u.return_1
    sta.z mn
    lda.z mul8u.return_1+1
    sta.z mn+1
    // [216] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3 -- vwuz1_eq_vwuz2_then_la1 
    lda.z ms
    cmp.z mf
    bne !+
    lda.z ms+1
    cmp.z mf+1
    beq __b3_from___b12
  !:
    // [217] phi from mul8u_compare::@12 to mul8u_compare::@6 [phi:mul8u_compare::@12->mul8u_compare::@6]
  __b6_from___b12:
    jmp __b6
    // mul8u_compare::@6
  __b6:
    // [218] phi from mul8u_compare::@6 to mul8u_compare::@3 [phi:mul8u_compare::@6->mul8u_compare::@3]
  __b3_from___b6:
    // [218] phi (byte) mul8u_compare::ok#4 = (byte) 0 [phi:mul8u_compare::@6->mul8u_compare::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ok
    jmp __b3
    // [218] phi from mul8u_compare::@12 to mul8u_compare::@3 [phi:mul8u_compare::@12->mul8u_compare::@3]
  __b3_from___b12:
    // [218] phi (byte) mul8u_compare::ok#4 = (byte) 1 [phi:mul8u_compare::@12->mul8u_compare::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z ok
    jmp __b3
    // mul8u_compare::@3
  __b3:
    // [219] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@14 -- vwuz1_eq_vwuz2_then_la1 
    lda.z ms
    cmp.z mn
    bne !+
    lda.z ms+1
    cmp.z mn+1
    beq __b14_from___b3
  !:
    // [221] phi from mul8u_compare::@3 to mul8u_compare::@4 [phi:mul8u_compare::@3->mul8u_compare::@4]
  __b4_from___b3:
    // [221] phi (byte) mul8u_compare::ok#3 = (byte) 0 [phi:mul8u_compare::@3->mul8u_compare::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ok
    jmp __b4
    // [220] phi from mul8u_compare::@3 to mul8u_compare::@14 [phi:mul8u_compare::@3->mul8u_compare::@14]
  __b14_from___b3:
    jmp __b14
    // mul8u_compare::@14
  __b14:
    // [221] phi from mul8u_compare::@14 to mul8u_compare::@4 [phi:mul8u_compare::@14->mul8u_compare::@4]
  __b4_from___b14:
    // [221] phi (byte) mul8u_compare::ok#3 = (byte) mul8u_compare::ok#4 [phi:mul8u_compare::@14->mul8u_compare::@4#0] -- register_copy 
    jmp __b4
    // mul8u_compare::@4
  __b4:
    // [222] if((byte) mul8u_compare::ok#3!=(byte) 0) goto mul8u_compare::@5 -- vbuz1_neq_0_then_la1 
    lda.z ok
    cmp #0
    bne __b5
    jmp __b7
    // mul8u_compare::@7
  __b7:
    // [223] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // [224] (byte) mul8u_error::a#0 ← (byte) mul8u_compare::a#7 -- vbuz1=vbuz2 
    lda.z a
    sta.z mul8u_error.a
    // [225] (byte) mul8u_error::b#0 ← (byte) mul8u_compare::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z mul8u_error.b
    // [226] (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#0 -- vwuz1=vwuz2 
    lda.z ms
    sta.z mul8u_error.ms
    lda.z ms+1
    sta.z mul8u_error.ms+1
    // [227] (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#0 -- vwuz1=vwuz2 
    lda.z mn
    sta.z mul8u_error.mn
    lda.z mn+1
    sta.z mul8u_error.mn+1
    // [228] (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#0 -- vwuz1=vwuz2 
    lda.z mf
    sta.z mul8u_error.mf
    lda.z mf+1
    sta.z mul8u_error.mf+1
    // [229] call mul8u_error 
    // [239] phi from mul8u_compare::@7 to mul8u_error [phi:mul8u_compare::@7->mul8u_error]
  mul8u_error_from___b7:
    jsr mul8u_error
    jmp __breturn
    // mul8u_compare::@return
  __breturn:
    // [230] return 
    rts
    // mul8u_compare::@5
  __b5:
    // [231] (byte) mul8u_compare::b#1 ← ++ (byte) mul8u_compare::b#10 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [232] if((byte) mul8u_compare::b#1!=(byte) 0) goto mul8u_compare::@2 -- vbuz1_neq_0_then_la1 
    lda.z b
    cmp #0
    bne __b2_from___b5
    jmp __b8
    // mul8u_compare::@8
  __b8:
    // [233] (byte) mul8u_compare::a#1 ← ++ (byte) mul8u_compare::a#7 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [234] if((byte) mul8u_compare::a#1!=(byte) 0) goto mul8u_compare::@1 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b1_from___b8
    // [235] phi from mul8u_compare::@8 to mul8u_compare::@9 [phi:mul8u_compare::@8->mul8u_compare::@9]
  __b9_from___b8:
    jmp __b9
    // mul8u_compare::@9
  __b9:
    // [236] call print_str 
    // [110] phi from mul8u_compare::@9 to print_str [phi:mul8u_compare::@9->print_str]
  print_str_from___b9:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#101 [phi:mul8u_compare::@9->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8u_compare::str [phi:mul8u_compare::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [237] phi from mul8u_compare::@9 to mul8u_compare::@13 [phi:mul8u_compare::@9->mul8u_compare::@13]
  __b13_from___b9:
    jmp __b13
    // mul8u_compare::@13
  __b13:
    // [238] call print_ln 
    // [76] phi from mul8u_compare::@13 to print_ln [phi:mul8u_compare::@13->print_ln]
  print_ln_from___b13:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mul8u_compare::@13->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#10 [phi:mul8u_compare::@13->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    str: .text "multiply results match!"
    .byte 0
}
  // mul8u_error
// mul8u_error(byte zp($78) a, byte zp($79) b, word zp($7a) ms, word zp($7c) mn, word zp($7e) mf)
mul8u_error: {
    .label a = $78
    .label b = $79
    .label ms = $7a
    .label mn = $7c
    .label mf = $7e
    // [240] call print_str 
    // [110] phi from mul8u_error to print_str [phi:mul8u_error->print_str]
  print_str_from_mul8u_error:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#101 [phi:mul8u_error->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8u_error::str [phi:mul8u_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b1
    // mul8u_error::@1
  __b1:
    // [241] (byte) print_uchar::b#3 ← (byte) mul8u_error::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z print_uchar.b
    // [242] call print_uchar 
    // [102] phi from mul8u_error::@1 to print_uchar [phi:mul8u_error::@1->print_uchar]
  print_uchar_from___b1:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#1 [phi:mul8u_error::@1->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#3 [phi:mul8u_error::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [243] phi from mul8u_error::@1 to mul8u_error::@2 [phi:mul8u_error::@1->mul8u_error::@2]
  __b2_from___b1:
    jmp __b2
    // mul8u_error::@2
  __b2:
    // [244] call print_str 
    // [110] phi from mul8u_error::@2 to print_str [phi:mul8u_error::@2->print_str]
  print_str_from___b2:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str1 [phi:mul8u_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b3
    // mul8u_error::@3
  __b3:
    // [245] (byte) print_uchar::b#4 ← (byte) mul8u_error::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_uchar.b
    // [246] call print_uchar 
    // [102] phi from mul8u_error::@3 to print_uchar [phi:mul8u_error::@3->print_uchar]
  print_uchar_from___b3:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#1 [phi:mul8u_error::@3->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#4 [phi:mul8u_error::@3->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [247] phi from mul8u_error::@3 to mul8u_error::@4 [phi:mul8u_error::@3->mul8u_error::@4]
  __b4_from___b3:
    jmp __b4
    // mul8u_error::@4
  __b4:
    // [248] call print_str 
    // [110] phi from mul8u_error::@4 to print_str [phi:mul8u_error::@4->print_str]
  print_str_from___b4:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@4->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str2 [phi:mul8u_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // mul8u_error::@5
  __b5:
    // [249] (word) print_uint::w#3 ← (word) mul8u_error::ms#0 -- vwuz1=vwuz2 
    lda.z ms
    sta.z print_uint.w
    lda.z ms+1
    sta.z print_uint.w+1
    // [250] call print_uint 
    // [96] phi from mul8u_error::@5 to print_uint [phi:mul8u_error::@5->print_uint]
  print_uint_from___b5:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@5->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#3 [phi:mul8u_error::@5->print_uint#1] -- register_copy 
    jsr print_uint
    // [251] phi from mul8u_error::@5 to mul8u_error::@6 [phi:mul8u_error::@5->mul8u_error::@6]
  __b6_from___b5:
    jmp __b6
    // mul8u_error::@6
  __b6:
    // [252] call print_str 
    // [110] phi from mul8u_error::@6 to print_str [phi:mul8u_error::@6->print_str]
  print_str_from___b6:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@6->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str3 [phi:mul8u_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    jmp __b7
    // mul8u_error::@7
  __b7:
    // [253] (word) print_uint::w#4 ← (word) mul8u_error::mn#0 -- vwuz1=vwuz2 
    lda.z mn
    sta.z print_uint.w
    lda.z mn+1
    sta.z print_uint.w+1
    // [254] call print_uint 
    // [96] phi from mul8u_error::@7 to print_uint [phi:mul8u_error::@7->print_uint]
  print_uint_from___b7:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@7->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#4 [phi:mul8u_error::@7->print_uint#1] -- register_copy 
    jsr print_uint
    // [255] phi from mul8u_error::@7 to mul8u_error::@8 [phi:mul8u_error::@7->mul8u_error::@8]
  __b8_from___b7:
    jmp __b8
    // mul8u_error::@8
  __b8:
    // [256] call print_str 
    // [110] phi from mul8u_error::@8 to print_str [phi:mul8u_error::@8->print_str]
  print_str_from___b8:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@8->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str4 [phi:mul8u_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    jmp __b9
    // mul8u_error::@9
  __b9:
    // [257] (word) print_uint::w#5 ← (word) mul8u_error::mf#0 -- vwuz1=vwuz2 
    lda.z mf
    sta.z print_uint.w
    lda.z mf+1
    sta.z print_uint.w+1
    // [258] call print_uint 
    // [96] phi from mul8u_error::@9 to print_uint [phi:mul8u_error::@9->print_uint]
  print_uint_from___b9:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@9->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#5 [phi:mul8u_error::@9->print_uint#1] -- register_copy 
    jsr print_uint
    // [259] phi from mul8u_error::@9 to mul8u_error::@10 [phi:mul8u_error::@9->mul8u_error::@10]
  __b10_from___b9:
    jmp __b10
    // mul8u_error::@10
  __b10:
    // [260] call print_ln 
    // [76] phi from mul8u_error::@10 to print_ln [phi:mul8u_error::@10->print_ln]
  print_ln_from___b10:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:mul8u_error::@10->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#10 [phi:mul8u_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // mul8u_error::@return
  __breturn:
    // [261] return 
    rts
    str: .text "multiply mismatch "
    .byte 0
}
  // mulf8u
// Fast multiply two unsigned chars to a unsigned int result
// mulf8u(byte zp($6e) a, byte zp($6f) b)
mulf8u: {
    .label return = $82
    .label a = $6e
    .label b = $6f
    .label return_1 = $70
    // [262] (byte) mulf8u_prepare::a#0 ← (byte) mulf8u::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z mulf8u_prepare.a
    // [263] call mulf8u_prepare 
    // [182] phi from mulf8u to mulf8u_prepare [phi:mulf8u->mulf8u_prepare]
  mulf8u_prepare_from_mulf8u:
    // [182] phi (byte) mulf8u_prepare::a#2 = (byte) mulf8u_prepare::a#0 [phi:mulf8u->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp __b1
    // mulf8u::@1
  __b1:
    // [264] (byte) mulf8u_prepared::b#0 ← (byte) mulf8u::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z mulf8u_prepared.b
    // [265] call mulf8u_prepared 
    // [177] phi from mulf8u::@1 to mulf8u_prepared [phi:mulf8u::@1->mulf8u_prepared]
  mulf8u_prepared_from___b1:
    // [177] phi (byte) mulf8u_prepared::b#2 = (byte) mulf8u_prepared::b#0 [phi:mulf8u::@1->mulf8u_prepared#0] -- register_copy 
    jsr mulf8u_prepared
    // [266] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 -- vwuz1=vwuz2 
    lda.z mulf8u_prepared.return
    sta.z mulf8u_prepared.return_1
    lda.z mulf8u_prepared.return+1
    sta.z mulf8u_prepared.return_1+1
    jmp __b2
    // mulf8u::@2
  __b2:
    // [267] (word) mulf8u::return#0 ← (word) mulf8u_prepared::return#2 -- vwuz1=vwuz2 
    lda.z mulf8u_prepared.return_1
    sta.z return
    lda.z mulf8u_prepared.return_1+1
    sta.z return+1
    jmp __breturn
    // mulf8u::@return
  __breturn:
    // [268] return 
    rts
}
  // muls8u
// Slow multiplication of unsigned bytes
// Calculate an unsigned multiplication by repeated addition
// muls8u(byte zp($68) a, byte zp($69) b)
muls8u: {
    .label return = $26
    .label m = $26
    .label i = $25
    .label a = $68
    .label b = $69
    .label return_1 = $6a
    // [269] if((byte) muls8u::a#0==(byte) 0) goto muls8u::@1 -- vbuz1_eq_0_then_la1 
    lda.z a
    cmp #0
    beq __b1_from_muls8u
    // [270] phi from muls8u to muls8u::@2 [phi:muls8u->muls8u::@2]
  __b2_from_muls8u:
    // [270] phi (word) muls8u::m#3 = (word) 0 [phi:muls8u->muls8u::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z m
    lda #>0
    sta.z m+1
    // [270] phi (byte) muls8u::i#2 = (byte) 0 [phi:muls8u->muls8u::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b2
    // muls8u::@2
  __b2:
    // [271] if((byte) muls8u::i#2!=(byte) muls8u::a#0) goto muls8u::@3 -- vbuz1_neq_vbuz2_then_la1 
    lda.z i
    cmp.z a
    bne __b3
    // [272] phi from muls8u::@2 to muls8u::@1 [phi:muls8u::@2->muls8u::@1]
  __b1_from___b2:
    // [272] phi (word) muls8u::return#0 = (word) muls8u::m#3 [phi:muls8u::@2->muls8u::@1#0] -- register_copy 
    jmp __b1
    // [272] phi from muls8u to muls8u::@1 [phi:muls8u->muls8u::@1]
  __b1_from_muls8u:
    // [272] phi (word) muls8u::return#0 = (word) 0 [phi:muls8u->muls8u::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z return
    lda #>0
    sta.z return+1
    jmp __b1
    // muls8u::@1
  __b1:
    jmp __breturn
    // muls8u::@return
  __breturn:
    // [273] return 
    rts
    // muls8u::@3
  __b3:
    // [274] (word) muls8u::m#1 ← (word) muls8u::m#3 + (byte) muls8u::b#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z b
    clc
    adc.z m
    sta.z m
    bcc !+
    inc.z m+1
  !:
    // [275] (byte) muls8u::i#1 ← ++ (byte) muls8u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [270] phi from muls8u::@3 to muls8u::@2 [phi:muls8u::@3->muls8u::@2]
  __b2_from___b3:
    // [270] phi (word) muls8u::m#3 = (word) muls8u::m#1 [phi:muls8u::@3->muls8u::@2#0] -- register_copy 
    // [270] phi (byte) muls8u::i#2 = (byte) muls8u::i#1 [phi:muls8u::@3->muls8u::@2#1] -- register_copy 
    jmp __b2
}
  // mulf_tables_cmp
// Compare the ASM-based mul tables with the KC-based mul tables
// Red screen on failure - green on success
mulf_tables_cmp: {
    .label asm_sqr = $2a
    .label kc_sqr = $28
    // [277] phi from mulf_tables_cmp to mulf_tables_cmp::@1 [phi:mulf_tables_cmp->mulf_tables_cmp::@1]
  __b1_from_mulf_tables_cmp:
    // [277] phi (byte*) mulf_tables_cmp::asm_sqr#2 = (const byte*) mula_sqr1_lo [phi:mulf_tables_cmp->mulf_tables_cmp::@1#0] -- pbuz1=pbuc1 
    lda #<mula_sqr1_lo
    sta.z asm_sqr
    lda #>mula_sqr1_lo
    sta.z asm_sqr+1
    // [277] phi (byte*) mulf_tables_cmp::kc_sqr#2 = (const byte*) mulf_sqr1_lo [phi:mulf_tables_cmp->mulf_tables_cmp::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo
    sta.z kc_sqr
    lda #>mulf_sqr1_lo
    sta.z kc_sqr+1
    jmp __b1
    // mulf_tables_cmp::@1
  __b1:
    // [278] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z kc_sqr+1
    cmp #>mulf_sqr1_lo+$200*4
    bcc __b2
    bne !+
    lda.z kc_sqr
    cmp #<mulf_sqr1_lo+$200*4
    bcc __b2
  !:
    // [279] phi from mulf_tables_cmp::@1 to mulf_tables_cmp::@3 [phi:mulf_tables_cmp::@1->mulf_tables_cmp::@3]
  __b3_from___b1:
    jmp __b3
    // mulf_tables_cmp::@3
  __b3:
    // [280] call print_str 
    // [110] phi from mulf_tables_cmp::@3 to print_str [phi:mulf_tables_cmp::@3->print_str]
  print_str_from___b3:
    // [110] phi (byte*) print_char_cursor#158 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str [phi:mulf_tables_cmp::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [281] phi from mulf_tables_cmp::@3 to mulf_tables_cmp::@6 [phi:mulf_tables_cmp::@3->mulf_tables_cmp::@6]
  __b6_from___b3:
    jmp __b6
    // mulf_tables_cmp::@6
  __b6:
    // [282] call print_ln 
    // [76] phi from mulf_tables_cmp::@6 to print_ln [phi:mulf_tables_cmp::@6->print_ln]
  print_ln_from___b6:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@6->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@6->print_ln#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    jmp __b7
    // mulf_tables_cmp::@7
  __b7:
    // [283] (byte*) print_char_cursor#231 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [284] phi from mulf_tables_cmp::@7 to mulf_tables_cmp::@return [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return]
  __breturn_from___b7:
    // [284] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#0 [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return#0] -- register_copy 
    // [284] phi (byte*) print_char_cursor#101 = (byte*) print_char_cursor#231 [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return#1] -- register_copy 
    jmp __breturn
    // mulf_tables_cmp::@return
  __breturn:
    // [285] return 
    rts
    // mulf_tables_cmp::@2
  __b2:
    // [286] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4 -- _deref_pbuz1_eq__deref_pbuz2_then_la1 
    ldy #0
    lda (kc_sqr),y
    ldy #0
    cmp (asm_sqr),y
    beq __b4
    jmp __b5
    // mulf_tables_cmp::@5
  __b5:
    // [287] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // [288] call print_str 
    // [110] phi from mulf_tables_cmp::@5 to print_str [phi:mulf_tables_cmp::@5->print_str]
  print_str_from___b5:
    // [110] phi (byte*) print_char_cursor#158 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str1 [phi:mulf_tables_cmp::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // mulf_tables_cmp::@8
  __b8:
    // [289] (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#2 -- vwuz1=vwuz2 
    lda.z asm_sqr
    sta.z print_uint.w
    lda.z asm_sqr+1
    sta.z print_uint.w+1
    // [290] call print_uint 
    // [96] phi from mulf_tables_cmp::@8 to print_uint [phi:mulf_tables_cmp::@8->print_uint]
  print_uint_from___b8:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@8->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#1 [phi:mulf_tables_cmp::@8->print_uint#1] -- register_copy 
    jsr print_uint
    // [291] phi from mulf_tables_cmp::@8 to mulf_tables_cmp::@9 [phi:mulf_tables_cmp::@8->mulf_tables_cmp::@9]
  __b9_from___b8:
    jmp __b9
    // mulf_tables_cmp::@9
  __b9:
    // [292] call print_str 
    // [110] phi from mulf_tables_cmp::@9 to print_str [phi:mulf_tables_cmp::@9->print_str]
  print_str_from___b9:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mulf_tables_cmp::@9->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str2 [phi:mulf_tables_cmp::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b10
    // mulf_tables_cmp::@10
  __b10:
    // [293] (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#2 -- vwuz1=vwuz2 
    lda.z kc_sqr
    sta.z print_uint.w
    lda.z kc_sqr+1
    sta.z print_uint.w+1
    // [294] call print_uint 
    // [96] phi from mulf_tables_cmp::@10 to print_uint [phi:mulf_tables_cmp::@10->print_uint]
  print_uint_from___b10:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@10->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#2 [phi:mulf_tables_cmp::@10->print_uint#1] -- register_copy 
    jsr print_uint
    // [284] phi from mulf_tables_cmp::@10 to mulf_tables_cmp::@return [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return]
  __breturn_from___b10:
    // [284] phi (byte*) print_line_cursor#10 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [284] phi (byte*) print_char_cursor#101 = (byte*) print_char_cursor#18 [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return#1] -- register_copy 
    jmp __breturn
    // mulf_tables_cmp::@4
  __b4:
    // [295] (byte*) mulf_tables_cmp::asm_sqr#1 ← ++ (byte*) mulf_tables_cmp::asm_sqr#2 -- pbuz1=_inc_pbuz1 
    inc.z asm_sqr
    bne !+
    inc.z asm_sqr+1
  !:
    // [296] (byte*) mulf_tables_cmp::kc_sqr#1 ← ++ (byte*) mulf_tables_cmp::kc_sqr#2 -- pbuz1=_inc_pbuz1 
    inc.z kc_sqr
    bne !+
    inc.z kc_sqr+1
  !:
    // [277] phi from mulf_tables_cmp::@4 to mulf_tables_cmp::@1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1]
  __b1_from___b4:
    // [277] phi (byte*) mulf_tables_cmp::asm_sqr#2 = (byte*) mulf_tables_cmp::asm_sqr#1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1#0] -- register_copy 
    // [277] phi (byte*) mulf_tables_cmp::kc_sqr#2 = (byte*) mulf_tables_cmp::kc_sqr#1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1#1] -- register_copy 
    jmp __b1
    str: .text "multiply tables match!"
    .byte 0
    str1: .text "multiply table mismatch at "
    .byte 0
    str2: .text " / "
    .byte 0
}
  // mulf_init_asm
// Initialize the multiplication tables using ASM code from
// http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
mulf_init_asm: {
    // Ensure the ASM tables are not detected as unused by the optimizer
    .label mem = $ff
    // asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta mula_sqr1_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta mula_sqr1_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    ldx #0
    ldy #$ff
  !:
    lda mula_sqr1_hi+1,x
    sta mula_sqr2_hi+$100,x
    lda mula_sqr1_hi,x
    sta mula_sqr2_hi,y
    lda mula_sqr1_lo+1,x
    sta mula_sqr2_lo+$100,x
    lda mula_sqr1_lo,x
    sta mula_sqr2_lo,y
    dey
    inx
    bne !-
    // [298] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr1_lo
    sta mem
    // [299] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr1_hi
    sta mem
    // [300] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr2_lo
    sta mem
    // [301] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr2_hi
    sta mem
    jmp __breturn
    // mulf_init_asm::@return
  __breturn:
    // [302] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label __1 = $84
    .label __4 = $85
    .label __5 = $86
    // x/2
    .label c = $2e
    // Counter used for determining x%2==0
    .label sqr1_hi = $2f
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $38
    .label sqr1_lo = $2c
    // sqr = (x*x)/4
    .label x_2 = $31
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = $35
    // Fill mulf_sqr2 = g(x) = f(x-255) : If x-255<0 then g(x)=f(255-x) (because x*x = -x*-x)
    // g(0) = f(255), g(1) = f(254), ..., g(254) = f(1), g(255) = f(0), g(256) = f(1), ..., g(510) = f(255), g(511) = f(256)
    .label x_255 = $34
    .label sqr2_lo = $32
    //Start with g(0)=f(255)
    .label dir = $37
    // [304] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [304] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x_2
    // [304] phi (byte*) mulf_init::sqr1_hi#2 = (const byte*) mulf_sqr1_hi+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [304] phi (word) mulf_init::sqr#4 = (word) 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    // [304] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [304] phi (byte*) mulf_init::sqr1_lo#2 = (const byte*) mulf_sqr1_lo+(byte) 1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    jmp __b1
    // mulf_init::@1
  __b1:
    // [305] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [306] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
  __b5_from___b1:
    // [306] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [306] phi (byte*) mulf_init::sqr2_hi#2 = (const byte*) mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [306] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuz1=vbuc1 
    lda #-1
    sta.z x_255
    // [306] phi (byte*) mulf_init::sqr2_lo#2 = (const byte*) mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    jmp __b5
    // mulf_init::@5
  __b5:
    // [307] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    jmp __b7
    // mulf_init::@7
  __b7:
    // [308] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [309] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [310] return 
    rts
    // mulf_init::@6
  __b6:
    // [311] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z x_255
    lda mulf_sqr1_lo,y
    ldy #0
    sta (sqr2_lo),y
    // [312] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z x_255
    lda mulf_sqr1_hi,y
    ldy #0
    sta (sqr2_hi),y
    // [313] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // [314] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x_255
    clc
    adc.z dir
    sta.z x_255
    // [315] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9 -- vbuz1_neq_0_then_la1 
    lda.z x_255
    cmp #0
    bne __b9_from___b6
    // [317] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
  __b8_from___b6:
    // [317] phi (byte) mulf_init::dir#4 = (byte) 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    jmp __b8
    // [316] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
  __b9_from___b6:
    jmp __b9
    // mulf_init::@9
  __b9:
    // [317] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
  __b8_from___b9:
    // [317] phi (byte) mulf_init::dir#4 = (byte) mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    jmp __b8
    // mulf_init::@8
  __b8:
    // [318] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [306] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
  __b5_from___b8:
    // [306] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [306] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [306] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [306] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // [319] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [320] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z c
    sta.z __1
    // [321] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3 -- vbuz1_neq_0_then_la1 
    lda.z __1
    cmp #0
    bne __b3_from___b2
    jmp __b4
    // mulf_init::@4
  __b4:
    // [322] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc.z x_2
    // [323] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [324] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [324] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [324] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    jmp __b3
    // mulf_init::@3
  __b3:
    // [325] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3 -- vbuz1=_lo_vwuz2 
    lda.z sqr
    sta.z __4
    // [326] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 -- _deref_pbuz1=vbuz2 
    lda.z __4
    ldy #0
    sta (sqr1_lo),y
    // [327] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3 -- vbuz1=_hi_vwuz2 
    lda.z sqr+1
    sta.z __5
    // [328] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuz2 
    lda.z __5
    ldy #0
    sta (sqr1_hi),y
    // [329] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // [330] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x_2
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // [331] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [304] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
  __b1_from___b3:
    // [304] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [304] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [304] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [304] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [304] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [333] call memset 
    // [335] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [334] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $3a
    // [336] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [336] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [337] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [338] return 
    rts
    // memset::@2
  __b2:
    // [339] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [340] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [336] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [336] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // ASM based multiplication tables
  // <(( x * x )/4)
  .align $100
  mula_sqr1_lo: .fill $200, 0
  // >(( x * x )/4)
  .align $100
  mula_sqr1_hi: .fill $200, 0
  // <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mula_sqr2_lo: .fill $200, 0
  // >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mula_sqr2_hi: .fill $200, 0
  str1: .text "*"
  .byte 0
  str2: .text " slow:"
  .byte 0
  str3: .text " / normal:"
  .byte 0
  str4: .text " / fast:"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) BG_COLOR) ← (byte) 5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] (byte*) print_char_cursor#192 ← (byte*) print_line_cursor#0 [ print_char_cursor#192 print_line_cursor#0 ] ( mul8s_compare:11 [ print_char_cursor#192 print_line_cursor#0 ] { { print_char_cursor#158 = print_char_cursor#192 } }  ) always clobbers reg byte a 
Statement [27] (signed word) muls8s::return#2 ← (signed word) muls8s::return#0 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::return#2 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::return#2 ] { { muls8s::a#0 = mul8s_compare::a#10 } { muls8s::b#0 = mul8s_compare::b#10 } { muls8s::return#0 = muls8s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ]
Statement [28] (signed word) mul8s_compare::ms#0 ← (signed word) muls8s::return#2 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [32] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s::return#2 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s::return#2 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [33] (signed word) mul8s_compare::mf#0 ← (signed word) mulf8s::return#2 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [37] (signed word) mul8s_compare::mn#0 ← (signed word)(word) mul8s::m#4 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [38] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@6 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [41] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@15 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_compare::ok#4 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_compare::ok#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ mul8s_compare::ok#3 mul8s_compare::ok#4 ]
Statement [45] *((const byte*) BG_COLOR) ← (byte) 2 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [48] (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#0 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 ] ( mul8s_compare:11 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:76 [ mul8s_error::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:77 [ mul8s_error::b#0 ]
Statement [49] (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#0 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 ] ( mul8s_compare:11 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [50] (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#0 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 ] ( mul8s_compare:11 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [53] (byte*) print_char_cursor#193 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#193 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#193 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } }  ) always clobbers reg byte a 
Statement [63] (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#0 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#1 print_char_cursor#1 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#1 print_char_cursor#1 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } }  ) always clobbers reg byte a 
Statement [67] (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#0 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#2 print_char_cursor#1 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#2 print_char_cursor#1 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } }  ) always clobbers reg byte a 
Statement [71] (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#0 [ print_line_cursor#0 print_sint::w#3 print_char_cursor#1 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 print_sint::w#3 print_char_cursor#1 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#24 + (byte) $28 [ print_line_cursor#0 print_char_cursor#138 ] ( mul8s_compare:11::print_ln:19 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8s_compare:11::mul8s_error:51::print_ln:74 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mul8u_compare:9::print_ln:238 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8u_compare:9::mul8u_error:229::print_ln:260 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mulf_tables_cmp:7::print_ln:282 [ print_line_cursor#0 print_char_cursor#138 ] { { print_char_cursor#1 = print_char_cursor#138 } }  ) always clobbers reg byte a 
Statement [79] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#138 ] ( mul8s_compare:11::print_ln:19 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8s_compare:11::mul8s_error:51::print_ln:74 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mul8u_compare:9::print_ln:238 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8u_compare:9::mul8u_error:229::print_ln:260 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mulf_tables_cmp:7::print_ln:282 [ print_line_cursor#0 print_char_cursor#138 ] { { print_char_cursor#1 = print_char_cursor#138 } }  ) always clobbers reg byte a 
Statement [82] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1 [ print_char_cursor#1 print_sint::w#4 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_sint::w#4 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:68 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#1 print_sint::w#4 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:72 [ print_line_cursor#0 print_char_cursor#1 print_sint::w#4 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [86] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6 [ print_char_cursor#18 print_uint::w#0 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_sint:68 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#18 print_uint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_sint:72 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [91] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#4 [ print_char_cursor#18 print_sint::w#0 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_sint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:68 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#18 print_sint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:72 [ print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [93] *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7 [ print_char_cursor#87 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64::print_char:84 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_char:84 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_char:84 [ print_line_cursor#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_char:90 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_char:90 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_char:90 [ print_line_cursor#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98::print_char:105 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98::print_char:105 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98::print_char:105 [ print_line_cursor#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98::print_char:105 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98::print_char:105 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98::print_char:105 [ print_line_cursor#10 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98::print_char:105 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98::print_char:105 [ print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100::print_char:105 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100::print_char:105 [ print_line_cursor#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100::print_char:105 [ print_line_cursor#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100::print_char:105 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100::print_char:105 [ print_line_cursor#10 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100::print_char:105 [ print_line_cursor#10 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100::print_char:105 [ mulf_tables_cmp::kc_sqr#2 print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100::print_char:105 [ print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123::print_char:105 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123::print_char:105 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242::print_char:105 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246::print_char:105 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98::print_char:108 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98::print_char:108 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98::print_char:108 [ print_line_cursor#0 print_uint::w#6 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98::print_char:108 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98::print_char:108 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98::print_char:108 [ print_line_cursor#10 print_uint::w#6 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98::print_char:108 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98::print_char:108 [ print_uint::w#6 print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100::print_char:108 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100::print_char:108 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100::print_char:108 [ print_line_cursor#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100::print_char:108 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100::print_char:108 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100::print_char:108 [ print_line_cursor#10 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100::print_char:108 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100::print_char:108 [ print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123::print_char:108 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123::print_char:108 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242::print_char:108 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246::print_char:108 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8s_compare:11::print_str:17::print_char:115 [ print_line_cursor#0 print_str::str#16 print_char_cursor#87 ] { { print_char_cursor#158 = print_char_cursor#192 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:54::print_char:115 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:58::print_char:115 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:62::print_char:115 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:66::print_char:115 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:70::print_char:115 [ print_line_cursor#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::print_str:236::print_char:115 [ print_line_cursor#10 print_str::str#16 print_char_cursor#87 ] { { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:240::print_char:115 [ print_line_cursor#10 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:244::print_char:115 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:248::print_char:115 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:252::print_char:115 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:256::print_char:115 [ print_line_cursor#10 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:280::print_char:115 [ print_str::str#16 print_char_cursor#87 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:288::print_char:115 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 print_str::str#16 print_char_cursor#87 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:292::print_char:115 [ mulf_tables_cmp::kc_sqr#2 print_str::str#16 print_char_cursor#87 ] { { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_char:120 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_char:120 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_char:126 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_char:126 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_char_cursor#1 = print_char_cursor#87 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:12 [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:77 [ mul8s_error::b#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:121 [ mul8u_error::b#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:76 [ mul8s_error::a#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:120 [ mul8u_error::a#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:17 [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
Statement [103] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4 [ print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98 [ print_line_cursor#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98 [ print_line_cursor#10 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98 [ print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100 [ print_line_cursor#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100 [ print_line_cursor#10 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100 [ print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:121 [ mul8u_error::b#0 ]
Statement [106] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f [ print_char_cursor#18 print_uchar::$2 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98 [ print_line_cursor#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98 [ print_line_cursor#10 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98 [ print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100 [ print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100 [ print_line_cursor#10 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100 [ print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  ) always clobbers reg byte a 
Statement [112] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2 [ print_char_cursor#1 print_str::str#16 ] ( mul8s_compare:11::print_str:17 [ print_line_cursor#0 print_char_cursor#1 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#192 } }  mul8s_compare:11::mul8s_error:51::print_str:54 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } }  mul8s_compare:11::mul8s_error:51::print_str:58 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_str:62 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_str:66 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_str:70 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::print_str:236 [ print_line_cursor#10 print_char_cursor#1 print_str::str#16 ] { { print_char_cursor#101 = print_char_cursor#158 } }  mul8u_compare:9::mul8u_error:229::print_str:240 [ print_line_cursor#10 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#101 = print_char_cursor#158 } }  mul8u_compare:9::mul8u_error:229::print_str:244 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::mul8u_error:229::print_str:248 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::mul8u_error:229::print_str:252 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::mul8u_error:229::print_str:256 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mulf_tables_cmp:7::print_str:280 [ print_char_cursor#1 print_str::str#16 ] { }  mulf_tables_cmp:7::print_str:288 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 print_char_cursor#1 print_str::str#16 ] { }  mulf_tables_cmp:7::print_str:292 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#1 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#18 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:120 [ mul8u_error::a#0 ]
Statement [114] (byte) print_char::ch#0 ← *((byte*) print_str::str#16) [ print_char_cursor#1 print_char::ch#0 print_str::str#16 ] ( mul8s_compare:11::print_str:17 [ print_line_cursor#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#192 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:54 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:58 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:62 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:66 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:70 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::print_str:236 [ print_line_cursor#10 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:240 [ print_line_cursor#10 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:244 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:248 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:252 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:256 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:280 [ print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:288 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:292 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  ) always clobbers reg byte a reg byte y 
Statement [127] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#3 [ print_char_cursor#18 print_schar::b#0 ] ( mul8s_compare:11::mul8s_error:51::print_schar:56 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_schar::b#0 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } }  mul8s_compare:11::mul8s_error:51::print_schar:60 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_schar::b#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [131] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8s::a#0 mul8s::b#0 mul8u::return#2 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::return#2 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ mul8s::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:73 [ mul8s::b#0 ]
Statement [132] (word) mul8s::m#0 ← (word) mul8u::return#2 [ mul8s::a#0 mul8s::b#0 mul8s::m#0 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8s::m#0 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [135] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#0 [ mul8s::a#0 mul8s::b#0 mul8s::m#0 mul8s::$11 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8s::m#0 mul8s::$11 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [140] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#0 [ mul8s::m#5 mul8s::$12 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::m#5 mul8s::$12 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [145] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( mul8s_compare:11::mul8s:36::mul8u:130 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::a#6 mul8u::mb#0 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  mul8u_compare:9::mul8u:213 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::a#6 mul8u::mb#0 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ]
Statement [149] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( mul8s_compare:11::mul8s:36::mul8u:130 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  mul8u_compare:9::mul8u:213 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [151] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( mul8s_compare:11::mul8s:36::mul8u:130 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  mul8u_compare:9::mul8u:213 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [160] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4 [ mulf8s::return#0 ] ( mul8s_compare:11::mulf8s:31 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s::return#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [164] (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#0 mulf8u_prepared::return#3 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8u_prepared::return#3 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::b#1 = mulf8u_prepared::b#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:93 [ mulf8s_prepared::b#0 ]
Statement [165] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#3 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [166] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [168] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [173] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA) [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:93 [ mulf8s_prepared::b#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ]
Statement [180] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL) [ mulf8u_prepared::return#0 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159::mulf8u_prepared:163 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::b#1 = mulf8u_prepared::b#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#3 } }  mul8u_compare:9::mulf8u:208::mulf8u_prepared:265 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u_prepared::return#0 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::return#0 = mulf8u::return#2 } { mulf8u_prepared::b#0 = mulf8u_prepared::b#2 mulf8u::b#0 mul8u_compare::b#10 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:67 [ mulf8s::b#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:111 [ mulf8u::b#0 ]
Statement [192] (signed word) muls8s::m#1 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#0 [ muls8s::a#0 muls8s::b#0 muls8s::j#2 muls8s::m#1 ] ( mul8s_compare:11::muls8s:26 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::a#0 muls8s::b#0 muls8s::j#2 muls8s::m#1 ] { { muls8s::a#0 = mul8s_compare::a#10 } { muls8s::b#0 = mul8s_compare::b#10 } { muls8s::return#0 = muls8s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:60 [ muls8s::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:61 [ muls8s::b#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ muls8s::j#2 muls8s::j#1 ]
Statement [196] (signed word) muls8s::m#2 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#0 [ muls8s::a#0 muls8s::b#0 muls8s::i#2 muls8s::m#2 ] ( mul8s_compare:11::muls8s:26 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::a#0 muls8s::b#0 muls8s::i#2 muls8s::m#2 ] { { muls8s::a#0 = mul8s_compare::a#10 } { muls8s::b#0 = mul8s_compare::b#10 } { muls8s::return#0 = muls8s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ muls8s::i#2 muls8s::i#1 ]
Statement [204] (word) muls8u::return#2 ← (word) muls8u::return#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 muls8u::return#2 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 muls8u::return#2 ] { { muls8u::a#0 = mul8u_compare::a#7 } { muls8u::b#0 = mul8u_compare::b#10 } { muls8u::return#0 = muls8u::return#2 } }  ) always clobbers reg byte a 
Statement [205] (word) mul8u_compare::ms#0 ← (word) muls8u::return#2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::b#0 = mul8u_compare::b#10 } { mulf8u::return#0 = mulf8u::return#2 } }  ) always clobbers reg byte a 
Statement [209] (word) mulf8u::return#2 ← (word) mulf8u::return#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u::return#2 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u::return#2 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::b#0 = mul8u_compare::b#10 } { mulf8u::return#0 = mulf8u::return#2 } }  ) always clobbers reg byte a 
Statement [210] (word) mul8u_compare::mf#0 ← (word) mulf8u::return#2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [214] (word) mul8u::return#3 ← (word) mul8u::res#2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::return#3 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::return#3 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [215] (word) mul8u_compare::mn#0 ← (word) mul8u::return#3 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [216] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [219] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@14 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_compare::ok#4 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_compare::ok#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ mul8u_compare::ok#3 mul8u_compare::ok#4 ]
Statement [223] *((const byte*) BG_COLOR) ← (byte) 2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [226] (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [227] (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [228] (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [249] (word) print_uint::w#3 ← (word) mul8u_error::ms#0 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#3 mul8u_error::mn#0 mul8u_error::mf#0 ] ( mul8u_compare:9::mul8u_error:229 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#3 mul8u_error::mn#0 mul8u_error::mf#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [253] (word) print_uint::w#4 ← (word) mul8u_error::mn#0 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#4 mul8u_error::mf#0 ] ( mul8u_compare:9::mul8u_error:229 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#4 mul8u_error::mf#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [257] (word) print_uint::w#5 ← (word) mul8u_error::mf#0 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#5 ] ( mul8u_compare:9::mul8u_error:229 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#5 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [266] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8u_prepared::return#2 ] ( mul8u_compare:9::mulf8u:208 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u_prepared::return#2 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::return#0 = mulf8u::return#2 } { mulf8u_prepared::b#0 = mulf8u_prepared::b#2 mulf8u::b#0 mul8u_compare::b#10 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [267] (word) mulf8u::return#0 ← (word) mulf8u_prepared::return#2 [ mulf8u::return#0 ] ( mul8u_compare:9::mulf8u:208 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u::return#0 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::b#0 = mul8u_compare::b#10 } { mulf8u::return#0 = mulf8u::return#2 } }  ) always clobbers reg byte a 
Statement [274] (word) muls8u::m#1 ← (word) muls8u::m#3 + (byte) muls8u::b#0 [ muls8u::a#0 muls8u::b#0 muls8u::i#2 muls8u::m#1 ] ( mul8u_compare:9::muls8u:203 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 muls8u::a#0 muls8u::b#0 muls8u::i#2 muls8u::m#1 ] { { muls8u::a#0 = mul8u_compare::a#7 } { muls8u::b#0 = mul8u_compare::b#10 } { muls8u::return#0 = muls8u::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:104 [ muls8u::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:105 [ muls8u::b#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:37 [ muls8u::i#2 muls8u::i#1 ]
Statement [278] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] ( mulf_tables_cmp:7 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] { }  ) always clobbers reg byte a 
Statement [283] (byte*) print_char_cursor#231 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 print_char_cursor#231 ] ( mulf_tables_cmp:7 [ print_line_cursor#0 print_char_cursor#231 ] { }  ) always clobbers reg byte a 
Statement [286] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] ( mulf_tables_cmp:7 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [287] *((const byte*) BG_COLOR) ← (byte) 2 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] ( mulf_tables_cmp:7 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] { }  ) always clobbers reg byte a 
Statement [289] (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#2 [ print_char_cursor#1 print_uint::w#1 mulf_tables_cmp::kc_sqr#2 ] ( mulf_tables_cmp:7 [ print_char_cursor#1 print_uint::w#1 mulf_tables_cmp::kc_sqr#2 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [293] (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#2 [ print_char_cursor#1 print_uint::w#2 ] ( mulf_tables_cmp:7 [ print_char_cursor#1 print_uint::w#2 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  } always clobbers reg byte a reg byte x reg byte y 
Statement [298] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [299] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [300] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [301] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [305] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:49 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [307] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [308] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) [ ] ( mulf_init:3 [ ] { }  ) always clobbers reg byte a 
Statement [309] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) [ ] ( mulf_init:3 [ ] { }  ) always clobbers reg byte a 
Statement [311] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [312] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [314] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [320] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [326] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:49 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [328] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [330] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [337] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:333 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [339] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:333 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [0] *((const byte*) BG_COLOR) ← (byte) 5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] (byte*) print_char_cursor#192 ← (byte*) print_line_cursor#0 [ print_char_cursor#192 print_line_cursor#0 ] ( mul8s_compare:11 [ print_char_cursor#192 print_line_cursor#0 ] { { print_char_cursor#158 = print_char_cursor#192 } }  ) always clobbers reg byte a 
Statement [27] (signed word) muls8s::return#2 ← (signed word) muls8s::return#0 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::return#2 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::return#2 ] { { muls8s::a#0 = mul8s_compare::a#10 } { muls8s::b#0 = mul8s_compare::b#10 } { muls8s::return#0 = muls8s::return#2 } }  ) always clobbers reg byte a 
Statement [28] (signed word) mul8s_compare::ms#0 ← (signed word) muls8s::return#2 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [32] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s::return#2 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s::return#2 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [33] (signed word) mul8s_compare::mf#0 ← (signed word) mulf8s::return#2 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [37] (signed word) mul8s_compare::mn#0 ← (signed word)(word) mul8s::m#4 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [38] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@6 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [41] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@15 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_compare::ok#4 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_compare::ok#4 ] { }  ) always clobbers reg byte a 
Statement [45] *((const byte*) BG_COLOR) ← (byte) 2 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] ( mul8s_compare:11 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s_compare::mn#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [48] (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#0 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 ] ( mul8s_compare:11 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_compare::mn#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [49] (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#0 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 ] ( mul8s_compare:11 [ print_line_cursor#0 mul8s_compare::mf#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [50] (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#0 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 ] ( mul8s_compare:11 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [53] (byte*) print_char_cursor#193 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#193 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#193 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } }  ) always clobbers reg byte a 
Statement [63] (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#0 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#1 print_char_cursor#1 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#1 print_char_cursor#1 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } }  ) always clobbers reg byte a 
Statement [67] (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#0 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#2 print_char_cursor#1 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#2 print_char_cursor#1 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } }  ) always clobbers reg byte a 
Statement [71] (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#0 [ print_line_cursor#0 print_sint::w#3 print_char_cursor#1 ] ( mul8s_compare:11::mul8s_error:51 [ print_line_cursor#0 print_sint::w#3 print_char_cursor#1 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#24 + (byte) $28 [ print_line_cursor#0 print_char_cursor#138 ] ( mul8s_compare:11::print_ln:19 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8s_compare:11::mul8s_error:51::print_ln:74 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mul8u_compare:9::print_ln:238 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8u_compare:9::mul8u_error:229::print_ln:260 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mulf_tables_cmp:7::print_ln:282 [ print_line_cursor#0 print_char_cursor#138 ] { { print_char_cursor#1 = print_char_cursor#138 } }  ) always clobbers reg byte a 
Statement [79] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#138 ] ( mul8s_compare:11::print_ln:19 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8s_compare:11::mul8s_error:51::print_ln:74 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_line_cursor#0 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mul8u_compare:9::print_ln:238 [ print_line_cursor#0 print_char_cursor#138 ] { { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#1 = print_char_cursor#138 } }  mul8u_compare:9::mul8u_error:229::print_ln:260 [ print_line_cursor#0 print_char_cursor#138 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_line_cursor#10 = print_line_cursor#47 } { print_char_cursor#138 = print_char_cursor#18 } }  mulf_tables_cmp:7::print_ln:282 [ print_line_cursor#0 print_char_cursor#138 ] { { print_char_cursor#1 = print_char_cursor#138 } }  ) always clobbers reg byte a 
Statement [82] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1 [ print_char_cursor#1 print_sint::w#4 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_sint::w#4 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:68 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#1 print_sint::w#4 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:72 [ print_line_cursor#0 print_char_cursor#1 print_sint::w#4 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [86] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6 [ print_char_cursor#18 print_uint::w#0 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_sint:68 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#18 print_uint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_sint:72 [ print_line_cursor#0 print_char_cursor#18 print_uint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 } }  ) always clobbers reg byte a 
Statement [91] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#4 [ print_char_cursor#18 print_sint::w#0 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_sint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:68 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#18 print_sint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } }  mul8s_compare:11::mul8s_error:51::print_sint:72 [ print_line_cursor#0 print_char_cursor#18 print_sint::w#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [93] *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7 [ print_char_cursor#87 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64::print_char:84 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_char:84 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_char:84 [ print_line_cursor#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_char:90 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_char:90 [ print_line_cursor#0 mul8s_error::mf#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_char:90 [ print_line_cursor#0 print_sint::w#4 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98::print_char:105 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98::print_char:105 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98::print_char:105 [ print_line_cursor#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98::print_char:105 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98::print_char:105 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98::print_char:105 [ print_line_cursor#10 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98::print_char:105 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98::print_char:105 [ print_uint::w#6 print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100::print_char:105 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100::print_char:105 [ print_line_cursor#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100::print_char:105 [ print_line_cursor#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100::print_char:105 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100::print_char:105 [ print_line_cursor#10 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100::print_char:105 [ print_line_cursor#10 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100::print_char:105 [ mulf_tables_cmp::kc_sqr#2 print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100::print_char:105 [ print_uchar::b#5 print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123::print_char:105 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123::print_char:105 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242::print_char:105 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246::print_char:105 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_uchar::b#5 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98::print_char:108 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98::print_char:108 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98::print_char:108 [ print_line_cursor#0 print_uint::w#6 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98::print_char:108 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98::print_char:108 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98::print_char:108 [ print_line_cursor#10 print_uint::w#6 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98::print_char:108 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98::print_char:108 [ print_uint::w#6 print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100::print_char:108 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100::print_char:108 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100::print_char:108 [ print_line_cursor#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100::print_char:108 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100::print_char:108 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100::print_char:108 [ print_line_cursor#10 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100::print_char:108 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#87 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100::print_char:108 [ print_char_cursor#87 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123::print_char:108 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123::print_char:108 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242::print_char:108 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246::print_char:108 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8s_compare:11::print_str:17::print_char:115 [ print_line_cursor#0 print_str::str#16 print_char_cursor#87 ] { { print_char_cursor#158 = print_char_cursor#192 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:54::print_char:115 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:58::print_char:115 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:62::print_char:115 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:66::print_char:115 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:70::print_char:115 [ print_line_cursor#0 mul8s_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::print_str:236::print_char:115 [ print_line_cursor#10 print_str::str#16 print_char_cursor#87 ] { { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:240::print_char:115 [ print_line_cursor#10 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:244::print_char:115 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:248::print_char:115 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:252::print_char:115 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:256::print_char:115 [ print_line_cursor#10 mul8u_error::mf#0 print_str::str#16 print_char_cursor#87 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:280::print_char:115 [ print_str::str#16 print_char_cursor#87 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:288::print_char:115 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 print_str::str#16 print_char_cursor#87 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:292::print_char:115 [ mulf_tables_cmp::kc_sqr#2 print_str::str#16 print_char_cursor#87 ] { { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_char:120 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_char:120 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_char:126 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_char:126 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_schar::b#3 print_char_cursor#87 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_char_cursor#1 = print_char_cursor#87 } }  ) always clobbers reg byte y 
Statement [103] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4 [ print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98 [ print_line_cursor#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98 [ print_line_cursor#10 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98 [ print_uint::w#6 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100 [ print_line_cursor#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100 [ print_line_cursor#10 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100 [ print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#146 print_uchar::b#5 print_uchar::$0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 print_char_cursor#87 } { print_char::ch#5 = print_char::ch#7 } }  ) always clobbers reg byte a 
Statement [106] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f [ print_char_cursor#18 print_uchar::$2 ] ( mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:98 [ print_line_cursor#0 mul8s_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:98 [ print_line_cursor#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:98 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:98 [ print_line_cursor#10 mul8u_error::mf#0 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:98 [ print_line_cursor#10 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:98 [ mulf_tables_cmp::kc_sqr#2 print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:98 [ print_uint::w#6 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 print_char_cursor#146 } { print_uchar::b#1 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_sint:64::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#1 = print_sint::w#4 mul8s_error::ms#0 mul8s_compare::ms#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:68::print_uint:87::print_uchar:100 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_sint::w#2 = print_sint::w#4 mul8s_error::mn#0 mul8s_compare::mn#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_sint:72::print_uint:87::print_uchar:100 [ print_line_cursor#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { print_sint::w#3 = print_sint::w#4 mul8s_error::mf#0 mul8s_compare::mf#0 } { print_uint::w#0 = print_uint::w#6 } { print_char_cursor#145 = print_char_cursor#18 print_char_cursor#146 print_char_cursor#87 } { print_uchar::b#2 = print_uchar::b#5 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:250::print_uchar:100 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:254::print_uchar:100 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uint:258::print_uchar:100 [ print_line_cursor#10 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:290::print_uchar:100 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mulf_tables_cmp:7::print_uint:294::print_uchar:100 [ print_char_cursor#18 print_uchar::$2 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } { print_uchar::b#2 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:56::print_uchar:123 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8s_compare:11::mul8s_error:51::print_schar:60::print_uchar:123 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } { print_uchar::b#0 = print_uchar::b#5 } { print_char_cursor#146 = print_char_cursor#18 print_char_cursor#87 } { print_char::ch#6 = print_char::ch#7 } }  mul8u_compare:9::mul8u_error:229::print_uchar:242 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#3 = print_uchar::b#5 mul8u_error::a#0 mul8u_compare::a#7 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_uchar:246 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#18 print_uchar::$2 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uchar::b#4 = print_uchar::b#5 mul8u_error::b#0 mul8u_compare::b#10 } { print_char_cursor#1 = print_char_cursor#146 } { print_char::ch#6 = print_char::ch#7 } { print_char_cursor#18 = print_char_cursor#87 } }  ) always clobbers reg byte a 
Statement [112] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2 [ print_char_cursor#1 print_str::str#16 ] ( mul8s_compare:11::print_str:17 [ print_line_cursor#0 print_char_cursor#1 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#192 } }  mul8s_compare:11::mul8s_error:51::print_str:54 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } }  mul8s_compare:11::mul8s_error:51::print_str:58 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_str:62 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_str:66 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8s_compare:11::mul8s_error:51::print_str:70 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::print_str:236 [ print_line_cursor#10 print_char_cursor#1 print_str::str#16 ] { { print_char_cursor#101 = print_char_cursor#158 } }  mul8u_compare:9::mul8u_error:229::print_str:240 [ print_line_cursor#10 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#101 = print_char_cursor#158 } }  mul8u_compare:9::mul8u_error:229::print_str:244 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::mul8u_error:229::print_str:248 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::mul8u_error:229::print_str:252 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mul8u_compare:9::mul8u_error:229::print_str:256 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#1 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } }  mulf_tables_cmp:7::print_str:280 [ print_char_cursor#1 print_str::str#16 ] { }  mulf_tables_cmp:7::print_str:288 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 print_char_cursor#1 print_str::str#16 ] { }  mulf_tables_cmp:7::print_str:292 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#1 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#18 } }  ) always clobbers reg byte a reg byte y 
Statement [114] (byte) print_char::ch#0 ← *((byte*) print_str::str#16) [ print_char_cursor#1 print_char::ch#0 print_str::str#16 ] ( mul8s_compare:11::print_str:17 [ print_line_cursor#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#192 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:54 [ print_line_cursor#0 mul8s_error::a#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#193 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:58 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:62 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:66 [ print_line_cursor#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8s_compare:11::mul8s_error:51::print_str:70 [ print_line_cursor#0 mul8s_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::print_str:236 [ print_line_cursor#10 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:240 [ print_line_cursor#10 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#101 = print_char_cursor#158 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:244 [ print_line_cursor#10 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:248 [ print_line_cursor#10 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:252 [ print_line_cursor#10 mul8u_error::mn#0 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mul8u_compare:9::mul8u_error:229::print_str:256 [ print_line_cursor#10 mul8u_error::mf#0 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:280 [ print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:288 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  mulf_tables_cmp:7::print_str:292 [ mulf_tables_cmp::kc_sqr#2 print_char_cursor#1 print_char::ch#0 print_str::str#16 ] { { print_char_cursor#158 = print_char_cursor#18 } { print_char::ch#0 = print_char::ch#7 } { print_char_cursor#1 = print_char_cursor#87 } }  ) always clobbers reg byte a reg byte y 
Statement [127] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#3 [ print_char_cursor#18 print_schar::b#0 ] ( mul8s_compare:11::mul8s_error:51::print_schar:56 [ print_line_cursor#0 mul8s_error::b#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_schar::b#0 ] { { mul8s_error::b#0 = mul8s_compare::b#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#1 = print_schar::b#3 mul8s_error::a#0 mul8s_compare::a#10 } }  mul8s_compare:11::mul8s_error:51::print_schar:60 [ print_line_cursor#0 mul8s_error::ms#0 mul8s_error::mn#0 mul8s_error::mf#0 print_char_cursor#18 print_schar::b#0 ] { { mul8s_error::a#0 = mul8s_compare::a#10 } { mul8s_error::ms#0 = mul8s_compare::ms#0 } { mul8s_error::mn#0 = mul8s_compare::mn#0 } { mul8s_error::mf#0 = mul8s_compare::mf#0 } { print_schar::b#2 = print_schar::b#3 mul8s_error::b#0 mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [131] (word) mul8u::return#2 ← (word) mul8u::res#2 [ mul8s::a#0 mul8s::b#0 mul8u::return#2 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::return#2 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [132] (word) mul8s::m#0 ← (word) mul8u::return#2 [ mul8s::a#0 mul8s::b#0 mul8s::m#0 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8s::m#0 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [135] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#0 [ mul8s::a#0 mul8s::b#0 mul8s::m#0 mul8s::$11 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8s::m#0 mul8s::$11 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [140] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#0 [ mul8s::m#5 mul8s::$12 ] ( mul8s_compare:11::mul8s:36 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::m#5 mul8s::$12 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } }  ) always clobbers reg byte a 
Statement [145] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 [ mul8u::a#6 mul8u::mb#0 ] ( mul8s_compare:11::mul8s:36::mul8u:130 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::a#6 mul8u::mb#0 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  mul8u_compare:9::mul8u:213 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::a#6 mul8u::mb#0 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [149] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( mul8s_compare:11::mul8s:36::mul8u:130 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  mul8u_compare:9::mul8u:213 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [151] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( mul8s_compare:11::mul8s:36::mul8u:130 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mul8s_compare::mf#0 mul8s::a#0 mul8s::b#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8s::a#0 = mul8s_compare::a#10 } { mul8s::b#0 = mul8s_compare::b#10 } { mul8u::b#0 = mul8u::b#2 } { mul8u::a#1 = mul8u::a#6 } { mul8u::return#2 = mul8u::res#2 } }  mul8u_compare:9::mul8u:213 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [160] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4 [ mulf8s::return#0 ] ( mul8s_compare:11::mulf8s:31 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s::return#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [164] (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#0 [ mulf8s_prepared::b#0 mulf8u_prepared::return#3 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8u_prepared::return#3 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::b#1 = mulf8u_prepared::b#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#3 } }  ) always clobbers reg byte a 
Statement [165] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#3 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [166] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [168] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0 [ mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement [173] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA) [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [180] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL) [ mulf8u_prepared::return#0 ] ( mul8s_compare:11::mulf8s:31::mulf8s_prepared:159::mulf8u_prepared:163 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 mul8s_compare::ms#0 mulf8s_prepared::b#0 mulf8u_prepared::return#0 ] { { mulf8s::a#0 = mul8s_compare::a#10 } { mulf8s::b#0 = mul8s_compare::b#10 mulf8s_prepared::b#0 } { mulf8s::return#0 = mulf8s::return#2 } { mulf8u_prepared::b#1 = mulf8u_prepared::b#2 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#3 } }  mul8u_compare:9::mulf8u:208::mulf8u_prepared:265 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u_prepared::return#0 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::return#0 = mulf8u::return#2 } { mulf8u_prepared::b#0 = mulf8u_prepared::b#2 mulf8u::b#0 mul8u_compare::b#10 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [192] (signed word) muls8s::m#1 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#0 [ muls8s::a#0 muls8s::b#0 muls8s::j#2 muls8s::m#1 ] ( mul8s_compare:11::muls8s:26 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::a#0 muls8s::b#0 muls8s::j#2 muls8s::m#1 ] { { muls8s::a#0 = mul8s_compare::a#10 } { muls8s::b#0 = mul8s_compare::b#10 } { muls8s::return#0 = muls8s::return#2 } }  ) always clobbers reg byte a 
Statement [196] (signed word) muls8s::m#2 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#0 [ muls8s::a#0 muls8s::b#0 muls8s::i#2 muls8s::m#2 ] ( mul8s_compare:11::muls8s:26 [ mul8s_compare::a#10 print_line_cursor#0 mul8s_compare::b#10 muls8s::a#0 muls8s::b#0 muls8s::i#2 muls8s::m#2 ] { { muls8s::a#0 = mul8s_compare::a#10 } { muls8s::b#0 = mul8s_compare::b#10 } { muls8s::return#0 = muls8s::return#2 } }  ) always clobbers reg byte a 
Statement [204] (word) muls8u::return#2 ← (word) muls8u::return#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 muls8u::return#2 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 muls8u::return#2 ] { { muls8u::a#0 = mul8u_compare::a#7 } { muls8u::b#0 = mul8u_compare::b#10 } { muls8u::return#0 = muls8u::return#2 } }  ) always clobbers reg byte a 
Statement [205] (word) mul8u_compare::ms#0 ← (word) muls8u::return#2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::b#0 = mul8u_compare::b#10 } { mulf8u::return#0 = mulf8u::return#2 } }  ) always clobbers reg byte a 
Statement [209] (word) mulf8u::return#2 ← (word) mulf8u::return#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u::return#2 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u::return#2 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::b#0 = mul8u_compare::b#10 } { mulf8u::return#0 = mulf8u::return#2 } }  ) always clobbers reg byte a 
Statement [210] (word) mul8u_compare::mf#0 ← (word) mulf8u::return#2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [214] (word) mul8u::return#3 ← (word) mul8u::res#2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::return#3 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u::return#3 ] { { mul8u::b#1 = mul8u::b#2 mul8u_compare::b#10 } { mul8u::a#2 = mul8u::a#6 mul8u_compare::a#7 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [215] (word) mul8u_compare::mn#0 ← (word) mul8u::return#3 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [216] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] { }  ) always clobbers reg byte a 
Statement [219] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@14 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_compare::ok#4 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_compare::ok#4 ] { }  ) always clobbers reg byte a 
Statement [223] *((const byte*) BG_COLOR) ← (byte) 2 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mul8u_compare::mf#0 mul8u_compare::mn#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [226] (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_compare::mn#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [227] (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::mf#0 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [228] (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#0 [ print_line_cursor#10 print_char_cursor#101 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 ] ( mul8u_compare:9 [ print_line_cursor#10 print_char_cursor#101 mul8u_error::a#0 mul8u_error::b#0 mul8u_error::ms#0 mul8u_error::mn#0 mul8u_error::mf#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } }  ) always clobbers reg byte a 
Statement [249] (word) print_uint::w#3 ← (word) mul8u_error::ms#0 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#3 mul8u_error::mn#0 mul8u_error::mf#0 ] ( mul8u_compare:9::mul8u_error:229 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#3 mul8u_error::mn#0 mul8u_error::mf#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#3 = print_uint::w#6 mul8u_error::ms#0 mul8u_compare::ms#0 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [253] (word) print_uint::w#4 ← (word) mul8u_error::mn#0 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#4 mul8u_error::mf#0 ] ( mul8u_compare:9::mul8u_error:229 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#4 mul8u_error::mf#0 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mf#0 = mul8u_compare::mf#0 } { print_uint::w#4 = print_uint::w#6 mul8u_error::mn#0 mul8u_compare::mn#0 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [257] (word) print_uint::w#5 ← (word) mul8u_error::mf#0 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#5 ] ( mul8u_compare:9::mul8u_error:229 [ print_char_cursor#1 print_line_cursor#10 print_uint::w#5 ] { { mul8u_error::a#0 = mul8u_compare::a#7 } { mul8u_error::b#0 = mul8u_compare::b#10 } { mul8u_error::ms#0 = mul8u_compare::ms#0 } { mul8u_error::mn#0 = mul8u_compare::mn#0 } { print_uint::w#5 = print_uint::w#6 mul8u_error::mf#0 mul8u_compare::mf#0 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [266] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0 [ mulf8u_prepared::return#2 ] ( mul8u_compare:9::mulf8u:208 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u_prepared::return#2 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::return#0 = mulf8u::return#2 } { mulf8u_prepared::b#0 = mulf8u_prepared::b#2 mulf8u::b#0 mul8u_compare::b#10 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [267] (word) mulf8u::return#0 ← (word) mulf8u_prepared::return#2 [ mulf8u::return#0 ] ( mul8u_compare:9::mulf8u:208 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 mul8u_compare::ms#0 mulf8u::return#0 ] { { mulf8u::a#0 = mul8u_compare::a#7 } { mulf8u::b#0 = mul8u_compare::b#10 } { mulf8u::return#0 = mulf8u::return#2 } }  ) always clobbers reg byte a 
Statement [274] (word) muls8u::m#1 ← (word) muls8u::m#3 + (byte) muls8u::b#0 [ muls8u::a#0 muls8u::b#0 muls8u::i#2 muls8u::m#1 ] ( mul8u_compare:9::muls8u:203 [ print_line_cursor#10 print_char_cursor#101 mul8u_compare::a#7 mul8u_compare::b#10 muls8u::a#0 muls8u::b#0 muls8u::i#2 muls8u::m#1 ] { { muls8u::a#0 = mul8u_compare::a#7 } { muls8u::b#0 = mul8u_compare::b#10 } { muls8u::return#0 = muls8u::return#2 } }  ) always clobbers reg byte a 
Statement [278] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] ( mulf_tables_cmp:7 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] { }  ) always clobbers reg byte a 
Statement [283] (byte*) print_char_cursor#231 ← (byte*) print_line_cursor#0 [ print_line_cursor#0 print_char_cursor#231 ] ( mulf_tables_cmp:7 [ print_line_cursor#0 print_char_cursor#231 ] { }  ) always clobbers reg byte a 
Statement [286] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] ( mulf_tables_cmp:7 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [287] *((const byte*) BG_COLOR) ← (byte) 2 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] ( mulf_tables_cmp:7 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::asm_sqr#2 ] { }  ) always clobbers reg byte a 
Statement [289] (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#2 [ print_char_cursor#1 print_uint::w#1 mulf_tables_cmp::kc_sqr#2 ] ( mulf_tables_cmp:7 [ print_char_cursor#1 print_uint::w#1 mulf_tables_cmp::kc_sqr#2 ] { { print_uint::w#1 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement [293] (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#2 [ print_char_cursor#1 print_uint::w#2 ] ( mulf_tables_cmp:7 [ print_char_cursor#1 print_uint::w#2 ] { { print_uint::w#2 = print_uint::w#6 } { print_char_cursor#1 = print_char_cursor#145 } }  ) always clobbers reg byte a 
Statement asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  } always clobbers reg byte a reg byte x reg byte y 
Statement [298] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [299] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [300] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [301] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi) [ ] ( mulf_init_asm:5 [ ] { }  ) always clobbers reg byte a 
Statement [305] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Statement [307] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Statement [308] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) [ ] ( mulf_init:3 [ ] { }  ) always clobbers reg byte a 
Statement [309] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) [ ] ( mulf_init:3 [ ] { }  ) always clobbers reg byte a 
Statement [311] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [312] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [314] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:3 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [320] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [326] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [328] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [330] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:3 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [337] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:333 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [339] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:333 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ] : zp[1]:2 , reg byte y , 
Potential registers zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ] : zp[1]:3 , reg byte y , 
Potential registers zp[1]:4 [ mul8s_compare::ok#3 mul8s_compare::ok#4 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:10 [ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ print_str::str#16 print_str::str#19 print_str::str#0 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ] : zp[1]:17 , reg byte a , reg byte x , 
Potential registers zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ mul8u::b#2 mul8u::b#0 mul8u::b#1 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] : zp[1]:21 , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ muls8s::j#2 muls8s::j#1 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ muls8s::i#2 muls8s::i#1 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ] : zp[1]:34 , reg byte y , 
Potential registers zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ] : zp[1]:35 , reg byte y , 
Potential registers zp[1]:36 [ mul8u_compare::ok#3 mul8u_compare::ok#4 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ muls8u::i#2 muls8u::i#1 ] : zp[1]:37 , reg byte x , reg byte y , 
Potential registers zp[2]:38 [ muls8u::return#0 muls8u::m#3 muls8u::m#1 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp[2]:44 , 
Potential registers zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ] : zp[1]:46 , reg byte x , 
Potential registers zp[2]:47 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp[2]:47 , 
Potential registers zp[1]:49 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp[1]:49 , reg byte x , 
Potential registers zp[2]:50 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp[2]:50 , 
Potential registers zp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp[1]:52 , reg byte x , 
Potential registers zp[2]:53 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp[2]:53 , 
Potential registers zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ] : zp[1]:55 , reg byte x , 
Potential registers zp[2]:56 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ memset::dst#2 memset::dst#1 ] : zp[2]:58 , 
Potential registers zp[1]:60 [ muls8s::a#0 ] : zp[1]:60 , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ muls8s::b#0 ] : zp[1]:61 , reg byte x , reg byte y , 
Potential registers zp[2]:62 [ muls8s::return#2 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ mul8s_compare::ms#0 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ mulf8s::a#0 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ mulf8s::b#0 ] : zp[1]:67 , reg byte x , reg byte y , 
Potential registers zp[2]:68 [ mulf8s::return#2 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ mul8s_compare::mf#0 ] : zp[2]:70 , 
Potential registers zp[1]:72 [ mul8s::a#0 ] : zp[1]:72 , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ mul8s::b#0 ] : zp[1]:73 , reg byte x , reg byte y , 
Potential registers zp[2]:74 [ mul8s_compare::mn#0 ] : zp[2]:74 , 
Potential registers zp[1]:76 [ mul8s_error::a#0 ] : zp[1]:76 , reg byte x , 
Potential registers zp[1]:77 [ mul8s_error::b#0 ] : zp[1]:77 , reg byte x , 
Potential registers zp[2]:78 [ mul8s_error::ms#0 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ mul8s_error::mn#0 ] : zp[2]:80 , 
Potential registers zp[2]:82 [ mul8s_error::mf#0 ] : zp[2]:82 , 
Potential registers zp[1]:84 [ print_uchar::$0 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ print_uchar::$2 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:86 [ mul8u::return#2 ] : zp[2]:86 , 
Potential registers zp[1]:88 [ mul8s::$6 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ mul8s::$11 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ mul8s::$9 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ mul8s::$12 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:92 [ mul8u::$1 ] : zp[1]:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:93 [ mulf8s_prepared::b#0 ] : zp[1]:93 , reg byte y , 
Potential registers zp[2]:94 [ mulf8s::return#0 ] : zp[2]:94 , 
Potential registers zp[2]:96 [ mulf8u_prepared::return#3 ] : zp[2]:96 , 
Potential registers zp[1]:98 [ mulf8s_prepared::$6 ] : zp[1]:98 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:99 [ mulf8s_prepared::$11 ] : zp[1]:99 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:100 [ mulf8s_prepared::$9 ] : zp[1]:100 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:101 [ mulf8s_prepared::$12 ] : zp[1]:101 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:102 [ mulf8u_prepared::return#0 ] : zp[2]:102 , 
Potential registers zp[1]:104 [ muls8u::a#0 ] : zp[1]:104 , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ muls8u::b#0 ] : zp[1]:105 , reg byte x , reg byte y , 
Potential registers zp[2]:106 [ muls8u::return#2 ] : zp[2]:106 , 
Potential registers zp[2]:108 [ mul8u_compare::ms#0 ] : zp[2]:108 , 
Potential registers zp[1]:110 [ mulf8u::a#0 ] : zp[1]:110 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:111 [ mulf8u::b#0 ] : zp[1]:111 , reg byte x , reg byte y , 
Potential registers zp[2]:112 [ mulf8u::return#2 ] : zp[2]:112 , 
Potential registers zp[2]:114 [ mul8u_compare::mf#0 ] : zp[2]:114 , 
Potential registers zp[2]:116 [ mul8u::return#3 ] : zp[2]:116 , 
Potential registers zp[2]:118 [ mul8u_compare::mn#0 ] : zp[2]:118 , 
Potential registers zp[1]:120 [ mul8u_error::a#0 ] : zp[1]:120 , reg byte x , 
Potential registers zp[1]:121 [ mul8u_error::b#0 ] : zp[1]:121 , reg byte x , 
Potential registers zp[2]:122 [ mul8u_error::ms#0 ] : zp[2]:122 , 
Potential registers zp[2]:124 [ mul8u_error::mn#0 ] : zp[2]:124 , 
Potential registers zp[2]:126 [ mul8u_error::mf#0 ] : zp[2]:126 , 
Potential registers zp[2]:128 [ mulf8u_prepared::return#2 ] : zp[2]:128 , 
Potential registers zp[2]:130 [ mulf8u::return#0 ] : zp[2]:130 , 
Potential registers zp[1]:132 [ mulf_init::$1 ] : zp[1]:132 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:133 [ mulf_init::$4 ] : zp[1]:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:134 [ mulf_init::$5 ] : zp[1]:134 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 342,858,718: zp[2]:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 243,071,433.14: zp[2]:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 200,000,002: zp[1]:92 [ mul8u::$1 ] 166,749,838.67: zp[1]:21 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] 33,006: zp[1]:20 [ mul8u::b#2 mul8u::b#0 mul8u::b#1 ] 20,002: zp[2]:86 [ mul8u::return#2 ] 2,002: zp[2]:116 [ mul8u::return#3 ] 
Uplift Scope [muls8s] 56,667,006: zp[2]:31 [ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ] 30,000,003: zp[1]:30 [ muls8s::j#2 muls8s::j#1 ] 30,000,003: zp[1]:33 [ muls8s::i#2 muls8s::i#1 ] 1,818,273: zp[1]:61 [ muls8s::b#0 ] 1,668,417.08: zp[1]:60 [ muls8s::a#0 ] 2,002: zp[2]:62 [ muls8s::return#2 ] 
Uplift Scope [muls8u] 30,000,003: zp[1]:37 [ muls8u::i#2 muls8u::i#1 ] 28,333,669.83: zp[2]:38 [ muls8u::return#0 muls8u::m#3 muls8u::m#1 ] 1,666,833.67: zp[1]:105 [ muls8u::b#0 ] 1,430,143.29: zp[1]:104 [ muls8u::a#0 ] 2,002: zp[2]:106 [ muls8u::return#2 ] 
Uplift Scope [mulf8u_prepared] 1,330,007: zp[1]:28 [ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ] 277,500.75: zp[2]:102 [ mulf8u_prepared::return#0 ] 200,002: zp[2]:96 [ mulf8u_prepared::return#3 ] 20,002: zp[2]:128 [ mulf8u_prepared::return#2 ] 
Uplift Scope [print_char] 1,630,010: zp[1]:9 [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplift Scope [mulf8s_prepared] 691,673.58: zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] 200,002: zp[1]:98 [ mulf8s_prepared::$6 ] 200,002: zp[1]:99 [ mulf8s_prepared::$11 ] 200,002: zp[1]:100 [ mulf8s_prepared::$9 ] 200,002: zp[1]:101 [ mulf8s_prepared::$12 ] 11,000.2: zp[1]:93 [ mulf8s_prepared::b#0 ] 
Uplift Scope [] 1,180,991.77: zp[2]:13 [ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ] 22,662.08: zp[2]:5 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ] 
Uplift Scope [print_uchar] 200,002: zp[1]:84 [ print_uchar::$0 ] 200,002: zp[1]:85 [ print_uchar::$2 ] 97,711.75: zp[1]:12 [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ] 
Uplift Scope [mulf8u_prepare] 160,007: zp[1]:29 [ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ] 
Uplift Scope [mul8s] 69,173.58: zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ] 20,002: zp[1]:88 [ mul8s::$6 ] 20,002: zp[1]:89 [ mul8s::$11 ] 20,002: zp[1]:90 [ mul8s::$9 ] 20,002: zp[1]:91 [ mul8s::$12 ] 1,000.18: zp[1]:73 [ mul8s::b#0 ] 785.86: zp[1]:72 [ mul8s::a#0 ] 
Uplift Scope [print_str] 31,254.25: zp[2]:15 [ print_str::str#16 print_str::str#19 print_str::str#0 ] 
Uplift Scope [mulf8u] 5,501: zp[1]:110 [ mulf8u::a#0 ] 3,667.33: zp[1]:111 [ mulf8u::b#0 ] 3,667.33: zp[2]:130 [ mulf8u::return#0 ] 2,002: zp[2]:112 [ mulf8u::return#2 ] 
Uplift Scope [print_uint] 9,761.33: zp[2]:10 [ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplift Scope [mulf8s] 3,667.33: zp[2]:94 [ mulf8s::return#0 ] 2,750.5: zp[1]:67 [ mulf8s::b#0 ] 2,002: zp[2]:68 [ mulf8s::return#2 ] 333.67: zp[1]:66 [ mulf8s::a#0 ] 
Uplift Scope [mul8s_compare] 2,335.67: zp[1]:4 [ mul8s_compare::ok#3 mul8s_compare::ok#4 ] 2,242.68: zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ] 324.85: zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ] 167.75: zp[2]:74 [ mul8s_compare::mn#0 ] 150.7: zp[2]:64 [ mul8s_compare::ms#0 ] 118.41: zp[2]:70 [ mul8s_compare::mf#0 ] 
Uplift Scope [print_sint] 5,161: zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ] 
Uplift Scope [print_schar] 4,942.17: zp[1]:17 [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ] 
Uplift Scope [mul8u_compare] 2,335.67: zp[1]:36 [ mul8u_compare::ok#3 mul8u_compare::ok#4 ] 1,702.14: zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ] 270.61: zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ] 167.75: zp[2]:118 [ mul8u_compare::mn#0 ] 143.52: zp[2]:108 [ mul8u_compare::ms#0 ] 111.83: zp[2]:114 [ mul8u_compare::mf#0 ] 
Uplift Scope [memset] 3,336.67: zp[2]:58 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [mulf_init] 437.67: zp[2]:56 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 246.89: zp[2]:50 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 230.86: zp[2]:44 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 212.1: zp[1]:49 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 202: zp[1]:132 [ mulf_init::$1 ] 202: zp[1]:133 [ mulf_init::$4 ] 202: zp[1]:134 [ mulf_init::$5 ] 141.4: zp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 138.88: zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ] 124.31: zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ] 109.42: zp[2]:53 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 92.58: zp[2]:47 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [mulf_tables_cmp] 242.4: zp[2]:40 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ] 161.6: zp[2]:42 [ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ] 
Uplift Scope [mul8u_error] 16: zp[1]:120 [ mul8u_error::a#0 ] 11.2: zp[1]:121 [ mul8u_error::b#0 ] 8.62: zp[2]:122 [ mul8u_error::ms#0 ] 7: zp[2]:124 [ mul8u_error::mn#0 ] 5.89: zp[2]:126 [ mul8u_error::mf#0 ] 
Uplift Scope [mul8s_error] 16: zp[1]:76 [ mul8s_error::a#0 ] 11.2: zp[1]:77 [ mul8s_error::b#0 ] 8.62: zp[2]:78 [ mul8s_error::ms#0 ] 7: zp[2]:80 [ mul8s_error::mn#0 ] 5.89: zp[2]:82 [ mul8s_error::mf#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 
Uplift Scope [mulf_init_asm] 

Uplifting [mul8u] best 322945 combination zp[2]:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] reg byte a [ mul8u::b#2 mul8u::b#0 mul8u::b#1 ] zp[2]:86 [ mul8u::return#2 ] zp[2]:116 [ mul8u::return#3 ] 
Uplifting [muls8s] best 302645 combination zp[2]:31 [ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ] reg byte y [ muls8s::j#2 muls8s::j#1 ] reg byte y [ muls8s::i#2 muls8s::i#1 ] reg byte x [ muls8s::b#0 ] zp[1]:60 [ muls8s::a#0 ] zp[2]:62 [ muls8s::return#2 ] 
Uplifting [muls8u] best 292345 combination reg byte y [ muls8u::i#2 muls8u::i#1 ] zp[2]:38 [ muls8u::return#0 muls8u::m#3 muls8u::m#1 ] reg byte x [ muls8u::b#0 ] zp[1]:104 [ muls8u::a#0 ] zp[2]:106 [ muls8u::return#2 ] 
Uplifting [mulf8u_prepared] best 292336 combination reg byte a [ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ] zp[2]:102 [ mulf8u_prepared::return#0 ] zp[2]:96 [ mulf8u_prepared::return#3 ] zp[2]:128 [ mulf8u_prepared::return#2 ] 
Uplifting [print_char] best 292285 combination reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ] 
Uplifting [mulf8s_prepared] best 292261 combination zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] reg byte a [ mulf8s_prepared::$6 ] reg byte a [ mulf8s_prepared::$11 ] reg byte a [ mulf8s_prepared::$9 ] reg byte a [ mulf8s_prepared::$12 ] zp[1]:93 [ mulf8s_prepared::b#0 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [] best 292261 combination zp[2]:13 [ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ] zp[2]:5 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ] 
Uplifting [print_uchar] best 292234 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ] 
Uplifting [mulf8u_prepare] best 292225 combination reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ] 
Uplifting [mul8s] best 292201 combination zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ] reg byte a [ mul8s::$6 ] reg byte a [ mul8s::$11 ] reg byte a [ mul8s::$9 ] reg byte a [ mul8s::$12 ] zp[1]:73 [ mul8s::b#0 ] zp[1]:72 [ mul8s::a#0 ] 
Limited combination testing to 100 combinations of 2304 possible.
Uplifting [print_str] best 292201 combination zp[2]:15 [ print_str::str#16 print_str::str#19 print_str::str#0 ] 
Uplifting [mulf8u] best 291597 combination reg byte a [ mulf8u::a#0 ] reg byte x [ mulf8u::b#0 ] zp[2]:130 [ mulf8u::return#0 ] zp[2]:112 [ mulf8u::return#2 ] 
Uplifting [print_uint] best 291597 combination zp[2]:10 [ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplifting [mulf8s] best 290991 combination zp[2]:94 [ mulf8s::return#0 ] reg byte x [ mulf8s::b#0 ] zp[2]:68 [ mulf8s::return#2 ] reg byte a [ mulf8s::a#0 ] 
Uplifting [mul8s_compare] best 289791 combination reg byte x [ mul8s_compare::ok#3 mul8s_compare::ok#4 ] zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ] zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ] zp[2]:74 [ mul8s_compare::mn#0 ] zp[2]:64 [ mul8s_compare::ms#0 ] zp[2]:70 [ mul8s_compare::mf#0 ] 
Uplifting [print_sint] best 289791 combination zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ] 
Uplifting [print_schar] best 289779 combination reg byte x [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ] 
Uplifting [mul8u_compare] best 288579 combination reg byte x [ mul8u_compare::ok#3 mul8u_compare::ok#4 ] zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ] zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ] zp[2]:118 [ mul8u_compare::mn#0 ] zp[2]:108 [ mul8u_compare::ms#0 ] zp[2]:114 [ mul8u_compare::mf#0 ] 
Uplifting [memset] best 288579 combination zp[2]:58 [ memset::dst#2 memset::dst#1 ] 
Uplifting [mulf_init] best 288329 combination zp[2]:56 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] zp[2]:50 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp[2]:44 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$1 ] reg byte a [ mulf_init::$4 ] reg byte a [ mulf_init::$5 ] zp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ] zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ] zp[2]:53 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp[2]:47 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [mulf_tables_cmp] best 288329 combination zp[2]:40 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ] zp[2]:42 [ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ] 
Uplifting [mul8u_error] best 288323 combination reg byte x [ mul8u_error::a#0 ] zp[1]:121 [ mul8u_error::b#0 ] zp[2]:122 [ mul8u_error::ms#0 ] zp[2]:124 [ mul8u_error::mn#0 ] zp[2]:126 [ mul8u_error::mf#0 ] 
Uplifting [mul8s_error] best 288317 combination reg byte x [ mul8s_error::a#0 ] zp[1]:77 [ mul8s_error::b#0 ] zp[2]:78 [ mul8s_error::ms#0 ] zp[2]:80 [ mul8s_error::mn#0 ] zp[2]:82 [ mul8s_error::mf#0 ] 
Uplifting [RADIX] best 288317 combination 
Uplifting [print_ln] best 288317 combination 
Uplifting [print_cls] best 288317 combination 
Uplifting [main] best 288317 combination 
Uplifting [mulf_init_asm] best 288317 combination 
Attempting to uplift remaining variables inzp[1]:60 [ muls8s::a#0 ]
Uplifting [muls8s] best 288317 combination zp[1]:60 [ muls8s::a#0 ] 
Attempting to uplift remaining variables inzp[1]:104 [ muls8u::a#0 ]
Uplifting [muls8u] best 288317 combination zp[1]:104 [ muls8u::a#0 ] 
Attempting to uplift remaining variables inzp[1]:93 [ mulf8s_prepared::b#0 ]
Uplifting [mulf8s_prepared] best 288317 combination zp[1]:93 [ mulf8s_prepared::b#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ]
Uplifting [mul8s_compare] best 288317 combination zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ] 
Attempting to uplift remaining variables inzp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ]
Uplifting [mul8u_compare] best 288317 combination zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ] 
Attempting to uplift remaining variables inzp[1]:73 [ mul8s::b#0 ]
Uplifting [mul8s] best 288016 combination reg byte y [ mul8s::b#0 ] 
Attempting to uplift remaining variables inzp[1]:72 [ mul8s::a#0 ]
Uplifting [mul8s] best 288016 combination zp[1]:72 [ mul8s::a#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ]
Uplifting [mul8s_compare] best 288016 combination zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ] 
Attempting to uplift remaining variables inzp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ]
Uplifting [mul8u_compare] best 288016 combination zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ] 
Attempting to uplift remaining variables inzp[1]:52 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 287876 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ]
Uplifting [mulf_init] best 287876 combination zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ] 
Attempting to uplift remaining variables inzp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ]
Uplifting [mulf_init] best 287876 combination zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ] 
Attempting to uplift remaining variables inzp[1]:77 [ mul8s_error::b#0 ]
Uplifting [mul8s_error] best 287876 combination zp[1]:77 [ mul8s_error::b#0 ] 
Attempting to uplift remaining variables inzp[1]:121 [ mul8u_error::b#0 ]
Uplifting [mul8u_error] best 287876 combination zp[1]:121 [ mul8u_error::b#0 ] 
Coalescing zero page register [ zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 ] ] with [ zp[1]:60 [ muls8s::a#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 muls8s::a#0 ] ] with [ zp[1]:72 [ mul8s::a#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 ] ] with [ zp[1]:77 [ mul8s_error::b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 ] ] with [ zp[2]:10 [ print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 ] ] with [ zp[2]:78 [ mul8s_error::ms#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 ] ] with [ zp[2]:74 [ mul8s_compare::mn#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 ] ] with [ zp[2]:86 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:116 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] ] with [ zp[2]:94 [ mulf8s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 ] ] with [ zp[2]:96 [ mulf8u_prepared::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 ] ] with [ zp[2]:62 [ muls8s::return#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 ] ] with [ zp[1]:104 [ muls8u::a#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 ] ] with [ zp[1]:121 [ mul8u_error::b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ muls8u::return#0 muls8u::m#3 muls8u::m#1 ] ] with [ zp[2]:106 [ muls8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ mulf8s::return#2 ] ] with [ zp[2]:70 [ mul8s_compare::mf#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:102 [ mulf8u_prepared::return#0 ] ] with [ zp[2]:128 [ mulf8u_prepared::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:108 [ mul8u_compare::ms#0 ] ] with [ zp[2]:122 [ mul8u_error::ms#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:112 [ mulf8u::return#2 ] ] with [ zp[2]:114 [ mul8u_compare::mf#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:112 [ mulf8u::return#2 mul8u_compare::mf#0 ] ] with [ zp[2]:130 [ mulf8u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:118 [ mul8u_compare::mn#0 ] ] with [ zp[2]:124 [ mul8u_error::mn#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 ] ] with [ zp[2]:42 [ mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 ] ] with [ zp[2]:64 [ mul8s_compare::ms#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 mul8s_compare::ms#0 ] ] with [ zp[2]:108 [ mul8u_compare::ms#0 mul8u_error::ms#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 mul8u::return#2 ] ] with [ zp[2]:22 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 ] ] with [ zp[2]:80 [ mul8s_error::mn#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 ] ] with [ zp[2]:68 [ mulf8s::return#2 mul8s_compare::mf#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 mulf8s::return#2 mul8s_compare::mf#0 ] ] with [ zp[2]:102 [ mulf8u_prepared::return#0 mulf8u_prepared::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:112 [ mulf8u::return#2 mul8u_compare::mf#0 mulf8u::return#0 ] ] with [ zp[2]:126 [ mul8u_error::mf#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 mul8s_compare::ms#0 mul8u_compare::ms#0 mul8u_error::ms#0 ] ] with [ zp[2]:31 [ muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 muls8s::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 mul8s_compare::ms#0 mul8u_compare::ms#0 mul8u_error::ms#0 muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 muls8s::return#2 ] ] with [ zp[2]:38 [ muls8u::return#0 muls8u::m#3 muls8u::m#1 muls8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mul8s_error::mn#0 ] ] with [ zp[2]:118 [ mul8u_compare::mn#0 mul8u_error::mn#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 mulf8s::return#2 mul8s_compare::mf#0 mulf8u_prepared::return#0 mulf8u_prepared::return#2 ] ] with [ zp[2]:82 [ mul8s_error::mf#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 mulf8s::return#2 mul8s_compare::mf#0 mulf8u_prepared::return#0 mulf8u_prepared::return#2 mul8s_error::mf#0 ] ] with [ zp[2]:112 [ mulf8u::return#2 mul8u_compare::mf#0 mulf8u::return#0 mul8u_error::mf#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ] with [ zp[2]:15 [ print_str::str#16 print_str::str#19 print_str::str#0 ] ]
Coalescing zero page register [ zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 muls8u::a#0 ] ] with [ zp[1]:2 [ mul8s_compare::a#10 mul8s_compare::a#1 muls8s::a#0 mul8s::a#0 ] ]
Coalescing zero page register [ zp[1]:35 [ mul8u_compare::b#10 mul8u_compare::b#1 mul8u_error::b#0 ] ] with [ zp[1]:3 [ mul8s_compare::b#10 mul8s_compare::b#1 mul8s_error::b#0 ] ]
Coalescing zero page register [ zp[2]:40 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 ] ] with [ zp[2]:5 [ print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ] ]
Coalescing zero page register [ zp[2]:44 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ] with [ zp[2]:7 [ print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 mul8s_compare::ms#0 mul8u_compare::ms#0 mul8u_error::ms#0 muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 muls8s::return#2 muls8u::return#0 muls8u::m#3 muls8u::m#1 muls8u::return#2 ] ]
Coalescing zero page register [ zp[2]:47 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ] with [ zp[2]:13 [ print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ] ]
Coalescing zero page register [ zp[2]:50 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ] with [ zp[2]:18 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mul8s_error::mn#0 mul8u_compare::mn#0 mul8u_error::mn#0 ] ]
Coalescing zero page register [ zp[2]:53 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ] with [ zp[2]:26 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 mulf8s::return#2 mul8s_compare::mf#0 mulf8u_prepared::return#0 mulf8u_prepared::return#2 mul8s_error::mf#0 mulf8u::return#2 mul8u_compare::mf#0 mulf8u::return#0 mul8u_error::mf#0 ] ]
Coalescing zero page register [ zp[2]:58 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:56 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp[1]:93 [ mulf8s_prepared::b#0 ] ] with [ zp[1]:46 [ mulf_init::c#2 mulf_init::c#1 ] ]
Coalescing zero page register [ zp[1]:55 [ mulf_init::dir#2 mulf_init::dir#4 ] ] with [ zp[1]:34 [ mul8u_compare::a#7 mul8u_compare::a#1 muls8u::a#0 mul8s_compare::a#10 mul8s_compare::a#1 muls8s::a#0 mul8s::a#0 ] ]
Coalescing zero page register [ zp[2]:58 [ memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ] with [ zp[2]:24 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_str::str#16 print_str::str#19 print_str::str#0 ] ]
Allocated (was zp[1]:35) zp[1]:2 [ mul8u_compare::b#10 mul8u_compare::b#1 mul8u_error::b#0 mul8s_compare::b#10 mul8s_compare::b#1 mul8s_error::b#0 ]
Allocated (was zp[2]:40) zp[2]:3 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ]
Allocated (was zp[2]:44) zp[2]:5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 mul8s_compare::ms#0 mul8u_compare::ms#0 mul8u_error::ms#0 muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 muls8s::return#2 muls8u::return#0 muls8u::m#3 muls8u::m#1 muls8u::return#2 ]
Allocated (was zp[2]:47) zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ]
Allocated (was zp[2]:50) zp[2]:9 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mul8s_error::mn#0 mul8u_compare::mn#0 mul8u_error::mn#0 ]
Allocated (was zp[2]:53) zp[2]:11 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 mulf8s::return#2 mul8s_compare::mf#0 mulf8u_prepared::return#0 mulf8u_prepared::return#2 mul8s_error::mf#0 mulf8u::return#2 mul8u_compare::mf#0 mulf8u::return#0 mul8u_error::mf#0 ]
Allocated (was zp[1]:55) zp[1]:13 [ mulf_init::dir#2 mulf_init::dir#4 mul8u_compare::a#7 mul8u_compare::a#1 muls8u::a#0 mul8s_compare::a#10 mul8s_compare::a#1 muls8s::a#0 mul8s::a#0 ]
Allocated (was zp[2]:58) zp[2]:14 [ memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_str::str#16 print_str::str#19 print_str::str#0 ]
Allocated (was zp[1]:93) zp[1]:16 [ mulf8s_prepared::b#0 mulf_init::c#2 mulf_init::c#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the fast multiplication library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BG_COLOR = $d021
  .label print_screen = $400
  .label print_char_cursor = 7
  .label print_line_cursor = 3
  // main
main: {
    // [0] *((const byte*) BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    // [1] call print_cls 
    // [332] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call mulf_init 
    // [303] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
  mulf_init_from___b1:
    jsr mulf_init
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call mulf_init_asm 
    jsr mulf_init_asm
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [7] call mulf_tables_cmp 
    // [276] phi from main::@3 to mulf_tables_cmp [phi:main::@3->mulf_tables_cmp]
  mulf_tables_cmp_from___b3:
    jsr mulf_tables_cmp
    // [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [9] call mul8u_compare 
    // [198] phi from main::@4 to mul8u_compare [phi:main::@4->mul8u_compare]
  mul8u_compare_from___b4:
    jsr mul8u_compare
    // [10] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [11] call mul8s_compare 
    // [13] phi from main::@5 to mul8s_compare [phi:main::@5->mul8s_compare]
  mul8s_compare_from___b5:
    jsr mul8s_compare
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // mul8s_compare
// Perform all possible signed byte multiplications (slow and fast) and compare the results
mul8s_compare: {
    .label ms = 5
    .label mf = $b
    .label mn = 9
    .label a = $d
    .label b = 2
    // [14] phi from mul8s_compare to mul8s_compare::@1 [phi:mul8s_compare->mul8s_compare::@1]
  __b1_from_mul8s_compare:
    // [14] phi (signed byte) mul8s_compare::a#10 = (signed byte) -$80 [phi:mul8s_compare->mul8s_compare::@1#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z a
    jmp __b1
    // mul8s_compare::@1
  __b1:
    // [15] if((signed byte) mul8s_compare::a#10!=(signed byte) -$80) goto mul8s_compare::@3 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z a
    bne __b3_from___b1
    jmp __b2
    // mul8s_compare::@2
  __b2:
    // [16] (byte*) print_char_cursor#192 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [17] call print_str 
    // [110] phi from mul8s_compare::@2 to print_str [phi:mul8s_compare::@2->print_str]
  print_str_from___b2:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#192 [phi:mul8s_compare::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8s_compare::str [phi:mul8s_compare::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from mul8s_compare::@2 to mul8s_compare::@11 [phi:mul8s_compare::@2->mul8s_compare::@11]
  __b11_from___b2:
    jmp __b11
    // mul8s_compare::@11
  __b11:
    // [19] call print_ln 
    // [76] phi from mul8s_compare::@11 to print_ln [phi:mul8s_compare::@11->print_ln]
  print_ln_from___b11:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mul8s_compare::@11->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#0 [phi:mul8s_compare::@11->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // mul8s_compare::@return
  __breturn:
    // [20] return 
    rts
    // [21] phi from mul8s_compare::@1 to mul8s_compare::@3 [phi:mul8s_compare::@1->mul8s_compare::@3]
  __b3_from___b1:
    // [21] phi (signed byte) mul8s_compare::b#10 = (signed byte) -$80 [phi:mul8s_compare::@1->mul8s_compare::@3#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z b
    jmp __b3
    // mul8s_compare::@3
  __b3:
    // [22] if((signed byte) mul8s_compare::b#10!=(signed byte) -$80) goto mul8s_compare::@4 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z b
    bne __b4
    jmp __b5
    // mul8s_compare::@5
  __b5:
    // [23] (signed byte) mul8s_compare::a#1 ← ++ (signed byte) mul8s_compare::a#10 -- vbsz1=_inc_vbsz1 
    inc.z a
    // [14] phi from mul8s_compare::@5 to mul8s_compare::@1 [phi:mul8s_compare::@5->mul8s_compare::@1]
  __b1_from___b5:
    // [14] phi (signed byte) mul8s_compare::a#10 = (signed byte) mul8s_compare::a#1 [phi:mul8s_compare::@5->mul8s_compare::@1#0] -- register_copy 
    jmp __b1
    // mul8s_compare::@4
  __b4:
    // [24] (signed byte) muls8s::a#0 ← (signed byte) mul8s_compare::a#10
    // [25] (signed byte) muls8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsxx=vbsz1 
    ldx.z b
    // [26] call muls8s 
    jsr muls8s
    // [27] (signed word) muls8s::return#2 ← (signed word) muls8s::return#0
    jmp __b12
    // mul8s_compare::@12
  __b12:
    // [28] (signed word) mul8s_compare::ms#0 ← (signed word) muls8s::return#2
    // [29] (signed byte) mulf8s::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsaa=vbsz1 
    lda.z a
    // [30] (signed byte) mulf8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsxx=vbsz1 
    ldx.z b
    // [31] call mulf8s 
    // [155] phi from mul8s_compare::@12 to mulf8s [phi:mul8s_compare::@12->mulf8s]
  mulf8s_from___b12:
    jsr mulf8s
    // [32] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0
    jmp __b13
    // mul8s_compare::@13
  __b13:
    // [33] (signed word) mul8s_compare::mf#0 ← (signed word) mulf8s::return#2
    // [34] (signed byte) mul8s::a#0 ← (signed byte) mul8s_compare::a#10
    // [35] (signed byte) mul8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsyy=vbsz1 
    ldy.z b
    // [36] call mul8s 
    jsr mul8s
    jmp __b14
    // mul8s_compare::@14
  __b14:
    // [37] (signed word) mul8s_compare::mn#0 ← (signed word)(word) mul8s::m#4
    // [38] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@6 -- vwsz1_eq_vwsz2_then_la1 
    lda.z ms
    cmp.z mf
    bne !+
    lda.z ms+1
    cmp.z mf+1
    beq __b6_from___b14
  !:
    // [39] phi from mul8s_compare::@14 to mul8s_compare::@9 [phi:mul8s_compare::@14->mul8s_compare::@9]
  __b9_from___b14:
    jmp __b9
    // mul8s_compare::@9
  __b9:
    // [40] phi from mul8s_compare::@9 to mul8s_compare::@6 [phi:mul8s_compare::@9->mul8s_compare::@6]
  __b6_from___b9:
    // [40] phi (byte) mul8s_compare::ok#4 = (byte) 0 [phi:mul8s_compare::@9->mul8s_compare::@6#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b6
    // [40] phi from mul8s_compare::@14 to mul8s_compare::@6 [phi:mul8s_compare::@14->mul8s_compare::@6]
  __b6_from___b14:
    // [40] phi (byte) mul8s_compare::ok#4 = (byte) 1 [phi:mul8s_compare::@14->mul8s_compare::@6#0] -- vbuxx=vbuc1 
    ldx #1
    jmp __b6
    // mul8s_compare::@6
  __b6:
    // [41] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@15 -- vwsz1_eq_vwsz2_then_la1 
    lda.z ms
    cmp.z mn
    bne !+
    lda.z ms+1
    cmp.z mn+1
    beq __b15_from___b6
  !:
    // [43] phi from mul8s_compare::@6 to mul8s_compare::@7 [phi:mul8s_compare::@6->mul8s_compare::@7]
  __b7_from___b6:
    // [43] phi (byte) mul8s_compare::ok#3 = (byte) 0 [phi:mul8s_compare::@6->mul8s_compare::@7#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b7
    // [42] phi from mul8s_compare::@6 to mul8s_compare::@15 [phi:mul8s_compare::@6->mul8s_compare::@15]
  __b15_from___b6:
    jmp __b15
    // mul8s_compare::@15
  __b15:
    // [43] phi from mul8s_compare::@15 to mul8s_compare::@7 [phi:mul8s_compare::@15->mul8s_compare::@7]
  __b7_from___b15:
    // [43] phi (byte) mul8s_compare::ok#3 = (byte) mul8s_compare::ok#4 [phi:mul8s_compare::@15->mul8s_compare::@7#0] -- register_copy 
    jmp __b7
    // mul8s_compare::@7
  __b7:
    // [44] if((byte) mul8s_compare::ok#3!=(byte) 0) goto mul8s_compare::@8 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b8
    jmp __b10
    // mul8s_compare::@10
  __b10:
    // [45] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // [46] (signed byte) mul8s_error::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsxx=vbsz1 
    ldx.z a
    // [47] (signed byte) mul8s_error::b#0 ← (signed byte) mul8s_compare::b#10
    // [48] (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#0
    // [49] (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#0
    // [50] (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#0
    // [51] call mul8s_error 
    jsr mul8s_error
    jmp __breturn
    // mul8s_compare::@8
  __b8:
    // [52] (signed byte) mul8s_compare::b#1 ← ++ (signed byte) mul8s_compare::b#10 -- vbsz1=_inc_vbsz1 
    inc.z b
    // [21] phi from mul8s_compare::@8 to mul8s_compare::@3 [phi:mul8s_compare::@8->mul8s_compare::@3]
  __b3_from___b8:
    // [21] phi (signed byte) mul8s_compare::b#10 = (signed byte) mul8s_compare::b#1 [phi:mul8s_compare::@8->mul8s_compare::@3#0] -- register_copy 
    jmp __b3
    str: .text "signed multiply results match!"
    .byte 0
}
  // mul8s_error
// mul8s_error(signed byte register(X) a, signed byte zp(2) b, signed word zp(5) ms, signed word zp(9) mn, signed word zp($b) mf)
mul8s_error: {
    .label b = 2
    .label ms = 5
    .label mn = 9
    .label mf = $b
    // [53] (byte*) print_char_cursor#193 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [54] call print_str 
    // [110] phi from mul8s_error to print_str [phi:mul8s_error->print_str]
  print_str_from_mul8s_error:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#193 [phi:mul8s_error->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8s_error::str [phi:mul8s_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b1
    // mul8s_error::@1
  __b1:
    // [55] (signed byte) print_schar::b#1 ← (signed byte) mul8s_error::a#0
    // [56] call print_schar 
    // [117] phi from mul8s_error::@1 to print_schar [phi:mul8s_error::@1->print_schar]
  print_schar_from___b1:
    // [117] phi (signed byte) print_schar::b#3 = (signed byte) print_schar::b#1 [phi:mul8s_error::@1->print_schar#0] -- register_copy 
    jsr print_schar
    // [57] phi from mul8s_error::@1 to mul8s_error::@2 [phi:mul8s_error::@1->mul8s_error::@2]
  __b2_from___b1:
    jmp __b2
    // mul8s_error::@2
  __b2:
    // [58] call print_str 
    // [110] phi from mul8s_error::@2 to print_str [phi:mul8s_error::@2->print_str]
  print_str_from___b2:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str1 [phi:mul8s_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b3
    // mul8s_error::@3
  __b3:
    // [59] (signed byte) print_schar::b#2 ← (signed byte) mul8s_error::b#0 -- vbsxx=vbsz1 
    ldx.z b
    // [60] call print_schar 
    // [117] phi from mul8s_error::@3 to print_schar [phi:mul8s_error::@3->print_schar]
  print_schar_from___b3:
    // [117] phi (signed byte) print_schar::b#3 = (signed byte) print_schar::b#2 [phi:mul8s_error::@3->print_schar#0] -- register_copy 
    jsr print_schar
    // [61] phi from mul8s_error::@3 to mul8s_error::@4 [phi:mul8s_error::@3->mul8s_error::@4]
  __b4_from___b3:
    jmp __b4
    // mul8s_error::@4
  __b4:
    // [62] call print_str 
    // [110] phi from mul8s_error::@4 to print_str [phi:mul8s_error::@4->print_str]
  print_str_from___b4:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@4->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str2 [phi:mul8s_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // mul8s_error::@5
  __b5:
    // [63] (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#0
    // [64] call print_sint 
    // [81] phi from mul8s_error::@5 to print_sint [phi:mul8s_error::@5->print_sint]
  print_sint_from___b5:
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:mul8s_error::@5->print_sint#0] -- register_copy 
    jsr print_sint
    // [65] phi from mul8s_error::@5 to mul8s_error::@6 [phi:mul8s_error::@5->mul8s_error::@6]
  __b6_from___b5:
    jmp __b6
    // mul8s_error::@6
  __b6:
    // [66] call print_str 
    // [110] phi from mul8s_error::@6 to print_str [phi:mul8s_error::@6->print_str]
  print_str_from___b6:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@6->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str3 [phi:mul8s_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    jmp __b7
    // mul8s_error::@7
  __b7:
    // [67] (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#0 -- vwsz1=vwsz2 
    lda.z mn
    sta.z print_sint.w
    lda.z mn+1
    sta.z print_sint.w+1
    // [68] call print_sint 
    // [81] phi from mul8s_error::@7 to print_sint [phi:mul8s_error::@7->print_sint]
  print_sint_from___b7:
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#2 [phi:mul8s_error::@7->print_sint#0] -- register_copy 
    jsr print_sint
    // [69] phi from mul8s_error::@7 to mul8s_error::@8 [phi:mul8s_error::@7->mul8s_error::@8]
  __b8_from___b7:
    jmp __b8
    // mul8s_error::@8
  __b8:
    // [70] call print_str 
    // [110] phi from mul8s_error::@8 to print_str [phi:mul8s_error::@8->print_str]
  print_str_from___b8:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@8->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str4 [phi:mul8s_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    jmp __b9
    // mul8s_error::@9
  __b9:
    // [71] (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#0 -- vwsz1=vwsz2 
    lda.z mf
    sta.z print_sint.w
    lda.z mf+1
    sta.z print_sint.w+1
    // [72] call print_sint 
    // [81] phi from mul8s_error::@9 to print_sint [phi:mul8s_error::@9->print_sint]
  print_sint_from___b9:
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#3 [phi:mul8s_error::@9->print_sint#0] -- register_copy 
    jsr print_sint
    // [73] phi from mul8s_error::@9 to mul8s_error::@10 [phi:mul8s_error::@9->mul8s_error::@10]
  __b10_from___b9:
    jmp __b10
    // mul8s_error::@10
  __b10:
    // [74] call print_ln 
    // [76] phi from mul8s_error::@10 to print_ln [phi:mul8s_error::@10->print_ln]
  print_ln_from___b10:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:mul8s_error::@10->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#0 [phi:mul8s_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // mul8s_error::@return
  __breturn:
    // [75] return 
    rts
    str: .text "signed multiply mismatch "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [77] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [77] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#47 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [78] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#24 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [79] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [80] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(5) w)
print_sint: {
    .label w = 5
    // [82] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [83] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [84] call print_char 
    // [92] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [85] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [85] phi (signed word) print_sint::w#6 = (signed word) print_sint::w#4 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [86] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6
    // [87] call print_uint 
    // [96] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [88] return 
    rts
    // [89] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [90] call print_char 
    // [92] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [91] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#4 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [93] *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [94] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#87 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [95] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(5) w)
print_uint: {
    .label w = 5
    // [97] (byte) print_uchar::b#1 ← > (word) print_uint::w#6 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [98] call print_uchar 
    // [102] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#145 [phi:print_uint->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [99] (byte) print_uchar::b#2 ← < (word) print_uint::w#6 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [100] call print_uchar 
    // [102] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [101] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [103] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [104] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [105] call print_char 
  // Table of hexadecimal digits
    // [92] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#146 [phi:print_uchar->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [106] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [107] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [108] call print_char 
    // [92] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [109] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($e) str)
print_str: {
    .label str = $e
    // [111] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [111] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#158 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [111] phi (byte*) print_str::str#16 = (byte*) print_str::str#19 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [112] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [113] return 
    rts
    // print_str::@2
  __b2:
    // [114] (byte) print_char::ch#0 ← *((byte*) print_str::str#16) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [115] call print_char 
    // [92] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [116] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#16 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // [118] if((signed byte) print_schar::b#3<(signed byte) 0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [119] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [120] call print_char 
    // [92] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [121] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [121] phi (signed byte) print_schar::b#5 = (signed byte) print_schar::b#3 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [122] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#5
    // [123] call print_uchar 
    // [102] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
  print_uchar_from___b2:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [124] return 
    rts
    // [125] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [126] call print_char 
    // [92] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [127] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#3 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // mul8s
// Multiply of two signed chars to a signed int
// Fixes offsets introduced by using unsigned multiplication
// mul8s(signed byte zp($d) a, signed byte register(Y) b)
mul8s: {
    .label m = 9
    .label a = $d
    // [128] (byte) mul8u::a#1 ← (byte)(signed byte) mul8s::a#0 -- vbuxx=vbuz1 
    ldx.z a
    // [129] (byte) mul8u::b#0 ← (byte)(signed byte) mul8s::b#0 -- vbuaa=vbuyy 
    tya
    // [130] call mul8u 
    // [144] phi from mul8s to mul8u [phi:mul8s->mul8u]
  mul8u_from_mul8s:
    // [144] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8s->mul8u#0] -- register_copy 
    // [144] phi (byte) mul8u::b#2 = (byte) mul8u::b#0 [phi:mul8s->mul8u#1] -- register_copy 
    jsr mul8u
    // [131] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp __b5
    // mul8s::@5
  __b5:
    // [132] (word) mul8s::m#0 ← (word) mul8u::return#2
    // [133] if((signed byte) mul8s::a#0>=(signed byte) 0) goto mul8s::@1 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b1_from___b5
    jmp __b3
    // mul8s::@3
  __b3:
    // [134] (byte~) mul8s::$6 ← > (word) mul8s::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [135] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#0 -- vbuaa=vbuaa_minus_vbuyy 
    sty.z $ff
    sec
    sbc.z $ff
    // [136] (word) mul8s::m#1 ← (word) mul8s::m#0 hi= (byte~) mul8s::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [137] phi from mul8s::@3 mul8s::@5 to mul8s::@1 [phi:mul8s::@3/mul8s::@5->mul8s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [137] phi (word) mul8s::m#5 = (word) mul8s::m#1 [phi:mul8s::@3/mul8s::@5->mul8s::@1#0] -- register_copy 
    jmp __b1
    // mul8s::@1
  __b1:
    // [138] if((signed byte) mul8s::b#0>=(signed byte) 0) goto mul8s::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b2_from___b1
    jmp __b4
    // mul8s::@4
  __b4:
    // [139] (byte~) mul8s::$9 ← > (word) mul8s::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [140] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#0 -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc.z a
    // [141] (word) mul8s::m#2 ← (word) mul8s::m#5 hi= (byte~) mul8s::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [142] phi from mul8s::@1 mul8s::@4 to mul8s::@2 [phi:mul8s::@1/mul8s::@4->mul8s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [142] phi (word) mul8s::m#4 = (word) mul8s::m#5 [phi:mul8s::@1/mul8s::@4->mul8s::@2#0] -- register_copy 
    jmp __b2
    // mul8s::@2
  __b2:
    jmp __breturn
    // mul8s::@return
  __breturn:
    // [143] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $e
    .label res = 9
    .label return = 9
    // [145] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [146] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [146] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [146] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [146] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [147] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [148] return 
    rts
    // mul8u::@2
  __b2:
    // [149] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [150] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [151] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [152] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [152] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [153] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [154] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [146] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [146] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [146] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [146] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // mulf8s
// Fast multiply two signed chars to a unsigned int result
// mulf8s(signed byte register(A) a, signed byte register(X) b)
mulf8s: {
    .label return = $b
    jmp mulf8s_prepare1
    // mulf8s::mulf8s_prepare1
  mulf8s_prepare1:
    // [156] (byte) mulf8u_prepare::a#1 ← (byte)(signed byte) mulf8s::a#0
    // [157] call mulf8u_prepare 
    // [182] phi from mulf8s::mulf8s_prepare1 to mulf8u_prepare [phi:mulf8s::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
    // [182] phi (byte) mulf8u_prepare::a#2 = (byte) mulf8u_prepare::a#1 [phi:mulf8s::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp __b1
    // mulf8s::@1
  __b1:
    // [158] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#0 -- vbsz1=vbsxx 
    stx.z mulf8s_prepared.b
    // [159] call mulf8s_prepared 
    jsr mulf8s_prepared
    jmp __b2
    // mulf8s::@2
  __b2:
    // [160] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4
    jmp __breturn
    // mulf8s::@return
  __breturn:
    // [161] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte zp($10) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = $b
    .label b = $10
    // [162] (byte) mulf8u_prepared::b#1 ← (byte)(signed byte) mulf8s_prepared::b#0 -- vbuaa=vbuz1 
    lda.z b
    // [163] call mulf8u_prepared 
    // [177] phi from mulf8s_prepared to mulf8u_prepared [phi:mulf8s_prepared->mulf8u_prepared]
  mulf8u_prepared_from_mulf8s_prepared:
    // [177] phi (byte) mulf8u_prepared::b#2 = (byte) mulf8u_prepared::b#1 [phi:mulf8s_prepared->mulf8u_prepared#0] -- register_copy 
    jsr mulf8u_prepared
    // [164] (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#0
    jmp __b5
    // mulf8s_prepared::@5
  __b5:
    // [165] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#3
    // [166] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1_from___b5
    jmp __b3
    // mulf8s_prepared::@3
  __b3:
    // [167] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [168] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0 -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc.z b
    // [169] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [170] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [170] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    jmp __b1
    // mulf8s_prepared::@1
  __b1:
    // [171] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2_from___b1
    jmp __b4
    // mulf8s_prepared::@4
  __b4:
    // [172] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [173] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA) -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [174] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [175] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [175] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp __b2
    // mulf8s_prepared::@2
  __b2:
    jmp __breturn
    // mulf8s_prepared::@return
  __breturn:
    // [176] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $b
    // [178] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#2 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // [180] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    jmp __breturn
    // mulf8u_prepared::@return
  __breturn:
    // [181] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // [183] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#2 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp __breturn
    // mulf8u_prepare::@return
  __breturn:
    // [185] return 
    rts
}
  // muls8s
// Slow multiplication of signed bytes
// Perform a signed multiplication by repeated addition/subtraction
// muls8s(signed byte zp($d) a, signed byte register(X) b)
muls8s: {
    .label m = 5
    .label return = 5
    .label a = $d
    // [186] if((signed byte) muls8s::a#0<(signed byte) 0) goto muls8s::@5 -- vbsz1_lt_0_then_la1 
    lda.z a
    bmi __b5_from_muls8s
    jmp __b2
    // muls8s::@2
  __b2:
    // [187] if((signed byte) muls8s::a#0<=(signed byte) 0) goto muls8s::@1 -- vbsz1_le_0_then_la1 
    lda.z a
    cmp #1
    bmi __b1_from___b2
    // [188] phi from muls8s::@2 to muls8s::@3 [phi:muls8s::@2->muls8s::@3]
  __b3_from___b2:
    // [188] phi (signed word) muls8s::m#3 = (signed word) 0 [phi:muls8s::@2->muls8s::@3#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z m
    lda #>0
    sta.z m+1
    // [188] phi (signed byte) muls8s::j#2 = (signed byte) 0 [phi:muls8s::@2->muls8s::@3#1] -- vbsyy=vbsc1 
    ldy #0
    jmp __b3
    // muls8s::@3
  __b3:
    // [189] if((signed byte) muls8s::j#2!=(signed byte) muls8s::a#0) goto muls8s::@4 -- vbsyy_neq_vbsz1_then_la1 
    cpy.z a
    bne __b4
    // [190] phi from muls8s::@3 muls8s::@5 to muls8s::@1 [phi:muls8s::@3/muls8s::@5->muls8s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [190] phi (signed word) muls8s::return#0 = (signed word) muls8s::m#3 [phi:muls8s::@3/muls8s::@5->muls8s::@1#0] -- register_copy 
    jmp __b1
    // [190] phi from muls8s::@2 to muls8s::@1 [phi:muls8s::@2->muls8s::@1]
  __b1_from___b2:
    // [190] phi (signed word) muls8s::return#0 = (signed word) 0 [phi:muls8s::@2->muls8s::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z return
    lda #>0
    sta.z return+1
    jmp __b1
    // muls8s::@1
  __b1:
    jmp __breturn
    // muls8s::@return
  __breturn:
    // [191] return 
    rts
    // muls8s::@4
  __b4:
    // [192] (signed word) muls8s::m#1 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#0 -- vwsz1=vwsz1_plus_vbsxx 
    txa
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    clc
    lda.z m
    adc.z $fe
    sta.z m
    lda.z m+1
    adc.z $ff
    sta.z m+1
    // [193] (signed byte) muls8s::j#1 ← ++ (signed byte) muls8s::j#2 -- vbsyy=_inc_vbsyy 
    iny
    // [188] phi from muls8s::@4 to muls8s::@3 [phi:muls8s::@4->muls8s::@3]
  __b3_from___b4:
    // [188] phi (signed word) muls8s::m#3 = (signed word) muls8s::m#1 [phi:muls8s::@4->muls8s::@3#0] -- register_copy 
    // [188] phi (signed byte) muls8s::j#2 = (signed byte) muls8s::j#1 [phi:muls8s::@4->muls8s::@3#1] -- register_copy 
    jmp __b3
    // [194] phi from muls8s to muls8s::@5 [phi:muls8s->muls8s::@5]
  __b5_from_muls8s:
    // [194] phi (signed word) muls8s::m#5 = (signed word) 0 [phi:muls8s->muls8s::@5#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z m
    lda #>0
    sta.z m+1
    // [194] phi (signed byte) muls8s::i#2 = (signed byte) 0 [phi:muls8s->muls8s::@5#1] -- vbsyy=vbsc1 
    ldy #0
    jmp __b5
    // muls8s::@5
  __b5:
    // [195] if((signed byte) muls8s::i#2!=(signed byte) muls8s::a#0) goto muls8s::@6 -- vbsyy_neq_vbsz1_then_la1 
    cpy.z a
    bne __b6
    jmp __b1_from___b5
    // muls8s::@6
  __b6:
    // [196] (signed word) muls8s::m#2 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#0 -- vwsz1=vwsz1_minus_vbsxx 
    txa
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    sec
    lda.z m
    sbc.z $fe
    sta.z m
    lda.z m+1
    sbc.z $ff
    sta.z m+1
    // [197] (signed byte) muls8s::i#1 ← -- (signed byte) muls8s::i#2 -- vbsyy=_dec_vbsyy 
    dey
    // [194] phi from muls8s::@6 to muls8s::@5 [phi:muls8s::@6->muls8s::@5]
  __b5_from___b6:
    // [194] phi (signed word) muls8s::m#5 = (signed word) muls8s::m#2 [phi:muls8s::@6->muls8s::@5#0] -- register_copy 
    // [194] phi (signed byte) muls8s::i#2 = (signed byte) muls8s::i#1 [phi:muls8s::@6->muls8s::@5#1] -- register_copy 
    jmp __b5
}
  // mul8u_compare
// Perform all possible byte multiplications (slow and fast) and compare the results
mul8u_compare: {
    .label ms = 5
    .label mf = $b
    .label mn = 9
    .label b = 2
    .label a = $d
    // [199] phi from mul8u_compare to mul8u_compare::@1 [phi:mul8u_compare->mul8u_compare::@1]
  __b1_from_mul8u_compare:
    // [199] phi (byte) mul8u_compare::a#7 = (byte) 0 [phi:mul8u_compare->mul8u_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [199] phi from mul8u_compare::@8 to mul8u_compare::@1 [phi:mul8u_compare::@8->mul8u_compare::@1]
  __b1_from___b8:
    // [199] phi (byte) mul8u_compare::a#7 = (byte) mul8u_compare::a#1 [phi:mul8u_compare::@8->mul8u_compare::@1#0] -- register_copy 
    jmp __b1
    // mul8u_compare::@1
  __b1:
    // [200] phi from mul8u_compare::@1 to mul8u_compare::@2 [phi:mul8u_compare::@1->mul8u_compare::@2]
  __b2_from___b1:
    // [200] phi (byte) mul8u_compare::b#10 = (byte) 0 [phi:mul8u_compare::@1->mul8u_compare::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b2
    // [200] phi from mul8u_compare::@5 to mul8u_compare::@2 [phi:mul8u_compare::@5->mul8u_compare::@2]
  __b2_from___b5:
    // [200] phi (byte) mul8u_compare::b#10 = (byte) mul8u_compare::b#1 [phi:mul8u_compare::@5->mul8u_compare::@2#0] -- register_copy 
    jmp __b2
    // mul8u_compare::@2
  __b2:
    // [201] (byte) muls8u::a#0 ← (byte) mul8u_compare::a#7
    // [202] (byte) muls8u::b#0 ← (byte) mul8u_compare::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [203] call muls8u 
    jsr muls8u
    // [204] (word) muls8u::return#2 ← (word) muls8u::return#0
    jmp __b10
    // mul8u_compare::@10
  __b10:
    // [205] (word) mul8u_compare::ms#0 ← (word) muls8u::return#2
    // [206] (byte) mulf8u::a#0 ← (byte) mul8u_compare::a#7 -- vbuaa=vbuz1 
    lda.z a
    // [207] (byte) mulf8u::b#0 ← (byte) mul8u_compare::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [208] call mulf8u 
    jsr mulf8u
    // [209] (word) mulf8u::return#2 ← (word) mulf8u::return#0
    jmp __b11
    // mul8u_compare::@11
  __b11:
    // [210] (word) mul8u_compare::mf#0 ← (word) mulf8u::return#2
    // [211] (byte) mul8u::a#2 ← (byte) mul8u_compare::a#7 -- vbuxx=vbuz1 
    ldx.z a
    // [212] (byte) mul8u::b#1 ← (byte) mul8u_compare::b#10 -- vbuaa=vbuz1 
    lda.z b
    // [213] call mul8u 
    // [144] phi from mul8u_compare::@11 to mul8u [phi:mul8u_compare::@11->mul8u]
  mul8u_from___b11:
    // [144] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mul8u_compare::@11->mul8u#0] -- register_copy 
    // [144] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mul8u_compare::@11->mul8u#1] -- register_copy 
    jsr mul8u
    // [214] (word) mul8u::return#3 ← (word) mul8u::res#2
    jmp __b12
    // mul8u_compare::@12
  __b12:
    // [215] (word) mul8u_compare::mn#0 ← (word) mul8u::return#3
    // [216] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3 -- vwuz1_eq_vwuz2_then_la1 
    lda.z ms
    cmp.z mf
    bne !+
    lda.z ms+1
    cmp.z mf+1
    beq __b3_from___b12
  !:
    // [217] phi from mul8u_compare::@12 to mul8u_compare::@6 [phi:mul8u_compare::@12->mul8u_compare::@6]
  __b6_from___b12:
    jmp __b6
    // mul8u_compare::@6
  __b6:
    // [218] phi from mul8u_compare::@6 to mul8u_compare::@3 [phi:mul8u_compare::@6->mul8u_compare::@3]
  __b3_from___b6:
    // [218] phi (byte) mul8u_compare::ok#4 = (byte) 0 [phi:mul8u_compare::@6->mul8u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [218] phi from mul8u_compare::@12 to mul8u_compare::@3 [phi:mul8u_compare::@12->mul8u_compare::@3]
  __b3_from___b12:
    // [218] phi (byte) mul8u_compare::ok#4 = (byte) 1 [phi:mul8u_compare::@12->mul8u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #1
    jmp __b3
    // mul8u_compare::@3
  __b3:
    // [219] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@14 -- vwuz1_eq_vwuz2_then_la1 
    lda.z ms
    cmp.z mn
    bne !+
    lda.z ms+1
    cmp.z mn+1
    beq __b14_from___b3
  !:
    // [221] phi from mul8u_compare::@3 to mul8u_compare::@4 [phi:mul8u_compare::@3->mul8u_compare::@4]
  __b4_from___b3:
    // [221] phi (byte) mul8u_compare::ok#3 = (byte) 0 [phi:mul8u_compare::@3->mul8u_compare::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
    // [220] phi from mul8u_compare::@3 to mul8u_compare::@14 [phi:mul8u_compare::@3->mul8u_compare::@14]
  __b14_from___b3:
    jmp __b14
    // mul8u_compare::@14
  __b14:
    // [221] phi from mul8u_compare::@14 to mul8u_compare::@4 [phi:mul8u_compare::@14->mul8u_compare::@4]
  __b4_from___b14:
    // [221] phi (byte) mul8u_compare::ok#3 = (byte) mul8u_compare::ok#4 [phi:mul8u_compare::@14->mul8u_compare::@4#0] -- register_copy 
    jmp __b4
    // mul8u_compare::@4
  __b4:
    // [222] if((byte) mul8u_compare::ok#3!=(byte) 0) goto mul8u_compare::@5 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // mul8u_compare::@7
  __b7:
    // [223] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // [224] (byte) mul8u_error::a#0 ← (byte) mul8u_compare::a#7 -- vbuxx=vbuz1 
    ldx.z a
    // [225] (byte) mul8u_error::b#0 ← (byte) mul8u_compare::b#10
    // [226] (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#0
    // [227] (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#0
    // [228] (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#0
    // [229] call mul8u_error 
    // [239] phi from mul8u_compare::@7 to mul8u_error [phi:mul8u_compare::@7->mul8u_error]
  mul8u_error_from___b7:
    jsr mul8u_error
    jmp __breturn
    // mul8u_compare::@return
  __breturn:
    // [230] return 
    rts
    // mul8u_compare::@5
  __b5:
    // [231] (byte) mul8u_compare::b#1 ← ++ (byte) mul8u_compare::b#10 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [232] if((byte) mul8u_compare::b#1!=(byte) 0) goto mul8u_compare::@2 -- vbuz1_neq_0_then_la1 
    lda.z b
    cmp #0
    bne __b2_from___b5
    jmp __b8
    // mul8u_compare::@8
  __b8:
    // [233] (byte) mul8u_compare::a#1 ← ++ (byte) mul8u_compare::a#7 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [234] if((byte) mul8u_compare::a#1!=(byte) 0) goto mul8u_compare::@1 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b1_from___b8
    // [235] phi from mul8u_compare::@8 to mul8u_compare::@9 [phi:mul8u_compare::@8->mul8u_compare::@9]
  __b9_from___b8:
    jmp __b9
    // mul8u_compare::@9
  __b9:
    // [236] call print_str 
    // [110] phi from mul8u_compare::@9 to print_str [phi:mul8u_compare::@9->print_str]
  print_str_from___b9:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#101 [phi:mul8u_compare::@9->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8u_compare::str [phi:mul8u_compare::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [237] phi from mul8u_compare::@9 to mul8u_compare::@13 [phi:mul8u_compare::@9->mul8u_compare::@13]
  __b13_from___b9:
    jmp __b13
    // mul8u_compare::@13
  __b13:
    // [238] call print_ln 
    // [76] phi from mul8u_compare::@13 to print_ln [phi:mul8u_compare::@13->print_ln]
  print_ln_from___b13:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mul8u_compare::@13->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#10 [phi:mul8u_compare::@13->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    str: .text "multiply results match!"
    .byte 0
}
  // mul8u_error
// mul8u_error(byte register(X) a, byte zp(2) b, word zp(5) ms, word zp(9) mn, word zp($b) mf)
mul8u_error: {
    .label b = 2
    .label ms = 5
    .label mn = 9
    .label mf = $b
    // [240] call print_str 
    // [110] phi from mul8u_error to print_str [phi:mul8u_error->print_str]
  print_str_from_mul8u_error:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#101 [phi:mul8u_error->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8u_error::str [phi:mul8u_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b1
    // mul8u_error::@1
  __b1:
    // [241] (byte) print_uchar::b#3 ← (byte) mul8u_error::a#0
    // [242] call print_uchar 
    // [102] phi from mul8u_error::@1 to print_uchar [phi:mul8u_error::@1->print_uchar]
  print_uchar_from___b1:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#1 [phi:mul8u_error::@1->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#3 [phi:mul8u_error::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [243] phi from mul8u_error::@1 to mul8u_error::@2 [phi:mul8u_error::@1->mul8u_error::@2]
  __b2_from___b1:
    jmp __b2
    // mul8u_error::@2
  __b2:
    // [244] call print_str 
    // [110] phi from mul8u_error::@2 to print_str [phi:mul8u_error::@2->print_str]
  print_str_from___b2:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str1 [phi:mul8u_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b3
    // mul8u_error::@3
  __b3:
    // [245] (byte) print_uchar::b#4 ← (byte) mul8u_error::b#0 -- vbuxx=vbuz1 
    ldx.z b
    // [246] call print_uchar 
    // [102] phi from mul8u_error::@3 to print_uchar [phi:mul8u_error::@3->print_uchar]
  print_uchar_from___b3:
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#1 [phi:mul8u_error::@3->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#4 [phi:mul8u_error::@3->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [247] phi from mul8u_error::@3 to mul8u_error::@4 [phi:mul8u_error::@3->mul8u_error::@4]
  __b4_from___b3:
    jmp __b4
    // mul8u_error::@4
  __b4:
    // [248] call print_str 
    // [110] phi from mul8u_error::@4 to print_str [phi:mul8u_error::@4->print_str]
  print_str_from___b4:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@4->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str2 [phi:mul8u_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // mul8u_error::@5
  __b5:
    // [249] (word) print_uint::w#3 ← (word) mul8u_error::ms#0
    // [250] call print_uint 
    // [96] phi from mul8u_error::@5 to print_uint [phi:mul8u_error::@5->print_uint]
  print_uint_from___b5:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@5->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#3 [phi:mul8u_error::@5->print_uint#1] -- register_copy 
    jsr print_uint
    // [251] phi from mul8u_error::@5 to mul8u_error::@6 [phi:mul8u_error::@5->mul8u_error::@6]
  __b6_from___b5:
    jmp __b6
    // mul8u_error::@6
  __b6:
    // [252] call print_str 
    // [110] phi from mul8u_error::@6 to print_str [phi:mul8u_error::@6->print_str]
  print_str_from___b6:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@6->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str3 [phi:mul8u_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    jmp __b7
    // mul8u_error::@7
  __b7:
    // [253] (word) print_uint::w#4 ← (word) mul8u_error::mn#0 -- vwuz1=vwuz2 
    lda.z mn
    sta.z print_uint.w
    lda.z mn+1
    sta.z print_uint.w+1
    // [254] call print_uint 
    // [96] phi from mul8u_error::@7 to print_uint [phi:mul8u_error::@7->print_uint]
  print_uint_from___b7:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@7->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#4 [phi:mul8u_error::@7->print_uint#1] -- register_copy 
    jsr print_uint
    // [255] phi from mul8u_error::@7 to mul8u_error::@8 [phi:mul8u_error::@7->mul8u_error::@8]
  __b8_from___b7:
    jmp __b8
    // mul8u_error::@8
  __b8:
    // [256] call print_str 
    // [110] phi from mul8u_error::@8 to print_str [phi:mul8u_error::@8->print_str]
  print_str_from___b8:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@8->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str4 [phi:mul8u_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    jmp __b9
    // mul8u_error::@9
  __b9:
    // [257] (word) print_uint::w#5 ← (word) mul8u_error::mf#0 -- vwuz1=vwuz2 
    lda.z mf
    sta.z print_uint.w
    lda.z mf+1
    sta.z print_uint.w+1
    // [258] call print_uint 
    // [96] phi from mul8u_error::@9 to print_uint [phi:mul8u_error::@9->print_uint]
  print_uint_from___b9:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@9->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#5 [phi:mul8u_error::@9->print_uint#1] -- register_copy 
    jsr print_uint
    // [259] phi from mul8u_error::@9 to mul8u_error::@10 [phi:mul8u_error::@9->mul8u_error::@10]
  __b10_from___b9:
    jmp __b10
    // mul8u_error::@10
  __b10:
    // [260] call print_ln 
    // [76] phi from mul8u_error::@10 to print_ln [phi:mul8u_error::@10->print_ln]
  print_ln_from___b10:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:mul8u_error::@10->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#10 [phi:mul8u_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // mul8u_error::@return
  __breturn:
    // [261] return 
    rts
    str: .text "multiply mismatch "
    .byte 0
}
  // mulf8u
// Fast multiply two unsigned chars to a unsigned int result
// mulf8u(byte register(A) a, byte register(X) b)
mulf8u: {
    .label return = $b
    // [262] (byte) mulf8u_prepare::a#0 ← (byte) mulf8u::a#0
    // [263] call mulf8u_prepare 
    // [182] phi from mulf8u to mulf8u_prepare [phi:mulf8u->mulf8u_prepare]
  mulf8u_prepare_from_mulf8u:
    // [182] phi (byte) mulf8u_prepare::a#2 = (byte) mulf8u_prepare::a#0 [phi:mulf8u->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp __b1
    // mulf8u::@1
  __b1:
    // [264] (byte) mulf8u_prepared::b#0 ← (byte) mulf8u::b#0 -- vbuaa=vbuxx 
    txa
    // [265] call mulf8u_prepared 
    // [177] phi from mulf8u::@1 to mulf8u_prepared [phi:mulf8u::@1->mulf8u_prepared]
  mulf8u_prepared_from___b1:
    // [177] phi (byte) mulf8u_prepared::b#2 = (byte) mulf8u_prepared::b#0 [phi:mulf8u::@1->mulf8u_prepared#0] -- register_copy 
    jsr mulf8u_prepared
    // [266] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
    jmp __b2
    // mulf8u::@2
  __b2:
    // [267] (word) mulf8u::return#0 ← (word) mulf8u_prepared::return#2
    jmp __breturn
    // mulf8u::@return
  __breturn:
    // [268] return 
    rts
}
  // muls8u
// Slow multiplication of unsigned bytes
// Calculate an unsigned multiplication by repeated addition
// muls8u(byte zp($d) a, byte register(X) b)
muls8u: {
    .label return = 5
    .label m = 5
    .label a = $d
    // [269] if((byte) muls8u::a#0==(byte) 0) goto muls8u::@1 -- vbuz1_eq_0_then_la1 
    lda.z a
    cmp #0
    beq __b1_from_muls8u
    // [270] phi from muls8u to muls8u::@2 [phi:muls8u->muls8u::@2]
  __b2_from_muls8u:
    // [270] phi (word) muls8u::m#3 = (word) 0 [phi:muls8u->muls8u::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z m
    lda #>0
    sta.z m+1
    // [270] phi (byte) muls8u::i#2 = (byte) 0 [phi:muls8u->muls8u::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // muls8u::@2
  __b2:
    // [271] if((byte) muls8u::i#2!=(byte) muls8u::a#0) goto muls8u::@3 -- vbuyy_neq_vbuz1_then_la1 
    cpy.z a
    bne __b3
    // [272] phi from muls8u::@2 to muls8u::@1 [phi:muls8u::@2->muls8u::@1]
  __b1_from___b2:
    // [272] phi (word) muls8u::return#0 = (word) muls8u::m#3 [phi:muls8u::@2->muls8u::@1#0] -- register_copy 
    jmp __b1
    // [272] phi from muls8u to muls8u::@1 [phi:muls8u->muls8u::@1]
  __b1_from_muls8u:
    // [272] phi (word) muls8u::return#0 = (word) 0 [phi:muls8u->muls8u::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z return
    lda #>0
    sta.z return+1
    jmp __b1
    // muls8u::@1
  __b1:
    jmp __breturn
    // muls8u::@return
  __breturn:
    // [273] return 
    rts
    // muls8u::@3
  __b3:
    // [274] (word) muls8u::m#1 ← (word) muls8u::m#3 + (byte) muls8u::b#0 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z m
    sta.z m
    bcc !+
    inc.z m+1
  !:
    // [275] (byte) muls8u::i#1 ← ++ (byte) muls8u::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [270] phi from muls8u::@3 to muls8u::@2 [phi:muls8u::@3->muls8u::@2]
  __b2_from___b3:
    // [270] phi (word) muls8u::m#3 = (word) muls8u::m#1 [phi:muls8u::@3->muls8u::@2#0] -- register_copy 
    // [270] phi (byte) muls8u::i#2 = (byte) muls8u::i#1 [phi:muls8u::@3->muls8u::@2#1] -- register_copy 
    jmp __b2
}
  // mulf_tables_cmp
// Compare the ASM-based mul tables with the KC-based mul tables
// Red screen on failure - green on success
mulf_tables_cmp: {
    .label asm_sqr = 5
    .label kc_sqr = 3
    // [277] phi from mulf_tables_cmp to mulf_tables_cmp::@1 [phi:mulf_tables_cmp->mulf_tables_cmp::@1]
  __b1_from_mulf_tables_cmp:
    // [277] phi (byte*) mulf_tables_cmp::asm_sqr#2 = (const byte*) mula_sqr1_lo [phi:mulf_tables_cmp->mulf_tables_cmp::@1#0] -- pbuz1=pbuc1 
    lda #<mula_sqr1_lo
    sta.z asm_sqr
    lda #>mula_sqr1_lo
    sta.z asm_sqr+1
    // [277] phi (byte*) mulf_tables_cmp::kc_sqr#2 = (const byte*) mulf_sqr1_lo [phi:mulf_tables_cmp->mulf_tables_cmp::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo
    sta.z kc_sqr
    lda #>mulf_sqr1_lo
    sta.z kc_sqr+1
    jmp __b1
    // mulf_tables_cmp::@1
  __b1:
    // [278] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z kc_sqr+1
    cmp #>mulf_sqr1_lo+$200*4
    bcc __b2
    bne !+
    lda.z kc_sqr
    cmp #<mulf_sqr1_lo+$200*4
    bcc __b2
  !:
    // [279] phi from mulf_tables_cmp::@1 to mulf_tables_cmp::@3 [phi:mulf_tables_cmp::@1->mulf_tables_cmp::@3]
  __b3_from___b1:
    jmp __b3
    // mulf_tables_cmp::@3
  __b3:
    // [280] call print_str 
    // [110] phi from mulf_tables_cmp::@3 to print_str [phi:mulf_tables_cmp::@3->print_str]
  print_str_from___b3:
    // [110] phi (byte*) print_char_cursor#158 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str [phi:mulf_tables_cmp::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [281] phi from mulf_tables_cmp::@3 to mulf_tables_cmp::@6 [phi:mulf_tables_cmp::@3->mulf_tables_cmp::@6]
  __b6_from___b3:
    jmp __b6
    // mulf_tables_cmp::@6
  __b6:
    // [282] call print_ln 
    // [76] phi from mulf_tables_cmp::@6 to print_ln [phi:mulf_tables_cmp::@6->print_ln]
  print_ln_from___b6:
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@6->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@6->print_ln#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    jmp __b7
    // mulf_tables_cmp::@7
  __b7:
    // [283] (byte*) print_char_cursor#231 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [284] phi from mulf_tables_cmp::@7 to mulf_tables_cmp::@return [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return]
  __breturn_from___b7:
    // [284] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#0 [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return#0] -- register_copy 
    // [284] phi (byte*) print_char_cursor#101 = (byte*) print_char_cursor#231 [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return#1] -- register_copy 
    jmp __breturn
    // mulf_tables_cmp::@return
  __breturn:
    // [285] return 
    rts
    // mulf_tables_cmp::@2
  __b2:
    // [286] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4 -- _deref_pbuz1_eq__deref_pbuz2_then_la1 
    ldy #0
    lda (kc_sqr),y
    ldy #0
    cmp (asm_sqr),y
    beq __b4
    jmp __b5
    // mulf_tables_cmp::@5
  __b5:
    // [287] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // [288] call print_str 
    // [110] phi from mulf_tables_cmp::@5 to print_str [phi:mulf_tables_cmp::@5->print_str]
  print_str_from___b5:
    // [110] phi (byte*) print_char_cursor#158 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str1 [phi:mulf_tables_cmp::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b8
    // mulf_tables_cmp::@8
  __b8:
    // [289] (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#2
    // [290] call print_uint 
    // [96] phi from mulf_tables_cmp::@8 to print_uint [phi:mulf_tables_cmp::@8->print_uint]
  print_uint_from___b8:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@8->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#1 [phi:mulf_tables_cmp::@8->print_uint#1] -- register_copy 
    jsr print_uint
    // [291] phi from mulf_tables_cmp::@8 to mulf_tables_cmp::@9 [phi:mulf_tables_cmp::@8->mulf_tables_cmp::@9]
  __b9_from___b8:
    jmp __b9
    // mulf_tables_cmp::@9
  __b9:
    // [292] call print_str 
    // [110] phi from mulf_tables_cmp::@9 to print_str [phi:mulf_tables_cmp::@9->print_str]
  print_str_from___b9:
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mulf_tables_cmp::@9->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str2 [phi:mulf_tables_cmp::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b10
    // mulf_tables_cmp::@10
  __b10:
    // [293] (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#2 -- vwuz1=vwuz2 
    lda.z kc_sqr
    sta.z print_uint.w
    lda.z kc_sqr+1
    sta.z print_uint.w+1
    // [294] call print_uint 
    // [96] phi from mulf_tables_cmp::@10 to print_uint [phi:mulf_tables_cmp::@10->print_uint]
  print_uint_from___b10:
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@10->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#2 [phi:mulf_tables_cmp::@10->print_uint#1] -- register_copy 
    jsr print_uint
    // [284] phi from mulf_tables_cmp::@10 to mulf_tables_cmp::@return [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return]
  __breturn_from___b10:
    // [284] phi (byte*) print_line_cursor#10 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [284] phi (byte*) print_char_cursor#101 = (byte*) print_char_cursor#18 [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return#1] -- register_copy 
    jmp __breturn
    // mulf_tables_cmp::@4
  __b4:
    // [295] (byte*) mulf_tables_cmp::asm_sqr#1 ← ++ (byte*) mulf_tables_cmp::asm_sqr#2 -- pbuz1=_inc_pbuz1 
    inc.z asm_sqr
    bne !+
    inc.z asm_sqr+1
  !:
    // [296] (byte*) mulf_tables_cmp::kc_sqr#1 ← ++ (byte*) mulf_tables_cmp::kc_sqr#2 -- pbuz1=_inc_pbuz1 
    inc.z kc_sqr
    bne !+
    inc.z kc_sqr+1
  !:
    // [277] phi from mulf_tables_cmp::@4 to mulf_tables_cmp::@1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1]
  __b1_from___b4:
    // [277] phi (byte*) mulf_tables_cmp::asm_sqr#2 = (byte*) mulf_tables_cmp::asm_sqr#1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1#0] -- register_copy 
    // [277] phi (byte*) mulf_tables_cmp::kc_sqr#2 = (byte*) mulf_tables_cmp::kc_sqr#1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1#1] -- register_copy 
    jmp __b1
    str: .text "multiply tables match!"
    .byte 0
    str1: .text "multiply table mismatch at "
    .byte 0
    str2: .text " / "
    .byte 0
}
  // mulf_init_asm
// Initialize the multiplication tables using ASM code from
// http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
mulf_init_asm: {
    // Ensure the ASM tables are not detected as unused by the optimizer
    .label mem = $ff
    // asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta mula_sqr1_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta mula_sqr1_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    ldx #0
    ldy #$ff
  !:
    lda mula_sqr1_hi+1,x
    sta mula_sqr2_hi+$100,x
    lda mula_sqr1_hi,x
    sta mula_sqr2_hi,y
    lda mula_sqr1_lo+1,x
    sta mula_sqr2_lo+$100,x
    lda mula_sqr1_lo,x
    sta mula_sqr2_lo,y
    dey
    inx
    bne !-
    // [298] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr1_lo
    sta mem
    // [299] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr1_hi
    sta mem
    // [300] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr2_lo
    sta mem
    // [301] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr2_hi
    sta mem
    jmp __breturn
    // mulf_init_asm::@return
  __breturn:
    // [302] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = $10
    // Counter used for determining x%2==0
    .label sqr1_hi = 7
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $e
    .label sqr1_lo = 5
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = $b
    .label sqr2_lo = 9
    //Start with g(0)=f(255)
    .label dir = $d
    // [304] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [304] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [304] phi (byte*) mulf_init::sqr1_hi#2 = (const byte*) mulf_sqr1_hi+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [304] phi (word) mulf_init::sqr#4 = (word) 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    // [304] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [304] phi (byte*) mulf_init::sqr1_lo#2 = (const byte*) mulf_sqr1_lo+(byte) 1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    jmp __b1
    // mulf_init::@1
  __b1:
    // [305] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [306] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
  __b5_from___b1:
    // [306] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [306] phi (byte*) mulf_init::sqr2_hi#2 = (const byte*) mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [306] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [306] phi (byte*) mulf_init::sqr2_lo#2 = (const byte*) mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    jmp __b5
    // mulf_init::@5
  __b5:
    // [307] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    jmp __b7
    // mulf_init::@7
  __b7:
    // [308] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [309] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [310] return 
    rts
    // mulf_init::@6
  __b6:
    // [311] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // [312] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
    // [313] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // [314] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // [315] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b9_from___b6
    // [317] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
  __b8_from___b6:
    // [317] phi (byte) mulf_init::dir#4 = (byte) 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    jmp __b8
    // [316] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
  __b9_from___b6:
    jmp __b9
    // mulf_init::@9
  __b9:
    // [317] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
  __b8_from___b9:
    // [317] phi (byte) mulf_init::dir#4 = (byte) mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    jmp __b8
    // mulf_init::@8
  __b8:
    // [318] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [306] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
  __b5_from___b8:
    // [306] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [306] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [306] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [306] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // [319] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [320] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // [321] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3_from___b2
    jmp __b4
    // mulf_init::@4
  __b4:
    // [322] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // [323] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [324] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [324] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [324] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    jmp __b3
    // mulf_init::@3
  __b3:
    // [325] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // [326] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // [327] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // [328] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
    // [329] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // [330] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // [331] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [304] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
  __b1_from___b3:
    // [304] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [304] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [304] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [304] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [304] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [333] call memset 
    // [335] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [334] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $e
    // [336] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [336] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [337] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [338] return 
    rts
    // memset::@2
  __b2:
    // [339] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [340] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [336] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [336] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // ASM based multiplication tables
  // <(( x * x )/4)
  .align $100
  mula_sqr1_lo: .fill $200, 0
  // >(( x * x )/4)
  .align $100
  mula_sqr1_hi: .fill $200, 0
  // <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mula_sqr2_lo: .fill $200, 0
  // >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mula_sqr2_hi: .fill $200, 0
  str1: .text "*"
  .byte 0
  str2: .text " slow:"
  .byte 0
  str3: .text " / normal:"
  .byte 0
  str4: .text " / fast:"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b9
Removing instruction jmp __b6
Removing instruction jmp __b15
Removing instruction jmp __b7
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp mulf8s_prepare1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __b14
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Replacing instruction ldx memB with TAX
Removing instruction lda memA
Removing instruction lda #>0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Removing instruction ldy #0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b15_from___b6 with __b7
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b14_from___b3 with __b4
Replacing label __b2_from___b5 with __b2
Replacing label __b1_from___b8 with __b1
Replacing label __b9_from___b6 with __b8
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from_main:
Removing instruction mulf_init_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction mulf_tables_cmp_from___b3:
Removing instruction __b4_from___b3:
Removing instruction mul8u_compare_from___b4:
Removing instruction __b5_from___b4:
Removing instruction mul8s_compare_from___b5:
Removing instruction __b11_from___b2:
Removing instruction print_ln_from___b11:
Removing instruction __b9_from___b14:
Removing instruction __b6_from___b9:
Removing instruction __b15_from___b6:
Removing instruction __b15:
Removing instruction __b7_from___b15:
Removing instruction print_schar_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_str_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_str_from___b4:
Removing instruction print_sint_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_str_from___b6:
Removing instruction __b8_from___b7:
Removing instruction print_str_from___b8:
Removing instruction __b10_from___b9:
Removing instruction print_ln_from___b10:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uint_from___b2:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uchar_from___b2:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction mulf8u_prepare_from_mulf8s_prepare1:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b1_from___b8:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction __b6_from___b12:
Removing instruction __b3_from___b6:
Removing instruction __b14_from___b3:
Removing instruction __b14:
Removing instruction __b4_from___b14:
Removing instruction __b9_from___b8:
Removing instruction print_str_from___b9:
Removing instruction __b13_from___b9:
Removing instruction print_ln_from___b13:
Removing instruction print_uchar_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_str_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_str_from___b4:
Removing instruction print_uint_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_str_from___b6:
Removing instruction __b8_from___b7:
Removing instruction print_str_from___b8:
Removing instruction __b10_from___b9:
Removing instruction print_ln_from___b10:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3_from___b1:
Removing instruction print_str_from___b3:
Removing instruction __b6_from___b3:
Removing instruction print_ln_from___b6:
Removing instruction __breturn_from___b7:
Removing instruction print_uint_from___b8:
Removing instruction __b9_from___b8:
Removing instruction print_str_from___b9:
Removing instruction __b9_from___b6:
Removing instruction __b9:
Removing instruction __b8_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_mul8s_compare:
Removing instruction __b2:
Removing instruction print_str_from___b2:
Removing instruction __b11:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b12:
Removing instruction mulf8s_from___b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b9:
Removing instruction __b7_from___b6:
Removing instruction __b10:
Removing instruction __b3_from___b8:
Removing instruction print_str_from_mul8s_error:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_schar_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction print_sint_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction print_sint_from___b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction mul8u_from_mul8s:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction mulf8s_prepare1:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction mulf8u_prepared_from_mulf8s_prepared:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b6:
Removing instruction __b1_from_mul8u_compare:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction mul8u_from___b11:
Removing instruction __b12:
Removing instruction __b6:
Removing instruction __b4_from___b3:
Removing instruction __b7:
Removing instruction mul8u_error_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b13:
Removing instruction print_str_from_mul8u_error:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_uchar_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction print_uint_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction print_uint_from___b9:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction mulf8u_prepare_from_mulf8u:
Removing instruction __b1:
Removing instruction mulf8u_prepared_from___b1:
Removing instruction __b2:
Removing instruction __b2_from_muls8u:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_mulf_tables_cmp:
Removing instruction __b3:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b5:
Removing instruction print_str_from___b5:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction print_uint_from___b10:
Removing instruction __breturn_from___b10:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Removing instruction __b1_from_mulf_init:
Removing instruction __b5_from___b1:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b8_from___b6:
Removing instruction __b5_from___b8:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __b1
Skipping double jump to __b1 in jmp __b1_from___b5
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __b1
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Relabelling long label __b6_from___b14 to __b5
Relabelling long label __b1_from___b5 to __b2
Relabelling long label __b1_from___b2 to __b7
Relabelling long label __b5_from_muls8s to __b8
Relabelling long label __b3_from___b12 to __b6
Relabelling long label __b1_from_muls8u to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b8
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Removing instruction lda.z a
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __b1
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte*) BG_COLOR = (byte*) 53281
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:14 2002.0
(byte*) memset::dst#2 dst zp[2]:14 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
(byte~) mul8s::$11 reg byte a 20002.0
(byte~) mul8s::$12 reg byte a 20002.0
(byte~) mul8s::$6 reg byte a 20002.0
(byte~) mul8s::$9 reg byte a 20002.0
(label) mul8s::@1
(label) mul8s::@2
(label) mul8s::@3
(label) mul8s::@4
(label) mul8s::@5
(label) mul8s::@return
(signed byte) mul8s::a
(signed byte) mul8s::a#0 a zp[1]:13 785.8571428571429
(signed byte) mul8s::b
(signed byte) mul8s::b#0 reg byte y 1000.1818181818181
(word) mul8s::m
(word) mul8s::m#0 m zp[2]:9 10001.0
(word) mul8s::m#1 m zp[2]:9 20002.0
(word) mul8s::m#2 m zp[2]:9 20002.0
(word) mul8s::m#4 m zp[2]:9 6667.333333333333
(word) mul8s::m#5 m zp[2]:9 12501.25
(signed word) mul8s::return
(void()) mul8s_compare()
(label) mul8s_compare::@1
(label) mul8s_compare::@10
(label) mul8s_compare::@11
(label) mul8s_compare::@12
(label) mul8s_compare::@13
(label) mul8s_compare::@14
(label) mul8s_compare::@15
(label) mul8s_compare::@2
(label) mul8s_compare::@3
(label) mul8s_compare::@4
(label) mul8s_compare::@5
(label) mul8s_compare::@6
(label) mul8s_compare::@7
(label) mul8s_compare::@8
(label) mul8s_compare::@9
(label) mul8s_compare::@return
(signed byte) mul8s_compare::a
(signed byte) mul8s_compare::a#1 a zp[1]:13 202.0
(signed byte) mul8s_compare::a#10 a zp[1]:13 122.85185185185186
(signed byte) mul8s_compare::b
(signed byte) mul8s_compare::b#1 b zp[1]:2 2002.0
(signed byte) mul8s_compare::b#10 b zp[1]:2 240.67999999999998
(signed word) mul8s_compare::mf
(signed word) mul8s_compare::mf#0 mf zp[2]:11 118.41176470588235
(signed word) mul8s_compare::mn
(signed word) mul8s_compare::mn#0 mn zp[2]:9 167.75
(signed word) mul8s_compare::ms
(signed word) mul8s_compare::ms#0 ms zp[2]:5 150.7
(byte) mul8s_compare::ok
(byte) mul8s_compare::ok#3 reg byte x 2002.0
(byte) mul8s_compare::ok#4 reg byte x 333.6666666666667
(const byte*) mul8s_compare::str[(byte) $1f]  = (byte*) "signed multiply results match!"
(void()) mul8s_error((signed byte) mul8s_error::a , (signed byte) mul8s_error::b , (signed word) mul8s_error::ms , (signed word) mul8s_error::mn , (signed word) mul8s_error::mf)
(label) mul8s_error::@1
(label) mul8s_error::@10
(label) mul8s_error::@2
(label) mul8s_error::@3
(label) mul8s_error::@4
(label) mul8s_error::@5
(label) mul8s_error::@6
(label) mul8s_error::@7
(label) mul8s_error::@8
(label) mul8s_error::@9
(label) mul8s_error::@return
(signed byte) mul8s_error::a
(signed byte) mul8s_error::a#0 reg byte x 16.0
(signed byte) mul8s_error::b
(signed byte) mul8s_error::b#0 b zp[1]:2 11.2
(signed word) mul8s_error::mf
(signed word) mul8s_error::mf#0 mf zp[2]:11 5.894736842105264
(signed word) mul8s_error::mn
(signed word) mul8s_error::mn#0 mn zp[2]:9 7.0
(signed word) mul8s_error::ms
(signed word) mul8s_error::ms#0 ms zp[2]:5 8.615384615384615
(const byte*) mul8s_error::str[(byte) $1a]  = (byte*) "signed multiply mismatch "
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 2.00000002E8
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 1.00000001E8
(byte) mul8u::a#1 reg byte x 10001.0
(byte) mul8u::a#2 reg byte x 1001.0
(byte) mul8u::a#3 reg byte x 6.668333416666667E7
(byte) mul8u::a#6 reg byte x 55501.5
(byte) mul8u::b
(byte) mul8u::b#0 reg byte a 20002.0
(byte) mul8u::b#1 reg byte a 2002.0
(byte) mul8u::b#2 reg byte a 11002.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:14 200002.0
(word) mul8u::mb#1 mb zp[2]:14 2.00000002E8
(word) mul8u::mb#2 mb zp[2]:14 4.287142914285715E7
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:9 2.00000002E8
(word) mul8u::res#2 res zp[2]:9 4.2858715E7
(word) mul8u::res#6 res zp[2]:9 1.00000001E8
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:9 20002.0
(word) mul8u::return#3 return zp[2]:9 2002.0
(void()) mul8u_compare()
(label) mul8u_compare::@1
(label) mul8u_compare::@10
(label) mul8u_compare::@11
(label) mul8u_compare::@12
(label) mul8u_compare::@13
(label) mul8u_compare::@14
(label) mul8u_compare::@2
(label) mul8u_compare::@3
(label) mul8u_compare::@4
(label) mul8u_compare::@5
(label) mul8u_compare::@6
(label) mul8u_compare::@7
(label) mul8u_compare::@8
(label) mul8u_compare::@9
(label) mul8u_compare::@return
(byte) mul8u_compare::a
(byte) mul8u_compare::a#1 a zp[1]:13 151.5
(byte) mul8u_compare::a#7 a zp[1]:13 119.11111111111111
(byte) mul8u_compare::b
(byte) mul8u_compare::b#1 b zp[1]:2 1501.5
(byte) mul8u_compare::b#10 b zp[1]:2 200.64
(word) mul8u_compare::mf
(word) mul8u_compare::mf#0 mf zp[2]:11 111.83333333333334
(word) mul8u_compare::mn
(word) mul8u_compare::mn#0 mn zp[2]:9 167.75
(word) mul8u_compare::ms
(word) mul8u_compare::ms#0 ms zp[2]:5 143.52380952380952
(byte) mul8u_compare::ok
(byte) mul8u_compare::ok#3 reg byte x 2002.0
(byte) mul8u_compare::ok#4 reg byte x 333.6666666666667
(const byte*) mul8u_compare::str[(byte) $18]  = (byte*) "multiply results match!"
(void()) mul8u_error((byte) mul8u_error::a , (byte) mul8u_error::b , (word) mul8u_error::ms , (word) mul8u_error::mn , (word) mul8u_error::mf)
(label) mul8u_error::@1
(label) mul8u_error::@10
(label) mul8u_error::@2
(label) mul8u_error::@3
(label) mul8u_error::@4
(label) mul8u_error::@5
(label) mul8u_error::@6
(label) mul8u_error::@7
(label) mul8u_error::@8
(label) mul8u_error::@9
(label) mul8u_error::@return
(byte) mul8u_error::a
(byte) mul8u_error::a#0 reg byte x 16.0
(byte) mul8u_error::b
(byte) mul8u_error::b#0 b zp[1]:2 11.2
(word) mul8u_error::mf
(word) mul8u_error::mf#0 mf zp[2]:11 5.894736842105264
(word) mul8u_error::mn
(word) mul8u_error::mn#0 mn zp[2]:9 7.0
(word) mul8u_error::ms
(word) mul8u_error::ms#0 ms zp[2]:5 8.615384615384615
(const byte*) mul8u_error::str[(byte) $13]  = (byte*) "multiply mismatch "
(const byte*) mula_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mula_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mula_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mula_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
(label) mulf8s::@1
(label) mulf8s::@2
(label) mulf8s::@return
(signed byte) mulf8s::a
(signed byte) mulf8s::a#0 reg byte a 333.6666666666667
(signed byte) mulf8s::b
(signed byte) mulf8s::b#0 reg byte x 2750.5
(label) mulf8s::mulf8s_prepare1
(signed byte) mulf8s::mulf8s_prepare1_a
(signed word) mulf8s::return
(signed word) mulf8s::return#0 return zp[2]:11 3667.333333333333
(signed word) mulf8s::return#2 return zp[2]:11 2002.0
(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
(byte~) mulf8s_prepared::$11 reg byte a 200002.0
(byte~) mulf8s_prepared::$12 reg byte a 200002.0
(byte~) mulf8s_prepared::$6 reg byte a 200002.0
(byte~) mulf8s_prepared::$9 reg byte a 200002.0
(label) mulf8s_prepared::@1
(label) mulf8s_prepared::@2
(label) mulf8s_prepared::@3
(label) mulf8s_prepared::@4
(label) mulf8s_prepared::@5
(label) mulf8s_prepared::@return
(signed byte) mulf8s_prepared::b
(signed byte) mulf8s_prepared::b#0 b zp[1]:16 11000.2
(word) mulf8s_prepared::m
(word) mulf8s_prepared::m#0 m zp[2]:11 100001.0
(word) mulf8s_prepared::m#1 m zp[2]:11 200002.0
(word) mulf8s_prepared::m#2 m zp[2]:11 200002.0
(word) mulf8s_prepared::m#4 m zp[2]:11 66667.33333333333
(word) mulf8s_prepared::m#5 m zp[2]:11 125001.25
(const nomodify signed byte*) mulf8s_prepared::memA = (signed byte*) 253
(signed word) mulf8s_prepared::return
(word()) mulf8u((byte) mulf8u::a , (byte) mulf8u::b)
(label) mulf8u::@1
(label) mulf8u::@2
(label) mulf8u::@return
(byte) mulf8u::a
(byte) mulf8u::a#0 reg byte a 5501.0
(byte) mulf8u::b
(byte) mulf8u::b#0 reg byte x 3667.333333333333
(word) mulf8u::return
(word) mulf8u::return#0 return zp[2]:11 3667.333333333333
(word) mulf8u::return#2 return zp[2]:11 2002.0
(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
(label) mulf8u_prepare::@return
(byte) mulf8u_prepare::a
(byte) mulf8u_prepare::a#0 reg byte a 20002.0
(byte) mulf8u_prepare::a#1 reg byte a 20002.0
(byte) mulf8u_prepare::a#2 reg byte a 120003.0
(const nomodify byte*) mulf8u_prepare::memA = (byte*) 253
(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
(label) mulf8u_prepared::@return
(byte) mulf8u_prepared::b
(byte) mulf8u_prepared::b#0 reg byte a 20002.0
(byte) mulf8u_prepared::b#1 reg byte a 200002.0
(byte) mulf8u_prepared::b#2 reg byte a 1110003.0
(const nomodify byte*) mulf8u_prepared::memB = (byte*) 255
(const nomodify byte*) mulf8u_prepared::resL = (byte*) 254
(word) mulf8u_prepared::return
(word) mulf8u_prepared::return#0 return zp[2]:11 277500.75
(word) mulf8u_prepared::return#2 return zp[2]:11 20002.0
(word) mulf8u_prepared::return#3 return zp[2]:11 200002.0
(void()) mulf_init()
(byte~) mulf_init::$1 reg byte a 202.0
(byte~) mulf_init::$4 reg byte a 202.0
(byte~) mulf_init::$5 reg byte a 202.0
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 c zp[1]:16 23.307692307692307
(byte) mulf_init::c#2 c zp[1]:16 101.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp[1]:13 37.875
(byte) mulf_init::dir#4 dir zp[1]:13 101.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp[2]:14 101.0
(word) mulf_init::sqr#2 sqr zp[2]:14 202.0
(word) mulf_init::sqr#3 sqr zp[2]:14 84.16666666666666
(word) mulf_init::sqr#4 sqr zp[2]:14 50.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp[2]:7 67.33333333333333
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp[2]:7 25.25
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp[2]:5 202.0
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp[2]:5 28.857142857142858
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp[2]:11 33.666666666666664
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp[2]:11 75.75
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp[2]:9 202.0
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp[2]:9 44.888888888888886
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 reg byte x 101.0
(byte) mulf_init::x_2#2 reg byte x 50.5
(byte) mulf_init::x_2#3 reg byte x 60.599999999999994
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 60.599999999999994
(byte) mulf_init::x_255#2 reg byte x 80.8
(void()) mulf_init_asm()
(label) mulf_init_asm::@return
(const byte*) mulf_init_asm::mem = (byte*) 255
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(void()) mulf_tables_cmp()
(label) mulf_tables_cmp::@1
(label) mulf_tables_cmp::@10
(label) mulf_tables_cmp::@2
(label) mulf_tables_cmp::@3
(label) mulf_tables_cmp::@4
(label) mulf_tables_cmp::@5
(label) mulf_tables_cmp::@6
(label) mulf_tables_cmp::@7
(label) mulf_tables_cmp::@8
(label) mulf_tables_cmp::@9
(label) mulf_tables_cmp::@return
(byte*) mulf_tables_cmp::asm_sqr
(byte*) mulf_tables_cmp::asm_sqr#1 asm_sqr zp[2]:5 101.0
(byte*) mulf_tables_cmp::asm_sqr#2 asm_sqr zp[2]:5 60.599999999999994
(byte*) mulf_tables_cmp::kc_sqr
(byte*) mulf_tables_cmp::kc_sqr#1 kc_sqr zp[2]:3 202.0
(byte*) mulf_tables_cmp::kc_sqr#2 kc_sqr zp[2]:3 40.4
(const byte*) mulf_tables_cmp::str[(byte) $17]  = (byte*) "multiply tables match!"
(const byte*) mulf_tables_cmp::str1[(byte) $1c]  = (byte*) "multiply table mismatch at "
(const byte*) mulf_tables_cmp::str2[(byte) 4]  = (byte*) " / "
(signed word()) muls8s((signed byte) muls8s::a , (signed byte) muls8s::b)
(label) muls8s::@1
(label) muls8s::@2
(label) muls8s::@3
(label) muls8s::@4
(label) muls8s::@5
(label) muls8s::@6
(label) muls8s::@return
(signed byte) muls8s::a
(signed byte) muls8s::a#0 a zp[1]:13 1668417.0833333333
(signed byte) muls8s::b
(signed byte) muls8s::b#0 reg byte x 1818273.0
(signed byte) muls8s::i
(signed byte) muls8s::i#1 reg byte y 2.0000002E7
(signed byte) muls8s::i#2 reg byte y 1.0000001E7
(signed byte) muls8s::j
(signed byte) muls8s::j#1 reg byte y 2.0000002E7
(signed byte) muls8s::j#2 reg byte y 1.0000001E7
(signed word) muls8s::m
(signed word) muls8s::m#1 m zp[2]:5 1.0000001E7
(signed word) muls8s::m#2 m zp[2]:5 1.0000001E7
(signed word) muls8s::m#3 m zp[2]:5 1.50000015E7
(signed word) muls8s::m#5 m zp[2]:5 1.50000015E7
(signed word) muls8s::return
(signed word) muls8s::return#0 return zp[2]:5 6667001.0
(signed word) muls8s::return#2 return zp[2]:5 2002.0
(word()) muls8u((byte) muls8u::a , (byte) muls8u::b)
(label) muls8u::@1
(label) muls8u::@2
(label) muls8u::@3
(label) muls8u::@return
(byte) muls8u::a
(byte) muls8u::a#0 a zp[1]:13 1430143.2857142857
(byte) muls8u::b
(byte) muls8u::b#0 reg byte x 1666833.6666666665
(byte) muls8u::i
(byte) muls8u::i#1 reg byte y 2.0000002E7
(byte) muls8u::i#2 reg byte y 1.0000001E7
(word) muls8u::m
(word) muls8u::m#1 m zp[2]:5 1.0000001E7
(word) muls8u::m#3 m zp[2]:5 1.50000015E7
(word) muls8u::return
(word) muls8u::return#0 return zp[2]:5 3333667.333333333
(word) muls8u::return#2 return zp[2]:5 2002.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 20002.0
(byte) print_char::ch#5 reg byte a 200002.0
(byte) print_char::ch#6 reg byte a 200002.0
(byte) print_char::ch#7 reg byte a 1210004.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:7 608.7380952380953
(byte*) print_char_cursor#101 print_char_cursor zp[2]:7 3.2682926829268295
(byte*) print_char_cursor#138 print_char_cursor zp[2]:7 2559.0
(byte*) print_char_cursor#145 print_char_cursor zp[2]:7 5663.5
(byte*) print_char_cursor#146 print_char_cursor zp[2]:7 40401.999999999985
(byte*) print_char_cursor#158 print_char_cursor zp[2]:7 2044.0
(byte*) print_char_cursor#18 print_char_cursor zp[2]:7 22460.76000000001
(byte*) print_char_cursor#192 print_char_cursor zp[2]:7 22.0
(byte*) print_char_cursor#193 print_char_cursor zp[2]:7 202.0
(byte*) print_char_cursor#231 print_char_cursor zp[2]:7 22.0
(byte*) print_char_cursor#87 print_char_cursor zp[2]:7 1107004.5
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:3 432.1285714285714
(byte*) print_line_cursor#10 print_line_cursor zp[2]:3 1.9523809523809526
(byte*) print_line_cursor#24 print_line_cursor zp[2]:3 21003.0
(byte*) print_line_cursor#47 print_line_cursor zp[2]:3 1225.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 reg byte x 2002.0
(signed byte) print_schar::b#1 reg byte x 202.0
(signed byte) print_schar::b#2 reg byte x 202.0
(signed byte) print_schar::b#3 reg byte x 534.1666666666667
(signed byte) print_schar::b#5 reg byte x 2002.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:5 2002.0
(signed word) print_sint::w#1 w zp[2]:5 202.0
(signed word) print_sint::w#2 w zp[2]:5 202.0
(signed word) print_sint::w#3 w zp[2]:5 202.0
(signed word) print_sint::w#4 w zp[2]:5 551.0
(signed word) print_sint::w#6 w zp[2]:5 2002.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:14 20002.0
(byte*) print_str::str#16 str zp[2]:14 10251.25
(byte*) print_str::str#19 str zp[2]:14 1001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 200002.0
(byte~) print_uchar::$2 reg byte x 200002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 2002.0
(byte) print_uchar::b#1 reg byte x 20002.0
(byte) print_uchar::b#2 reg byte x 20002.0
(byte) print_uchar::b#3 reg byte x 202.0
(byte) print_uchar::b#4 reg byte x 202.0
(byte) print_uchar::b#5 reg byte x 55301.75
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:5 2002.0
(word) print_uint::w#1 w zp[2]:5 22.0
(word) print_uint::w#2 w zp[2]:5 22.0
(word) print_uint::w#3 w zp[2]:5 202.0
(word) print_uint::w#4 w zp[2]:5 202.0
(word) print_uint::w#5 w zp[2]:5 202.0
(word) print_uint::w#6 w zp[2]:5 7109.333333333333
(const byte*) str1[(byte) 2]  = (byte*) "*"
(const byte*) str2[(byte) 7]  = (byte*) " slow:"
(const byte*) str3[(byte) $b]  = (byte*) " / normal:"
(const byte*) str4[(byte) 9]  = (byte*) " / fast:"

reg byte x [ mul8s_compare::ok#3 mul8s_compare::ok#4 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
reg byte x [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
reg byte x [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
reg byte a [ mul8u::b#2 mul8u::b#0 mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
reg byte a [ mulf8u_prepared::b#2 mulf8u_prepared::b#1 mulf8u_prepared::b#0 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#1 mulf8u_prepare::a#0 ]
reg byte y [ muls8s::j#2 muls8s::j#1 ]
reg byte y [ muls8s::i#2 muls8s::i#1 ]
zp[1]:2 [ mul8u_compare::b#10 mul8u_compare::b#1 mul8u_error::b#0 mul8s_compare::b#10 mul8s_compare::b#1 mul8s_error::b#0 ]
reg byte x [ mul8u_compare::ok#3 mul8u_compare::ok#4 ]
reg byte y [ muls8u::i#2 muls8u::i#1 ]
zp[2]:3 [ mulf_tables_cmp::kc_sqr#2 mulf_tables_cmp::kc_sqr#1 print_line_cursor#24 print_line_cursor#47 print_line_cursor#0 print_line_cursor#10 ]
zp[2]:5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 print_sint::w#6 print_sint::w#0 print_sint::w#4 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_uint::w#6 print_uint::w#3 print_uint::w#4 print_uint::w#5 print_uint::w#2 print_uint::w#1 print_uint::w#0 mul8s_error::ms#0 mulf_tables_cmp::asm_sqr#2 mulf_tables_cmp::asm_sqr#1 mul8s_compare::ms#0 mul8u_compare::ms#0 mul8u_error::ms#0 muls8s::return#0 muls8s::m#3 muls8s::m#1 muls8s::m#5 muls8s::m#2 muls8s::return#2 muls8u::return#0 muls8u::m#3 muls8u::m#1 muls8u::return#2 ]
zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 print_char_cursor#158 print_char_cursor#192 print_char_cursor#193 print_char_cursor#145 print_char_cursor#87 print_char_cursor#138 print_char_cursor#1 print_char_cursor#18 print_char_cursor#146 print_char_cursor#101 print_char_cursor#231 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
zp[2]:9 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 mul8s_compare::mn#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mul8s_error::mn#0 mul8u_compare::mn#0 mul8u_error::mn#0 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[2]:11 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#3 mulf8s::return#2 mul8s_compare::mf#0 mulf8u_prepared::return#0 mulf8u_prepared::return#2 mul8s_error::mf#0 mulf8u::return#2 mul8u_compare::mf#0 mulf8u::return#0 mul8u_error::mf#0 ]
zp[1]:13 [ mulf_init::dir#2 mulf_init::dir#4 mul8u_compare::a#7 mul8u_compare::a#1 muls8u::a#0 mul8s_compare::a#10 mul8s_compare::a#1 muls8s::a#0 mul8s::a#0 ]
zp[2]:14 [ memset::dst#2 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_str::str#16 print_str::str#19 print_str::str#0 ]
reg byte x [ muls8s::b#0 ]
reg byte a [ mulf8s::a#0 ]
reg byte x [ mulf8s::b#0 ]
reg byte y [ mul8s::b#0 ]
reg byte x [ mul8s_error::a#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ mul8s::$6 ]
reg byte a [ mul8s::$11 ]
reg byte a [ mul8s::$9 ]
reg byte a [ mul8s::$12 ]
reg byte a [ mul8u::$1 ]
zp[1]:16 [ mulf8s_prepared::b#0 mulf_init::c#2 mulf_init::c#1 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte x [ muls8u::b#0 ]
reg byte a [ mulf8u::a#0 ]
reg byte x [ mulf8u::b#0 ]
reg byte x [ mul8u_error::a#0 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]


FINAL ASSEMBLER
Score: 236672

  // File Comments
// Test the fast multiplication library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BG_COLOR = $d021
  .label print_screen = $400
  .label print_char_cursor = 7
  .label print_line_cursor = 3
  // main
main: {
    // *BG_COLOR = 5
    // [0] *((const byte*) BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    // print_cls()
    // [1] call print_cls 
    // [332] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // mulf_init()
    // [3] call mulf_init 
    // [303] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
    jsr mulf_init
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // mulf_init_asm()
    // [5] call mulf_init_asm 
    jsr mulf_init_asm
    // [6] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // mulf_tables_cmp()
    // [7] call mulf_tables_cmp 
    // [276] phi from main::@3 to mulf_tables_cmp [phi:main::@3->mulf_tables_cmp]
    jsr mulf_tables_cmp
    // [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // mul8u_compare()
    // [9] call mul8u_compare 
    // [198] phi from main::@4 to mul8u_compare [phi:main::@4->mul8u_compare]
    jsr mul8u_compare
    // [10] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // mul8s_compare()
    // [11] call mul8s_compare 
    // [13] phi from main::@5 to mul8s_compare [phi:main::@5->mul8s_compare]
    jsr mul8s_compare
    // main::@return
    // }
    // [12] return 
    rts
}
  // mul8s_compare
// Perform all possible signed byte multiplications (slow and fast) and compare the results
mul8s_compare: {
    .label ms = 5
    .label mf = $b
    .label mn = 9
    .label a = $d
    .label b = 2
    // [14] phi from mul8s_compare to mul8s_compare::@1 [phi:mul8s_compare->mul8s_compare::@1]
    // [14] phi (signed byte) mul8s_compare::a#10 = (signed byte) -$80 [phi:mul8s_compare->mul8s_compare::@1#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z a
    // mul8s_compare::@1
  __b1:
    // for(signed byte a = -128; a!=-128; a++)
    // [15] if((signed byte) mul8s_compare::a#10!=(signed byte) -$80) goto mul8s_compare::@3 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z a
    bne __b2
    // mul8s_compare::@2
    // [16] (byte*) print_char_cursor#192 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("signed multiply results match!")
    // [17] call print_str 
    // [110] phi from mul8s_compare::@2 to print_str [phi:mul8s_compare::@2->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#192 [phi:mul8s_compare::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8s_compare::str [phi:mul8s_compare::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [18] phi from mul8s_compare::@2 to mul8s_compare::@11 [phi:mul8s_compare::@2->mul8s_compare::@11]
    // mul8s_compare::@11
    // print_ln()
    // [19] call print_ln 
    // [76] phi from mul8s_compare::@11 to print_ln [phi:mul8s_compare::@11->print_ln]
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mul8s_compare::@11->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#0 [phi:mul8s_compare::@11->print_ln#1] -- register_copy 
    jsr print_ln
    // mul8s_compare::@return
    // }
    // [20] return 
    rts
    // [21] phi from mul8s_compare::@1 to mul8s_compare::@3 [phi:mul8s_compare::@1->mul8s_compare::@3]
  __b2:
    // [21] phi (signed byte) mul8s_compare::b#10 = (signed byte) -$80 [phi:mul8s_compare::@1->mul8s_compare::@3#0] -- vbsz1=vbsc1 
    lda #-$80
    sta.z b
    // mul8s_compare::@3
  __b3:
    // for(signed byte b = -128; b!=-128; b++)
    // [22] if((signed byte) mul8s_compare::b#10!=(signed byte) -$80) goto mul8s_compare::@4 -- vbsz1_neq_vbsc1_then_la1 
    lda #-$80
    cmp.z b
    bne __b4
    // mul8s_compare::@5
    // for(signed byte a = -128; a!=-128; a++)
    // [23] (signed byte) mul8s_compare::a#1 ← ++ (signed byte) mul8s_compare::a#10 -- vbsz1=_inc_vbsz1 
    inc.z a
    // [14] phi from mul8s_compare::@5 to mul8s_compare::@1 [phi:mul8s_compare::@5->mul8s_compare::@1]
    // [14] phi (signed byte) mul8s_compare::a#10 = (signed byte) mul8s_compare::a#1 [phi:mul8s_compare::@5->mul8s_compare::@1#0] -- register_copy 
    jmp __b1
    // mul8s_compare::@4
  __b4:
    // muls8s(a, b)
    // [24] (signed byte) muls8s::a#0 ← (signed byte) mul8s_compare::a#10
    // [25] (signed byte) muls8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsxx=vbsz1 
    ldx.z b
    // [26] call muls8s 
    jsr muls8s
    // [27] (signed word) muls8s::return#2 ← (signed word) muls8s::return#0
    // mul8s_compare::@12
    // ms = muls8s(a, b)
    // [28] (signed word) mul8s_compare::ms#0 ← (signed word) muls8s::return#2
    // mulf8s(a,b)
    // [29] (signed byte) mulf8s::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsaa=vbsz1 
    lda.z a
    // [30] (signed byte) mulf8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsxx=vbsz1 
    ldx.z b
    // [31] call mulf8s 
    // [155] phi from mul8s_compare::@12 to mulf8s [phi:mul8s_compare::@12->mulf8s]
    jsr mulf8s
    // mulf8s(a,b)
    // [32] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0
    // mul8s_compare::@13
    // mf = mulf8s(a,b)
    // [33] (signed word) mul8s_compare::mf#0 ← (signed word) mulf8s::return#2
    // mul8s(a,b)
    // [34] (signed byte) mul8s::a#0 ← (signed byte) mul8s_compare::a#10
    // [35] (signed byte) mul8s::b#0 ← (signed byte) mul8s_compare::b#10 -- vbsyy=vbsz1 
    ldy.z b
    // [36] call mul8s 
    jsr mul8s
    // mul8s_compare::@14
    // mn = mul8s(a,b)
    // [37] (signed word) mul8s_compare::mn#0 ← (signed word)(word) mul8s::m#4
    // if(ms!=mf)
    // [38] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mf#0) goto mul8s_compare::@6 -- vwsz1_eq_vwsz2_then_la1 
    lda.z ms
    cmp.z mf
    bne !+
    lda.z ms+1
    cmp.z mf+1
    beq __b5
  !:
    // [39] phi from mul8s_compare::@14 to mul8s_compare::@9 [phi:mul8s_compare::@14->mul8s_compare::@9]
    // mul8s_compare::@9
    // [40] phi from mul8s_compare::@9 to mul8s_compare::@6 [phi:mul8s_compare::@9->mul8s_compare::@6]
    // [40] phi (byte) mul8s_compare::ok#4 = (byte) 0 [phi:mul8s_compare::@9->mul8s_compare::@6#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b6
    // [40] phi from mul8s_compare::@14 to mul8s_compare::@6 [phi:mul8s_compare::@14->mul8s_compare::@6]
  __b5:
    // [40] phi (byte) mul8s_compare::ok#4 = (byte) 1 [phi:mul8s_compare::@14->mul8s_compare::@6#0] -- vbuxx=vbuc1 
    ldx #1
    // mul8s_compare::@6
  __b6:
    // if(ms!=mn)
    // [41] if((signed word) mul8s_compare::ms#0==(signed word) mul8s_compare::mn#0) goto mul8s_compare::@15 -- vwsz1_eq_vwsz2_then_la1 
    lda.z ms
    cmp.z mn
    bne !+
    lda.z ms+1
    cmp.z mn+1
    beq __b7
  !:
    // [43] phi from mul8s_compare::@6 to mul8s_compare::@7 [phi:mul8s_compare::@6->mul8s_compare::@7]
    // [43] phi (byte) mul8s_compare::ok#3 = (byte) 0 [phi:mul8s_compare::@6->mul8s_compare::@7#0] -- vbuxx=vbuc1 
    ldx #0
    // [42] phi from mul8s_compare::@6 to mul8s_compare::@15 [phi:mul8s_compare::@6->mul8s_compare::@15]
    // mul8s_compare::@15
    // [43] phi from mul8s_compare::@15 to mul8s_compare::@7 [phi:mul8s_compare::@15->mul8s_compare::@7]
    // [43] phi (byte) mul8s_compare::ok#3 = (byte) mul8s_compare::ok#4 [phi:mul8s_compare::@15->mul8s_compare::@7#0] -- register_copy 
    // mul8s_compare::@7
  __b7:
    // if(ok==0)
    // [44] if((byte) mul8s_compare::ok#3!=(byte) 0) goto mul8s_compare::@8 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b8
    // mul8s_compare::@10
    // *BG_COLOR = 2
    // [45] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // mul8s_error(a,b, ms, mn, mf)
    // [46] (signed byte) mul8s_error::a#0 ← (signed byte) mul8s_compare::a#10 -- vbsxx=vbsz1 
    ldx.z a
    // [47] (signed byte) mul8s_error::b#0 ← (signed byte) mul8s_compare::b#10
    // [48] (signed word) mul8s_error::ms#0 ← (signed word) mul8s_compare::ms#0
    // [49] (signed word) mul8s_error::mn#0 ← (signed word) mul8s_compare::mn#0
    // [50] (signed word) mul8s_error::mf#0 ← (signed word) mul8s_compare::mf#0
    // [51] call mul8s_error 
    jsr mul8s_error
    rts
    // mul8s_compare::@8
  __b8:
    // for(signed byte b = -128; b!=-128; b++)
    // [52] (signed byte) mul8s_compare::b#1 ← ++ (signed byte) mul8s_compare::b#10 -- vbsz1=_inc_vbsz1 
    inc.z b
    // [21] phi from mul8s_compare::@8 to mul8s_compare::@3 [phi:mul8s_compare::@8->mul8s_compare::@3]
    // [21] phi (signed byte) mul8s_compare::b#10 = (signed byte) mul8s_compare::b#1 [phi:mul8s_compare::@8->mul8s_compare::@3#0] -- register_copy 
    jmp __b3
    str: .text "signed multiply results match!"
    .byte 0
}
  // mul8s_error
// mul8s_error(signed byte register(X) a, signed byte zp(2) b, signed word zp(5) ms, signed word zp(9) mn, signed word zp($b) mf)
mul8s_error: {
    .label b = 2
    .label ms = 5
    .label mn = 9
    .label mf = $b
    // [53] (byte*) print_char_cursor#193 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("signed multiply mismatch ")
    // [54] call print_str 
    // [110] phi from mul8s_error to print_str [phi:mul8s_error->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#193 [phi:mul8s_error->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8s_error::str [phi:mul8s_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // mul8s_error::@1
    // print_schar(a)
    // [55] (signed byte) print_schar::b#1 ← (signed byte) mul8s_error::a#0
    // [56] call print_schar 
    // [117] phi from mul8s_error::@1 to print_schar [phi:mul8s_error::@1->print_schar]
    // [117] phi (signed byte) print_schar::b#3 = (signed byte) print_schar::b#1 [phi:mul8s_error::@1->print_schar#0] -- register_copy 
    jsr print_schar
    // [57] phi from mul8s_error::@1 to mul8s_error::@2 [phi:mul8s_error::@1->mul8s_error::@2]
    // mul8s_error::@2
    // print_str("*")
    // [58] call print_str 
    // [110] phi from mul8s_error::@2 to print_str [phi:mul8s_error::@2->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str1 [phi:mul8s_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // mul8s_error::@3
    // print_schar(b)
    // [59] (signed byte) print_schar::b#2 ← (signed byte) mul8s_error::b#0 -- vbsxx=vbsz1 
    ldx.z b
    // [60] call print_schar 
    // [117] phi from mul8s_error::@3 to print_schar [phi:mul8s_error::@3->print_schar]
    // [117] phi (signed byte) print_schar::b#3 = (signed byte) print_schar::b#2 [phi:mul8s_error::@3->print_schar#0] -- register_copy 
    jsr print_schar
    // [61] phi from mul8s_error::@3 to mul8s_error::@4 [phi:mul8s_error::@3->mul8s_error::@4]
    // mul8s_error::@4
    // print_str(" slow:")
    // [62] call print_str 
    // [110] phi from mul8s_error::@4 to print_str [phi:mul8s_error::@4->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@4->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str2 [phi:mul8s_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // mul8s_error::@5
    // print_sint(ms)
    // [63] (signed word) print_sint::w#1 ← (signed word) mul8s_error::ms#0
    // [64] call print_sint 
    // [81] phi from mul8s_error::@5 to print_sint [phi:mul8s_error::@5->print_sint]
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:mul8s_error::@5->print_sint#0] -- register_copy 
    jsr print_sint
    // [65] phi from mul8s_error::@5 to mul8s_error::@6 [phi:mul8s_error::@5->mul8s_error::@6]
    // mul8s_error::@6
    // print_str(" / normal:")
    // [66] call print_str 
    // [110] phi from mul8s_error::@6 to print_str [phi:mul8s_error::@6->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@6->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str3 [phi:mul8s_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // mul8s_error::@7
    // print_sint(mn)
    // [67] (signed word) print_sint::w#2 ← (signed word) mul8s_error::mn#0 -- vwsz1=vwsz2 
    lda.z mn
    sta.z print_sint.w
    lda.z mn+1
    sta.z print_sint.w+1
    // [68] call print_sint 
    // [81] phi from mul8s_error::@7 to print_sint [phi:mul8s_error::@7->print_sint]
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#2 [phi:mul8s_error::@7->print_sint#0] -- register_copy 
    jsr print_sint
    // [69] phi from mul8s_error::@7 to mul8s_error::@8 [phi:mul8s_error::@7->mul8s_error::@8]
    // mul8s_error::@8
    // print_str(" / fast:")
    // [70] call print_str 
    // [110] phi from mul8s_error::@8 to print_str [phi:mul8s_error::@8->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8s_error::@8->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str4 [phi:mul8s_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // mul8s_error::@9
    // print_sint(mf)
    // [71] (signed word) print_sint::w#3 ← (signed word) mul8s_error::mf#0 -- vwsz1=vwsz2 
    lda.z mf
    sta.z print_sint.w
    lda.z mf+1
    sta.z print_sint.w+1
    // [72] call print_sint 
    // [81] phi from mul8s_error::@9 to print_sint [phi:mul8s_error::@9->print_sint]
    // [81] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#3 [phi:mul8s_error::@9->print_sint#0] -- register_copy 
    jsr print_sint
    // [73] phi from mul8s_error::@9 to mul8s_error::@10 [phi:mul8s_error::@9->mul8s_error::@10]
    // mul8s_error::@10
    // print_ln()
    // [74] call print_ln 
    // [76] phi from mul8s_error::@10 to print_ln [phi:mul8s_error::@10->print_ln]
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:mul8s_error::@10->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#0 [phi:mul8s_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    // mul8s_error::@return
    // }
    // [75] return 
    rts
    str: .text "signed multiply mismatch "
    .byte 0
}
  // print_ln
// Print a newline
print_ln: {
    // [77] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [77] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#47 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [78] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#24 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [79] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#138) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [80] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(5) w)
print_sint: {
    .label w = 5
    // if(w<0)
    // [82] if((signed word) print_sint::w#4<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [83] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [84] call print_char 
    // [92] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [85] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [85] phi (signed word) print_sint::w#6 = (signed word) print_sint::w#4 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [86] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#6
    // [87] call print_uint 
    // [96] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#18 [phi:print_sint::@2->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#1] -- register_copy 
    jsr print_uint
    // print_sint::@return
    // }
    // [88] return 
    rts
    // [89] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [90] call print_char 
    // [92] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [91] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#4 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [93] *((byte*) print_char_cursor#87) ← (byte) print_char::ch#7 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [94] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#87 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [95] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(5) w)
print_uint: {
    .label w = 5
    // print_uchar(>w)
    // [97] (byte) print_uchar::b#1 ← > (word) print_uint::w#6 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [98] call print_uchar 
    // [102] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#145 [phi:print_uint->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#1 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [99] (byte) print_uchar::b#2 ← < (word) print_uint::w#6 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [100] call print_uchar 
    // [102] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#18 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#2 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [101] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [103] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [104] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [105] call print_char 
  // Table of hexadecimal digits
    // [92] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#146 [phi:print_uchar->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#5 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [106] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [107] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [108] call print_char 
    // [92] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#18 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#6 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [109] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($e) str)
print_str: {
    .label str = $e
    // [111] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [111] phi (byte*) print_char_cursor#1 = (byte*) print_char_cursor#158 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [111] phi (byte*) print_str::str#16 = (byte*) print_str::str#19 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [112] if((byte) 0!=*((byte*) print_str::str#16)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [113] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [114] (byte) print_char::ch#0 ← *((byte*) print_str::str#16) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [115] call print_char 
    // [92] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [116] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#16 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // if(b<0)
    // [118] if((signed byte) print_schar::b#3<(signed byte) 0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [119] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [120] call print_char 
    // [92] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [121] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [121] phi (signed byte) print_schar::b#5 = (signed byte) print_schar::b#3 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [122] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#5
    // [123] call print_uchar 
    // [102] phi from print_schar::@2 to print_uchar [phi:print_schar::@2->print_uchar]
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#18 [phi:print_schar::@2->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#0 [phi:print_schar::@2->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_schar::@return
    // }
    // [124] return 
    rts
    // [125] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [126] call print_char 
    // [92] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [92] phi (byte*) print_char_cursor#87 = (byte*) print_char_cursor#1 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [92] phi (byte) print_char::ch#7 = (byte) '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [127] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#3 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // mul8s
// Multiply of two signed chars to a signed int
// Fixes offsets introduced by using unsigned multiplication
// mul8s(signed byte zp($d) a, signed byte register(Y) b)
mul8s: {
    .label m = 9
    .label a = $d
    // mul8u((char)a, (char) b)
    // [128] (byte) mul8u::a#1 ← (byte)(signed byte) mul8s::a#0 -- vbuxx=vbuz1 
    ldx.z a
    // [129] (byte) mul8u::b#0 ← (byte)(signed byte) mul8s::b#0 -- vbuaa=vbuyy 
    tya
    // [130] call mul8u 
    // [144] phi from mul8s to mul8u [phi:mul8s->mul8u]
    // [144] phi (byte) mul8u::a#6 = (byte) mul8u::a#1 [phi:mul8s->mul8u#0] -- register_copy 
    // [144] phi (byte) mul8u::b#2 = (byte) mul8u::b#0 [phi:mul8s->mul8u#1] -- register_copy 
    jsr mul8u
    // mul8u((char)a, (char) b)
    // [131] (word) mul8u::return#2 ← (word) mul8u::res#2
    // mul8s::@5
    // m = mul8u((char)a, (char) b)
    // [132] (word) mul8s::m#0 ← (word) mul8u::return#2
    // if(a<0)
    // [133] if((signed byte) mul8s::a#0>=(signed byte) 0) goto mul8s::@1 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b1
    // mul8s::@3
    // >m
    // [134] (byte~) mul8s::$6 ← > (word) mul8s::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)b
    // [135] (byte~) mul8s::$11 ← (byte~) mul8s::$6 - (byte)(signed byte) mul8s::b#0 -- vbuaa=vbuaa_minus_vbuyy 
    sty.z $ff
    sec
    sbc.z $ff
    // [136] (word) mul8s::m#1 ← (word) mul8s::m#0 hi= (byte~) mul8s::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [137] phi from mul8s::@3 mul8s::@5 to mul8s::@1 [phi:mul8s::@3/mul8s::@5->mul8s::@1]
    // [137] phi (word) mul8s::m#5 = (word) mul8s::m#1 [phi:mul8s::@3/mul8s::@5->mul8s::@1#0] -- register_copy 
    // mul8s::@1
  __b1:
    // if(b<0)
    // [138] if((signed byte) mul8s::b#0>=(signed byte) 0) goto mul8s::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b2
    // mul8s::@4
    // >m
    // [139] (byte~) mul8s::$9 ← > (word) mul8s::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)a
    // [140] (byte~) mul8s::$12 ← (byte~) mul8s::$9 - (byte)(signed byte) mul8s::a#0 -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc.z a
    // [141] (word) mul8s::m#2 ← (word) mul8s::m#5 hi= (byte~) mul8s::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [142] phi from mul8s::@1 mul8s::@4 to mul8s::@2 [phi:mul8s::@1/mul8s::@4->mul8s::@2]
    // [142] phi (word) mul8s::m#4 = (word) mul8s::m#5 [phi:mul8s::@1/mul8s::@4->mul8s::@2#0] -- register_copy 
    // mul8s::@2
  __b2:
    // mul8s::@return
    // }
    // [143] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $e
    .label res = 9
    .label return = 9
    // mb = b
    // [145] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#2 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [146] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [146] phi (word) mul8u::mb#2 = (word) mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [146] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [146] phi (byte) mul8u::a#3 = (byte) mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [147] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [148] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [149] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [150] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [151] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [152] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [152] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [153] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [154] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [146] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [146] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [146] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [146] phi (byte) mul8u::a#3 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // mulf8s
// Fast multiply two signed chars to a unsigned int result
// mulf8s(signed byte register(A) a, signed byte register(X) b)
mulf8s: {
    .label return = $b
    // mulf8s::mulf8s_prepare1
    // mulf8u_prepare((char)a)
    // [156] (byte) mulf8u_prepare::a#1 ← (byte)(signed byte) mulf8s::a#0
    // [157] call mulf8u_prepare 
    // [182] phi from mulf8s::mulf8s_prepare1 to mulf8u_prepare [phi:mulf8s::mulf8s_prepare1->mulf8u_prepare]
    // [182] phi (byte) mulf8u_prepare::a#2 = (byte) mulf8u_prepare::a#1 [phi:mulf8s::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    // mulf8s::@1
    // mulf8s_prepared(b)
    // [158] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#0 -- vbsz1=vbsxx 
    stx.z mulf8s_prepared.b
    // [159] call mulf8s_prepared 
    jsr mulf8s_prepared
    // mulf8s::@2
    // [160] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4
    // mulf8s::@return
    // }
    // [161] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte zp($10) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = $b
    .label b = $10
    // mulf8u_prepared((char) b)
    // [162] (byte) mulf8u_prepared::b#1 ← (byte)(signed byte) mulf8s_prepared::b#0 -- vbuaa=vbuz1 
    lda.z b
    // [163] call mulf8u_prepared 
    // [177] phi from mulf8s_prepared to mulf8u_prepared [phi:mulf8s_prepared->mulf8u_prepared]
    // [177] phi (byte) mulf8u_prepared::b#2 = (byte) mulf8u_prepared::b#1 [phi:mulf8s_prepared->mulf8u_prepared#0] -- register_copy 
    jsr mulf8u_prepared
    // mulf8u_prepared((char) b)
    // [164] (word) mulf8u_prepared::return#3 ← (word) mulf8u_prepared::return#0
    // mulf8s_prepared::@5
    // m = mulf8u_prepared((char) b)
    // [165] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#3
    // if(*memA<0)
    // [166] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1
    // mulf8s_prepared::@3
    // >m
    // [167] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)b
    // [168] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0 -- vbuaa=vbuaa_minus_vbuz1 
    sec
    sbc.z b
    // [169] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [170] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
    // [170] phi (word) mulf8s_prepared::m#5 = (word) mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    // mulf8s_prepared::@1
  __b1:
    // if(b<0)
    // [171] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2
    // mulf8s_prepared::@4
    // >m
    // [172] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)*memA
    // [173] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA) -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [174] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [175] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
    // [175] phi (word) mulf8s_prepared::m#4 = (word) mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    // mulf8s_prepared::@2
  __b2:
    // mulf8s_prepared::@return
    // }
    // [176] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = $b
    // *memB = b
    // [178] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#2 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    tax
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // return { *memB, *resL };
    // [180] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    // mulf8u_prepared::@return
    // }
    // [181] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // *memA = a
    // [183] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#2 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    // mulf8u_prepare::@return
    // }
    // [185] return 
    rts
}
  // muls8s
// Slow multiplication of signed bytes
// Perform a signed multiplication by repeated addition/subtraction
// muls8s(signed byte zp($d) a, signed byte register(X) b)
muls8s: {
    .label m = 5
    .label return = 5
    .label a = $d
    // if(a<0)
    // [186] if((signed byte) muls8s::a#0<(signed byte) 0) goto muls8s::@5 -- vbsz1_lt_0_then_la1 
    lda.z a
    bmi __b8
    // muls8s::@2
    // if (a>0)
    // [187] if((signed byte) muls8s::a#0<=(signed byte) 0) goto muls8s::@1 -- vbsz1_le_0_then_la1 
    cmp #1
    bmi __b7
    // [188] phi from muls8s::@2 to muls8s::@3 [phi:muls8s::@2->muls8s::@3]
    // [188] phi (signed word) muls8s::m#3 = (signed word) 0 [phi:muls8s::@2->muls8s::@3#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z m
    sta.z m+1
    // [188] phi (signed byte) muls8s::j#2 = (signed byte) 0 [phi:muls8s::@2->muls8s::@3#1] -- vbsyy=vbsc1 
    tay
    // muls8s::@3
  __b3:
    // for(signed byte j = 0; j!=a; j++)
    // [189] if((signed byte) muls8s::j#2!=(signed byte) muls8s::a#0) goto muls8s::@4 -- vbsyy_neq_vbsz1_then_la1 
    cpy.z a
    bne __b4
    // [190] phi from muls8s::@3 muls8s::@5 to muls8s::@1 [phi:muls8s::@3/muls8s::@5->muls8s::@1]
    // [190] phi (signed word) muls8s::return#0 = (signed word) muls8s::m#3 [phi:muls8s::@3/muls8s::@5->muls8s::@1#0] -- register_copy 
    rts
    // [190] phi from muls8s::@2 to muls8s::@1 [phi:muls8s::@2->muls8s::@1]
  __b7:
    // [190] phi (signed word) muls8s::return#0 = (signed word) 0 [phi:muls8s::@2->muls8s::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z return
    sta.z return+1
    // muls8s::@1
    // muls8s::@return
    // }
    // [191] return 
    rts
    // muls8s::@4
  __b4:
    // m = m + b
    // [192] (signed word) muls8s::m#1 ← (signed word) muls8s::m#3 + (signed byte) muls8s::b#0 -- vwsz1=vwsz1_plus_vbsxx 
    txa
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    clc
    lda.z m
    adc.z $fe
    sta.z m
    lda.z m+1
    adc.z $ff
    sta.z m+1
    // for(signed byte j = 0; j!=a; j++)
    // [193] (signed byte) muls8s::j#1 ← ++ (signed byte) muls8s::j#2 -- vbsyy=_inc_vbsyy 
    iny
    // [188] phi from muls8s::@4 to muls8s::@3 [phi:muls8s::@4->muls8s::@3]
    // [188] phi (signed word) muls8s::m#3 = (signed word) muls8s::m#1 [phi:muls8s::@4->muls8s::@3#0] -- register_copy 
    // [188] phi (signed byte) muls8s::j#2 = (signed byte) muls8s::j#1 [phi:muls8s::@4->muls8s::@3#1] -- register_copy 
    jmp __b3
    // [194] phi from muls8s to muls8s::@5 [phi:muls8s->muls8s::@5]
  __b8:
    // [194] phi (signed word) muls8s::m#5 = (signed word) 0 [phi:muls8s->muls8s::@5#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z m
    sta.z m+1
    // [194] phi (signed byte) muls8s::i#2 = (signed byte) 0 [phi:muls8s->muls8s::@5#1] -- vbsyy=vbsc1 
    tay
    // muls8s::@5
  __b5:
    // for(signed byte i = 0; i!=a; i--)
    // [195] if((signed byte) muls8s::i#2!=(signed byte) muls8s::a#0) goto muls8s::@6 -- vbsyy_neq_vbsz1_then_la1 
    cpy.z a
    bne __b6
    rts
    // muls8s::@6
  __b6:
    // m = m - b
    // [196] (signed word) muls8s::m#2 ← (signed word) muls8s::m#5 - (signed byte) muls8s::b#0 -- vwsz1=vwsz1_minus_vbsxx 
    txa
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    sec
    lda.z m
    sbc.z $fe
    sta.z m
    lda.z m+1
    sbc.z $ff
    sta.z m+1
    // for(signed byte i = 0; i!=a; i--)
    // [197] (signed byte) muls8s::i#1 ← -- (signed byte) muls8s::i#2 -- vbsyy=_dec_vbsyy 
    dey
    // [194] phi from muls8s::@6 to muls8s::@5 [phi:muls8s::@6->muls8s::@5]
    // [194] phi (signed word) muls8s::m#5 = (signed word) muls8s::m#2 [phi:muls8s::@6->muls8s::@5#0] -- register_copy 
    // [194] phi (signed byte) muls8s::i#2 = (signed byte) muls8s::i#1 [phi:muls8s::@6->muls8s::@5#1] -- register_copy 
    jmp __b5
}
  // mul8u_compare
// Perform all possible byte multiplications (slow and fast) and compare the results
mul8u_compare: {
    .label ms = 5
    .label mf = $b
    .label mn = 9
    .label b = 2
    .label a = $d
    // [199] phi from mul8u_compare to mul8u_compare::@1 [phi:mul8u_compare->mul8u_compare::@1]
    // [199] phi (byte) mul8u_compare::a#7 = (byte) 0 [phi:mul8u_compare->mul8u_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    // [199] phi from mul8u_compare::@8 to mul8u_compare::@1 [phi:mul8u_compare::@8->mul8u_compare::@1]
    // [199] phi (byte) mul8u_compare::a#7 = (byte) mul8u_compare::a#1 [phi:mul8u_compare::@8->mul8u_compare::@1#0] -- register_copy 
    // mul8u_compare::@1
  __b1:
    // [200] phi from mul8u_compare::@1 to mul8u_compare::@2 [phi:mul8u_compare::@1->mul8u_compare::@2]
    // [200] phi (byte) mul8u_compare::b#10 = (byte) 0 [phi:mul8u_compare::@1->mul8u_compare::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    // [200] phi from mul8u_compare::@5 to mul8u_compare::@2 [phi:mul8u_compare::@5->mul8u_compare::@2]
    // [200] phi (byte) mul8u_compare::b#10 = (byte) mul8u_compare::b#1 [phi:mul8u_compare::@5->mul8u_compare::@2#0] -- register_copy 
    // mul8u_compare::@2
  __b2:
    // muls8u(a, b)
    // [201] (byte) muls8u::a#0 ← (byte) mul8u_compare::a#7
    // [202] (byte) muls8u::b#0 ← (byte) mul8u_compare::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [203] call muls8u 
    jsr muls8u
    // [204] (word) muls8u::return#2 ← (word) muls8u::return#0
    // mul8u_compare::@10
    // ms = muls8u(a, b)
    // [205] (word) mul8u_compare::ms#0 ← (word) muls8u::return#2
    // mulf8u(a,b)
    // [206] (byte) mulf8u::a#0 ← (byte) mul8u_compare::a#7 -- vbuaa=vbuz1 
    lda.z a
    // [207] (byte) mulf8u::b#0 ← (byte) mul8u_compare::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [208] call mulf8u 
    jsr mulf8u
    // [209] (word) mulf8u::return#2 ← (word) mulf8u::return#0
    // mul8u_compare::@11
    // mf = mulf8u(a,b)
    // [210] (word) mul8u_compare::mf#0 ← (word) mulf8u::return#2
    // mul8u(a,b)
    // [211] (byte) mul8u::a#2 ← (byte) mul8u_compare::a#7 -- vbuxx=vbuz1 
    ldx.z a
    // [212] (byte) mul8u::b#1 ← (byte) mul8u_compare::b#10 -- vbuaa=vbuz1 
    lda.z b
    // [213] call mul8u 
    // [144] phi from mul8u_compare::@11 to mul8u [phi:mul8u_compare::@11->mul8u]
    // [144] phi (byte) mul8u::a#6 = (byte) mul8u::a#2 [phi:mul8u_compare::@11->mul8u#0] -- register_copy 
    // [144] phi (byte) mul8u::b#2 = (byte) mul8u::b#1 [phi:mul8u_compare::@11->mul8u#1] -- register_copy 
    jsr mul8u
    // mul8u(a,b)
    // [214] (word) mul8u::return#3 ← (word) mul8u::res#2
    // mul8u_compare::@12
    // mn = mul8u(a,b)
    // [215] (word) mul8u_compare::mn#0 ← (word) mul8u::return#3
    // if(ms!=mf)
    // [216] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mf#0) goto mul8u_compare::@3 -- vwuz1_eq_vwuz2_then_la1 
    lda.z ms
    cmp.z mf
    bne !+
    lda.z ms+1
    cmp.z mf+1
    beq __b6
  !:
    // [217] phi from mul8u_compare::@12 to mul8u_compare::@6 [phi:mul8u_compare::@12->mul8u_compare::@6]
    // mul8u_compare::@6
    // [218] phi from mul8u_compare::@6 to mul8u_compare::@3 [phi:mul8u_compare::@6->mul8u_compare::@3]
    // [218] phi (byte) mul8u_compare::ok#4 = (byte) 0 [phi:mul8u_compare::@6->mul8u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [218] phi from mul8u_compare::@12 to mul8u_compare::@3 [phi:mul8u_compare::@12->mul8u_compare::@3]
  __b6:
    // [218] phi (byte) mul8u_compare::ok#4 = (byte) 1 [phi:mul8u_compare::@12->mul8u_compare::@3#0] -- vbuxx=vbuc1 
    ldx #1
    // mul8u_compare::@3
  __b3:
    // if(ms!=mn)
    // [219] if((word) mul8u_compare::ms#0==(word) mul8u_compare::mn#0) goto mul8u_compare::@14 -- vwuz1_eq_vwuz2_then_la1 
    lda.z ms
    cmp.z mn
    bne !+
    lda.z ms+1
    cmp.z mn+1
    beq __b4
  !:
    // [221] phi from mul8u_compare::@3 to mul8u_compare::@4 [phi:mul8u_compare::@3->mul8u_compare::@4]
    // [221] phi (byte) mul8u_compare::ok#3 = (byte) 0 [phi:mul8u_compare::@3->mul8u_compare::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [220] phi from mul8u_compare::@3 to mul8u_compare::@14 [phi:mul8u_compare::@3->mul8u_compare::@14]
    // mul8u_compare::@14
    // [221] phi from mul8u_compare::@14 to mul8u_compare::@4 [phi:mul8u_compare::@14->mul8u_compare::@4]
    // [221] phi (byte) mul8u_compare::ok#3 = (byte) mul8u_compare::ok#4 [phi:mul8u_compare::@14->mul8u_compare::@4#0] -- register_copy 
    // mul8u_compare::@4
  __b4:
    // if(ok==0)
    // [222] if((byte) mul8u_compare::ok#3!=(byte) 0) goto mul8u_compare::@5 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b5
    // mul8u_compare::@7
    // *BG_COLOR = 2
    // [223] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // mul8u_error(a,b, ms, mn, mf)
    // [224] (byte) mul8u_error::a#0 ← (byte) mul8u_compare::a#7 -- vbuxx=vbuz1 
    ldx.z a
    // [225] (byte) mul8u_error::b#0 ← (byte) mul8u_compare::b#10
    // [226] (word) mul8u_error::ms#0 ← (word) mul8u_compare::ms#0
    // [227] (word) mul8u_error::mn#0 ← (word) mul8u_compare::mn#0
    // [228] (word) mul8u_error::mf#0 ← (word) mul8u_compare::mf#0
    // [229] call mul8u_error 
    // [239] phi from mul8u_compare::@7 to mul8u_error [phi:mul8u_compare::@7->mul8u_error]
    jsr mul8u_error
    // mul8u_compare::@return
    // }
    // [230] return 
    rts
    // mul8u_compare::@5
  __b5:
    // for(byte b: 0..255)
    // [231] (byte) mul8u_compare::b#1 ← ++ (byte) mul8u_compare::b#10 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [232] if((byte) mul8u_compare::b#1!=(byte) 0) goto mul8u_compare::@2 -- vbuz1_neq_0_then_la1 
    lda.z b
    cmp #0
    bne __b2
    // mul8u_compare::@8
    // for(byte a: 0..255)
    // [233] (byte) mul8u_compare::a#1 ← ++ (byte) mul8u_compare::a#7 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [234] if((byte) mul8u_compare::a#1!=(byte) 0) goto mul8u_compare::@1 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b1
    // [235] phi from mul8u_compare::@8 to mul8u_compare::@9 [phi:mul8u_compare::@8->mul8u_compare::@9]
    // mul8u_compare::@9
    // print_str("multiply results match!")
    // [236] call print_str 
    // [110] phi from mul8u_compare::@9 to print_str [phi:mul8u_compare::@9->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#101 [phi:mul8u_compare::@9->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8u_compare::str [phi:mul8u_compare::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [237] phi from mul8u_compare::@9 to mul8u_compare::@13 [phi:mul8u_compare::@9->mul8u_compare::@13]
    // mul8u_compare::@13
    // print_ln()
    // [238] call print_ln 
    // [76] phi from mul8u_compare::@13 to print_ln [phi:mul8u_compare::@13->print_ln]
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mul8u_compare::@13->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#10 [phi:mul8u_compare::@13->print_ln#1] -- register_copy 
    jsr print_ln
    rts
    str: .text "multiply results match!"
    .byte 0
}
  // mul8u_error
// mul8u_error(byte register(X) a, byte zp(2) b, word zp(5) ms, word zp(9) mn, word zp($b) mf)
mul8u_error: {
    .label b = 2
    .label ms = 5
    .label mn = 9
    .label mf = $b
    // print_str("multiply mismatch ")
    // [240] call print_str 
    // [110] phi from mul8u_error to print_str [phi:mul8u_error->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#101 [phi:mul8u_error->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mul8u_error::str [phi:mul8u_error->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // mul8u_error::@1
    // print_uchar(a)
    // [241] (byte) print_uchar::b#3 ← (byte) mul8u_error::a#0
    // [242] call print_uchar 
    // [102] phi from mul8u_error::@1 to print_uchar [phi:mul8u_error::@1->print_uchar]
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#1 [phi:mul8u_error::@1->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#3 [phi:mul8u_error::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [243] phi from mul8u_error::@1 to mul8u_error::@2 [phi:mul8u_error::@1->mul8u_error::@2]
    // mul8u_error::@2
    // print_str("*")
    // [244] call print_str 
    // [110] phi from mul8u_error::@2 to print_str [phi:mul8u_error::@2->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@2->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str1 [phi:mul8u_error::@2->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // mul8u_error::@3
    // print_uchar(b)
    // [245] (byte) print_uchar::b#4 ← (byte) mul8u_error::b#0 -- vbuxx=vbuz1 
    ldx.z b
    // [246] call print_uchar 
    // [102] phi from mul8u_error::@3 to print_uchar [phi:mul8u_error::@3->print_uchar]
    // [102] phi (byte*) print_char_cursor#146 = (byte*) print_char_cursor#1 [phi:mul8u_error::@3->print_uchar#0] -- register_copy 
    // [102] phi (byte) print_uchar::b#5 = (byte) print_uchar::b#4 [phi:mul8u_error::@3->print_uchar#1] -- register_copy 
    jsr print_uchar
    // [247] phi from mul8u_error::@3 to mul8u_error::@4 [phi:mul8u_error::@3->mul8u_error::@4]
    // mul8u_error::@4
    // print_str(" slow:")
    // [248] call print_str 
    // [110] phi from mul8u_error::@4 to print_str [phi:mul8u_error::@4->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@4->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str2 [phi:mul8u_error::@4->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // mul8u_error::@5
    // print_uint(ms)
    // [249] (word) print_uint::w#3 ← (word) mul8u_error::ms#0
    // [250] call print_uint 
    // [96] phi from mul8u_error::@5 to print_uint [phi:mul8u_error::@5->print_uint]
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@5->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#3 [phi:mul8u_error::@5->print_uint#1] -- register_copy 
    jsr print_uint
    // [251] phi from mul8u_error::@5 to mul8u_error::@6 [phi:mul8u_error::@5->mul8u_error::@6]
    // mul8u_error::@6
    // print_str(" / normal:")
    // [252] call print_str 
    // [110] phi from mul8u_error::@6 to print_str [phi:mul8u_error::@6->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@6->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str3 [phi:mul8u_error::@6->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // mul8u_error::@7
    // print_uint(mn)
    // [253] (word) print_uint::w#4 ← (word) mul8u_error::mn#0 -- vwuz1=vwuz2 
    lda.z mn
    sta.z print_uint.w
    lda.z mn+1
    sta.z print_uint.w+1
    // [254] call print_uint 
    // [96] phi from mul8u_error::@7 to print_uint [phi:mul8u_error::@7->print_uint]
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@7->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#4 [phi:mul8u_error::@7->print_uint#1] -- register_copy 
    jsr print_uint
    // [255] phi from mul8u_error::@7 to mul8u_error::@8 [phi:mul8u_error::@7->mul8u_error::@8]
    // mul8u_error::@8
    // print_str(" / fast:")
    // [256] call print_str 
    // [110] phi from mul8u_error::@8 to print_str [phi:mul8u_error::@8->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mul8u_error::@8->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) str4 [phi:mul8u_error::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // mul8u_error::@9
    // print_uint(mf)
    // [257] (word) print_uint::w#5 ← (word) mul8u_error::mf#0 -- vwuz1=vwuz2 
    lda.z mf
    sta.z print_uint.w
    lda.z mf+1
    sta.z print_uint.w+1
    // [258] call print_uint 
    // [96] phi from mul8u_error::@9 to print_uint [phi:mul8u_error::@9->print_uint]
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mul8u_error::@9->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#5 [phi:mul8u_error::@9->print_uint#1] -- register_copy 
    jsr print_uint
    // [259] phi from mul8u_error::@9 to mul8u_error::@10 [phi:mul8u_error::@9->mul8u_error::@10]
    // mul8u_error::@10
    // print_ln()
    // [260] call print_ln 
    // [76] phi from mul8u_error::@10 to print_ln [phi:mul8u_error::@10->print_ln]
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#18 [phi:mul8u_error::@10->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (byte*) print_line_cursor#10 [phi:mul8u_error::@10->print_ln#1] -- register_copy 
    jsr print_ln
    // mul8u_error::@return
    // }
    // [261] return 
    rts
    str: .text "multiply mismatch "
    .byte 0
}
  // mulf8u
// Fast multiply two unsigned chars to a unsigned int result
// mulf8u(byte register(A) a, byte register(X) b)
mulf8u: {
    .label return = $b
    // mulf8u_prepare(a)
    // [262] (byte) mulf8u_prepare::a#0 ← (byte) mulf8u::a#0
    // [263] call mulf8u_prepare 
    // [182] phi from mulf8u to mulf8u_prepare [phi:mulf8u->mulf8u_prepare]
    // [182] phi (byte) mulf8u_prepare::a#2 = (byte) mulf8u_prepare::a#0 [phi:mulf8u->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    // mulf8u::@1
    // mulf8u_prepared(b)
    // [264] (byte) mulf8u_prepared::b#0 ← (byte) mulf8u::b#0 -- vbuaa=vbuxx 
    txa
    // [265] call mulf8u_prepared 
    // [177] phi from mulf8u::@1 to mulf8u_prepared [phi:mulf8u::@1->mulf8u_prepared]
    // [177] phi (byte) mulf8u_prepared::b#2 = (byte) mulf8u_prepared::b#0 [phi:mulf8u::@1->mulf8u_prepared#0] -- register_copy 
    jsr mulf8u_prepared
    // mulf8u_prepared(b)
    // [266] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
    // mulf8u::@2
    // [267] (word) mulf8u::return#0 ← (word) mulf8u_prepared::return#2
    // mulf8u::@return
    // }
    // [268] return 
    rts
}
  // muls8u
// Slow multiplication of unsigned bytes
// Calculate an unsigned multiplication by repeated addition
// muls8u(byte zp($d) a, byte register(X) b)
muls8u: {
    .label return = 5
    .label m = 5
    .label a = $d
    // if(a!=0)
    // [269] if((byte) muls8u::a#0==(byte) 0) goto muls8u::@1 -- vbuz1_eq_0_then_la1 
    lda.z a
    cmp #0
    beq __b4
    // [270] phi from muls8u to muls8u::@2 [phi:muls8u->muls8u::@2]
    // [270] phi (word) muls8u::m#3 = (word) 0 [phi:muls8u->muls8u::@2#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z m
    sta.z m+1
    // [270] phi (byte) muls8u::i#2 = (byte) 0 [phi:muls8u->muls8u::@2#1] -- vbuyy=vbuc1 
    tay
    // muls8u::@2
  __b2:
    // for(byte i = 0; i!=a; i++)
    // [271] if((byte) muls8u::i#2!=(byte) muls8u::a#0) goto muls8u::@3 -- vbuyy_neq_vbuz1_then_la1 
    cpy.z a
    bne __b3
    // [272] phi from muls8u::@2 to muls8u::@1 [phi:muls8u::@2->muls8u::@1]
    // [272] phi (word) muls8u::return#0 = (word) muls8u::m#3 [phi:muls8u::@2->muls8u::@1#0] -- register_copy 
    rts
    // [272] phi from muls8u to muls8u::@1 [phi:muls8u->muls8u::@1]
  __b4:
    // [272] phi (word) muls8u::return#0 = (word) 0 [phi:muls8u->muls8u::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z return
    sta.z return+1
    // muls8u::@1
    // muls8u::@return
    // }
    // [273] return 
    rts
    // muls8u::@3
  __b3:
    // m = m + b
    // [274] (word) muls8u::m#1 ← (word) muls8u::m#3 + (byte) muls8u::b#0 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z m
    sta.z m
    bcc !+
    inc.z m+1
  !:
    // for(byte i = 0; i!=a; i++)
    // [275] (byte) muls8u::i#1 ← ++ (byte) muls8u::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [270] phi from muls8u::@3 to muls8u::@2 [phi:muls8u::@3->muls8u::@2]
    // [270] phi (word) muls8u::m#3 = (word) muls8u::m#1 [phi:muls8u::@3->muls8u::@2#0] -- register_copy 
    // [270] phi (byte) muls8u::i#2 = (byte) muls8u::i#1 [phi:muls8u::@3->muls8u::@2#1] -- register_copy 
    jmp __b2
}
  // mulf_tables_cmp
// Compare the ASM-based mul tables with the KC-based mul tables
// Red screen on failure - green on success
mulf_tables_cmp: {
    .label asm_sqr = 5
    .label kc_sqr = 3
    // [277] phi from mulf_tables_cmp to mulf_tables_cmp::@1 [phi:mulf_tables_cmp->mulf_tables_cmp::@1]
    // [277] phi (byte*) mulf_tables_cmp::asm_sqr#2 = (const byte*) mula_sqr1_lo [phi:mulf_tables_cmp->mulf_tables_cmp::@1#0] -- pbuz1=pbuc1 
    lda #<mula_sqr1_lo
    sta.z asm_sqr
    lda #>mula_sqr1_lo
    sta.z asm_sqr+1
    // [277] phi (byte*) mulf_tables_cmp::kc_sqr#2 = (const byte*) mulf_sqr1_lo [phi:mulf_tables_cmp->mulf_tables_cmp::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo
    sta.z kc_sqr
    lda #>mulf_sqr1_lo
    sta.z kc_sqr+1
    // mulf_tables_cmp::@1
  __b1:
    // for( byte* kc_sqr=mulf_sqr1_lo; kc_sqr<mulf_sqr1_lo+512*4; kc_sqr++)
    // [278] if((byte*) mulf_tables_cmp::kc_sqr#2<(const byte*) mulf_sqr1_lo+(word)(number) $200*(number) 4) goto mulf_tables_cmp::@2 -- pbuz1_lt_pbuc1_then_la1 
    lda.z kc_sqr+1
    cmp #>mulf_sqr1_lo+$200*4
    bcc __b2
    bne !+
    lda.z kc_sqr
    cmp #<mulf_sqr1_lo+$200*4
    bcc __b2
  !:
    // [279] phi from mulf_tables_cmp::@1 to mulf_tables_cmp::@3 [phi:mulf_tables_cmp::@1->mulf_tables_cmp::@3]
    // mulf_tables_cmp::@3
    // print_str("multiply tables match!")
    // [280] call print_str 
    // [110] phi from mulf_tables_cmp::@3 to print_str [phi:mulf_tables_cmp::@3->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@3->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str [phi:mulf_tables_cmp::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [281] phi from mulf_tables_cmp::@3 to mulf_tables_cmp::@6 [phi:mulf_tables_cmp::@3->mulf_tables_cmp::@6]
    // mulf_tables_cmp::@6
    // print_ln()
    // [282] call print_ln 
    // [76] phi from mulf_tables_cmp::@6 to print_ln [phi:mulf_tables_cmp::@6->print_ln]
    // [76] phi (byte*) print_char_cursor#138 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@6->print_ln#0] -- register_copy 
    // [76] phi (byte*) print_line_cursor#47 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@6->print_ln#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    // mulf_tables_cmp::@7
    // [283] (byte*) print_char_cursor#231 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [284] phi from mulf_tables_cmp::@7 to mulf_tables_cmp::@return [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return]
    // [284] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#0 [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return#0] -- register_copy 
    // [284] phi (byte*) print_char_cursor#101 = (byte*) print_char_cursor#231 [phi:mulf_tables_cmp::@7->mulf_tables_cmp::@return#1] -- register_copy 
    // mulf_tables_cmp::@return
    // }
    // [285] return 
    rts
    // mulf_tables_cmp::@2
  __b2:
    // if(*kc_sqr != *asm_sqr)
    // [286] if(*((byte*) mulf_tables_cmp::kc_sqr#2)==*((byte*) mulf_tables_cmp::asm_sqr#2)) goto mulf_tables_cmp::@4 -- _deref_pbuz1_eq__deref_pbuz2_then_la1 
    ldy #0
    lda (kc_sqr),y
    cmp (asm_sqr),y
    beq __b4
    // mulf_tables_cmp::@5
    // *BG_COLOR = 2
    // [287] *((const byte*) BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // print_str("multiply table mismatch at ")
    // [288] call print_str 
    // [110] phi from mulf_tables_cmp::@5 to print_str [phi:mulf_tables_cmp::@5->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str1 [phi:mulf_tables_cmp::@5->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // mulf_tables_cmp::@8
    // print_uint((word)asm_sqr)
    // [289] (word) print_uint::w#1 ← (word)(byte*) mulf_tables_cmp::asm_sqr#2
    // [290] call print_uint 
    // [96] phi from mulf_tables_cmp::@8 to print_uint [phi:mulf_tables_cmp::@8->print_uint]
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@8->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#1 [phi:mulf_tables_cmp::@8->print_uint#1] -- register_copy 
    jsr print_uint
    // [291] phi from mulf_tables_cmp::@8 to mulf_tables_cmp::@9 [phi:mulf_tables_cmp::@8->mulf_tables_cmp::@9]
    // mulf_tables_cmp::@9
    // print_str(" / ")
    // [292] call print_str 
    // [110] phi from mulf_tables_cmp::@9 to print_str [phi:mulf_tables_cmp::@9->print_str]
    // [110] phi (byte*) print_char_cursor#158 = (byte*) print_char_cursor#18 [phi:mulf_tables_cmp::@9->print_str#0] -- register_copy 
    // [110] phi (byte*) print_str::str#19 = (const byte*) mulf_tables_cmp::str2 [phi:mulf_tables_cmp::@9->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // mulf_tables_cmp::@10
    // print_uint((word)kc_sqr)
    // [293] (word) print_uint::w#2 ← (word)(byte*) mulf_tables_cmp::kc_sqr#2 -- vwuz1=vwuz2 
    lda.z kc_sqr
    sta.z print_uint.w
    lda.z kc_sqr+1
    sta.z print_uint.w+1
    // [294] call print_uint 
    // [96] phi from mulf_tables_cmp::@10 to print_uint [phi:mulf_tables_cmp::@10->print_uint]
    // [96] phi (byte*) print_char_cursor#145 = (byte*) print_char_cursor#1 [phi:mulf_tables_cmp::@10->print_uint#0] -- register_copy 
    // [96] phi (word) print_uint::w#6 = (word) print_uint::w#2 [phi:mulf_tables_cmp::@10->print_uint#1] -- register_copy 
    jsr print_uint
    // [284] phi from mulf_tables_cmp::@10 to mulf_tables_cmp::@return [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return]
    // [284] phi (byte*) print_line_cursor#10 = (const byte*) print_screen#0 [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [284] phi (byte*) print_char_cursor#101 = (byte*) print_char_cursor#18 [phi:mulf_tables_cmp::@10->mulf_tables_cmp::@return#1] -- register_copy 
    rts
    // mulf_tables_cmp::@4
  __b4:
    // asm_sqr++;
    // [295] (byte*) mulf_tables_cmp::asm_sqr#1 ← ++ (byte*) mulf_tables_cmp::asm_sqr#2 -- pbuz1=_inc_pbuz1 
    inc.z asm_sqr
    bne !+
    inc.z asm_sqr+1
  !:
    // for( byte* kc_sqr=mulf_sqr1_lo; kc_sqr<mulf_sqr1_lo+512*4; kc_sqr++)
    // [296] (byte*) mulf_tables_cmp::kc_sqr#1 ← ++ (byte*) mulf_tables_cmp::kc_sqr#2 -- pbuz1=_inc_pbuz1 
    inc.z kc_sqr
    bne !+
    inc.z kc_sqr+1
  !:
    // [277] phi from mulf_tables_cmp::@4 to mulf_tables_cmp::@1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1]
    // [277] phi (byte*) mulf_tables_cmp::asm_sqr#2 = (byte*) mulf_tables_cmp::asm_sqr#1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1#0] -- register_copy 
    // [277] phi (byte*) mulf_tables_cmp::kc_sqr#2 = (byte*) mulf_tables_cmp::kc_sqr#1 [phi:mulf_tables_cmp::@4->mulf_tables_cmp::@1#1] -- register_copy 
    jmp __b1
    str: .text "multiply tables match!"
    .byte 0
    str1: .text "multiply table mismatch at "
    .byte 0
    str2: .text " / "
    .byte 0
}
  // mulf_init_asm
// Initialize the multiplication tables using ASM code from
// http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
mulf_init_asm: {
    // Ensure the ASM tables are not detected as unused by the optimizer
    .label mem = $ff
    // asm
    // asm { ldx#$00 txa .byte$c9 lb1: tya adc#$00 ml1: stamula_sqr1_hi,x tay cmp#$40 txa ror ml9: adc#$00 staml9+1 inx ml0: stamula_sqr1_lo,x bnelb1 incml0+2 incml1+2 clc iny bnelb1 ldx#$00 ldy#$ff !: ldamula_sqr1_hi+1,x stamula_sqr2_hi+$100,x ldamula_sqr1_hi,x stamula_sqr2_hi,y ldamula_sqr1_lo+1,x stamula_sqr2_lo+$100,x ldamula_sqr1_lo,x stamula_sqr2_lo,y dey inx bne!-  }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta mula_sqr1_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta mula_sqr1_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    ldx #0
    ldy #$ff
  !:
    lda mula_sqr1_hi+1,x
    sta mula_sqr2_hi+$100,x
    lda mula_sqr1_hi,x
    sta mula_sqr2_hi,y
    lda mula_sqr1_lo+1,x
    sta mula_sqr2_lo+$100,x
    lda mula_sqr1_lo,x
    sta mula_sqr2_lo,y
    dey
    inx
    bne !-
    // *mem = *mula_sqr1_lo
    // [298] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_lo) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr1_lo
    sta mem
    // *mem = *mula_sqr1_hi
    // [299] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr1_hi) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr1_hi
    sta mem
    // *mem = *mula_sqr2_lo
    // [300] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_lo) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr2_lo
    sta mem
    // *mem = *mula_sqr2_hi
    // [301] *((const byte*) mulf_init_asm::mem) ← *((const byte*) mula_sqr2_hi) -- _deref_pbuc1=_deref_pbuc2 
    lda mula_sqr2_hi
    sta mem
    // mulf_init_asm::@return
    // }
    // [302] return 
    rts
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = $10
    // Counter used for determining x%2==0
    .label sqr1_hi = 7
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $e
    .label sqr1_lo = 5
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = $b
    .label sqr2_lo = 9
    //Start with g(0)=f(255)
    .label dir = $d
    // [304] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
    // [304] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [304] phi (byte*) mulf_init::sqr1_hi#2 = (const byte*) mulf_sqr1_hi+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [304] phi (word) mulf_init::sqr#4 = (word) 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    txa
    sta.z sqr
    sta.z sqr+1
    // [304] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    sta.z c
    // [304] phi (byte*) mulf_init::sqr1_lo#2 = (const byte*) mulf_sqr1_lo+(byte) 1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    // mulf_init::@1
  __b1:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [305] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [306] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
    // [306] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [306] phi (byte*) mulf_init::sqr2_hi#2 = (const byte*) mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [306] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [306] phi (byte*) mulf_init::sqr2_lo#2 = (const byte*) mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    // mulf_init::@5
  __b5:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [307] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    // mulf_init::@7
    // *(mulf_sqr2_lo+511) = *(mulf_sqr1_lo+256)
    // [308] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // *(mulf_sqr2_hi+511) = *(mulf_sqr1_hi+256)
    // [309] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    // mulf_init::@return
    // }
    // [310] return 
    rts
    // mulf_init::@6
  __b6:
    // *sqr2_lo = mulf_sqr1_lo[x_255]
    // [311] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255]
    // [312] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255];
    // [313] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // x_255 = x_255 + dir
    // [314] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // if(x_255==0)
    // [315] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b8
    // [317] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
    // [317] phi (byte) mulf_init::dir#4 = (byte) 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    // [316] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
    // mulf_init::@9
    // [317] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
    // [317] phi (byte) mulf_init::dir#4 = (byte) mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    // mulf_init::@8
  __b8:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [318] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [306] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
    // [306] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [306] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [306] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [306] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // if((++c&1)==0)
    // [319] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // ++c&1
    // [320] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // if((++c&1)==0)
    // [321] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    // mulf_init::@4
    // x_2++;
    // [322] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // sqr++;
    // [323] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [324] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
    // [324] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [324] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    // mulf_init::@3
  __b3:
    // <sqr
    // [325] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // *sqr1_lo = <sqr
    // [326] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // >sqr
    // [327] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // *sqr1_hi++ = >sqr
    // [328] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
    // *sqr1_hi++ = >sqr;
    // [329] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // sqr = sqr + x_2
    // [330] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [331] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [304] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
    // [304] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [304] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [304] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [304] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [304] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [333] call memset 
    // [335] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [334] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $e
    // [336] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [336] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [337] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [338] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [339] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [340] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [336] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [336] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // ASM based multiplication tables
  // <(( x * x )/4)
  .align $100
  mula_sqr1_lo: .fill $200, 0
  // >(( x * x )/4)
  .align $100
  mula_sqr1_hi: .fill $200, 0
  // <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mula_sqr2_lo: .fill $200, 0
  // >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mula_sqr2_hi: .fill $200, 0
  str1: .text "*"
  .byte 0
  str2: .text " slow:"
  .byte 0
  str3: .text " / normal:"
  .byte 0
  str4: .text " / fast:"
  .byte 0

