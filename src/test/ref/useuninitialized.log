
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) b#0 ← (byte) 0
  (byte) s#0 ← (byte) 0
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) b#4 ← phi( @1/(byte) b#7 )
  (number~) main::$0 ← (byte) b#4 + (number) 1
  (byte) s#1 ← (number~) main::$0
  (byte) b#1 ← (number) 3
  *((const byte*) main::screen) ← (byte) b#1
  (byte*~) main::$1 ← (const byte*) main::screen + (number) 1
  *((byte*~) main::$1) ← (byte) s#1
  to:main::@return
main::@return: scope:[main]  from main
  (byte) b#5 ← phi( main/(byte) b#1 )
  (byte) s#4 ← phi( main/(byte) s#1 )
  (byte) s#2 ← (byte) s#4
  (byte) b#2 ← (byte) b#5
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) s#6 ← phi( @begin/(byte) s#0 )
  (byte) b#7 ← phi( @begin/(byte) b#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (byte) b#6 ← phi( @1/(byte) b#2 )
  (byte) s#5 ← phi( @1/(byte) s#2 )
  (byte) s#3 ← (byte) s#5
  (byte) b#3 ← (byte) b#6
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) b
(byte) b#0
(byte) b#1
(byte) b#2
(byte) b#3
(byte) b#4
(byte) b#5
(byte) b#6
(byte) b#7
(void()) main()
(number~) main::$0
(byte*~) main::$1
(label) main::@return
(const byte*) main::screen = (byte*)(number) $400
(byte) s
(byte) s#0
(byte) s#1
(byte) s#2
(byte) s#3
(byte) s#4
(byte) s#5
(byte) s#6

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) b#4 + (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) b#4 + (unumber)(number) 1
Adding number conversion cast (unumber) 3 in (byte) b#1 ← (number) 3
Adding number conversion cast (unumber) 1 in (byte*~) main::$1 ← (const byte*) main::screen + (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) b#1 ← (unumber)(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) b#4 + (byte) 1
Alias s#1 = main::$0 s#4 s#2 
Alias b#1 = b#5 b#2 
Alias b#0 = b#7 
Alias s#0 = s#6 
Alias s#3 = s#5 
Alias b#3 = b#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) b#4 (byte) b#0
Identical Phi Values (byte) s#3 (byte) s#1
Identical Phi Values (byte) b#3 (byte) b#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [6] (byte*~) main::$1 ← (const byte*) main::screen + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) b#0 = 0
Constant (const byte) s#0 = 0
Constant (const byte) b#1 = 3
Constant (const byte*) main::$1 = main::screen+1
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero 1 in [3] (byte) s#1 ← (const byte) b#0 + (byte) 1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) b#0
Eliminating unused constant (const byte) s#0
Successful SSA optimization PassNEliminateUnusedVars
Constant (const byte) s#1 = 1
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = (const byte*) main::screen+(byte) 1
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) main::screen) ← (const byte) b#1
  [5] *((const byte*) main::screen+(byte) 1) ← (const byte) s#1
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) b
(void()) main()
(byte) s

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 3
  .const s = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    // [4] *((const byte*) main::screen) ← (const byte) b#1 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // [5] *((const byte*) main::screen+(byte) 1) ← (const byte) s#1 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::screen) ← (const byte) b#1 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const byte*) main::screen+(byte) 1) ← (const byte) s#1 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 33 combination 
Uplifting [] best 33 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 3
  .const s = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label screen = $400
    // [4] *((const byte*) main::screen) ← (const byte) b#1 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // [5] *((const byte*) main::screen+(byte) 1) ← (const byte) s#1 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) b
(const byte) b#1 b = (byte) 3
(void()) main()
(label) main::@return
(const byte*) main::screen = (byte*) 1024
(byte) s
(const byte) s#1 s = (byte) 1



FINAL ASSEMBLER
Score: 18

  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 3
  .const s = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    // *screen = b
    // [4] *((const byte*) main::screen) ← (const byte) b#1 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // *(screen+1) = s
    // [5] *((const byte*) main::screen+(byte) 1) ← (const byte) s#1 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

