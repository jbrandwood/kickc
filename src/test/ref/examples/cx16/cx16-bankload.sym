__constant struct VERA_SPRITE $0 = { ADDR: word0 main::VRAM_SPRITE/$20|VERA_SPRITE_8BPP, X: $140-$20, Y: (unsigned int)$f0-$20, CTRL1: $c, CTRL2: $f1 }
__constant const char BLUE = 6
char CONIO_SCREEN_BANK
char CONIO_SCREEN_BANK#11 // CONIO_SCREEN_BANK zp[1]:5 625.0625
char CONIO_SCREEN_BANK#14 // reg byte x 16.953846153846154
char *CONIO_SCREEN_TEXT
char *CONIO_SCREEN_TEXT#11 // CONIO_SCREEN_TEXT zp[2]:3 2.0370555611111112E7
unsigned int CONIO_SCREEN_TEXT#16 // CONIO_SCREEN_TEXT_1 zp[2]:35 2.9705882352941178
__constant char OFFSET_STRUCT_MOS6522_VIA_PORT_A = 1
__constant char OFFSET_STRUCT_VERA_SPRITE_X = 2
__constant char OFFSET_STRUCT_VERA_SPRITE_Y = 4
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char SIZEOF_POINTER = 2
__constant char SIZEOF_STRUCT_VERA_SPRITE = 8
__constant char SIZEOF_UNSIGNED_INT = 2
__constant char SIZEOF_UNSIGNED_LONG = 4
__constant char SPRITE_PIXELS[] = kickasm {{ .var pic = LoadPicture("ship.png")
    // palette: rgb->idx
    .var palette = Hashtable()
    // RGB value for each palette index
    .var palList = List()
    // Next palette index
    .var nxt_idx = 0;
    // Extract palette while outputting pixels as palete index values
    .for (var y=0; y<64; y++) {
        .for (var x=0;x<64; x++) {
            // Find palette index (add if not known)
            .var rgb = pic.getPixel(x,y);
            .var idx = palette.get(rgb)
            .if(idx==null) {
                .eval idx = nxt_idx++;
                .eval palette.put(rgb,idx);
                .eval palList.add(rgb)
            }
        }
    }
    .if(nxt_idx>16) .error "Image has too many colours "+nxt_idx

    .for(var i=0;i<16;i++) {
        .var rgb = palList.get(i)
        .var red = floor(rgb / [256*256])
        .var green = floor(rgb/256) & 255
        .var blue = rgb & 255
        // bits 4-8: green, bits 0-3 blue
        .byte green&$f0  | blue/16
        // bits bits 0-3 red
        .byte red/16
    }

    .for (var y=0; y<64; y++) {
        .for (var x=0;x<64; x+=2) {
            // Find palette index (add if not known)
            .var rgb = pic.getPixel(x,y);
            .var idx1 = palette.get(rgb)
            .if(idx1==null) {
                .printnow "unknown rgb value!"
            }
            // Find palette index (add if not known)
            .eval rgb = pic.getPixel(x+1,y);
            .var idx2 = palette.get(rgb)
            .if(idx2==null) {
                .printnow "unknown rgb value!"
            }
            .byte idx1*16+idx2;
        }
    }
 }}
__constant unsigned int STACK_BASE = $103
__constant const char VERA_ADDRSEL = 1
__constant char * const VERA_ADDRX_H = (char *) 40738
__constant char * const VERA_ADDRX_L = (char *) 40736
__constant char * const VERA_ADDRX_M = (char *) 40737
__constant char * const VERA_CTRL = (char *) 40741
__constant char * const VERA_DATA0 = (char *) 40739
__constant char * const VERA_DATA1 = (char *) 40740
__constant const char VERA_DCSEL = 2
__constant char * const VERA_DC_HSCALE = (char *) 40746
__constant char * const VERA_DC_VIDEO = (char *) 40745
__constant char * const VERA_DC_VSCALE = (char *) 40747
__constant const char VERA_INC_1 = $10
__constant char * const VERA_L0_CONFIG = (char *) 40749
__constant char * const VERA_L0_MAPBASE = (char *) 40750
__constant char * const VERA_L0_TILEBASE = (char *) 40751
__constant char * const VERA_L1_CONFIG = (char *) 40756
__constant char * const VERA_L1_MAPBASE = (char *) 40757
__constant char * const VERA_L1_TILEBASE = (char *) 40758
__constant const char VERA_LAYER_CONFIG_256C = 8
__constant const unsigned int VERA_LAYER_HEIGHT[4] = { $20, $40, $80, $100 }
__constant const char VERA_LAYER_HEIGHT_64 = $40
__constant const char VERA_LAYER_HEIGHT_MASK = $c0
__constant const char VERA_LAYER_TILEBASE_MASK = $fc
__constant const unsigned int VERA_LAYER_WIDTH[4] = { $20, $40, $80, $100 }
__constant const char VERA_LAYER_WIDTH_128 = $20
__constant const char VERA_LAYER_WIDTH_MASK = $30
__constant const unsigned long VERA_PALETTE = $1fa00
__constant const char VERA_SPRITES_ENABLE = $40
__constant const unsigned int VERA_SPRITE_8BPP = $8000
__constant const unsigned long VERA_SPRITE_ATTR = $1fc00
__constant struct MOS6522_VIA * const VIA1 = (struct MOS6522_VIA *) 40800
__constant const char WHITE = 1
void __start()
void clearline()
char clearline::$1 // reg byte a 2.00000002E8
char clearline::$2 // reg byte a 2.00000002E8
char clearline::$5 // reg byte a 2.00000002E8
char *clearline::addr
char *clearline::addr#0 // addr zp[2]:63 1.00000001E8
unsigned int clearline::c
unsigned int clearline::c#1 // c zp[2]:31 2.0000000002E10
unsigned int clearline::c#2 // c zp[2]:31 7.50000000075E9
char clearline::color
char clearline::color#0 // reg byte x 1.6833333336666665E9
void clrscr()
char clrscr::$0 // reg byte a 202.0
char clrscr::$1 // zp[1]:57 40.4
char clrscr::$2 // reg byte a 202.0
char clrscr::$5 // reg byte a 2002.0
char clrscr::$6 // reg byte a 2002.0
char clrscr::$7 // reg byte a 2002.0
char clrscr::$9 // reg byte a 202.0
char clrscr::c
char clrscr::c#1 // reg byte y 20002.0
char clrscr::c#2 // reg byte y 7500.75
char *clrscr::ch
char clrscr::color
char clrscr::color#0 // color zp[1]:57 594.2352941176471
char clrscr::l
char clrscr::l#1 // l zp[1]:30 2002.0
char clrscr::l#2 // l zp[1]:30 200.2
char *clrscr::line_text
char *clrscr::line_text#0 // line_text zp[2]:18 18.363636363636363
char *clrscr::line_text#1 // line_text zp[2]:18 1001.0
char *clrscr::line_text#2 // line_text zp[2]:18 293.2142857142857
__constant char conio_cursor_x[2] = { 0, 0 }
__constant char conio_cursor_y[2] = { 0, 0 }
__loadstore unsigned int conio_height // zp[2]:25 10320.670103092783
__constant unsigned int conio_line_text[2] = { 0, 0 }
__loadstore char conio_rowshift // zp[1]:27 8347108.305785124
__loadstore unsigned int conio_rowskip // zp[2]:28 8197550.049180328
__loadstore volatile char conio_screen_height // zp[1]:21 112149.78504672897
__loadstore char conio_screen_layer // zp[1]:22 1761903.7743589743
__loadstore volatile char conio_screen_width // zp[1]:20 7.056345074647889E7
__constant char conio_scroll_enable[2] = { 1, 1 }
__loadstore unsigned int conio_width // zp[2]:23 203.08080808080808
void conio_x16_init()
__constant char * const conio_x16_init::BASIC_CURSOR_LINE = (char *) 214
char conio_x16_init::line
char conio_x16_init::line#0 // line zp[1]:2 2.1999999999999997
char conio_x16_init::line#1 // line zp[1]:2 22.0
char conio_x16_init::line#3 // line zp[1]:2 33.0
__stackcall void cputc(char c)
char cputc::$15 // reg byte a 20002.0
unsigned int cputc::$16 // zp[2]:33 20002.0
char cputc::$2 // reg byte a 20002.0
char cputc::$4 // reg byte a 20002.0
char cputc::$5 // reg byte a 20002.0
char cputc::$6 // reg byte a 20002.0
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // c zp[1]:30 1764.8823529411764
char cputc::color
char cputc::color#0 // reg byte x 1428.7142857142858
char *cputc::conio_addr
char *cputc::conio_addr#0 // conio_addr zp[2]:31 10001.0
char *cputc::conio_addr#1 // conio_addr zp[2]:31 6000.6
char cputc::scroll_enable
char cputc::scroll_enable#0 // reg byte a 20002.0
void cputln()
char cputln::$2 // reg byte a 200002.0
char cputln::$3 // reg byte a 200002.0
unsigned int cputln::temp
unsigned int cputln::temp#0 // temp zp[2]:41 200002.0
unsigned int cputln::temp#1 // temp zp[2]:41 100001.0
void cscroll()
void gotoxy(char x , char y)
char gotoxy::$5 // reg byte a 2.0000002E7
unsigned int gotoxy::$6 // zp[2]:39 2.0000002E7
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:39 1.0000001E7
char gotoxy::x
char gotoxy::y
char gotoxy::y#1 // reg byte x 22.0
char gotoxy::y#2 // reg byte x 2000002.0
char gotoxy::y#3 // reg byte x 7000004.666666666
char gotoxy::y#4 // reg byte x 4000000.4
void insertup()
char insertup::$3 // reg byte a 2.000000002E9
char insertup::cy
char insertup::cy#0 // cy zp[1]:57 8.416666683333334E7
char insertup::i
char insertup::i#1 // reg byte x 2.000000002E9
char insertup::i#2 // reg byte x 4.444444448888889E8
unsigned int insertup::line
unsigned int insertup::line#0 // line zp[2]:59 2.000000002E9
char *insertup::start
char *insertup::start#0 // start zp[2]:59 1.000000001E9
char insertup::width
char insertup::width#0 // width zp[1]:58 9.1818182E7
char load(char * volatile address , volatile char verify)
__loadstore char * volatile load::address // zp[2]:48 33.666666666666664
char load::return
__loadstore volatile char load::status // zp[1]:52 1001.0
__loadstore volatile char load::verify // zp[1]:50 50.5
char load_to_bank(char device , char *filename , unsigned long address)
char *load_to_bank::addr
unsigned long load_to_bank::address
char load_to_bank::bank
__constant char load_to_bank::bank#0 = byte2 main::BANK_SPRITE<<3|byte1 main::BANK_SPRITE>>5 // bank
char load_to_bank::device
__constant char load_to_bank::device#0 = 8 // device
char *load_to_bank::filename
char load_to_bank::return
void main()
__constant const unsigned long main::BANK_SPRITE = $12000
__loadstore volatile struct VERA_SPRITE main::SPRITE_ATTR // zp[8]:65
__constant const unsigned long main::VRAM_SPRITE = $10000
__constant char main::filename[7] = "SPRITE"
__constant char main::s[$2d] = "

sprite banked file load and display demo.
"
void memcpy_bank_to_vram(unsigned long vdest , unsigned long src , unsigned long num)
char memcpy_bank_to_vram::$0 // reg byte a 202.0
char memcpy_bank_to_vram::$1 // reg byte a 202.0
char memcpy_bank_to_vram::$2 // reg byte a 202.0
char memcpy_bank_to_vram::$4 // reg byte a 202.0
char memcpy_bank_to_vram::$5 // zp[1]:57 67.33333333333333
char memcpy_bank_to_vram::$6 // reg byte a 202.0
char memcpy_bank_to_vram::$7 // reg byte a 202.0
unsigned int memcpy_bank_to_vram::$9 // zp[2]:18 202.0
char *memcpy_bank_to_vram::addr
unsigned int memcpy_bank_to_vram::addr#0 // addr zp[2]:18 101.0
char *memcpy_bank_to_vram::addr#1 // addr zp[2]:18 101.0
char *memcpy_bank_to_vram::addr#2 // addr zp[2]:18 1001.0
char *memcpy_bank_to_vram::addr#4 // addr zp[2]:18 1034.6666666666667
char *memcpy_bank_to_vram::addr#5 // addr zp[2]:18 1501.5
char memcpy_bank_to_vram::bank
char memcpy_bank_to_vram::bank#0 // reg byte x 60.599999999999994
char memcpy_bank_to_vram::bank#1 // reg byte x 1501.5
char memcpy_bank_to_vram::bank#2 // reg byte x 1034.6666666666667
char memcpy_bank_to_vram::bank#5 // reg byte x 750.75
unsigned long memcpy_bank_to_vram::beg
unsigned long memcpy_bank_to_vram::beg#0 // beg zp[4]:14 26.578947368421055
unsigned long memcpy_bank_to_vram::end
unsigned long memcpy_bank_to_vram::end#0 // end zp[4]:10 58.0
unsigned long memcpy_bank_to_vram::num
unsigned long memcpy_bank_to_vram::num#2 // num zp[4]:10 11.222222222222221
unsigned long memcpy_bank_to_vram::pos
unsigned long memcpy_bank_to_vram::pos#1 // pos zp[4]:14 2002.0
unsigned long memcpy_bank_to_vram::pos#2 // pos zp[4]:14 388.0
unsigned long memcpy_bank_to_vram::src
unsigned long memcpy_bank_to_vram::vdest
unsigned long memcpy_bank_to_vram::vdest#2 // vdest zp[4]:6 50.5
void memcpy_in_vram(char dest_bank , void *dest , char dest_increment , char src_bank , void *src , char src_increment , unsigned int num)
char memcpy_in_vram::$0 // reg byte a 2.0000000002E10
char memcpy_in_vram::$1 // reg byte a 2.0000000002E10
char memcpy_in_vram::$3 // reg byte a 2.0000000002E10
char memcpy_in_vram::$4 // reg byte a 2.0000000002E10
void *memcpy_in_vram::dest
void *memcpy_in_vram::dest#0 // dest zp[2]:59 1.9090909093636363E9
char memcpy_in_vram::dest_bank
char memcpy_in_vram::dest_increment
unsigned int memcpy_in_vram::i
unsigned int memcpy_in_vram::i#1 // i zp[2]:33 2.0000000000002E13
unsigned int memcpy_in_vram::i#2 // i zp[2]:33 1.0000000000001E13
unsigned int memcpy_in_vram::num
unsigned int memcpy_in_vram::num#0 // num zp[2]:61 5.882941176471765E11
void *memcpy_in_vram::src
char *memcpy_in_vram::src#0 // src zp[2]:63 1.6666666683333334E8
char memcpy_in_vram::src_bank
char memcpy_in_vram::src_increment
void memcpy_to_vram(char vbank , void *vdest , void *src , unsigned int num)
char *memcpy_to_vram::end
__constant char *memcpy_to_vram::end#0 = (char *)memcpy_to_vram::src#0+SIZEOF_STRUCT_VERA_SPRITE // end
unsigned int memcpy_to_vram::num
char *memcpy_to_vram::s
char *memcpy_to_vram::s#1 // s zp[2]:18 2002.0
char *memcpy_to_vram::s#2 // s zp[2]:18 1334.6666666666667
void *memcpy_to_vram::src
__constant void *memcpy_to_vram::src#0 = (void *)&main::SPRITE_ATTR // src
char memcpy_to_vram::vbank
__constant char memcpy_to_vram::vbank#0 = byte2 VERA_SPRITE_ATTR // vbank
void *memcpy_to_vram::vdest
__constant void *memcpy_to_vram::vdest#0 = (void *)(char *)word0 VERA_SPRITE_ATTR // vdest
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1001.0
void (*printf_str::putc)(char)
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:18 400.4
const char *printf_str::s#2 // s zp[2]:18 1501.5
void screenlayer(char layer)
unsigned int screenlayer::$2 // zp[2]:37 202.0
char screenlayer::$3 // reg byte a 202.0
unsigned int screenlayer::$4 // zp[2]:39 202.0
unsigned int screenlayer::$5 // zp[2]:53 202.0
char screenlayer::layer
char screenlayer::vera_layer_get_height1_$0 // reg byte a 202.0
char screenlayer::vera_layer_get_height1_$1 // reg byte a 202.0
char screenlayer::vera_layer_get_height1_$2 // reg byte a 202.0
char screenlayer::vera_layer_get_height1_$3 // reg byte a 202.0
char *screenlayer::vera_layer_get_height1_config
char *screenlayer::vera_layer_get_height1_config#0 // vera_layer_get_height1_config zp[2]:43 202.0
char screenlayer::vera_layer_get_height1_layer
char screenlayer::vera_layer_get_height1_layer#0 // reg byte a 202.0
unsigned int screenlayer::vera_layer_get_height1_return
unsigned int screenlayer::vera_layer_get_height1_return#0 // vera_layer_get_height1_return zp[2]:53 202.0
unsigned int screenlayer::vera_layer_get_height1_return#1 // vera_layer_get_height1_return zp[2]:53 202.0
char screenlayer::vera_layer_get_width1_$0 // reg byte a 202.0
char screenlayer::vera_layer_get_width1_$1 // reg byte a 202.0
char screenlayer::vera_layer_get_width1_$2 // reg byte a 202.0
char screenlayer::vera_layer_get_width1_$3 // reg byte a 202.0
char *screenlayer::vera_layer_get_width1_config
char *screenlayer::vera_layer_get_width1_config#0 // vera_layer_get_width1_config zp[2]:55 202.0
char screenlayer::vera_layer_get_width1_layer
char screenlayer::vera_layer_get_width1_layer#0 // reg byte a 202.0
unsigned int screenlayer::vera_layer_get_width1_return
unsigned int screenlayer::vera_layer_get_width1_return#0 // vera_layer_get_width1_return zp[2]:37 202.0
unsigned int screenlayer::vera_layer_get_width1_return#1 // vera_layer_get_width1_return zp[2]:37 202.0
void screensize(char *x , char *y)
char screensize::$1 // reg byte a 202.0
char screensize::$3 // reg byte a 202.0
char screensize::hscale
char screensize::hscale#0 // reg byte a 202.0
char screensize::vscale
char screensize::vscale#0 // reg byte a 202.0
char *screensize::x
__constant char *screensize::x#0 = &conio_screen_width // x
char *screensize::y
__constant char *screensize::y#0 = &conio_screen_height // y
void setlfs(volatile char device)
__loadstore volatile char setlfs::device // zp[1]:47 101.0
void setnam(char * volatile filename)
unsigned int setnam::$0 // zp[2]:33 1001.0
__loadstore char * volatile setnam::filename // zp[2]:45 183.66666666666669
__loadstore volatile char setnam::filename_len // zp[1]:51 1001.0
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:33 100001.0
unsigned int strlen::len#2 // len zp[2]:33 50250.75
unsigned int strlen::return
unsigned int strlen::return#0 // return zp[2]:33 2002.0
char *strlen::str
char *strlen::str#0 // str zp[2]:31 5501.0
char *strlen::str#1 // str zp[2]:31 200002.0
char *strlen::str#2 // str zp[2]:31 103334.66666666666
__constant char vera_layer_backcolor[2] = { BLUE, BLUE }
__constant char *vera_layer_config[2] = { VERA_L0_CONFIG, VERA_L1_CONFIG }
char vera_layer_get_backcolor(char layer)
char vera_layer_get_backcolor::layer
char vera_layer_get_backcolor::layer#0 // reg byte y 1102.0
char vera_layer_get_backcolor::return
char vera_layer_get_backcolor::return#0 // reg byte a 367.33333333333337
char vera_layer_get_backcolor::return#2 // reg byte a 202.0
char vera_layer_get_color(char layer)
char vera_layer_get_color::$0 // reg byte a 2.000000002E9
char vera_layer_get_color::$1 // reg byte a 2.000000002E9
char vera_layer_get_color::$3 // reg byte a 2.000000002E9
char *vera_layer_get_color::addr
char *vera_layer_get_color::addr#0 // addr zp[2]:41 2.000000002E9
char vera_layer_get_color::layer
char vera_layer_get_color::layer#0 // reg byte x 20002.0
char vera_layer_get_color::layer#1 // reg byte x 2.00000002E8
char vera_layer_get_color::layer#2 // reg byte x 6.833350010000001E8
char vera_layer_get_color::return
char vera_layer_get_color::return#0 // reg byte a 2.000000002E9
char vera_layer_get_color::return#1 // reg byte a 2.000000002E9
char vera_layer_get_color::return#2 // reg byte a 5.25002501E8
char vera_layer_get_color::return#3 // reg byte a 20002.0
char vera_layer_get_color::return#4 // reg byte a 2.00000002E8
char vera_layer_get_mapbase_bank(char layer)
char vera_layer_get_mapbase_bank::layer
char vera_layer_get_mapbase_bank::layer#0 // reg byte y 1102.0
char vera_layer_get_mapbase_bank::return
char vera_layer_get_mapbase_bank::return#0 // reg byte x 367.33333333333337
char vera_layer_get_mapbase_bank::return#2 // reg byte x 202.0
unsigned int vera_layer_get_mapbase_offset(char layer)
char vera_layer_get_mapbase_offset::$0 // reg byte a 2002.0
char vera_layer_get_mapbase_offset::layer
char vera_layer_get_mapbase_offset::layer#0 // reg byte a 1102.0
unsigned int vera_layer_get_mapbase_offset::return
unsigned int vera_layer_get_mapbase_offset::return#0 // return zp[2]:55 367.33333333333337
unsigned int vera_layer_get_mapbase_offset::return#2 // return zp[2]:55 202.0
char vera_layer_get_rowshift(char layer)
char vera_layer_get_rowshift::layer
char vera_layer_get_rowshift::layer#0 // reg byte y 1102.0
char vera_layer_get_rowshift::return
char vera_layer_get_rowshift::return#0 // reg byte a 367.33333333333337
char vera_layer_get_rowshift::return#2 // reg byte a 202.0
unsigned int vera_layer_get_rowskip(char layer)
char vera_layer_get_rowskip::$0 // reg byte a 2002.0
char vera_layer_get_rowskip::layer
char vera_layer_get_rowskip::layer#0 // reg byte a 1102.0
unsigned int vera_layer_get_rowskip::return
unsigned int vera_layer_get_rowskip::return#0 // return zp[2]:39 367.33333333333337
unsigned int vera_layer_get_rowskip::return#2 // return zp[2]:39 202.0
char vera_layer_get_textcolor(char layer)
char vera_layer_get_textcolor::layer
char vera_layer_get_textcolor::layer#0 // reg byte y 1102.0
char vera_layer_get_textcolor::return
char vera_layer_get_textcolor::return#0 // reg byte a 367.33333333333337
char vera_layer_get_textcolor::return#2 // reg byte a 202.0
__constant char *vera_layer_mapbase[2] = { VERA_L0_MAPBASE, VERA_L1_MAPBASE }
void vera_layer_mode_text(char layer , unsigned long mapbase_address , unsigned long tilebase_address , unsigned int mapwidth , unsigned int mapheight , char tilewidth , char tileheight , unsigned int color_mode)
unsigned int vera_layer_mode_text::color_mode
char vera_layer_mode_text::layer
__constant char vera_layer_mode_text::layer#0 = 1 // layer
unsigned long vera_layer_mode_text::mapbase_address
__constant unsigned long vera_layer_mode_text::mapbase_address#0 = 0 // mapbase_address
unsigned int vera_layer_mode_text::mapheight
unsigned int vera_layer_mode_text::mapwidth
unsigned long vera_layer_mode_text::tilebase_address
__constant unsigned long vera_layer_mode_text::tilebase_address#0 = $f800 // tilebase_address
char vera_layer_mode_text::tileheight
char vera_layer_mode_text::tilewidth
void vera_layer_mode_tile(char layer , unsigned long mapbase_address , unsigned long tilebase_address , unsigned int mapwidth , unsigned int mapheight , char tilewidth , char tileheight , char color_depth)
char vera_layer_mode_tile::color_depth
char vera_layer_mode_tile::config
__constant char vera_layer_mode_tile::config#10 = VERA_LAYER_WIDTH_128|VERA_LAYER_HEIGHT_64 // config
char vera_layer_mode_tile::layer
char vera_layer_mode_tile::mapbase
__constant char vera_layer_mode_tile::mapbase#0 = 0 // mapbase
unsigned long vera_layer_mode_tile::mapbase_address
unsigned int vera_layer_mode_tile::mapheight
unsigned int vera_layer_mode_tile::mapwidth
char vera_layer_mode_tile::tilebase
unsigned long vera_layer_mode_tile::tilebase_address
__constant unsigned long vera_layer_mode_tile::tilebase_address#0 = vera_layer_mode_text::tilebase_address#0>>1 // tilebase_address
char vera_layer_mode_tile::tileheight
char vera_layer_mode_tile::tilewidth
__constant char vera_layer_rowshift[2] = { 0, 0 }
__constant unsigned int vera_layer_rowskip[2] = { 0, 0 }
char vera_layer_set_backcolor(char layer , char color)
char vera_layer_set_backcolor::color
char vera_layer_set_backcolor::layer
__constant char vera_layer_set_backcolor::layer#0 = 1 // layer
char vera_layer_set_backcolor::old
char vera_layer_set_backcolor::return
void vera_layer_set_config(char layer , char config)
char *vera_layer_set_config::addr
char *vera_layer_set_config::addr#0 // addr zp[2]:53 20002.0
char vera_layer_set_config::config
char vera_layer_set_config::layer
void vera_layer_set_mapbase(char layer , char mapbase)
char vera_layer_set_mapbase::$0 // reg byte a 20002.0
char *vera_layer_set_mapbase::addr
char *vera_layer_set_mapbase::addr#0 // addr zp[2]:37 20002.0
char vera_layer_set_mapbase::layer
char vera_layer_set_mapbase::layer#3 // reg byte a 10001.0
char vera_layer_set_mapbase::mapbase
char vera_layer_set_mapbase::mapbase#3 // reg byte x 3333.6666666666665
void vera_layer_set_text_color_mode(char layer , char color_mode)
char vera_layer_set_text_color_mode::$0 // reg byte a 2002.0
char *vera_layer_set_text_color_mode::addr
char *vera_layer_set_text_color_mode::addr#0 // addr zp[2]:43 2502.5
char vera_layer_set_text_color_mode::color_mode
char vera_layer_set_text_color_mode::layer
char vera_layer_set_text_color_mode::layer#3 // reg byte a 1001.0
char vera_layer_set_textcolor(char layer , char color)
char vera_layer_set_textcolor::color
char vera_layer_set_textcolor::layer
__constant char vera_layer_set_textcolor::layer#0 = 1 // layer
char vera_layer_set_textcolor::old
char vera_layer_set_textcolor::return
void vera_layer_set_tilebase(char layer , char tilebase)
char *vera_layer_set_tilebase::addr
char *vera_layer_set_tilebase::addr#0 // addr zp[2]:55 20002.0
char vera_layer_set_tilebase::layer
char vera_layer_set_tilebase::tilebase
__constant char vera_layer_textcolor[2] = { WHITE, WHITE }
__constant char *vera_layer_tilebase[2] = { VERA_L0_TILEBASE, VERA_L1_TILEBASE }
__constant unsigned long vera_mapbase_address[2] = { 0, 0 }
__constant char vera_mapbase_bank[2] = { 0, 0 }
__constant unsigned int vera_mapbase_offset[2] = { 0, 0 }
__constant unsigned long vera_tilebase_address[2] = { 0, 0 }
__constant char vera_tilebase_bank[2] = { 0, 0 }
__constant unsigned int vera_tilebase_offset[2] = { 0, 0 }

zp[1]:2 [ conio_x16_init::line#3 conio_x16_init::line#1 conio_x16_init::line#0 ]
zp[2]:3 [ CONIO_SCREEN_TEXT#11 ]
zp[1]:5 [ CONIO_SCREEN_BANK#11 ]
reg byte a [ vera_layer_set_mapbase::layer#3 ]
reg byte x [ vera_layer_set_mapbase::mapbase#3 ]
reg byte x [ gotoxy::y#4 gotoxy::y#3 gotoxy::y#1 gotoxy::y#2 ]
reg byte x [ vera_layer_get_color::layer#2 vera_layer_get_color::layer#1 vera_layer_get_color::layer#0 ]
reg byte a [ vera_layer_get_color::return#2 vera_layer_get_color::return#0 vera_layer_get_color::return#1 ]
reg byte a [ vera_layer_set_text_color_mode::layer#3 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[4]:6 [ memcpy_bank_to_vram::vdest#2 ]
zp[4]:10 [ memcpy_bank_to_vram::num#2 memcpy_bank_to_vram::end#0 ]
zp[4]:14 [ memcpy_bank_to_vram::pos#2 memcpy_bank_to_vram::beg#0 memcpy_bank_to_vram::pos#1 ]
reg byte x [ memcpy_bank_to_vram::bank#2 memcpy_bank_to_vram::bank#0 memcpy_bank_to_vram::bank#5 memcpy_bank_to_vram::bank#1 ]
zp[2]:18 [ memcpy_to_vram::s#2 memcpy_to_vram::s#1 memcpy_bank_to_vram::addr#5 memcpy_bank_to_vram::addr#4 memcpy_bank_to_vram::addr#1 memcpy_bank_to_vram::addr#2 memcpy_bank_to_vram::addr#0 memcpy_bank_to_vram::$9 printf_str::s#2 printf_str::s#0 clrscr::line_text#2 clrscr::line_text#1 clrscr::line_text#0 ]
reg byte x [ insertup::i#2 insertup::i#1 ]
zp[1]:20 [ conio_screen_width ]
zp[1]:21 [ conio_screen_height ]
zp[1]:22 [ conio_screen_layer ]
zp[2]:23 [ conio_width ]
zp[2]:25 [ conio_height ]
zp[1]:27 [ conio_rowshift ]
zp[2]:28 [ conio_rowskip ]
zp[1]:30 [ cputc::c#0 clrscr::l#2 clrscr::l#1 ]
reg byte a [ vera_layer_get_color::return#3 ]
reg byte x [ cputc::color#0 ]
reg byte a [ cputc::$15 ]
zp[2]:31 [ cputc::conio_addr#0 cputc::conio_addr#1 clearline::c#2 clearline::c#1 strlen::str#2 strlen::str#0 strlen::str#1 ]
reg byte a [ cputc::$2 ]
reg byte a [ cputc::$4 ]
reg byte a [ cputc::$5 ]
reg byte a [ cputc::$6 ]
reg byte a [ cputc::scroll_enable#0 ]
zp[2]:33 [ cputc::$16 memcpy_in_vram::i#2 memcpy_in_vram::i#1 strlen::len#2 strlen::len#1 strlen::return#0 setnam::$0 ]
reg byte a [ screensize::hscale#0 ]
reg byte a [ screensize::$1 ]
reg byte a [ screensize::vscale#0 ]
reg byte a [ screensize::$3 ]
reg byte y [ vera_layer_get_mapbase_bank::layer#0 ]
reg byte x [ vera_layer_get_mapbase_bank::return#2 ]
reg byte x [ CONIO_SCREEN_BANK#14 ]
reg byte a [ vera_layer_get_mapbase_offset::layer#0 ]
zp[2]:35 [ CONIO_SCREEN_TEXT#16 ]
reg byte a [ screenlayer::vera_layer_get_width1_layer#0 ]
reg byte a [ screenlayer::vera_layer_get_width1_$2 ]
reg byte a [ screenlayer::vera_layer_get_width1_$0 ]
reg byte a [ screenlayer::vera_layer_get_width1_$1 ]
reg byte a [ screenlayer::vera_layer_get_width1_$3 ]
reg byte y [ vera_layer_get_rowshift::layer#0 ]
reg byte a [ vera_layer_get_rowshift::return#2 ]
reg byte a [ screenlayer::$3 ]
reg byte a [ vera_layer_get_rowskip::layer#0 ]
reg byte a [ screenlayer::vera_layer_get_height1_layer#0 ]
reg byte a [ screenlayer::vera_layer_get_height1_$2 ]
reg byte a [ screenlayer::vera_layer_get_height1_$0 ]
reg byte a [ screenlayer::vera_layer_get_height1_$1 ]
reg byte a [ screenlayer::vera_layer_get_height1_$3 ]
reg byte a [ vera_layer_set_mapbase::$0 ]
zp[2]:37 [ vera_layer_set_mapbase::addr#0 screenlayer::vera_layer_get_width1_return#0 screenlayer::vera_layer_get_width1_return#1 screenlayer::$2 ]
zp[2]:39 [ gotoxy::$6 gotoxy::line_offset#0 vera_layer_get_rowskip::return#2 screenlayer::$4 vera_layer_get_rowskip::return#0 ]
reg byte a [ gotoxy::$5 ]
reg byte a [ vera_layer_get_color::$3 ]
reg byte a [ vera_layer_get_color::$0 ]
reg byte a [ vera_layer_get_color::$1 ]
reg byte a [ cputln::$2 ]
zp[2]:41 [ cputln::temp#0 cputln::temp#1 vera_layer_get_color::addr#0 ]
reg byte a [ cputln::$3 ]
reg byte a [ vera_layer_set_text_color_mode::$0 ]
zp[2]:43 [ vera_layer_set_text_color_mode::addr#0 screenlayer::vera_layer_get_height1_config#0 ]
reg byte y [ vera_layer_get_backcolor::layer#0 ]
reg byte a [ vera_layer_get_backcolor::return#2 ]
reg byte a [ clrscr::$0 ]
reg byte y [ vera_layer_get_textcolor::layer#0 ]
reg byte a [ vera_layer_get_textcolor::return#2 ]
reg byte a [ clrscr::$2 ]
reg byte a [ clrscr::$9 ]
reg byte a [ clrscr::$5 ]
reg byte a [ clrscr::$6 ]
reg byte a [ clrscr::$7 ]
reg byte a [ printf_str::c#1 ]
zp[2]:45 [ setnam::filename ]
zp[1]:47 [ setlfs::device ]
zp[2]:48 [ load::address ]
zp[1]:50 [ load::verify ]
reg byte a [ memcpy_bank_to_vram::$0 ]
reg byte a [ memcpy_bank_to_vram::$1 ]
reg byte a [ memcpy_bank_to_vram::$2 ]
reg byte a [ memcpy_bank_to_vram::$4 ]
reg byte a [ memcpy_bank_to_vram::$6 ]
reg byte a [ memcpy_bank_to_vram::$7 ]
reg byte x [ vera_layer_get_mapbase_bank::return#0 ]
reg byte a [ vera_layer_get_mapbase_offset::$0 ]
reg byte a [ vera_layer_get_rowshift::return#0 ]
reg byte a [ vera_layer_get_rowskip::$0 ]
reg byte a [ vera_layer_get_backcolor::return#0 ]
reg byte a [ vera_layer_get_textcolor::return#0 ]
zp[1]:51 [ setnam::filename_len ]
zp[1]:52 [ load::status ]
zp[2]:53 [ vera_layer_set_config::addr#0 screenlayer::vera_layer_get_height1_return#0 screenlayer::vera_layer_get_height1_return#1 screenlayer::$5 ]
zp[2]:55 [ vera_layer_set_tilebase::addr#0 screenlayer::vera_layer_get_width1_config#0 vera_layer_get_mapbase_offset::return#2 vera_layer_get_mapbase_offset::return#0 ]
zp[1]:57 [ insertup::cy#0 memcpy_bank_to_vram::$5 clrscr::$1 clrscr::color#0 ]
zp[1]:58 [ insertup::width#0 ]
reg byte a [ insertup::$3 ]
zp[2]:59 [ insertup::line#0 insertup::start#0 memcpy_in_vram::dest#0 ]
zp[2]:61 [ memcpy_in_vram::num#0 ]
reg byte a [ clearline::$5 ]
zp[2]:63 [ clearline::addr#0 memcpy_in_vram::src#0 ]
reg byte a [ clearline::$1 ]
reg byte a [ clearline::$2 ]
reg byte a [ vera_layer_get_color::return#4 ]
reg byte x [ clearline::color#0 ]
reg byte a [ memcpy_in_vram::$0 ]
reg byte a [ memcpy_in_vram::$1 ]
reg byte a [ memcpy_in_vram::$3 ]
reg byte a [ memcpy_in_vram::$4 ]
zp[8]:65 [ main::SPRITE_ATTR ]
