
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from main
  (word) strlen::return#0 ← (byte) 'x'
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen
  (word) strlen::return#3 ← phi( strlen/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from @1
  (byte*) strlen::str#0 ← (const byte*) STR
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:main::@1
main::@1: scope:[main]  from main
  (word) strlen::return#4 ← phi( main/(word) strlen::return#2 )
  (word~) main::$0 ← (word) strlen::return#4
  *((const nomodify byte*) SCREEN + (number) 0) ← (byte)(word~) main::$0
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte*) STR = (byte*) "camelot!"
(void()) main()
(word~) main::$0
(label) main::@1
(label) main::@return
(word()) strlen((byte*) strlen::str)
(label) strlen::@return
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (byte)(word~) main::$0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias strlen::return#0 = strlen::return#3 strlen::return#1 
Alias strlen::return#2 = strlen::return#4 
Successful SSA optimization Pass2AliasElimination
Constant (const word) strlen::return#0 = 'x'
Constant (const byte*) strlen::str#0 = STR
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) strlen::return#2 = strlen::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::$0 = strlen::return#2
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)main::$0 in [6] *((const nomodify byte*) SCREEN + (byte) 0) ← (byte)(const word) main::$0
Successful SSA optimization Pass2ConstantValues
Simplifying expression containing zero SCREEN in [6] *((const nomodify byte*) SCREEN + (byte) 0) ← (byte)(const word) main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte*) strlen::str#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte*) STR
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with different constant siblings (const word) strlen::return#2
Constant inlined strlen::return#2 = (const word) strlen::return#0
Constant inlined main::$0 = (const word) strlen::return#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of strlen
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to strlen:6 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of strlen

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call strlen 
  to:main::@1
main::@1: scope:[main]  from main
  [6] *((const nomodify byte*) SCREEN) ← (byte)(const word) strlen::return#0
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from main
  [8] phi()
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(word()) strlen((byte*) strlen::str)
(word) strlen::return
(byte*) strlen::str

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Includes a local file with the same name as a system library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call strlen 
    // [8] phi from main to strlen [phi:main->strlen]
  strlen_from_main:
    jsr strlen
    jmp __b1
    // main::@1
  __b1:
    // [6] *((const nomodify byte*) SCREEN) ← (byte)(const word) strlen::return#0 -- _deref_pbuc1=vbuc2 
    lda #strlen.return
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // strlen
// A local stdlib include file
strlen: {
    .label return = 'x'
    jmp __breturn
    // strlen::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const nomodify byte*) SCREEN) ← (byte)(const word) strlen::return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [strlen] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [strlen] best 72 combination 
Uplifting [main] best 72 combination 
Uplifting [] best 72 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Includes a local file with the same name as a system library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call strlen 
    // [8] phi from main to strlen [phi:main->strlen]
  strlen_from_main:
    jsr strlen
    jmp __b1
    // main::@1
  __b1:
    // [6] *((const nomodify byte*) SCREEN) ← (byte)(const word) strlen::return#0 -- _deref_pbuc1=vbuc2 
    lda #strlen.return
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // strlen
// A local stdlib include file
strlen: {
    .label return = 'x'
    jmp __breturn
    // strlen::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction strlen_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@return
(word()) strlen((byte*) strlen::str)
(label) strlen::@return
(word) strlen::return
(const word) strlen::return#0 return = (byte) 'x'
(byte*) strlen::str



FINAL ASSEMBLER
Score: 24

  // File Comments
// Includes a local file with the same name as a system library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // strlen(STR)
    // [5] call strlen 
    // [8] phi from main to strlen [phi:main->strlen]
    jsr strlen
    // main::@1
    // SCREEN [0] = (char) strlen(STR)
    // [6] *((const nomodify byte*) SCREEN) ← (byte)(const word) strlen::return#0 -- _deref_pbuc1=vbuc2 
    lda #strlen.return
    sta SCREEN
    // main::@return
    // }
    // [7] return 
    rts
}
  // strlen
// A local stdlib include file
strlen: {
    .label return = 'x'
    // strlen::@return
    // [9] return 
    rts
}
  // File Data

