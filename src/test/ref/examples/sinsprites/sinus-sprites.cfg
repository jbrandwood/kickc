
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [2] (byte) sin_idx_y#15 ← phi( main::@1/(byte) sin_idx_y#15 main/(byte) 0 main::@2/(byte) sin_idx_y#12 )
  [2] (byte) sin_idx_x#15 ← phi( main::@1/(byte) sin_idx_x#15 main/(byte) 0 main::@2/(byte) sin_idx_x#12 )
  [3] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call anim 
  to:main::@1

(void()) anim()
anim: scope:[anim]  from main::@2
  [6] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [7] (byte) anim::xidx#0 ← (byte) sin_idx_x#15
  [8] (byte) anim::yidx#0 ← (byte) sin_idx_y#15
  to:anim::@3
anim::@3: scope:[anim]  from anim anim::@5
  [9] (byte) anim::j#2 ← phi( anim/(byte) 0 anim::@5/(byte) anim::j#1 )
  [9] (byte) anim::yidx#3 ← phi( anim/(byte) anim::yidx#0 anim::@5/(byte) anim::yidx#6 )
  [9] (byte) anim::j2#2 ← phi( anim/(byte) $c anim::@5/(byte) anim::j2#1 )
  [9] (byte) anim::x_msb#2 ← phi( anim/(byte) 0 anim::@5/(byte) anim::x_msb#1 )
  [9] (byte) anim::xidx#3 ← phi( anim/(byte) anim::xidx#0 anim::@5/(byte) anim::xidx#5 )
  [10] (word) anim::x#0 ← (word) $1e + *((const to_nomodify byte*) sintab_x + (byte) anim::xidx#3)
  [11] (byte~) anim::$7 ← (byte) anim::x_msb#2 << (byte) 1
  [12] (byte~) anim::$8 ← > (word) anim::x#0
  [13] (byte) anim::x_msb#1 ← (byte~) anim::$7 | (byte~) anim::$8
  [14] (byte~) anim::$10 ← < (word) anim::x#0
  [15] *((const nomodify byte*) SPRITES_XPOS + (byte) anim::j2#2) ← (byte~) anim::$10
  [16] *((const nomodify byte*) SPRITES_YPOS + (byte) anim::j2#2) ← *((const to_nomodify byte*) sintab_y + (byte) anim::yidx#3)
  [17] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a
  [18] if((byte) anim::xidx#1<(const nomodify byte) sinlen_x) goto anim::@4
  to:anim::@6
anim::@6: scope:[anim]  from anim::@3
  [19] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const nomodify byte) sinlen_x
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@6
  [20] (byte) anim::xidx#5 ← phi( anim::@3/(byte) anim::xidx#1 anim::@6/(byte) anim::xidx#2 )
  [21] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8
  [22] if((byte) anim::yidx#1<(const nomodify byte) sinlen_y) goto anim::@5
  to:anim::@7
anim::@7: scope:[anim]  from anim::@4
  [23] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const nomodify byte) sinlen_y
  to:anim::@5
anim::@5: scope:[anim]  from anim::@4 anim::@7
  [24] (byte) anim::yidx#6 ← phi( anim::@4/(byte) anim::yidx#1 anim::@7/(byte) anim::yidx#2 )
  [25] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte) 2
  [26] (byte) anim::j#1 ← ++ (byte) anim::j#2
  [27] if((byte) anim::j#1!=(byte) 7) goto anim::@3
  to:anim::@8
anim::@8: scope:[anim]  from anim::@5
  [28] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) ← (byte) anim::x_msb#1
  [29] (byte) sin_idx_x#2 ← ++ (byte) sin_idx_x#15
  [30] if((byte) sin_idx_x#2<(const nomodify byte) sinlen_x) goto anim::@9
  to:anim::@1
anim::@9: scope:[anim]  from anim::@8
  [31] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim::@8 anim::@9
  [32] (byte) sin_idx_x#12 ← phi( anim::@8/(byte) 0 anim::@9/(byte) sin_idx_x#2 )
  [33] (byte) sin_idx_y#2 ← ++ (byte) sin_idx_y#15
  [34] if((byte) sin_idx_y#2<(const nomodify byte) sinlen_y) goto anim::@10
  to:anim::@2
anim::@10: scope:[anim]  from anim::@1
  [35] phi()
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@10
  [36] (byte) sin_idx_y#12 ← phi( anim::@10/(byte) sin_idx_y#2 anim::@1/(byte) 0 )
  [37] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← -- *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  to:anim::@return
anim::@return: scope:[anim]  from anim::@2
  [38] return 
  to:@return

(void()) init()
init: scope:[init]  from main
  [39] phi()
  [40] call clear_screen 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [41] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init/(byte) 0 )
  [42] *((const nomodify byte*) COLS + (byte) init::i#2) ← (byte) 0
  [43] *((const nomodify byte*) COLS+(byte) $28 + (byte) init::i#2) ← (byte) $b
  [44] (byte) init::i#1 ← ++ (byte) init::i#2
  [45] if((byte) init::i#1!=(byte) $28) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [46] phi()
  [47] call place_sprites 
  to:init::@3
init::@3: scope:[init]  from init::@2
  [48] phi()
  [49] call gen_sprites 
  to:init::@4
init::@4: scope:[init]  from init::@3
  [50] phi()
  [51] call progress_init 
  to:init::@5
init::@5: scope:[init]  from init::@4
  [52] phi()
  [53] call gen_sintab 
  to:init::@6
init::@6: scope:[init]  from init::@5
  [54] phi()
  [55] call progress_init 
  to:init::@7
init::@7: scope:[init]  from init::@6
  [56] phi()
  [57] call gen_sintab 
  to:init::@8
init::@8: scope:[init]  from init::@7
  [58] phi()
  [59] call clear_screen 
  to:init::@return
init::@return: scope:[init]  from init::@8
  [60] return 
  to:@return

(void()) clear_screen()
clear_screen: scope:[clear_screen]  from init init::@8
  [61] phi()
  to:clear_screen::@1
clear_screen::@1: scope:[clear_screen]  from clear_screen clear_screen::@2
  [62] (byte*) clear_screen::sc#2 ← phi( clear_screen/(const nomodify byte*) SCREEN clear_screen::@2/(byte*) clear_screen::sc#1 )
  [63] if((byte*) clear_screen::sc#2<(const nomodify byte*) SCREEN+(word) $3e8) goto clear_screen::@2
  to:clear_screen::@return
clear_screen::@return: scope:[clear_screen]  from clear_screen::@1
  [64] return 
  to:@return
clear_screen::@2: scope:[clear_screen]  from clear_screen::@1
  [65] *((byte*) clear_screen::sc#2) ← (byte) ' '
  [66] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2
  to:clear_screen::@1

(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
gen_sintab: scope:[gen_sintab]  from init::@5 init::@7
  [67] (byte*) gen_sintab::sintab#13 ← phi( init::@5/(const to_nomodify byte*) sintab_x init::@7/(const to_nomodify byte*) sintab_y )
  [67] (byte) gen_sintab::length#10 ← phi( init::@5/(const nomodify byte) sinlen_x init::@7/(const nomodify byte) sinlen_y )
  [67] (byte) gen_sintab::min#2 ← phi( init::@5/(byte) 0 init::@7/(byte) $32 )
  [67] (byte) gen_sintab::max#2 ← phi( init::@5/(byte) $ff init::@7/(byte) $d0 )
  [68] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2
  [69] call setFAC 
  to:gen_sintab::@3
gen_sintab::@3: scope:[gen_sintab]  from gen_sintab
  [70] phi()
  [71] call setARGtoFAC 
  to:gen_sintab::@4
gen_sintab::@4: scope:[gen_sintab]  from gen_sintab::@3
  [72] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2
  [73] call setFAC 
  to:gen_sintab::@5
gen_sintab::@5: scope:[gen_sintab]  from gen_sintab::@4
  [74] phi()
  [75] call setMEMtoFAC 
  to:gen_sintab::@6
gen_sintab::@6: scope:[gen_sintab]  from gen_sintab::@5
  [76] phi()
  [77] call subFACfromARG 
  to:gen_sintab::@7
gen_sintab::@7: scope:[gen_sintab]  from gen_sintab::@6
  [78] phi()
  [79] call setMEMtoFAC 
  to:gen_sintab::@8
gen_sintab::@8: scope:[gen_sintab]  from gen_sintab::@7
  [80] phi()
  [81] call setFAC 
  to:gen_sintab::@9
gen_sintab::@9: scope:[gen_sintab]  from gen_sintab::@8
  [82] phi()
  [83] call divMEMbyFAC 
  to:gen_sintab::@10
gen_sintab::@10: scope:[gen_sintab]  from gen_sintab::@9
  [84] phi()
  [85] call setMEMtoFAC 
  to:gen_sintab::@11
gen_sintab::@11: scope:[gen_sintab]  from gen_sintab::@10
  [86] phi()
  [87] call addMEMtoFAC 
  to:gen_sintab::@12
gen_sintab::@12: scope:[gen_sintab]  from gen_sintab::@11
  [88] phi()
  [89] call setMEMtoFAC 
  to:gen_sintab::@1
gen_sintab::@1: scope:[gen_sintab]  from gen_sintab::@12 gen_sintab::@22
  [90] (byte*) progress_cursor#12 ← phi( gen_sintab::@12/(byte*) progress_init::line#2 gen_sintab::@22/(byte*) progress_cursor#10 )
  [90] (byte) progress_idx#13 ← phi( gen_sintab::@12/(byte) 0 gen_sintab::@22/(byte) progress_idx#11 )
  [90] (byte) gen_sintab::i#10 ← phi( gen_sintab::@12/(byte) 0 gen_sintab::@22/(byte) gen_sintab::i#1 )
  [91] if((byte) gen_sintab::i#10<(byte) gen_sintab::length#10) goto gen_sintab::@2
  to:gen_sintab::@return
gen_sintab::@return: scope:[gen_sintab]  from gen_sintab::@1
  [92] return 
  to:@return
gen_sintab::@2: scope:[gen_sintab]  from gen_sintab::@1
  [93] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10
  [94] call setFAC 
  to:gen_sintab::@13
gen_sintab::@13: scope:[gen_sintab]  from gen_sintab::@2
  [95] phi()
  [96] call mulFACbyMEM 
  to:gen_sintab::@14
gen_sintab::@14: scope:[gen_sintab]  from gen_sintab::@13
  [97] phi()
  [98] call setMEMtoFAC 
  to:gen_sintab::@15
gen_sintab::@15: scope:[gen_sintab]  from gen_sintab::@14
  [99] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10
  [100] call setFAC 
  to:gen_sintab::@16
gen_sintab::@16: scope:[gen_sintab]  from gen_sintab::@15
  [101] phi()
  [102] call divMEMbyFAC 
  to:gen_sintab::@17
gen_sintab::@17: scope:[gen_sintab]  from gen_sintab::@16
  [103] phi()
  [104] call sinFAC 
  to:gen_sintab::@18
gen_sintab::@18: scope:[gen_sintab]  from gen_sintab::@17
  [105] phi()
  [106] call mulFACbyMEM 
  to:gen_sintab::@19
gen_sintab::@19: scope:[gen_sintab]  from gen_sintab::@18
  [107] phi()
  [108] call addMEMtoFAC 
  to:gen_sintab::@20
gen_sintab::@20: scope:[gen_sintab]  from gen_sintab::@19
  [109] phi()
  [110] call getFAC 
  [111] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:gen_sintab::@21
gen_sintab::@21: scope:[gen_sintab]  from gen_sintab::@20
  [112] (word~) gen_sintab::$20 ← (word) getFAC::return#2
  [113] *((byte*) gen_sintab::sintab#13 + (byte) gen_sintab::i#10) ← (byte)(word~) gen_sintab::$20
  [114] call progress_inc 
  to:gen_sintab::@22
gen_sintab::@22: scope:[gen_sintab]  from gen_sintab::@21
  [115] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10
  to:gen_sintab::@1

(void()) progress_inc()
progress_inc: scope:[progress_inc]  from gen_sintab::@21
  [116] (byte) progress_idx#9 ← ++ (byte) progress_idx#13
  [117] if((byte) progress_idx#9!=(byte) 8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [118] *((byte*) progress_cursor#12) ← *((const to_nomodify byte*) progress_inc::progress_chars+(byte) 8)
  [119] (byte*) progress_cursor#9 ← ++ (byte*) progress_cursor#12
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [120] (byte*) progress_cursor#10 ← phi( progress_inc/(byte*) progress_cursor#12 progress_inc::@2/(byte*) progress_cursor#9 )
  [120] (byte) progress_idx#11 ← phi( progress_inc/(byte) progress_idx#9 progress_inc::@2/(byte) 0 )
  [121] *((byte*) progress_cursor#10) ← *((const to_nomodify byte*) progress_inc::progress_chars + (byte) progress_idx#11)
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [122] return 
  to:@return

(word()) getFAC()
getFAC: scope:[getFAC]  from gen_sintab::@20
  asm { jsr$b1aa stymemLo stamemHi  }
  [124] (word) getFAC::return#0 ← *((const nomodify byte*) memHi) w= *((const nomodify byte*) memLo)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [125] return 
  to:@return

(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
addMEMtoFAC: scope:[addMEMtoFAC]  from gen_sintab::@11 gen_sintab::@19
  [126] phi()
  to:addMEMtoFAC::prepareMEM1
addMEMtoFAC::prepareMEM1: scope:[addMEMtoFAC]  from addMEMtoFAC
  [127] *((const nomodify byte*) memLo) ← <(word)(const byte*) gen_sintab::f_min
  [128] *((const nomodify byte*) memHi) ← >(word)(const byte*) gen_sintab::f_min
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [130] return 
  to:@return

(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
mulFACbyMEM: scope:[mulFACbyMEM]  from gen_sintab::@13 gen_sintab::@18
  [131] (byte*) mulFACbyMEM::mem#2 ← phi( gen_sintab::@13/(const byte*) gen_sintab::f_2pi gen_sintab::@18/(const byte*) gen_sintab::f_amp )
  to:mulFACbyMEM::prepareMEM1
mulFACbyMEM::prepareMEM1: scope:[mulFACbyMEM]  from mulFACbyMEM
  [132] (byte~) mulFACbyMEM::prepareMEM1_$0 ← < (word)(byte*) mulFACbyMEM::mem#2
  [133] *((const nomodify byte*) memLo) ← (byte~) mulFACbyMEM::prepareMEM1_$0
  [134] (byte~) mulFACbyMEM::prepareMEM1_$1 ← > (word)(byte*) mulFACbyMEM::mem#2
  [135] *((const nomodify byte*) memHi) ← (byte~) mulFACbyMEM::prepareMEM1_$1
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM::prepareMEM1
  asm { ldamemLo ldymemHi jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [137] return 
  to:@return

(void()) sinFAC()
sinFAC: scope:[sinFAC]  from gen_sintab::@17
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [139] return 
  to:@return

(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
divMEMbyFAC: scope:[divMEMbyFAC]  from gen_sintab::@16 gen_sintab::@9
  [140] (byte*) divMEMbyFAC::mem#2 ← phi( gen_sintab::@16/(const byte*) gen_sintab::f_i gen_sintab::@9/(const byte*) gen_sintab::f_amp )
  to:divMEMbyFAC::prepareMEM1
divMEMbyFAC::prepareMEM1: scope:[divMEMbyFAC]  from divMEMbyFAC
  [141] (byte~) divMEMbyFAC::prepareMEM1_$0 ← < (word)(byte*) divMEMbyFAC::mem#2
  [142] *((const nomodify byte*) memLo) ← (byte~) divMEMbyFAC::prepareMEM1_$0
  [143] (byte~) divMEMbyFAC::prepareMEM1_$1 ← > (word)(byte*) divMEMbyFAC::mem#2
  [144] *((const nomodify byte*) memHi) ← (byte~) divMEMbyFAC::prepareMEM1_$1
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC::prepareMEM1
  asm { ldamemLo ldymemHi jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [146] return 
  to:@return

(void()) setFAC((word) setFAC::w)
setFAC: scope:[setFAC]  from gen_sintab gen_sintab::@15 gen_sintab::@2 gen_sintab::@4 gen_sintab::@8
  [147] (word) setFAC::prepareMEM1_mem#0 ← phi( gen_sintab/(word) setFAC::w#0 gen_sintab::@15/(word) setFAC::w#4 gen_sintab::@2/(word) setFAC::w#3 gen_sintab::@4/(word) setFAC::w#1 gen_sintab::@8/(byte) 2 )
  to:setFAC::prepareMEM1
setFAC::prepareMEM1: scope:[setFAC]  from setFAC
  [148] (byte~) setFAC::prepareMEM1_$0 ← < (word) setFAC::prepareMEM1_mem#0
  [149] *((const nomodify byte*) memLo) ← (byte~) setFAC::prepareMEM1_$0
  [150] (byte~) setFAC::prepareMEM1_$1 ← > (word) setFAC::prepareMEM1_mem#0
  [151] *((const nomodify byte*) memHi) ← (byte~) setFAC::prepareMEM1_$1
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC::prepareMEM1
  asm { ldymemLo ldamemHi jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [153] return 
  to:@return

(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
setMEMtoFAC: scope:[setMEMtoFAC]  from gen_sintab::@10 gen_sintab::@12 gen_sintab::@14 gen_sintab::@5 gen_sintab::@7
  [154] (byte*) setMEMtoFAC::mem#5 ← phi( gen_sintab::@10/(const byte*) gen_sintab::f_amp gen_sintab::@12/(const byte*) gen_sintab::f_min gen_sintab::@14/(const byte*) gen_sintab::f_i gen_sintab::@5/(const byte*) gen_sintab::f_min gen_sintab::@7/(const byte*) gen_sintab::f_amp )
  to:setMEMtoFAC::prepareMEM1
setMEMtoFAC::prepareMEM1: scope:[setMEMtoFAC]  from setMEMtoFAC
  [155] (byte~) setMEMtoFAC::prepareMEM1_$0 ← < (word)(byte*) setMEMtoFAC::mem#5
  [156] *((const nomodify byte*) memLo) ← (byte~) setMEMtoFAC::prepareMEM1_$0
  [157] (byte~) setMEMtoFAC::prepareMEM1_$1 ← > (word)(byte*) setMEMtoFAC::mem#5
  [158] *((const nomodify byte*) memHi) ← (byte~) setMEMtoFAC::prepareMEM1_$1
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC::prepareMEM1
  asm { ldxmemLo ldymemHi jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [160] return 
  to:@return

(void()) subFACfromARG()
subFACfromARG: scope:[subFACfromARG]  from gen_sintab::@6
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  [162] return 
  to:@return

(void()) setARGtoFAC()
setARGtoFAC: scope:[setARGtoFAC]  from gen_sintab::@3
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  [164] return 
  to:@return

(void()) progress_init((byte*) progress_init::line)
progress_init: scope:[progress_init]  from init::@4 init::@6
  [165] (byte*) progress_init::line#2 ← phi( init::@4/(const nomodify byte*) SCREEN init::@6/(const nomodify byte*) SCREEN+(byte) $28 )
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  [166] return 
  to:@return

(void()) gen_sprites()
gen_sprites: scope:[gen_sprites]  from init::@3
  [167] phi()
  to:gen_sprites::@1
gen_sprites::@1: scope:[gen_sprites]  from gen_sprites gen_sprites::@2
  [168] (byte*) gen_sprites::spr#2 ← phi( gen_sprites/(const nomodify byte*) sprites gen_sprites::@2/(byte*) gen_sprites::spr#1 )
  [168] (byte) gen_sprites::i#2 ← phi( gen_sprites/(byte) 0 gen_sprites::@2/(byte) gen_sprites::i#1 )
  [169] (byte) gen_chargen_sprite::ch#0 ← *((const byte*) gen_sprites::cml + (byte) gen_sprites::i#2)
  [170] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2
  [171] call gen_chargen_sprite 
  to:gen_sprites::@2
gen_sprites::@2: scope:[gen_sprites]  from gen_sprites::@1
  [172] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40
  [173] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2
  [174] if((byte) gen_sprites::i#1!=(byte) 7) goto gen_sprites::@1
  to:gen_sprites::@return
gen_sprites::@return: scope:[gen_sprites]  from gen_sprites::@2
  [175] return 
  to:@return

(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
gen_chargen_sprite: scope:[gen_chargen_sprite]  from gen_sprites::@1
  [176] (word~) gen_chargen_sprite::$14 ← (word)(byte) gen_chargen_sprite::ch#0
  [177] (word~) gen_chargen_sprite::$0 ← (word~) gen_chargen_sprite::$14 << (byte) 3
  [178] (byte*) gen_chargen_sprite::chargen#0 ← (const nomodify byte*) CHARGEN + (word~) gen_chargen_sprite::$0
  asm { sei  }
  [180] *((const nomodify byte*) PROCPORT) ← (byte) $32
  to:gen_chargen_sprite::@1
gen_chargen_sprite::@1: scope:[gen_chargen_sprite]  from gen_chargen_sprite gen_chargen_sprite::@8
  [181] (byte*) gen_chargen_sprite::sprite#11 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::sprite#0 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#2 )
  [181] (byte) gen_chargen_sprite::y#2 ← phi( gen_chargen_sprite/(byte) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::y#1 )
  [182] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2)
  to:gen_chargen_sprite::@2
gen_chargen_sprite::@2: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@1 gen_chargen_sprite::@7
  [183] (byte) gen_chargen_sprite::x#6 ← phi( gen_chargen_sprite::@1/(byte) 0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::x#1 )
  [183] (byte*) gen_chargen_sprite::sprite#10 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::sprite#11 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#4 )
  [183] (byte) gen_chargen_sprite::s_gen_cnt#4 ← phi( gen_chargen_sprite::@1/(byte) 0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [183] (byte) gen_chargen_sprite::s_gen#5 ← phi( gen_chargen_sprite::@1/(byte) 0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen#6 )
  [183] (byte) gen_chargen_sprite::bits#2 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::bits#0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::bits#1 )
  [184] (byte~) gen_chargen_sprite::$2 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80
  [185] if((byte~) gen_chargen_sprite::$2==(byte) 0) goto gen_chargen_sprite::@3
  to:gen_chargen_sprite::@10
gen_chargen_sprite::@10: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2
  [186] phi()
  to:gen_chargen_sprite::@3
gen_chargen_sprite::@3: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@10 gen_chargen_sprite::@2
  [187] (byte) gen_chargen_sprite::c#3 ← phi( gen_chargen_sprite::@10/(byte) 1 gen_chargen_sprite::@2/(byte) 0 )
  to:gen_chargen_sprite::@4
gen_chargen_sprite::@4: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@3 gen_chargen_sprite::@5
  [188] (byte*) gen_chargen_sprite::sprite#3 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::sprite#10 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#4 )
  [188] (byte) gen_chargen_sprite::b#2 ← phi( gen_chargen_sprite::@3/(byte) 0 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::b#1 )
  [188] (byte) gen_chargen_sprite::s_gen_cnt#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [188] (byte) gen_chargen_sprite::s_gen#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen#5 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  [189] (byte~) gen_chargen_sprite::$5 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1
  [190] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$5 | (byte) gen_chargen_sprite::c#3
  [191] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3
  [192] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte) 8) goto gen_chargen_sprite::@5
  to:gen_chargen_sprite::@6
gen_chargen_sprite::@6: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4
  [193] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1
  [194] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1
  [195] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1
  [196] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3
  to:gen_chargen_sprite::@5
gen_chargen_sprite::@5: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4 gen_chargen_sprite::@6
  [197] (byte*) gen_chargen_sprite::sprite#4 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#3 gen_chargen_sprite::@6/(byte*) gen_chargen_sprite::sprite#1 )
  [197] (byte) gen_chargen_sprite::s_gen_cnt#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen_cnt#1 gen_chargen_sprite::@6/(byte) 0 )
  [197] (byte) gen_chargen_sprite::s_gen#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 gen_chargen_sprite::@6/(byte) 0 )
  [198] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2
  [199] if((byte) gen_chargen_sprite::b#1!=(byte) 3) goto gen_chargen_sprite::@4
  to:gen_chargen_sprite::@7
gen_chargen_sprite::@7: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@5
  [200] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte) 1
  [201] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6
  [202] if((byte) gen_chargen_sprite::x#1!=(byte) 8) goto gen_chargen_sprite::@2
  to:gen_chargen_sprite::@8
gen_chargen_sprite::@8: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@7
  [203] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6
  [204] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2
  [205] if((byte) gen_chargen_sprite::y#1!=(byte) 8) goto gen_chargen_sprite::@1
  to:gen_chargen_sprite::@9
gen_chargen_sprite::@9: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@8
  [206] *((const nomodify byte*) PROCPORT) ← (byte) $37
  asm { cli  }
  to:gen_chargen_sprite::@return
gen_chargen_sprite::@return: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@9
  [208] return 
  to:@return

(void()) place_sprites()
place_sprites: scope:[place_sprites]  from init::@2
  [209] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $7f
  [210] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_EXPAND_X) ← (byte) $7f
  [211] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_EXPAND_Y) ← (byte) $7f
  to:place_sprites::@1
place_sprites::@1: scope:[place_sprites]  from place_sprites place_sprites::@1
  [212] (byte) place_sprites::col#2 ← phi( place_sprites/(byte) 5 place_sprites::@1/(byte) place_sprites::col#1 )
  [212] (byte) place_sprites::j2#3 ← phi( place_sprites/(byte) 0 place_sprites::@1/(byte) place_sprites::j2#2 )
  [212] (byte) place_sprites::spr_x#2 ← phi( place_sprites/(byte) $3c place_sprites::@1/(byte) place_sprites::spr_x#1 )
  [212] (byte) place_sprites::j#2 ← phi( place_sprites/(byte) 0 place_sprites::@1/(byte) place_sprites::j#1 )
  [212] (byte) place_sprites::spr_id#2 ← phi( place_sprites/(byte)(word)(const nomodify byte*) sprites/(byte) $40 place_sprites::@1/(byte) place_sprites::spr_id#1 )
  [213] *((const byte*) place_sprites::sprites_ptr + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2
  [214] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2
  [215] *((const nomodify byte*) SPRITES_XPOS + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2
  [216] *((const nomodify byte*) SPRITES_YPOS + (byte) place_sprites::j2#3) ← (byte) $50
  [217] *((const nomodify byte*) SPRITES_COLOR + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2
  [218] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20
  [219] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5
  [220] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3
  [221] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1
  [222] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2
  [223] if((byte) place_sprites::j#1!=(byte) 7) goto place_sprites::@1
  to:place_sprites::@return
place_sprites::@return: scope:[place_sprites]  from place_sprites::@1
  [224] return 
  to:@return
