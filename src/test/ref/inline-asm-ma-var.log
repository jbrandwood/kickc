
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::value = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $a
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::value = main::value + main::i#3
  asm { lda#$55 eorvalue staSCREEN  }
  main::i#1 = ++ main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@return
void main()
bool~ main::$0
label main::@1
label main::@2
label main::@return
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::value loadstore

Adding number conversion cast (unumber) $a in main::$0 = main::i#2 < $a
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(main::i#2<$a) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#4 = main::i#1
Coalesced down to 1 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::value = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#2<$a) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] main::value = main::value + main::i#2
  asm { lda#$55 eorvalue staSCREEN  }
  [6] main::i#1 = ++ main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 22.0
byte main::i#2 11.0
byte main::value loadstore 4.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::value to live range equivalence class [ main::value ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::value ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::value ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::value = 0 [ main::value ] (  [ main::value ] { }  ) always clobbers reg byte a 
Statement [4] main::value = main::value + main::i#2 [ main::value main::i#2 ] (  [ main::value main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement asm { lda#$55 eorvalue staSCREEN  } always clobbers reg byte a 
Statement [0] main::value = 0 [ main::value ] (  [ main::value ] { }  ) always clobbers reg byte a 
Statement [4] main::value = main::value + main::i#2 [ main::value main::i#2 ] (  [ main::value main::i#2 ] { }  ) always clobbers reg byte a 
Statement asm { lda#$55 eorvalue staSCREEN  } always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::value ] : zp[1]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[1]:2 [ main::i#2 main::i#1 ] 4: zp[1]:3 [ main::value ] 
Uplift Scope [] 

Uplifting [main] best 386 combination reg byte x [ main::i#2 main::i#1 ] zp[1]:3 [ main::value ] 
Uplifting [] best 386 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::value ]
Uplifting [main] best 386 combination zp[1]:3 [ main::value ] 
Allocated (was zp[1]:3) zp[1]:2 [ main::value ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test access to __ma variable from inline ASM
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label value = 2
    // [0] main::value = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z value
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$a) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] main::value = main::value + main::i#2 -- vbuz1=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z value
    sta.z value
    // asm { lda#$55 eorvalue staSCREEN  }
    lda #$55
    eor value
    sta SCREEN
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing instruction ldx #0 with TAX

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
label main::@1
label main::@2
label main::@return
byte main::i
byte main::i#1 reg byte x 22.0
byte main::i#2 reg byte x 11.0
byte main::value loadstore zp[1]:2 4.0

reg byte x [ main::i#2 main::i#1 ]
zp[1]:2 [ main::value ]


FINAL ASSEMBLER
Score: 326

  // File Comments
// Test access to __ma variable from inline ASM
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label value = 2
    // value = 0
    // [0] main::value = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z value
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    tax
    // main::@1
  __b1:
    // for(char i=0;i<10;i++)
    // [2] if(main::i#2<$a) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$a
    bcc __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // value += i
    // [4] main::value = main::value + main::i#2 -- vbuz1=vbuz1_plus_vbuxx 
    txa
    clc
    adc.z value
    sta.z value
    // asm
    // asm { lda#$55 eorvalue staSCREEN  }
    lda #$55
    eor value
    sta SCREEN
    // for(char i=0;i<10;i++)
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

