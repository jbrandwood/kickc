__constant char * const CHARSET = (char *) 8192
__constant struct MOS6526_CIA * const CIA2 = (struct MOS6526_CIA *) 56576
__constant unsigned long * const CIA2_TIMER_AB = (unsigned long *) 56580
__constant const char CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
__constant const char CIA_TIMER_CONTROL_START = 1
__constant const unsigned long CLOCKS_PER_INIT = $12
__constant unsigned int CORDIC_ATAN2_ANGLES_16[CORDIC_ITERATIONS_16] = kickasm {{ .for (var i=0; i<CORDIC_ITERATIONS_16; i++)
        .word 256*2*256*atan(1/pow(2,i))/PI/2
 }}
__constant const char CORDIC_ITERATIONS_16 = $f
__constant char * const D018 = (char *) 53272
__constant char FONT_HEX_PROTO[] = { 2, 5, 5, 5, 2, 6, 2, 2, 2, 7, 6, 1, 2, 4, 7, 6, 1, 2, 1, 6, 5, 5, 7, 1, 1, 7, 4, 6, 1, 6, 3, 4, 6, 5, 2, 7, 1, 1, 1, 1, 2, 5, 2, 5, 2, 2, 5, 3, 1, 1, 2, 5, 7, 5, 5, 6, 5, 6, 5, 6, 2, 5, 4, 5, 2, 6, 5, 5, 5, 6, 7, 4, 6, 4, 7, 7, 4, 6, 4, 4 }
__constant char OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
__constant char OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char * const SCREEN = (char *) 10240
unsigned int atan2_16(int x , int y)
int atan2_16::$2 // zp[2]:8 20002.0
char atan2_16::$22 // reg byte a 2.0000002E7
char atan2_16::$23 // reg byte a 2.0000002E7
int atan2_16::$7 // zp[2]:10 20002.0
unsigned int atan2_16::angle
unsigned int atan2_16::angle#1 // angle zp[2]:6 15001.5
unsigned int atan2_16::angle#11 // angle zp[2]:6 20002.0
unsigned int atan2_16::angle#12 // angle zp[2]:6 1904762.0952380951
unsigned int atan2_16::angle#13 // angle zp[2]:6 1.3333334666666666E7
unsigned int atan2_16::angle#2 // angle zp[2]:6 2.0000002E7
unsigned int atan2_16::angle#3 // angle zp[2]:6 2.0000002E7
unsigned int atan2_16::angle#4 // angle zp[2]:6 20002.0
unsigned int atan2_16::angle#5 // angle zp[2]:6 20002.0
unsigned int atan2_16::angle#6 // angle zp[2]:6 2.0010003E7
char atan2_16::i
char atan2_16::i#1 // reg byte x 1.50000015E7
char atan2_16::i#2 // reg byte x 2083333.5416666665
unsigned int atan2_16::return
unsigned int atan2_16::return#0 // return zp[2]:6 7001.0
unsigned int atan2_16::return#2 // return zp[2]:6 2002.0
char atan2_16::shift
char atan2_16::shift#1 // reg byte y 2.00000002E8
char atan2_16::shift#2 // reg byte y 8.000000125E7
char atan2_16::shift#5 // reg byte y 6666667.333333333
int atan2_16::x
int atan2_16::x#0 // x zp[2]:19 1079.078947368421
int atan2_16::xd
int atan2_16::xd#1 // xd zp[2]:4 6.6666667333333336E7
int atan2_16::xd#10 // xd zp[2]:4 1.0000001E7
int atan2_16::xd#2 // xd zp[2]:4 1.0000001E7
int atan2_16::xd#3 // xd zp[2]:4 7.666666833333333E7
int atan2_16::xd#5 // xd zp[2]:4 1.0000001E7
int atan2_16::xi
int atan2_16::xi#0 // xi zp[2]:10 30003.0
int atan2_16::xi#1 // xi zp[2]:10 5000000.5
int atan2_16::xi#13 // xi zp[2]:10 20002.0
int atan2_16::xi#2 // xi zp[2]:10 5000000.5
int atan2_16::xi#3 // xi zp[2]:10 2667333.6666666665
int atan2_16::xi#8 // xi zp[2]:10 1.0000001E7
int atan2_16::y
int atan2_16::y#0 // y zp[2]:17 1025.125
int atan2_16::yd
int atan2_16::yd#1 // yd zp[2]:2 1.00000001E8
int atan2_16::yd#10 // yd zp[2]:2 2.0000002E7
int atan2_16::yd#2 // yd zp[2]:2 2.0000002E7
int atan2_16::yd#3 // yd zp[2]:2 4.6000001E7
int atan2_16::yd#5 // yd zp[2]:2 2.0000002E7
int atan2_16::yi
int atan2_16::yi#0 // yi zp[2]:8 6000.6
int atan2_16::yi#1 // yi zp[2]:8 6666667.333333333
int atan2_16::yi#16 // yi zp[2]:8 20002.0
int atan2_16::yi#2 // yi zp[2]:8 6666667.333333333
int atan2_16::yi#3 // yi zp[2]:8 3530000.4117647056
int atan2_16::yi#8 // yi zp[2]:8 1.0000001E7
unsigned long clock()
unsigned long clock::return
unsigned long clock::return#0 // return zp[4]:24 3.25
unsigned long clock::return#2 // return zp[4]:24 4.0
unsigned long clock::ticks
void clock_start()
void init_angle_screen(char *screen)
char init_angle_screen::$11 // reg byte a 2002.0
char init_angle_screen::$12 // reg byte a 2002.0
char init_angle_screen::$13 // reg byte a 2002.0
char init_angle_screen::$3 // reg byte a 2002.0
char init_angle_screen::$4 // reg byte a 2002.0
char init_angle_screen::$6 // reg byte a 2002.0
unsigned int init_angle_screen::$9 // zp[2]:6 2002.0
char init_angle_screen::ang_w
char init_angle_screen::ang_w#0 // ang_w zp[1]:13 834.1666666666667
unsigned int init_angle_screen::angle_w
unsigned int init_angle_screen::angle_w#0 // angle_w zp[2]:6 2002.0
char *init_angle_screen::screen
char *init_angle_screen::screen_bottomline
char *init_angle_screen::screen_bottomline#1 // screen_bottomline zp[2]:15 67.33333333333333
char *init_angle_screen::screen_bottomline#6 // screen_bottomline zp[2]:15 88.16
char *init_angle_screen::screen_topline
char *init_angle_screen::screen_topline#1 // screen_topline zp[2]:21 50.5
char *init_angle_screen::screen_topline#6 // screen_topline zp[2]:21 91.83333333333334
char init_angle_screen::x
char init_angle_screen::x#1 // x zp[1]:14 1001.0
char init_angle_screen::x#2 // x zp[1]:14 286.0
char init_angle_screen::xb
char init_angle_screen::xb#1 // xb zp[1]:12 2002.0
char init_angle_screen::xb#2 // xb zp[1]:12 182.0
int init_angle_screen::xw
unsigned int init_angle_screen::xw#0 // xw zp[2]:19 333.6666666666667
char init_angle_screen::y
char init_angle_screen::y#1 // y zp[1]:23 151.5
char init_angle_screen::y#5 // y zp[1]:23 46.26923076923077
int init_angle_screen::yw
unsigned int init_angle_screen::yw#0 // yw zp[2]:17 500.5
void init_font_hex(char *charset)
char init_font_hex::$0 // zp[1]:13 10001.0
char init_font_hex::$1 // reg byte a 20002.0
char init_font_hex::$2 // reg byte a 20002.0
char init_font_hex::c
char init_font_hex::c#1 // c zp[1]:23 151.5
char init_font_hex::c#6 // c zp[1]:23 10.631578947368421
char init_font_hex::c1
char init_font_hex::c1#1 // c1 zp[1]:14 1501.5
char init_font_hex::c1#4 // c1 zp[1]:14 133.46666666666667
char *init_font_hex::charset
char *init_font_hex::charset#0 // charset zp[2]:15 350.5
char *init_font_hex::charset#2 // charset zp[2]:15 1079.0714285714287
char *init_font_hex::charset#5 // charset zp[2]:15 202.0
char init_font_hex::i
char init_font_hex::i#1 // reg byte x 15001.5
char init_font_hex::i#2 // reg byte x 6667.333333333333
char init_font_hex::idx
char init_font_hex::idx#2 // idx zp[1]:12 5501.0
char init_font_hex::idx#3 // reg byte y 2002.0
char init_font_hex::idx#5 // idx zp[1]:12 6000.6
char *init_font_hex::proto_hi
char *init_font_hex::proto_hi#1 // proto_hi zp[2]:21 67.33333333333333
char *init_font_hex::proto_hi#6 // proto_hi zp[2]:21 566.8333333333333
char *init_font_hex::proto_lo
char *init_font_hex::proto_lo#1 // proto_lo zp[2]:8 500.5
char *init_font_hex::proto_lo#4 // proto_lo zp[2]:8 923.3076923076923
void main()
unsigned long main::$4 // zp[4]:24 4.0
__constant char *main::BASE_CHARSET = (char *) 4096
__constant char *main::BASE_SCREEN = (char *) 1024
unsigned long main::cyclecount
unsigned long main::cyclecount#0 // cyclecount zp[4]:24 4.0
char *main::toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)SCREEN&$3fff*4|byte1 (unsigned int)CHARSET/4&$f // toD0181_return
char *main::toD0181_screen
char *main::toD0182_gfx
char main::toD0182_return
__constant char main::toD0182_return#0 = byte1 (unsigned int)main::BASE_SCREEN&$3fff*4|byte1 (unsigned int)main::BASE_CHARSET/4&$f // toD0182_return
char *main::toD0182_screen
void print_char_at(char ch , char *at)
char *print_char_at::at
char *print_char_at::at#0 // at zp[2]:2 2002.0
char *print_char_at::at#1 // at zp[2]:2 1001.0
char *print_char_at::at#2 // at zp[2]:2 12003.0
char print_char_at::ch
char print_char_at::ch#0 // reg byte x 1001.0
char print_char_at::ch#1 // reg byte x 2002.0
char print_char_at::ch#2 // reg byte x 12003.0
__constant const char print_hextab[] = "0123456789abcdef"z
void print_uchar_at(char b , char *at)
char print_uchar_at::$0 // reg byte a 2002.0
char print_uchar_at::$2 // reg byte y 1001.0
char *print_uchar_at::at
char *print_uchar_at::at#0 // at zp[2]:6 202.0
char *print_uchar_at::at#1 // at zp[2]:6 202.0
char *print_uchar_at::at#2 // at zp[2]:6 367.33333333333337
char print_uchar_at::b
char print_uchar_at::b#0 // b zp[1]:13 101.0
char print_uchar_at::b#1 // b zp[1]:13 101.0
char print_uchar_at::b#2 // b zp[1]:13 440.79999999999995
void print_uint_at(unsigned int w , char *at)
char *print_uint_at::at
char *print_uint_at::at#2 // at zp[2]:6 40.4
unsigned int print_uint_at::w
unsigned int print_uint_at::w#0 // w zp[2]:10 22.0
unsigned int print_uint_at::w#1 // w zp[2]:10 22.0
unsigned int print_uint_at::w#2 // w zp[2]:10 56.0
void print_ulong_at(unsigned long dw , char *at)
char *print_ulong_at::at
unsigned long print_ulong_at::dw
unsigned long print_ulong_at::dw#0 // dw zp[4]:24 8.0

reg byte x [ init_font_hex::i#2 init_font_hex::i#1 ]
zp[1]:23 [ init_angle_screen::y#5 init_angle_screen::y#1 init_font_hex::c#6 init_font_hex::c#1 ]
zp[2]:21 [ init_angle_screen::screen_topline#6 init_angle_screen::screen_topline#1 init_font_hex::proto_hi#6 init_font_hex::proto_hi#1 ]
zp[2]:15 [ init_angle_screen::screen_bottomline#6 init_angle_screen::screen_bottomline#1 init_font_hex::charset#2 init_font_hex::charset#5 init_font_hex::charset#0 ]
zp[1]:14 [ init_angle_screen::x#2 init_angle_screen::x#1 init_font_hex::c1#4 init_font_hex::c1#1 ]
zp[1]:12 [ init_angle_screen::xb#2 init_angle_screen::xb#1 init_font_hex::idx#5 init_font_hex::idx#2 ]
zp[2]:8 [ atan2_16::yi#3 atan2_16::yi#8 atan2_16::yi#0 atan2_16::yi#16 atan2_16::$2 atan2_16::yi#1 atan2_16::yi#2 init_font_hex::proto_lo#4 init_font_hex::proto_lo#1 ]
reg byte x [ atan2_16::i#2 atan2_16::i#1 ]
reg byte y [ atan2_16::shift#2 atan2_16::shift#5 atan2_16::shift#1 ]
zp[2]:4 [ atan2_16::xd#5 atan2_16::xd#3 atan2_16::xd#10 atan2_16::xd#1 atan2_16::xd#2 ]
zp[2]:10 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 atan2_16::xi#3 atan2_16::xi#8 atan2_16::xi#0 atan2_16::xi#13 atan2_16::$7 atan2_16::xi#1 atan2_16::xi#2 ]
zp[2]:6 [ print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 atan2_16::angle#6 atan2_16::angle#12 atan2_16::angle#13 atan2_16::angle#2 atan2_16::angle#3 atan2_16::return#0 atan2_16::angle#11 atan2_16::angle#1 atan2_16::angle#4 atan2_16::angle#5 atan2_16::return#2 init_angle_screen::angle_w#0 init_angle_screen::$9 ]
reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
zp[2]:2 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 atan2_16::yd#5 atan2_16::yd#3 atan2_16::yd#10 atan2_16::yd#1 atan2_16::yd#2 ]
zp[4]:24 [ clock::return#2 main::$4 clock::return#0 main::cyclecount#0 print_ulong_at::dw#0 ]
reg byte a [ init_font_hex::$1 ]
reg byte a [ init_font_hex::$2 ]
reg byte y [ init_font_hex::idx#3 ]
reg byte a [ init_angle_screen::$3 ]
reg byte a [ init_angle_screen::$4 ]
zp[2]:19 [ init_angle_screen::xw#0 atan2_16::x#0 ]
reg byte a [ init_angle_screen::$6 ]
zp[2]:17 [ init_angle_screen::yw#0 atan2_16::y#0 ]
zp[1]:13 [ init_angle_screen::ang_w#0 init_font_hex::$0 print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
reg byte a [ init_angle_screen::$11 ]
reg byte a [ init_angle_screen::$12 ]
reg byte a [ init_angle_screen::$13 ]
reg byte a [ atan2_16::$23 ]
reg byte a [ atan2_16::$22 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
