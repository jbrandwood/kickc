Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@3/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#2
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#5 ← phi( memset::@3/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@3/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from compare::@25
  (byte*) print_char_cursor#63 ← phi( compare::@25/(byte*) print_char_cursor#18 )
  (byte*) print_str::str#5 ← phi( compare::@25/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#53 ← phi( print_str/(byte*) print_char_cursor#63 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#52 ← phi( print_str::@1/(byte*) print_char_cursor#53 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#27 ← phi( print_str::@2/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#27
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#28 ← phi( print_str::@1/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#28
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@5
  (byte*) print_char_cursor#54 ← phi( main::@5/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#19 ← phi( main::@5/(byte*) print_line_cursor#21 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#29 ← phi( print_ln/(byte*) print_char_cursor#54 print_ln::@1/(byte*) print_char_cursor#29 )
  (byte*) print_line_cursor#10 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#10 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#29
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#11 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#2 ← (byte*) print_line_cursor#11
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#30 ← phi( print_ln::@2/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#12 ← phi( print_ln::@2/(byte*) print_line_cursor#11 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from compare::@26 compare::@6
  (byte*) print_char_cursor#55 ← phi( compare::@26/(byte*) print_char_cursor#19 compare::@6/(byte*) print_char_cursor#61 )
  (word) print_uint::w#2 ← phi( compare::@26/(word) print_uint::w#1 compare::@6/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#2
  (byte) print_uchar::b#0 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#3 ← phi( print_uint/(word) print_uint::w#2 )
  (byte*) print_char_cursor#31 ← phi( print_uint/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#31
  (byte~) print_uint::$2 ← < (word) print_uint::w#3
  (byte) print_uchar::b#1 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#32 ← phi( print_uint::@1/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#32
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#33 ← phi( print_uint::@2/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#33
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  (byte*) print_char_cursor#56 ← phi( print_uint/(byte*) print_char_cursor#55 print_uint::@1/(byte*) print_char_cursor#4 )
  (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#34 ← phi( print_uchar/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#34
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#35 ← phi( print_uchar::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#35
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#36 ← phi( print_uchar::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#36
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from compare::@27 compare::@28 print_str::@2 print_uchar print_uchar::@1
  (byte*) print_char_cursor#37 ← phi( compare::@27/(byte*) print_char_cursor#20 compare::@28/(byte*) print_char_cursor#21 print_str::@2/(byte*) print_char_cursor#52 print_uchar/(byte*) print_char_cursor#56 print_uchar::@1/(byte*) print_char_cursor#7 )
  (byte) print_char::ch#5 ← phi( compare::@27/(byte) print_char::ch#3 compare::@28/(byte) print_char::ch#4 print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 )
  *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5
  (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#38 ← phi( print_char/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#38
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#2 ← phi( main/(byte*) print_screen#5 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#2
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#3 ← phi( print_cls/(byte*) print_screen#2 )
  (byte*) print_line_cursor#2 ← (byte*) print_screen#3
  (byte*) print_char_cursor#12 ← (byte*) print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#39 ← phi( print_cls::@1/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#13 ← phi( print_cls::@1/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#39
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) print_char_cursor#57 ← phi( _start::@1/(byte*) print_char_cursor#62 )
  (byte*) print_line_cursor#20 ← phi( _start::@1/(byte*) print_line_cursor#23 )
  (byte*) print_screen#5 ← phi( _start::@1/(byte*) print_screen#7 )
  call print_cls 
  to:main::@9
main::@9: scope:[main]  from main
  (byte*) print_char_cursor#40 ← phi( main/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#14 ← phi( main/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#40
  (byte) main::s#0 ← (byte) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@7 main::@9
  (byte*) print_line_cursor#30 ← phi( main::@7/(byte*) print_line_cursor#25 main::@9/(byte*) print_line_cursor#4 )
  (byte) main::s#7 ← phi( main::@7/(byte) main::s#10 main::@9/(byte) main::s#0 )
  (byte*) print_char_cursor#74 ← phi( main::@7/(byte*) print_char_cursor#66 main::@9/(byte*) print_char_cursor#14 )
  (byte) main::i#2 ← phi( main::@7/(byte) main::i#1 main::@9/(byte) main::i#0 )
  (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
  (word) main::w1#0 ← *((const word*) words + (byte~) main::$8)
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  (byte) main::i#10 ← phi( main::@1/(byte) main::i#2 main::@6/(byte) main::i#4 )
  (byte*) print_line_cursor#28 ← phi( main::@1/(byte*) print_line_cursor#30 main::@6/(byte*) print_line_cursor#27 )
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#64 ← phi( main::@1/(byte*) print_char_cursor#74 main::@6/(byte*) print_char_cursor#75 )
  (word) main::w1#2 ← phi( main::@1/(word) main::w1#0 main::@6/(word) main::w1#4 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@6/(byte) main::j#1 )
  (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_WORD
  (word) main::w2#0 ← *((const word*) words + (byte~) main::$9)
  (byte) main::op#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::i#8 ← phi( main::@2/(byte) main::i#10 main::@4/(byte) main::i#5 )
  (byte*) print_line_cursor#26 ← phi( main::@2/(byte*) print_line_cursor#28 main::@4/(byte*) print_line_cursor#29 )
  (byte) main::j#7 ← phi( main::@2/(byte) main::j#2 main::@4/(byte) main::j#4 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#58 ← phi( main::@2/(byte*) print_char_cursor#64 main::@4/(byte*) print_char_cursor#65 )
  (byte) main::op#2 ← phi( main::@2/(byte) main::op#0 main::@4/(byte) main::op#1 )
  (word) main::w2#1 ← phi( main::@2/(word) main::w2#0 main::@4/(word) main::w2#2 )
  (word) main::w1#1 ← phi( main::@2/(word) main::w1#2 main::@4/(word) main::w1#3 )
  (word) compare::w1#0 ← (word) main::w1#1
  (word) compare::w2#0 ← (word) main::w2#1
  (byte) compare::op#0 ← (byte) main::op#2
  call compare 
  to:main::@10
main::@10: scope:[main]  from main::@3
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#8 )
  (byte*) print_line_cursor#24 ← phi( main::@3/(byte*) print_line_cursor#26 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#7 )
  (word) main::w2#3 ← phi( main::@3/(word) main::w2#1 )
  (word) main::w1#5 ← phi( main::@3/(word) main::w1#1 )
  (byte) main::op#4 ← phi( main::@3/(byte) main::op#2 )
  (byte) main::s#3 ← phi( main::@3/(byte) main::s#4 )
  (byte*) print_char_cursor#41 ← phi( main::@3/(byte*) print_char_cursor#23 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#41
  (byte) main::s#1 ← ++ (byte) main::s#3
  (bool~) main::$2 ← (byte) main::s#1 == (number) 3
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@10 main::@11
  (byte*) print_line_cursor#29 ← phi( main::@10/(byte*) print_line_cursor#24 main::@11/(byte*) print_line_cursor#5 )
  (byte) main::i#5 ← phi( main::@10/(byte) main::i#6 main::@11/(byte) main::i#7 )
  (byte) main::s#6 ← phi( main::@10/(byte) main::s#1 main::@11/(byte) main::s#9 )
  (byte*) print_char_cursor#65 ← phi( main::@10/(byte*) print_char_cursor#15 main::@11/(byte*) print_char_cursor#16 )
  (byte) main::j#4 ← phi( main::@10/(byte) main::j#5 main::@11/(byte) main::j#6 )
  (word) main::w2#2 ← phi( main::@10/(word) main::w2#3 main::@11/(word) main::w2#4 )
  (word) main::w1#3 ← phi( main::@10/(word) main::w1#5 main::@11/(word) main::w1#6 )
  (byte) main::op#3 ← phi( main::@10/(byte) main::op#4 main::@11/(byte) main::op#5 )
  (byte) main::op#1 ← (byte) main::op#3 + rangenext(0,5)
  (bool~) main::$5 ← (byte) main::op#1 != rangelast(0,5)
  if((bool~) main::$5) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@10
  (byte) main::i#9 ← phi( main::@10/(byte) main::i#6 )
  (byte) main::j#8 ← phi( main::@10/(byte) main::j#5 )
  (word) main::w2#5 ← phi( main::@10/(word) main::w2#3 )
  (word) main::w1#7 ← phi( main::@10/(word) main::w1#5 )
  (byte) main::op#6 ← phi( main::@10/(byte) main::op#4 )
  (byte*) print_char_cursor#59 ← phi( main::@10/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#21 ← phi( main::@10/(byte*) print_line_cursor#24 )
  (byte) main::s#2 ← (number) 0
  call print_ln 
  to:main::@11
main::@11: scope:[main]  from main::@5
  (byte) main::i#7 ← phi( main::@5/(byte) main::i#9 )
  (byte) main::s#9 ← phi( main::@5/(byte) main::s#2 )
  (byte) main::j#6 ← phi( main::@5/(byte) main::j#8 )
  (word) main::w2#4 ← phi( main::@5/(word) main::w2#5 )
  (word) main::w1#6 ← phi( main::@5/(word) main::w1#7 )
  (byte) main::op#5 ← phi( main::@5/(byte) main::op#6 )
  (byte*) print_char_cursor#42 ← phi( main::@5/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#15 ← phi( main::@5/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#42
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte*) print_line_cursor#27 ← phi( main::@4/(byte*) print_line_cursor#29 )
  (byte) main::s#8 ← phi( main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#75 ← phi( main::@4/(byte*) print_char_cursor#65 )
  (word) main::w1#4 ← phi( main::@4/(word) main::w1#3 )
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#5 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#4 )
  (byte) main::j#1 ← (byte) main::j#3 + rangenext(0,2)
  (bool~) main::$6 ← (byte) main::j#1 != rangelast(0,2)
  if((bool~) main::$6) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::s#10 ← phi( main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#66 ← phi( main::@6/(byte*) print_char_cursor#75 )
  (byte*) print_line_cursor#25 ← phi( main::@6/(byte*) print_line_cursor#27 )
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,2)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$7) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  (byte*) print_char_cursor#60 ← phi( main::@7/(byte*) print_char_cursor#66 main::@8/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#22 ← phi( main::@7/(byte*) print_line_cursor#25 main::@8/(byte*) print_line_cursor#22 )
  if(true) goto main::@8
  to:main::@return
main::@return: scope:[main]  from main::@8
  (byte*) print_char_cursor#43 ← phi( main::@8/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#16 ← phi( main::@8/(byte*) print_line_cursor#22 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#43
  return 
  to:@return

(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
compare: scope:[compare]  from main::@3
  (byte*) print_char_cursor#89 ← phi( main::@3/(byte*) print_char_cursor#58 )
  (word) compare::w2#8 ← phi( main::@3/(word) compare::w2#0 )
  (word) compare::w1#8 ← phi( main::@3/(word) compare::w1#0 )
  (byte) compare::op#1 ← phi( main::@3/(byte) compare::op#0 )
  (byte) compare::r#0 ← (const nomodify byte) FF
  (byte*) compare::ops#0 ← (byte*) 0
  (bool~) compare::$0 ← (byte) compare::op#1 == (number) 0
  if((bool~) compare::$0) goto compare::@1
  to:compare::@7
compare::@1: scope:[compare]  from compare
  (byte) compare::r#24 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#87 ← phi( compare/(byte*) print_char_cursor#89 )
  (word) compare::w2#1 ← phi( compare/(word) compare::w2#8 )
  (word) compare::w1#1 ← phi( compare/(word) compare::w1#8 )
  (bool~) compare::$22 ← (word) compare::w1#1 < (word) compare::w2#1
  (bool~) compare::$23 ← ! (bool~) compare::$22
  if((bool~) compare::$23) goto compare::@24
  to:compare::@18
compare::@7: scope:[compare]  from compare
  (byte*) compare::ops#13 ← phi( compare/(byte*) compare::ops#0 )
  (byte) compare::r#25 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#90 ← phi( compare/(byte*) print_char_cursor#89 )
  (word) compare::w2#9 ← phi( compare/(word) compare::w2#8 )
  (word) compare::w1#9 ← phi( compare/(word) compare::w1#8 )
  (byte) compare::op#2 ← phi( compare/(byte) compare::op#1 )
  (bool~) compare::$1 ← (byte) compare::op#2 == (number) 1
  if((bool~) compare::$1) goto compare::@2
  to:compare::@8
compare::@2: scope:[compare]  from compare::@7
  (byte) compare::r#23 ← phi( compare::@7/(byte) compare::r#25 )
  (byte*) print_char_cursor#86 ← phi( compare::@7/(byte*) print_char_cursor#90 )
  (word) compare::w2#2 ← phi( compare::@7/(word) compare::w2#9 )
  (word) compare::w1#2 ← phi( compare::@7/(word) compare::w1#9 )
  (bool~) compare::$20 ← (word) compare::w1#2 <= (word) compare::w2#2
  (bool~) compare::$21 ← ! (bool~) compare::$20
  if((bool~) compare::$21) goto compare::@23
  to:compare::@17
compare::@8: scope:[compare]  from compare::@7
  (byte) compare::r#26 ← phi( compare::@7/(byte) compare::r#25 )
  (byte*) compare::ops#12 ← phi( compare::@7/(byte*) compare::ops#13 )
  (byte*) print_char_cursor#91 ← phi( compare::@7/(byte*) print_char_cursor#90 )
  (word) compare::w2#10 ← phi( compare::@7/(word) compare::w2#9 )
  (word) compare::w1#10 ← phi( compare::@7/(word) compare::w1#9 )
  (byte) compare::op#3 ← phi( compare::@7/(byte) compare::op#2 )
  (bool~) compare::$2 ← (byte) compare::op#3 == (number) 2
  if((bool~) compare::$2) goto compare::@3
  to:compare::@9
compare::@3: scope:[compare]  from compare::@8
  (byte) compare::r#22 ← phi( compare::@8/(byte) compare::r#26 )
  (byte*) print_char_cursor#84 ← phi( compare::@8/(byte*) print_char_cursor#91 )
  (word) compare::w2#3 ← phi( compare::@8/(word) compare::w2#10 )
  (word) compare::w1#3 ← phi( compare::@8/(word) compare::w1#10 )
  (bool~) compare::$18 ← (word) compare::w1#3 > (word) compare::w2#3
  (bool~) compare::$19 ← ! (bool~) compare::$18
  if((bool~) compare::$19) goto compare::@22
  to:compare::@16
compare::@9: scope:[compare]  from compare::@8
  (byte) compare::r#27 ← phi( compare::@8/(byte) compare::r#26 )
  (byte*) compare::ops#11 ← phi( compare::@8/(byte*) compare::ops#12 )
  (byte*) print_char_cursor#92 ← phi( compare::@8/(byte*) print_char_cursor#91 )
  (word) compare::w2#11 ← phi( compare::@8/(word) compare::w2#10 )
  (word) compare::w1#11 ← phi( compare::@8/(word) compare::w1#10 )
  (byte) compare::op#4 ← phi( compare::@8/(byte) compare::op#3 )
  (bool~) compare::$3 ← (byte) compare::op#4 == (number) 3
  if((bool~) compare::$3) goto compare::@4
  to:compare::@10
compare::@4: scope:[compare]  from compare::@9
  (byte) compare::r#21 ← phi( compare::@9/(byte) compare::r#27 )
  (byte*) print_char_cursor#82 ← phi( compare::@9/(byte*) print_char_cursor#92 )
  (word) compare::w2#4 ← phi( compare::@9/(word) compare::w2#11 )
  (word) compare::w1#4 ← phi( compare::@9/(word) compare::w1#11 )
  (bool~) compare::$16 ← (word) compare::w1#4 >= (word) compare::w2#4
  (bool~) compare::$17 ← ! (bool~) compare::$16
  if((bool~) compare::$17) goto compare::@21
  to:compare::@15
compare::@10: scope:[compare]  from compare::@9
  (byte) compare::r#18 ← phi( compare::@9/(byte) compare::r#27 )
  (byte*) compare::ops#10 ← phi( compare::@9/(byte*) compare::ops#11 )
  (byte*) print_char_cursor#76 ← phi( compare::@9/(byte*) print_char_cursor#92 )
  (word) compare::w2#12 ← phi( compare::@9/(word) compare::w2#11 )
  (word) compare::w1#12 ← phi( compare::@9/(word) compare::w1#11 )
  (byte) compare::op#5 ← phi( compare::@9/(byte) compare::op#4 )
  (bool~) compare::$4 ← (byte) compare::op#5 == (number) 4
  if((bool~) compare::$4) goto compare::@5
  to:compare::@11
compare::@5: scope:[compare]  from compare::@10
  (byte) compare::r#20 ← phi( compare::@10/(byte) compare::r#18 )
  (byte*) print_char_cursor#80 ← phi( compare::@10/(byte*) print_char_cursor#76 )
  (word) compare::w2#5 ← phi( compare::@10/(word) compare::w2#12 )
  (word) compare::w1#5 ← phi( compare::@10/(word) compare::w1#12 )
  (bool~) compare::$14 ← (word) compare::w1#5 == (word) compare::w2#5
  (bool~) compare::$15 ← ! (bool~) compare::$14
  if((bool~) compare::$15) goto compare::@20
  to:compare::@14
compare::@11: scope:[compare]  from compare::@10
  (byte) compare::r#11 ← phi( compare::@10/(byte) compare::r#18 )
  (byte*) compare::ops#9 ← phi( compare::@10/(byte*) compare::ops#10 )
  (byte*) print_char_cursor#67 ← phi( compare::@10/(byte*) print_char_cursor#76 )
  (word) compare::w2#13 ← phi( compare::@10/(word) compare::w2#12 )
  (word) compare::w1#13 ← phi( compare::@10/(word) compare::w1#12 )
  (byte) compare::op#6 ← phi( compare::@10/(byte) compare::op#5 )
  (bool~) compare::$5 ← (byte) compare::op#6 == (number) 5
  (bool~) compare::$6 ← ! (bool~) compare::$5
  if((bool~) compare::$6) goto compare::@6
  to:compare::@12
compare::@12: scope:[compare]  from compare::@11
  (byte) compare::r#19 ← phi( compare::@11/(byte) compare::r#11 )
  (byte*) print_char_cursor#77 ← phi( compare::@11/(byte*) print_char_cursor#67 )
  (word) compare::w2#6 ← phi( compare::@11/(word) compare::w2#13 )
  (word) compare::w1#6 ← phi( compare::@11/(word) compare::w1#13 )
  (bool~) compare::$12 ← (word) compare::w1#6 != (word) compare::w2#6
  (bool~) compare::$13 ← ! (bool~) compare::$12
  if((bool~) compare::$13) goto compare::@19
  to:compare::@13
compare::@19: scope:[compare]  from compare::@12 compare::@13
  (byte) compare::r#12 ← phi( compare::@12/(byte) compare::r#19 compare::@13/(byte) compare::r#1 )
  (word) compare::w2#16 ← phi( compare::@12/(word) compare::w2#6 compare::@13/(word) compare::w2#22 )
  (byte*) print_char_cursor#68 ← phi( compare::@12/(byte*) print_char_cursor#77 compare::@13/(byte*) print_char_cursor#78 )
  (word) compare::w1#14 ← phi( compare::@12/(word) compare::w1#6 compare::@13/(word) compare::w1#20 )
  (byte*) compare::ops#1 ← (const byte*) compare::$24
  to:compare::@6
compare::@13: scope:[compare]  from compare::@12
  (word) compare::w2#22 ← phi( compare::@12/(word) compare::w2#6 )
  (byte*) print_char_cursor#78 ← phi( compare::@12/(byte*) print_char_cursor#77 )
  (word) compare::w1#20 ← phi( compare::@12/(word) compare::w1#6 )
  (byte) compare::r#1 ← (const nomodify byte) TT
  to:compare::@19
compare::@20: scope:[compare]  from compare::@14 compare::@5
  (byte) compare::r#13 ← phi( compare::@14/(byte) compare::r#2 compare::@5/(byte) compare::r#20 )
  (word) compare::w2#17 ← phi( compare::@14/(word) compare::w2#23 compare::@5/(word) compare::w2#5 )
  (byte*) print_char_cursor#69 ← phi( compare::@14/(byte*) print_char_cursor#79 compare::@5/(byte*) print_char_cursor#80 )
  (word) compare::w1#15 ← phi( compare::@14/(word) compare::w1#21 compare::@5/(word) compare::w1#5 )
  (byte*) compare::ops#2 ← (const byte*) compare::$25
  to:compare::@6
compare::@14: scope:[compare]  from compare::@5
  (word) compare::w2#23 ← phi( compare::@5/(word) compare::w2#5 )
  (byte*) print_char_cursor#79 ← phi( compare::@5/(byte*) print_char_cursor#80 )
  (word) compare::w1#21 ← phi( compare::@5/(word) compare::w1#5 )
  (byte) compare::r#2 ← (const nomodify byte) TT
  to:compare::@20
compare::@21: scope:[compare]  from compare::@15 compare::@4
  (byte) compare::r#14 ← phi( compare::@15/(byte) compare::r#3 compare::@4/(byte) compare::r#21 )
  (word) compare::w2#18 ← phi( compare::@15/(word) compare::w2#24 compare::@4/(word) compare::w2#4 )
  (byte*) print_char_cursor#70 ← phi( compare::@15/(byte*) print_char_cursor#81 compare::@4/(byte*) print_char_cursor#82 )
  (word) compare::w1#16 ← phi( compare::@15/(word) compare::w1#22 compare::@4/(word) compare::w1#4 )
  (byte*) compare::ops#3 ← (const byte*) compare::$26
  to:compare::@6
compare::@15: scope:[compare]  from compare::@4
  (word) compare::w2#24 ← phi( compare::@4/(word) compare::w2#4 )
  (byte*) print_char_cursor#81 ← phi( compare::@4/(byte*) print_char_cursor#82 )
  (word) compare::w1#22 ← phi( compare::@4/(word) compare::w1#4 )
  (byte) compare::r#3 ← (const nomodify byte) TT
  to:compare::@21
compare::@22: scope:[compare]  from compare::@16 compare::@3
  (byte) compare::r#15 ← phi( compare::@16/(byte) compare::r#4 compare::@3/(byte) compare::r#22 )
  (word) compare::w2#19 ← phi( compare::@16/(word) compare::w2#25 compare::@3/(word) compare::w2#3 )
  (byte*) print_char_cursor#71 ← phi( compare::@16/(byte*) print_char_cursor#83 compare::@3/(byte*) print_char_cursor#84 )
  (word) compare::w1#17 ← phi( compare::@16/(word) compare::w1#23 compare::@3/(word) compare::w1#3 )
  (byte*) compare::ops#4 ← (const byte*) compare::$27
  to:compare::@6
compare::@16: scope:[compare]  from compare::@3
  (word) compare::w2#25 ← phi( compare::@3/(word) compare::w2#3 )
  (byte*) print_char_cursor#83 ← phi( compare::@3/(byte*) print_char_cursor#84 )
  (word) compare::w1#23 ← phi( compare::@3/(word) compare::w1#3 )
  (byte) compare::r#4 ← (const nomodify byte) TT
  to:compare::@22
compare::@23: scope:[compare]  from compare::@17 compare::@2
  (byte) compare::r#16 ← phi( compare::@17/(byte) compare::r#5 compare::@2/(byte) compare::r#23 )
  (word) compare::w2#20 ← phi( compare::@17/(word) compare::w2#26 compare::@2/(word) compare::w2#2 )
  (byte*) print_char_cursor#72 ← phi( compare::@17/(byte*) print_char_cursor#85 compare::@2/(byte*) print_char_cursor#86 )
  (word) compare::w1#18 ← phi( compare::@17/(word) compare::w1#24 compare::@2/(word) compare::w1#2 )
  (byte*) compare::ops#5 ← (const byte*) compare::$28
  to:compare::@6
compare::@17: scope:[compare]  from compare::@2
  (word) compare::w2#26 ← phi( compare::@2/(word) compare::w2#2 )
  (byte*) print_char_cursor#85 ← phi( compare::@2/(byte*) print_char_cursor#86 )
  (word) compare::w1#24 ← phi( compare::@2/(word) compare::w1#2 )
  (byte) compare::r#5 ← (const nomodify byte) TT
  to:compare::@23
compare::@6: scope:[compare]  from compare::@11 compare::@19 compare::@20 compare::@21 compare::@22 compare::@23 compare::@24
  (byte) compare::r#10 ← phi( compare::@11/(byte) compare::r#11 compare::@19/(byte) compare::r#12 compare::@20/(byte) compare::r#13 compare::@21/(byte) compare::r#14 compare::@22/(byte) compare::r#15 compare::@23/(byte) compare::r#16 compare::@24/(byte) compare::r#17 )
  (word) compare::w2#15 ← phi( compare::@11/(word) compare::w2#13 compare::@19/(word) compare::w2#16 compare::@20/(word) compare::w2#17 compare::@21/(word) compare::w2#18 compare::@22/(word) compare::w2#19 compare::@23/(word) compare::w2#20 compare::@24/(word) compare::w2#21 )
  (byte*) compare::ops#8 ← phi( compare::@11/(byte*) compare::ops#9 compare::@19/(byte*) compare::ops#1 compare::@20/(byte*) compare::ops#2 compare::@21/(byte*) compare::ops#3 compare::@22/(byte*) compare::ops#4 compare::@23/(byte*) compare::ops#5 compare::@24/(byte*) compare::ops#6 )
  (byte*) print_char_cursor#61 ← phi( compare::@11/(byte*) print_char_cursor#67 compare::@19/(byte*) print_char_cursor#68 compare::@20/(byte*) print_char_cursor#69 compare::@21/(byte*) print_char_cursor#70 compare::@22/(byte*) print_char_cursor#71 compare::@23/(byte*) print_char_cursor#72 compare::@24/(byte*) print_char_cursor#73 )
  (word) compare::w1#7 ← phi( compare::@11/(word) compare::w1#13 compare::@19/(word) compare::w1#14 compare::@20/(word) compare::w1#15 compare::@21/(word) compare::w1#16 compare::@22/(word) compare::w1#17 compare::@23/(word) compare::w1#18 compare::@24/(word) compare::w1#19 )
  (word) print_uint::w#0 ← (word) compare::w1#7
  call print_uint 
  to:compare::@25
compare::@25: scope:[compare]  from compare::@6
  (byte) compare::r#9 ← phi( compare::@6/(byte) compare::r#10 )
  (word) compare::w2#14 ← phi( compare::@6/(word) compare::w2#15 )
  (byte*) compare::ops#7 ← phi( compare::@6/(byte*) compare::ops#8 )
  (byte*) print_char_cursor#44 ← phi( compare::@6/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#44
  (byte*) print_str::str#1 ← (byte*) compare::ops#7
  call print_str 
  to:compare::@26
compare::@26: scope:[compare]  from compare::@25
  (byte) compare::r#8 ← phi( compare::@25/(byte) compare::r#9 )
  (word) compare::w2#7 ← phi( compare::@25/(word) compare::w2#14 )
  (byte*) print_char_cursor#45 ← phi( compare::@25/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#45
  (word) print_uint::w#1 ← (word) compare::w2#7
  call print_uint 
  to:compare::@27
compare::@27: scope:[compare]  from compare::@26
  (byte) compare::r#7 ← phi( compare::@26/(byte) compare::r#8 )
  (byte*) print_char_cursor#46 ← phi( compare::@26/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#46
  (byte) print_char::ch#3 ← (byte) compare::r#7
  call print_char 
  to:compare::@28
compare::@28: scope:[compare]  from compare::@27
  (byte*) print_char_cursor#47 ← phi( compare::@27/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#47
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:compare::@29
compare::@29: scope:[compare]  from compare::@28
  (byte*) print_char_cursor#48 ← phi( compare::@28/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#48
  to:compare::@return
compare::@24: scope:[compare]  from compare::@1 compare::@18
  (byte) compare::r#17 ← phi( compare::@1/(byte) compare::r#24 compare::@18/(byte) compare::r#6 )
  (word) compare::w2#21 ← phi( compare::@1/(word) compare::w2#1 compare::@18/(word) compare::w2#27 )
  (byte*) print_char_cursor#73 ← phi( compare::@1/(byte*) print_char_cursor#87 compare::@18/(byte*) print_char_cursor#88 )
  (word) compare::w1#19 ← phi( compare::@1/(word) compare::w1#1 compare::@18/(word) compare::w1#25 )
  (byte*) compare::ops#6 ← (const byte*) compare::$29
  to:compare::@6
compare::@18: scope:[compare]  from compare::@1
  (word) compare::w2#27 ← phi( compare::@1/(word) compare::w2#1 )
  (byte*) print_char_cursor#88 ← phi( compare::@1/(byte*) print_char_cursor#87 )
  (word) compare::w1#25 ← phi( compare::@1/(word) compare::w1#1 )
  (byte) compare::r#6 ← (const nomodify byte) TT
  to:compare::@24
compare::@return: scope:[compare]  from compare::@29
  (byte*) print_char_cursor#49 ← phi( compare::@29/(byte*) print_char_cursor#22 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#49
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#7 ← (byte*) print_screen#0
  (byte*) print_char_cursor#24 ← (byte*) print_line_cursor#7
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) print_screen#7 ← phi( _start::_init1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#62 ← phi( _start::_init1/(byte*) print_char_cursor#24 )
  (byte*) print_line_cursor#23 ← phi( _start::_init1/(byte*) print_line_cursor#7 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) print_screen#6 ← phi( _start::@1/(byte*) print_screen#7 )
  (byte*) print_char_cursor#50 ← phi( _start::@1/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#17 ← phi( _start::@1/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#17
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#50
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) print_char_cursor#51 ← phi( _start::@2/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#18 ← phi( _start::@2/(byte*) print_line_cursor#8 )
  (byte*) print_screen#4 ← phi( _start::@2/(byte*) print_screen#6 )
  (byte*) print_screen#1 ← (byte*) print_screen#4
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#51
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte) FF = (byte) $57
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte) SIZEOF_WORD = (byte) 2
(const nomodify byte) TT = (byte) $51
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
(bool~) compare::$0
(bool~) compare::$1
(bool~) compare::$12
(bool~) compare::$13
(bool~) compare::$14
(bool~) compare::$15
(bool~) compare::$16
(bool~) compare::$17
(bool~) compare::$18
(bool~) compare::$19
(bool~) compare::$2
(bool~) compare::$20
(bool~) compare::$21
(bool~) compare::$22
(bool~) compare::$23
(const byte*) compare::$24[(byte) 3]  = (byte*) "!="
(const byte*) compare::$25[(byte) 3]  = (byte*) "=="
(const byte*) compare::$26[(byte) 3]  = (byte*) ">="
(const byte*) compare::$27[(byte) 3]  = (byte*) "> "
(const byte*) compare::$28[(byte) 3]  = (byte*) "<="
(const byte*) compare::$29[(byte) 3]  = (byte*) "< "
(bool~) compare::$3
(bool~) compare::$4
(bool~) compare::$5
(bool~) compare::$6
(label) compare::@1
(label) compare::@10
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@19
(label) compare::@2
(label) compare::@20
(label) compare::@21
(label) compare::@22
(label) compare::@23
(label) compare::@24
(label) compare::@25
(label) compare::@26
(label) compare::@27
(label) compare::@28
(label) compare::@29
(label) compare::@3
(label) compare::@4
(label) compare::@5
(label) compare::@6
(label) compare::@7
(label) compare::@8
(label) compare::@9
(label) compare::@return
(byte) compare::op
(byte) compare::op#0
(byte) compare::op#1
(byte) compare::op#2
(byte) compare::op#3
(byte) compare::op#4
(byte) compare::op#5
(byte) compare::op#6
(byte*) compare::ops
(byte*) compare::ops#0
(byte*) compare::ops#1
(byte*) compare::ops#10
(byte*) compare::ops#11
(byte*) compare::ops#12
(byte*) compare::ops#13
(byte*) compare::ops#2
(byte*) compare::ops#3
(byte*) compare::ops#4
(byte*) compare::ops#5
(byte*) compare::ops#6
(byte*) compare::ops#7
(byte*) compare::ops#8
(byte*) compare::ops#9
(byte) compare::r
(byte) compare::r#0
(byte) compare::r#1
(byte) compare::r#10
(byte) compare::r#11
(byte) compare::r#12
(byte) compare::r#13
(byte) compare::r#14
(byte) compare::r#15
(byte) compare::r#16
(byte) compare::r#17
(byte) compare::r#18
(byte) compare::r#19
(byte) compare::r#2
(byte) compare::r#20
(byte) compare::r#21
(byte) compare::r#22
(byte) compare::r#23
(byte) compare::r#24
(byte) compare::r#25
(byte) compare::r#26
(byte) compare::r#27
(byte) compare::r#3
(byte) compare::r#4
(byte) compare::r#5
(byte) compare::r#6
(byte) compare::r#7
(byte) compare::r#8
(byte) compare::r#9
(word) compare::w1
(word) compare::w1#0
(word) compare::w1#1
(word) compare::w1#10
(word) compare::w1#11
(word) compare::w1#12
(word) compare::w1#13
(word) compare::w1#14
(word) compare::w1#15
(word) compare::w1#16
(word) compare::w1#17
(word) compare::w1#18
(word) compare::w1#19
(word) compare::w1#2
(word) compare::w1#20
(word) compare::w1#21
(word) compare::w1#22
(word) compare::w1#23
(word) compare::w1#24
(word) compare::w1#25
(word) compare::w1#3
(word) compare::w1#4
(word) compare::w1#5
(word) compare::w1#6
(word) compare::w1#7
(word) compare::w1#8
(word) compare::w1#9
(word) compare::w2
(word) compare::w2#0
(word) compare::w2#1
(word) compare::w2#10
(word) compare::w2#11
(word) compare::w2#12
(word) compare::w2#13
(word) compare::w2#14
(word) compare::w2#15
(word) compare::w2#16
(word) compare::w2#17
(word) compare::w2#18
(word) compare::w2#19
(word) compare::w2#2
(word) compare::w2#20
(word) compare::w2#21
(word) compare::w2#22
(word) compare::w2#23
(word) compare::w2#24
(word) compare::w2#25
(word) compare::w2#26
(word) compare::w2#27
(word) compare::w2#3
(word) compare::w2#4
(word) compare::w2#5
(word) compare::w2#6
(word) compare::w2#7
(word) compare::w2#8
(word) compare::w2#9
(void()) main()
(bool~) main::$2
(bool~) main::$3
(bool~) main::$5
(bool~) main::$6
(bool~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(byte) main::j#5
(byte) main::j#6
(byte) main::j#7
(byte) main::j#8
(byte) main::op
(byte) main::op#0
(byte) main::op#1
(byte) main::op#2
(byte) main::op#3
(byte) main::op#4
(byte) main::op#5
(byte) main::op#6
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#10
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4
(byte) main::s#5
(byte) main::s#6
(byte) main::s#7
(byte) main::s#8
(byte) main::s#9
(word) main::w1
(word) main::w1#0
(word) main::w1#1
(word) main::w1#2
(word) main::w1#3
(word) main::w1#4
(word) main::w1#5
(word) main::w1#6
(word) main::w1#7
(word) main::w2
(word) main::w2#0
(word) main::w2#1
(word) main::w2#2
(word) main::w2#3
(word) main::w2#4
(word) main::w2#5
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word) print_uint::w#3
(const word*) words[]  = { (word) $12, (word) $3f34, (word) $cfed }

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#10 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 3 in (bool~) main::$2 ← (byte) main::s#1 == (number) 3
Adding number conversion cast (unumber) 0 in (byte) main::s#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) compare::$0 ← (byte) compare::op#1 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) compare::$1 ← (byte) compare::op#2 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) compare::$2 ← (byte) compare::op#3 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) compare::$3 ← (byte) compare::op#4 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) compare::$4 ← (byte) compare::op#5 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) compare::$5 ← (byte) compare::op#6 == (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) main::s#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [116] (bool~) main::$3 ← (byte) main::s#1 != (byte) 3 from [115] (bool~) main::$2 ← (byte) main::s#1 == (byte) 3
Inversing boolean not [149] (bool~) compare::$23 ← (word) compare::w1#1 >= (word) compare::w2#1 from [148] (bool~) compare::$22 ← (word) compare::w1#1 < (word) compare::w2#1
Inversing boolean not [156] (bool~) compare::$21 ← (word) compare::w1#2 > (word) compare::w2#2 from [155] (bool~) compare::$20 ← (word) compare::w1#2 <= (word) compare::w2#2
Inversing boolean not [163] (bool~) compare::$19 ← (word) compare::w1#3 <= (word) compare::w2#3 from [162] (bool~) compare::$18 ← (word) compare::w1#3 > (word) compare::w2#3
Inversing boolean not [170] (bool~) compare::$17 ← (word) compare::w1#4 < (word) compare::w2#4 from [169] (bool~) compare::$16 ← (word) compare::w1#4 >= (word) compare::w2#4
Inversing boolean not [177] (bool~) compare::$15 ← (word) compare::w1#5 != (word) compare::w2#5 from [176] (bool~) compare::$14 ← (word) compare::w1#5 == (word) compare::w2#5
Inversing boolean not [181] (bool~) compare::$6 ← (byte) compare::op#6 != (byte) 5 from [180] (bool~) compare::$5 ← (byte) compare::op#6 == (byte) 5
Inversing boolean not [185] (bool~) compare::$13 ← (word) compare::w1#6 == (word) compare::w2#6 from [184] (bool~) compare::$12 ← (word) compare::w1#6 != (word) compare::w2#6
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#52 print_char_cursor#53 print_char_cursor#28 
Alias print_char_cursor#0 = print_char_cursor#27 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#11 print_char_cursor#2 print_line_cursor#12 print_char_cursor#30 print_line_cursor#1 print_char_cursor#3 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#2 = print_uint::w#3 
Alias print_char_cursor#31 = print_char_cursor#4 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#32 = print_char_cursor#5 print_char_cursor#33 print_char_cursor#6 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#34 = print_char_cursor#7 
Alias print_char_cursor#35 = print_char_cursor#8 print_char_cursor#36 print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#38 print_char_cursor#11 
Alias print_line_cursor#13 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#12 print_char_cursor#39 print_line_cursor#3 print_char_cursor#13 
Alias print_line_cursor#14 = print_line_cursor#4 
Alias print_char_cursor#14 = print_char_cursor#40 
Alias main::s#3 = main::s#4 
Alias main::op#2 = main::op#4 main::op#6 main::op#5 
Alias main::w1#1 = main::w1#5 main::w1#7 main::w1#6 
Alias main::w2#1 = main::w2#3 main::w2#5 main::w2#4 
Alias main::j#5 = main::j#7 main::j#8 main::j#6 
Alias print_line_cursor#21 = print_line_cursor#24 print_line_cursor#26 
Alias main::i#6 = main::i#8 main::i#9 main::i#7 
Alias print_char_cursor#15 = print_char_cursor#41 print_char_cursor#59 
Alias main::s#2 = main::s#9 
Alias print_line_cursor#15 = print_line_cursor#5 
Alias print_char_cursor#16 = print_char_cursor#42 
Alias main::j#3 = main::j#4 
Alias main::i#3 = main::i#4 main::i#5 
Alias main::w1#3 = main::w1#4 
Alias print_char_cursor#65 = print_char_cursor#75 print_char_cursor#66 
Alias main::s#10 = main::s#8 main::s#6 
Alias print_line_cursor#25 = print_line_cursor#27 print_line_cursor#29 
Alias print_line_cursor#16 = print_line_cursor#22 print_line_cursor#6 
Alias print_char_cursor#17 = print_char_cursor#43 print_char_cursor#60 
Alias compare::w1#1 = compare::w1#8 compare::w1#9 compare::w1#2 compare::w1#10 compare::w1#3 compare::w1#11 compare::w1#4 compare::w1#12 compare::w1#5 compare::w1#13 compare::w1#6 compare::w1#20 compare::w1#21 compare::w1#22 compare::w1#23 compare::w1#24 compare::w1#25 
Alias compare::w2#1 = compare::w2#8 compare::w2#9 compare::w2#2 compare::w2#10 compare::w2#3 compare::w2#11 compare::w2#4 compare::w2#12 compare::w2#5 compare::w2#13 compare::w2#6 compare::w2#22 compare::w2#23 compare::w2#24 compare::w2#25 compare::w2#26 compare::w2#27 
Alias print_char_cursor#67 = print_char_cursor#87 print_char_cursor#89 print_char_cursor#90 print_char_cursor#86 print_char_cursor#91 print_char_cursor#84 print_char_cursor#92 print_char_cursor#82 print_char_cursor#76 print_char_cursor#80 print_char_cursor#77 print_char_cursor#78 print_char_cursor#79 print_char_cursor#81 print_char_cursor#83 print_char_cursor#85 print_char_cursor#88 
Alias compare::r#0 = compare::r#24 compare::r#25 compare::r#23 compare::r#26 compare::r#22 compare::r#27 compare::r#21 compare::r#18 compare::r#20 compare::r#11 compare::r#19 
Alias compare::op#1 = compare::op#2 compare::op#3 compare::op#4 compare::op#5 compare::op#6 
Alias compare::ops#0 = compare::ops#13 compare::ops#12 compare::ops#11 compare::ops#10 compare::ops#9 
Alias compare::ops#7 = compare::ops#8 
Alias compare::w2#14 = compare::w2#15 compare::w2#7 
Alias compare::r#10 = compare::r#9 compare::r#8 compare::r#7 
Alias print_char_cursor#18 = print_char_cursor#44 
Alias print_char_cursor#19 = print_char_cursor#45 
Alias print_char_cursor#20 = print_char_cursor#46 
Alias print_char_cursor#21 = print_char_cursor#47 
Alias print_char_cursor#22 = print_char_cursor#48 print_char_cursor#49 print_char_cursor#23 
Alias print_screen#0 = print_line_cursor#7 print_char_cursor#24 print_line_cursor#23 print_char_cursor#62 print_screen#7 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#17 = print_line_cursor#8 print_line_cursor#18 print_line_cursor#9 
Alias print_char_cursor#25 = print_char_cursor#50 print_char_cursor#51 print_char_cursor#26 
Successful SSA optimization Pass2AliasElimination
Alias main::op#2 = main::op#3 
Alias main::w1#1 = main::w1#3 
Alias main::w2#1 = main::w2#2 
Alias main::j#3 = main::j#5 
Alias main::i#3 = main::i#6 
Alias compare::w1#1 = compare::w1#14 compare::w1#15 compare::w1#16 compare::w1#17 compare::w1#18 compare::w1#19 
Alias print_char_cursor#67 = print_char_cursor#68 print_char_cursor#69 print_char_cursor#70 print_char_cursor#71 print_char_cursor#72 print_char_cursor#73 
Alias compare::w2#1 = compare::w2#16 compare::w2#17 compare::w2#18 compare::w2#19 compare::w2#20 compare::w2#21 
Successful SSA optimization Pass2AliasElimination
Alias compare::w1#1 = compare::w1#7 
Alias print_char_cursor#61 = print_char_cursor#67 
Alias compare::w2#1 = compare::w2#14 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#63 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#21
Identical Phi Values (byte*) print_char_cursor#54 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#54
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#35
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#35
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_screen#5
Identical Phi Values (byte*) print_screen#5 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#57 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_line_cursor#13
Identical Phi Values (word) main::w1#1 (word) main::w1#2
Identical Phi Values (word) main::w2#1 (word) main::w2#0
Identical Phi Values (byte) main::j#3 (byte) main::j#2
Identical Phi Values (byte) main::i#3 (byte) main::i#10
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#25
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#65
Identical Phi Values (byte) compare::op#1 (byte) compare::op#0
Identical Phi Values (word) compare::w1#1 (word) compare::w1#0
Identical Phi Values (word) compare::w2#1 (word) compare::w2#0
Identical Phi Values (byte*) print_char_cursor#61 (byte*) print_char_cursor#58
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#1
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#16
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#17
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#10
Identical Phi Values (word) main::w1#2 (word) main::w1#0
Identical Phi Values (byte) main::i#10 (byte) main::i#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) print_str::$1 [16] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [26] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1
Simple Condition (bool~) main::$3 [78] if((byte) main::s#1!=(byte) 3) goto main::@4
Simple Condition (bool~) main::$5 [82] if((byte) main::op#1!=rangelast(0,5)) goto main::@3
Simple Condition (bool~) main::$6 [88] if((byte) main::j#1!=rangelast(0,2)) goto main::@2
Simple Condition (bool~) main::$7 [91] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Simple Condition (bool~) compare::$0 [99] if((byte) compare::op#0==(byte) 0) goto compare::@1
Simple Condition (bool~) compare::$23 [101] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24
Simple Condition (bool~) compare::$1 [103] if((byte) compare::op#0==(byte) 1) goto compare::@2
Simple Condition (bool~) compare::$21 [105] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23
Simple Condition (bool~) compare::$2 [107] if((byte) compare::op#0==(byte) 2) goto compare::@3
Simple Condition (bool~) compare::$19 [109] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22
Simple Condition (bool~) compare::$3 [111] if((byte) compare::op#0==(byte) 3) goto compare::@4
Simple Condition (bool~) compare::$17 [113] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21
Simple Condition (bool~) compare::$4 [115] if((byte) compare::op#0==(byte) 4) goto compare::@5
Simple Condition (bool~) compare::$15 [117] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20
Simple Condition (bool~) compare::$6 [119] if((byte) compare::op#0!=(byte) 5) goto compare::@6
Simple Condition (bool~) compare::$13 [121] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) main::s#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::op#0 = 0
Constant (const byte) main::s#2 = 0
Constant (const byte) compare::r#0 = FF
Constant (const byte*) compare::ops#0 = (byte*) 0
Constant (const byte*) compare::ops#1 = compare::$24
Constant (const byte) compare::r#1 = TT
Constant (const byte*) compare::ops#2 = compare::$25
Constant (const byte) compare::r#2 = TT
Constant (const byte*) compare::ops#3 = compare::$26
Constant (const byte) compare::r#3 = TT
Constant (const byte*) compare::ops#4 = compare::$27
Constant (const byte) compare::r#4 = TT
Constant (const byte*) compare::ops#5 = compare::$28
Constant (const byte) compare::r#5 = TT
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte*) compare::ops#6 = compare::$29
Constant (const byte) compare::r#6 = TT
Constant (const byte*) print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$4 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [93] if(true) goto main::@8
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [80] main::op#1 ← ++ main::op#2 to ++
Resolved ranged comparison value [82] if(main::op#1!=rangelast(0,5)) goto main::@3 to (number) 6
Resolved ranged next value [86] main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value [88] if(main::j#1!=rangelast(0,2)) goto main::@2 to (number) 3
Resolved ranged next value [89] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [91] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [52] if((byte) main::op#1!=(number) 6) goto main::@3
Adding number conversion cast (unumber) 3 in [55] if((byte) main::j#1!=(number) 3) goto main::@2
Adding number conversion cast (unumber) 3 in [57] if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$4 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [37] (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [40] (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::op#0
Inlining constant with var siblings (const byte) main::s#2
Inlining constant with var siblings (const byte) compare::r#0
Inlining constant with var siblings (const byte*) compare::ops#0
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte) compare::r#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte) compare::r#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte) compare::r#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte) compare::r#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte) compare::r#5
Inlining constant with var siblings (const byte*) compare::ops#6
Inlining constant with var siblings (const byte) compare::r#6
Constant inlined compare::ops#0 = (byte*) 0
Constant inlined compare::r#1 = (const nomodify byte) TT
Constant inlined compare::r#0 = (const nomodify byte) FF
Constant inlined compare::r#3 = (const nomodify byte) TT
Constant inlined compare::r#2 = (const nomodify byte) TT
Constant inlined compare::r#5 = (const nomodify byte) TT
Constant inlined compare::r#4 = (const nomodify byte) TT
Constant inlined memset::$4 = (byte*)(const void*) memset::str#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#0 = (byte) 0
Constant inlined main::op#0 = (byte) 0
Constant inlined main::s#0 = (byte) 0
Constant inlined main::s#2 = (byte) 0
Constant inlined compare::$24 = (const byte*) compare::ops#1
Constant inlined compare::r#6 = (const nomodify byte) TT
Constant inlined compare::$25 = (const byte*) compare::ops#2
Constant inlined compare::$26 = (const byte*) compare::ops#3
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined compare::$27 = (const byte*) compare::ops#4
Constant inlined compare::$28 = (const byte*) compare::ops#5
Constant inlined compare::$29 = (const byte*) compare::ops#6
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@12(between main::@7 and main::@1)
Added new block during phi lifting main::@13(between main::@6 and main::@2)
Added new block during phi lifting main::@14(between main::@4 and main::@3)
Added new block during phi lifting main::@15(between main::@10 and main::@4)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of compare::@13
Adding NOP phi() at start of compare::@29
Adding NOP phi() at start of compare::@14
Adding NOP phi() at start of compare::@15
Adding NOP phi() at start of compare::@16
Adding NOP phi() at start of compare::@17
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [main] to print_cls:1 compare:19 print_ln:23 
Calls in [compare] to print_uint:70 print_str:72 print_uint:76 print_char:80 print_char:82 
Calls in [print_uint] to print_uchar:113 print_uchar:117 
Calls in [print_uchar] to print_char:125 print_char:130 
Calls in [print_str] to print_char:140 
Calls in [print_cls] to memset:144 

Created 32 initial phi equivalence classes
Coalesced [6] print_char_cursor#103 ← print_char_cursor#74
Coalesced [7] main::s#12 ← main::s#7
Coalesced [8] print_line_cursor#34 ← print_line_cursor#30
Coalesced [12] print_char_cursor#105 ← print_char_cursor#64
Coalesced [13] main::s#14 ← main::s#5
Coalesced [14] print_line_cursor#36 ← print_line_cursor#28
Not coalescing [24] print_char_cursor#108 ← print_line_cursor#0
Coalesced [25] print_line_cursor#39 ← print_line_cursor#0
Coalesced [34] main::i#11 ← main::i#1
Coalesced [35] print_char_cursor#102 ← print_char_cursor#65
Coalesced [36] main::s#11 ← main::s#10
Coalesced [37] print_line_cursor#33 ← print_line_cursor#25
Coalesced [38] main::j#9 ← main::j#1
Coalesced (already) [39] print_char_cursor#104 ← print_char_cursor#65
Coalesced (already) [40] main::s#13 ← main::s#10
Coalesced (already) [41] print_line_cursor#35 ← print_line_cursor#25
Coalesced [42] main::op#7 ← main::op#1
Coalesced (already) [43] print_char_cursor#106 ← print_char_cursor#65
Coalesced (already) [44] main::s#15 ← main::s#10
Coalesced (already) [45] print_line_cursor#37 ← print_line_cursor#25
Coalesced [46] print_char_cursor#107 ← print_char_cursor#10
Coalesced [47] main::s#16 ← main::s#1
Coalesced (already) [48] print_line_cursor#38 ← print_line_cursor#21
Coalesced [49] print_line_cursor#31 ← print_line_cursor#21
Coalesced (already) [55] print_line_cursor#32 ← print_line_cursor#0
Coalesced [65] compare::r#28 ← compare::r#12
Coalesced [68] print_uint::w#5 ← print_uint::w#0
Coalesced [69] print_char_cursor#94 ← print_char_cursor#58
Coalesced [74] print_uint::w#4 ← print_uint::w#1
Coalesced (already) [75] print_char_cursor#93 ← print_char_cursor#10
Coalesced [78] print_char::ch#6 ← print_char::ch#3
Coalesced [79] print_char_cursor#97 ← print_char_cursor#10
Coalesced (already) [81] print_char_cursor#98 ← print_char_cursor#10
Coalesced [88] compare::r#29 ← compare::r#13
Coalesced [92] compare::r#30 ← compare::r#14
Coalesced [96] compare::r#31 ← compare::r#15
Coalesced [100] compare::r#32 ← compare::r#16
Coalesced [104] compare::r#33 ← compare::r#17
Coalesced [111] print_uchar::b#4 ← print_uchar::b#0
Coalesced [112] print_char_cursor#95 ← print_char_cursor#55
Coalesced [115] print_uchar::b#5 ← print_uchar::b#1
Coalesced (already) [116] print_char_cursor#96 ← print_char_cursor#10
Coalesced [123] print_char::ch#8 ← print_char::ch#1
Coalesced (already) [124] print_char_cursor#100 ← print_char_cursor#56
Coalesced [128] print_char::ch#9 ← print_char::ch#2
Coalesced (already) [129] print_char_cursor#101 ← print_char_cursor#10
Coalesced [133] print_str::str#6 ← print_str::str#1
Coalesced [138] print_char::ch#7 ← print_char::ch#0
Coalesced (already) [139] print_char_cursor#99 ← print_char_cursor#10
Coalesced [142] print_str::str#7 ← print_str::str#0
Coalesced [155] memset::dst#4 ← memset::dst#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@15
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) compare::@29
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@10 to main::@9
Renumbering block main::@11 to main::@10
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of compare::@13
Adding NOP phi() at start of compare::@28
Adding NOP phi() at start of compare::@14
Adding NOP phi() at start of compare::@15
Adding NOP phi() at start of compare::@16
Adding NOP phi() at start of compare::@17
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [2] (byte*) print_line_cursor#30 ← phi( main::@7/(byte*) print_line_cursor#25 main/(const byte*) print_screen#0 )
  [2] (byte) main::s#7 ← phi( main::@7/(byte) main::s#10 main/(byte) 0 )
  [2] (byte*) print_char_cursor#74 ← phi( main::@7/(byte*) print_char_cursor#65 main/(const byte*) print_screen#0 )
  [2] (byte) main::i#2 ← phi( main::@7/(byte) main::i#1 main/(byte) 0 )
  [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1
  [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8)
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [5] (byte*) print_line_cursor#28 ← phi( main::@1/(byte*) print_line_cursor#30 main::@6/(byte*) print_line_cursor#25 )
  [5] (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#10 )
  [5] (byte*) print_char_cursor#64 ← phi( main::@1/(byte*) print_char_cursor#74 main::@6/(byte*) print_char_cursor#65 )
  [5] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::j#1 )
  [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1
  [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [8] (byte*) print_line_cursor#21 ← phi( main::@2/(byte*) print_line_cursor#28 main::@4/(byte*) print_line_cursor#25 )
  [8] (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#10 )
  [8] (byte*) print_char_cursor#58 ← phi( main::@2/(byte*) print_char_cursor#64 main::@4/(byte*) print_char_cursor#65 )
  [8] (byte) main::op#2 ← phi( main::@2/(byte) 0 main::@4/(byte) main::op#1 )
  [9] (word) compare::w1#0 ← (word) main::w1#0
  [10] (word) compare::w2#0 ← (word) main::w2#0
  [11] (byte) compare::op#0 ← (byte) main::op#2
  [12] call compare 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [13] (byte) main::s#1 ← ++ (byte) main::s#3
  [14] if((byte) main::s#1!=(byte) 3) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [15] phi()
  [16] call print_ln 
  to:main::@10
main::@10: scope:[main]  from main::@5
  [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@9
  [18] (byte*) print_line_cursor#25 ← phi( main::@9/(byte*) print_line_cursor#21 main::@10/(byte*) print_line_cursor#0 )
  [18] (byte) main::s#10 ← phi( main::@9/(byte) main::s#1 main::@10/(byte) 0 )
  [18] (byte*) print_char_cursor#65 ← phi( main::@9/(byte*) print_char_cursor#10 main::@10/(byte*) print_char_cursor#108 )
  [19] (byte) main::op#1 ← ++ (byte) main::op#2
  [20] if((byte) main::op#1!=(byte) 6) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [21] (byte) main::j#1 ← ++ (byte) main::j#2
  [22] if((byte) main::j#1!=(byte) 3) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] (byte) main::i#1 ← ++ (byte) main::i#2
  [24] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [25] phi()
  to:main::@8

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@5
  [26] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [27] (byte*) print_line_cursor#10 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#0 )
  [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28
  [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [30] return 
  to:@return

(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
compare: scope:[compare]  from main::@3
  [31] if((byte) compare::op#0==(byte) 0) goto compare::@1
  to:compare::@7
compare::@7: scope:[compare]  from compare
  [32] if((byte) compare::op#0==(byte) 1) goto compare::@2
  to:compare::@8
compare::@8: scope:[compare]  from compare::@7
  [33] if((byte) compare::op#0==(byte) 2) goto compare::@3
  to:compare::@9
compare::@9: scope:[compare]  from compare::@8
  [34] if((byte) compare::op#0==(byte) 3) goto compare::@4
  to:compare::@10
compare::@10: scope:[compare]  from compare::@9
  [35] if((byte) compare::op#0==(byte) 4) goto compare::@5
  to:compare::@11
compare::@11: scope:[compare]  from compare::@10
  [36] if((byte) compare::op#0!=(byte) 5) goto compare::@6
  to:compare::@12
compare::@12: scope:[compare]  from compare::@11
  [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19
  to:compare::@13
compare::@13: scope:[compare]  from compare::@12
  [38] phi()
  to:compare::@19
compare::@19: scope:[compare]  from compare::@12 compare::@13
  [39] (byte) compare::r#12 ← phi( compare::@12/(const nomodify byte) FF compare::@13/(const nomodify byte) TT )
  to:compare::@6
compare::@6: scope:[compare]  from compare::@11 compare::@19 compare::@20 compare::@21 compare::@22 compare::@23 compare::@24
  [40] (byte) compare::r#10 ← phi( compare::@11/(const nomodify byte) FF compare::@19/(byte) compare::r#12 compare::@20/(byte) compare::r#13 compare::@21/(byte) compare::r#14 compare::@22/(byte) compare::r#15 compare::@23/(byte) compare::r#16 compare::@24/(byte) compare::r#17 )
  [40] (byte*) compare::ops#7 ← phi( compare::@11/(byte*) 0 compare::@19/(const byte*) compare::ops#1 compare::@20/(const byte*) compare::ops#2 compare::@21/(const byte*) compare::ops#3 compare::@22/(const byte*) compare::ops#4 compare::@23/(const byte*) compare::ops#5 compare::@24/(const byte*) compare::ops#6 )
  [41] (word) print_uint::w#0 ← (word) compare::w1#0
  [42] call print_uint 
  to:compare::@25
compare::@25: scope:[compare]  from compare::@6
  [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7
  [44] call print_str 
  to:compare::@26
compare::@26: scope:[compare]  from compare::@25
  [45] (word) print_uint::w#1 ← (word) compare::w2#0
  [46] call print_uint 
  to:compare::@27
compare::@27: scope:[compare]  from compare::@26
  [47] (byte) print_char::ch#3 ← (byte) compare::r#10
  [48] call print_char 
  to:compare::@28
compare::@28: scope:[compare]  from compare::@27
  [49] phi()
  [50] call print_char 
  to:compare::@return
compare::@return: scope:[compare]  from compare::@28
  [51] return 
  to:@return
compare::@5: scope:[compare]  from compare::@10
  [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20
  to:compare::@14
compare::@14: scope:[compare]  from compare::@5
  [53] phi()
  to:compare::@20
compare::@20: scope:[compare]  from compare::@14 compare::@5
  [54] (byte) compare::r#13 ← phi( compare::@14/(const nomodify byte) TT compare::@5/(const nomodify byte) FF )
  to:compare::@6
compare::@4: scope:[compare]  from compare::@9
  [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21
  to:compare::@15
compare::@15: scope:[compare]  from compare::@4
  [56] phi()
  to:compare::@21
compare::@21: scope:[compare]  from compare::@15 compare::@4
  [57] (byte) compare::r#14 ← phi( compare::@15/(const nomodify byte) TT compare::@4/(const nomodify byte) FF )
  to:compare::@6
compare::@3: scope:[compare]  from compare::@8
  [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22
  to:compare::@16
compare::@16: scope:[compare]  from compare::@3
  [59] phi()
  to:compare::@22
compare::@22: scope:[compare]  from compare::@16 compare::@3
  [60] (byte) compare::r#15 ← phi( compare::@16/(const nomodify byte) TT compare::@3/(const nomodify byte) FF )
  to:compare::@6
compare::@2: scope:[compare]  from compare::@7
  [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23
  to:compare::@17
compare::@17: scope:[compare]  from compare::@2
  [62] phi()
  to:compare::@23
compare::@23: scope:[compare]  from compare::@17 compare::@2
  [63] (byte) compare::r#16 ← phi( compare::@17/(const nomodify byte) TT compare::@2/(const nomodify byte) FF )
  to:compare::@6
compare::@1: scope:[compare]  from compare
  [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24
  to:compare::@18
compare::@18: scope:[compare]  from compare::@1
  [65] phi()
  to:compare::@24
compare::@24: scope:[compare]  from compare::@1 compare::@18
  [66] (byte) compare::r#17 ← phi( compare::@1/(const nomodify byte) FF compare::@18/(const nomodify byte) TT )
  to:compare::@6

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from compare::@27 compare::@28 print_str::@2 print_uchar print_uchar::@1
  [67] (byte*) print_char_cursor#37 ← phi( compare::@27/(byte*) print_char_cursor#10 compare::@28/(byte*) print_char_cursor#10 print_str::@2/(byte*) print_char_cursor#10 print_uchar/(byte*) print_char_cursor#56 print_uchar::@1/(byte*) print_char_cursor#10 )
  [67] (byte) print_char::ch#5 ← phi( compare::@27/(byte) print_char::ch#3 compare::@28/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 )
  [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5
  [69] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [70] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from compare::@26 compare::@6
  [71] (byte*) print_char_cursor#55 ← phi( compare::@26/(byte*) print_char_cursor#10 compare::@6/(byte*) print_char_cursor#58 )
  [71] (word) print_uint::w#2 ← phi( compare::@26/(word) print_uint::w#1 compare::@6/(word) print_uint::w#0 )
  [72] (byte) print_uchar::b#0 ← > (word) print_uint::w#2
  [73] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [74] (byte) print_uchar::b#1 ← < (word) print_uint::w#2
  [75] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [76] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [77] (byte*) print_char_cursor#56 ← phi( print_uint/(byte*) print_char_cursor#55 print_uint::@1/(byte*) print_char_cursor#10 )
  [77] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [79] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [80] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [82] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [83] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [84] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from compare::@25
  [85] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [86] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#1 print_str::@3/(byte*) print_str::str#0 )
  [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [88] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [90] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [92] phi()
  [93] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [94] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [95] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [96] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [98] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [100] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
(byte) compare::op
(byte) compare::op#0 10167.833333333334
(byte*) compare::ops
(byte*) compare::ops#7 3333.6666666666665
(byte) compare::r
(byte) compare::r#10 10001.000000000002
(byte) compare::r#12 10001.0
(byte) compare::r#13 10001.0
(byte) compare::r#14 10001.0
(byte) compare::r#15 10001.0
(byte) compare::r#16 10001.0
(byte) compare::r#17 10001.0
(word) compare::w1
(word) compare::w1#0 2536.0000000000005
(word) compare::w2
(word) compare::w2#0 2290.5806451612902
(void()) main()
(byte~) main::$8 22.0
(byte~) main::$9 202.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 1.5714285714285716
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 18.9375
(byte) main::op
(byte) main::op#1 1501.5
(byte) main::op#2 273.0
(byte) main::s
(byte) main::s#1 1501.5
(byte) main::s#10 302.0
(byte) main::s#3 420.59999999999997
(byte) main::s#5 71.0
(byte) main::s#7 7.333333333333333
(word) main::w1
(word) main::w1#0 53.26315789473684
(word) main::w2
(word) main::w2#0 78.71428571428571
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1334.6666666666667
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 2.000000002E9
(byte) print_char::ch#1 2000002.0
(byte) print_char::ch#2 2000002.0
(byte) print_char::ch#3 20002.0
(byte) print_char::ch#5 1.1002010005E10
(byte*) print_char_cursor
(byte*) print_char_cursor#10 3.0836475025000006E8
(byte*) print_char_cursor#108 2002.0
(byte*) print_char_cursor#37 1.05010100035E10
(byte*) print_char_cursor#55 60001.5
(byte*) print_char_cursor#56 400001.00000000006
(byte*) print_char_cursor#58 370.1
(byte*) print_char_cursor#64 71.0
(byte*) print_char_cursor#65 445.0
(byte*) print_char_cursor#74 7.333333333333333
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#0 6.0000401E7
(byte*) print_line_cursor#10 2.00010003E8
(byte*) print_line_cursor#21 1344.888888888889
(byte*) print_line_cursor#25 445.0
(byte*) print_line_cursor#28 71.0
(byte*) print_line_cursor#30 7.333333333333333
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 2.000000002E9
(byte*) print_str::str#1 55001.0
(byte*) print_str::str#2 1.00002500125E9
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 2000002.0
(byte~) print_uchar::$2 2000002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 200002.0
(byte) print_uchar::b#1 200002.0
(byte) print_uchar::b#2 550001.0
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 20002.0
(word) print_uint::w#1 20002.0
(word) print_uint::w#2 73334.66666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ]
[ compare::ops#7 ]
[ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
[ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
[ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Added variable main::w1#0 to live range equivalence class [ main::w1#0 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable main::w2#0 to live range equivalence class [ main::w2#0 ]
Added variable compare::w1#0 to live range equivalence class [ compare::w1#0 ]
Added variable compare::w2#0 to live range equivalence class [ compare::w2#0 ]
Added variable compare::op#0 to live range equivalence class [ compare::op#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ]
[ compare::ops#7 ]
[ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
[ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
[ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ memset::dst#2 memset::dst#1 ]
[ main::$8 ]
[ main::w1#0 ]
[ main::$9 ]
[ main::w2#0 ]
[ compare::w1#0 ]
[ compare::w2#0 ]
[ compare::op#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#2 main::j#1 ]
Allocated zp[1]:4 [ main::op#2 main::op#1 ]
Allocated zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated zp[2]:6 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ]
Allocated zp[2]:8 [ compare::ops#7 ]
Allocated zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Allocated zp[1]:11 [ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
Allocated zp[2]:12 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
Allocated zp[2]:14 [ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ]
Allocated zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated zp[2]:19 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:21 [ main::$8 ]
Allocated zp[2]:22 [ main::w1#0 ]
Allocated zp[1]:24 [ main::$9 ]
Allocated zp[2]:25 [ main::w2#0 ]
Allocated zp[2]:27 [ compare::w1#0 ]
Allocated zp[2]:29 [ compare::w2#0 ]
Allocated zp[1]:31 [ compare::op#0 ]
Allocated zp[1]:32 [ print_uchar::$0 ]
Allocated zp[1]:33 [ print_uchar::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_screen = $400
  .label print_line_cursor = 6
  .label print_char_cursor = $e
  // main
main: {
    .label __8 = $15
    .label __9 = $18
    .label w1 = $16
    .label w2 = $19
    .label s = 5
    .label op = 4
    .label j = 3
    .label i = 2
    // [1] call print_cls 
    // [92] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte*) print_line_cursor#30 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [2] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [2] phi (byte*) print_char_cursor#74 = (const byte*) print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [2] phi (byte*) print_line_cursor#30 = (byte*) print_line_cursor#25 [phi:main::@7->main::@1#0] -- register_copy 
    // [2] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
    // [2] phi (byte*) print_char_cursor#74 = (byte*) print_char_cursor#65 [phi:main::@7->main::@1#2] -- register_copy 
    // [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __8
    // [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __8
    lda words,y
    sta.z w1
    lda words+1,y
    sta.z w1+1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#30 [phi:main::@1->main::@2#0] -- register_copy 
    // [5] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [5] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#74 [phi:main::@1->main::@2#2] -- register_copy 
    // [5] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b2
    // [5] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [5] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#25 [phi:main::@6->main::@2#0] -- register_copy 
    // [5] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
    // [5] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#65 [phi:main::@6->main::@2#2] -- register_copy 
    // [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z j
    asl
    sta.z __9
    // [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __9
    lda words,y
    sta.z w2
    lda words+1,y
    sta.z w2+1
    // [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [8] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#28 [phi:main::@2->main::@3#0] -- register_copy 
    // [8] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
    // [8] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 [phi:main::@2->main::@3#2] -- register_copy 
    // [8] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta.z op
    jmp __b3
    // [8] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [8] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#25 [phi:main::@4->main::@3#0] -- register_copy 
    // [8] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
    // [8] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#65 [phi:main::@4->main::@3#2] -- register_copy 
    // [8] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [9] (word) compare::w1#0 ← (word) main::w1#0 -- vwuz1=vwuz2 
    lda.z w1
    sta.z compare.w1
    lda.z w1+1
    sta.z compare.w1+1
    // [10] (word) compare::w2#0 ← (word) main::w2#0 -- vwuz1=vwuz2 
    lda.z w2
    sta.z compare.w2
    lda.z w2+1
    sta.z compare.w2+1
    // [11] (byte) compare::op#0 ← (byte) main::op#2 -- vbuz1=vbuz2 
    lda.z op
    sta.z compare.op
    // [12] call compare 
    jsr compare
    jmp __b9
    // main::@9
  __b9:
    // [13] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [14] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z s
    bne __b4_from___b9
    // [15] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  __b5_from___b9:
    jmp __b5
    // main::@5
  __b5:
    // [16] call print_ln 
    // [26] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b10
    // main::@10
  __b10:
    // [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [18] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  __b4_from___b10:
    // [18] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#0 [phi:main::@10->main::@4#0] -- register_copy 
    // [18] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [18] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#108 [phi:main::@10->main::@4#2] -- register_copy 
    jmp __b4
    // [18] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [18] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#21 [phi:main::@9->main::@4#0] -- register_copy 
    // [18] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
    // [18] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#10 [phi:main::@9->main::@4#2] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [19] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuz1=_inc_vbuz1 
    inc.z op
    // [20] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z op
    bne __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [21] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [22] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z j
    bne __b2_from___b6
    jmp __b7
    // main::@7
  __b7:
    // [23] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [24] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b7
    // [25] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  __b8_from___b7:
  __b8_from___b8:
    jmp __b8
  // loop forever
    // main::@8
  __b8:
    jmp __b8_from___b8
}
  // print_ln
// Print a newline
print_ln: {
    // [27] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [27] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [30] return 
    rts
}
  // compare
// Compare two words using an operator
// compare(word zp($1b) w1, word zp($1d) w2, byte zp($1f) op)
compare: {
    .label w1 = $1b
    .label w2 = $1d
    .label op = $1f
    .label ops = 8
    .label r = $a
    // [31] if((byte) compare::op#0==(byte) 0) goto compare::@1 -- vbuz1_eq_0_then_la1 
    lda.z op
    cmp #0
    beq __b1
    jmp __b7
    // compare::@7
  __b7:
    // [32] if((byte) compare::op#0==(byte) 1) goto compare::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z op
    beq __b2
    jmp __b8
    // compare::@8
  __b8:
    // [33] if((byte) compare::op#0==(byte) 2) goto compare::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z op
    beq __b3
    jmp __b9
    // compare::@9
  __b9:
    // [34] if((byte) compare::op#0==(byte) 3) goto compare::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z op
    beq __b4
    jmp __b10
    // compare::@10
  __b10:
    // [35] if((byte) compare::op#0==(byte) 4) goto compare::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z op
    beq __b5
    jmp __b11
    // compare::@11
  __b11:
    // [36] if((byte) compare::op#0!=(byte) 5) goto compare::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z op
    bne __b6_from___b11
    jmp __b12
    // compare::@12
  __b12:
    // [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 -- vwuz1_eq_vwuz2_then_la1 
    lda.z w1
    cmp.z w2
    bne !+
    lda.z w1+1
    cmp.z w2+1
    beq __b19_from___b12
  !:
    // [38] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  __b13_from___b12:
    jmp __b13
    // compare::@13
  __b13:
    // [39] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  __b19_from___b13:
    // [39] phi (byte) compare::r#12 = (const nomodify byte) TT [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b19
    // [39] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  __b19_from___b12:
    // [39] phi (byte) compare::r#12 = (const nomodify byte) FF [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b19
    // compare::@19
  __b19:
    // [40] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  __b6_from___b19:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta.z ops
    lda #>ops_1
    sta.z ops+1
    jmp __b6
    // [40] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  __b6_from___b11:
    // [40] phi (byte) compare::r#10 = (const nomodify byte) FF [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // [40] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta.z ops
    lda #>0
    sta.z ops+1
    jmp __b6
    // compare::@6
  __b6:
    // [41] (word) print_uint::w#0 ← (word) compare::w1#0 -- vwuz1=vwuz2 
    lda.z w1
    sta.z print_uint.w
    lda.z w1+1
    sta.z print_uint.w+1
    // [42] call print_uint 
    // [71] phi from compare::@6 to print_uint [phi:compare::@6->print_uint]
  print_uint_from___b6:
    // [71] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#58 [phi:compare::@6->print_uint#0] -- register_copy 
    // [71] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:compare::@6->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __b25
    // compare::@25
  __b25:
    // [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7 -- pbuz1=pbuz2 
    lda.z ops
    sta.z print_str.str
    lda.z ops+1
    sta.z print_str.str+1
    // [44] call print_str 
    // [85] phi from compare::@25 to print_str [phi:compare::@25->print_str]
  print_str_from___b25:
    jsr print_str
    jmp __b26
    // compare::@26
  __b26:
    // [45] (word) print_uint::w#1 ← (word) compare::w2#0 -- vwuz1=vwuz2 
    lda.z w2
    sta.z print_uint.w
    lda.z w2+1
    sta.z print_uint.w+1
    // [46] call print_uint 
    // [71] phi from compare::@26 to print_uint [phi:compare::@26->print_uint]
  print_uint_from___b26:
    // [71] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#10 [phi:compare::@26->print_uint#0] -- register_copy 
    // [71] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:compare::@26->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __b27
    // compare::@27
  __b27:
    // [47] (byte) print_char::ch#3 ← (byte) compare::r#10 -- vbuz1=vbuz2 
    lda.z r
    sta.z print_char.ch
    // [48] call print_char 
    // [67] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  print_char_from___b27:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:compare::@27->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
    // [49] phi from compare::@27 to compare::@28 [phi:compare::@27->compare::@28]
  __b28_from___b27:
    jmp __b28
    // compare::@28
  __b28:
    // [50] call print_char 
    // [67] phi from compare::@28 to print_char [phi:compare::@28->print_char]
  print_char_from___b28:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:compare::@28->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) ' ' [phi:compare::@28->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __breturn
    // compare::@return
  __breturn:
    // [51] return 
    rts
    // compare::@5
  __b5:
    // [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 -- vwuz1_neq_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne __b20_from___b5
    lda.z w1
    cmp.z w2
    bne __b20_from___b5
    // [53] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  __b14_from___b5:
    jmp __b14
    // compare::@14
  __b14:
    // [54] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  __b20_from___b14:
    // [54] phi (byte) compare::r#13 = (const nomodify byte) TT [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b20
    // [54] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  __b20_from___b5:
    // [54] phi (byte) compare::r#13 = (const nomodify byte) FF [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b20
    // compare::@20
  __b20:
    // [40] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  __b6_from___b20:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta.z ops
    lda #>ops_2
    sta.z ops+1
    jmp __b6
    // compare::@4
  __b4:
    // [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 -- vwuz1_lt_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bcc __b21_from___b4
    bne !+
    lda.z w1
    cmp.z w2
    bcc __b21_from___b4
  !:
    // [56] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  __b15_from___b4:
    jmp __b15
    // compare::@15
  __b15:
    // [57] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  __b21_from___b15:
    // [57] phi (byte) compare::r#14 = (const nomodify byte) TT [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b21
    // [57] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  __b21_from___b4:
    // [57] phi (byte) compare::r#14 = (const nomodify byte) FF [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b21
    // compare::@21
  __b21:
    // [40] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  __b6_from___b21:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta.z ops
    lda #>ops_3
    sta.z ops+1
    jmp __b6
    // compare::@3
  __b3:
    // [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 -- vwuz1_le_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne !+
    lda.z w1
    cmp.z w2
    beq __b22_from___b3
  !:
    bcc __b22_from___b3
    // [59] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  __b16_from___b3:
    jmp __b16
    // compare::@16
  __b16:
    // [60] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  __b22_from___b16:
    // [60] phi (byte) compare::r#15 = (const nomodify byte) TT [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b22
    // [60] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  __b22_from___b3:
    // [60] phi (byte) compare::r#15 = (const nomodify byte) FF [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b22
    // compare::@22
  __b22:
    // [40] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  __b6_from___b22:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta.z ops
    lda #>ops_4
    sta.z ops+1
    jmp __b6
    // compare::@2
  __b2:
    // [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 -- vwuz1_gt_vwuz2_then_la1 
    lda.z w2+1
    cmp.z w1+1
    bcc __b23_from___b2
    bne !+
    lda.z w2
    cmp.z w1
    bcc __b23_from___b2
  !:
    // [62] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  __b17_from___b2:
    jmp __b17
    // compare::@17
  __b17:
    // [63] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  __b23_from___b17:
    // [63] phi (byte) compare::r#16 = (const nomodify byte) TT [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b23
    // [63] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  __b23_from___b2:
    // [63] phi (byte) compare::r#16 = (const nomodify byte) FF [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b23
    // compare::@23
  __b23:
    // [40] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  __b6_from___b23:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta.z ops
    lda #>ops_5
    sta.z ops+1
    jmp __b6
    // compare::@1
  __b1:
    // [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 -- vwuz1_ge_vwuz2_then_la1 
    lda.z w2+1
    cmp.z w1+1
    bne !+
    lda.z w2
    cmp.z w1
    beq __b24_from___b1
  !:
    bcc __b24_from___b1
    // [65] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  __b18_from___b1:
    jmp __b18
    // compare::@18
  __b18:
    // [66] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  __b24_from___b18:
    // [66] phi (byte) compare::r#17 = (const nomodify byte) TT [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b24
    // [66] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  __b24_from___b1:
    // [66] phi (byte) compare::r#17 = (const nomodify byte) FF [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b24
    // compare::@24
  __b24:
    // [40] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  __b6_from___b24:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta.z ops
    lda #>ops_6
    sta.z ops+1
    jmp __b6
    ops_1: .text "!="
    .byte 0
    ops_2: .text "=="
    .byte 0
    ops_3: .text ">="
    .byte 0
    ops_4: .text "> "
    .byte 0
    ops_5: .text "<="
    .byte 0
    ops_6: .text "< "
    .byte 0
}
  // print_char
// Print a single char
// print_char(byte zp($b) ch)
print_char: {
    .label ch = $b
    // [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [69] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [70] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($c) w)
print_uint: {
    .label w = $c
    // [72] (byte) print_uchar::b#0 ← > (word) print_uint::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [73] call print_uchar 
    // [77] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [77] phi (byte*) print_char_cursor#56 = (byte*) print_char_cursor#55 [phi:print_uint->print_uchar#0] -- register_copy 
    // [77] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [74] (byte) print_uchar::b#1 ← < (word) print_uint::w#2 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [75] call print_uchar 
    // [77] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [77] phi (byte*) print_char_cursor#56 = (byte*) print_char_cursor#10 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [77] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [76] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($10) b)
print_uchar: {
    .label __0 = $20
    .label __2 = $21
    .label b = $10
    // [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [79] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [80] call print_char 
  // Table of hexadecimal digits
    // [67] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#56 [phi:print_uchar->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [82] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [83] call print_char 
    // [67] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($11) str)
print_str: {
    .label str = $11
    // [86] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [86] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [90] call print_char 
    // [67] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [93] call memset 
    // [95] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [94] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $13
    // [96] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [96] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [98] return 
    rts
    // memset::@2
  __b2:
    // [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [100] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [96] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [96] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  words: .word $12, $3f34, $cfed

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::$8 ] (  [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::$8 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Statement [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8) [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::w1#0 ] (  [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::w1#0 ] { }  ) always clobbers reg byte a 
Statement [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::$9 ] (  [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::$9 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Statement [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::w2#0 ] (  [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::w2#0 ] { }  ) always clobbers reg byte a 
Statement [9] (word) compare::w1#0 ← (word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 ] (  [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::op#2 main::op#1 ]
Statement [10] (word) compare::w2#0 ← (word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 compare::w2#0 ] (  [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#108 print_line_cursor#0 ] (  [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#108 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28 [ print_line_cursor#0 print_char_cursor#10 ] ( print_ln:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#0 print_char_cursor#10 ] { }  ) always clobbers reg byte a 
Statement [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#10 ] ( print_ln:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#0 print_char_cursor#10 ] { }  ) always clobbers reg byte a 
Statement [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [41] (word) print_uint::w#0 ← (word) compare::w1#0 [ print_char_cursor#58 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#0 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Statement [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7 [ compare::w2#0 print_char_cursor#10 compare::r#10 print_str::str#1 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 print_char_cursor#10 compare::r#10 print_str::str#1 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } }  ) always clobbers reg byte a 
Statement [45] (word) print_uint::w#1 ← (word) compare::w2#0 [ print_char_cursor#10 compare::r#10 print_uint::w#1 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#10 compare::r#10 print_uint::w#1 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5 [ print_char_cursor#37 ] ( compare:12::print_char:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_char::ch#3 = print_char::ch#5 compare::r#10 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_char:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_uint:42::print_uchar:73::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_uchar::b#2 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#37 = print_char_cursor#55 print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:73::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_uchar::b#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uchar::b#2 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uchar::b#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:73::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_uint:46::print_uchar:73::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_str:44::print_char:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::r#10 print_str::str#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::op#2 main::op#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Removing always clobbered register reg byte y as potential for zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] ( compare:12::print_uint:42::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#37 = print_char_cursor#55 print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#10 print_uchar::$2 ] ( compare:12::print_uint:42::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_char_cursor#10 print_uchar::$2 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_uint:46::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_char_cursor#10 print_uchar::$2 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#10 print_uchar::$2 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_char_cursor#10 print_uchar::$2 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( compare:12::print_str:44 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::r#10 print_char_cursor#10 print_str::str#2 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_char::ch#0 print_str::str#2 ] ( compare:12::print_str:44 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::r#10 print_char_cursor#10 print_char::ch#0 print_str::str#2 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  ) always clobbers reg byte a reg byte y 
Statement [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:93 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:93 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::$8 ] (  [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::$8 ] { }  ) always clobbers reg byte a 
Statement [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8) [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::w1#0 ] (  [ main::i#2 print_char_cursor#74 main::s#7 print_line_cursor#30 main::w1#0 ] { }  ) always clobbers reg byte a 
Statement [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::$9 ] (  [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::$9 ] { }  ) always clobbers reg byte a 
Statement [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::w2#0 ] (  [ main::i#2 main::w1#0 main::j#2 print_char_cursor#64 main::s#5 print_line_cursor#28 main::w2#0 ] { }  ) always clobbers reg byte a 
Statement [9] (word) compare::w1#0 ← (word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 ] (  [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [10] (word) compare::w2#0 ← (word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 compare::w2#0 ] (  [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#58 main::s#3 print_line_cursor#21 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#108 print_line_cursor#0 ] (  [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#108 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28 [ print_line_cursor#0 print_char_cursor#10 ] ( print_ln:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#0 print_char_cursor#10 ] { }  ) always clobbers reg byte a 
Statement [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#10 ] ( print_ln:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#0 print_char_cursor#10 ] { }  ) always clobbers reg byte a 
Statement [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [41] (word) print_uint::w#0 ← (word) compare::w1#0 [ print_char_cursor#58 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#0 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } }  ) always clobbers reg byte a 
Statement [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7 [ compare::w2#0 print_char_cursor#10 compare::r#10 print_str::str#1 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 print_char_cursor#10 compare::r#10 print_str::str#1 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } }  ) always clobbers reg byte a 
Statement [45] (word) print_uint::w#1 ← (word) compare::w2#0 [ print_char_cursor#10 compare::r#10 print_uint::w#1 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#10 compare::r#10 print_uint::w#1 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 } }  ) always clobbers reg byte a 
Statement [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 [ print_char_cursor#58 compare::w1#0 compare::w2#0 ] ( compare:12 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#58 compare::w1#0 compare::w2#0 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } }  ) always clobbers reg byte a 
Statement [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5 [ print_char_cursor#37 ] ( compare:12::print_char:48 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_char::ch#3 = print_char::ch#5 compare::r#10 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_char:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_uint:42::print_uchar:73::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_uchar::b#2 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#37 = print_char_cursor#55 print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:73::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_uchar::b#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uchar::b#2 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75::print_char:80 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uchar::b#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:73::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_uint:46::print_uchar:73::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#37 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75::print_char:83 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_str:44::print_char:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::r#10 print_str::str#2 print_char_cursor#37 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  ) always clobbers reg byte y 
Statement [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] ( compare:12::print_uint:42::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#37 = print_char_cursor#55 print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#1 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_char_cursor#56 print_uchar::b#2 print_uchar::$0 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#1 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#10 print_uchar::$2 ] ( compare:12::print_uint:42::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_uint::w#2 print_char_cursor#10 print_uchar::$2 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 print_char_cursor#56 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  compare:12::print_uint:46::print_uchar:73 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_uint::w#2 print_char_cursor#10 print_uchar::$2 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:42::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::ops#7 compare::r#10 print_char_cursor#10 print_uchar::$2 ] { { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_uint::w#0 = print_uint::w#2 compare::w1#0 main::w1#0 } { print_char_cursor#55 = print_char_cursor#58 } { print_uchar::b#1 = print_uchar::b#2 } { print_char_cursor#10 = print_char_cursor#56 print_char_cursor#37 } { print_char::ch#2 = print_char::ch#5 } }  compare:12::print_uint:46::print_uchar:75 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::r#10 print_char_cursor#10 print_uchar::$2 ] { { compare::w1#0 = main::w1#0 } { compare::op#0 = main::op#2 } { print_uint::w#1 = print_uint::w#2 compare::w2#0 main::w2#0 } { print_char_cursor#10 = print_char_cursor#55 print_char_cursor#56 print_char_cursor#37 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( compare:12::print_str:44 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::r#10 print_char_cursor#10 print_str::str#2 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } }  ) always clobbers reg byte a reg byte y 
Statement [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#10 print_char::ch#0 print_str::str#2 ] ( compare:12::print_str:44 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#21 compare::w2#0 compare::r#10 print_char_cursor#10 print_char::ch#0 print_str::str#2 ] { { compare::w1#0 = main::w1#0 } { compare::w2#0 = main::w2#0 } { compare::op#0 = main::op#2 } { print_str::str#1 = compare::ops#7 } { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#37 } }  ) always clobbers reg byte a reg byte y 
Statement [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:1::memset:93 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( print_cls:1::memset:93 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::j#2 main::j#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ main::op#2 main::op#1 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ compare::ops#7 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:16 , reg byte x , 
Potential registers zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memset::dst#2 memset::dst#1 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ main::$8 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ main::w1#0 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ main::$9 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ main::w2#0 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ compare::w1#0 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ compare::w2#0 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ compare::op#0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ print_uchar::$0 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ print_uchar::$2 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 13,006,030,013: zp[1]:11 [ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [] 10,809,837,651.68: zp[2]:14 [ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ] 260,012,272.22: zp[2]:6 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ] 
Uplift Scope [print_str] 3,000,080,004.25: zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplift Scope [print_uchar] 2,000,002: zp[1]:32 [ print_uchar::$0 ] 2,000,002: zp[1]:33 [ print_uchar::$2 ] 950,005: zp[1]:16 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [print_uint] 113,338.67: zp[2]:12 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplift Scope [compare] 70,007: zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] 10,167.83: zp[1]:31 [ compare::op#0 ] 3,333.67: zp[2]:8 [ compare::ops#7 ] 2,536: zp[2]:27 [ compare::w1#0 ] 2,290.58: zp[2]:29 [ compare::w2#0 ] 
Uplift Scope [main] 2,302.43: zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 1,774.5: zp[1]:4 [ main::op#2 main::op#1 ] 202: zp[1]:24 [ main::$9 ] 170.44: zp[1]:3 [ main::j#2 main::j#1 ] 78.71: zp[2]:25 [ main::w2#0 ] 53.26: zp[2]:22 [ main::w1#0 ] 22: zp[1]:21 [ main::$8 ] 18.07: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [memset] 3,336.67: zp[2]:19 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 

Uplifting [print_char] best 951274 combination reg byte a [ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ] 
Uplifting [] best 951274 combination zp[2]:14 [ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ] zp[2]:6 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ] 
Uplifting [print_str] best 951274 combination zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplifting [print_uchar] best 951256 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [print_uint] best 951256 combination zp[2]:12 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplifting [compare] best 948238 combination zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] reg byte a [ compare::op#0 ] zp[2]:8 [ compare::ops#7 ] zp[2]:27 [ compare::w1#0 ] zp[2]:29 [ compare::w2#0 ] 
Uplifting [main] best 947798 combination zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] zp[1]:4 [ main::op#2 main::op#1 ] reg byte a [ main::$9 ] zp[1]:3 [ main::j#2 main::j#1 ] zp[2]:25 [ main::w2#0 ] zp[2]:22 [ main::w1#0 ] reg byte a [ main::$8 ] zp[1]:2 [ main::i#2 main::i#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [memset] best 947798 combination zp[2]:19 [ memset::dst#2 memset::dst#1 ] 
Uplifting [MOS6526_CIA] best 947798 combination 
Uplifting [MOS6569_VICII] best 947798 combination 
Uplifting [MOS6581_SID] best 947798 combination 
Uplifting [RADIX] best 947798 combination 
Uplifting [print_ln] best 947798 combination 
Uplifting [print_cls] best 947798 combination 
Attempting to uplift remaining variables inzp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Uplifting [compare] best 947798 combination zp[1]:10 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Uplifting [main] best 947798 combination zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::op#2 main::op#1 ]
Uplifting [main] best 947798 combination zp[1]:4 [ main::op#2 main::op#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::j#2 main::j#1 ]
Uplifting [main] best 947798 combination zp[1]:3 [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 947798 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:8 [ compare::ops#7 ] ] with [ zp[2]:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] ] with [ zp[2]:27 [ compare::w1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ main::w2#0 ] ] with [ zp[2]:29 [ compare::w2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:6 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ] ]
Allocated (was zp[2]:8) zp[2]:6 [ compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated (was zp[1]:10) zp[1]:8 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
Allocated (was zp[2]:12) zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 compare::w1#0 ]
Allocated (was zp[2]:14) zp[2]:11 [ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ]
Allocated (was zp[2]:19) zp[2]:13 [ memset::dst#2 memset::dst#1 print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ]
Allocated (was zp[2]:22) zp[2]:15 [ main::w1#0 ]
Allocated (was zp[2]:25) zp[2]:17 [ main::w2#0 compare::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_screen = $400
  .label print_line_cursor = $d
  .label print_char_cursor = $b
  // main
main: {
    .label w1 = $f
    .label w2 = $11
    .label s = 5
    .label op = 4
    .label j = 3
    .label i = 2
    // [1] call print_cls 
    // [92] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte*) print_line_cursor#30 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [2] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [2] phi (byte*) print_char_cursor#74 = (const byte*) print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [2] phi (byte*) print_line_cursor#30 = (byte*) print_line_cursor#25 [phi:main::@7->main::@1#0] -- register_copy 
    // [2] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
    // [2] phi (byte*) print_char_cursor#74 = (byte*) print_char_cursor#65 [phi:main::@7->main::@1#2] -- register_copy 
    // [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta.z w1
    lda words+1,y
    sta.z w1+1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#30 [phi:main::@1->main::@2#0] -- register_copy 
    // [5] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [5] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#74 [phi:main::@1->main::@2#2] -- register_copy 
    // [5] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b2
    // [5] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [5] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#25 [phi:main::@6->main::@2#0] -- register_copy 
    // [5] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
    // [5] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#65 [phi:main::@6->main::@2#2] -- register_copy 
    // [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z j
    asl
    // [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta.z w2
    lda words+1,y
    sta.z w2+1
    // [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [8] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#28 [phi:main::@2->main::@3#0] -- register_copy 
    // [8] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
    // [8] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 [phi:main::@2->main::@3#2] -- register_copy 
    // [8] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta.z op
    jmp __b3
    // [8] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [8] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#25 [phi:main::@4->main::@3#0] -- register_copy 
    // [8] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
    // [8] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#65 [phi:main::@4->main::@3#2] -- register_copy 
    // [8] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [9] (word) compare::w1#0 ← (word) main::w1#0 -- vwuz1=vwuz2 
    lda.z w1
    sta.z compare.w1
    lda.z w1+1
    sta.z compare.w1+1
    // [10] (word) compare::w2#0 ← (word) main::w2#0
    // [11] (byte) compare::op#0 ← (byte) main::op#2 -- vbuaa=vbuz1 
    lda.z op
    // [12] call compare 
    jsr compare
    jmp __b9
    // main::@9
  __b9:
    // [13] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [14] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z s
    bne __b4_from___b9
    // [15] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  __b5_from___b9:
    jmp __b5
    // main::@5
  __b5:
    // [16] call print_ln 
    // [26] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b10
    // main::@10
  __b10:
    // [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [18] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  __b4_from___b10:
    // [18] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#0 [phi:main::@10->main::@4#0] -- register_copy 
    // [18] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [18] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#108 [phi:main::@10->main::@4#2] -- register_copy 
    jmp __b4
    // [18] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [18] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#21 [phi:main::@9->main::@4#0] -- register_copy 
    // [18] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
    // [18] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#10 [phi:main::@9->main::@4#2] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [19] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuz1=_inc_vbuz1 
    inc.z op
    // [20] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z op
    bne __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [21] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [22] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z j
    bne __b2_from___b6
    jmp __b7
    // main::@7
  __b7:
    // [23] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [24] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b7
    // [25] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  __b8_from___b7:
  __b8_from___b8:
    jmp __b8
  // loop forever
    // main::@8
  __b8:
    jmp __b8_from___b8
}
  // print_ln
// Print a newline
print_ln: {
    // [27] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [27] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [30] return 
    rts
}
  // compare
// Compare two words using an operator
// compare(word zp(9) w1, word zp($11) w2, byte register(A) op)
compare: {
    .label w1 = 9
    .label w2 = $11
    .label ops = 6
    .label r = 8
    // [31] if((byte) compare::op#0==(byte) 0) goto compare::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    jmp __b7
    // compare::@7
  __b7:
    // [32] if((byte) compare::op#0==(byte) 1) goto compare::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2
    jmp __b8
    // compare::@8
  __b8:
    // [33] if((byte) compare::op#0==(byte) 2) goto compare::@3 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b3
    jmp __b9
    // compare::@9
  __b9:
    // [34] if((byte) compare::op#0==(byte) 3) goto compare::@4 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b4
    jmp __b10
    // compare::@10
  __b10:
    // [35] if((byte) compare::op#0==(byte) 4) goto compare::@5 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b5
    jmp __b11
    // compare::@11
  __b11:
    // [36] if((byte) compare::op#0!=(byte) 5) goto compare::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #5
    bne __b6_from___b11
    jmp __b12
    // compare::@12
  __b12:
    // [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 -- vwuz1_eq_vwuz2_then_la1 
    lda.z w1
    cmp.z w2
    bne !+
    lda.z w1+1
    cmp.z w2+1
    beq __b19_from___b12
  !:
    // [38] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
  __b13_from___b12:
    jmp __b13
    // compare::@13
  __b13:
    // [39] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
  __b19_from___b13:
    // [39] phi (byte) compare::r#12 = (const nomodify byte) TT [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b19
    // [39] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  __b19_from___b12:
    // [39] phi (byte) compare::r#12 = (const nomodify byte) FF [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b19
    // compare::@19
  __b19:
    // [40] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
  __b6_from___b19:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta.z ops
    lda #>ops_1
    sta.z ops+1
    jmp __b6
    // [40] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  __b6_from___b11:
    // [40] phi (byte) compare::r#10 = (const nomodify byte) FF [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // [40] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta.z ops
    lda #>0
    sta.z ops+1
    jmp __b6
    // compare::@6
  __b6:
    // [41] (word) print_uint::w#0 ← (word) compare::w1#0
    // [42] call print_uint 
    // [71] phi from compare::@6 to print_uint [phi:compare::@6->print_uint]
  print_uint_from___b6:
    // [71] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#58 [phi:compare::@6->print_uint#0] -- register_copy 
    // [71] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:compare::@6->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __b25
    // compare::@25
  __b25:
    // [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7
    // [44] call print_str 
    // [85] phi from compare::@25 to print_str [phi:compare::@25->print_str]
  print_str_from___b25:
    jsr print_str
    jmp __b26
    // compare::@26
  __b26:
    // [45] (word) print_uint::w#1 ← (word) compare::w2#0 -- vwuz1=vwuz2 
    lda.z w2
    sta.z print_uint.w
    lda.z w2+1
    sta.z print_uint.w+1
    // [46] call print_uint 
    // [71] phi from compare::@26 to print_uint [phi:compare::@26->print_uint]
  print_uint_from___b26:
    // [71] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#10 [phi:compare::@26->print_uint#0] -- register_copy 
    // [71] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:compare::@26->print_uint#1] -- register_copy 
    jsr print_uint
    jmp __b27
    // compare::@27
  __b27:
    // [47] (byte) print_char::ch#3 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda.z r
    // [48] call print_char 
    // [67] phi from compare::@27 to print_char [phi:compare::@27->print_char]
  print_char_from___b27:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:compare::@27->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
    // [49] phi from compare::@27 to compare::@28 [phi:compare::@27->compare::@28]
  __b28_from___b27:
    jmp __b28
    // compare::@28
  __b28:
    // [50] call print_char 
    // [67] phi from compare::@28 to print_char [phi:compare::@28->print_char]
  print_char_from___b28:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:compare::@28->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) ' ' [phi:compare::@28->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __breturn
    // compare::@return
  __breturn:
    // [51] return 
    rts
    // compare::@5
  __b5:
    // [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 -- vwuz1_neq_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne __b20_from___b5
    lda.z w1
    cmp.z w2
    bne __b20_from___b5
    // [53] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
  __b14_from___b5:
    jmp __b14
    // compare::@14
  __b14:
    // [54] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
  __b20_from___b14:
    // [54] phi (byte) compare::r#13 = (const nomodify byte) TT [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b20
    // [54] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  __b20_from___b5:
    // [54] phi (byte) compare::r#13 = (const nomodify byte) FF [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b20
    // compare::@20
  __b20:
    // [40] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
  __b6_from___b20:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta.z ops
    lda #>ops_2
    sta.z ops+1
    jmp __b6
    // compare::@4
  __b4:
    // [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 -- vwuz1_lt_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bcc __b21_from___b4
    bne !+
    lda.z w1
    cmp.z w2
    bcc __b21_from___b4
  !:
    // [56] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
  __b15_from___b4:
    jmp __b15
    // compare::@15
  __b15:
    // [57] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
  __b21_from___b15:
    // [57] phi (byte) compare::r#14 = (const nomodify byte) TT [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b21
    // [57] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  __b21_from___b4:
    // [57] phi (byte) compare::r#14 = (const nomodify byte) FF [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b21
    // compare::@21
  __b21:
    // [40] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
  __b6_from___b21:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta.z ops
    lda #>ops_3
    sta.z ops+1
    jmp __b6
    // compare::@3
  __b3:
    // [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 -- vwuz1_le_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne !+
    lda.z w1
    cmp.z w2
    beq __b22_from___b3
  !:
    bcc __b22_from___b3
    // [59] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
  __b16_from___b3:
    jmp __b16
    // compare::@16
  __b16:
    // [60] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
  __b22_from___b16:
    // [60] phi (byte) compare::r#15 = (const nomodify byte) TT [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b22
    // [60] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  __b22_from___b3:
    // [60] phi (byte) compare::r#15 = (const nomodify byte) FF [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b22
    // compare::@22
  __b22:
    // [40] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
  __b6_from___b22:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta.z ops
    lda #>ops_4
    sta.z ops+1
    jmp __b6
    // compare::@2
  __b2:
    // [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 -- vwuz1_gt_vwuz2_then_la1 
    lda.z w2+1
    cmp.z w1+1
    bcc __b23_from___b2
    bne !+
    lda.z w2
    cmp.z w1
    bcc __b23_from___b2
  !:
    // [62] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
  __b17_from___b2:
    jmp __b17
    // compare::@17
  __b17:
    // [63] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
  __b23_from___b17:
    // [63] phi (byte) compare::r#16 = (const nomodify byte) TT [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b23
    // [63] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  __b23_from___b2:
    // [63] phi (byte) compare::r#16 = (const nomodify byte) FF [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b23
    // compare::@23
  __b23:
    // [40] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  __b6_from___b23:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta.z ops
    lda #>ops_5
    sta.z ops+1
    jmp __b6
    // compare::@1
  __b1:
    // [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 -- vwuz1_ge_vwuz2_then_la1 
    lda.z w2+1
    cmp.z w1+1
    bne !+
    lda.z w2
    cmp.z w1
    beq __b24_from___b1
  !:
    bcc __b24_from___b1
    // [65] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
  __b18_from___b1:
    jmp __b18
    // compare::@18
  __b18:
    // [66] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
  __b24_from___b18:
    // [66] phi (byte) compare::r#17 = (const nomodify byte) TT [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b24
    // [66] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  __b24_from___b1:
    // [66] phi (byte) compare::r#17 = (const nomodify byte) FF [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    jmp __b24
    // compare::@24
  __b24:
    // [40] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  __b6_from___b24:
    // [40] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta.z ops
    lda #>ops_6
    sta.z ops+1
    jmp __b6
    ops_1: .text "!="
    .byte 0
    ops_2: .text "=="
    .byte 0
    ops_3: .text ">="
    .byte 0
    ops_4: .text "> "
    .byte 0
    ops_5: .text "<="
    .byte 0
    ops_6: .text "< "
    .byte 0
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [69] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [70] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(9) w)
print_uint: {
    .label w = 9
    // [72] (byte) print_uchar::b#0 ← > (word) print_uint::w#2 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [73] call print_uchar 
    // [77] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [77] phi (byte*) print_char_cursor#56 = (byte*) print_char_cursor#55 [phi:print_uint->print_uchar#0] -- register_copy 
    // [77] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [74] (byte) print_uchar::b#1 ← < (word) print_uint::w#2 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [75] call print_uchar 
    // [77] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [77] phi (byte*) print_char_cursor#56 = (byte*) print_char_cursor#10 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [77] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [76] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [79] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [80] call print_char 
  // Table of hexadecimal digits
    // [67] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#56 [phi:print_uchar->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [82] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [83] call print_char 
    // [67] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(6) str)
print_str: {
    .label str = 6
    // [86] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [86] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [90] call print_char 
    // [67] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [93] call memset 
    // [95] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [94] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $d
    // [96] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [96] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [98] return 
    rts
    // memset::@2
  __b2:
    // [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [100] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [96] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [96] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  words: .word $12, $3f34, $cfed

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b10
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b19
Removing instruction jmp __b6
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b27
Removing instruction jmp __b28
Removing instruction jmp __breturn
Removing instruction jmp __b14
Removing instruction jmp __b20
Removing instruction jmp __b15
Removing instruction jmp __b21
Removing instruction jmp __b16
Removing instruction jmp __b22
Removing instruction jmp __b17
Removing instruction jmp __b23
Removing instruction jmp __b18
Removing instruction jmp __b24
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b9 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from___b7 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b7:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b9:
Removing instruction print_ln_from___b5:
Removing instruction __b4_from___b9:
Removing instruction __b8_from___b7:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b13_from___b12:
Removing instruction __b19_from___b13:
Removing instruction __b6_from___b19:
Removing instruction print_uint_from___b6:
Removing instruction print_str_from___b25:
Removing instruction __b28_from___b27:
Removing instruction print_char_from___b28:
Removing instruction __b14_from___b5:
Removing instruction __b20_from___b14:
Removing instruction __b6_from___b20:
Removing instruction __b15_from___b4:
Removing instruction __b21_from___b15:
Removing instruction __b6_from___b21:
Removing instruction __b16_from___b3:
Removing instruction __b22_from___b16:
Removing instruction __b6_from___b22:
Removing instruction __b17_from___b2:
Removing instruction __b23_from___b17:
Removing instruction __b6_from___b23:
Removing instruction __b18_from___b1:
Removing instruction __b24_from___b18:
Removing instruction __b6_from___b24:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_cls_from_main:
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b9:
Removing instruction __b5:
Removing instruction __b10:
Removing instruction __b4_from___b10:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b25:
Removing instruction __b26:
Removing instruction print_uint_from___b26:
Removing instruction __b27:
Removing instruction print_char_from___b27:
Removing instruction __b28:
Removing instruction __breturn:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b8_from___b8 to __b5
Relabelling long label __b19_from___b12 to __b7
Relabelling long label __b6_from___b11 to __b8
Relabelling long label __b20_from___b5 to __b9
Relabelling long label __b21_from___b4 to __b10
Relabelling long label __b22_from___b3 to __b11
Relabelling long label __b23_from___b2 to __b12
Relabelling long label __b24_from___b1 to __b13
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Fixing long branch [115] beq __b1 to bne
Fixing long branch [119] beq __b2 to bne
Fixing long branch [123] beq __b3 to bne

FINAL SYMBOL TABLE
(const nomodify byte) FF = (byte) $57
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte) TT = (byte) $51
(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
(label) compare::@1
(label) compare::@10
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@19
(label) compare::@2
(label) compare::@20
(label) compare::@21
(label) compare::@22
(label) compare::@23
(label) compare::@24
(label) compare::@25
(label) compare::@26
(label) compare::@27
(label) compare::@28
(label) compare::@3
(label) compare::@4
(label) compare::@5
(label) compare::@6
(label) compare::@7
(label) compare::@8
(label) compare::@9
(label) compare::@return
(byte) compare::op
(byte) compare::op#0 reg byte a 10167.833333333334
(byte*) compare::ops
(const byte*) compare::ops#1 ops_1 = (byte*) "!="
(const byte*) compare::ops#2 ops_2 = (byte*) "=="
(const byte*) compare::ops#3 ops_3 = (byte*) ">="
(const byte*) compare::ops#4 ops_4 = (byte*) "> "
(const byte*) compare::ops#5 ops_5 = (byte*) "<="
(const byte*) compare::ops#6 ops_6 = (byte*) "< "
(byte*) compare::ops#7 ops zp[2]:6 3333.6666666666665
(byte) compare::r
(byte) compare::r#10 r zp[1]:8 10001.000000000002
(byte) compare::r#12 r zp[1]:8 10001.0
(byte) compare::r#13 r zp[1]:8 10001.0
(byte) compare::r#14 r zp[1]:8 10001.0
(byte) compare::r#15 r zp[1]:8 10001.0
(byte) compare::r#16 r zp[1]:8 10001.0
(byte) compare::r#17 r zp[1]:8 10001.0
(word) compare::w1
(word) compare::w1#0 w1 zp[2]:9 2536.0000000000005
(word) compare::w2
(word) compare::w2#0 w2 zp[2]:17 2290.5806451612902
(void()) main()
(byte~) main::$8 reg byte a 22.0
(byte~) main::$9 reg byte a 202.0
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::i
(byte) main::i#1 i zp[1]:2 16.5
(byte) main::i#2 i zp[1]:2 1.5714285714285716
(byte) main::j
(byte) main::j#1 j zp[1]:3 151.5
(byte) main::j#2 j zp[1]:3 18.9375
(byte) main::op
(byte) main::op#1 op zp[1]:4 1501.5
(byte) main::op#2 op zp[1]:4 273.0
(byte) main::s
(byte) main::s#1 s zp[1]:5 1501.5
(byte) main::s#10 s zp[1]:5 302.0
(byte) main::s#3 s zp[1]:5 420.59999999999997
(byte) main::s#5 s zp[1]:5 71.0
(byte) main::s#7 s zp[1]:5 7.333333333333333
(word) main::w1
(word) main::w1#0 w1 zp[2]:15 53.26315789473684
(word) main::w2
(word) main::w2#0 w2 zp[2]:17 78.71428571428571
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:13 2002.0
(byte*) memset::dst#2 dst zp[2]:13 1334.6666666666667
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 2.000000002E9
(byte) print_char::ch#1 reg byte a 2000002.0
(byte) print_char::ch#2 reg byte a 2000002.0
(byte) print_char::ch#3 reg byte a 20002.0
(byte) print_char::ch#5 reg byte a 1.1002010005E10
(byte*) print_char_cursor
(byte*) print_char_cursor#10 print_char_cursor zp[2]:11 3.0836475025000006E8
(byte*) print_char_cursor#108 print_char_cursor zp[2]:11 2002.0
(byte*) print_char_cursor#37 print_char_cursor zp[2]:11 1.05010100035E10
(byte*) print_char_cursor#55 print_char_cursor zp[2]:11 60001.5
(byte*) print_char_cursor#56 print_char_cursor zp[2]:11 400001.00000000006
(byte*) print_char_cursor#58 print_char_cursor zp[2]:11 370.1
(byte*) print_char_cursor#64 print_char_cursor zp[2]:11 71.0
(byte*) print_char_cursor#65 print_char_cursor zp[2]:11 445.0
(byte*) print_char_cursor#74 print_char_cursor zp[2]:11 7.333333333333333
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:13 6.0000401E7
(byte*) print_line_cursor#10 print_line_cursor zp[2]:13 2.00010003E8
(byte*) print_line_cursor#21 print_line_cursor zp[2]:13 1344.888888888889
(byte*) print_line_cursor#25 print_line_cursor zp[2]:13 445.0
(byte*) print_line_cursor#28 print_line_cursor zp[2]:13 71.0
(byte*) print_line_cursor#30 print_line_cursor zp[2]:13 7.333333333333333
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:6 2.000000002E9
(byte*) print_str::str#1 str zp[2]:6 55001.0
(byte*) print_str::str#2 str zp[2]:6 1.00002500125E9
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2000002.0
(byte~) print_uchar::$2 reg byte x 2000002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 200002.0
(byte) print_uchar::b#1 reg byte x 200002.0
(byte) print_uchar::b#2 reg byte x 550001.0
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:9 20002.0
(word) print_uint::w#1 w zp[2]:9 20002.0
(word) print_uint::w#2 w zp[2]:9 73334.66666666666
(const word*) words[]  = { (word) $12, (word) $3f34, (word) $cfed }

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ main::j#2 main::j#1 ]
zp[1]:4 [ main::op#2 main::op#1 ]
zp[1]:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
zp[2]:6 [ compare::ops#7 print_str::str#2 print_str::str#1 print_str::str#0 ]
zp[1]:8 [ compare::r#10 compare::r#12 compare::r#13 compare::r#14 compare::r#15 compare::r#16 compare::r#17 ]
reg byte a [ print_char::ch#5 print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 compare::w1#0 ]
zp[2]:11 [ print_char_cursor#55 print_char_cursor#37 print_char_cursor#58 print_char_cursor#64 print_char_cursor#74 print_char_cursor#65 print_char_cursor#10 print_char_cursor#108 print_char_cursor#56 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
zp[2]:13 [ memset::dst#2 memset::dst#1 print_line_cursor#10 print_line_cursor#21 print_line_cursor#28 print_line_cursor#30 print_line_cursor#25 print_line_cursor#0 ]
reg byte a [ main::$8 ]
zp[2]:15 [ main::w1#0 ]
reg byte a [ main::$9 ]
zp[2]:17 [ main::w2#0 compare::w2#0 ]
reg byte a [ compare::op#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 793615

  // File Comments
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_screen = $400
  .label print_line_cursor = $d
  .label print_char_cursor = $b
  // main
main: {
    .label w1 = $f
    .label w2 = $11
    .label s = 5
    .label op = 4
    .label j = 3
    .label i = 2
    // print_cls()
    // [1] call print_cls 
    // [92] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi (byte*) print_line_cursor#30 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [2] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [2] phi (byte*) print_char_cursor#74 = (const byte*) print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
    // [2] phi (byte*) print_line_cursor#30 = (byte*) print_line_cursor#25 [phi:main::@7->main::@1#0] -- register_copy 
    // [2] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
    // [2] phi (byte*) print_char_cursor#74 = (byte*) print_char_cursor#65 [phi:main::@7->main::@1#2] -- register_copy 
    // [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // w1 = words[i]
    // [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta.z w1
    lda words+1,y
    sta.z w1+1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [5] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#30 [phi:main::@1->main::@2#0] -- register_copy 
    // [5] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [5] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#74 [phi:main::@1->main::@2#2] -- register_copy 
    // [5] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // [5] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // [5] phi (byte*) print_line_cursor#28 = (byte*) print_line_cursor#25 [phi:main::@6->main::@2#0] -- register_copy 
    // [5] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
    // [5] phi (byte*) print_char_cursor#64 = (byte*) print_char_cursor#65 [phi:main::@6->main::@2#2] -- register_copy 
    // [5] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    // main::@2
  __b2:
    // w2 = words[j]
    // [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z j
    asl
    // [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda words,y
    sta.z w2
    lda words+1,y
    sta.z w2+1
    // [8] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [8] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#28 [phi:main::@2->main::@3#0] -- register_copy 
    // [8] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
    // [8] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#64 [phi:main::@2->main::@3#2] -- register_copy 
    // [8] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta.z op
    // [8] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [8] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#25 [phi:main::@4->main::@3#0] -- register_copy 
    // [8] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
    // [8] phi (byte*) print_char_cursor#58 = (byte*) print_char_cursor#65 [phi:main::@4->main::@3#2] -- register_copy 
    // [8] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    // main::@3
  __b3:
    // compare(w1,w2,op)
    // [9] (word) compare::w1#0 ← (word) main::w1#0 -- vwuz1=vwuz2 
    lda.z w1
    sta.z compare.w1
    lda.z w1+1
    sta.z compare.w1+1
    // [10] (word) compare::w2#0 ← (word) main::w2#0
    // [11] (byte) compare::op#0 ← (byte) main::op#2 -- vbuaa=vbuz1 
    lda.z op
    // [12] call compare 
    jsr compare
    // main::@9
    // if(++s==3)
    // [13] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [14] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z s
    bne __b4
    // [15] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
    // main::@5
    // print_ln()
    // [16] call print_ln 
    // [26] phi from main::@5 to print_ln [phi:main::@5->print_ln]
    jsr print_ln
    // main::@10
    // [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [18] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
    // [18] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#0 [phi:main::@10->main::@4#0] -- register_copy 
    // [18] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // [18] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#108 [phi:main::@10->main::@4#2] -- register_copy 
    // [18] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
    // [18] phi (byte*) print_line_cursor#25 = (byte*) print_line_cursor#21 [phi:main::@9->main::@4#0] -- register_copy 
    // [18] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
    // [18] phi (byte*) print_char_cursor#65 = (byte*) print_char_cursor#10 [phi:main::@9->main::@4#2] -- register_copy 
    // main::@4
  __b4:
    // for( byte op: 0..5 )
    // [19] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuz1=_inc_vbuz1 
    inc.z op
    // [20] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z op
    bne __b3
    // main::@6
    // for( byte j: 0..2)
    // [21] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [22] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z j
    bne __b2
    // main::@7
    // for( byte i: 0..2)
    // [23] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [24] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp.z i
    bne __b1
    // [25] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  __b5:
  // loop forever
    // main::@8
    jmp __b5
}
  // print_ln
// Print a newline
print_ln: {
    // [27] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [27] phi (byte*) print_line_cursor#10 = (byte*) print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [30] return 
    rts
}
  // compare
// Compare two words using an operator
// compare(word zp(9) w1, word zp($11) w2, byte register(A) op)
compare: {
    .label w1 = 9
    .label w2 = $11
    .label ops = 6
    .label r = 8
    // if(op==0)
    // [31] if((byte) compare::op#0==(byte) 0) goto compare::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    bne !__b1+
    jmp __b1
  !__b1:
    // compare::@7
    // if(op==1)
    // [32] if((byte) compare::op#0==(byte) 1) goto compare::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    bne !__b2+
    jmp __b2
  !__b2:
    // compare::@8
    // if(op==2)
    // [33] if((byte) compare::op#0==(byte) 2) goto compare::@3 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    bne !__b3+
    jmp __b3
  !__b3:
    // compare::@9
    // if(op==3)
    // [34] if((byte) compare::op#0==(byte) 3) goto compare::@4 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b4
    // compare::@10
    // if(op==4)
    // [35] if((byte) compare::op#0==(byte) 4) goto compare::@5 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b5
    // compare::@11
    // if(op==5)
    // [36] if((byte) compare::op#0!=(byte) 5) goto compare::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #5
    bne __b8
    // compare::@12
    // if(w1!=w2)
    // [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19 -- vwuz1_eq_vwuz2_then_la1 
    lda.z w1
    cmp.z w2
    bne !+
    lda.z w1+1
    cmp.z w2+1
    beq __b7
  !:
    // [38] phi from compare::@12 to compare::@13 [phi:compare::@12->compare::@13]
    // compare::@13
    // [39] phi from compare::@13 to compare::@19 [phi:compare::@13->compare::@19]
    // [39] phi (byte) compare::r#12 = (const nomodify byte) TT [phi:compare::@13->compare::@19#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b19
    // [39] phi from compare::@12 to compare::@19 [phi:compare::@12->compare::@19]
  __b7:
    // [39] phi (byte) compare::r#12 = (const nomodify byte) FF [phi:compare::@12->compare::@19#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@19
  __b19:
    // [40] phi from compare::@19 to compare::@6 [phi:compare::@19->compare::@6]
    // [40] phi (byte) compare::r#10 = (byte) compare::r#12 [phi:compare::@19->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#1 [phi:compare::@19->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta.z ops
    lda #>ops_1
    sta.z ops+1
    jmp __b6
    // [40] phi from compare::@11 to compare::@6 [phi:compare::@11->compare::@6]
  __b8:
    // [40] phi (byte) compare::r#10 = (const nomodify byte) FF [phi:compare::@11->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // [40] phi (byte*) compare::ops#7 = (byte*) 0 [phi:compare::@11->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta.z ops
    sta.z ops+1
    // compare::@6
  __b6:
    // print_uint(w1)
    // [41] (word) print_uint::w#0 ← (word) compare::w1#0
    // [42] call print_uint 
    // [71] phi from compare::@6 to print_uint [phi:compare::@6->print_uint]
    // [71] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#58 [phi:compare::@6->print_uint#0] -- register_copy 
    // [71] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:compare::@6->print_uint#1] -- register_copy 
    jsr print_uint
    // compare::@25
    // print_str(ops)
    // [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7
    // [44] call print_str 
    // [85] phi from compare::@25 to print_str [phi:compare::@25->print_str]
    jsr print_str
    // compare::@26
    // print_uint(w2)
    // [45] (word) print_uint::w#1 ← (word) compare::w2#0 -- vwuz1=vwuz2 
    lda.z w2
    sta.z print_uint.w
    lda.z w2+1
    sta.z print_uint.w+1
    // [46] call print_uint 
    // [71] phi from compare::@26 to print_uint [phi:compare::@26->print_uint]
    // [71] phi (byte*) print_char_cursor#55 = (byte*) print_char_cursor#10 [phi:compare::@26->print_uint#0] -- register_copy 
    // [71] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:compare::@26->print_uint#1] -- register_copy 
    jsr print_uint
    // compare::@27
    // print_char(r)
    // [47] (byte) print_char::ch#3 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda.z r
    // [48] call print_char 
    // [67] phi from compare::@27 to print_char [phi:compare::@27->print_char]
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:compare::@27->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:compare::@27->print_char#1] -- register_copy 
    jsr print_char
    // [49] phi from compare::@27 to compare::@28 [phi:compare::@27->compare::@28]
    // compare::@28
    // print_char(' ')
    // [50] call print_char 
    // [67] phi from compare::@28 to print_char [phi:compare::@28->print_char]
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:compare::@28->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) ' ' [phi:compare::@28->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // compare::@return
    // }
    // [51] return 
    rts
    // compare::@5
  __b5:
    // if(w1==w2)
    // [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20 -- vwuz1_neq_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne __b9
    lda.z w1
    cmp.z w2
    bne __b9
    // [53] phi from compare::@5 to compare::@14 [phi:compare::@5->compare::@14]
    // compare::@14
    // [54] phi from compare::@14 to compare::@20 [phi:compare::@14->compare::@20]
    // [54] phi (byte) compare::r#13 = (const nomodify byte) TT [phi:compare::@14->compare::@20#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b20
    // [54] phi from compare::@5 to compare::@20 [phi:compare::@5->compare::@20]
  __b9:
    // [54] phi (byte) compare::r#13 = (const nomodify byte) FF [phi:compare::@5->compare::@20#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@20
  __b20:
    // [40] phi from compare::@20 to compare::@6 [phi:compare::@20->compare::@6]
    // [40] phi (byte) compare::r#10 = (byte) compare::r#13 [phi:compare::@20->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#2 [phi:compare::@20->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta.z ops
    lda #>ops_2
    sta.z ops+1
    jmp __b6
    // compare::@4
  __b4:
    // if(w1>=w2)
    // [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21 -- vwuz1_lt_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bcc __b10
    bne !+
    lda.z w1
    cmp.z w2
    bcc __b10
  !:
    // [56] phi from compare::@4 to compare::@15 [phi:compare::@4->compare::@15]
    // compare::@15
    // [57] phi from compare::@15 to compare::@21 [phi:compare::@15->compare::@21]
    // [57] phi (byte) compare::r#14 = (const nomodify byte) TT [phi:compare::@15->compare::@21#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b21
    // [57] phi from compare::@4 to compare::@21 [phi:compare::@4->compare::@21]
  __b10:
    // [57] phi (byte) compare::r#14 = (const nomodify byte) FF [phi:compare::@4->compare::@21#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@21
  __b21:
    // [40] phi from compare::@21 to compare::@6 [phi:compare::@21->compare::@6]
    // [40] phi (byte) compare::r#10 = (byte) compare::r#14 [phi:compare::@21->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#3 [phi:compare::@21->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta.z ops
    lda #>ops_3
    sta.z ops+1
    jmp __b6
    // compare::@3
  __b3:
    // if(w1>w2)
    // [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22 -- vwuz1_le_vwuz2_then_la1 
    lda.z w1+1
    cmp.z w2+1
    bne !+
    lda.z w1
    cmp.z w2
    beq __b11
  !:
    bcc __b11
    // [59] phi from compare::@3 to compare::@16 [phi:compare::@3->compare::@16]
    // compare::@16
    // [60] phi from compare::@16 to compare::@22 [phi:compare::@16->compare::@22]
    // [60] phi (byte) compare::r#15 = (const nomodify byte) TT [phi:compare::@16->compare::@22#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b22
    // [60] phi from compare::@3 to compare::@22 [phi:compare::@3->compare::@22]
  __b11:
    // [60] phi (byte) compare::r#15 = (const nomodify byte) FF [phi:compare::@3->compare::@22#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@22
  __b22:
    // [40] phi from compare::@22 to compare::@6 [phi:compare::@22->compare::@6]
    // [40] phi (byte) compare::r#10 = (byte) compare::r#15 [phi:compare::@22->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#4 [phi:compare::@22->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta.z ops
    lda #>ops_4
    sta.z ops+1
    jmp __b6
    // compare::@2
  __b2:
    // if(w1<=w2)
    // [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23 -- vwuz1_gt_vwuz2_then_la1 
    lda.z w2+1
    cmp.z w1+1
    bcc __b12
    bne !+
    lda.z w2
    cmp.z w1
    bcc __b12
  !:
    // [62] phi from compare::@2 to compare::@17 [phi:compare::@2->compare::@17]
    // compare::@17
    // [63] phi from compare::@17 to compare::@23 [phi:compare::@17->compare::@23]
    // [63] phi (byte) compare::r#16 = (const nomodify byte) TT [phi:compare::@17->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b23
    // [63] phi from compare::@2 to compare::@23 [phi:compare::@2->compare::@23]
  __b12:
    // [63] phi (byte) compare::r#16 = (const nomodify byte) FF [phi:compare::@2->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@23
  __b23:
    // [40] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
    // [40] phi (byte) compare::r#10 = (byte) compare::r#16 [phi:compare::@23->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#5 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta.z ops
    lda #>ops_5
    sta.z ops+1
    jmp __b6
    // compare::@1
  __b1:
    // if(w1<w2)
    // [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24 -- vwuz1_ge_vwuz2_then_la1 
    lda.z w2+1
    cmp.z w1+1
    bne !+
    lda.z w2
    cmp.z w1
    beq __b13
  !:
    bcc __b13
    // [65] phi from compare::@1 to compare::@18 [phi:compare::@1->compare::@18]
    // compare::@18
    // [66] phi from compare::@18 to compare::@24 [phi:compare::@18->compare::@24]
    // [66] phi (byte) compare::r#17 = (const nomodify byte) TT [phi:compare::@18->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta.z r
    jmp __b24
    // [66] phi from compare::@1 to compare::@24 [phi:compare::@1->compare::@24]
  __b13:
    // [66] phi (byte) compare::r#17 = (const nomodify byte) FF [phi:compare::@1->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta.z r
    // compare::@24
  __b24:
    // [40] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
    // [40] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@24->compare::@6#0] -- register_copy 
    // [40] phi (byte*) compare::ops#7 = (const byte*) compare::ops#6 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta.z ops
    lda #>ops_6
    sta.z ops+1
    jmp __b6
    ops_1: .text "!="
    .byte 0
    ops_2: .text "=="
    .byte 0
    ops_3: .text ">="
    .byte 0
    ops_4: .text "> "
    .byte 0
    ops_5: .text "<="
    .byte 0
    ops_6: .text "< "
    .byte 0
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [69] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#37 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [70] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(9) w)
print_uint: {
    .label w = 9
    // print_uchar(>w)
    // [72] (byte) print_uchar::b#0 ← > (word) print_uint::w#2 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [73] call print_uchar 
    // [77] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [77] phi (byte*) print_char_cursor#56 = (byte*) print_char_cursor#55 [phi:print_uint->print_uchar#0] -- register_copy 
    // [77] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [74] (byte) print_uchar::b#1 ← < (word) print_uint::w#2 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [75] call print_uchar 
    // [77] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [77] phi (byte*) print_char_cursor#56 = (byte*) print_char_cursor#10 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    // [77] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#1] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [76] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [79] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [80] call print_char 
  // Table of hexadecimal digits
    // [67] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#56 [phi:print_uchar->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#1 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [82] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [83] call print_char 
    // [67] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [84] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(6) str)
print_str: {
    .label str = 6
    // [86] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [86] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [88] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [90] call print_char 
    // [67] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [67] phi (byte*) print_char_cursor#37 = (byte*) print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [67] phi (byte) print_char::ch#5 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [93] call memset 
    // [95] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [94] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $d
    // [96] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [96] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [98] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [100] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [96] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [96] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  words: .word $12, $3f34, $cfed

