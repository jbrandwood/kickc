Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  screen[0] = 'a'
  main::$0 = call != 0
  main::$1 = ! main::$0
  if(main::$1) goto main::@return
  to:main::@1
main::@1: scope:[main]  from main
  call proc 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main main::@2
  return 
  to:@return

void proc()
proc: scope:[proc]  from main::@1
  screen[1] = 'a'
  proc::$0 = screen[1] != 0
  proc::$1 = ! proc::$0
  if(proc::$1) goto proc::@return
  to:proc::@1
proc::@1: scope:[proc]  from proc
  screen[2] = 'a'
  to:proc::@return
proc::@return: scope:[proc]  from proc proc::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
const byte call = 0
void main()
bool~ main::$0
bool~ main::$1
void proc()
bool~ proc::$0
bool~ proc::$1
const byte* screen = (byte*)$400

Adding number conversion cast (unumber) 0 in screen[0] = 'a'
Adding number conversion cast (unumber) 0 in main::$0 = call != 0
Adding number conversion cast (unumber) 1 in screen[1] = 'a'
Adding number conversion cast (unumber) 0 in proc::$0 = screen[1] != 0
Adding number conversion cast (unumber) 1 in proc::$0 = screen[1] != (unumber)0
Adding number conversion cast (unumber) 2 in screen[2] = 'a'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [2] main::$1 = call == 0 from [1] main::$0 = call != 0
Inversing boolean not [8] proc::$1 = screen[1] == 0 from [7] proc::$0 = screen[1] != 0
Successful SSA optimization Pass2UnaryNotSimplification
Simple Condition main::$1 [2] if(call==0) goto main::@return
Simple Condition proc::$1 [7] if(screen[1]==0) goto proc::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
if() condition always true - replacing block destination [2] if(call==0) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero screen in [0] screen[0] = 'a'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant call
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@1
Removing unused block main::@2
Removing unused procedure proc
Removing unused procedure block proc
Removing unused procedure block proc::@1
Removing unused procedure block proc::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *screen = 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *screen = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that a procedure that is never called, but requires static analysis is correctly eliminated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // [0] *screen = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests that a procedure that is never called, but requires static analysis is correctly eliminated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // screen[0] = 'a'
    // [0] *screen = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

