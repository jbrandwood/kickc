Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@8

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::screen#0 ← ((byte*)) (number) $400
  (byte) main::c#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::c#3 ← phi( main/(byte) main::c#0 main::@4/(byte) main::c#1 )
  (bool~) main::$0 ← (byte) main::c#3 < (number) $64
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#3 )
  *((byte*) main::screen#0 + (byte) main::c#4) ← (byte) '*'
  (number~) main::$1 ← (byte) main::c#4 & (number) 4
  (bool~) main::$2 ← (number~) main::$1 == (number) 0
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@4
  to:main::@7
main::@4: scope:[main]  from main::@2 main::@7
  (byte) main::c#5 ← phi( main::@2/(byte) main::c#4 main::@7/(byte) main::c#2 )
  (byte) main::c#1 ← ++ (byte) main::c#5
  to:main::@1
main::@7: scope:[main]  from main::@2
  (byte) main::c#6 ← phi( main::@2/(byte) main::c#4 )
  (byte) main::c#2 ← (byte) main::c#6 + (number) 5
  to:main::@4
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(number~) main::$1
(bool~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@7
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c#4
(byte) main::c#5
(byte) main::c#6
(byte*) main::screen
(byte*) main::screen#0

Adding number conversion cast (unumber) 0 in (byte) main::c#0 ← (number) 0
Adding number conversion cast (unumber) $64 in (bool~) main::$0 ← (byte) main::c#3 < (number) $64
Adding number conversion cast (unumber) 4 in (number~) main::$1 ← (byte) main::c#4 & (number) 4
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::c#4 & (unumber)(number) 4
Adding number conversion cast (unumber) 0 in (bool~) main::$2 ← (unumber~) main::$1 == (number) 0
Adding number conversion cast (unumber) 5 in (byte) main::c#2 ← (byte) main::c#6 + (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::screen#0 ← (byte*)(number) $400
Inlining cast (byte) main::c#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $64
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $64
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::c#4 & (byte) 4
Inversing boolean not [9] (bool~) main::$3 ← (byte~) main::$1 != (byte) 0 from [8] (bool~) main::$2 ← (byte~) main::$1 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::c#3 = (byte) main::c#4 (byte) main::c#6 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [4] if((byte) main::c#3<(byte) $64) goto main::@2
Simple Condition (bool~) main::$3 [10] if((byte~) main::$1!=(byte) 0) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::screen#0 = (byte*) 1024
Constant (const byte) main::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::c#0
Constant inlined main::c#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@9(between main::@2 and main::@4)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [13] main::c#9 ← main::c#2
Coalesced [16] main::c#7 ← main::c#1
Coalesced [17] main::c#8 ← main::c#3
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@9
Renumbering block main::@4 to main::@3
Renumbering block main::@7 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::c#3 ← phi( main/(byte) 0 main::@3/(byte) main::c#1 )
  [6] if((byte) main::c#3<(byte) $64) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] *((const byte*) main::screen#0 + (byte) main::c#3) ← (byte) '*'
  [9] (byte~) main::$1 ← (byte) main::c#3 & (byte) 4
  [10] if((byte~) main::$1!=(byte) 0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [11] (byte) main::c#2 ← (byte) main::c#3 + (byte) 5
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [12] (byte) main::c#5 ← phi( main::@2/(byte) main::c#3 main::@4/(byte) main::c#2 )
  [13] (byte) main::c#1 ← ++ (byte) main::c#5
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$1 22.0
(byte) main::c
(byte) main::c#1 22.0
(byte) main::c#2 22.0
(byte) main::c#3 13.2
(byte) main::c#5 33.0
(byte*) main::screen

Initial phi equivalence classes
[ main::c#5 main::c#3 main::c#1 main::c#2 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Complete equivalence classes
[ main::c#5 main::c#3 main::c#1 main::c#2 ]
[ main::$1 ]
Allocated zp ZP_BYTE:2 [ main::c#5 main::c#3 main::c#1 main::c#2 ]
Allocated zp ZP_BYTE:3 [ main::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502
  // File Comments
// Test the 6502 CPU without support for illegal opcodes
// By a program that normally uses illegal opcodes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label _1 = 3
    .label c = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::c#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp b1
    // main::@1
  b1:
    // [6] if((byte) main::c#3<(byte) $64) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$64
    bcc b2
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
    // main::@2
  b2:
    // [8] *((const byte*) main::screen#0 + (byte) main::c#3) ← (byte) '*' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'*'
    ldy.z c
    sta screen,y
    // [9] (byte~) main::$1 ← (byte) main::c#3 & (byte) 4 -- vbuz1=vbuz2_band_vbuc1 
    lda #4
    and.z c
    sta.z _1
    // [10] if((byte~) main::$1!=(byte) 0) goto main::@3 -- vbuz1_neq_0_then_la1 
    lda.z _1
    cmp #0
    bne b3_from_b2
    jmp b4
    // main::@4
  b4:
    // [11] (byte) main::c#2 ← (byte) main::c#3 + (byte) 5 -- vbuz1=vbuz1_plus_vbuc1 
    lda #5
    clc
    adc.z c
    sta.z c
    // [12] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
  b3_from_b2:
  b3_from_b4:
    // [12] phi (byte) main::c#5 = (byte) main::c#3 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    jmp b3
    // main::@3
  b3:
    // [13] (byte) main::c#1 ← ++ (byte) main::c#5 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
    // [5] phi (byte) main::c#3 = (byte) main::c#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] *((const byte*) main::screen#0 + (byte) main::c#3) ← (byte) '*' [ main::c#3 ] ( main:2 [ main::c#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::c#5 main::c#3 main::c#1 main::c#2 ]
Statement [9] (byte~) main::$1 ← (byte) main::c#3 & (byte) 4 [ main::c#3 main::$1 ] ( main:2 [ main::c#3 main::$1 ] ) always clobbers reg byte a 
Statement [11] (byte) main::c#2 ← (byte) main::c#3 + (byte) 5 [ main::c#2 ] ( main:2 [ main::c#2 ] ) always clobbers reg byte a 
Statement [8] *((const byte*) main::screen#0 + (byte) main::c#3) ← (byte) '*' [ main::c#3 ] ( main:2 [ main::c#3 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$1 ← (byte) main::c#3 & (byte) 4 [ main::c#3 main::$1 ] ( main:2 [ main::c#3 main::$1 ] ) always clobbers reg byte a 
Statement [11] (byte) main::c#2 ← (byte) main::c#3 + (byte) 5 [ main::c#2 ] ( main:2 [ main::c#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::c#5 main::c#3 main::c#1 main::c#2 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 90.2: zp ZP_BYTE:2 [ main::c#5 main::c#3 main::c#1 main::c#2 ] 22: zp ZP_BYTE:3 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 488 combination reg byte x [ main::c#5 main::c#3 main::c#1 main::c#2 ] reg byte a [ main::$1 ] 
Uplifting [] best 488 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the 6502 CPU without support for illegal opcodes
// By a program that normally uses illegal opcodes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::c#3 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // main::@1
  b1:
    // [6] if((byte) main::c#3<(byte) $64) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$64
    bcc b2
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
    // main::@2
  b2:
    // [8] *((const byte*) main::screen#0 + (byte) main::c#3) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // [9] (byte~) main::$1 ← (byte) main::c#3 & (byte) 4 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #4
    // [10] if((byte~) main::$1!=(byte) 0) goto main::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b3_from_b2
    jmp b4
    // main::@4
  b4:
    // [11] (byte) main::c#2 ← (byte) main::c#3 + (byte) 5 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #5
    tax
    // [12] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
  b3_from_b2:
  b3_from_b4:
    // [12] phi (byte) main::c#5 = (byte) main::c#3 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    jmp b3
    // main::@3
  b3:
    // [13] (byte) main::c#1 ← ++ (byte) main::c#5 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
    // [5] phi (byte) main::c#3 = (byte) main::c#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b3_from_b2 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b3_from_b2:
Removing instruction b3_from_b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$1 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x 22.0
(byte) main::c#2 reg byte x 22.0
(byte) main::c#3 reg byte x 13.2
(byte) main::c#5 reg byte x 33.0
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*) 1024

reg byte x [ main::c#5 main::c#3 main::c#1 main::c#2 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 356

  // File Comments
// Test the 6502 CPU without support for illegal opcodes
// By a program that normally uses illegal opcodes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::c#3 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  b1:
    // while(c<100)
    // [6] if((byte) main::c#3<(byte) $64) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$64
    bcc b2
    // main::@return
    // }
    // [7] return 
    rts
    // main::@2
  b2:
    // screen[c] = '*'
    // [8] *((const byte*) main::screen#0 + (byte) main::c#3) ← (byte) '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // c&4
    // [9] (byte~) main::$1 ← (byte) main::c#3 & (byte) 4 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #4
    // if((c&4)==0)
    // [10] if((byte~) main::$1!=(byte) 0) goto main::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b3
    // main::@4
    // c+=5
    // [11] (byte) main::c#2 ← (byte) main::c#3 + (byte) 5 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #5
    tax
    // [12] phi from main::@2 main::@4 to main::@3 [phi:main::@2/main::@4->main::@3]
    // [12] phi (byte) main::c#5 = (byte) main::c#3 [phi:main::@2/main::@4->main::@3#0] -- register_copy 
    // main::@3
  b3:
    // c++;
    // [13] (byte) main::c#1 ← ++ (byte) main::c#5 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [5] phi (byte) main::c#3 = (byte) main::c#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
}
  // File Data

