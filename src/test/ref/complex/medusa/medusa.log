Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from main main::@3
  memcpy::num#2 = phi( main/memcpy::num#0, main::@3/memcpy::num#1 )
  memcpy::destination#2 = phi( main/memcpy::destination#0, main::@3/memcpy::destination#1 )
  memcpy::source#2 = phi( main/memcpy::source#0, main::@3/memcpy::source#1 )
  memcpy::src#0 = ((byte*)) memcpy::source#2
  memcpy::dst#0 = ((byte*)) memcpy::destination#2
  memcpy::$2 = (byte*)memcpy::source#2
  memcpy::$0 = memcpy::$2 + memcpy::num#2
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#4 = phi( memcpy/memcpy::destination#2, memcpy::@2/memcpy::destination#5 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#5 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#3 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::return#0 = memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#4 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#4
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  *BG_COLOR = BLACK
  memcpy::destination#0 = (void*)SCREEN
  memcpy::source#0 = (void*)MEDUSA_SCREEN
  memcpy::num#0 = $3e8
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:main::@3
main::@3: scope:[main]  from main
  memcpy::destination#1 = (void*)COLS
  memcpy::source#1 = (void*)MEDUSA_COLORS
  memcpy::num#1 = $3e8
  call memcpy 
  memcpy::return#3 = memcpy::return#1
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::$2 = SCREEN + $3e7
  *main::$2 = *main::$2 ^ $e
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BG_COLOR = (byte*)$d021
const nomodify byte BLACK = 0
const nomodify byte* COLS = (byte*)$d800
const byte* MEDUSA_COLORS[]  = kickasm {{ .var fileCols = LoadBinary("medusac.prg", BF_C64FILE)
    .fill fileCols.getSize(), fileCols.get(i)
 }}
const byte* MEDUSA_SCREEN[$3e8]  = kickasm {{ .var fileScreen = LoadBinary("medusas.prg", BF_C64FILE)
    .fill fileScreen.getSize(), fileScreen.get(i)
 }}
const byte* SCREEN = (byte*)$400
void __start()
void main()
byte*~ main::$2
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
void* memcpy::destination#5
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
word memcpy::num#2
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::return#4
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2

Adding number conversion cast (unumber) $3e8 in memcpy::num#0 = $3e8
Adding number conversion cast (unumber) $3e8 in memcpy::num#1 = $3e8
Adding number conversion cast (unumber) $3e7 in main::$2 = SCREEN + $3e7
Adding number conversion cast (unumber) $e in *main::$2 = *main::$2 ^ $e
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (byte*)memcpy::source#2
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#2
Inlining cast memcpy::num#0 = (unumber)$3e8
Inlining cast memcpy::num#1 = (unumber)$3e8
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e7
Simplifying constant integer cast $e
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $3e8
Finalized unsigned number type $3e8
Finalized unsigned number type $3e7
Finalized unsigned number type $e
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#3 memcpy::destination#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [7] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [13] memcpy::destination#0 = (void*)SCREEN
Constant right-side identified [24] main::$2 = SCREEN + $3e7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memcpy::destination#0 = (void*)SCREEN
Constant memcpy::source#0 = (void*)MEDUSA_SCREEN
Constant memcpy::num#0 = $3e8
Constant memcpy::destination#1 = (void*)COLS
Constant memcpy::source#1 = (void*)MEDUSA_COLORS
Constant memcpy::num#1 = $3e8
Constant main::$2 = SCREEN+$3e7
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [23] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused variable memcpy::return#2 and assignment [13] memcpy::return#2 = memcpy::destination#2
Eliminating unused variable memcpy::return#3 and assignment [15] memcpy::return#3 = memcpy::destination#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining Noop Cast [1] memcpy::src#0 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] memcpy::dst#0 = (byte*)memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] memcpy::$2 = (byte*)memcpy::source#2 keeping memcpy::source#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings memcpy::destination#0
Inlining constant with var siblings memcpy::source#0
Inlining constant with var siblings memcpy::num#0
Inlining constant with var siblings memcpy::destination#1
Inlining constant with var siblings memcpy::source#1
Inlining constant with var siblings memcpy::num#1
Constant inlined memcpy::num#1 = $3e8
Constant inlined memcpy::num#0 = $3e8
Constant inlined memcpy::source#1 = (void*)MEDUSA_COLORS
Constant inlined main::$2 = SCREEN+$3e7
Constant inlined memcpy::destination#0 = (void*)SCREEN
Constant inlined memcpy::destination#1 = (void*)COLS
Constant inlined memcpy::source#0 = (void*)MEDUSA_SCREEN
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values memcpy::num#2 $3e8
Successful SSA optimization Pass2IdenticalPhiElimination
Finalized unsigned number type $3e8
Successful SSA optimization Pass2FinalizeAllNumbers
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of memcpy::@3
CALL GRAPH
Calls in [main] to memcpy:1 memcpy:3 

Created 4 initial phi equivalence classes
Coalesced [18] memcpy::src#5 = memcpy::src#1
Coalesced [19] memcpy::dst#5 = memcpy::dst#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@1
Culled Empty Block label memcpy::@3
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *BG_COLOR = BLACK
  [1] call memcpy 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call memcpy 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@2
  [4] *(SCREEN+$3e7) = *(SCREEN+$3e7) ^ $e
  to:main::@1

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from main main::@2
  [5] memcpy::destination#2 = phi( main/(void*)SCREEN, main::@2/(void*)COLS )
  [5] memcpy::source#2 = phi( main/(void*)MEDUSA_SCREEN, main::@2/(void*)MEDUSA_COLORS )
  [6] memcpy::src_end#0 = (byte*)memcpy::source#2 + $3e8
  [7] memcpy::src#4 = (byte*)memcpy::source#2
  [8] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [9] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [9] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [10] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [11] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [12] *memcpy::dst#2 = *memcpy::src#2
  [13] memcpy::dst#1 = ++ memcpy::dst#2
  [14] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1


VARIABLE REGISTER WEIGHTS
void main()
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2
byte* memcpy::dst
byte* memcpy::dst#1 101.0
byte* memcpy::dst#2 104.66666666666666
byte* memcpy::dst#4 22.0
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#1 202.0
byte* memcpy::src#2 103.75
byte* memcpy::src#4 11.0
byte* memcpy::src_end
byte* memcpy::src_end#0 14.0

Initial phi equivalence classes
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Complete equivalence classes
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memcpy::src_end#0 ]
Allocated zp[2]:2 [ memcpy::source#2 ]
Allocated zp[2]:4 [ memcpy::destination#2 ]
Allocated zp[2]:6 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:8 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:10 [ memcpy::src_end#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *BG_COLOR = BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *(SCREEN+$3e7) = *(SCREEN+$3e7) ^ $e [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] memcpy::src_end#0 = (byte*)memcpy::source#2 + $3e8 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( memcpy:1 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  memcpy:3 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { }  ) always clobbers reg byte a 
Statement [7] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( memcpy:1 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  memcpy:3 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { }  ) always clobbers reg byte a 
Statement [8] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( memcpy:1 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  memcpy:3 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  ) always clobbers reg byte a 
Statement [10] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( memcpy:1 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  memcpy:3 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a 
Statement [12] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( memcpy:1 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  memcpy:3 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ memcpy::source#2 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ memcpy::destination#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ memcpy::src_end#0 ] : zp[2]:10 , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 316.75: zp[2]:6 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 227.67: zp[2]:8 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 14: zp[2]:10 [ memcpy::src_end#0 ] 0: zp[2]:2 [ memcpy::source#2 ] 0: zp[2]:4 [ memcpy::destination#2 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [memcpy] best 907 combination zp[2]:6 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:8 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:10 [ memcpy::src_end#0 ] zp[2]:2 [ memcpy::source#2 ] zp[2]:4 [ memcpy::destination#2 ] 
Uplifting [MOS6526_CIA] best 907 combination 
Uplifting [MOS6569_VICII] best 907 combination 
Uplifting [MOS6581_SID] best 907 combination 
Uplifting [main] best 907 combination 
Uplifting [] best 907 combination 
Coalescing zero page register [ zp[2]:2 [ memcpy::source#2 ] ] with [ zp[2]:6 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ memcpy::destination#2 ] ] with [ zp[2]:8 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Allocated (was zp[2]:10) zp[2]:6 [ memcpy::src_end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Display  MEDUSA PETSCII by Buzz_clik
// https://csdb.dk/release/?id=178673
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .label BG_COLOR = $d021
  // Color Ram
  .label COLS = $d800
  .label SCREEN = $400
  // main
main: {
    // [0] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // [1] call memcpy 
    // [5] phi from main to memcpy [phi:main->memcpy]
  memcpy_from_main:
    // [5] phi memcpy::destination#2 = (void*)SCREEN [phi:main->memcpy#0] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memcpy.destination
    lda #>SCREEN
    sta.z memcpy.destination+1
    // [5] phi memcpy::source#2 = (void*)MEDUSA_SCREEN [phi:main->memcpy#1] -- pvoz1=pvoc1 
    lda #<MEDUSA_SCREEN
    sta.z memcpy.source
    lda #>MEDUSA_SCREEN
    sta.z memcpy.source+1
    jsr memcpy
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call memcpy 
    // [5] phi from main::@2 to memcpy [phi:main::@2->memcpy]
  memcpy_from___b2:
    // [5] phi memcpy::destination#2 = (void*)COLS [phi:main::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memcpy.destination
    lda #>COLS
    sta.z memcpy.destination+1
    // [5] phi memcpy::source#2 = (void*)MEDUSA_COLORS [phi:main::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<MEDUSA_COLORS
    sta.z memcpy.source
    lda #>MEDUSA_COLORS
    sta.z memcpy.source+1
    jsr memcpy
    jmp __b1
    // main::@1
  __b1:
    // [4] *(SCREEN+$3e7) = *(SCREEN+$3e7) ^ $e -- _deref_pbuc1=_deref_pbuc1_bxor_vbuc2 
    lda #$e
    eor SCREEN+$3e7
    sta SCREEN+$3e7
    jmp __b1
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(4) destination, void* zp(2) source)
memcpy: {
    .label src_end = 6
    .label dst = 4
    .label src = 2
    .label source = 2
    .label destination = 4
    // [6] memcpy::src_end#0 = (byte*)memcpy::source#2 + $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    clc
    lda.z source
    adc #<$3e8
    sta.z src_end
    lda.z source+1
    adc #>$3e8
    sta.z src_end+1
    // [7] memcpy::src#4 = (byte*)memcpy::source#2
    // [8] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [9] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [9] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [9] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [10] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [11] return 
    rts
    // memcpy::@2
  __b2:
    // [12] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [13] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [14] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // File Data
MEDUSA_SCREEN:
.var fileScreen = LoadBinary("medusas.prg", BF_C64FILE)
    .fill fileScreen.getSize(), fileScreen.get(i)

MEDUSA_COLORS:
.var fileCols = LoadBinary("medusac.prg", BF_C64FILE)
    .fill fileCols.getSize(), fileCols.get(i)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b2_from_main:
Removing instruction memcpy_from___b2:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction memcpy_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* BG_COLOR = (byte*) 53281
const nomodify byte BLACK = 0
const nomodify byte* COLS = (byte*) 55296
const byte* MEDUSA_COLORS[]  = kickasm {{ .var fileCols = LoadBinary("medusac.prg", BF_C64FILE)
    .fill fileCols.getSize(), fileCols.get(i)
 }}
const byte* MEDUSA_SCREEN[$3e8]  = kickasm {{ .var fileScreen = LoadBinary("medusas.prg", BF_C64FILE)
    .fill fileScreen.getSize(), fileScreen.get(i)
 }}
const byte* SCREEN = (byte*) 1024
void main()
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:4
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:4 101.0
byte* memcpy::dst#2 dst zp[2]:4 104.66666666666666
byte* memcpy::dst#4 dst zp[2]:4 22.0
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:2
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:2 202.0
byte* memcpy::src#2 src zp[2]:2 103.75
byte* memcpy::src#4 src zp[2]:2 11.0
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:6 14.0

zp[2]:2 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
zp[2]:4 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
zp[2]:6 [ memcpy::src_end#0 ]


FINAL ASSEMBLER
Score: 797

  // File Comments
// Display  MEDUSA PETSCII by Buzz_clik
// https://csdb.dk/release/?id=178673
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .label BG_COLOR = $d021
  // Color Ram
  .label COLS = $d800
  .label SCREEN = $400
  // main
main: {
    // *BG_COLOR = BLACK
    // [0] *BG_COLOR = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // memcpy(SCREEN, MEDUSA_SCREEN, 1000)
    // [1] call memcpy 
    // [5] phi from main to memcpy [phi:main->memcpy]
    // [5] phi memcpy::destination#2 = (void*)SCREEN [phi:main->memcpy#0] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memcpy.destination
    lda #>SCREEN
    sta.z memcpy.destination+1
    // [5] phi memcpy::source#2 = (void*)MEDUSA_SCREEN [phi:main->memcpy#1] -- pvoz1=pvoc1 
    lda #<MEDUSA_SCREEN
    sta.z memcpy.source
    lda #>MEDUSA_SCREEN
    sta.z memcpy.source+1
    jsr memcpy
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // memcpy(COLS, MEDUSA_COLORS, 1000)
    // [3] call memcpy 
    // [5] phi from main::@2 to memcpy [phi:main::@2->memcpy]
    // [5] phi memcpy::destination#2 = (void*)COLS [phi:main::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memcpy.destination
    lda #>COLS
    sta.z memcpy.destination+1
    // [5] phi memcpy::source#2 = (void*)MEDUSA_COLORS [phi:main::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<MEDUSA_COLORS
    sta.z memcpy.source
    lda #>MEDUSA_COLORS
    sta.z memcpy.source+1
    jsr memcpy
    // main::@1
  __b1:
    // (*(SCREEN+999)) ^= 0x0e
    // [4] *(SCREEN+$3e7) = *(SCREEN+$3e7) ^ $e -- _deref_pbuc1=_deref_pbuc1_bxor_vbuc2 
    lda #$e
    eor SCREEN+$3e7
    sta SCREEN+$3e7
    jmp __b1
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(4) destination, void* zp(2) source)
memcpy: {
    .label src_end = 6
    .label dst = 4
    .label src = 2
    .label source = 2
    .label destination = 4
    // src_end = (char*)source+num
    // [6] memcpy::src_end#0 = (byte*)memcpy::source#2 + $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    clc
    lda.z source
    adc #<$3e8
    sta.z src_end
    lda.z source+1
    adc #>$3e8
    sta.z src_end+1
    // [7] memcpy::src#4 = (byte*)memcpy::source#2
    // [8] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [9] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [9] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [9] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [10] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [11] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [12] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [13] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [14] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // File Data
MEDUSA_SCREEN:
.var fileScreen = LoadBinary("medusas.prg", BF_C64FILE)
    .fill fileScreen.getSize(), fileScreen.get(i)

MEDUSA_COLORS:
.var fileCols = LoadBinary("medusac.prg", BF_C64FILE)
    .fill fileCols.getSize(), fileCols.get(i)


