
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::idx#2 = phi( main/main::idx#0, main::@1/main::idx#1 )
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::SCREEN[main::idx#2] = chars[main::i#2]
  main::idx#1 = ++ main::idx#2
  main::i#1 = main::i#2 + rangenext(0,2)
  main::$0 = main::i#1 != rangelast(0,2)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
constant byte* chars[]  = { 1, 2, 3 }
void main()
bool~ main::$0
constant byte* const main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$0 [7] if(main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,2)) goto main::@1 to 3
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [4] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [7] main::i#3 = main::i#1
Coalesced [8] main::idx#3 = main::idx#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::idx#2 = phi( main/0, main::@1/main::idx#1 )
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::SCREEN[main::idx#2] = chars[main::i#2]
  [3] main::idx#1 = ++ main::idx#2
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0
byte main::idx
byte main::idx#1 7.333333333333333
byte main::idx#2 16.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#2 main::idx#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#2 main::idx#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#2 main::idx#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::SCREEN[main::idx#2] = chars[main::i#2] [ main::i#2 main::idx#2 ] (  [ main::i#2 main::idx#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::idx#2 main::idx#1 ]
Statement [2] main::SCREEN[main::idx#2] = chars[main::i#2] [ main::i#2 main::idx#2 ] (  [ main::i#2 main::idx#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#2 main::idx#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 23.83: zp[1]:3 [ main::idx#2 main::idx#1 ] 
Uplift Scope [] 

Uplifting [main] best 316 combination reg byte y [ main::i#2 main::i#1 ] reg byte x [ main::idx#2 main::idx#1 ] 
Uplifting [] best 316 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of chars
  // Upstart
  // Commodore 64 PRG executable file
.file [name="initializer-0.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::idx#2 = main::idx#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::SCREEN[main::idx#2] = chars[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda chars,y
    sta SCREEN,x
    // [3] main::idx#1 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=3) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data
.segment Data
  chars: .byte 1, 2, 3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant byte* chars[]  = { 1, 2, 3 }
void main()
constant byte* const main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 11.0
byte main::idx
byte main::idx#1 reg byte x 7.333333333333333
byte main::idx#2 reg byte x 16.5

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::idx#2 main::idx#1 ]


FINAL ASSEMBLER
Score: 226

  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of chars
  // Upstart
  // Commodore 64 PRG executable file
.file [name="initializer-0.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::idx#2 = main::idx#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[idx++] = chars[i]
    // [2] main::SCREEN[main::idx#2] = chars[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda chars,y
    sta SCREEN,x
    // SCREEN[idx++] = chars[i];
    // [3] main::idx#1 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for( char i: 0..2)
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=3) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data
.segment Data
  chars: .byte 1, 2, 3

