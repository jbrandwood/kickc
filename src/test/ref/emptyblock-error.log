Identified constant variable (byte*) B

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @3
  to:main::@1
main::@1: scope:[main]  from main main::@7
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  call menu 
  to:main::@7
main::@7: scope:[main]  from main::@2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
menu: scope:[menu]  from main::@2
  to:menu::@1
menu::@1: scope:[menu]  from menu
  if(true) goto menu::@2
  to:menu::@return
menu::@2: scope:[menu]  from menu::@1
  call mode 
  to:menu::@8
menu::@8: scope:[menu]  from menu::@2
  to:menu::@return
menu::@return: scope:[menu]  from menu::@1 menu::@8
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) B#0 ← ((byte*)) (word/signed word/dword/signed dword) $1000
  to:@3
mode: scope:[mode]  from menu::@2
  to:mode::@1
mode::@1: scope:[mode]  from mode mode::@2 mode::@4
  if(true) goto mode::@2
  to:mode::@return
mode::@2: scope:[mode]  from mode::@1
  (bool~) mode::$0 ← *((byte*) B#0) == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mode::$1 ← ! (bool~) mode::$0
  if((bool~) mode::$1) goto mode::@4
  to:mode::@1
mode::@4: scope:[mode]  from mode::@2
  to:mode::@1
mode::@return: scope:[mode]  from mode::@1
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) B
(byte*) B#0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(void()) menu()
(label) menu::@1
(label) menu::@2
(label) menu::@8
(label) menu::@return
(void()) mode()
(bool~) mode::$0
(bool~) mode::$1
(label) mode::@1
(label) mode::@2
(label) mode::@4
(label) mode::@return

Culled Empty Block (label) main::@7
Culled Empty Block (label) menu::@8
Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not [9] (bool~) mode::$1 ← *((byte*) B#0) != (byte/signed byte/word/signed word/dword/signed dword) 0 from [8] (bool~) mode::$0 ← *((byte*) B#0) == (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Simple Condition (bool~) mode::$1 [10] if(*((byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) B#0 = ((byte*))$1000
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [0] if(true) goto main::@2
if() condition always true - replacing block destination [3] if(true) goto menu::@2
if() condition always true - replacing block destination [6] if(true) goto mode::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Removing unused block mode::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) main::@1
Culled Empty Block (label) menu::@1
Culled Empty Block (label) @2
Culled Empty Block (label) mode::@1
Successful SSA optimization Pass2CullEmptyBlocks
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@2
Adding NOP phi() at start of mode
Adding NOP phi() at start of mode::@4
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to menu:6 
Calls in [menu] to mode:9 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Renumbering block @3 to @1
Renumbering block main::@2 to main::@1
Renumbering block menu::@2 to menu::@1
Renumbering block mode::@2 to mode::@1
Renumbering block mode::@4 to mode::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of menu
Adding NOP phi() at start of menu::@1
Adding NOP phi() at start of mode
Adding NOP phi() at start of mode::@2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] phi()
  [6] call menu 
  to:main::@1
menu: scope:[menu]  from main::@1
  [7] phi()
  to:menu::@1
menu::@1: scope:[menu]  from menu
  [8] phi()
  [9] call mode 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@1
  [10] return 
  to:@return
mode: scope:[mode]  from menu::@1
  [11] phi()
  to:mode::@1
mode::@1: scope:[mode]  from mode mode::@1 mode::@2
  [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@2
  to:mode::@1
mode::@2: scope:[mode]  from mode::@1
  [13] phi()
  to:mode::@1


VARIABLE REGISTER WEIGHTS
(byte*) B
(void()) main()
(void()) menu()
(void()) mode()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Error cleaning up unused blocks
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label B = $1000
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  b1_from_main:
  b1_from_b1:
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [6] call menu 
  //SEG14 [7] phi from main::@1 to menu [phi:main::@1->menu]
  menu_from_b1:
    jsr menu
    jmp b1_from_b1
}
//SEG15 menu
menu: {
  //SEG16 [8] phi from menu to menu::@1 [phi:menu->menu::@1]
  b1_from_menu:
    jmp b1
  //SEG17 menu::@1
  b1:
  //SEG18 [9] call mode 
  //SEG19 [11] phi from menu::@1 to mode [phi:menu::@1->mode]
  mode_from_b1:
    jsr mode
    jmp breturn
  //SEG20 menu::@return
  breturn:
  //SEG21 [10] return 
    rts
}
//SEG22 mode
mode: {
    jmp b1
  //SEG23 mode::@1
  b1:
  //SEG24 [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@2 -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b2_from_b1
    jmp b1
  //SEG25 [13] phi from mode::@1 to mode::@2 [phi:mode::@1->mode::@2]
  b2_from_b1:
    jmp b2
  //SEG26 mode::@2
  b2:
    jmp b1
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@2 [ ] ( main:2::menu:6::mode:9 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [menu] 
Uplift Scope [mode] 
Uplift Scope [] 

Uplifting [main] best 11929 combination 
Uplifting [menu] best 11929 combination 
Uplifting [mode] best 11929 combination 
Uplifting [] best 11929 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Error cleaning up unused blocks
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label B = $1000
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  b1_from_main:
  b1_from_b1:
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [6] call menu 
  //SEG14 [7] phi from main::@1 to menu [phi:main::@1->menu]
  menu_from_b1:
    jsr menu
    jmp b1_from_b1
}
//SEG15 menu
menu: {
  //SEG16 [8] phi from menu to menu::@1 [phi:menu->menu::@1]
  b1_from_menu:
    jmp b1
  //SEG17 menu::@1
  b1:
  //SEG18 [9] call mode 
  //SEG19 [11] phi from menu::@1 to mode [phi:menu::@1->mode]
  mode_from_b1:
    jsr mode
    jmp breturn
  //SEG20 menu::@return
  breturn:
  //SEG21 [10] return 
    rts
}
//SEG22 mode
mode: {
    jmp b1
  //SEG23 mode::@1
  b1:
  //SEG24 [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@2 -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b2_from_b1
    jmp b1
  //SEG25 [13] phi from mode::@1 to mode::@2 [phi:mode::@1->mode::@2]
  b2_from_b1:
    jmp b2
  //SEG26 mode::@2
  b2:
    jmp b1
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b2_from_b1 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction b1_from_b1:
Removing instruction menu_from_b1:
Removing instruction b1_from_menu:
Removing instruction mode_from_b1:
Removing instruction b2_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b1 in bne b2
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction bbegin:
Removing instruction b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b1
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) B
(const byte*) B#0 B = ((byte*))(word/signed word/dword/signed dword) $1000
(void()) main()
(label) main::@1
(void()) menu()
(label) menu::@1
(label) menu::@return
(void()) mode()
(label) mode::@1
(label) mode::@2



FINAL ASSEMBLER
Score: 11521

//SEG0 File Comments
// Error cleaning up unused blocks
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label B = $1000
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  //SEG12 main::@1
  b1:
  //SEG13 [6] call menu 
  //SEG14 [7] phi from main::@1 to menu [phi:main::@1->menu]
    jsr menu
    jmp b1
}
//SEG15 menu
menu: {
  //SEG16 [8] phi from menu to menu::@1 [phi:menu->menu::@1]
  //SEG17 menu::@1
  //SEG18 [9] call mode 
  //SEG19 [11] phi from menu::@1 to mode [phi:menu::@1->mode]
    jsr mode
  //SEG20 menu::@return
  //SEG21 [10] return 
    rts
}
//SEG22 mode
mode: {
  //SEG23 mode::@1
  b1:
  //SEG24 [12] if(*((const byte*) B#0)!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mode::@2 -- _deref_pbuc1_neq_0_then_la1 
    lda B
    cmp #0
    bne b1
    jmp b1
  //SEG25 [13] phi from mode::@1 to mode::@2 [phi:mode::@1->mode::@2]
  //SEG26 mode::@2
}

