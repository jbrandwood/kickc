Resolved forward reference xr to (signed byte*) xr
Resolved forward reference yr to (signed byte*) yr
Resolved forward reference SPRITE to (byte*) SPRITE
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) 53287
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  to:@4
main: scope:[main]  from @10
  (signed byte*) zr#17 ← phi( @10/(signed byte*) zr#18 )
  (signed byte*) yr#17 ← phi( @10/(signed byte*) yr#18 )
  (signed byte*) xr#17 ← phi( @10/(signed byte*) xr#18 )
  (signed byte*) SINQ#14 ← phi( @10/(signed byte*) SINQ#0 )
  (signed byte*) COSQ#14 ← phi( @10/(signed byte*) COSQ#0 )
  (signed byte*) SINH#14 ← phi( @10/(signed byte*) SINH#0 )
  (signed byte*) COSH#14 ← phi( @10/(signed byte*) COSH#0 )
  (byte*) SPRITE#3 ← phi( @10/(byte*) SPRITE#0 )
  asm { sei  }
  call sprites_init 
  to:main::@1
main::@1: scope:[main]  from main
  (signed byte*) zr#16 ← phi( main/(signed byte*) zr#17 )
  (signed byte*) yr#16 ← phi( main/(signed byte*) yr#17 )
  (signed byte*) xr#16 ← phi( main/(signed byte*) xr#17 )
  (signed byte*) SINQ#12 ← phi( main/(signed byte*) SINQ#14 )
  (signed byte*) COSQ#12 ← phi( main/(signed byte*) COSQ#14 )
  (signed byte*) SINH#12 ← phi( main/(signed byte*) SINH#14 )
  (signed byte*) COSH#12 ← phi( main/(signed byte*) COSH#14 )
  call mulf_init 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed byte*) zr#13 ← phi( main::@1/(signed byte*) zr#16 )
  (signed byte*) yr#13 ← phi( main::@1/(signed byte*) yr#16 )
  (signed byte*) xr#13 ← phi( main::@1/(signed byte*) xr#16 )
  (signed byte*) SINQ#9 ← phi( main::@1/(signed byte*) SINQ#12 )
  (signed byte*) COSQ#9 ← phi( main::@1/(signed byte*) COSQ#12 )
  (signed byte*) SINH#9 ← phi( main::@1/(signed byte*) SINH#12 )
  (signed byte*) COSH#9 ← phi( main::@1/(signed byte*) COSH#12 )
  call anim 
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@4: scope:[]  from @begin
  (signed byte/signed word/signed dword~) $0 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $1 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $2 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $3 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte[8]) xs#0 ← { (signed byte/signed word/signed dword~) $0, (signed byte/signed word/signed dword~) $1, (signed byte/signed word/signed dword~) $2, (signed byte/signed word/signed dword~) $3, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
  (signed byte/signed word/signed dword~) $4 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $5 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $6 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $7 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte[8]) ys#0 ← { (signed byte/signed word/signed dword~) $4, (signed byte/signed word/signed dword~) $5, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (signed byte/signed word/signed dword~) $6, (signed byte/signed word/signed dword~) $7, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
  (signed byte/signed word/signed dword~) $8 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $9 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $10 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte/signed word/signed dword~) $11 ← - (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte[8]) zs#0 ← { (signed byte/signed word/signed dword~) $8, (byte/signed byte/word/signed word/dword/signed dword) 63, (signed byte/signed word/signed dword~) $9, (byte/signed byte/word/signed word/dword/signed dword) 63, (signed byte/signed word/signed dword~) $10, (byte/signed byte/word/signed word/dword/signed dword) 63, (signed byte/signed word/signed dword~) $11, (byte/signed byte/word/signed word/dword/signed dword) 63 }
  to:@6
anim: scope:[anim]  from main::@2
  (signed byte*) zr#11 ← phi( main::@2/(signed byte*) zr#13 )
  (signed byte*) yr#11 ← phi( main::@2/(signed byte*) yr#13 )
  (signed byte*) xr#11 ← phi( main::@2/(signed byte*) xr#13 )
  (signed byte*) SINQ#7 ← phi( main::@2/(signed byte*) SINQ#9 )
  (signed byte*) COSQ#7 ← phi( main::@2/(signed byte*) COSQ#9 )
  (signed byte*) SINH#7 ← phi( main::@2/(signed byte*) SINH#9 )
  (signed byte*) COSH#7 ← phi( main::@2/(signed byte*) COSH#9 )
  (signed byte) anim::sx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) anim::sy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) anim::sz#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@8
  (signed byte*) zr#10 ← phi( anim/(signed byte*) zr#11 anim::@8/(signed byte*) zr#12 )
  (signed byte*) yr#10 ← phi( anim/(signed byte*) yr#11 anim::@8/(signed byte*) yr#12 )
  (signed byte*) xr#10 ← phi( anim/(signed byte*) xr#11 anim::@8/(signed byte*) xr#12 )
  (signed byte*) SINQ#6 ← phi( anim/(signed byte*) SINQ#7 anim::@8/(signed byte*) SINQ#8 )
  (signed byte*) COSQ#6 ← phi( anim/(signed byte*) COSQ#7 anim::@8/(signed byte*) COSQ#8 )
  (signed byte*) SINH#6 ← phi( anim/(signed byte*) SINH#7 anim::@8/(signed byte*) SINH#8 )
  (signed byte*) COSH#6 ← phi( anim/(signed byte*) COSH#7 anim::@8/(signed byte*) COSH#8 )
  (signed byte) anim::sz#9 ← phi( anim/(signed byte) anim::sz#0 anim::@8/(signed byte) anim::sz#11 )
  (signed byte) anim::sy#9 ← phi( anim/(signed byte) anim::sy#0 anim::@8/(signed byte) anim::sy#11 )
  (signed byte) anim::sx#9 ← phi( anim/(signed byte) anim::sx#0 anim::@8/(signed byte) anim::sx#11 )
  if(true) goto anim::@2
  to:anim::@return
anim::@2: scope:[anim]  from anim::@1
  (signed byte*) zr#8 ← phi( anim::@1/(signed byte*) zr#10 )
  (signed byte*) yr#8 ← phi( anim::@1/(signed byte*) yr#10 )
  (signed byte*) xr#8 ← phi( anim::@1/(signed byte*) xr#10 )
  (signed byte*) SINQ#4 ← phi( anim::@1/(signed byte*) SINQ#6 )
  (signed byte*) COSQ#4 ← phi( anim::@1/(signed byte*) COSQ#6 )
  (signed byte*) SINH#4 ← phi( anim::@1/(signed byte*) SINH#6 )
  (signed byte*) COSH#4 ← phi( anim::@1/(signed byte*) COSH#6 )
  (signed byte) anim::sz#6 ← phi( anim::@1/(signed byte) anim::sz#9 )
  (signed byte) anim::sy#6 ← phi( anim::@1/(signed byte) anim::sy#9 )
  (signed byte) anim::sx#6 ← phi( anim::@1/(signed byte) anim::sx#9 )
  to:anim::@4
anim::@4: scope:[anim]  from anim::@2 anim::@5
  (signed byte*) zr#7 ← phi( anim::@2/(signed byte*) zr#8 anim::@5/(signed byte*) zr#9 )
  (signed byte*) yr#7 ← phi( anim::@2/(signed byte*) yr#8 anim::@5/(signed byte*) yr#9 )
  (signed byte*) xr#7 ← phi( anim::@2/(signed byte*) xr#8 anim::@5/(signed byte*) xr#9 )
  (signed byte*) SINQ#3 ← phi( anim::@2/(signed byte*) SINQ#4 anim::@5/(signed byte*) SINQ#5 )
  (signed byte*) COSQ#3 ← phi( anim::@2/(signed byte*) COSQ#4 anim::@5/(signed byte*) COSQ#5 )
  (signed byte*) SINH#3 ← phi( anim::@2/(signed byte*) SINH#4 anim::@5/(signed byte*) SINH#5 )
  (signed byte*) COSH#3 ← phi( anim::@2/(signed byte*) COSH#4 anim::@5/(signed byte*) COSH#5 )
  (signed byte) anim::sz#4 ← phi( anim::@2/(signed byte) anim::sz#6 anim::@5/(signed byte) anim::sz#7 )
  (signed byte) anim::sy#4 ← phi( anim::@2/(signed byte) anim::sy#6 anim::@5/(signed byte) anim::sy#7 )
  (signed byte) anim::sx#4 ← phi( anim::@2/(signed byte) anim::sx#6 anim::@5/(signed byte) anim::sx#7 )
  (bool~) anim::$0 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) anim::$0) goto anim::@5
  to:anim::@6
anim::@5: scope:[anim]  from anim::@4
  (signed byte*) zr#9 ← phi( anim::@4/(signed byte*) zr#7 )
  (signed byte*) yr#9 ← phi( anim::@4/(signed byte*) yr#7 )
  (signed byte*) xr#9 ← phi( anim::@4/(signed byte*) xr#7 )
  (signed byte*) SINQ#5 ← phi( anim::@4/(signed byte*) SINQ#3 )
  (signed byte*) COSQ#5 ← phi( anim::@4/(signed byte*) COSQ#3 )
  (signed byte*) SINH#5 ← phi( anim::@4/(signed byte*) SINH#3 )
  (signed byte*) COSH#5 ← phi( anim::@4/(signed byte*) COSH#3 )
  (signed byte) anim::sz#7 ← phi( anim::@4/(signed byte) anim::sz#4 )
  (signed byte) anim::sy#7 ← phi( anim::@4/(signed byte) anim::sy#4 )
  (signed byte) anim::sx#7 ← phi( anim::@4/(signed byte) anim::sx#4 )
  to:anim::@4
anim::@6: scope:[anim]  from anim::@4
  (signed byte*) zr#6 ← phi( anim::@4/(signed byte*) zr#7 )
  (signed byte*) yr#6 ← phi( anim::@4/(signed byte*) yr#7 )
  (signed byte*) xr#6 ← phi( anim::@4/(signed byte*) xr#7 )
  (signed byte*) SINQ#2 ← phi( anim::@4/(signed byte*) SINQ#3 )
  (signed byte*) COSQ#2 ← phi( anim::@4/(signed byte*) COSQ#3 )
  (signed byte*) SINH#2 ← phi( anim::@4/(signed byte*) SINH#3 )
  (signed byte*) COSH#2 ← phi( anim::@4/(signed byte*) COSH#3 )
  (signed byte) anim::sz#2 ← phi( anim::@4/(signed byte) anim::sz#4 )
  (signed byte) anim::sy#2 ← phi( anim::@4/(signed byte) anim::sy#4 )
  (signed byte) anim::sx#2 ← phi( anim::@4/(signed byte) anim::sx#4 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) calculate_matrix::sx#0 ← (signed byte) anim::sx#2
  (signed byte) calculate_matrix::sy#0 ← (signed byte) anim::sy#2
  (signed byte) calculate_matrix::sz#0 ← (signed byte) anim::sz#2
  call calculate_matrix 
  to:anim::@17
anim::@17: scope:[anim]  from anim::@6
  (signed byte*) SINQ#17 ← phi( anim::@6/(signed byte*) SINQ#2 )
  (signed byte*) COSQ#17 ← phi( anim::@6/(signed byte*) COSQ#2 )
  (signed byte*) SINH#17 ← phi( anim::@6/(signed byte*) SINH#2 )
  (signed byte*) COSH#17 ← phi( anim::@6/(signed byte*) COSH#2 )
  (signed byte) anim::sx#13 ← phi( anim::@6/(signed byte) anim::sx#2 )
  (signed byte) anim::sy#12 ← phi( anim::@6/(signed byte) anim::sy#2 )
  (signed byte) anim::sz#12 ← phi( anim::@6/(signed byte) anim::sz#2 )
  (signed byte*) zr#5 ← phi( anim::@6/(signed byte*) zr#6 )
  (signed byte*) yr#5 ← phi( anim::@6/(signed byte*) yr#6 )
  (signed byte*) xr#5 ← phi( anim::@6/(signed byte*) xr#6 )
  call store_matrix 
  to:anim::@18
anim::@18: scope:[anim]  from anim::@17
  (signed byte*) SINQ#16 ← phi( anim::@17/(signed byte*) SINQ#17 )
  (signed byte*) COSQ#16 ← phi( anim::@17/(signed byte*) COSQ#17 )
  (signed byte*) SINH#16 ← phi( anim::@17/(signed byte*) SINH#17 )
  (signed byte*) COSH#16 ← phi( anim::@17/(signed byte*) COSH#17 )
  (signed byte) anim::sx#12 ← phi( anim::@17/(signed byte) anim::sx#13 )
  (signed byte) anim::sy#10 ← phi( anim::@17/(signed byte) anim::sy#12 )
  (signed byte) anim::sz#10 ← phi( anim::@17/(signed byte) anim::sz#12 )
  (signed byte*) zr#3 ← phi( anim::@17/(signed byte*) zr#5 )
  (signed byte*) yr#4 ← phi( anim::@17/(signed byte*) yr#5 )
  (signed byte*) xr#4 ← phi( anim::@17/(signed byte*) xr#5 )
  (byte) anim::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@7
anim::@7: scope:[anim]  from anim::@18 anim::@19
  (signed byte*) SINQ#15 ← phi( anim::@18/(signed byte*) SINQ#16 anim::@19/(signed byte*) SINQ#13 )
  (signed byte*) COSQ#15 ← phi( anim::@18/(signed byte*) COSQ#16 anim::@19/(signed byte*) COSQ#13 )
  (signed byte*) SINH#15 ← phi( anim::@18/(signed byte*) SINH#16 anim::@19/(signed byte*) SINH#13 )
  (signed byte*) COSH#15 ← phi( anim::@18/(signed byte*) COSH#16 anim::@19/(signed byte*) COSH#13 )
  (signed byte) anim::sx#10 ← phi( anim::@18/(signed byte) anim::sx#12 anim::@19/(signed byte) anim::sx#8 )
  (signed byte) anim::sy#8 ← phi( anim::@18/(signed byte) anim::sy#10 anim::@19/(signed byte) anim::sy#5 )
  (signed byte) anim::sz#8 ← phi( anim::@18/(signed byte) anim::sz#10 anim::@19/(signed byte) anim::sz#5 )
  (signed byte*) zr#2 ← phi( anim::@18/(signed byte*) zr#3 anim::@19/(signed byte*) zr#4 )
  (signed byte*) yr#3 ← phi( anim::@18/(signed byte*) yr#4 anim::@19/(signed byte*) yr#1 )
  (signed byte*) xr#3 ← phi( anim::@18/(signed byte*) xr#4 anim::@19/(signed byte*) xr#1 )
  (byte) anim::i#2 ← phi( anim::@18/(byte) anim::i#0 anim::@19/(byte) anim::i#1 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) rotate_matrix::x#0 ← *((signed byte[8]) xs#0 + (byte) anim::i#2)
  (signed byte) rotate_matrix::y#0 ← *((signed byte[8]) ys#0 + (byte) anim::i#2)
  (signed byte) rotate_matrix::z#0 ← *((signed byte[8]) zs#0 + (byte) anim::i#2)
  call rotate_matrix 
  to:anim::@19
anim::@19: scope:[anim]  from anim::@7
  (signed byte*) SINQ#13 ← phi( anim::@7/(signed byte*) SINQ#15 )
  (signed byte*) COSQ#13 ← phi( anim::@7/(signed byte*) COSQ#15 )
  (signed byte*) SINH#13 ← phi( anim::@7/(signed byte*) SINH#15 )
  (signed byte*) COSH#13 ← phi( anim::@7/(signed byte*) COSH#15 )
  (signed byte) anim::sx#8 ← phi( anim::@7/(signed byte) anim::sx#10 )
  (signed byte*) zr#4 ← phi( anim::@7/(signed byte*) zr#2 )
  (signed byte) anim::sy#5 ← phi( anim::@7/(signed byte) anim::sy#8 )
  (signed byte) anim::sz#5 ← phi( anim::@7/(signed byte) anim::sz#8 )
  (signed byte*) yr#1 ← phi( anim::@7/(signed byte*) yr#3 )
  (signed byte*) xr#1 ← phi( anim::@7/(signed byte*) xr#3 )
  (byte) anim::i#3 ← phi( anim::@7/(byte) anim::i#2 )
  (byte~) anim::$4 ← (byte) anim::i#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) anim::i2#0 ← (byte~) anim::$4
  (signed byte~) anim::$5 ← *((signed byte*) xr#1) >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) anim::$6 ← ((byte)) (signed byte~) anim::$5
  (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte~) anim::$6
  *((byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$7
  (signed byte~) anim::$8 ← *((signed byte*) yr#1) >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) anim::$9 ← ((byte)) (signed byte~) anim::$8
  (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte~) anim::$9
  *((byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$10
  (byte) anim::i#1 ← (byte) anim::i#3 + rangenext(0,7)
  (bool~) anim::$11 ← (byte) anim::i#1 != rangelast(0,7)
  if((bool~) anim::$11) goto anim::@7
  to:anim::@14
anim::@14: scope:[anim]  from anim::@19
  (signed byte*) zr#14 ← phi( anim::@19/(signed byte*) zr#4 )
  (signed byte*) yr#14 ← phi( anim::@19/(signed byte*) yr#1 )
  (signed byte*) xr#14 ← phi( anim::@19/(signed byte*) xr#1 )
  (signed byte*) SINQ#10 ← phi( anim::@19/(signed byte*) SINQ#13 )
  (signed byte*) COSQ#10 ← phi( anim::@19/(signed byte*) COSQ#13 )
  (signed byte*) SINH#10 ← phi( anim::@19/(signed byte*) SINH#13 )
  (signed byte*) COSH#10 ← phi( anim::@19/(signed byte*) COSH#13 )
  (signed byte) anim::sx#5 ← phi( anim::@19/(signed byte) anim::sx#8 )
  (signed byte) anim::sy#3 ← phi( anim::@19/(signed byte) anim::sy#5 )
  (signed byte) anim::sz#3 ← phi( anim::@19/(signed byte) anim::sz#5 )
  (signed byte) anim::sz#1 ← ++ (signed byte) anim::sz#3
  (signed byte) anim::sy#1 ← -- (signed byte) anim::sy#3
  (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) anim::$13 ← (byte~) anim::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) anim::$14 ← ! (bool~) anim::$13
  if((bool~) anim::$14) goto anim::@8
  to:anim::@15
anim::@8: scope:[anim]  from anim::@14 anim::@15
  (signed byte*) zr#12 ← phi( anim::@14/(signed byte*) zr#14 anim::@15/(signed byte*) zr#15 )
  (signed byte*) yr#12 ← phi( anim::@14/(signed byte*) yr#14 anim::@15/(signed byte*) yr#15 )
  (signed byte*) xr#12 ← phi( anim::@14/(signed byte*) xr#14 anim::@15/(signed byte*) xr#15 )
  (signed byte*) SINQ#8 ← phi( anim::@14/(signed byte*) SINQ#10 anim::@15/(signed byte*) SINQ#11 )
  (signed byte*) COSQ#8 ← phi( anim::@14/(signed byte*) COSQ#10 anim::@15/(signed byte*) COSQ#11 )
  (signed byte*) SINH#8 ← phi( anim::@14/(signed byte*) SINH#10 anim::@15/(signed byte*) SINH#11 )
  (signed byte*) COSH#8 ← phi( anim::@14/(signed byte*) COSH#10 anim::@15/(signed byte*) COSH#11 )
  (signed byte) anim::sz#11 ← phi( anim::@14/(signed byte) anim::sz#1 anim::@15/(signed byte) anim::sz#13 )
  (signed byte) anim::sy#11 ← phi( anim::@14/(signed byte) anim::sy#1 anim::@15/(signed byte) anim::sy#13 )
  (signed byte) anim::sx#11 ← phi( anim::@14/(signed byte) anim::sx#5 anim::@15/(signed byte) anim::sx#1 )
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  to:anim::@1
anim::@15: scope:[anim]  from anim::@14
  (signed byte*) zr#15 ← phi( anim::@14/(signed byte*) zr#14 )
  (signed byte*) yr#15 ← phi( anim::@14/(signed byte*) yr#14 )
  (signed byte*) xr#15 ← phi( anim::@14/(signed byte*) xr#14 )
  (signed byte*) SINQ#11 ← phi( anim::@14/(signed byte*) SINQ#10 )
  (signed byte*) COSQ#11 ← phi( anim::@14/(signed byte*) COSQ#10 )
  (signed byte*) SINH#11 ← phi( anim::@14/(signed byte*) SINH#10 )
  (signed byte*) COSH#11 ← phi( anim::@14/(signed byte*) COSH#10 )
  (signed byte) anim::sz#13 ← phi( anim::@14/(signed byte) anim::sz#1 )
  (signed byte) anim::sy#13 ← phi( anim::@14/(signed byte) anim::sy#1 )
  (signed byte) anim::sx#3 ← phi( anim::@14/(signed byte) anim::sx#5 )
  (signed byte) anim::sx#1 ← ++ (signed byte) anim::sx#3
  to:anim::@8
anim::@return: scope:[anim]  from anim::@1
  return 
  to:@return
sprites_init: scope:[sprites_init]  from main
  (byte*) SPRITE#2 ← phi( main/(byte*) SPRITE#3 )
  (byte*) sprites_init::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  *((byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255
  (byte*~) sprites_init::$0 ← (byte*) sprites_init::SCREEN#0 + (word/signed word/dword/signed dword) 1016
  (byte*) sprites_init::sprites_ptr#0 ← (byte*~) sprites_init::$0
  (byte) sprites_init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  (byte) sprites_init::i#2 ← phi( sprites_init/(byte) sprites_init::i#0 sprites_init::@1/(byte) sprites_init::i#1 )
  (byte*) sprites_init::sprites_ptr#1 ← phi( sprites_init/(byte*) sprites_init::sprites_ptr#0 sprites_init::@1/(byte*) sprites_init::sprites_ptr#1 )
  (byte*) SPRITE#1 ← phi( sprites_init/(byte*) SPRITE#2 sprites_init::@1/(byte*) SPRITE#1 )
  (byte*~) sprites_init::$1 ← (byte*) SPRITE#1 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte~) sprites_init::$2 ← ((byte)) (byte*~) sprites_init::$1
  *((byte*) sprites_init::sprites_ptr#1 + (byte) sprites_init::i#2) ← (byte~) sprites_init::$2
  *((byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (byte) GREEN#0
  (byte) sprites_init::i#1 ← (byte) sprites_init::i#2 + rangenext(0,7)
  (bool~) sprites_init::$3 ← (byte) sprites_init::i#1 != rangelast(0,7)
  if((bool~) sprites_init::$3) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return
@6: scope:[]  from @4
  (signed byte[9]) rotation_matrix#0 ← { fill( 9, 0) }
  to:@8
calculate_matrix: scope:[calculate_matrix]  from anim::@6
  (signed byte*) SINQ#1 ← phi( anim::@6/(signed byte*) SINQ#2 )
  (signed byte*) COSQ#1 ← phi( anim::@6/(signed byte*) COSQ#2 )
  (signed byte*) SINH#1 ← phi( anim::@6/(signed byte*) SINH#2 )
  (signed byte*) COSH#1 ← phi( anim::@6/(signed byte*) COSH#2 )
  (signed byte) calculate_matrix::sx#1 ← phi( anim::@6/(signed byte) calculate_matrix::sx#0 )
  (signed byte) calculate_matrix::sz#1 ← phi( anim::@6/(signed byte) calculate_matrix::sz#0 )
  (signed byte) calculate_matrix::sy#1 ← phi( anim::@6/(signed byte) calculate_matrix::sy#0 )
  (signed byte~) calculate_matrix::$0 ← (signed byte) calculate_matrix::sy#1 - (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t1#0 ← (signed byte~) calculate_matrix::$0
  (signed byte~) calculate_matrix::$1 ← (signed byte) calculate_matrix::sy#1 + (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t2#0 ← (signed byte~) calculate_matrix::$1
  (signed byte~) calculate_matrix::$2 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t3#0 ← (signed byte~) calculate_matrix::$2
  (signed byte~) calculate_matrix::$3 ← (signed byte) calculate_matrix::sx#1 - (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t4#0 ← (signed byte~) calculate_matrix::$3
  (signed byte~) calculate_matrix::$4 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::t2#0
  (signed byte) calculate_matrix::t5#0 ← (signed byte~) calculate_matrix::$4
  (signed byte~) calculate_matrix::$5 ← (signed byte) calculate_matrix::sx#1 - (signed byte) calculate_matrix::t1#0
  (signed byte) calculate_matrix::t6#0 ← (signed byte~) calculate_matrix::$5
  (signed byte~) calculate_matrix::$6 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::t1#0
  (signed byte) calculate_matrix::t7#0 ← (signed byte~) calculate_matrix::$6
  (signed byte~) calculate_matrix::$7 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t8#0 ← (signed byte~) calculate_matrix::$7
  (signed byte~) calculate_matrix::$8 ← (signed byte) calculate_matrix::sy#1 - (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t9#0 ← (signed byte~) calculate_matrix::$8
  (signed byte~) calculate_matrix::$9 ← (signed byte) calculate_matrix::sy#1 + (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t10#0 ← (signed byte~) calculate_matrix::$9
  (signed byte~) calculate_matrix::$10 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t1#0) + *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t2#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (signed byte~) calculate_matrix::$10
  (signed byte~) calculate_matrix::$11 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t1#0) - *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t2#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11
  (signed byte~) calculate_matrix::$12 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::sy#1) + *((signed byte*) SINH#1 + (signed byte) calculate_matrix::sy#1)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12
  (signed byte~) calculate_matrix::$13 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t3#0) - *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t8#0)
  (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t7#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17
  (signed byte~) calculate_matrix::$18 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t3#0) + *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t7#0)
  (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t8#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22
  (signed byte~) calculate_matrix::$23 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t9#0) - *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t10#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23
  (signed byte~) calculate_matrix::$24 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t4#0) - *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t3#0)
  (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t8#0)
  (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t7#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28
  (signed byte~) calculate_matrix::$29 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t3#0) + *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t7#0)
  (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t8#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33
  (signed byte~) calculate_matrix::$34 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t9#0) + *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t10#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34
  to:calculate_matrix::@return
calculate_matrix::@return: scope:[calculate_matrix]  from calculate_matrix
  return 
  to:@return
store_matrix: scope:[store_matrix]  from anim::@17
  asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
  to:store_matrix::@return
store_matrix::@return: scope:[store_matrix]  from store_matrix
  return 
  to:@return
@8: scope:[]  from @6
  (signed byte*) xr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 240
  (signed byte*) yr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 241
  (signed byte*) zr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 242
  to:@9
rotate_matrix: scope:[rotate_matrix]  from anim::@7
  (signed byte*) zr#1 ← phi( anim::@7/(signed byte*) zr#2 )
  (signed byte) rotate_matrix::z#1 ← phi( anim::@7/(signed byte) rotate_matrix::z#0 )
  (signed byte*) yr#2 ← phi( anim::@7/(signed byte*) yr#3 )
  (signed byte) rotate_matrix::y#1 ← phi( anim::@7/(signed byte) rotate_matrix::y#0 )
  (signed byte*) xr#2 ← phi( anim::@7/(signed byte*) xr#3 )
  (signed byte) rotate_matrix::x#1 ← phi( anim::@7/(signed byte) rotate_matrix::x#0 )
  *((signed byte*) xr#2) ← (signed byte) rotate_matrix::x#1
  *((signed byte*) yr#2) ← (signed byte) rotate_matrix::y#1
  *((signed byte*) zr#1) ← (signed byte) rotate_matrix::z#1
  asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
  to:rotate_matrix::@return
rotate_matrix::@return: scope:[rotate_matrix]  from rotate_matrix
  return 
  to:@return
@9: scope:[]  from @8
  (signed byte*) zr#19 ← phi( @8/(signed byte*) zr#0 )
  (signed byte*) yr#19 ← phi( @8/(signed byte*) yr#0 )
  (signed byte*) xr#19 ← phi( @8/(signed byte*) xr#0 )
  (byte[512]) mulf_sqr1#0 ← { fill( 512, 0) }
  (byte[512]) mulf_sqr2#0 ← { fill( 512, 0) }
  to:@10
mulf_init: scope:[mulf_init]  from main::@1
  (signed word) mulf_init::sqr#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed word) mulf_init::add#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mulf_init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  (signed word) mulf_init::add#2 ← phi( mulf_init/(signed word) mulf_init::add#0 mulf_init::@1/(signed word) mulf_init::add#1 )
  (byte) mulf_init::i#2 ← phi( mulf_init/(byte) mulf_init::i#0 mulf_init::@1/(byte) mulf_init::i#1 )
  (signed word) mulf_init::sqr#2 ← phi( mulf_init/(signed word) mulf_init::sqr#0 mulf_init::@1/(signed word) mulf_init::sqr#1 )
  (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr#2
  (byte) mulf_init::val#0 ← (byte~) mulf_init::$0
  *((byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0
  (byte*~) mulf_init::$1 ← (byte[512]) mulf_sqr1#0 + (word/signed word/dword/signed dword) 256
  *((byte*~) mulf_init::$1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0
  (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2
  *((byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0
  (byte*~) mulf_init::$3 ← (byte[512]) mulf_sqr1#0 + (word/signed word/dword/signed dword) 256
  (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2
  *((byte*~) mulf_init::$3 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0
  (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte) mulf_init::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$5) ← (byte) mulf_init::val#0
  (byte*~) mulf_init::$6 ← (byte[512]) mulf_sqr2#0 + (word/signed word/dword/signed dword) 256
  (byte/signed word/word/dword/signed dword~) mulf_init::$7 ← (byte) mulf_init::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*~) mulf_init::$6 + (byte/signed word/word/dword/signed dword~) mulf_init::$7) ← (byte) mulf_init::val#0
  (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2
  *((byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0
  (byte*~) mulf_init::$9 ← (byte[512]) mulf_sqr2#0 + (word/signed word/dword/signed dword) 256
  (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2
  *((byte*~) mulf_init::$9 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0
  (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2
  (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) mulf_init::i#1 ← (byte) mulf_init::i#2 + rangenext(0,128)
  (bool~) mulf_init::$11 ← (byte) mulf_init::i#1 != rangelast(0,128)
  if((bool~) mulf_init::$11) goto mulf_init::@1
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  return 
  to:@return
@10: scope:[]  from @9
  (signed byte*) zr#18 ← phi( @9/(signed byte*) zr#19 )
  (signed byte*) yr#18 ← phi( @9/(signed byte*) yr#19 )
  (signed byte*) xr#18 ← phi( @9/(signed byte*) xr#19 )
  (byte*) SPRITE#0 ← ((byte*)) (word/signed word/dword/signed dword) 12288
  kickasm(location (byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  (signed byte*) COSH#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 8192
  (signed byte*~) $12 ← (signed byte*) COSH#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte*) SINH#0 ← (signed byte*~) $12
  (signed byte*) COSQ#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 8704
  (signed byte*~) $13 ← (signed byte*) COSQ#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte*) SINQ#0 ← (signed byte*~) $13
  kickasm(location (signed byte*) COSH#0) {{ {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  kickasm(location (signed byte*) COSQ#0) {{ {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  call main 
  to:@11
@11: scope:[]  from @10
  to:@end
@end: scope:[]  from @11

SYMBOL TABLE SSA
(signed byte/signed word/signed dword~) $0
(signed byte/signed word/signed dword~) $1
(signed byte/signed word/signed dword~) $10
(signed byte/signed word/signed dword~) $11
(signed byte*~) $12
(signed byte*~) $13
(signed byte/signed word/signed dword~) $2
(signed byte/signed word/signed dword~) $3
(signed byte/signed word/signed dword~) $4
(signed byte/signed word/signed dword~) $5
(signed byte/signed word/signed dword~) $6
(signed byte/signed word/signed dword~) $7
(signed byte/signed word/signed dword~) $8
(signed byte/signed word/signed dword~) $9
(label) @10
(label) @11
(label) @4
(label) @6
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(signed byte*) COSH
(signed byte*) COSH#0
(signed byte*) COSH#1
(signed byte*) COSH#10
(signed byte*) COSH#11
(signed byte*) COSH#12
(signed byte*) COSH#13
(signed byte*) COSH#14
(signed byte*) COSH#15
(signed byte*) COSH#16
(signed byte*) COSH#17
(signed byte*) COSH#2
(signed byte*) COSH#3
(signed byte*) COSH#4
(signed byte*) COSH#5
(signed byte*) COSH#6
(signed byte*) COSH#7
(signed byte*) COSH#8
(signed byte*) COSH#9
(signed byte*) COSQ
(signed byte*) COSQ#0
(signed byte*) COSQ#1
(signed byte*) COSQ#10
(signed byte*) COSQ#11
(signed byte*) COSQ#12
(signed byte*) COSQ#13
(signed byte*) COSQ#14
(signed byte*) COSQ#15
(signed byte*) COSQ#16
(signed byte*) COSQ#17
(signed byte*) COSQ#2
(signed byte*) COSQ#3
(signed byte*) COSQ#4
(signed byte*) COSQ#5
(signed byte*) COSQ#6
(signed byte*) COSQ#7
(signed byte*) COSQ#8
(signed byte*) COSQ#9
(byte) GREEN
(byte) GREEN#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte*) RASTER
(byte*) RASTER#0
(signed byte*) SINH
(signed byte*) SINH#0
(signed byte*) SINH#1
(signed byte*) SINH#10
(signed byte*) SINH#11
(signed byte*) SINH#12
(signed byte*) SINH#13
(signed byte*) SINH#14
(signed byte*) SINH#15
(signed byte*) SINH#16
(signed byte*) SINH#17
(signed byte*) SINH#2
(signed byte*) SINH#3
(signed byte*) SINH#4
(signed byte*) SINH#5
(signed byte*) SINH#6
(signed byte*) SINH#7
(signed byte*) SINH#8
(signed byte*) SINH#9
(signed byte*) SINQ
(signed byte*) SINQ#0
(signed byte*) SINQ#1
(signed byte*) SINQ#10
(signed byte*) SINQ#11
(signed byte*) SINQ#12
(signed byte*) SINQ#13
(signed byte*) SINQ#14
(signed byte*) SINQ#15
(signed byte*) SINQ#16
(signed byte*) SINQ#17
(signed byte*) SINQ#2
(signed byte*) SINQ#3
(signed byte*) SINQ#4
(signed byte*) SINQ#5
(signed byte*) SINQ#6
(signed byte*) SINQ#7
(signed byte*) SINQ#8
(signed byte*) SINQ#9
(byte*) SPRITE
(byte*) SPRITE#0
(byte*) SPRITE#1
(byte*) SPRITE#2
(byte*) SPRITE#3
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(void()) anim()
(bool~) anim::$0
(byte/word/signed word/dword/signed dword~) anim::$10
(bool~) anim::$11
(byte~) anim::$12
(bool~) anim::$13
(bool~) anim::$14
(byte~) anim::$4
(signed byte~) anim::$5
(byte~) anim::$6
(byte/word/signed word/dword/signed dword~) anim::$7
(signed byte~) anim::$8
(byte~) anim::$9
(label) anim::@1
(label) anim::@14
(label) anim::@15
(label) anim::@17
(label) anim::@18
(label) anim::@19
(label) anim::@2
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@return
(byte) anim::i
(byte) anim::i#0
(byte) anim::i#1
(byte) anim::i#2
(byte) anim::i#3
(byte) anim::i2
(byte) anim::i2#0
(signed byte) anim::sx
(signed byte) anim::sx#0
(signed byte) anim::sx#1
(signed byte) anim::sx#10
(signed byte) anim::sx#11
(signed byte) anim::sx#12
(signed byte) anim::sx#13
(signed byte) anim::sx#2
(signed byte) anim::sx#3
(signed byte) anim::sx#4
(signed byte) anim::sx#5
(signed byte) anim::sx#6
(signed byte) anim::sx#7
(signed byte) anim::sx#8
(signed byte) anim::sx#9
(signed byte) anim::sy
(signed byte) anim::sy#0
(signed byte) anim::sy#1
(signed byte) anim::sy#10
(signed byte) anim::sy#11
(signed byte) anim::sy#12
(signed byte) anim::sy#13
(signed byte) anim::sy#2
(signed byte) anim::sy#3
(signed byte) anim::sy#4
(signed byte) anim::sy#5
(signed byte) anim::sy#6
(signed byte) anim::sy#7
(signed byte) anim::sy#8
(signed byte) anim::sy#9
(signed byte) anim::sz
(signed byte) anim::sz#0
(signed byte) anim::sz#1
(signed byte) anim::sz#10
(signed byte) anim::sz#11
(signed byte) anim::sz#12
(signed byte) anim::sz#13
(signed byte) anim::sz#2
(signed byte) anim::sz#3
(signed byte) anim::sz#4
(signed byte) anim::sz#5
(signed byte) anim::sz#6
(signed byte) anim::sz#7
(signed byte) anim::sz#8
(signed byte) anim::sz#9
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$0
(signed byte~) calculate_matrix::$1
(signed byte~) calculate_matrix::$10
(signed byte~) calculate_matrix::$11
(signed byte~) calculate_matrix::$12
(signed byte~) calculate_matrix::$13
(signed byte~) calculate_matrix::$14
(signed byte~) calculate_matrix::$15
(signed byte~) calculate_matrix::$16
(signed byte~) calculate_matrix::$17
(signed byte~) calculate_matrix::$18
(signed byte~) calculate_matrix::$19
(signed byte~) calculate_matrix::$2
(signed byte~) calculate_matrix::$20
(signed byte~) calculate_matrix::$21
(signed byte~) calculate_matrix::$22
(signed byte~) calculate_matrix::$23
(signed byte~) calculate_matrix::$24
(signed byte~) calculate_matrix::$25
(signed byte~) calculate_matrix::$26
(signed byte~) calculate_matrix::$27
(signed byte~) calculate_matrix::$28
(signed byte~) calculate_matrix::$29
(signed byte~) calculate_matrix::$3
(signed byte~) calculate_matrix::$30
(signed byte~) calculate_matrix::$31
(signed byte~) calculate_matrix::$32
(signed byte~) calculate_matrix::$33
(signed byte~) calculate_matrix::$34
(signed byte~) calculate_matrix::$4
(signed byte~) calculate_matrix::$5
(signed byte~) calculate_matrix::$6
(signed byte~) calculate_matrix::$7
(signed byte~) calculate_matrix::$8
(signed byte~) calculate_matrix::$9
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0
(signed byte) calculate_matrix::sx#1
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0
(signed byte) calculate_matrix::sy#1
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::sz#0
(signed byte) calculate_matrix::sz#1
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(void()) mulf_init()
(byte~) mulf_init::$0
(byte*~) mulf_init::$1
(byte/signed word/word/dword/signed dword~) mulf_init::$10
(bool~) mulf_init::$11
(byte~) mulf_init::$2
(byte*~) mulf_init::$3
(byte~) mulf_init::$4
(byte/signed word/word/dword/signed dword~) mulf_init::$5
(byte*~) mulf_init::$6
(byte/signed word/word/dword/signed dword~) mulf_init::$7
(byte/signed word/word/dword/signed dword~) mulf_init::$8
(byte*~) mulf_init::$9
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#0
(signed word) mulf_init::add#1
(signed word) mulf_init::add#2
(byte) mulf_init::i
(byte) mulf_init::i#0
(byte) mulf_init::i#1
(byte) mulf_init::i#2
(signed word) mulf_init::sqr
(signed word) mulf_init::sqr#0
(signed word) mulf_init::sqr#1
(signed word) mulf_init::sqr#2
(byte) mulf_init::val
(byte) mulf_init::val#0
(byte[512]) mulf_sqr1
(byte[512]) mulf_sqr1#0
(byte[512]) mulf_sqr2
(byte[512]) mulf_sqr2#0
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0
(signed byte) rotate_matrix::x#1
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0
(signed byte) rotate_matrix::y#1
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0
(signed byte) rotate_matrix::z#1
(signed byte[9]) rotation_matrix
(signed byte[9]) rotation_matrix#0
(void()) sprites_init()
(byte*~) sprites_init::$0
(byte*~) sprites_init::$1
(byte~) sprites_init::$2
(bool~) sprites_init::$3
(label) sprites_init::@1
(label) sprites_init::@return
(byte*) sprites_init::SCREEN
(byte*) sprites_init::SCREEN#0
(byte) sprites_init::i
(byte) sprites_init::i#0
(byte) sprites_init::i#1
(byte) sprites_init::i#2
(byte*) sprites_init::sprites_ptr
(byte*) sprites_init::sprites_ptr#0
(byte*) sprites_init::sprites_ptr#1
(void()) store_matrix()
(label) store_matrix::@return
(signed byte*) xr
(signed byte*) xr#0
(signed byte*) xr#1
(signed byte*) xr#10
(signed byte*) xr#11
(signed byte*) xr#12
(signed byte*) xr#13
(signed byte*) xr#14
(signed byte*) xr#15
(signed byte*) xr#16
(signed byte*) xr#17
(signed byte*) xr#18
(signed byte*) xr#19
(signed byte*) xr#2
(signed byte*) xr#3
(signed byte*) xr#4
(signed byte*) xr#5
(signed byte*) xr#6
(signed byte*) xr#7
(signed byte*) xr#8
(signed byte*) xr#9
(signed byte[8]) xs
(signed byte[8]) xs#0
(signed byte*) yr
(signed byte*) yr#0
(signed byte*) yr#1
(signed byte*) yr#10
(signed byte*) yr#11
(signed byte*) yr#12
(signed byte*) yr#13
(signed byte*) yr#14
(signed byte*) yr#15
(signed byte*) yr#16
(signed byte*) yr#17
(signed byte*) yr#18
(signed byte*) yr#19
(signed byte*) yr#2
(signed byte*) yr#3
(signed byte*) yr#4
(signed byte*) yr#5
(signed byte*) yr#6
(signed byte*) yr#7
(signed byte*) yr#8
(signed byte*) yr#9
(signed byte[8]) ys
(signed byte[8]) ys#0
(signed byte*) zr
(signed byte*) zr#0
(signed byte*) zr#1
(signed byte*) zr#10
(signed byte*) zr#11
(signed byte*) zr#12
(signed byte*) zr#13
(signed byte*) zr#14
(signed byte*) zr#15
(signed byte*) zr#16
(signed byte*) zr#17
(signed byte*) zr#18
(signed byte*) zr#19
(signed byte*) zr#2
(signed byte*) zr#3
(signed byte*) zr#4
(signed byte*) zr#5
(signed byte*) zr#6
(signed byte*) zr#7
(signed byte*) zr#8
(signed byte*) zr#9
(signed byte[8]) zs
(signed byte[8]) zs#0

Culled Empty Block (label) main::@3
Culled Empty Block (label) @11
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) anim::$14 ← (byte~) anim::$12 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) anim::$13 ← (byte~) anim::$12 == (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (signed byte*) COSH#12 = (signed byte*) COSH#14 (signed byte*) COSH#9 
Alias (signed byte*) SINH#12 = (signed byte*) SINH#14 (signed byte*) SINH#9 
Alias (signed byte*) COSQ#12 = (signed byte*) COSQ#14 (signed byte*) COSQ#9 
Alias (signed byte*) SINQ#12 = (signed byte*) SINQ#14 (signed byte*) SINQ#9 
Alias (signed byte*) xr#13 = (signed byte*) xr#16 (signed byte*) xr#17 
Alias (signed byte*) yr#13 = (signed byte*) yr#16 (signed byte*) yr#17 
Alias (signed byte*) zr#13 = (signed byte*) zr#16 (signed byte*) zr#17 
Alias (signed byte) anim::sx#6 = (signed byte) anim::sx#9 
Alias (signed byte) anim::sy#6 = (signed byte) anim::sy#9 
Alias (signed byte) anim::sz#6 = (signed byte) anim::sz#9 
Alias (signed byte*) COSH#4 = (signed byte*) COSH#6 
Alias (signed byte*) SINH#4 = (signed byte*) SINH#6 
Alias (signed byte*) COSQ#4 = (signed byte*) COSQ#6 
Alias (signed byte*) SINQ#4 = (signed byte*) SINQ#6 
Alias (signed byte*) xr#10 = (signed byte*) xr#8 
Alias (signed byte*) yr#10 = (signed byte*) yr#8 
Alias (signed byte*) zr#10 = (signed byte*) zr#8 
Alias (signed byte) anim::sx#12 = (signed byte) anim::sx#7 (signed byte) anim::sx#4 (signed byte) anim::sx#2 (signed byte) anim::sx#13 
Alias (signed byte) anim::sy#10 = (signed byte) anim::sy#7 (signed byte) anim::sy#4 (signed byte) anim::sy#2 (signed byte) anim::sy#12 
Alias (signed byte) anim::sz#10 = (signed byte) anim::sz#7 (signed byte) anim::sz#4 (signed byte) anim::sz#2 (signed byte) anim::sz#12 
Alias (signed byte*) COSH#16 = (signed byte*) COSH#5 (signed byte*) COSH#3 (signed byte*) COSH#2 (signed byte*) COSH#17 
Alias (signed byte*) SINH#16 = (signed byte*) SINH#5 (signed byte*) SINH#3 (signed byte*) SINH#2 (signed byte*) SINH#17 
Alias (signed byte*) COSQ#16 = (signed byte*) COSQ#5 (signed byte*) COSQ#3 (signed byte*) COSQ#2 (signed byte*) COSQ#17 
Alias (signed byte*) SINQ#16 = (signed byte*) SINQ#5 (signed byte*) SINQ#3 (signed byte*) SINQ#2 (signed byte*) SINQ#17 
Alias (signed byte*) xr#4 = (signed byte*) xr#9 (signed byte*) xr#7 (signed byte*) xr#6 (signed byte*) xr#5 
Alias (signed byte*) yr#4 = (signed byte*) yr#9 (signed byte*) yr#7 (signed byte*) yr#6 (signed byte*) yr#5 
Alias (signed byte*) zr#3 = (signed byte*) zr#9 (signed byte*) zr#7 (signed byte*) zr#6 (signed byte*) zr#5 
Alias (byte) anim::i#2 = (byte) anim::i#3 
Alias (signed byte*) xr#1 = (signed byte*) xr#3 (signed byte*) xr#14 (signed byte*) xr#15 
Alias (signed byte*) yr#1 = (signed byte*) yr#3 (signed byte*) yr#14 (signed byte*) yr#15 
Alias (signed byte) anim::sz#3 = (signed byte) anim::sz#5 (signed byte) anim::sz#8 
Alias (signed byte) anim::sy#3 = (signed byte) anim::sy#5 (signed byte) anim::sy#8 
Alias (signed byte*) zr#14 = (signed byte*) zr#4 (signed byte*) zr#2 (signed byte*) zr#15 
Alias (signed byte) anim::sx#10 = (signed byte) anim::sx#8 (signed byte) anim::sx#5 (signed byte) anim::sx#3 
Alias (signed byte*) COSH#10 = (signed byte*) COSH#13 (signed byte*) COSH#15 (signed byte*) COSH#11 
Alias (signed byte*) SINH#10 = (signed byte*) SINH#13 (signed byte*) SINH#15 (signed byte*) SINH#11 
Alias (signed byte*) COSQ#10 = (signed byte*) COSQ#13 (signed byte*) COSQ#15 (signed byte*) COSQ#11 
Alias (signed byte*) SINQ#10 = (signed byte*) SINQ#13 (signed byte*) SINQ#15 (signed byte*) SINQ#11 
Alias (byte) anim::i2#0 = (byte~) anim::$4 
Alias (signed byte) anim::sy#1 = (signed byte) anim::sy#13 
Alias (signed byte) anim::sz#1 = (signed byte) anim::sz#13 
Alias (byte*) sprites_init::sprites_ptr#0 = (byte*~) sprites_init::$0 
Alias (signed byte) calculate_matrix::t1#0 = (signed byte~) calculate_matrix::$0 
Alias (signed byte) calculate_matrix::t2#0 = (signed byte~) calculate_matrix::$1 
Alias (signed byte) calculate_matrix::t3#0 = (signed byte~) calculate_matrix::$2 
Alias (signed byte) calculate_matrix::t4#0 = (signed byte~) calculate_matrix::$3 
Alias (signed byte) calculate_matrix::t5#0 = (signed byte~) calculate_matrix::$4 
Alias (signed byte) calculate_matrix::t6#0 = (signed byte~) calculate_matrix::$5 
Alias (signed byte) calculate_matrix::t7#0 = (signed byte~) calculate_matrix::$6 
Alias (signed byte) calculate_matrix::t8#0 = (signed byte~) calculate_matrix::$7 
Alias (signed byte) calculate_matrix::t9#0 = (signed byte~) calculate_matrix::$8 
Alias (signed byte) calculate_matrix::t10#0 = (signed byte~) calculate_matrix::$9 
Alias (signed byte*) xr#0 = (signed byte*) xr#19 (signed byte*) xr#18 
Alias (signed byte*) yr#0 = (signed byte*) yr#19 (signed byte*) yr#18 
Alias (signed byte*) zr#0 = (signed byte*) zr#19 (signed byte*) zr#18 
Alias (byte) mulf_init::val#0 = (byte~) mulf_init::$0 
Alias (signed byte*) SINH#0 = (signed byte*~) $12 
Alias (signed byte*) SINQ#0 = (signed byte*~) $13 
Successful SSA optimization Pass2AliasElimination
Alias (signed byte) anim::sy#1 = (signed byte) anim::sy#11 
Alias (signed byte) anim::sz#1 = (signed byte) anim::sz#11 
Alias (signed byte*) COSH#10 = (signed byte*) COSH#8 
Alias (signed byte*) SINH#10 = (signed byte*) SINH#8 
Alias (signed byte*) COSQ#10 = (signed byte*) COSQ#8 
Alias (signed byte*) SINQ#10 = (signed byte*) SINQ#8 
Alias (signed byte*) xr#1 = (signed byte*) xr#12 
Alias (signed byte*) yr#1 = (signed byte*) yr#12 
Alias (signed byte*) zr#12 = (signed byte*) zr#14 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (signed byte) anim::sx#12
Self Phi Eliminated (signed byte) anim::sy#10
Self Phi Eliminated (signed byte) anim::sz#10
Self Phi Eliminated (signed byte*) COSH#16
Self Phi Eliminated (signed byte*) SINH#16
Self Phi Eliminated (signed byte*) COSQ#16
Self Phi Eliminated (signed byte*) SINQ#16
Self Phi Eliminated (signed byte*) xr#4
Self Phi Eliminated (signed byte*) yr#4
Self Phi Eliminated (signed byte*) zr#3
Self Phi Eliminated (signed byte*) xr#1
Self Phi Eliminated (signed byte*) yr#1
Self Phi Eliminated (signed byte*) zr#12
Self Phi Eliminated (signed byte) anim::sz#3
Self Phi Eliminated (signed byte) anim::sy#3
Self Phi Eliminated (signed byte) anim::sx#10
Self Phi Eliminated (signed byte*) COSH#10
Self Phi Eliminated (signed byte*) SINH#10
Self Phi Eliminated (signed byte*) COSQ#10
Self Phi Eliminated (signed byte*) SINQ#10
Self Phi Eliminated (byte*) SPRITE#1
Self Phi Eliminated (byte*) sprites_init::sprites_ptr#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) SPRITE#3 (byte*) SPRITE#0
Redundant Phi (signed byte*) COSH#12 (signed byte*) COSH#0
Redundant Phi (signed byte*) SINH#12 (signed byte*) SINH#0
Redundant Phi (signed byte*) COSQ#12 (signed byte*) COSQ#0
Redundant Phi (signed byte*) SINQ#12 (signed byte*) SINQ#0
Redundant Phi (signed byte*) xr#13 (signed byte*) xr#0
Redundant Phi (signed byte*) yr#13 (signed byte*) yr#0
Redundant Phi (signed byte*) zr#13 (signed byte*) zr#0
Redundant Phi (signed byte*) COSH#7 (signed byte*) COSH#12
Redundant Phi (signed byte*) SINH#7 (signed byte*) SINH#12
Redundant Phi (signed byte*) COSQ#7 (signed byte*) COSQ#12
Redundant Phi (signed byte*) SINQ#7 (signed byte*) SINQ#12
Redundant Phi (signed byte*) xr#11 (signed byte*) xr#13
Redundant Phi (signed byte*) yr#11 (signed byte*) yr#13
Redundant Phi (signed byte*) zr#11 (signed byte*) zr#13
Redundant Phi (signed byte) anim::sx#12 (signed byte) anim::sx#6
Redundant Phi (signed byte) anim::sy#10 (signed byte) anim::sy#6
Redundant Phi (signed byte) anim::sz#10 (signed byte) anim::sz#6
Redundant Phi (signed byte*) COSH#16 (signed byte*) COSH#4
Redundant Phi (signed byte*) SINH#16 (signed byte*) SINH#4
Redundant Phi (signed byte*) COSQ#16 (signed byte*) COSQ#4
Redundant Phi (signed byte*) SINQ#16 (signed byte*) SINQ#4
Redundant Phi (signed byte*) xr#4 (signed byte*) xr#10
Redundant Phi (signed byte*) yr#4 (signed byte*) yr#10
Redundant Phi (signed byte*) zr#3 (signed byte*) zr#10
Redundant Phi (signed byte*) xr#1 (signed byte*) xr#4
Redundant Phi (signed byte*) yr#1 (signed byte*) yr#4
Redundant Phi (signed byte*) zr#12 (signed byte*) zr#3
Redundant Phi (signed byte) anim::sz#3 (signed byte) anim::sz#10
Redundant Phi (signed byte) anim::sy#3 (signed byte) anim::sy#10
Redundant Phi (signed byte) anim::sx#10 (signed byte) anim::sx#12
Redundant Phi (signed byte*) COSH#10 (signed byte*) COSH#16
Redundant Phi (signed byte*) SINH#10 (signed byte*) SINH#16
Redundant Phi (signed byte*) COSQ#10 (signed byte*) COSQ#16
Redundant Phi (signed byte*) SINQ#10 (signed byte*) SINQ#16
Redundant Phi (byte*) SPRITE#2 (byte*) SPRITE#3
Redundant Phi (byte*) SPRITE#1 (byte*) SPRITE#2
Redundant Phi (byte*) sprites_init::sprites_ptr#1 (byte*) sprites_init::sprites_ptr#0
Redundant Phi (signed byte) calculate_matrix::sy#1 (signed byte) calculate_matrix::sy#0
Redundant Phi (signed byte) calculate_matrix::sz#1 (signed byte) calculate_matrix::sz#0
Redundant Phi (signed byte) calculate_matrix::sx#1 (signed byte) calculate_matrix::sx#0
Redundant Phi (signed byte*) COSH#1 (signed byte*) COSH#16
Redundant Phi (signed byte*) SINH#1 (signed byte*) SINH#16
Redundant Phi (signed byte*) COSQ#1 (signed byte*) COSQ#16
Redundant Phi (signed byte*) SINQ#1 (signed byte*) SINQ#16
Redundant Phi (signed byte) rotate_matrix::x#1 (signed byte) rotate_matrix::x#0
Redundant Phi (signed byte*) xr#2 (signed byte*) xr#1
Redundant Phi (signed byte) rotate_matrix::y#1 (signed byte) rotate_matrix::y#0
Redundant Phi (signed byte*) yr#2 (signed byte*) yr#1
Redundant Phi (signed byte) rotate_matrix::z#1 (signed byte) rotate_matrix::z#0
Redundant Phi (signed byte*) zr#1 (signed byte*) zr#12
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) anim::$0 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@5
Simple Condition (bool~) anim::$11 if((byte) anim::i#1!=rangelast(0,7)) goto anim::@7
Simple Condition (bool~) anim::$14 if((byte~) anim::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto anim::@8
Simple Condition (bool~) sprites_init::$3 if((byte) sprites_init::i#1!=rangelast(0,7)) goto sprites_init::@1
Simple Condition (bool~) mulf_init::$11 if((byte) mulf_init::i#1!=rangelast(0,128)) goto mulf_init::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))53248
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))53249
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))53269
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) SPRITES_COLS#0 = ((byte*))53287
Constant (const byte) GREEN#0 = 5
Constant (const byte) LIGHT_BLUE#0 = 14
Constant (const signed byte/signed word/signed dword) $0 = -63
Constant (const signed byte/signed word/signed dword) $1 = -63
Constant (const signed byte/signed word/signed dword) $2 = -63
Constant (const signed byte/signed word/signed dword) $3 = -63
Constant (const signed byte/signed word/signed dword) $4 = -63
Constant (const signed byte/signed word/signed dword) $5 = -63
Constant (const signed byte/signed word/signed dword) $6 = -63
Constant (const signed byte/signed word/signed dword) $7 = -63
Constant (const signed byte/signed word/signed dword) $8 = -63
Constant (const signed byte/signed word/signed dword) $9 = -63
Constant (const signed byte/signed word/signed dword) $10 = -63
Constant (const signed byte/signed word/signed dword) $11 = -63
Constant (const signed byte) anim::sx#0 = 0
Constant (const signed byte) anim::sy#0 = 0
Constant (const signed byte) anim::sz#0 = 0
Constant (const byte) anim::i#0 = 0
Constant (const byte*) sprites_init::SCREEN#0 = ((byte*))1024
Constant (const byte) sprites_init::i#0 = 0
Constant (const signed byte[9]) rotation_matrix#0 = { fill( 9, 0) }
Constant (const signed byte*) xr#0 = ((signed byte*))240
Constant (const signed byte*) yr#0 = ((signed byte*))241
Constant (const signed byte*) zr#0 = ((signed byte*))242
Constant (const byte[512]) mulf_sqr1#0 = { fill( 512, 0) }
Constant (const byte[512]) mulf_sqr2#0 = { fill( 512, 0) }
Constant (const signed word) mulf_init::sqr#0 = 0
Constant (const signed word) mulf_init::add#0 = 1
Constant (const byte) mulf_init::i#0 = 0
Constant (const byte*) SPRITE#0 = ((byte*))12288
Constant (const signed byte*) COSH#0 = ((signed byte*))8192
Constant (const signed byte*) COSQ#0 = ((signed byte*))8704
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed byte[8]) xs#0 = { $0, $1, $2, $3, 63, 63, 63, 63 }
Constant (const signed byte[8]) ys#0 = { $4, $5, 63, 63, $6, $7, 63, 63 }
Constant (const signed byte[8]) zs#0 = { $8, 63, $9, 63, $10, 63, $11, 63 }
Constant (const byte*) sprites_init::sprites_ptr#0 = sprites_init::SCREEN#0+1016
Constant (const byte*) sprites_init::$1 = SPRITE#0/64
Constant (const byte*) mulf_init::$1 = mulf_sqr1#0+256
Constant (const byte*) mulf_init::$3 = mulf_sqr1#0+256
Constant (const byte*) mulf_init::$6 = mulf_sqr2#0+256
Constant (const byte*) mulf_init::$9 = mulf_sqr2#0+256
Constant (const signed byte*) SINH#0 = COSH#0+64
Constant (const signed byte*) SINQ#0 = COSQ#0+64
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_init::$2 = ((byte))sprites_init::$1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(rotation_matrix#0+0)
Consolidated array index constant in *(rotation_matrix#0+1)
Consolidated array index constant in *(rotation_matrix#0+2)
Consolidated array index constant in *(rotation_matrix#0+3)
Consolidated array index constant in *(rotation_matrix#0+4)
Consolidated array index constant in *(rotation_matrix#0+5)
Consolidated array index constant in *(rotation_matrix#0+6)
Consolidated array index constant in *(rotation_matrix#0+7)
Consolidated array index constant in *(rotation_matrix#0+8)
Consolidated array index constant in assignment *(mulf_sqr2#0+1 + mulf_init::$5)
Consolidated array index constant in assignment *(mulf_init::$6+1 + mulf_init::$7)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto anim::@2
Successful SSA optimization Pass2ConstantIfs
Inferred type updated to byte in (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte) mulf_init::i#2
Inferred type updated to byte in (byte/signed word/word/dword/signed dword~) mulf_init::$7 ← (byte) mulf_init::i#2
Eliminating Noop Cast (byte~) anim::$6 ← ((byte)) (signed byte~) anim::$5
Eliminating Noop Cast (byte~) anim::$9 ← ((byte)) (signed byte~) anim::$8
Successful SSA optimization Pass2NopCastElimination
Removing unused block anim::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value anim::i#1 ← ++ anim::i#2 to ++
Resolved ranged comparison value if(anim::i#1!=rangelast(0,7)) goto anim::@7 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value sprites_init::i#1 ← ++ sprites_init::i#2 to ++
Resolved ranged comparison value if(sprites_init::i#1!=rangelast(0,7)) goto sprites_init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value mulf_init::i#1 ← ++ mulf_init::i#2 to ++
Resolved ranged comparison value if(mulf_init::i#1!=rangelast(0,128)) goto mulf_init::@1 to (byte/word/signed word/dword/signed dword) 129
Culled Empty Block (label) @4
Culled Empty Block (label) anim::@2
Culled Empty Block (label) anim::@5
Culled Empty Block (label) anim::@18
Culled Empty Block (label) @6
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) mulf_init::i#2 = (byte~) mulf_init::$5 (byte~) mulf_init::$7 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (signed byte*) COSH#4
Self Phi Eliminated (signed byte*) SINH#4
Self Phi Eliminated (signed byte*) COSQ#4
Self Phi Eliminated (signed byte*) SINQ#4
Self Phi Eliminated (signed byte*) xr#10
Self Phi Eliminated (signed byte*) yr#10
Self Phi Eliminated (signed byte*) zr#10
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (signed byte*) COSH#4 (const signed byte*) COSH#0
Redundant Phi (signed byte*) SINH#4 (const signed byte*) SINH#0
Redundant Phi (signed byte*) COSQ#4 (const signed byte*) COSQ#0
Redundant Phi (signed byte*) SINQ#4 (const signed byte*) SINQ#0
Redundant Phi (signed byte*) xr#10 (const signed byte*) xr#0
Redundant Phi (signed byte*) yr#10 (const signed byte*) yr#0
Redundant Phi (signed byte*) zr#10 (const signed byte*) zr#0
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const signed byte) anim::sx#0
Inlining constant with var siblings (const signed byte) anim::sy#0
Inlining constant with var siblings (const signed byte) anim::sz#0
Inlining constant with var siblings (const byte) anim::i#0
Inlining constant with var siblings (const byte) sprites_init::i#0
Inlining constant with var siblings (const signed word) mulf_init::sqr#0
Inlining constant with var siblings (const signed word) mulf_init::add#0
Inlining constant with var siblings (const byte) mulf_init::i#0
Constant inlined $10 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined $11 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined mulf_init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::$1 = (const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256
Constant inlined $0 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined mulf_init::$3 = (const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256
Constant inlined $1 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined mulf_init::$6 = (const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256
Constant inlined $2 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined anim::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $3 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined $4 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined $5 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined $6 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined mulf_init::add#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined $7 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined $8 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined $9 = -(byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined anim::sy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined anim::sz#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined anim::sx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::sqr#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sprites_init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::$9 = (const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256
Constant inlined sprites_init::$1 = (const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined sprites_init::$2 = ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero rotation_matrix#0+0
Added new block during phi lifting anim::@20(between anim::@19 and anim::@7)
Added new block during phi lifting anim::@21(between anim::@14 and anim::@8)
Added new block during phi lifting mulf_init::@3(between mulf_init::@1 and mulf_init::@1)
Added new block during phi lifting sprites_init::@3(between sprites_init::@1 and sprites_init::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@17
Adding NOP phi() at start of mulf_init
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to sprites_init:7 mulf_init:9 anim:11 
Calls in [anim] to calculate_matrix:20 store_matrix:22 rotate_matrix:28 

Created 9 initial phi equivalence classes
Coalesced [43] anim::sx#16 ← anim::sx#1
Coalesced [46] anim::sx#14 ← anim::sx#11
Coalesced [47] anim::sy#14 ← anim::sy#1
Coalesced [48] anim::sz#14 ← anim::sz#1
Coalesced (already) [49] anim::sx#15 ← anim::sx#6
Coalesced [50] anim::i#4 ← anim::i#1
Coalesced [123] mulf_init::sqr#3 ← mulf_init::sqr#1
Coalesced [124] mulf_init::i#3 ← mulf_init::i#1
Coalesced [125] mulf_init::add#3 ← mulf_init::add#1
Coalesced [133] sprites_init::i#3 ← sprites_init::i#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) anim::@21
Culled Empty Block (label) anim::@20
Culled Empty Block (label) mulf_init::@3
Culled Empty Block (label) sprites_init::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@17
Adding NOP phi() at start of mulf_init

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@10
@10: scope:[]  from @begin
  kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  kickasm(location (const signed byte*) COSH#0) {{ {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  kickasm(location (const signed byte*) COSQ#0) {{ {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  [4] call main  [ ] ( )
  to:@end
@end: scope:[]  from @10
  [5] phi() [ ] ( )
main: scope:[main]  from @10
  asm { sei  }
  [7] call sprites_init  [ ] ( main:4 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [8] phi() [ ] ( main:4 [ ] )
  [9] call mulf_init  [ ] ( main:4 [ ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] phi() [ ] ( main:4 [ ] )
  [11] call anim  [ ] ( main:4 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [12] return  [ ] ( main:4 [ ] )
  to:@return
anim: scope:[anim]  from main::@2
  [13] phi() [ ] ( main:4::anim:11 [ ] )
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@8
  [14] (signed byte) anim::sz#6 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@8/(signed byte) anim::sz#1 ) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  [14] (signed byte) anim::sy#6 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@8/(signed byte) anim::sy#1 ) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  [14] (signed byte) anim::sx#6 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@8/(signed byte) anim::sx#11 ) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:anim::@4
anim::@4: scope:[anim]  from anim::@1 anim::@4
  [15] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:anim::@6
anim::@6: scope:[anim]  from anim::@4
  [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  [17] (signed byte) calculate_matrix::sx#0 ← (signed byte) anim::sx#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] )
  [18] (signed byte) calculate_matrix::sy#0 ← (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] )
  [19] (signed byte) calculate_matrix::sz#0 ← (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] )
  [20] call calculate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:anim::@17
anim::@17: scope:[anim]  from anim::@6
  [21] phi() [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  [22] call store_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:anim::@7
anim::@7: scope:[anim]  from anim::@17 anim::@19
  [23] (byte) anim::i#2 ← phi( anim::@17/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@19/(byte) anim::i#1 ) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
  [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
  [25] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] )
  [26] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] )
  [27] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] )
  [28] call rotate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
  to:anim::@19
anim::@19: scope:[anim]  from anim::@7
  [29] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] )
  [30] (signed byte~) anim::$5 ← *((const signed byte*) xr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] )
  [31] (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$5 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] )
  [32] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] )
  [33] (signed byte~) anim::$8 ← *((const signed byte*) yr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] )
  [34] (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$8 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] )
  [35] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$10 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
  [36] (byte) anim::i#1 ← ++ (byte) anim::i#2 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] )
  [37] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] )
  to:anim::@14
anim::@14: scope:[anim]  from anim::@19
  [38] (signed byte) anim::sz#1 ← ++ (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#1 ] )
  [39] (signed byte) anim::sy#1 ← -- (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] )
  [40] (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] )
  [41] if((byte~) anim::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto anim::@8 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] )
  to:anim::@15
anim::@15: scope:[anim]  from anim::@14
  [42] (signed byte) anim::sx#1 ← ++ (signed byte) anim::sx#6 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ( main:4::anim:11 [ anim::sy#1 anim::sz#1 anim::sx#1 ] )
  to:anim::@8
anim::@8: scope:[anim]  from anim::@14 anim::@15
  [43] (signed byte) anim::sx#11 ← phi( anim::@14/(signed byte) anim::sx#6 anim::@15/(signed byte) anim::sx#1 ) [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] )
  [44] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] )
  to:anim::@1
rotate_matrix: scope:[rotate_matrix]  from anim::@7
  [45] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 [ rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::y#0 rotate_matrix::z#0 ] )
  [46] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 [ rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::z#0 ] )
  [47] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
  asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
  to:rotate_matrix::@return
rotate_matrix::@return: scope:[rotate_matrix]  from rotate_matrix
  [49] return  [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
  to:@return
store_matrix: scope:[store_matrix]  from anim::@17
  asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
  to:store_matrix::@return
store_matrix::@return: scope:[store_matrix]  from store_matrix
  [51] return  [ ] ( main:4::anim:11::store_matrix:22 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:@return
calculate_matrix: scope:[calculate_matrix]  from anim::@6
  [52] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] )
  [53] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] )
  [54] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] )
  [55] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] )
  [56] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] )
  [57] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] )
  [58] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] )
  [59] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] )
  [60] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] )
  [61] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [62] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] )
  [63] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [64] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] )
  [65] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [66] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] )
  [67] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [68] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] )
  [69] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] )
  [70] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] )
  [71] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] )
  [72] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] )
  [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [74] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] )
  [75] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] )
  [76] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] )
  [77] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] )
  [78] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] )
  [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [80] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] )
  [81] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [82] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] )
  [83] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] )
  [84] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] )
  [85] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] )
  [86] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] )
  [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [88] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] )
  [89] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] )
  [90] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] )
  [91] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] )
  [92] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] )
  [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 [ calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 ] )
  [94] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::$34 ] )
  [95] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:calculate_matrix::@return
calculate_matrix::@return: scope:[calculate_matrix]  from calculate_matrix
  [96] return  [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
  to:@return
mulf_init: scope:[mulf_init]  from main::@1
  [97] phi() [ ] ( main:4::mulf_init:9 [ ] )
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  [98] (signed word) mulf_init::add#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 1 mulf_init::@1/(signed word) mulf_init::add#1 ) [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] )
  [98] (byte) mulf_init::i#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@1/(byte) mulf_init::i#1 ) [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] )
  [98] (signed word) mulf_init::sqr#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@1/(signed word) mulf_init::sqr#1 ) [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] )
  [99] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [100] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [101] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [102] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] )
  [103] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [104] (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] )
  [105] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [106] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [107] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [108] (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] )
  [109] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] )
  [110] (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] )
  [111] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] )
  [112] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] )
  [113] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] )
  [114] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] )
  [115] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] )
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  [116] return  [ ] ( main:4::mulf_init:9 [ ] )
  to:@return
sprites_init: scope:[sprites_init]  from main
  [117] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::sprites_init:7 [ ] )
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [118] (byte) sprites_init::i#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::i#1 ) [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] )
  [119] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] )
  [120] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] )
  [121] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] )
  [122] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] )
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [123] return  [ ] ( main:4::sprites_init:7 [ ] )
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(signed byte*) COSH
(signed byte*) COSQ
(byte) GREEN
(byte) LIGHT_BLUE
(byte*) RASTER
(signed byte*) SINH
(signed byte*) SINQ
(byte*) SPRITE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(void()) anim()
(byte/word/signed word/dword/signed dword~) anim::$10 202.0
(byte~) anim::$12 22.0
(signed byte~) anim::$5 101.0
(byte/word/signed word/dword/signed dword~) anim::$7 202.0
(signed byte~) anim::$8 101.0
(byte) anim::i
(byte) anim::i#1 151.5
(byte) anim::i#2 46.61538461538461
(byte) anim::i2
(byte) anim::i2#0 50.5
(signed byte) anim::sx
(signed byte) anim::sx#1 22.0
(signed byte) anim::sx#11 16.5
(signed byte) anim::sx#6 1.5714285714285714
(signed byte) anim::sy
(signed byte) anim::sy#1 5.5
(signed byte) anim::sy#6 1.32
(signed byte) anim::sz
(signed byte) anim::sz#1 3.142857142857143
(signed byte) anim::sz#6 1.375
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 4.0
(signed byte~) calculate_matrix::$11 4.0
(signed byte~) calculate_matrix::$12 4.0
(signed byte~) calculate_matrix::$13 4.0
(signed byte~) calculate_matrix::$14 4.0
(signed byte~) calculate_matrix::$15 4.0
(signed byte~) calculate_matrix::$16 4.0
(signed byte~) calculate_matrix::$17 4.0
(signed byte~) calculate_matrix::$18 4.0
(signed byte~) calculate_matrix::$19 4.0
(signed byte~) calculate_matrix::$20 4.0
(signed byte~) calculate_matrix::$21 4.0
(signed byte~) calculate_matrix::$22 4.0
(signed byte~) calculate_matrix::$23 4.0
(signed byte~) calculate_matrix::$24 4.0
(signed byte~) calculate_matrix::$25 4.0
(signed byte~) calculate_matrix::$26 4.0
(signed byte~) calculate_matrix::$27 4.0
(signed byte~) calculate_matrix::$28 4.0
(signed byte~) calculate_matrix::$29 4.0
(signed byte~) calculate_matrix::$30 4.0
(signed byte~) calculate_matrix::$31 4.0
(signed byte~) calculate_matrix::$32 4.0
(signed byte~) calculate_matrix::$33 4.0
(signed byte~) calculate_matrix::$34 4.0
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 2.25
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 1.4375
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::sz#0 4.75
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 0.8333333333333333
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 0.18181818181818182
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 0.9090909090909092
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 0.29411764705882354
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 0.30303030303030304
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 0.29411764705882354
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 0.3125
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 0.30303030303030304
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 0.30303030303030304
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 0.1764705882352941
(void()) main()
(void()) mulf_init()
(byte/signed word/word/dword/signed dword~) mulf_init::$10 22.0
(byte~) mulf_init::$2 22.0
(byte~) mulf_init::$4 22.0
(byte/signed word/word/dword/signed dword~) mulf_init::$8 22.0
(signed word) mulf_init::add
(signed word) mulf_init::add#1 7.333333333333333
(signed word) mulf_init::add#2 2.1999999999999997
(byte) mulf_init::i
(byte) mulf_init::i#1 16.5
(byte) mulf_init::i#2 6.875
(signed word) mulf_init::sqr
(signed word) mulf_init::sqr#1 5.5
(signed word) mulf_init::sqr#2 2.357142857142857
(byte) mulf_init::val
(byte) mulf_init::val#0 8.25
(byte[512]) mulf_sqr1
(byte[512]) mulf_sqr2
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 34.33333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 34.33333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 34.33333333333333
(signed byte[9]) rotation_matrix
(void()) sprites_init()
(byte*) sprites_init::SCREEN
(byte) sprites_init::i
(byte) sprites_init::i#1 16.5
(byte) sprites_init::i#2 14.666666666666666
(byte*) sprites_init::sprites_ptr
(void()) store_matrix()
(signed byte*) xr
(signed byte[8]) xs
(signed byte*) yr
(signed byte[8]) ys
(signed byte*) zr
(signed byte[8]) zs

Initial phi equivalence classes
[ anim::sx#6 anim::sx#11 anim::sx#1 ]
[ anim::sy#6 anim::sy#1 ]
[ anim::sz#6 anim::sz#1 ]
[ anim::i#2 anim::i#1 ]
[ mulf_init::sqr#2 mulf_init::sqr#1 ]
[ mulf_init::i#2 mulf_init::i#1 ]
[ mulf_init::add#2 mulf_init::add#1 ]
[ sprites_init::i#2 sprites_init::i#1 ]
Added variable calculate_matrix::sx#0 to zero page equivalence class [ calculate_matrix::sx#0 ]
Added variable calculate_matrix::sy#0 to zero page equivalence class [ calculate_matrix::sy#0 ]
Added variable calculate_matrix::sz#0 to zero page equivalence class [ calculate_matrix::sz#0 ]
Added variable rotate_matrix::x#0 to zero page equivalence class [ rotate_matrix::x#0 ]
Added variable rotate_matrix::y#0 to zero page equivalence class [ rotate_matrix::y#0 ]
Added variable rotate_matrix::z#0 to zero page equivalence class [ rotate_matrix::z#0 ]
Added variable anim::i2#0 to zero page equivalence class [ anim::i2#0 ]
Added variable anim::$5 to zero page equivalence class [ anim::$5 ]
Added variable anim::$7 to zero page equivalence class [ anim::$7 ]
Added variable anim::$8 to zero page equivalence class [ anim::$8 ]
Added variable anim::$10 to zero page equivalence class [ anim::$10 ]
Added variable anim::$12 to zero page equivalence class [ anim::$12 ]
Added variable calculate_matrix::t1#0 to zero page equivalence class [ calculate_matrix::t1#0 ]
Added variable calculate_matrix::t2#0 to zero page equivalence class [ calculate_matrix::t2#0 ]
Added variable calculate_matrix::t3#0 to zero page equivalence class [ calculate_matrix::t3#0 ]
Added variable calculate_matrix::t4#0 to zero page equivalence class [ calculate_matrix::t4#0 ]
Added variable calculate_matrix::t5#0 to zero page equivalence class [ calculate_matrix::t5#0 ]
Added variable calculate_matrix::t6#0 to zero page equivalence class [ calculate_matrix::t6#0 ]
Added variable calculate_matrix::t7#0 to zero page equivalence class [ calculate_matrix::t7#0 ]
Added variable calculate_matrix::t8#0 to zero page equivalence class [ calculate_matrix::t8#0 ]
Added variable calculate_matrix::t9#0 to zero page equivalence class [ calculate_matrix::t9#0 ]
Added variable calculate_matrix::t10#0 to zero page equivalence class [ calculate_matrix::t10#0 ]
Added variable calculate_matrix::$10 to zero page equivalence class [ calculate_matrix::$10 ]
Added variable calculate_matrix::$11 to zero page equivalence class [ calculate_matrix::$11 ]
Added variable calculate_matrix::$12 to zero page equivalence class [ calculate_matrix::$12 ]
Added variable calculate_matrix::$13 to zero page equivalence class [ calculate_matrix::$13 ]
Added variable calculate_matrix::$14 to zero page equivalence class [ calculate_matrix::$14 ]
Added variable calculate_matrix::$15 to zero page equivalence class [ calculate_matrix::$15 ]
Added variable calculate_matrix::$16 to zero page equivalence class [ calculate_matrix::$16 ]
Added variable calculate_matrix::$17 to zero page equivalence class [ calculate_matrix::$17 ]
Added variable calculate_matrix::$18 to zero page equivalence class [ calculate_matrix::$18 ]
Added variable calculate_matrix::$19 to zero page equivalence class [ calculate_matrix::$19 ]
Added variable calculate_matrix::$20 to zero page equivalence class [ calculate_matrix::$20 ]
Added variable calculate_matrix::$21 to zero page equivalence class [ calculate_matrix::$21 ]
Added variable calculate_matrix::$22 to zero page equivalence class [ calculate_matrix::$22 ]
Added variable calculate_matrix::$23 to zero page equivalence class [ calculate_matrix::$23 ]
Added variable calculate_matrix::$24 to zero page equivalence class [ calculate_matrix::$24 ]
Added variable calculate_matrix::$25 to zero page equivalence class [ calculate_matrix::$25 ]
Added variable calculate_matrix::$26 to zero page equivalence class [ calculate_matrix::$26 ]
Added variable calculate_matrix::$27 to zero page equivalence class [ calculate_matrix::$27 ]
Added variable calculate_matrix::$28 to zero page equivalence class [ calculate_matrix::$28 ]
Added variable calculate_matrix::$29 to zero page equivalence class [ calculate_matrix::$29 ]
Added variable calculate_matrix::$30 to zero page equivalence class [ calculate_matrix::$30 ]
Added variable calculate_matrix::$31 to zero page equivalence class [ calculate_matrix::$31 ]
Added variable calculate_matrix::$32 to zero page equivalence class [ calculate_matrix::$32 ]
Added variable calculate_matrix::$33 to zero page equivalence class [ calculate_matrix::$33 ]
Added variable calculate_matrix::$34 to zero page equivalence class [ calculate_matrix::$34 ]
Added variable mulf_init::val#0 to zero page equivalence class [ mulf_init::val#0 ]
Added variable mulf_init::$2 to zero page equivalence class [ mulf_init::$2 ]
Added variable mulf_init::$4 to zero page equivalence class [ mulf_init::$4 ]
Added variable mulf_init::$8 to zero page equivalence class [ mulf_init::$8 ]
Added variable mulf_init::$10 to zero page equivalence class [ mulf_init::$10 ]
Complete equivalence classes
[ anim::sx#6 anim::sx#11 anim::sx#1 ]
[ anim::sy#6 anim::sy#1 ]
[ anim::sz#6 anim::sz#1 ]
[ anim::i#2 anim::i#1 ]
[ mulf_init::sqr#2 mulf_init::sqr#1 ]
[ mulf_init::i#2 mulf_init::i#1 ]
[ mulf_init::add#2 mulf_init::add#1 ]
[ sprites_init::i#2 sprites_init::i#1 ]
[ calculate_matrix::sx#0 ]
[ calculate_matrix::sy#0 ]
[ calculate_matrix::sz#0 ]
[ rotate_matrix::x#0 ]
[ rotate_matrix::y#0 ]
[ rotate_matrix::z#0 ]
[ anim::i2#0 ]
[ anim::$5 ]
[ anim::$7 ]
[ anim::$8 ]
[ anim::$10 ]
[ anim::$12 ]
[ calculate_matrix::t1#0 ]
[ calculate_matrix::t2#0 ]
[ calculate_matrix::t3#0 ]
[ calculate_matrix::t4#0 ]
[ calculate_matrix::t5#0 ]
[ calculate_matrix::t6#0 ]
[ calculate_matrix::t7#0 ]
[ calculate_matrix::t8#0 ]
[ calculate_matrix::t9#0 ]
[ calculate_matrix::t10#0 ]
[ calculate_matrix::$10 ]
[ calculate_matrix::$11 ]
[ calculate_matrix::$12 ]
[ calculate_matrix::$13 ]
[ calculate_matrix::$14 ]
[ calculate_matrix::$15 ]
[ calculate_matrix::$16 ]
[ calculate_matrix::$17 ]
[ calculate_matrix::$18 ]
[ calculate_matrix::$19 ]
[ calculate_matrix::$20 ]
[ calculate_matrix::$21 ]
[ calculate_matrix::$22 ]
[ calculate_matrix::$23 ]
[ calculate_matrix::$24 ]
[ calculate_matrix::$25 ]
[ calculate_matrix::$26 ]
[ calculate_matrix::$27 ]
[ calculate_matrix::$28 ]
[ calculate_matrix::$29 ]
[ calculate_matrix::$30 ]
[ calculate_matrix::$31 ]
[ calculate_matrix::$32 ]
[ calculate_matrix::$33 ]
[ calculate_matrix::$34 ]
[ mulf_init::val#0 ]
[ mulf_init::$2 ]
[ mulf_init::$4 ]
[ mulf_init::$8 ]
[ mulf_init::$10 ]
Allocated zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ]
Allocated zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ]
Allocated zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ]
Allocated zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ]
Allocated zp ZP_WORD:6 [ mulf_init::sqr#2 mulf_init::sqr#1 ]
Allocated zp ZP_BYTE:8 [ mulf_init::i#2 mulf_init::i#1 ]
Allocated zp ZP_WORD:9 [ mulf_init::add#2 mulf_init::add#1 ]
Allocated zp ZP_BYTE:11 [ sprites_init::i#2 sprites_init::i#1 ]
Allocated zp ZP_BYTE:12 [ calculate_matrix::sx#0 ]
Allocated zp ZP_BYTE:13 [ calculate_matrix::sy#0 ]
Allocated zp ZP_BYTE:14 [ calculate_matrix::sz#0 ]
Allocated zp ZP_BYTE:15 [ rotate_matrix::x#0 ]
Allocated zp ZP_BYTE:16 [ rotate_matrix::y#0 ]
Allocated zp ZP_BYTE:17 [ rotate_matrix::z#0 ]
Allocated zp ZP_BYTE:18 [ anim::i2#0 ]
Allocated zp ZP_BYTE:19 [ anim::$5 ]
Allocated zp ZP_BYTE:20 [ anim::$7 ]
Allocated zp ZP_BYTE:21 [ anim::$8 ]
Allocated zp ZP_BYTE:22 [ anim::$10 ]
Allocated zp ZP_BYTE:23 [ anim::$12 ]
Allocated zp ZP_BYTE:24 [ calculate_matrix::t1#0 ]
Allocated zp ZP_BYTE:25 [ calculate_matrix::t2#0 ]
Allocated zp ZP_BYTE:26 [ calculate_matrix::t3#0 ]
Allocated zp ZP_BYTE:27 [ calculate_matrix::t4#0 ]
Allocated zp ZP_BYTE:28 [ calculate_matrix::t5#0 ]
Allocated zp ZP_BYTE:29 [ calculate_matrix::t6#0 ]
Allocated zp ZP_BYTE:30 [ calculate_matrix::t7#0 ]
Allocated zp ZP_BYTE:31 [ calculate_matrix::t8#0 ]
Allocated zp ZP_BYTE:32 [ calculate_matrix::t9#0 ]
Allocated zp ZP_BYTE:33 [ calculate_matrix::t10#0 ]
Allocated zp ZP_BYTE:34 [ calculate_matrix::$10 ]
Allocated zp ZP_BYTE:35 [ calculate_matrix::$11 ]
Allocated zp ZP_BYTE:36 [ calculate_matrix::$12 ]
Allocated zp ZP_BYTE:37 [ calculate_matrix::$13 ]
Allocated zp ZP_BYTE:38 [ calculate_matrix::$14 ]
Allocated zp ZP_BYTE:39 [ calculate_matrix::$15 ]
Allocated zp ZP_BYTE:40 [ calculate_matrix::$16 ]
Allocated zp ZP_BYTE:41 [ calculate_matrix::$17 ]
Allocated zp ZP_BYTE:42 [ calculate_matrix::$18 ]
Allocated zp ZP_BYTE:43 [ calculate_matrix::$19 ]
Allocated zp ZP_BYTE:44 [ calculate_matrix::$20 ]
Allocated zp ZP_BYTE:45 [ calculate_matrix::$21 ]
Allocated zp ZP_BYTE:46 [ calculate_matrix::$22 ]
Allocated zp ZP_BYTE:47 [ calculate_matrix::$23 ]
Allocated zp ZP_BYTE:48 [ calculate_matrix::$24 ]
Allocated zp ZP_BYTE:49 [ calculate_matrix::$25 ]
Allocated zp ZP_BYTE:50 [ calculate_matrix::$26 ]
Allocated zp ZP_BYTE:51 [ calculate_matrix::$27 ]
Allocated zp ZP_BYTE:52 [ calculate_matrix::$28 ]
Allocated zp ZP_BYTE:53 [ calculate_matrix::$29 ]
Allocated zp ZP_BYTE:54 [ calculate_matrix::$30 ]
Allocated zp ZP_BYTE:55 [ calculate_matrix::$31 ]
Allocated zp ZP_BYTE:56 [ calculate_matrix::$32 ]
Allocated zp ZP_BYTE:57 [ calculate_matrix::$33 ]
Allocated zp ZP_BYTE:58 [ calculate_matrix::$34 ]
Allocated zp ZP_BYTE:59 [ mulf_init::val#0 ]
Allocated zp ZP_BYTE:60 [ mulf_init::$2 ]
Allocated zp ZP_BYTE:61 [ mulf_init::$4 ]
Allocated zp ZP_BYTE:62 [ mulf_init::$8 ]
Allocated zp ZP_BYTE:63 [ mulf_init::$10 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label SPRITE = $3000
  .label COSH = $2000
  .label COSQ = $2200
  .label SINH = COSH+$40
  .label SINQ = COSQ+$40
//SEG2 @begin
bbegin:
  jmp b10
//SEG3 @10
b10:
//SEG4 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG5 kickasm(location (const signed byte*) COSH#0) {{ {     .var min = -$1fff     .var max = $1fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG6 kickasm(location (const signed byte*) COSQ#0) {{ {     .var min = -$0fff     .var max = $0fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG7 [4] call main  [ ] ( )
  jsr main
//SEG8 [5] phi from @10 to @end [phi:@10->@end]
bend_from_b10:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 asm { sei  }
    sei
  //SEG12 [7] call sprites_init  [ ] ( main:4 [ ] )
    jsr sprites_init
  //SEG13 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [9] call mulf_init  [ ] ( main:4 [ ] )
  //SEG16 [97] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
  mulf_init_from_b1:
    jsr mulf_init
  //SEG17 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [11] call anim  [ ] ( main:4 [ ] )
  //SEG20 [13] phi from main::@2 to anim [phi:main::@2->anim]
  anim_from_b2:
    jsr anim
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [12] return  [ ] ( main:4 [ ] )
    rts
}
//SEG23 anim
anim: {
    .label _5 = $13
    .label _7 = $14
    .label _8 = $15
    .label _10 = $16
    .label _12 = $17
    .label i2 = $12
    .label i = 5
    .label sz = 4
    .label sy = 3
    .label sx = 2
  //SEG24 [14] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG25 [14] phi (signed byte) anim::sz#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta sz
  //SEG26 [14] phi (signed byte) anim::sy#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#1] -- vbsz1=vbuc1 
    lda #0
    sta sy
  //SEG27 [14] phi (signed byte) anim::sx#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#2] -- vbsz1=vbuc1 
    lda #0
    sta sx
    jmp b1
  //SEG28 anim::@1
  b1:
    jmp b4
  //SEG29 anim::@4
  b4:
  //SEG30 [15] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG31 anim::@6
  b6:
  //SEG32 [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG33 [17] (signed byte) calculate_matrix::sx#0 ← (signed byte) anim::sx#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ) -- vbsz1=vbsz2 
    lda sx
    sta calculate_matrix.sx
  //SEG34 [18] (signed byte) calculate_matrix::sy#0 ← (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] ) -- vbsz1=vbsz2 
    lda sy
    sta calculate_matrix.sy
  //SEG35 [19] (signed byte) calculate_matrix::sz#0 ← (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ) -- vbsz1=vbsz2 
    lda sz
    sta calculate_matrix.sz
  //SEG36 [20] call calculate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    jsr calculate_matrix
  //SEG37 [21] phi from anim::@6 to anim::@17 [phi:anim::@6->anim::@17]
  b17_from_b6:
    jmp b17
  //SEG38 anim::@17
  b17:
  //SEG39 [22] call store_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    jsr store_matrix
  //SEG40 [23] phi from anim::@17 to anim::@7 [phi:anim::@17->anim::@7]
  b7_from_b17:
  //SEG41 [23] phi (byte) anim::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@17->anim::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b7
  //SEG42 [23] phi from anim::@19 to anim::@7 [phi:anim::@19->anim::@7]
  b7_from_b19:
  //SEG43 [23] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@19->anim::@7#0] -- register_copy 
    jmp b7
  //SEG44 anim::@7
  b7:
  //SEG45 [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG46 [25] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta rotate_matrix.x
  //SEG47 [26] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda ys,y
    sta rotate_matrix.y
  //SEG48 [27] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda zs,y
    sta rotate_matrix.z
  //SEG49 [28] call rotate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
    jsr rotate_matrix
    jmp b19
  //SEG50 anim::@19
  b19:
  //SEG51 [29] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta i2
  //SEG52 [30] (signed byte~) anim::$5 ← *((const signed byte*) xr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ) -- vbsz1=_deref_pbsc1_ror_1 
    lda xr
    cmp #$80
    ror
    sta _5
  //SEG53 [31] (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$5 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ) -- vbuz1=vbuc1_plus_vbuz2 
    lda #$80
    clc
    adc _5
    sta _7
  //SEG54 [32] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _7
    ldy i2
    sta SPRITES_XPOS,y
  //SEG55 [33] (signed byte~) anim::$8 ← *((const signed byte*) yr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ) -- vbsz1=_deref_pbsc1_ror_1 
    lda yr
    cmp #$80
    ror
    sta _8
  //SEG56 [34] (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$8 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ) -- vbuz1=vbuc1_plus_vbuz2 
    lda #$80
    clc
    adc _8
    sta _10
  //SEG57 [35] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$10 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _10
    ldy i2
    sta SPRITES_YPOS,y
  //SEG58 [36] (byte) anim::i#1 ← ++ (byte) anim::i#2 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG59 [37] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b7_from_b19
    jmp b14
  //SEG60 anim::@14
  b14:
  //SEG61 [38] (signed byte) anim::sz#1 ← ++ (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ) -- vbsz1=_inc_vbsz1 
    inc sz
  //SEG62 [39] (signed byte) anim::sy#1 ← -- (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ) -- vbsz1=_dec_vbsz1 
    dec sy
  //SEG63 [40] (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ) -- vbuz1=vbsz2_band_vbuc1 
    lda sy
    and #1
    sta _12
  //SEG64 [41] if((byte~) anim::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto anim::@8 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ) -- vbuz1_neq_0_then_la1 
    lda _12
    bne b8_from_b14
    jmp b15
  //SEG65 anim::@15
  b15:
  //SEG66 [42] (signed byte) anim::sx#1 ← ++ (signed byte) anim::sx#6 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ( main:4::anim:11 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ) -- vbsz1=_inc_vbsz1 
    inc sx
  //SEG67 [43] phi from anim::@14 anim::@15 to anim::@8 [phi:anim::@14/anim::@15->anim::@8]
  b8_from_b14:
  b8_from_b15:
  //SEG68 [43] phi (signed byte) anim::sx#11 = (signed byte) anim::sx#6 [phi:anim::@14/anim::@15->anim::@8#0] -- register_copy 
    jmp b8
  //SEG69 anim::@8
  b8:
  //SEG70 [44] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ) -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG71 [14] phi from anim::@8 to anim::@1 [phi:anim::@8->anim::@1]
  b1_from_b8:
  //SEG72 [14] phi (signed byte) anim::sz#6 = (signed byte) anim::sz#1 [phi:anim::@8->anim::@1#0] -- register_copy 
  //SEG73 [14] phi (signed byte) anim::sy#6 = (signed byte) anim::sy#1 [phi:anim::@8->anim::@1#1] -- register_copy 
  //SEG74 [14] phi (signed byte) anim::sx#6 = (signed byte) anim::sx#11 [phi:anim::@8->anim::@1#2] -- register_copy 
    jmp b1
}
//SEG75 rotate_matrix
rotate_matrix: {
    .label x = $f
    .label y = $10
    .label z = $11
  //SEG76 [45] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 [ rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::y#0 rotate_matrix::z#0 ] ) -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG77 [46] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 [ rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::z#0 ] ) -- _deref_pbsc1=vbsz1 
    lda y
    sta yr
  //SEG78 [47] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- _deref_pbsc1=vbsz1 
    lda z
    sta zr
  //SEG79 asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
    clc
    ldx zr
  C1:
    lda mulf_sqr1,x
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  C3:
    lda #0
  A1:
    adc mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
  B1:
    adc mulf_sqr1,y
  B2:
    sbc mulf_sqr2,y
    sta xr
  F3:
    lda #0
  D1:
    adc mulf_sqr1,x
  D2:
    sbc mulf_sqr2,x
  E1:
    adc mulf_sqr1,y
  E2:
    sbc mulf_sqr2,y
    sta yr
  I3:
    lda #0
  G1:
    adc mulf_sqr1,x
  G2:
    sbc mulf_sqr2,x
  H1:
    adc mulf_sqr1,y
  H2:
    sbc mulf_sqr2,y
    sta zr
    jmp breturn
  //SEG80 rotate_matrix::@return
  breturn:
  //SEG81 [49] return  [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
    rts
}
//SEG82 store_matrix
store_matrix: {
  //SEG83 asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    jmp breturn
  //SEG84 store_matrix::@return
  breturn:
  //SEG85 [51] return  [ ] ( main:4::anim:11::store_matrix:22 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    rts
}
//SEG86 calculate_matrix
calculate_matrix: {
    .label _10 = $22
    .label _11 = $23
    .label _12 = $24
    .label _13 = $25
    .label _14 = $26
    .label _15 = $27
    .label _16 = $28
    .label _17 = $29
    .label _18 = $2a
    .label _19 = $2b
    .label _20 = $2c
    .label _21 = $2d
    .label _22 = $2e
    .label _23 = $2f
    .label _24 = $30
    .label _25 = $31
    .label _26 = $32
    .label _27 = $33
    .label _28 = $34
    .label _29 = $35
    .label _30 = $36
    .label _31 = $37
    .label _32 = $38
    .label _33 = $39
    .label _34 = $3a
    .label sx = $c
    .label sy = $d
    .label sz = $e
    .label t1 = $18
    .label t2 = $19
    .label t3 = $1a
    .label t4 = $1b
    .label t5 = $1c
    .label t6 = $1d
    .label t7 = $1e
    .label t8 = $1f
    .label t9 = $20
    .label t10 = $21
  //SEG87 [52] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ) -- vbsz1=vbsz2_minus_vbsz3 
    lda sy
    sec
    sbc sz
    sta t1
  //SEG88 [53] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) -- vbsz1=vbsz2_plus_vbsz3 
    lda sy
    clc
    adc sz
    sta t2
  //SEG89 [54] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ) -- vbsz1=vbsz2_plus_vbsz3 
    lda sx
    clc
    adc sz
    sta t3
  //SEG90 [55] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ) -- vbsz1=vbsz2_minus_vbsz3 
    lda sx
    sec
    sbc sz
    sta t4
  //SEG91 [56] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) -- vbsz1=vbsz2_plus_vbsz3 
    lda sx
    clc
    adc t2
    sta t5
  //SEG92 [57] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) -- vbsz1=vbsz2_minus_vbsz3 
    lda sx
    sec
    sbc t1
    sta t6
  //SEG93 [58] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) -- vbsz1=vbsz2_plus_vbsz3 
    lda sx
    clc
    adc t1
    sta t7
  //SEG94 [59] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) -- vbsz1=vbsz2_minus_vbsz3 
    lda t2
    sec
    sbc sx
    sta t8
  //SEG95 [60] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) -- vbsz1=vbsz2_minus_vbsz3 
    lda sy
    sec
    sbc sx
    sta t9
  //SEG96 [61] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- vbsz1=vbsz2_plus_vbsz3 
    lda sy
    clc
    adc sx
    sta t10
  //SEG97 [62] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t1
    ldy t2
    clc
    lda COSH,x
    adc COSH,y
    sta _10
  //SEG98 [63] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _10
    sta rotation_matrix
  //SEG99 [64] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t1
    ldy t2
    sec
    lda SINH,x
    sbc SINH,y
    sta _11
  //SEG100 [65] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _11
    sta rotation_matrix+1
  //SEG101 [66] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz2 
    ldy sy
    clc
    lda SINH,y
    adc SINH,y
    sta _12
  //SEG102 [67] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _12
    sta rotation_matrix+2
  //SEG103 [68] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t3
    ldy t4
    sec
    lda SINH,x
    sbc SINH,y
    sta _13
  //SEG104 [69] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _13
    ldy t6
    clc
    adc COSQ,y
    sta _14
  //SEG105 [70] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _14
    ldy t5
    sec
    sbc COSQ,y
    sta _15
  //SEG106 [71] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _15
    ldy t8
    clc
    adc COSQ,y
    sta _16
  //SEG107 [72] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _16
    ldy t7
    sec
    sbc COSQ,y
    sta _17
  //SEG108 [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _17
    sta rotation_matrix+3
  //SEG109 [74] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t3
    ldy t4
    clc
    lda COSH,x
    adc COSH,y
    sta _18
  //SEG110 [75] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _18
    ldy t5
    clc
    adc SINQ,y
    sta _19
  //SEG111 [76] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _19
    ldy t6
    sec
    sbc SINQ,y
    sta _20
  //SEG112 [77] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _20
    ldy t7
    sec
    sbc SINQ,y
    sta _21
  //SEG113 [78] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _21
    ldy t8
    sec
    sbc SINQ,y
    sta _22
  //SEG114 [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _22
    sta rotation_matrix+4
  //SEG115 [80] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t9
    ldy t10
    sec
    lda SINH,x
    sbc SINH,y
    sta _23
  //SEG116 [81] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _23
    sta rotation_matrix+5
  //SEG117 [82] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t4
    ldy t3
    sec
    lda COSH,x
    sbc COSH,y
    sta _24
  //SEG118 [83] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _24
    ldy t6
    clc
    adc SINQ,y
    sta _25
  //SEG119 [84] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _25
    ldy t5
    sec
    sbc SINQ,y
    sta _26
  //SEG120 [85] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _26
    ldy t8
    sec
    sbc SINQ,y
    sta _27
  //SEG121 [86] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _27
    ldy t7
    sec
    sbc SINQ,y
    sta _28
  //SEG122 [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _28
    sta rotation_matrix+6
  //SEG123 [88] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t3
    ldy t4
    clc
    lda SINH,x
    adc SINH,y
    sta _29
  //SEG124 [89] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _29
    ldy t6
    clc
    adc COSQ,y
    sta _30
  //SEG125 [90] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _30
    ldy t5
    sec
    sbc COSQ,y
    sta _31
  //SEG126 [91] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _31
    ldy t7
    clc
    adc COSQ,y
    sta _32
  //SEG127 [92] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _32
    ldy t8
    sec
    sbc COSQ,y
    sta _33
  //SEG128 [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 [ calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsz1 
    lda _33
    sta rotation_matrix+7
  //SEG129 [94] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::$34 ] ) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t9
    ldy t10
    clc
    lda COSH,x
    adc COSH,y
    sta _34
  //SEG130 [95] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbsc1=vbsz1 
    lda _34
    sta rotation_matrix+8
    jmp breturn
  //SEG131 calculate_matrix::@return
  breturn:
  //SEG132 [96] return  [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    rts
}
//SEG133 mulf_init
mulf_init: {
    .label _2 = $3c
    .label _4 = $3d
    .label _8 = $3e
    .label _10 = $3f
    .label val = $3b
    .label sqr = 6
    .label add = 9
    .label i = 8
  //SEG134 [98] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG135 [98] phi (signed word) mulf_init::add#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vbuc1 
    lda #<1
    sta add
    lda #>1
    sta add+1
  //SEG136 [98] phi (byte) mulf_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG137 [98] phi (signed word) mulf_init::sqr#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
    jmp b1
  //SEG138 [98] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  b1_from_b1:
  //SEG139 [98] phi (signed word) mulf_init::add#2 = (signed word) mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
  //SEG140 [98] phi (byte) mulf_init::i#2 = (byte) mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
  //SEG141 [98] phi (signed word) mulf_init::sqr#2 = (signed word) mulf_init::sqr#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
    jmp b1
  //SEG142 mulf_init::@1
  b1:
  //SEG143 [99] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr+1
    sta val
  //SEG144 [100] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy i
    sta mulf_sqr1,y
  //SEG145 [101] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy i
    sta mulf_sqr1+$100,y
  //SEG146 [102] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ) -- vbuz1=_neg_vbuz2 
    lda i
    eor #$ff
    clc
    adc #1
    sta _2
  //SEG147 [103] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy _2
    sta mulf_sqr1,y
  //SEG148 [104] (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ) -- vbuz1=_neg_vbuz2 
    lda i
    eor #$ff
    clc
    adc #1
    sta _4
  //SEG149 [105] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy _4
    sta mulf_sqr1+$100,y
  //SEG150 [106] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy i
    sta mulf_sqr2+1,y
  //SEG151 [107] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy i
    sta mulf_sqr2+$100+1,y
  //SEG152 [108] (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ) -- vbuz1=vbuc1_minus_vbuz2 
    lda #1
    sec
    sbc i
    sta _8
  //SEG153 [109] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy _8
    sta mulf_sqr2,y
  //SEG154 [110] (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ) -- vbuz1=vbuc1_minus_vbuz2 
    lda #1
    sec
    sbc i
    sta _10
  //SEG155 [111] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda val
    ldy _10
    sta mulf_sqr2+$100,y
  //SEG156 [112] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda sqr
    clc
    adc add
    sta sqr
    lda sqr+1
    adc add+1
    sta sqr+1
  //SEG157 [113] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ) -- vwsz1=vwsz1_plus_2 
    lda add
    clc
    adc #2
    sta add
    bcc !+
    inc add+1
  !:
  //SEG158 [114] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG159 [115] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$81
    bne b1_from_b1
    jmp breturn
  //SEG160 mulf_init::@return
  breturn:
  //SEG161 [116] return  [ ] ( main:4::mulf_init:9 [ ] )
    rts
}
//SEG162 sprites_init
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
    .label i = $b
  //SEG163 [117] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::sprites_init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG164 [118] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
  //SEG165 [118] phi (byte) sprites_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG166 [118] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
  //SEG167 [118] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    jmp b1
  //SEG168 sprites_init::@1
  b1:
  //SEG169 [119] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #$ff&SPRITE/$40
    sta sprites_ptr,y
  //SEG170 [120] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #GREEN
    sta SPRITES_COLS,y
  //SEG171 [121] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG172 [122] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b1
    jmp breturn
  //SEG173 sprites_init::@return
  breturn:
  //SEG174 [123] return  [ ] ( main:4::sprites_init:7 [ ] )
    rts
}
  rotation_matrix: .fill 9, 0
  .align $100
  mulf_sqr1: .fill $200, 0
  .align $100
  mulf_sqr2: .fill $200, 0
  xs: .byte -$3f, -$3f, -$3f, -$3f, $3f, $3f, $3f, $3f
  ys: .byte -$3f, -$3f, $3f, $3f, -$3f, -$3f, $3f, $3f
  zs: .byte -$3f, $3f, -$3f, $3f, -$3f, $3f, -$3f, $3f
.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)

.pc = COSH "Inline"
  {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = COSQ "Inline"
  {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ]
Statement [29] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ]
Statement [30] (signed byte~) anim::$5 ← *((const signed byte*) xr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ anim::i2#0 ]
Statement [31] (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$5 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ) always clobbers reg byte a 
Statement [33] (signed byte~) anim::$8 ← *((const signed byte*) yr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ) always clobbers reg byte a 
Statement [34] (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$8 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ) always clobbers reg byte a 
Statement [40] (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ) always clobbers reg byte a 
Statement [44] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ) always clobbers reg byte a 
Statement asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ]
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement [52] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ calculate_matrix::sx#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ calculate_matrix::sy#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ calculate_matrix::sz#0 ]
Statement [53] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ calculate_matrix::t1#0 ]
Statement [54] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ calculate_matrix::t2#0 ]
Statement [55] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ calculate_matrix::t3#0 ]
Statement [56] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ calculate_matrix::t4#0 ]
Statement [57] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:28 [ calculate_matrix::t5#0 ]
Statement [58] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ calculate_matrix::t6#0 ]
Statement [59] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ calculate_matrix::t7#0 ]
Statement [60] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ calculate_matrix::t8#0 ]
Statement [61] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ calculate_matrix::t9#0 ]
Statement [62] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ calculate_matrix::t10#0 ]
Statement [64] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) always clobbers reg byte a 
Statement [66] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) always clobbers reg byte a 
Statement [68] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) always clobbers reg byte a 
Statement [69] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) always clobbers reg byte a 
Potential register analysis [70] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [70] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [70] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) always clobbers reg byte a 
Statement [71] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) always clobbers reg byte a 
Potential register analysis [72] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$16 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
Potential register analysis [72] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$16 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [72] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) always clobbers reg byte a 
Statement [74] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) always clobbers reg byte a 
Statement [75] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) always clobbers reg byte a 
Potential register analysis [76] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t6#0 ] reg byte x [ calculate_matrix::$19 ] 
Potential register analysis [76] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t6#0 ] reg byte y [ calculate_matrix::$19 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [76] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) always clobbers reg byte a 
Potential register analysis [77] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$21 ] reg byte x [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t7#0 ] 
Potential register analysis [77] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$21 ] reg byte y [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t7#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [77] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) always clobbers reg byte a 
Potential register analysis [78] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [78] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [78] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) always clobbers reg byte a 
Statement [80] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) always clobbers reg byte a 
Statement [82] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) always clobbers reg byte a 
Statement [83] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) always clobbers reg byte a 
Potential register analysis [84] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [84] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [84] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) always clobbers reg byte a 
Potential register analysis [85] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [85] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [85] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) always clobbers reg byte a 
Potential register analysis [86] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
Potential register analysis [86] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [86] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) always clobbers reg byte a 
Statement [88] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) always clobbers reg byte a 
Statement [89] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) always clobbers reg byte a 
Potential register analysis [90] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$31 ] reg byte x [ calculate_matrix::t5#0 ] reg byte x [ calculate_matrix::$30 ] 
Potential register analysis [90] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$31 ] reg byte y [ calculate_matrix::t5#0 ] reg byte y [ calculate_matrix::$30 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [90] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) always clobbers reg byte a 
Statement [91] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) always clobbers reg byte a 
Potential register analysis [92] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [92] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [92] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) always clobbers reg byte a 
Statement [94] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::$34 ] ) always clobbers reg byte a 
Statement [99] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ mulf_init::i#2 mulf_init::i#1 ]
Statement [102] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:59 [ mulf_init::val#0 ]
Statement [103] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [104] (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ) always clobbers reg byte a 
Statement [105] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [106] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [107] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [108] (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ) always clobbers reg byte a 
Statement [109] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [110] (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ) always clobbers reg byte a 
Statement [111] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ) always clobbers reg byte a 
Statement [112] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ) always clobbers reg byte a 
Statement [113] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ) always clobbers reg byte a 
Statement [117] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::sprites_init:7 [ ] ) always clobbers reg byte a 
Statement [119] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ sprites_init::i#2 sprites_init::i#1 ]
Statement [120] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Statement [15] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) always clobbers reg byte a 
Statement [29] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) always clobbers reg byte a 
Statement [30] (signed byte~) anim::$5 ← *((const signed byte*) xr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ) always clobbers reg byte a 
Statement [31] (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$5 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ) always clobbers reg byte a 
Statement [33] (signed byte~) anim::$8 ← *((const signed byte*) yr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ) always clobbers reg byte a 
Statement [34] (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$8 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ) always clobbers reg byte a 
Statement [37] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) always clobbers reg byte a 
Statement [40] (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ) always clobbers reg byte a 
Statement [44] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ) always clobbers reg byte a 
Statement asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement [52] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ) always clobbers reg byte a 
Statement [53] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) always clobbers reg byte a 
Statement [54] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ) always clobbers reg byte a 
Statement [55] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ) always clobbers reg byte a 
Statement [56] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) always clobbers reg byte a 
Statement [57] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) always clobbers reg byte a 
Statement [58] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) always clobbers reg byte a 
Statement [59] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) always clobbers reg byte a 
Statement [60] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) always clobbers reg byte a 
Statement [61] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) always clobbers reg byte a 
Statement [62] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) always clobbers reg byte a 
Statement [64] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) always clobbers reg byte a 
Statement [66] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) always clobbers reg byte a 
Statement [68] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) always clobbers reg byte a 
Statement [69] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) always clobbers reg byte a 
Potential register analysis [70] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [70] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [70] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) always clobbers reg byte a 
Statement [71] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) always clobbers reg byte a 
Potential register analysis [72] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$16 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
Potential register analysis [72] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$16 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [72] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) always clobbers reg byte a 
Statement [74] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) always clobbers reg byte a 
Statement [75] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) always clobbers reg byte a 
Potential register analysis [76] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t6#0 ] reg byte x [ calculate_matrix::$19 ] 
Potential register analysis [76] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t6#0 ] reg byte y [ calculate_matrix::$19 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [76] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) always clobbers reg byte a 
Potential register analysis [77] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$21 ] reg byte x [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t7#0 ] 
Potential register analysis [77] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$21 ] reg byte y [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t7#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [77] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) always clobbers reg byte a 
Potential register analysis [78] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [78] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [78] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) always clobbers reg byte a 
Statement [80] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) always clobbers reg byte a 
Statement [82] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) always clobbers reg byte a 
Statement [83] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) always clobbers reg byte a 
Potential register analysis [84] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [84] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [84] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) always clobbers reg byte a 
Potential register analysis [85] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [85] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [85] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) always clobbers reg byte a 
Potential register analysis [86] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
Potential register analysis [86] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [86] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) always clobbers reg byte a 
Statement [88] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) always clobbers reg byte a 
Statement [89] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) always clobbers reg byte a 
Potential register analysis [90] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$31 ] reg byte x [ calculate_matrix::t5#0 ] reg byte x [ calculate_matrix::$30 ] 
Potential register analysis [90] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$31 ] reg byte y [ calculate_matrix::t5#0 ] reg byte y [ calculate_matrix::$30 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [90] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) always clobbers reg byte a 
Statement [91] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) always clobbers reg byte a 
Potential register analysis [92] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [92] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [92] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) always clobbers reg byte a 
Statement [94] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::$34 ] ) always clobbers reg byte a 
Statement [99] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [100] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [101] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [102] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ) always clobbers reg byte a 
Statement [103] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [104] (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ) always clobbers reg byte a 
Statement [105] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [106] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [107] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [108] (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ) always clobbers reg byte a 
Statement [109] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) always clobbers reg byte a 
Statement [110] (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ) always clobbers reg byte a 
Statement [111] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ) always clobbers reg byte a 
Statement [112] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ) always clobbers reg byte a 
Statement [113] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ) always clobbers reg byte a 
Statement [117] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::sprites_init:7 [ ] ) always clobbers reg byte a 
Statement [119] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Statement [120] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ] : zp ZP_BYTE:3 , 
Potential registers zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ] : zp ZP_BYTE:4 , 
Potential registers zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ] : zp ZP_BYTE:5 , 
Potential registers zp ZP_WORD:6 [ mulf_init::sqr#2 mulf_init::sqr#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_BYTE:8 [ mulf_init::i#2 mulf_init::i#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:9 [ mulf_init::add#2 mulf_init::add#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ sprites_init::i#2 sprites_init::i#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ calculate_matrix::sx#0 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ calculate_matrix::sy#0 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ calculate_matrix::sz#0 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ rotate_matrix::x#0 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ rotate_matrix::y#0 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ rotate_matrix::z#0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ anim::i2#0 ] : zp ZP_BYTE:18 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ anim::$5 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ anim::$7 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ anim::$8 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ anim::$10 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ anim::$12 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ calculate_matrix::t1#0 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ calculate_matrix::t2#0 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ calculate_matrix::t3#0 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ calculate_matrix::t4#0 ] : zp ZP_BYTE:27 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ calculate_matrix::t5#0 ] : zp ZP_BYTE:28 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ calculate_matrix::t6#0 ] : zp ZP_BYTE:29 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ calculate_matrix::t7#0 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ calculate_matrix::t8#0 ] : zp ZP_BYTE:31 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ calculate_matrix::t9#0 ] : zp ZP_BYTE:32 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ calculate_matrix::t10#0 ] : zp ZP_BYTE:33 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ calculate_matrix::$10 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ calculate_matrix::$11 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ calculate_matrix::$12 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ calculate_matrix::$13 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ calculate_matrix::$14 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ calculate_matrix::$15 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ calculate_matrix::$16 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ calculate_matrix::$17 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ calculate_matrix::$18 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ calculate_matrix::$19 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ calculate_matrix::$20 ] : zp ZP_BYTE:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ calculate_matrix::$21 ] : zp ZP_BYTE:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ calculate_matrix::$22 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ calculate_matrix::$23 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ calculate_matrix::$24 ] : zp ZP_BYTE:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ calculate_matrix::$25 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ calculate_matrix::$26 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ calculate_matrix::$27 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ calculate_matrix::$28 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ calculate_matrix::$29 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ calculate_matrix::$30 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ calculate_matrix::$31 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ calculate_matrix::$32 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:57 [ calculate_matrix::$33 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ calculate_matrix::$34 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ mulf_init::val#0 ] : zp ZP_BYTE:59 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ mulf_init::$2 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ mulf_init::$4 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ mulf_init::$8 ] : zp ZP_BYTE:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:63 [ mulf_init::$10 ] : zp ZP_BYTE:63 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [anim] 202: zp ZP_BYTE:20 [ anim::$7 ] 202: zp ZP_BYTE:22 [ anim::$10 ] 198.12: zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ] 101: zp ZP_BYTE:19 [ anim::$5 ] 101: zp ZP_BYTE:21 [ anim::$8 ] 50.5: zp ZP_BYTE:18 [ anim::i2#0 ] 40.07: zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ] 22: zp ZP_BYTE:23 [ anim::$12 ] 6.82: zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ] 4.52: zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ] 
Uplift Scope [mulf_init] 23.38: zp ZP_BYTE:8 [ mulf_init::i#2 mulf_init::i#1 ] 22: zp ZP_BYTE:60 [ mulf_init::$2 ] 22: zp ZP_BYTE:61 [ mulf_init::$4 ] 22: zp ZP_BYTE:62 [ mulf_init::$8 ] 22: zp ZP_BYTE:63 [ mulf_init::$10 ] 9.53: zp ZP_WORD:9 [ mulf_init::add#2 mulf_init::add#1 ] 8.25: zp ZP_BYTE:59 [ mulf_init::val#0 ] 7.86: zp ZP_WORD:6 [ mulf_init::sqr#2 mulf_init::sqr#1 ] 
Uplift Scope [calculate_matrix] 4.75: zp ZP_BYTE:14 [ calculate_matrix::sz#0 ] 4: zp ZP_BYTE:34 [ calculate_matrix::$10 ] 4: zp ZP_BYTE:35 [ calculate_matrix::$11 ] 4: zp ZP_BYTE:36 [ calculate_matrix::$12 ] 4: zp ZP_BYTE:37 [ calculate_matrix::$13 ] 4: zp ZP_BYTE:38 [ calculate_matrix::$14 ] 4: zp ZP_BYTE:39 [ calculate_matrix::$15 ] 4: zp ZP_BYTE:40 [ calculate_matrix::$16 ] 4: zp ZP_BYTE:41 [ calculate_matrix::$17 ] 4: zp ZP_BYTE:42 [ calculate_matrix::$18 ] 4: zp ZP_BYTE:43 [ calculate_matrix::$19 ] 4: zp ZP_BYTE:44 [ calculate_matrix::$20 ] 4: zp ZP_BYTE:45 [ calculate_matrix::$21 ] 4: zp ZP_BYTE:46 [ calculate_matrix::$22 ] 4: zp ZP_BYTE:47 [ calculate_matrix::$23 ] 4: zp ZP_BYTE:48 [ calculate_matrix::$24 ] 4: zp ZP_BYTE:49 [ calculate_matrix::$25 ] 4: zp ZP_BYTE:50 [ calculate_matrix::$26 ] 4: zp ZP_BYTE:51 [ calculate_matrix::$27 ] 4: zp ZP_BYTE:52 [ calculate_matrix::$28 ] 4: zp ZP_BYTE:53 [ calculate_matrix::$29 ] 4: zp ZP_BYTE:54 [ calculate_matrix::$30 ] 4: zp ZP_BYTE:55 [ calculate_matrix::$31 ] 4: zp ZP_BYTE:56 [ calculate_matrix::$32 ] 4: zp ZP_BYTE:57 [ calculate_matrix::$33 ] 4: zp ZP_BYTE:58 [ calculate_matrix::$34 ] 2.25: zp ZP_BYTE:12 [ calculate_matrix::sx#0 ] 1.44: zp ZP_BYTE:13 [ calculate_matrix::sy#0 ] 0.91: zp ZP_BYTE:25 [ calculate_matrix::t2#0 ] 0.83: zp ZP_BYTE:24 [ calculate_matrix::t1#0 ] 0.31: zp ZP_BYTE:29 [ calculate_matrix::t6#0 ] 0.3: zp ZP_BYTE:27 [ calculate_matrix::t4#0 ] 0.3: zp ZP_BYTE:30 [ calculate_matrix::t7#0 ] 0.3: zp ZP_BYTE:31 [ calculate_matrix::t8#0 ] 0.29: zp ZP_BYTE:26 [ calculate_matrix::t3#0 ] 0.29: zp ZP_BYTE:28 [ calculate_matrix::t5#0 ] 0.18: zp ZP_BYTE:33 [ calculate_matrix::t10#0 ] 0.18: zp ZP_BYTE:32 [ calculate_matrix::t9#0 ] 
Uplift Scope [rotate_matrix] 34.33: zp ZP_BYTE:15 [ rotate_matrix::x#0 ] 34.33: zp ZP_BYTE:16 [ rotate_matrix::y#0 ] 34.33: zp ZP_BYTE:17 [ rotate_matrix::z#0 ] 
Uplift Scope [sprites_init] 31.17: zp ZP_BYTE:11 [ sprites_init::i#2 sprites_init::i#1 ] 
Uplift Scope [main] 
Uplift Scope [store_matrix] 
Uplift Scope [] 

Uplifting [anim] best 18719 combination reg byte a [ anim::$7 ] reg byte a [ anim::$10 ] zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ] reg byte a [ anim::$5 ] reg byte a [ anim::$8 ] zp ZP_BYTE:18 [ anim::i2#0 ] zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ] zp ZP_BYTE:23 [ anim::$12 ] zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ] zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [mulf_init] best 18389 combination reg byte x [ mulf_init::i#2 mulf_init::i#1 ] reg byte a [ mulf_init::$2 ] reg byte a [ mulf_init::$4 ] reg byte a [ mulf_init::$8 ] zp ZP_BYTE:63 [ mulf_init::$10 ] zp ZP_WORD:9 [ mulf_init::add#2 mulf_init::add#1 ] zp ZP_BYTE:59 [ mulf_init::val#0 ] zp ZP_WORD:6 [ mulf_init::sqr#2 mulf_init::sqr#1 ] 
Limited combination testing to 100 combinations of 2304 possible.
Uplifting [rotate_matrix] best 17987 combination zp ZP_BYTE:15 [ rotate_matrix::x#0 ] reg byte y [ rotate_matrix::y#0 ] reg byte x [ rotate_matrix::z#0 ] 
Uplifting [sprites_init] best 17837 combination reg byte x [ sprites_init::i#2 sprites_init::i#1 ] 
Uplifting [main] best 17837 combination 
Uplifting [store_matrix] best 17837 combination 
Uplifting [] best 17837 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ anim::i#2 anim::i#1 ]
Uplifting [anim] best 17837 combination zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ anim::i2#0 ]
Uplifting [anim] best 17137 combination reg byte x [ anim::i2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ]
Uplifting [anim] best 17137 combination zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ rotate_matrix::x#0 ]
Uplifting [rotate_matrix] best 17137 combination zp ZP_BYTE:15 [ rotate_matrix::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ anim::$12 ]
Uplifting [anim] best 17097 combination reg byte a [ anim::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:63 [ mulf_init::$10 ]
Uplifting [mulf_init] best 17057 combination reg byte a [ mulf_init::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:59 [ mulf_init::val#0 ]
Uplifting [mulf_init] best 17057 combination zp ZP_BYTE:59 [ mulf_init::val#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ]
Uplifting [anim] best 17057 combination zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ calculate_matrix::sz#0 ]
Uplifting [calculate_matrix] best 17027 combination reg byte x [ calculate_matrix::sz#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ]
Uplifting [anim] best 17027 combination zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ calculate_matrix::$10 ]
Uplifting [calculate_matrix] best 17021 combination reg byte a [ calculate_matrix::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ calculate_matrix::$11 ]
Uplifting [calculate_matrix] best 17015 combination reg byte a [ calculate_matrix::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ calculate_matrix::$12 ]
Uplifting [calculate_matrix] best 17009 combination reg byte a [ calculate_matrix::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ calculate_matrix::$13 ]
Uplifting [calculate_matrix] best 17003 combination reg byte a [ calculate_matrix::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ calculate_matrix::$14 ]
Uplifting [calculate_matrix] best 16997 combination reg byte a [ calculate_matrix::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ calculate_matrix::$15 ]
Uplifting [calculate_matrix] best 16991 combination reg byte a [ calculate_matrix::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ calculate_matrix::$16 ]
Uplifting [calculate_matrix] best 16985 combination reg byte a [ calculate_matrix::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ calculate_matrix::$17 ]
Uplifting [calculate_matrix] best 16979 combination reg byte a [ calculate_matrix::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:42 [ calculate_matrix::$18 ]
Uplifting [calculate_matrix] best 16973 combination reg byte a [ calculate_matrix::$18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ calculate_matrix::$19 ]
Uplifting [calculate_matrix] best 16967 combination reg byte a [ calculate_matrix::$19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ calculate_matrix::$20 ]
Uplifting [calculate_matrix] best 16961 combination reg byte a [ calculate_matrix::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ calculate_matrix::$21 ]
Uplifting [calculate_matrix] best 16955 combination reg byte a [ calculate_matrix::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ calculate_matrix::$22 ]
Uplifting [calculate_matrix] best 16949 combination reg byte a [ calculate_matrix::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ calculate_matrix::$23 ]
Uplifting [calculate_matrix] best 16943 combination reg byte a [ calculate_matrix::$23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ calculate_matrix::$24 ]
Uplifting [calculate_matrix] best 16937 combination reg byte a [ calculate_matrix::$24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ calculate_matrix::$25 ]
Uplifting [calculate_matrix] best 16931 combination reg byte a [ calculate_matrix::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ calculate_matrix::$26 ]
Uplifting [calculate_matrix] best 16925 combination reg byte a [ calculate_matrix::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ calculate_matrix::$27 ]
Uplifting [calculate_matrix] best 16919 combination reg byte a [ calculate_matrix::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:52 [ calculate_matrix::$28 ]
Uplifting [calculate_matrix] best 16913 combination reg byte a [ calculate_matrix::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ calculate_matrix::$29 ]
Uplifting [calculate_matrix] best 16907 combination reg byte a [ calculate_matrix::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ calculate_matrix::$30 ]
Uplifting [calculate_matrix] best 16901 combination reg byte a [ calculate_matrix::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:55 [ calculate_matrix::$31 ]
Uplifting [calculate_matrix] best 16895 combination reg byte a [ calculate_matrix::$31 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ calculate_matrix::$32 ]
Uplifting [calculate_matrix] best 16889 combination reg byte a [ calculate_matrix::$32 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:57 [ calculate_matrix::$33 ]
Uplifting [calculate_matrix] best 16883 combination reg byte a [ calculate_matrix::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:58 [ calculate_matrix::$34 ]
Uplifting [calculate_matrix] best 16877 combination reg byte a [ calculate_matrix::$34 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ calculate_matrix::sx#0 ]
Uplifting [calculate_matrix] best 16849 combination reg byte y [ calculate_matrix::sx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ calculate_matrix::sy#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:13 [ calculate_matrix::sy#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ calculate_matrix::t2#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:25 [ calculate_matrix::t2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ calculate_matrix::t1#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:24 [ calculate_matrix::t1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ calculate_matrix::t6#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:29 [ calculate_matrix::t6#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ calculate_matrix::t4#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:27 [ calculate_matrix::t4#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ calculate_matrix::t7#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:30 [ calculate_matrix::t7#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ calculate_matrix::t8#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:31 [ calculate_matrix::t8#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ calculate_matrix::t3#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:26 [ calculate_matrix::t3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ calculate_matrix::t5#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:28 [ calculate_matrix::t5#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ calculate_matrix::t10#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:33 [ calculate_matrix::t10#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ calculate_matrix::t9#0 ]
Uplifting [calculate_matrix] best 16849 combination zp ZP_BYTE:32 [ calculate_matrix::t9#0 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 ] ] with [ zp ZP_BYTE:13 [ calculate_matrix::sy#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 ] ] with [ zp ZP_BYTE:59 [ mulf_init::val#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ anim::i#2 anim::i#1 ] ] with [ zp ZP_BYTE:24 [ calculate_matrix::t1#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:15 [ rotate_matrix::x#0 ] ] with [ zp ZP_BYTE:25 [ calculate_matrix::t2#0 ] ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:8 [ mulf_init::add#2 mulf_init::add#1 ]
Allocated (was zp ZP_BYTE:15) zp ZP_BYTE:10 [ rotate_matrix::x#0 calculate_matrix::t2#0 ]
Allocated (was zp ZP_BYTE:26) zp ZP_BYTE:11 [ calculate_matrix::t3#0 ]
Allocated (was zp ZP_BYTE:27) zp ZP_BYTE:12 [ calculate_matrix::t4#0 ]
Allocated (was zp ZP_BYTE:28) zp ZP_BYTE:13 [ calculate_matrix::t5#0 ]
Allocated (was zp ZP_BYTE:29) zp ZP_BYTE:14 [ calculate_matrix::t6#0 ]
Allocated (was zp ZP_BYTE:30) zp ZP_BYTE:15 [ calculate_matrix::t7#0 ]
Allocated (was zp ZP_BYTE:31) zp ZP_BYTE:16 [ calculate_matrix::t8#0 ]
Allocated (was zp ZP_BYTE:32) zp ZP_BYTE:17 [ calculate_matrix::t9#0 ]
Allocated (was zp ZP_BYTE:33) zp ZP_BYTE:18 [ calculate_matrix::t10#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label SPRITE = $3000
  .label COSH = $2000
  .label COSQ = $2200
  .label SINH = COSH+$40
  .label SINQ = COSQ+$40
//SEG2 @begin
bbegin:
  jmp b10
//SEG3 @10
b10:
//SEG4 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG5 kickasm(location (const signed byte*) COSH#0) {{ {     .var min = -$1fff     .var max = $1fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG6 kickasm(location (const signed byte*) COSQ#0) {{ {     .var min = -$0fff     .var max = $0fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG7 [4] call main  [ ] ( )
  jsr main
//SEG8 [5] phi from @10 to @end [phi:@10->@end]
bend_from_b10:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 asm { sei  }
    sei
  //SEG12 [7] call sprites_init  [ ] ( main:4 [ ] )
    jsr sprites_init
  //SEG13 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [9] call mulf_init  [ ] ( main:4 [ ] )
  //SEG16 [97] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
  mulf_init_from_b1:
    jsr mulf_init
  //SEG17 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [11] call anim  [ ] ( main:4 [ ] )
  //SEG20 [13] phi from main::@2 to anim [phi:main::@2->anim]
  anim_from_b2:
    jsr anim
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [12] return  [ ] ( main:4 [ ] )
    rts
}
//SEG23 anim
anim: {
    .label i = 5
    .label sz = 4
    .label sy = 3
    .label sx = 2
  //SEG24 [14] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG25 [14] phi (signed byte) anim::sz#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta sz
  //SEG26 [14] phi (signed byte) anim::sy#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#1] -- vbsz1=vbuc1 
    lda #0
    sta sy
  //SEG27 [14] phi (signed byte) anim::sx#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#2] -- vbsz1=vbuc1 
    lda #0
    sta sx
    jmp b1
  //SEG28 anim::@1
  b1:
    jmp b4
  //SEG29 anim::@4
  b4:
  //SEG30 [15] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG31 anim::@6
  b6:
  //SEG32 [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG33 [17] (signed byte) calculate_matrix::sx#0 ← (signed byte) anim::sx#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ) -- vbsyy=vbsz1 
    ldy sx
  //SEG34 [18] (signed byte) calculate_matrix::sy#0 ← (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] )
    // (signed byte) calculate_matrix::sy#0 = (signed byte) anim::sy#6  // register copy zp ZP_BYTE:3
  //SEG35 [19] (signed byte) calculate_matrix::sz#0 ← (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ) -- vbsxx=vbsz1 
    ldx sz
  //SEG36 [20] call calculate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    jsr calculate_matrix
  //SEG37 [21] phi from anim::@6 to anim::@17 [phi:anim::@6->anim::@17]
  b17_from_b6:
    jmp b17
  //SEG38 anim::@17
  b17:
  //SEG39 [22] call store_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    jsr store_matrix
  //SEG40 [23] phi from anim::@17 to anim::@7 [phi:anim::@17->anim::@7]
  b7_from_b17:
  //SEG41 [23] phi (byte) anim::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@17->anim::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b7
  //SEG42 [23] phi from anim::@19 to anim::@7 [phi:anim::@19->anim::@7]
  b7_from_b19:
  //SEG43 [23] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@19->anim::@7#0] -- register_copy 
    jmp b7
  //SEG44 anim::@7
  b7:
  //SEG45 [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG46 [25] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta rotate_matrix.x
  //SEG47 [26] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ) -- vbsyy=pbsc1_derefidx_vbuz1 
    ldx i
    ldy ys,x
  //SEG48 [27] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ) -- vbsxx=pbsc1_derefidx_vbuz1 
    ldx i
    lda zs,x
    tax
  //SEG49 [28] call rotate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
    jsr rotate_matrix
    jmp b19
  //SEG50 anim::@19
  b19:
  //SEG51 [29] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG52 [30] (signed byte~) anim::$5 ← *((const signed byte*) xr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ) -- vbsaa=_deref_pbsc1_ror_1 
    lda xr
    cmp #$80
    ror
  //SEG53 [31] (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$5 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ) -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$80
  //SEG54 [32] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
  //SEG55 [33] (signed byte~) anim::$8 ← *((const signed byte*) yr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ) -- vbsaa=_deref_pbsc1_ror_1 
    lda yr
    cmp #$80
    ror
  //SEG56 [34] (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$8 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ) -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$80
  //SEG57 [35] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$10 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_YPOS,x
  //SEG58 [36] (byte) anim::i#1 ← ++ (byte) anim::i#2 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG59 [37] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b7_from_b19
    jmp b14
  //SEG60 anim::@14
  b14:
  //SEG61 [38] (signed byte) anim::sz#1 ← ++ (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ) -- vbsz1=_inc_vbsz1 
    inc sz
  //SEG62 [39] (signed byte) anim::sy#1 ← -- (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ) -- vbsz1=_dec_vbsz1 
    dec sy
  //SEG63 [40] (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ) -- vbuaa=vbsz1_band_vbuc1 
    lda sy
    and #1
  //SEG64 [41] if((byte~) anim::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto anim::@8 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b8_from_b14
    jmp b15
  //SEG65 anim::@15
  b15:
  //SEG66 [42] (signed byte) anim::sx#1 ← ++ (signed byte) anim::sx#6 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ( main:4::anim:11 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ) -- vbsz1=_inc_vbsz1 
    inc sx
  //SEG67 [43] phi from anim::@14 anim::@15 to anim::@8 [phi:anim::@14/anim::@15->anim::@8]
  b8_from_b14:
  b8_from_b15:
  //SEG68 [43] phi (signed byte) anim::sx#11 = (signed byte) anim::sx#6 [phi:anim::@14/anim::@15->anim::@8#0] -- register_copy 
    jmp b8
  //SEG69 anim::@8
  b8:
  //SEG70 [44] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ) -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG71 [14] phi from anim::@8 to anim::@1 [phi:anim::@8->anim::@1]
  b1_from_b8:
  //SEG72 [14] phi (signed byte) anim::sz#6 = (signed byte) anim::sz#1 [phi:anim::@8->anim::@1#0] -- register_copy 
  //SEG73 [14] phi (signed byte) anim::sy#6 = (signed byte) anim::sy#1 [phi:anim::@8->anim::@1#1] -- register_copy 
  //SEG74 [14] phi (signed byte) anim::sx#6 = (signed byte) anim::sx#11 [phi:anim::@8->anim::@1#2] -- register_copy 
    jmp b1
}
//SEG75 rotate_matrix
rotate_matrix: {
    .label x = $a
  //SEG76 [45] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 [ rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::y#0 rotate_matrix::z#0 ] ) -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG77 [46] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 [ rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::z#0 ] ) -- _deref_pbsc1=vbsyy 
    tya
    sta yr
  //SEG78 [47] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- _deref_pbsc1=vbsxx 
    txa
    sta zr
  //SEG79 asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
    clc
    ldx zr
  C1:
    lda mulf_sqr1,x
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  C3:
    lda #0
  A1:
    adc mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
  B1:
    adc mulf_sqr1,y
  B2:
    sbc mulf_sqr2,y
    sta xr
  F3:
    lda #0
  D1:
    adc mulf_sqr1,x
  D2:
    sbc mulf_sqr2,x
  E1:
    adc mulf_sqr1,y
  E2:
    sbc mulf_sqr2,y
    sta yr
  I3:
    lda #0
  G1:
    adc mulf_sqr1,x
  G2:
    sbc mulf_sqr2,x
  H1:
    adc mulf_sqr1,y
  H2:
    sbc mulf_sqr2,y
    sta zr
    jmp breturn
  //SEG80 rotate_matrix::@return
  breturn:
  //SEG81 [49] return  [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
    rts
}
//SEG82 store_matrix
store_matrix: {
  //SEG83 asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    jmp breturn
  //SEG84 store_matrix::@return
  breturn:
  //SEG85 [51] return  [ ] ( main:4::anim:11::store_matrix:22 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    rts
}
//SEG86 calculate_matrix
calculate_matrix: {
    .label sy = 3
    .label t1 = 5
    .label t2 = $a
    .label t3 = $b
    .label t4 = $c
    .label t5 = $d
    .label t6 = $e
    .label t7 = $f
    .label t8 = $10
    .label t9 = $11
    .label t10 = $12
  //SEG87 [52] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ) -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc sy
    sta t1
  //SEG88 [53] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) -- vbsz1=vbsz2_plus_vbsxx 
    txa
    clc
    adc sy
    sta t2
  //SEG89 [54] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ) -- vbsz1=vbsyy_plus_vbsxx 
    txa
    sty $ff
    clc
    adc $ff
    sta t3
  //SEG90 [55] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ) -- vbsz1=vbsyy_minus_vbsxx 
    tya
    stx $ff
    sec
    sbc $ff
    sta t4
  //SEG91 [56] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) -- vbsz1=vbsyy_plus_vbsz2 
    tya
    clc
    adc t2
    sta t5
  //SEG92 [57] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) -- vbsz1=vbsyy_minus_vbsz2 
    tya
    sec
    sbc t1
    sta t6
  //SEG93 [58] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) -- vbsz1=vbsyy_plus_vbsz2 
    tya
    clc
    adc t1
    sta t7
  //SEG94 [59] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) -- vbsz1=vbsz2_minus_vbsyy 
    tya
    eor #$ff
    sec
    adc t2
    sta t8
  //SEG95 [60] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) -- vbsz1=vbsz2_minus_vbsyy 
    tya
    eor #$ff
    sec
    adc sy
    sta t9
  //SEG96 [61] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- vbsz1=vbsz2_plus_vbsyy 
    tya
    clc
    adc sy
    sta t10
  //SEG97 [62] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t1
    ldy t2
    clc
    lda COSH,x
    adc COSH,y
  //SEG98 [63] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
  //SEG99 [64] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t1
    ldy t2
    sec
    lda SINH,x
    sbc SINH,y
  //SEG100 [65] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
  //SEG101 [66] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz1 
    ldy sy
    clc
    lda SINH,y
    adc SINH,y
  //SEG102 [67] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
  //SEG103 [68] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    sec
    lda SINH,x
    sbc SINH,y
  //SEG104 [69] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG105 [70] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG106 [71] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t8
    clc
    adc COSQ,y
  //SEG107 [72] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc COSQ,y
  //SEG108 [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
  //SEG109 [74] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    clc
    lda COSH,x
    adc COSH,y
  //SEG110 [75] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t5
    clc
    adc SINQ,y
  //SEG111 [76] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t6
    sec
    sbc SINQ,y
  //SEG112 [77] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG113 [78] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG114 [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
  //SEG115 [80] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    sec
    lda SINH,x
    sbc SINH,y
  //SEG116 [81] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
  //SEG117 [82] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t4
    ldy t3
    sec
    lda COSH,x
    sbc COSH,y
  //SEG118 [83] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc SINQ,y
  //SEG119 [84] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc SINQ,y
  //SEG120 [85] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG121 [86] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG122 [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
  //SEG123 [88] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    clc
    lda SINH,x
    adc SINH,y
  //SEG124 [89] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG125 [90] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG126 [91] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t7
    clc
    adc COSQ,y
  //SEG127 [92] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc COSQ,y
  //SEG128 [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 [ calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
  //SEG129 [94] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::$34 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    clc
    lda COSH,x
    adc COSH,y
  //SEG130 [95] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
    jmp breturn
  //SEG131 calculate_matrix::@return
  breturn:
  //SEG132 [96] return  [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    rts
}
//SEG133 mulf_init
mulf_init: {
    .label val = 2
    .label sqr = 6
    .label add = 8
  //SEG134 [98] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG135 [98] phi (signed word) mulf_init::add#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vbuc1 
    lda #<1
    sta add
    lda #>1
    sta add+1
  //SEG136 [98] phi (byte) mulf_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG137 [98] phi (signed word) mulf_init::sqr#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vbuc1 
    lda #<0
    sta sqr
    lda #>0
    sta sqr+1
    jmp b1
  //SEG138 [98] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  b1_from_b1:
  //SEG139 [98] phi (signed word) mulf_init::add#2 = (signed word) mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
  //SEG140 [98] phi (byte) mulf_init::i#2 = (byte) mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
  //SEG141 [98] phi (signed word) mulf_init::sqr#2 = (signed word) mulf_init::sqr#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
    jmp b1
  //SEG142 mulf_init::@1
  b1:
  //SEG143 [99] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr+1
    sta val
  //SEG144 [100] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda val
    sta mulf_sqr1,x
  //SEG145 [101] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda val
    sta mulf_sqr1+$100,x
  //SEG146 [102] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ) -- vbuaa=_neg_vbuxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG147 [103] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr1,y
  //SEG148 [104] (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ) -- vbuaa=_neg_vbuxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG149 [105] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr1+$100,y
  //SEG150 [106] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda val
    sta mulf_sqr2+1,x
  //SEG151 [107] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda val
    sta mulf_sqr2+$100+1,x
  //SEG152 [108] (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ) -- vbuaa=vbuc1_minus_vbuxx 
    txa
    eor #$ff
    clc
    adc #1+1
  //SEG153 [109] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr2,y
  //SEG154 [110] (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ) -- vbuaa=vbuc1_minus_vbuxx 
    txa
    eor #$ff
    clc
    adc #1+1
  //SEG155 [111] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr2+$100,y
  //SEG156 [112] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda sqr
    clc
    adc add
    sta sqr
    lda sqr+1
    adc add+1
    sta sqr+1
  //SEG157 [113] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ) -- vwsz1=vwsz1_plus_2 
    lda add
    clc
    adc #2
    sta add
    bcc !+
    inc add+1
  !:
  //SEG158 [114] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG159 [115] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$81
    bne b1_from_b1
    jmp breturn
  //SEG160 mulf_init::@return
  breturn:
  //SEG161 [116] return  [ ] ( main:4::mulf_init:9 [ ] )
    rts
}
//SEG162 sprites_init
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
  //SEG163 [117] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::sprites_init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG164 [118] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
  //SEG165 [118] phi (byte) sprites_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG166 [118] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
  //SEG167 [118] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    jmp b1
  //SEG168 sprites_init::@1
  b1:
  //SEG169 [119] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
  //SEG170 [120] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
  //SEG171 [121] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG172 [122] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b1
    jmp breturn
  //SEG173 sprites_init::@return
  breturn:
  //SEG174 [123] return  [ ] ( main:4::sprites_init:7 [ ] )
    rts
}
  rotation_matrix: .fill 9, 0
  .align $100
  mulf_sqr1: .fill $200, 0
  .align $100
  mulf_sqr2: .fill $200, 0
  xs: .byte -$3f, -$3f, -$3f, -$3f, $3f, $3f, $3f, $3f
  ys: .byte -$3f, -$3f, $3f, $3f, -$3f, -$3f, $3f, $3f
  zs: .byte -$3f, $3f, -$3f, $3f, -$3f, $3f, -$3f, $3f
.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)

.pc = COSH "Inline"
  {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = COSQ "Inline"
  {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b10
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b17
Removing instruction jmp b7
Removing instruction jmp b19
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldx i
Replacing instruction ldx zr with TAX
Removing instruction ldx t1
Removing instruction ldy t2
Removing instruction ldx t3
Replacing instruction ldx #0 with TAX
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda val
Removing instruction lda val
Removing instruction lda val
Removing instruction lda val
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b7_from_b19 with b7
Replacing label b8_from_b14 with b8
Replacing label b1 with b4
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction bend_from_b10:
Removing instruction b1_from_main:
Removing instruction mulf_init_from_b1:
Removing instruction b2_from_b1:
Removing instruction anim_from_b2:
Removing instruction b1:
Removing instruction b17_from_b6:
Removing instruction b7_from_b19:
Removing instruction b8_from_b14:
Removing instruction b8_from_b15:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b10:
Removing instruction bend:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_anim:
Removing instruction b6:
Removing instruction b17:
Removing instruction b7_from_b17:
Removing instruction b19:
Removing instruction b14:
Removing instruction b15:
Removing instruction b1_from_b8:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_mulf_init:
Removing instruction breturn:
Removing instruction b1_from_sprites_init:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @10
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(signed byte*) COSH
(const signed byte*) COSH#0 COSH = ((signed byte*))(word/signed word/dword/signed dword) 8192
(signed byte*) COSQ
(const signed byte*) COSQ#0 COSQ = ((signed byte*))(word/signed word/dword/signed dword) 8704
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte/signed byte/word/signed word/dword/signed dword) 14
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(signed byte*) SINH
(const signed byte*) SINH#0 SINH = (const signed byte*) COSH#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(signed byte*) SINQ
(const signed byte*) SINQ#0 SINQ = (const signed byte*) COSQ#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(byte*) SPRITE
(const byte*) SPRITE#0 SPRITE = ((byte*))(word/signed word/dword/signed dword) 12288
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) 53269
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) 53249
(void()) anim()
(byte/word/signed word/dword/signed dword~) anim::$10 reg byte a 202.0
(byte~) anim::$12 reg byte a 22.0
(signed byte~) anim::$5 reg byte a 101.0
(byte/word/signed word/dword/signed dword~) anim::$7 reg byte a 202.0
(signed byte~) anim::$8 reg byte a 101.0
(label) anim::@1
(label) anim::@14
(label) anim::@15
(label) anim::@17
(label) anim::@19
(label) anim::@4
(label) anim::@6
(label) anim::@7
(label) anim::@8
(byte) anim::i
(byte) anim::i#1 i zp ZP_BYTE:5 151.5
(byte) anim::i#2 i zp ZP_BYTE:5 46.61538461538461
(byte) anim::i2
(byte) anim::i2#0 reg byte x 50.5
(signed byte) anim::sx
(signed byte) anim::sx#1 sx zp ZP_BYTE:2 22.0
(signed byte) anim::sx#11 sx zp ZP_BYTE:2 16.5
(signed byte) anim::sx#6 sx zp ZP_BYTE:2 1.5714285714285714
(signed byte) anim::sy
(signed byte) anim::sy#1 sy zp ZP_BYTE:3 5.5
(signed byte) anim::sy#6 sy zp ZP_BYTE:3 1.32
(signed byte) anim::sz
(signed byte) anim::sz#1 sz zp ZP_BYTE:4 3.142857142857143
(signed byte) anim::sz#6 sz zp ZP_BYTE:4 1.375
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 reg byte a 4.0
(signed byte~) calculate_matrix::$11 reg byte a 4.0
(signed byte~) calculate_matrix::$12 reg byte a 4.0
(signed byte~) calculate_matrix::$13 reg byte a 4.0
(signed byte~) calculate_matrix::$14 reg byte a 4.0
(signed byte~) calculate_matrix::$15 reg byte a 4.0
(signed byte~) calculate_matrix::$16 reg byte a 4.0
(signed byte~) calculate_matrix::$17 reg byte a 4.0
(signed byte~) calculate_matrix::$18 reg byte a 4.0
(signed byte~) calculate_matrix::$19 reg byte a 4.0
(signed byte~) calculate_matrix::$20 reg byte a 4.0
(signed byte~) calculate_matrix::$21 reg byte a 4.0
(signed byte~) calculate_matrix::$22 reg byte a 4.0
(signed byte~) calculate_matrix::$23 reg byte a 4.0
(signed byte~) calculate_matrix::$24 reg byte a 4.0
(signed byte~) calculate_matrix::$25 reg byte a 4.0
(signed byte~) calculate_matrix::$26 reg byte a 4.0
(signed byte~) calculate_matrix::$27 reg byte a 4.0
(signed byte~) calculate_matrix::$28 reg byte a 4.0
(signed byte~) calculate_matrix::$29 reg byte a 4.0
(signed byte~) calculate_matrix::$30 reg byte a 4.0
(signed byte~) calculate_matrix::$31 reg byte a 4.0
(signed byte~) calculate_matrix::$32 reg byte a 4.0
(signed byte~) calculate_matrix::$33 reg byte a 4.0
(signed byte~) calculate_matrix::$34 reg byte a 4.0
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 reg byte y 2.25
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 sy zp ZP_BYTE:3 1.4375
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::sz#0 reg byte x 4.75
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 t1 zp ZP_BYTE:5 0.8333333333333333
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 t10 zp ZP_BYTE:18 0.18181818181818182
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 t2 zp ZP_BYTE:10 0.9090909090909092
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 t3 zp ZP_BYTE:11 0.29411764705882354
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 t4 zp ZP_BYTE:12 0.30303030303030304
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 t5 zp ZP_BYTE:13 0.29411764705882354
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 t6 zp ZP_BYTE:14 0.3125
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 t7 zp ZP_BYTE:15 0.30303030303030304
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 t8 zp ZP_BYTE:16 0.30303030303030304
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 t9 zp ZP_BYTE:17 0.1764705882352941
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) mulf_init()
(byte/signed word/word/dword/signed dword~) mulf_init::$10 reg byte a 22.0
(byte~) mulf_init::$2 reg byte a 22.0
(byte~) mulf_init::$4 reg byte a 22.0
(byte/signed word/word/dword/signed dword~) mulf_init::$8 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#1 add zp ZP_WORD:8 7.333333333333333
(signed word) mulf_init::add#2 add zp ZP_WORD:8 2.1999999999999997
(byte) mulf_init::i
(byte) mulf_init::i#1 reg byte x 16.5
(byte) mulf_init::i#2 reg byte x 6.875
(signed word) mulf_init::sqr
(signed word) mulf_init::sqr#1 sqr zp ZP_WORD:6 5.5
(signed word) mulf_init::sqr#2 sqr zp ZP_WORD:6 2.357142857142857
(byte) mulf_init::val
(byte) mulf_init::val#0 val zp ZP_BYTE:2 8.25
(byte[512]) mulf_sqr1
(const byte[512]) mulf_sqr1#0 mulf_sqr1 = { fill( 512, 0) }
(byte[512]) mulf_sqr2
(const byte[512]) mulf_sqr2#0 mulf_sqr2 = { fill( 512, 0) }
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 x zp ZP_BYTE:10 34.33333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 reg byte y 34.33333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 reg byte x 34.33333333333333
(signed byte[9]) rotation_matrix
(const signed byte[9]) rotation_matrix#0 rotation_matrix = { fill( 9, 0) }
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(byte*) sprites_init::SCREEN
(const byte*) sprites_init::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte) sprites_init::i
(byte) sprites_init::i#1 reg byte x 16.5
(byte) sprites_init::i#2 reg byte x 14.666666666666666
(byte*) sprites_init::sprites_ptr
(const byte*) sprites_init::sprites_ptr#0 sprites_ptr = (const byte*) sprites_init::SCREEN#0+(word/signed word/dword/signed dword) 1016
(void()) store_matrix()
(label) store_matrix::@return
(signed byte*) xr
(const signed byte*) xr#0 xr = ((signed byte*))(byte/word/signed word/dword/signed dword) 240
(signed byte[8]) xs
(const signed byte[8]) xs#0 xs = { -(byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
(signed byte*) yr
(const signed byte*) yr#0 yr = ((signed byte*))(byte/word/signed word/dword/signed dword) 241
(signed byte[8]) ys
(const signed byte[8]) ys#0 ys = { -(byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }
(signed byte*) zr
(const signed byte*) zr#0 zr = ((signed byte*))(byte/word/signed word/dword/signed dword) 242
(signed byte[8]) zs
(const signed byte[8]) zs#0 zs = { -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63, -(byte/signed byte/word/signed word/dword/signed dword) 63, (byte/signed byte/word/signed word/dword/signed dword) 63 }

zp ZP_BYTE:2 [ anim::sx#6 anim::sx#11 anim::sx#1 mulf_init::val#0 ]
zp ZP_BYTE:3 [ anim::sy#6 anim::sy#1 calculate_matrix::sy#0 ]
zp ZP_BYTE:4 [ anim::sz#6 anim::sz#1 ]
zp ZP_BYTE:5 [ anim::i#2 anim::i#1 calculate_matrix::t1#0 ]
zp ZP_WORD:6 [ mulf_init::sqr#2 mulf_init::sqr#1 ]
reg byte x [ mulf_init::i#2 mulf_init::i#1 ]
zp ZP_WORD:8 [ mulf_init::add#2 mulf_init::add#1 ]
reg byte x [ sprites_init::i#2 sprites_init::i#1 ]
reg byte y [ calculate_matrix::sx#0 ]
reg byte x [ calculate_matrix::sz#0 ]
zp ZP_BYTE:10 [ rotate_matrix::x#0 calculate_matrix::t2#0 ]
reg byte y [ rotate_matrix::y#0 ]
reg byte x [ rotate_matrix::z#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$5 ]
reg byte a [ anim::$7 ]
reg byte a [ anim::$8 ]
reg byte a [ anim::$10 ]
reg byte a [ anim::$12 ]
zp ZP_BYTE:11 [ calculate_matrix::t3#0 ]
zp ZP_BYTE:12 [ calculate_matrix::t4#0 ]
zp ZP_BYTE:13 [ calculate_matrix::t5#0 ]
zp ZP_BYTE:14 [ calculate_matrix::t6#0 ]
zp ZP_BYTE:15 [ calculate_matrix::t7#0 ]
zp ZP_BYTE:16 [ calculate_matrix::t8#0 ]
zp ZP_BYTE:17 [ calculate_matrix::t9#0 ]
zp ZP_BYTE:18 [ calculate_matrix::t10#0 ]
reg byte a [ calculate_matrix::$10 ]
reg byte a [ calculate_matrix::$11 ]
reg byte a [ calculate_matrix::$12 ]
reg byte a [ calculate_matrix::$13 ]
reg byte a [ calculate_matrix::$14 ]
reg byte a [ calculate_matrix::$15 ]
reg byte a [ calculate_matrix::$16 ]
reg byte a [ calculate_matrix::$17 ]
reg byte a [ calculate_matrix::$18 ]
reg byte a [ calculate_matrix::$19 ]
reg byte a [ calculate_matrix::$20 ]
reg byte a [ calculate_matrix::$21 ]
reg byte a [ calculate_matrix::$22 ]
reg byte a [ calculate_matrix::$23 ]
reg byte a [ calculate_matrix::$24 ]
reg byte a [ calculate_matrix::$25 ]
reg byte a [ calculate_matrix::$26 ]
reg byte a [ calculate_matrix::$27 ]
reg byte a [ calculate_matrix::$28 ]
reg byte a [ calculate_matrix::$29 ]
reg byte a [ calculate_matrix::$30 ]
reg byte a [ calculate_matrix::$31 ]
reg byte a [ calculate_matrix::$32 ]
reg byte a [ calculate_matrix::$33 ]
reg byte a [ calculate_matrix::$34 ]
reg byte a [ mulf_init::$2 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$8 ]
reg byte a [ mulf_init::$10 ]


FINAL ASSEMBLER
Score: 14397

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label SPRITE = $3000
  .label COSH = $2000
  .label COSQ = $2200
  .label SINH = COSH+$40
  .label SINQ = COSQ+$40
//SEG2 @begin
//SEG3 @10
//SEG4 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG5 kickasm(location (const signed byte*) COSH#0) {{ {     .var min = -$1fff     .var max = $1fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG6 kickasm(location (const signed byte*) COSQ#0) {{ {     .var min = -$0fff     .var max = $0fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG7 [4] call main  [ ] ( )
  jsr main
//SEG8 [5] phi from @10 to @end [phi:@10->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 asm { sei  }
    sei
  //SEG12 [7] call sprites_init  [ ] ( main:4 [ ] )
    jsr sprites_init
  //SEG13 [8] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 main::@1
  //SEG15 [9] call mulf_init  [ ] ( main:4 [ ] )
  //SEG16 [97] phi from main::@1 to mulf_init [phi:main::@1->mulf_init]
    jsr mulf_init
  //SEG17 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG18 main::@2
  //SEG19 [11] call anim  [ ] ( main:4 [ ] )
  //SEG20 [13] phi from main::@2 to anim [phi:main::@2->anim]
    jsr anim
  //SEG21 main::@return
  //SEG22 [12] return  [ ] ( main:4 [ ] )
    rts
}
//SEG23 anim
anim: {
    .label i = 5
    .label sz = 4
    .label sy = 3
    .label sx = 2
  //SEG24 [14] phi from anim to anim::@1 [phi:anim->anim::@1]
  //SEG25 [14] phi (signed byte) anim::sz#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta sz
  //SEG26 [14] phi (signed byte) anim::sy#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#1] -- vbsz1=vbuc1 
    sta sy
  //SEG27 [14] phi (signed byte) anim::sx#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#2] -- vbsz1=vbuc1 
    sta sx
  //SEG28 anim::@1
  //SEG29 anim::@4
  b4:
  //SEG30 [15] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG31 anim::@6
  //SEG32 [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG33 [17] (signed byte) calculate_matrix::sx#0 ← (signed byte) anim::sx#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 ] ) -- vbsyy=vbsz1 
    ldy sx
  //SEG34 [18] (signed byte) calculate_matrix::sy#0 ← (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 ] )
    // (signed byte) calculate_matrix::sy#0 = (signed byte) anim::sy#6  // register copy zp ZP_BYTE:3
  //SEG35 [19] (signed byte) calculate_matrix::sz#0 ← (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 ] ) -- vbsxx=vbsz1 
    ldx sz
  //SEG36 [20] call calculate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    jsr calculate_matrix
  //SEG37 [21] phi from anim::@6 to anim::@17 [phi:anim::@6->anim::@17]
  //SEG38 anim::@17
  //SEG39 [22] call store_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    jsr store_matrix
  //SEG40 [23] phi from anim::@17 to anim::@7 [phi:anim::@17->anim::@7]
  //SEG41 [23] phi (byte) anim::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@17->anim::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG42 [23] phi from anim::@19 to anim::@7 [phi:anim::@19->anim::@7]
  //SEG43 [23] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@19->anim::@7#0] -- register_copy 
  //SEG44 anim::@7
  b7:
  //SEG45 [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG46 [25] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta rotate_matrix.x
  //SEG47 [26] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 ] ) -- vbsyy=pbsc1_derefidx_vbuz1 
    ldx i
    ldy ys,x
  //SEG48 [27] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::x#0 rotate_matrix::y#0 rotate_matrix::z#0 ] ) -- vbsxx=pbsc1_derefidx_vbuz1 
    lda zs,x
    tax
  //SEG49 [28] call rotate_matrix  [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
    jsr rotate_matrix
  //SEG50 anim::@19
  //SEG51 [29] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG52 [30] (signed byte~) anim::$5 ← *((const signed byte*) xr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$5 ] ) -- vbsaa=_deref_pbsc1_ror_1 
    lda xr
    cmp #$80
    ror
  //SEG53 [31] (byte/word/signed word/dword/signed dword~) anim::$7 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$5 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$7 ] ) -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$80
  //SEG54 [32] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
  //SEG55 [33] (signed byte~) anim::$8 ← *((const signed byte*) yr#0) >> (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$8 ] ) -- vbsaa=_deref_pbsc1_ror_1 
    lda yr
    cmp #$80
    ror
  //SEG56 [34] (byte/word/signed word/dword/signed dword~) anim::$10 ← (byte/word/signed word/dword/signed dword) 128 + (byte)(signed byte~) anim::$8 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 anim::i2#0 anim::$10 ] ) -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$80
  //SEG57 [35] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$10 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_YPOS,x
  //SEG58 [36] (byte) anim::i#1 ← ++ (byte) anim::i#2 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG59 [37] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b7
  //SEG60 anim::@14
  //SEG61 [38] (signed byte) anim::sz#1 ← ++ (signed byte) anim::sz#6 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#6 anim::sz#1 ] ) -- vbsz1=_inc_vbsz1 
    inc sz
  //SEG62 [39] (signed byte) anim::sy#1 ← -- (signed byte) anim::sy#6 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ) -- vbsz1=_dec_vbsz1 
    dec sy
  //SEG63 [40] (byte~) anim::$12 ← (signed byte) anim::sy#1 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 anim::$12 ] ) -- vbuaa=vbsz1_band_vbuc1 
    lda sy
    and #1
  //SEG64 [41] if((byte~) anim::$12!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto anim::@8 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#6 anim::sy#1 anim::sz#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b8
  //SEG65 anim::@15
  //SEG66 [42] (signed byte) anim::sx#1 ← ++ (signed byte) anim::sx#6 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ( main:4::anim:11 [ anim::sy#1 anim::sz#1 anim::sx#1 ] ) -- vbsz1=_inc_vbsz1 
    inc sx
  //SEG67 [43] phi from anim::@14 anim::@15 to anim::@8 [phi:anim::@14/anim::@15->anim::@8]
  //SEG68 [43] phi (signed byte) anim::sx#11 = (signed byte) anim::sx#6 [phi:anim::@14/anim::@15->anim::@8#0] -- register_copy 
  //SEG69 anim::@8
  b8:
  //SEG70 [44] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ( main:4::anim:11 [ anim::sx#11 anim::sy#1 anim::sz#1 ] ) -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG71 [14] phi from anim::@8 to anim::@1 [phi:anim::@8->anim::@1]
  //SEG72 [14] phi (signed byte) anim::sz#6 = (signed byte) anim::sz#1 [phi:anim::@8->anim::@1#0] -- register_copy 
  //SEG73 [14] phi (signed byte) anim::sy#6 = (signed byte) anim::sy#1 [phi:anim::@8->anim::@1#1] -- register_copy 
  //SEG74 [14] phi (signed byte) anim::sx#6 = (signed byte) anim::sx#11 [phi:anim::@8->anim::@1#2] -- register_copy 
    jmp b4
}
//SEG75 rotate_matrix
rotate_matrix: {
    .label x = $a
  //SEG76 [45] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 [ rotate_matrix::y#0 rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::y#0 rotate_matrix::z#0 ] ) -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG77 [46] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 [ rotate_matrix::z#0 ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 rotate_matrix::z#0 ] ) -- _deref_pbsc1=vbsyy 
    tya
    sta yr
  //SEG78 [47] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] ) -- _deref_pbsc1=vbsxx 
    txa
    sta zr
  //SEG79 asm { clc ldxzr C1: ldamulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
    clc
    tax
  C1:
    lda mulf_sqr1,x
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  C3:
    lda #0
  A1:
    adc mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
  B1:
    adc mulf_sqr1,y
  B2:
    sbc mulf_sqr2,y
    sta xr
  F3:
    lda #0
  D1:
    adc mulf_sqr1,x
  D2:
    sbc mulf_sqr2,x
  E1:
    adc mulf_sqr1,y
  E2:
    sbc mulf_sqr2,y
    sta yr
  I3:
    lda #0
  G1:
    adc mulf_sqr1,x
  G2:
    sbc mulf_sqr2,x
  H1:
    adc mulf_sqr1,y
  H2:
    sbc mulf_sqr2,y
    sta zr
  //SEG80 rotate_matrix::@return
  //SEG81 [49] return  [ ] ( main:4::anim:11::rotate_matrix:28 [ anim::sx#6 anim::sy#6 anim::sz#6 anim::i#2 ] )
    rts
}
//SEG82 store_matrix
store_matrix: {
  //SEG83 asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
  //SEG84 store_matrix::@return
  //SEG85 [51] return  [ ] ( main:4::anim:11::store_matrix:22 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    rts
}
//SEG86 calculate_matrix
calculate_matrix: {
    .label sy = 3
    .label t1 = 5
    .label t2 = $a
    .label t3 = $b
    .label t4 = $c
    .label t5 = $d
    .label t6 = $e
    .label t7 = $f
    .label t8 = $10
    .label t9 = $11
    .label t10 = $12
  //SEG87 [52] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 ] ) -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc sy
    sta t1
  //SEG88 [53] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) -- vbsz1=vbsz2_plus_vbsxx 
    txa
    clc
    adc sy
    sta t2
  //SEG89 [54] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::sz#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 ] ) -- vbsz1=vbsyy_plus_vbsxx 
    txa
    sty $ff
    clc
    adc $ff
    sta t3
  //SEG90 [55] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 ] ) -- vbsz1=vbsyy_minus_vbsxx 
    tya
    stx $ff
    sec
    sbc $ff
    sta t4
  //SEG91 [56] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) -- vbsz1=vbsyy_plus_vbsz2 
    tya
    clc
    adc t2
    sta t5
  //SEG92 [57] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) -- vbsz1=vbsyy_minus_vbsz2 
    tya
    sec
    sbc t1
    sta t6
  //SEG93 [58] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) -- vbsz1=vbsyy_plus_vbsz2 
    tya
    clc
    adc t1
    sta t7
  //SEG94 [59] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) -- vbsz1=vbsz2_minus_vbsyy 
    tya
    eor #$ff
    sec
    adc t2
    sta t8
  //SEG95 [60] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) -- vbsz1=vbsz2_minus_vbsyy 
    tya
    eor #$ff
    sec
    adc sy
    sta t9
  //SEG96 [61] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- vbsz1=vbsz2_plus_vbsyy 
    tya
    clc
    adc sy
    sta t10
  //SEG97 [62] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t1
    ldy t2
    clc
    lda COSH,x
    adc COSH,y
  //SEG98 [63] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
  //SEG99 [64] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    sec
    lda SINH,x
    sbc SINH,y
  //SEG100 [65] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
  //SEG101 [66] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz1 
    ldy sy
    clc
    lda SINH,y
    adc SINH,y
  //SEG102 [67] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
  //SEG103 [68] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    sec
    lda SINH,x
    sbc SINH,y
  //SEG104 [69] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG105 [70] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG106 [71] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t8
    clc
    adc COSQ,y
  //SEG107 [72] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc COSQ,y
  //SEG108 [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
  //SEG109 [74] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy t4
    clc
    lda COSH,x
    adc COSH,y
  //SEG110 [75] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t5
    clc
    adc SINQ,y
  //SEG111 [76] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t6
    sec
    sbc SINQ,y
  //SEG112 [77] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG113 [78] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG114 [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
  //SEG115 [80] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    sec
    lda SINH,x
    sbc SINH,y
  //SEG116 [81] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
  //SEG117 [82] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t4
    ldy t3
    sec
    lda COSH,x
    sbc COSH,y
  //SEG118 [83] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc SINQ,y
  //SEG119 [84] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc SINQ,y
  //SEG120 [85] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG121 [86] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG122 [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
  //SEG123 [88] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    clc
    lda SINH,x
    adc SINH,y
  //SEG124 [89] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG125 [90] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG126 [91] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t7
    clc
    adc COSQ,y
  //SEG127 [92] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc COSQ,y
  //SEG128 [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 [ calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
  //SEG129 [94] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 calculate_matrix::$34 ] ) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    clc
    lda COSH,x
    adc COSH,y
  //SEG130 [95] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
  //SEG131 calculate_matrix::@return
  //SEG132 [96] return  [ ] ( main:4::anim:11::calculate_matrix:20 [ anim::sx#6 anim::sy#6 anim::sz#6 ] )
    rts
}
//SEG133 mulf_init
mulf_init: {
    .label val = 2
    .label sqr = 6
    .label add = 8
  //SEG134 [98] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  //SEG135 [98] phi (signed word) mulf_init::add#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vbuc1 
    lda #<1
    sta add
    lda #>1
    sta add+1
  //SEG136 [98] phi (byte) mulf_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#1] -- vbuxx=vbuc1 
    tax
  //SEG137 [98] phi (signed word) mulf_init::sqr#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vbuc1 
    sta sqr
    sta sqr+1
  //SEG138 [98] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  //SEG139 [98] phi (signed word) mulf_init::add#2 = (signed word) mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
  //SEG140 [98] phi (byte) mulf_init::i#2 = (byte) mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
  //SEG141 [98] phi (signed word) mulf_init::sqr#2 = (signed word) mulf_init::sqr#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
  //SEG142 mulf_init::@1
  b1:
  //SEG143 [99] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr+1
    sta val
  //SEG144 [100] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    sta mulf_sqr1,x
  //SEG145 [101] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    sta mulf_sqr1+$100,x
  //SEG146 [102] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$2 ] ) -- vbuaa=_neg_vbuxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG147 [103] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr1,y
  //SEG148 [104] (byte~) mulf_init::$4 ← - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$4 ] ) -- vbuaa=_neg_vbuxx 
    txa
    eor #$ff
    clc
    adc #1
  //SEG149 [105] *((const byte[512]) mulf_sqr1#0+(word/signed word/dword/signed dword) 256 + (byte~) mulf_init::$4) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr1+$100,y
  //SEG150 [106] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    sta mulf_sqr2+1,x
  //SEG151 [107] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    sta mulf_sqr2+$100+1,x
  //SEG152 [108] (byte/signed word/word/dword/signed dword~) mulf_init::$8 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$8 ] ) -- vbuaa=vbuc1_minus_vbuxx 
    txa
    eor #$ff
    clc
    adc #1+1
  //SEG153 [109] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$8) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr2,y
  //SEG154 [110] (byte/signed word/word/dword/signed dword~) mulf_init::$10 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 mulf_init::val#0 mulf_init::$10 ] ) -- vbuaa=vbuc1_minus_vbuxx 
    txa
    eor #$ff
    clc
    adc #1+1
  //SEG155 [111] *((const byte[512]) mulf_sqr2#0+(word/signed word/dword/signed dword) 256 + (byte/signed word/word/dword/signed dword~) mulf_init::$10) ← (byte) mulf_init::val#0 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:9 [ mulf_init::sqr#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuaa=vbuz1 
    tay
    lda val
    sta mulf_sqr2+$100,y
  //SEG156 [112] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda sqr
    clc
    adc add
    sta sqr
    lda sqr+1
    adc add+1
    sta sqr+1
  //SEG157 [113] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::i#2 mulf_init::sqr#1 mulf_init::add#1 ] ) -- vwsz1=vwsz1_plus_2 
    lda add
    clc
    adc #2
    sta add
    bcc !+
    inc add+1
  !:
  //SEG158 [114] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG159 [115] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:9 [ mulf_init::sqr#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$81
    bne b1
  //SEG160 mulf_init::@return
  //SEG161 [116] return  [ ] ( main:4::mulf_init:9 [ ] )
    rts
}
//SEG162 sprites_init
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
  //SEG163 [117] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::sprites_init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG164 [118] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  //SEG165 [118] phi (byte) sprites_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG166 [118] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  //SEG167 [118] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
  //SEG168 sprites_init::@1
  b1:
  //SEG169 [119] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
  //SEG170 [120] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:4::sprites_init:7 [ sprites_init::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
  //SEG171 [121] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG172 [122] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 [ sprites_init::i#1 ] ( main:4::sprites_init:7 [ sprites_init::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG173 sprites_init::@return
  //SEG174 [123] return  [ ] ( main:4::sprites_init:7 [ ] )
    rts
}
  rotation_matrix: .fill 9, 0
  .align $100
  mulf_sqr1: .fill $200, 0
  .align $100
  mulf_sqr2: .fill $200, 0
  xs: .byte -$3f, -$3f, -$3f, -$3f, $3f, $3f, $3f, $3f
  ys: .byte -$3f, -$3f, $3f, $3f, -$3f, -$3f, $3f, $3f
  zs: .byte -$3f, $3f, -$3f, $3f, -$3f, $3f, -$3f, $3f
.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)

.pc = COSH "Inline"
  {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = COSQ "Inline"
  {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }


