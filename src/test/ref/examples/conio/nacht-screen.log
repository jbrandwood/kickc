Fixing struct type size struct $0 to 41
Fixing struct type SIZE_OF struct $0 to 41
Fixing struct type SIZE_OF struct $0 to 41
Setting inferred volatile on symbol affected by address-of (void~) main::$0 ← call screensize &(byte) XSize &(byte) YSize 
Setting inferred volatile on symbol affected by address-of (void~) main::$0 ← call screensize &(volatile byte) XSize &(byte) YSize 
Fixing pointer increment (to_nomodify struct $0*) MakeNiceScreen::T ← ++ (to_nomodify struct $0*) MakeNiceScreen::T
Replacing struct member reference *((to_nomodify struct $0*) MakeNiceScreen::T).Msg with member unwinding reference (byte*~) MakeNiceScreen::$29
Replacing struct member reference *((to_nomodify struct $0*) MakeNiceScreen::T).Y with member unwinding reference *((byte*~) MakeNiceScreen::$30)
Replacing struct member reference *((to_nomodify struct $0*) MakeNiceScreen::T).Msg with member unwinding reference (byte*~) MakeNiceScreen::$31
Warning! Adding boolean cast to non-boolean condition (byte) cputs::c
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strlen::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte~) main::$3
Culled Empty Block (label) clrscr::@11
Culled Empty Block (label) clrscr::@12
Culled Empty Block (label) clrscr::@7
Culled Empty Block (label) clrscr::@8
Culled Empty Block (label) clrscr::@9
Culled Empty Block (label) clrscr::@10
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) cputc::@6
Culled Empty Block (label) cputc::@7
Culled Empty Block (label) cputc::@2
Culled Empty Block (label) cputc::@8
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) cputs::@4
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) cputs::@5
Culled Empty Block (label) cputs::@6
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) chline::@4
Culled Empty Block (label) chline::@3
Culled Empty Block (label) chline::@5
Culled Empty Block (label) chline::@6
Culled Empty Block (label) @10
Culled Empty Block (label) cvline::@4
Culled Empty Block (label) cvline::@3
Culled Empty Block (label) cvline::@5
Culled Empty Block (label) cvline::@6
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) textcolor::@1
Culled Empty Block (label) @13
Culled Empty Block (label) bgcolor::@1
Culled Empty Block (label) @14
Culled Empty Block (label) bordercolor::@1
Culled Empty Block (label) @15
Culled Empty Block (label) kbhit::@1
Culled Empty Block (label) @16
Culled Empty Block (label) cursor::@1
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) strlen::@4
Culled Empty Block (label) strlen::@5
Culled Empty Block (label) strlen::@6
Culled Empty Block (label) strlen::@7
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) MakeNiceScreen::@4
Culled Empty Block (label) MakeNiceScreen::@3
Culled Empty Block (label) MakeNiceScreen::@5
Culled Empty Block (label) MakeNiceScreen::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) conio_cursor_x#0 ← (byte) 0
  (byte) conio_cursor_y#0 ← (byte) 0
  (byte*) conio_cursor_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor#0 ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_display_cursor#0 ← (byte) 0
  to:@22

(void()) clrscr()
clrscr: scope:[clrscr]  from MakeNiceScreen::@9 main::@3
  (byte) conio_textcolor#50 ← phi( MakeNiceScreen::@9/(byte) conio_textcolor#63 main::@3/(byte) conio_textcolor#34 )
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte) conio_textcolor#38 ← phi( clrscr/(byte) conio_textcolor#50 clrscr::@6/(byte) conio_textcolor#51 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (const nomodify byte) CONIO_HEIGHT
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte) conio_textcolor#24 ← phi( clrscr::@1/(byte) conio_textcolor#38 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x#1 ← (number) 0
  (byte) conio_cursor_y#1 ← (number) 0
  (byte*) conio_cursor_text#1 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color#1 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte) conio_textcolor#17 ← phi( clrscr::@2/(byte) conio_textcolor#24 clrscr::@5/(byte) conio_textcolor#8 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (const nomodify byte) CONIO_WIDTH
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) conio_textcolor#8 ← phi( clrscr::@4/(byte) conio_textcolor#17 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor#8
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) conio_textcolor#51 ← phi( clrscr::@4/(byte) conio_textcolor#17 )
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (const nomodify byte) CONIO_WIDTH
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (const nomodify byte) CONIO_WIDTH
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  (byte*) conio_cursor_color#46 ← phi( clrscr::@3/(byte*) conio_cursor_color#1 )
  (byte*) conio_cursor_text#46 ← phi( clrscr::@3/(byte*) conio_cursor_text#1 )
  (byte) conio_cursor_y#46 ← phi( clrscr::@3/(byte) conio_cursor_y#1 )
  (byte) conio_cursor_x#47 ← phi( clrscr::@3/(byte) conio_cursor_x#1 )
  (byte) conio_cursor_x#2 ← (byte) conio_cursor_x#47
  (byte) conio_cursor_y#2 ← (byte) conio_cursor_y#46
  (byte*) conio_cursor_text#2 ← (byte*) conio_cursor_text#46
  (byte*) conio_cursor_color#2 ← (byte*) conio_cursor_color#46
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cputc::@1 cputc::@5 cputcxy cputsxy cvline::@7 cvlinexy
  (byte) gotoxy::y#9 ← phi( cputc::@1/(byte) gotoxy::y#1 cputc::@5/(byte) gotoxy::y#2 cputcxy/(byte) gotoxy::y#3 cputsxy/(byte) gotoxy::y#4 cvline::@7/(byte) gotoxy::y#5 cvlinexy/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#7 ← phi( cputc::@1/(byte) gotoxy::x#1 cputc::@5/(byte) gotoxy::x#2 cputcxy/(byte) gotoxy::x#3 cputsxy/(byte) gotoxy::x#4 cvline::@7/(byte) gotoxy::x#5 cvlinexy/(byte) gotoxy::x#6 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::x#7 >= (const nomodify byte) CONIO_WIDTH
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::x#9 ← phi( gotoxy/(byte) gotoxy::x#7 gotoxy::@3/(byte) gotoxy::x#0 )
  (byte) gotoxy::y#7 ← phi( gotoxy/(byte) gotoxy::y#9 gotoxy::@3/(byte) gotoxy::y#10 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::y#7 >= (const nomodify byte) CONIO_HEIGHT
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::y#10 ← phi( gotoxy/(byte) gotoxy::y#9 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#8 ← phi( gotoxy::@1/(byte) gotoxy::y#7 gotoxy::@4/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#8 ← phi( gotoxy::@1/(byte) gotoxy::x#9 gotoxy::@4/(byte) gotoxy::x#10 )
  (byte) conio_cursor_x#3 ← (byte) gotoxy::x#8
  (byte) conio_cursor_y#3 ← (byte) gotoxy::y#8
  (word~) gotoxy::$4 ← ((word)) (byte) gotoxy::y#8
  (word~) gotoxy::$5 ← (word~) gotoxy::$4 * (const nomodify byte) CONIO_WIDTH
  (word~) gotoxy::$6 ← (word~) gotoxy::$5 + (byte) gotoxy::x#8
  (word) gotoxy::offset#0 ← (word~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text#3 ← (byte*~) gotoxy::$7
  (byte*~) gotoxy::$8 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color#3 ← (byte*~) gotoxy::$8
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::x#10 ← phi( gotoxy::@1/(byte) gotoxy::x#9 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  (byte*) conio_cursor_color#47 ← phi( gotoxy::@2/(byte*) conio_cursor_color#3 )
  (byte*) conio_cursor_text#47 ← phi( gotoxy::@2/(byte*) conio_cursor_text#3 )
  (byte) conio_cursor_y#47 ← phi( gotoxy::@2/(byte) conio_cursor_y#3 )
  (byte) conio_cursor_x#48 ← phi( gotoxy::@2/(byte) conio_cursor_x#3 )
  (byte) conio_cursor_x#4 ← (byte) conio_cursor_x#48
  (byte) conio_cursor_y#4 ← (byte) conio_cursor_y#47
  (byte*) conio_cursor_text#4 ← (byte*) conio_cursor_text#47
  (byte*) conio_cursor_color#4 ← (byte*) conio_cursor_color#47
  return 
  to:@return

(void()) screensize((byte*) screensize::x , (byte*) screensize::y)
screensize: scope:[screensize]  from main
  (byte*) screensize::y#1 ← phi( main/(byte*) screensize::y#0 )
  (byte*) screensize::x#1 ← phi( main/(byte*) screensize::x#0 )
  *((byte*) screensize::x#1) ← (const nomodify byte) CONIO_WIDTH
  *((byte*) screensize::y#1) ← (const nomodify byte) CONIO_HEIGHT
  to:screensize::@return
screensize::@return: scope:[screensize]  from screensize
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from MakeNiceScreen::@13 MakeNiceScreen::@15 MakeNiceScreen::@17 MakeTeeLine::@2 chline::@2 cputcxy::@1 cputs::@2 cvline::@2
  (byte) conio_cursor_x#92 ← phi( MakeNiceScreen::@13/(byte) conio_cursor_x#35 MakeNiceScreen::@15/(byte) conio_cursor_x#37 MakeNiceScreen::@17/(byte) conio_cursor_x#39 MakeTeeLine::@2/(byte) conio_cursor_x#30 chline::@2/(byte) conio_cursor_x#98 cputcxy::@1/(byte) conio_cursor_x#10 cputs::@2/(byte) conio_cursor_x#95 cvline::@2/(byte) conio_cursor_x#100 )
  (byte*) conio_cursor_color#90 ← phi( MakeNiceScreen::@13/(byte*) conio_cursor_color#34 MakeNiceScreen::@15/(byte*) conio_cursor_color#36 MakeNiceScreen::@17/(byte*) conio_cursor_color#38 MakeTeeLine::@2/(byte*) conio_cursor_color#29 chline::@2/(byte*) conio_cursor_color#97 cputcxy::@1/(byte*) conio_cursor_color#9 cputs::@2/(byte*) conio_cursor_color#94 cvline::@2/(byte*) conio_cursor_color#99 )
  (byte) conio_textcolor#18 ← phi( MakeNiceScreen::@13/(byte) conio_textcolor#25 MakeNiceScreen::@15/(byte) conio_textcolor#26 MakeNiceScreen::@17/(byte) conio_textcolor#27 MakeTeeLine::@2/(byte) conio_textcolor#28 chline::@2/(byte) conio_textcolor#29 cputcxy::@1/(byte) conio_textcolor#30 cputs::@2/(byte) conio_textcolor#31 cvline::@2/(byte) conio_textcolor#32 )
  (byte*) conio_cursor_text#90 ← phi( MakeNiceScreen::@13/(byte*) conio_cursor_text#34 MakeNiceScreen::@15/(byte*) conio_cursor_text#36 MakeNiceScreen::@17/(byte*) conio_cursor_text#38 MakeTeeLine::@2/(byte*) conio_cursor_text#29 chline::@2/(byte*) conio_cursor_text#97 cputcxy::@1/(byte*) conio_cursor_text#9 cputs::@2/(byte*) conio_cursor_text#94 cvline::@2/(byte*) conio_cursor_text#99 )
  (byte) conio_cursor_y#91 ← phi( MakeNiceScreen::@13/(byte) conio_cursor_y#34 MakeNiceScreen::@15/(byte) conio_cursor_y#36 MakeNiceScreen::@17/(byte) conio_cursor_y#38 MakeTeeLine::@2/(byte) conio_cursor_y#29 chline::@2/(byte) conio_cursor_y#98 cputcxy::@1/(byte) conio_cursor_y#9 cputs::@2/(byte) conio_cursor_y#95 cvline::@2/(byte) conio_cursor_y#100 )
  (byte) cputc::c#8 ← phi( MakeNiceScreen::@13/(byte) cputc::c#5 MakeNiceScreen::@15/(byte) cputc::c#6 MakeNiceScreen::@17/(byte) cputc::c#7 MakeTeeLine::@2/(byte) cputc::c#4 chline::@2/(byte) cputc::c#2 cputcxy::@1/(byte) cputc::c#0 cputs::@2/(byte) cputc::c#1 cvline::@2/(byte) cputc::c#3 )
  (bool~) cputc::$0 ← (byte) cputc::c#8 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@3
cputc::@1: scope:[cputc]  from cputc
  (byte*) conio_cursor_color#89 ← phi( cputc/(byte*) conio_cursor_color#90 )
  (byte*) conio_cursor_text#89 ← phi( cputc/(byte*) conio_cursor_text#90 )
  (byte) conio_cursor_x#91 ← phi( cputc/(byte) conio_cursor_x#92 )
  (byte) conio_cursor_y#48 ← phi( cputc/(byte) conio_cursor_y#91 )
  (number~) cputc::$6 ← (byte) conio_cursor_y#48 + (number) 1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number~) cputc::$6
  call gotoxy 
  to:cputc::@9
cputc::@9: scope:[cputc]  from cputc::@1
  (byte*) conio_cursor_color#48 ← phi( cputc::@1/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#48 ← phi( cputc::@1/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#49 ← phi( cputc::@1/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#49 ← phi( cputc::@1/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#5 ← (byte) conio_cursor_x#49
  (byte) conio_cursor_y#5 ← (byte) conio_cursor_y#49
  (byte*) conio_cursor_text#5 ← (byte*) conio_cursor_text#48
  (byte*) conio_cursor_color#5 ← (byte*) conio_cursor_color#48
  to:cputc::@return
cputc::@3: scope:[cputc]  from cputc
  (byte) conio_cursor_y#92 ← phi( cputc/(byte) conio_cursor_y#91 )
  (byte) conio_cursor_x#50 ← phi( cputc/(byte) conio_cursor_x#92 )
  (byte*) conio_cursor_color#49 ← phi( cputc/(byte*) conio_cursor_color#90 )
  (byte) conio_textcolor#9 ← phi( cputc/(byte) conio_textcolor#18 )
  (byte*) conio_cursor_text#49 ← phi( cputc/(byte*) conio_cursor_text#90 )
  (byte) cputc::c#9 ← phi( cputc/(byte) cputc::c#8 )
  *((byte*) conio_cursor_text#49) ← (byte) cputc::c#9
  (byte*) conio_cursor_text#6 ← ++ (byte*) conio_cursor_text#49
  *((byte*) conio_cursor_color#49) ← (byte) conio_textcolor#9
  (byte*) conio_cursor_color#6 ← ++ (byte*) conio_cursor_color#49
  (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#50
  (bool~) cputc::$1 ← (byte) conio_cursor_x#6 == (const nomodify byte) CONIO_WIDTH
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@3
  (byte*) conio_cursor_color#92 ← phi( cputc::@3/(byte*) conio_cursor_color#6 )
  (byte*) conio_cursor_text#92 ← phi( cputc::@3/(byte*) conio_cursor_text#6 )
  (byte) conio_cursor_y#50 ← phi( cputc::@3/(byte) conio_cursor_y#92 )
  (byte) conio_cursor_x#7 ← (number) 0
  (byte) conio_cursor_y#6 ← ++ (byte) conio_cursor_y#50
  (bool~) cputc::$3 ← (byte) conio_cursor_y#6 == (const nomodify byte) CONIO_HEIGHT
  (bool~) cputc::$4 ← ! (bool~) cputc::$3
  if((bool~) cputc::$4) goto cputc::@return
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@4
  (byte*) conio_cursor_color#91 ← phi( cputc::@4/(byte*) conio_cursor_color#92 )
  (byte*) conio_cursor_text#91 ← phi( cputc::@4/(byte*) conio_cursor_text#92 )
  (byte) conio_cursor_y#93 ← phi( cputc::@4/(byte) conio_cursor_y#6 )
  (byte) conio_cursor_x#93 ← phi( cputc::@4/(byte) conio_cursor_x#7 )
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) 0
  call gotoxy 
  to:cputc::@10
cputc::@10: scope:[cputc]  from cputc::@5
  (byte*) conio_cursor_color#50 ← phi( cputc::@5/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#50 ← phi( cputc::@5/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#51 ← phi( cputc::@5/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#51 ← phi( cputc::@5/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#8 ← (byte) conio_cursor_x#51
  (byte) conio_cursor_y#7 ← (byte) conio_cursor_y#51
  (byte*) conio_cursor_text#7 ← (byte*) conio_cursor_text#50
  (byte*) conio_cursor_color#7 ← (byte*) conio_cursor_color#50
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@10 cputc::@3 cputc::@4 cputc::@9
  (byte*) conio_cursor_color#51 ← phi( cputc::@10/(byte*) conio_cursor_color#7 cputc::@3/(byte*) conio_cursor_color#6 cputc::@4/(byte*) conio_cursor_color#92 cputc::@9/(byte*) conio_cursor_color#5 )
  (byte*) conio_cursor_text#51 ← phi( cputc::@10/(byte*) conio_cursor_text#7 cputc::@3/(byte*) conio_cursor_text#6 cputc::@4/(byte*) conio_cursor_text#92 cputc::@9/(byte*) conio_cursor_text#5 )
  (byte) conio_cursor_y#52 ← phi( cputc::@10/(byte) conio_cursor_y#7 cputc::@3/(byte) conio_cursor_y#92 cputc::@4/(byte) conio_cursor_y#6 cputc::@9/(byte) conio_cursor_y#5 )
  (byte) conio_cursor_x#52 ← phi( cputc::@10/(byte) conio_cursor_x#8 cputc::@3/(byte) conio_cursor_x#6 cputc::@4/(byte) conio_cursor_x#7 cputc::@9/(byte) conio_cursor_x#5 )
  (byte) conio_cursor_x#9 ← (byte) conio_cursor_x#52
  (byte) conio_cursor_y#8 ← (byte) conio_cursor_y#52
  (byte*) conio_cursor_text#8 ← (byte*) conio_cursor_text#51
  (byte*) conio_cursor_color#8 ← (byte*) conio_cursor_color#51
  return 
  to:@return

(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
cputcxy: scope:[cputcxy]  from MakeNiceScreen::@11 MakeTeeLine
  (byte) conio_textcolor#39 ← phi( MakeNiceScreen::@11/(byte) conio_textcolor#52 MakeTeeLine/(byte) conio_textcolor#53 )
  (byte) cputcxy::c#3 ← phi( MakeNiceScreen::@11/(byte) cputcxy::c#1 MakeTeeLine/(byte) cputcxy::c#0 )
  (byte*) conio_cursor_color#93 ← phi( MakeNiceScreen::@11/(byte*) conio_cursor_color#106 MakeTeeLine/(byte*) conio_cursor_color#104 )
  (byte*) conio_cursor_text#93 ← phi( MakeNiceScreen::@11/(byte*) conio_cursor_text#106 MakeTeeLine/(byte*) conio_cursor_text#104 )
  (byte) conio_cursor_y#94 ← phi( MakeNiceScreen::@11/(byte) conio_cursor_y#107 MakeTeeLine/(byte) conio_cursor_y#105 )
  (byte) conio_cursor_x#94 ← phi( MakeNiceScreen::@11/(byte) conio_cursor_x#107 MakeTeeLine/(byte) conio_cursor_x#105 )
  (byte) cputcxy::y#2 ← phi( MakeNiceScreen::@11/(byte) cputcxy::y#1 MakeTeeLine/(byte) cputcxy::y#0 )
  (byte) cputcxy::x#2 ← phi( MakeNiceScreen::@11/(byte) cputcxy::x#1 MakeTeeLine/(byte) cputcxy::x#0 )
  (byte) gotoxy::x#3 ← (byte) cputcxy::x#2
  (byte) gotoxy::y#3 ← (byte) cputcxy::y#2
  call gotoxy 
  to:cputcxy::@1
cputcxy::@1: scope:[cputcxy]  from cputcxy
  (byte) conio_textcolor#30 ← phi( cputcxy/(byte) conio_textcolor#39 )
  (byte) cputcxy::c#2 ← phi( cputcxy/(byte) cputcxy::c#3 )
  (byte*) conio_cursor_color#52 ← phi( cputcxy/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#52 ← phi( cputcxy/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#53 ← phi( cputcxy/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#53 ← phi( cputcxy/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#10 ← (byte) conio_cursor_x#53
  (byte) conio_cursor_y#9 ← (byte) conio_cursor_y#53
  (byte*) conio_cursor_text#9 ← (byte*) conio_cursor_text#52
  (byte*) conio_cursor_color#9 ← (byte*) conio_cursor_color#52
  (byte) cputc::c#0 ← (byte) cputcxy::c#2
  call cputc 
  to:cputcxy::@2
cputcxy::@2: scope:[cputcxy]  from cputcxy::@1
  (byte*) conio_cursor_color#53 ← phi( cputcxy::@1/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#53 ← phi( cputcxy::@1/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#54 ← phi( cputcxy::@1/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#54 ← phi( cputcxy::@1/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#11 ← (byte) conio_cursor_x#54
  (byte) conio_cursor_y#10 ← (byte) conio_cursor_y#54
  (byte*) conio_cursor_text#10 ← (byte*) conio_cursor_text#53
  (byte*) conio_cursor_color#10 ← (byte*) conio_cursor_color#53
  to:cputcxy::@return
cputcxy::@return: scope:[cputcxy]  from cputcxy::@2
  (byte*) conio_cursor_color#54 ← phi( cputcxy::@2/(byte*) conio_cursor_color#10 )
  (byte*) conio_cursor_text#54 ← phi( cputcxy::@2/(byte*) conio_cursor_text#10 )
  (byte) conio_cursor_y#55 ← phi( cputcxy::@2/(byte) conio_cursor_y#10 )
  (byte) conio_cursor_x#55 ← phi( cputcxy::@2/(byte) conio_cursor_x#11 )
  (byte) conio_cursor_x#12 ← (byte) conio_cursor_x#55
  (byte) conio_cursor_y#11 ← (byte) conio_cursor_y#55
  (byte*) conio_cursor_text#11 ← (byte*) conio_cursor_text#54
  (byte*) conio_cursor_color#11 ← (byte*) conio_cursor_color#54
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from cputsxy::@1
  (byte) conio_textcolor#54 ← phi( cputsxy::@1/(byte) conio_textcolor#64 )
  (byte*) conio_cursor_color#110 ← phi( cputsxy::@1/(byte*) conio_cursor_color#14 )
  (byte*) conio_cursor_text#110 ← phi( cputsxy::@1/(byte*) conio_cursor_text#14 )
  (byte) conio_cursor_y#111 ← phi( cputsxy::@1/(byte) conio_cursor_y#14 )
  (byte) conio_cursor_x#111 ← phi( cputsxy::@1/(byte) conio_cursor_x#15 )
  (to_nomodify byte*) cputs::s#3 ← phi( cputsxy::@1/(to_nomodify byte*) cputs::s#1 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@7
  (byte) conio_textcolor#40 ← phi( cputs/(byte) conio_textcolor#54 cputs::@7/(byte) conio_textcolor#55 )
  (byte*) conio_cursor_color#95 ← phi( cputs/(byte*) conio_cursor_color#110 cputs::@7/(byte*) conio_cursor_color#12 )
  (byte*) conio_cursor_text#95 ← phi( cputs/(byte*) conio_cursor_text#110 cputs::@7/(byte*) conio_cursor_text#12 )
  (byte) conio_cursor_y#96 ← phi( cputs/(byte) conio_cursor_y#111 cputs::@7/(byte) conio_cursor_y#12 )
  (byte) conio_cursor_x#96 ← phi( cputs/(byte) conio_cursor_x#111 cputs::@7/(byte) conio_cursor_x#13 )
  (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#3 cputs::@7/(to_nomodify byte*) cputs::s#4 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#5 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) conio_textcolor#31 ← phi( cputs::@1/(byte) conio_textcolor#40 )
  (byte*) conio_cursor_color#94 ← phi( cputs::@1/(byte*) conio_cursor_color#95 )
  (byte*) conio_cursor_text#94 ← phi( cputs::@1/(byte*) conio_cursor_text#95 )
  (byte) conio_cursor_y#95 ← phi( cputs::@1/(byte) conio_cursor_y#96 )
  (byte) conio_cursor_x#95 ← phi( cputs::@1/(byte) conio_cursor_x#96 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#1 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@7
cputs::@7: scope:[cputs]  from cputs::@2
  (byte) conio_textcolor#55 ← phi( cputs::@2/(byte) conio_textcolor#31 )
  (to_nomodify byte*) cputs::s#4 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#5 )
  (byte*) conio_cursor_color#55 ← phi( cputs::@2/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#55 ← phi( cputs::@2/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#56 ← phi( cputs::@2/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#56 ← phi( cputs::@2/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#13 ← (byte) conio_cursor_x#56
  (byte) conio_cursor_y#12 ← (byte) conio_cursor_y#56
  (byte*) conio_cursor_text#12 ← (byte*) conio_cursor_text#55
  (byte*) conio_cursor_color#12 ← (byte*) conio_cursor_color#55
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  (byte*) conio_cursor_color#56 ← phi( cputs::@1/(byte*) conio_cursor_color#95 )
  (byte*) conio_cursor_text#56 ← phi( cputs::@1/(byte*) conio_cursor_text#95 )
  (byte) conio_cursor_y#57 ← phi( cputs::@1/(byte) conio_cursor_y#96 )
  (byte) conio_cursor_x#57 ← phi( cputs::@1/(byte) conio_cursor_x#96 )
  (byte) conio_cursor_x#14 ← (byte) conio_cursor_x#57
  (byte) conio_cursor_y#13 ← (byte) conio_cursor_y#57
  (byte*) conio_cursor_text#13 ← (byte*) conio_cursor_text#56
  (byte*) conio_cursor_color#13 ← (byte*) conio_cursor_color#56
  return 
  to:@return

(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
cputsxy: scope:[cputsxy]  from MakeNiceScreen::@22
  (byte) conio_textcolor#69 ← phi( MakeNiceScreen::@22/(byte) conio_textcolor#49 )
  (to_nomodify byte*) cputsxy::s#2 ← phi( MakeNiceScreen::@22/(to_nomodify byte*) cputsxy::s#0 )
  (byte*) conio_cursor_color#96 ← phi( MakeNiceScreen::@22/(byte*) conio_cursor_color#107 )
  (byte*) conio_cursor_text#96 ← phi( MakeNiceScreen::@22/(byte*) conio_cursor_text#107 )
  (byte) conio_cursor_y#97 ← phi( MakeNiceScreen::@22/(byte) conio_cursor_y#108 )
  (byte) conio_cursor_x#97 ← phi( MakeNiceScreen::@22/(byte) conio_cursor_x#108 )
  (byte) cputsxy::y#1 ← phi( MakeNiceScreen::@22/(byte) cputsxy::y#0 )
  (byte) cputsxy::x#1 ← phi( MakeNiceScreen::@22/(byte) cputsxy::x#0 )
  (byte) gotoxy::x#4 ← (byte) cputsxy::x#1
  (byte) gotoxy::y#4 ← (byte) cputsxy::y#1
  call gotoxy 
  to:cputsxy::@1
cputsxy::@1: scope:[cputsxy]  from cputsxy
  (byte) conio_textcolor#64 ← phi( cputsxy/(byte) conio_textcolor#69 )
  (to_nomodify byte*) cputsxy::s#1 ← phi( cputsxy/(to_nomodify byte*) cputsxy::s#2 )
  (byte*) conio_cursor_color#57 ← phi( cputsxy/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#57 ← phi( cputsxy/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#58 ← phi( cputsxy/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#58 ← phi( cputsxy/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#15 ← (byte) conio_cursor_x#58
  (byte) conio_cursor_y#14 ← (byte) conio_cursor_y#58
  (byte*) conio_cursor_text#14 ← (byte*) conio_cursor_text#57
  (byte*) conio_cursor_color#14 ← (byte*) conio_cursor_color#57
  (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#1
  call cputs 
  to:cputsxy::@2
cputsxy::@2: scope:[cputsxy]  from cputsxy::@1
  (byte*) conio_cursor_color#58 ← phi( cputsxy::@1/(byte*) conio_cursor_color#13 )
  (byte*) conio_cursor_text#58 ← phi( cputsxy::@1/(byte*) conio_cursor_text#13 )
  (byte) conio_cursor_y#59 ← phi( cputsxy::@1/(byte) conio_cursor_y#13 )
  (byte) conio_cursor_x#59 ← phi( cputsxy::@1/(byte) conio_cursor_x#14 )
  (byte) conio_cursor_x#16 ← (byte) conio_cursor_x#59
  (byte) conio_cursor_y#15 ← (byte) conio_cursor_y#59
  (byte*) conio_cursor_text#15 ← (byte*) conio_cursor_text#58
  (byte*) conio_cursor_color#15 ← (byte*) conio_cursor_color#58
  to:cputsxy::@return
cputsxy::@return: scope:[cputsxy]  from cputsxy::@2
  (byte*) conio_cursor_color#59 ← phi( cputsxy::@2/(byte*) conio_cursor_color#15 )
  (byte*) conio_cursor_text#59 ← phi( cputsxy::@2/(byte*) conio_cursor_text#15 )
  (byte) conio_cursor_y#60 ← phi( cputsxy::@2/(byte) conio_cursor_y#15 )
  (byte) conio_cursor_x#60 ← phi( cputsxy::@2/(byte) conio_cursor_x#16 )
  (byte) conio_cursor_x#17 ← (byte) conio_cursor_x#60
  (byte) conio_cursor_y#16 ← (byte) conio_cursor_y#60
  (byte*) conio_cursor_text#16 ← (byte*) conio_cursor_text#59
  (byte*) conio_cursor_color#16 ← (byte*) conio_cursor_color#59
  return 
  to:@return

(void()) chline((byte) chline::length)
chline: scope:[chline]  from MakeNiceScreen::@12 MakeNiceScreen::@16 MakeTeeLine::@1
  (byte) conio_textcolor#56 ← phi( MakeNiceScreen::@12/(byte) conio_textcolor#45 MakeNiceScreen::@16/(byte) conio_textcolor#47 MakeTeeLine::@1/(byte) conio_textcolor#44 )
  (byte*) conio_cursor_color#111 ← phi( MakeNiceScreen::@12/(byte*) conio_cursor_color#33 MakeNiceScreen::@16/(byte*) conio_cursor_color#37 MakeTeeLine::@1/(byte*) conio_cursor_color#28 )
  (byte*) conio_cursor_text#111 ← phi( MakeNiceScreen::@12/(byte*) conio_cursor_text#33 MakeNiceScreen::@16/(byte*) conio_cursor_text#37 MakeTeeLine::@1/(byte*) conio_cursor_text#28 )
  (byte) conio_cursor_y#112 ← phi( MakeNiceScreen::@12/(byte) conio_cursor_y#33 MakeNiceScreen::@16/(byte) conio_cursor_y#37 MakeTeeLine::@1/(byte) conio_cursor_y#28 )
  (byte) conio_cursor_x#112 ← phi( MakeNiceScreen::@12/(byte) conio_cursor_x#34 MakeNiceScreen::@16/(byte) conio_cursor_x#38 MakeTeeLine::@1/(byte) conio_cursor_x#29 )
  (byte) chline::length#4 ← phi( MakeNiceScreen::@12/(byte) chline::length#1 MakeNiceScreen::@16/(byte) chline::length#2 MakeTeeLine::@1/(byte) chline::length#0 )
  (byte) chline::i#0 ← (byte) 0
  to:chline::@1
chline::@1: scope:[chline]  from chline chline::@7
  (byte) conio_textcolor#41 ← phi( chline/(byte) conio_textcolor#56 chline::@7/(byte) conio_textcolor#57 )
  (byte*) conio_cursor_color#98 ← phi( chline/(byte*) conio_cursor_color#111 chline::@7/(byte*) conio_cursor_color#17 )
  (byte*) conio_cursor_text#98 ← phi( chline/(byte*) conio_cursor_text#111 chline::@7/(byte*) conio_cursor_text#17 )
  (byte) conio_cursor_y#99 ← phi( chline/(byte) conio_cursor_y#112 chline::@7/(byte) conio_cursor_y#17 )
  (byte) conio_cursor_x#99 ← phi( chline/(byte) conio_cursor_x#112 chline::@7/(byte) conio_cursor_x#18 )
  (byte) chline::length#3 ← phi( chline/(byte) chline::length#4 chline::@7/(byte) chline::length#5 )
  (byte) chline::i#2 ← phi( chline/(byte) chline::i#0 chline::@7/(byte) chline::i#1 )
  (bool~) chline::$0 ← (byte) chline::i#2 < (byte) chline::length#3
  if((bool~) chline::$0) goto chline::@2
  to:chline::@return
chline::@2: scope:[chline]  from chline::@1
  (byte) chline::length#6 ← phi( chline::@1/(byte) chline::length#3 )
  (byte) conio_textcolor#29 ← phi( chline::@1/(byte) conio_textcolor#41 )
  (byte) chline::i#4 ← phi( chline::@1/(byte) chline::i#2 )
  (byte*) conio_cursor_color#97 ← phi( chline::@1/(byte*) conio_cursor_color#98 )
  (byte*) conio_cursor_text#97 ← phi( chline::@1/(byte*) conio_cursor_text#98 )
  (byte) conio_cursor_y#98 ← phi( chline::@1/(byte) conio_cursor_y#99 )
  (byte) conio_cursor_x#98 ← phi( chline::@1/(byte) conio_cursor_x#99 )
  (byte) cputc::c#2 ← (const nomodify byte) CH_HLINE
  call cputc 
  to:chline::@7
chline::@7: scope:[chline]  from chline::@2
  (byte) conio_textcolor#57 ← phi( chline::@2/(byte) conio_textcolor#29 )
  (byte) chline::length#5 ← phi( chline::@2/(byte) chline::length#6 )
  (byte) chline::i#3 ← phi( chline::@2/(byte) chline::i#4 )
  (byte*) conio_cursor_color#60 ← phi( chline::@2/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#60 ← phi( chline::@2/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#61 ← phi( chline::@2/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#61 ← phi( chline::@2/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#18 ← (byte) conio_cursor_x#61
  (byte) conio_cursor_y#17 ← (byte) conio_cursor_y#61
  (byte*) conio_cursor_text#17 ← (byte*) conio_cursor_text#60
  (byte*) conio_cursor_color#17 ← (byte*) conio_cursor_color#60
  (byte) chline::i#1 ← ++ (byte) chline::i#3
  to:chline::@1
chline::@return: scope:[chline]  from chline::@1
  (byte*) conio_cursor_color#61 ← phi( chline::@1/(byte*) conio_cursor_color#98 )
  (byte*) conio_cursor_text#61 ← phi( chline::@1/(byte*) conio_cursor_text#98 )
  (byte) conio_cursor_y#62 ← phi( chline::@1/(byte) conio_cursor_y#99 )
  (byte) conio_cursor_x#62 ← phi( chline::@1/(byte) conio_cursor_x#99 )
  (byte) conio_cursor_x#19 ← (byte) conio_cursor_x#62
  (byte) conio_cursor_y#18 ← (byte) conio_cursor_y#62
  (byte*) conio_cursor_text#18 ← (byte*) conio_cursor_text#61
  (byte*) conio_cursor_color#18 ← (byte*) conio_cursor_color#61
  return 
  to:@return

(void()) cvline((byte) cvline::length)
cvline: scope:[cvline]  from cvlinexy::@1
  (byte) conio_textcolor#58 ← phi( cvlinexy::@1/(byte) conio_textcolor#65 )
  (byte*) conio_cursor_color#112 ← phi( cvlinexy::@1/(byte*) conio_cursor_color#22 )
  (byte*) conio_cursor_text#112 ← phi( cvlinexy::@1/(byte*) conio_cursor_text#22 )
  (byte) cvline::length#2 ← phi( cvlinexy::@1/(byte) cvline::length#0 )
  (byte) conio_cursor_y#63 ← phi( cvlinexy::@1/(byte) conio_cursor_y#22 )
  (byte) conio_cursor_x#63 ← phi( cvlinexy::@1/(byte) conio_cursor_x#23 )
  (byte) cvline::x#0 ← (byte) conio_cursor_x#63
  (byte) cvline::y#0 ← (byte) conio_cursor_y#63
  (byte) cvline::i#0 ← (byte) 0
  to:cvline::@1
cvline::@1: scope:[cvline]  from cvline cvline::@8
  (byte) conio_textcolor#42 ← phi( cvline/(byte) conio_textcolor#58 cvline::@8/(byte) conio_textcolor#59 )
  (byte) cvline::x#3 ← phi( cvline/(byte) cvline::x#0 cvline::@8/(byte) cvline::x#4 )
  (byte) cvline::y#4 ← phi( cvline/(byte) cvline::y#0 cvline::@8/(byte) cvline::y#5 )
  (byte*) conio_cursor_color#100 ← phi( cvline/(byte*) conio_cursor_color#112 cvline::@8/(byte*) conio_cursor_color#20 )
  (byte*) conio_cursor_text#100 ← phi( cvline/(byte*) conio_cursor_text#112 cvline::@8/(byte*) conio_cursor_text#20 )
  (byte) conio_cursor_y#101 ← phi( cvline/(byte) conio_cursor_y#63 cvline::@8/(byte) conio_cursor_y#20 )
  (byte) conio_cursor_x#101 ← phi( cvline/(byte) conio_cursor_x#63 cvline::@8/(byte) conio_cursor_x#21 )
  (byte) cvline::length#1 ← phi( cvline/(byte) cvline::length#2 cvline::@8/(byte) cvline::length#3 )
  (byte) cvline::i#2 ← phi( cvline/(byte) cvline::i#0 cvline::@8/(byte) cvline::i#1 )
  (bool~) cvline::$0 ← (byte) cvline::i#2 < (byte) cvline::length#1
  if((bool~) cvline::$0) goto cvline::@2
  to:cvline::@return
cvline::@2: scope:[cvline]  from cvline::@1
  (byte) cvline::length#5 ← phi( cvline::@1/(byte) cvline::length#1 )
  (byte) cvline::i#5 ← phi( cvline::@1/(byte) cvline::i#2 )
  (byte) conio_textcolor#32 ← phi( cvline::@1/(byte) conio_textcolor#42 )
  (byte) cvline::x#2 ← phi( cvline::@1/(byte) cvline::x#3 )
  (byte) cvline::y#3 ← phi( cvline::@1/(byte) cvline::y#4 )
  (byte*) conio_cursor_color#99 ← phi( cvline::@1/(byte*) conio_cursor_color#100 )
  (byte*) conio_cursor_text#99 ← phi( cvline::@1/(byte*) conio_cursor_text#100 )
  (byte) conio_cursor_y#100 ← phi( cvline::@1/(byte) conio_cursor_y#101 )
  (byte) conio_cursor_x#100 ← phi( cvline::@1/(byte) conio_cursor_x#101 )
  (byte) cputc::c#3 ← (const nomodify byte) CH_VLINE
  call cputc 
  to:cvline::@7
cvline::@7: scope:[cvline]  from cvline::@2
  (byte) conio_textcolor#66 ← phi( cvline::@2/(byte) conio_textcolor#32 )
  (byte) cvline::length#4 ← phi( cvline::@2/(byte) cvline::length#5 )
  (byte) cvline::i#4 ← phi( cvline::@2/(byte) cvline::i#5 )
  (byte) cvline::x#1 ← phi( cvline::@2/(byte) cvline::x#2 )
  (byte) cvline::y#2 ← phi( cvline::@2/(byte) cvline::y#3 )
  (byte*) conio_cursor_color#62 ← phi( cvline::@2/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#62 ← phi( cvline::@2/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#64 ← phi( cvline::@2/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#64 ← phi( cvline::@2/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#20 ← (byte) conio_cursor_x#64
  (byte) conio_cursor_y#19 ← (byte) conio_cursor_y#64
  (byte*) conio_cursor_text#19 ← (byte*) conio_cursor_text#62
  (byte*) conio_cursor_color#19 ← (byte*) conio_cursor_color#62
  (byte) cvline::y#1 ← ++ (byte) cvline::y#2
  (byte) gotoxy::x#5 ← (byte) cvline::x#1
  (byte) gotoxy::y#5 ← (byte) cvline::y#1
  call gotoxy 
  to:cvline::@8
cvline::@8: scope:[cvline]  from cvline::@7
  (byte) conio_textcolor#59 ← phi( cvline::@7/(byte) conio_textcolor#66 )
  (byte) cvline::x#4 ← phi( cvline::@7/(byte) cvline::x#1 )
  (byte) cvline::y#5 ← phi( cvline::@7/(byte) cvline::y#1 )
  (byte) cvline::length#3 ← phi( cvline::@7/(byte) cvline::length#4 )
  (byte) cvline::i#3 ← phi( cvline::@7/(byte) cvline::i#4 )
  (byte*) conio_cursor_color#63 ← phi( cvline::@7/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#63 ← phi( cvline::@7/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#65 ← phi( cvline::@7/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#65 ← phi( cvline::@7/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#21 ← (byte) conio_cursor_x#65
  (byte) conio_cursor_y#20 ← (byte) conio_cursor_y#65
  (byte*) conio_cursor_text#20 ← (byte*) conio_cursor_text#63
  (byte*) conio_cursor_color#20 ← (byte*) conio_cursor_color#63
  (byte) cvline::i#1 ← ++ (byte) cvline::i#3
  to:cvline::@1
cvline::@return: scope:[cvline]  from cvline::@1
  (byte*) conio_cursor_color#64 ← phi( cvline::@1/(byte*) conio_cursor_color#100 )
  (byte*) conio_cursor_text#64 ← phi( cvline::@1/(byte*) conio_cursor_text#100 )
  (byte) conio_cursor_y#66 ← phi( cvline::@1/(byte) conio_cursor_y#101 )
  (byte) conio_cursor_x#66 ← phi( cvline::@1/(byte) conio_cursor_x#101 )
  (byte) conio_cursor_x#22 ← (byte) conio_cursor_x#66
  (byte) conio_cursor_y#21 ← (byte) conio_cursor_y#66
  (byte*) conio_cursor_text#21 ← (byte*) conio_cursor_text#64
  (byte*) conio_cursor_color#21 ← (byte*) conio_cursor_color#64
  return 
  to:@return

(void()) cvlinexy((byte) cvlinexy::x , (byte) cvlinexy::y , (byte) cvlinexy::length)
cvlinexy: scope:[cvlinexy]  from MakeNiceScreen::@14 MakeNiceScreen::@18
  (byte) conio_textcolor#70 ← phi( MakeNiceScreen::@14/(byte) conio_textcolor#46 MakeNiceScreen::@18/(byte) conio_textcolor#68 )
  (byte) cvlinexy::length#3 ← phi( MakeNiceScreen::@14/(byte) cvlinexy::length#0 MakeNiceScreen::@18/(byte) cvlinexy::length#1 )
  (byte*) conio_cursor_color#101 ← phi( MakeNiceScreen::@14/(byte*) conio_cursor_color#35 MakeNiceScreen::@18/(byte*) conio_cursor_color#39 )
  (byte*) conio_cursor_text#101 ← phi( MakeNiceScreen::@14/(byte*) conio_cursor_text#35 MakeNiceScreen::@18/(byte*) conio_cursor_text#39 )
  (byte) conio_cursor_y#102 ← phi( MakeNiceScreen::@14/(byte) conio_cursor_y#35 MakeNiceScreen::@18/(byte) conio_cursor_y#39 )
  (byte) conio_cursor_x#102 ← phi( MakeNiceScreen::@14/(byte) conio_cursor_x#36 MakeNiceScreen::@18/(byte) conio_cursor_x#40 )
  (byte) cvlinexy::y#2 ← phi( MakeNiceScreen::@14/(byte) cvlinexy::y#0 MakeNiceScreen::@18/(byte) cvlinexy::y#1 )
  (byte) cvlinexy::x#2 ← phi( MakeNiceScreen::@14/(byte) cvlinexy::x#0 MakeNiceScreen::@18/(byte) cvlinexy::x#1 )
  (byte) gotoxy::x#6 ← (byte) cvlinexy::x#2
  (byte) gotoxy::y#6 ← (byte) cvlinexy::y#2
  call gotoxy 
  to:cvlinexy::@1
cvlinexy::@1: scope:[cvlinexy]  from cvlinexy
  (byte) conio_textcolor#65 ← phi( cvlinexy/(byte) conio_textcolor#70 )
  (byte) cvlinexy::length#2 ← phi( cvlinexy/(byte) cvlinexy::length#3 )
  (byte*) conio_cursor_color#65 ← phi( cvlinexy/(byte*) conio_cursor_color#4 )
  (byte*) conio_cursor_text#65 ← phi( cvlinexy/(byte*) conio_cursor_text#4 )
  (byte) conio_cursor_y#67 ← phi( cvlinexy/(byte) conio_cursor_y#4 )
  (byte) conio_cursor_x#67 ← phi( cvlinexy/(byte) conio_cursor_x#4 )
  (byte) conio_cursor_x#23 ← (byte) conio_cursor_x#67
  (byte) conio_cursor_y#22 ← (byte) conio_cursor_y#67
  (byte*) conio_cursor_text#22 ← (byte*) conio_cursor_text#65
  (byte*) conio_cursor_color#22 ← (byte*) conio_cursor_color#65
  (byte) cvline::length#0 ← (byte) cvlinexy::length#2
  call cvline 
  to:cvlinexy::@2
cvlinexy::@2: scope:[cvlinexy]  from cvlinexy::@1
  (byte*) conio_cursor_color#66 ← phi( cvlinexy::@1/(byte*) conio_cursor_color#21 )
  (byte*) conio_cursor_text#66 ← phi( cvlinexy::@1/(byte*) conio_cursor_text#21 )
  (byte) conio_cursor_y#68 ← phi( cvlinexy::@1/(byte) conio_cursor_y#21 )
  (byte) conio_cursor_x#68 ← phi( cvlinexy::@1/(byte) conio_cursor_x#22 )
  (byte) conio_cursor_x#24 ← (byte) conio_cursor_x#68
  (byte) conio_cursor_y#23 ← (byte) conio_cursor_y#68
  (byte*) conio_cursor_text#23 ← (byte*) conio_cursor_text#66
  (byte*) conio_cursor_color#23 ← (byte*) conio_cursor_color#66
  to:cvlinexy::@return
cvlinexy::@return: scope:[cvlinexy]  from cvlinexy::@2
  (byte*) conio_cursor_color#67 ← phi( cvlinexy::@2/(byte*) conio_cursor_color#23 )
  (byte*) conio_cursor_text#67 ← phi( cvlinexy::@2/(byte*) conio_cursor_text#23 )
  (byte) conio_cursor_y#69 ← phi( cvlinexy::@2/(byte) conio_cursor_y#23 )
  (byte) conio_cursor_x#69 ← phi( cvlinexy::@2/(byte) conio_cursor_x#24 )
  (byte) conio_cursor_x#25 ← (byte) conio_cursor_x#69
  (byte) conio_cursor_y#24 ← (byte) conio_cursor_y#69
  (byte*) conio_cursor_text#24 ← (byte*) conio_cursor_text#67
  (byte*) conio_cursor_color#24 ← (byte*) conio_cursor_color#67
  return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from MakeNiceScreen
  (byte) textcolor::color#1 ← phi( MakeNiceScreen/(byte) textcolor::color#0 )
  (byte) conio_textcolor#10 ← phi( MakeNiceScreen/(byte) conio_textcolor#19 )
  (byte) textcolor::old#0 ← (byte) conio_textcolor#10
  (byte) conio_textcolor#1 ← (byte) textcolor::color#1
  (byte) textcolor::return#0 ← (byte) textcolor::old#0
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  (byte) conio_textcolor#11 ← phi( textcolor/(byte) conio_textcolor#1 )
  (byte) textcolor::return#3 ← phi( textcolor/(byte) textcolor::return#0 )
  (byte) textcolor::return#1 ← (byte) textcolor::return#3
  (byte) conio_textcolor#2 ← (byte) conio_textcolor#11
  return 
  to:@return

(byte()) bgcolor((byte) bgcolor::color)
bgcolor: scope:[bgcolor]  from MakeNiceScreen::@8
  (byte) bgcolor::color#1 ← phi( MakeNiceScreen::@8/(byte) bgcolor::color#0 )
  (byte) bgcolor::old#0 ← *((const nomodify byte*) CONIO_BGCOLOR)
  *((const nomodify byte*) CONIO_BGCOLOR) ← (byte) bgcolor::color#1
  (byte) bgcolor::return#0 ← (byte) bgcolor::old#0
  to:bgcolor::@return
bgcolor::@return: scope:[bgcolor]  from bgcolor
  (byte) bgcolor::return#3 ← phi( bgcolor/(byte) bgcolor::return#0 )
  (byte) bgcolor::return#1 ← (byte) bgcolor::return#3
  return 
  to:@return

(byte()) bordercolor((byte) bordercolor::color)
bordercolor: scope:[bordercolor]  from MakeNiceScreen::@7
  (byte) bordercolor::color#1 ← phi( MakeNiceScreen::@7/(byte) bordercolor::color#0 )
  (byte) bordercolor::old#0 ← *((const nomodify byte*) CONIO_BORDERCOLOR)
  *((const nomodify byte*) CONIO_BORDERCOLOR) ← (byte) bordercolor::color#1
  (byte) bordercolor::return#0 ← (byte) bordercolor::old#0
  to:bordercolor::@return
bordercolor::@return: scope:[bordercolor]  from bordercolor
  (byte) bordercolor::return#3 ← phi( bordercolor/(byte) bordercolor::return#0 )
  (byte) bordercolor::return#1 ← (byte) bordercolor::return#3
  return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from main::@1
  *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (number) 0
  (byte~) kbhit::$0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  (byte) kbhit::return#0 ← (byte~) kbhit::$0
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  (byte) kbhit::return#3 ← phi( kbhit/(byte) kbhit::return#0 )
  (byte) kbhit::return#1 ← (byte) kbhit::return#3
  return 
  to:@return

(byte()) cursor((byte) cursor::onoff)
cursor: scope:[cursor]  from MakeNiceScreen::@10
  (byte) cursor::onoff#1 ← phi( MakeNiceScreen::@10/(byte) cursor::onoff#0 )
  (byte) conio_display_cursor#8 ← phi( MakeNiceScreen::@10/(byte) conio_display_cursor#15 )
  (byte) cursor::old#0 ← (byte) conio_display_cursor#8
  (byte) conio_display_cursor#1 ← (byte) cursor::onoff#1
  (byte) cursor::return#0 ← (byte) cursor::old#0
  to:cursor::@return
cursor::@return: scope:[cursor]  from cursor
  (byte) conio_display_cursor#9 ← phi( cursor/(byte) conio_display_cursor#1 )
  (byte) cursor::return#3 ← phi( cursor/(byte) cursor::return#0 )
  (byte) cursor::return#1 ← (byte) cursor::return#3
  (byte) conio_display_cursor#2 ← (byte) conio_display_cursor#9
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from MakeNiceScreen::@2
  (byte*) strlen::str#4 ← phi( MakeNiceScreen::@2/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return
@22: scope:[]  from @begin
  (byte) conio_display_cursor#25 ← phi( @begin/(byte) conio_display_cursor#0 )
  (byte*) conio_cursor_color#117 ← phi( @begin/(byte*) conio_cursor_color#0 )
  (byte*) conio_cursor_text#117 ← phi( @begin/(byte*) conio_cursor_text#0 )
  (byte) conio_cursor_y#117 ← phi( @begin/(byte) conio_cursor_y#0 )
  (byte) conio_cursor_x#117 ← phi( @begin/(byte) conio_cursor_x#0 )
  (byte) conio_textcolor#37 ← phi( @begin/(byte) conio_textcolor#0 )
  (volatile byte) XSize ← (byte) 0
  (volatile byte) YSize ← (byte) 0
  to:@25

(void()) main()
main: scope:[main]  from @25
  (byte) conio_display_cursor#20 ← phi( @25/(byte) conio_display_cursor#19 )
  (byte*) conio_cursor_color#113 ← phi( @25/(byte*) conio_cursor_color#109 )
  (byte*) conio_cursor_text#113 ← phi( @25/(byte*) conio_cursor_text#109 )
  (byte) conio_cursor_y#113 ← phi( @25/(byte) conio_cursor_y#110 )
  (byte) conio_cursor_x#113 ← phi( @25/(byte) conio_cursor_x#110 )
  (byte) conio_textcolor#33 ← phi( @25/(byte) conio_textcolor#23 )
  *((const nomodify byte*) VIC_MEMORY) ← (number) $17
  (byte*) screensize::x#0 ← &(volatile byte) XSize
  (byte*) screensize::y#0 ← &(volatile byte) YSize
  call screensize 
  to:main::@7
main::@7: scope:[main]  from main
  (byte) conio_display_cursor#16 ← phi( main/(byte) conio_display_cursor#20 )
  (byte*) conio_cursor_color#102 ← phi( main/(byte*) conio_cursor_color#113 )
  (byte*) conio_cursor_text#102 ← phi( main/(byte*) conio_cursor_text#113 )
  (byte) conio_cursor_y#103 ← phi( main/(byte) conio_cursor_y#113 )
  (byte) conio_cursor_x#103 ← phi( main/(byte) conio_cursor_x#113 )
  (byte) conio_textcolor#20 ← phi( main/(byte) conio_textcolor#33 )
  call MakeNiceScreen 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) conio_display_cursor#10 ← phi( main::@7/(byte) conio_display_cursor#6 )
  (byte*) conio_cursor_color#68 ← phi( main::@7/(byte*) conio_cursor_color#44 )
  (byte*) conio_cursor_text#68 ← phi( main::@7/(byte*) conio_cursor_text#44 )
  (byte) conio_cursor_y#70 ← phi( main::@7/(byte) conio_cursor_y#44 )
  (byte) conio_cursor_x#70 ← phi( main::@7/(byte) conio_cursor_x#45 )
  (byte) conio_textcolor#12 ← phi( main::@7/(byte) conio_textcolor#6 )
  (byte) conio_textcolor#3 ← (byte) conio_textcolor#12
  (byte) conio_cursor_x#26 ← (byte) conio_cursor_x#70
  (byte) conio_cursor_y#25 ← (byte) conio_cursor_y#70
  (byte*) conio_cursor_text#25 ← (byte*) conio_cursor_text#68
  (byte*) conio_cursor_color#25 ← (byte*) conio_cursor_color#68
  (byte) conio_display_cursor#3 ← (byte) conio_display_cursor#10
  to:main::@1
main::@1: scope:[main]  from main::@8 main::@9
  (byte) conio_display_cursor#30 ← phi( main::@8/(byte) conio_display_cursor#3 main::@9/(byte) conio_display_cursor#26 )
  (byte) conio_textcolor#60 ← phi( main::@8/(byte) conio_textcolor#3 main::@9/(byte) conio_textcolor#43 )
  (byte*) conio_cursor_color#118 ← phi( main::@8/(byte*) conio_cursor_color#25 main::@9/(byte*) conio_cursor_color#114 )
  (byte*) conio_cursor_text#118 ← phi( main::@8/(byte*) conio_cursor_text#25 main::@9/(byte*) conio_cursor_text#114 )
  (byte) conio_cursor_y#118 ← phi( main::@8/(byte) conio_cursor_y#25 main::@9/(byte) conio_cursor_y#114 )
  (byte) conio_cursor_x#118 ← phi( main::@8/(byte) conio_cursor_x#26 main::@9/(byte) conio_cursor_x#114 )
  call kbhit 
  (byte) kbhit::return#2 ← (byte) kbhit::return#1
  to:main::@9
main::@9: scope:[main]  from main::@1
  (byte) conio_display_cursor#26 ← phi( main::@1/(byte) conio_display_cursor#30 )
  (byte) conio_textcolor#43 ← phi( main::@1/(byte) conio_textcolor#60 )
  (byte*) conio_cursor_color#114 ← phi( main::@1/(byte*) conio_cursor_color#118 )
  (byte*) conio_cursor_text#114 ← phi( main::@1/(byte*) conio_cursor_text#118 )
  (byte) conio_cursor_y#114 ← phi( main::@1/(byte) conio_cursor_y#118 )
  (byte) conio_cursor_x#114 ← phi( main::@1/(byte) conio_cursor_x#118 )
  (byte) kbhit::return#4 ← phi( main::@1/(byte) kbhit::return#2 )
  (byte~) main::$3 ← (byte) kbhit::return#4
  (bool~) main::$5 ← (number) 0 != (byte~) main::$3
  (bool~) main::$4 ← ! (bool~) main::$5
  if((bool~) main::$4) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@9
  (byte) conio_display_cursor#21 ← phi( main::@9/(byte) conio_display_cursor#26 )
  (byte) conio_textcolor#34 ← phi( main::@9/(byte) conio_textcolor#43 )
  (byte*) conio_cursor_color#103 ← phi( main::@9/(byte*) conio_cursor_color#114 )
  (byte*) conio_cursor_text#103 ← phi( main::@9/(byte*) conio_cursor_text#114 )
  (byte) conio_cursor_y#104 ← phi( main::@9/(byte) conio_cursor_y#114 )
  (byte) conio_cursor_x#104 ← phi( main::@9/(byte) conio_cursor_x#114 )
  call clrscr 
  to:main::@10
main::@10: scope:[main]  from main::@3
  (byte) conio_display_cursor#17 ← phi( main::@3/(byte) conio_display_cursor#21 )
  (byte) conio_textcolor#21 ← phi( main::@3/(byte) conio_textcolor#34 )
  (byte*) conio_cursor_color#69 ← phi( main::@3/(byte*) conio_cursor_color#2 )
  (byte*) conio_cursor_text#69 ← phi( main::@3/(byte*) conio_cursor_text#2 )
  (byte) conio_cursor_y#71 ← phi( main::@3/(byte) conio_cursor_y#2 )
  (byte) conio_cursor_x#71 ← phi( main::@3/(byte) conio_cursor_x#2 )
  (byte) conio_cursor_x#27 ← (byte) conio_cursor_x#71
  (byte) conio_cursor_y#26 ← (byte) conio_cursor_y#71
  (byte*) conio_cursor_text#26 ← (byte*) conio_cursor_text#69
  (byte*) conio_cursor_color#26 ← (byte*) conio_cursor_color#69
  to:main::@return
main::@return: scope:[main]  from main::@10
  (byte) conio_display_cursor#11 ← phi( main::@10/(byte) conio_display_cursor#17 )
  (byte*) conio_cursor_color#70 ← phi( main::@10/(byte*) conio_cursor_color#26 )
  (byte*) conio_cursor_text#70 ← phi( main::@10/(byte*) conio_cursor_text#26 )
  (byte) conio_cursor_y#72 ← phi( main::@10/(byte) conio_cursor_y#26 )
  (byte) conio_cursor_x#72 ← phi( main::@10/(byte) conio_cursor_x#27 )
  (byte) conio_textcolor#13 ← phi( main::@10/(byte) conio_textcolor#21 )
  (byte) conio_textcolor#4 ← (byte) conio_textcolor#13
  (byte) conio_cursor_x#28 ← (byte) conio_cursor_x#72
  (byte) conio_cursor_y#27 ← (byte) conio_cursor_y#72
  (byte*) conio_cursor_text#27 ← (byte*) conio_cursor_text#70
  (byte*) conio_cursor_color#27 ← (byte*) conio_cursor_color#70
  (byte) conio_display_cursor#4 ← (byte) conio_display_cursor#11
  return 
  to:@return

(void()) MakeTeeLine((byte) MakeTeeLine::Y)
MakeTeeLine: scope:[MakeTeeLine]  from MakeNiceScreen::@19 MakeNiceScreen::@20
  (byte) conio_textcolor#53 ← phi( MakeNiceScreen::@19/(byte) conio_textcolor#61 MakeNiceScreen::@20/(byte) conio_textcolor#48 )
  (byte*) conio_cursor_color#104 ← phi( MakeNiceScreen::@19/(byte*) conio_cursor_color#40 MakeNiceScreen::@20/(byte*) conio_cursor_color#41 )
  (byte*) conio_cursor_text#104 ← phi( MakeNiceScreen::@19/(byte*) conio_cursor_text#40 MakeNiceScreen::@20/(byte*) conio_cursor_text#41 )
  (byte) conio_cursor_y#105 ← phi( MakeNiceScreen::@19/(byte) conio_cursor_y#40 MakeNiceScreen::@20/(byte) conio_cursor_y#41 )
  (byte) conio_cursor_x#105 ← phi( MakeNiceScreen::@19/(byte) conio_cursor_x#41 MakeNiceScreen::@20/(byte) conio_cursor_x#42 )
  (byte) MakeTeeLine::Y#2 ← phi( MakeNiceScreen::@19/(byte) MakeTeeLine::Y#0 MakeNiceScreen::@20/(byte) MakeTeeLine::Y#1 )
  (byte) cputcxy::x#0 ← (number) 0
  (byte) cputcxy::y#0 ← (byte) MakeTeeLine::Y#2
  (byte) cputcxy::c#0 ← (const nomodify byte) CH_LTEE
  call cputcxy 
  to:MakeTeeLine::@1
MakeTeeLine::@1: scope:[MakeTeeLine]  from MakeTeeLine
  (byte) conio_textcolor#44 ← phi( MakeTeeLine/(byte) conio_textcolor#53 )
  (byte*) conio_cursor_color#71 ← phi( MakeTeeLine/(byte*) conio_cursor_color#11 )
  (byte*) conio_cursor_text#71 ← phi( MakeTeeLine/(byte*) conio_cursor_text#11 )
  (byte) conio_cursor_y#73 ← phi( MakeTeeLine/(byte) conio_cursor_y#11 )
  (byte) conio_cursor_x#73 ← phi( MakeTeeLine/(byte) conio_cursor_x#12 )
  (byte) conio_cursor_x#29 ← (byte) conio_cursor_x#73
  (byte) conio_cursor_y#28 ← (byte) conio_cursor_y#73
  (byte*) conio_cursor_text#28 ← (byte*) conio_cursor_text#71
  (byte*) conio_cursor_color#28 ← (byte*) conio_cursor_color#71
  (number~) MakeTeeLine::$1 ← (volatile byte) XSize - (number) 2
  (byte) chline::length#0 ← (number~) MakeTeeLine::$1
  call chline 
  to:MakeTeeLine::@2
MakeTeeLine::@2: scope:[MakeTeeLine]  from MakeTeeLine::@1
  (byte) conio_textcolor#28 ← phi( MakeTeeLine::@1/(byte) conio_textcolor#44 )
  (byte*) conio_cursor_color#72 ← phi( MakeTeeLine::@1/(byte*) conio_cursor_color#18 )
  (byte*) conio_cursor_text#72 ← phi( MakeTeeLine::@1/(byte*) conio_cursor_text#18 )
  (byte) conio_cursor_y#74 ← phi( MakeTeeLine::@1/(byte) conio_cursor_y#18 )
  (byte) conio_cursor_x#74 ← phi( MakeTeeLine::@1/(byte) conio_cursor_x#19 )
  (byte) conio_cursor_x#30 ← (byte) conio_cursor_x#74
  (byte) conio_cursor_y#29 ← (byte) conio_cursor_y#74
  (byte*) conio_cursor_text#29 ← (byte*) conio_cursor_text#72
  (byte*) conio_cursor_color#29 ← (byte*) conio_cursor_color#72
  (byte) cputc::c#4 ← (const nomodify byte) CH_RTEE
  call cputc 
  to:MakeTeeLine::@3
MakeTeeLine::@3: scope:[MakeTeeLine]  from MakeTeeLine::@2
  (byte*) conio_cursor_color#73 ← phi( MakeTeeLine::@2/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#73 ← phi( MakeTeeLine::@2/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#75 ← phi( MakeTeeLine::@2/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#75 ← phi( MakeTeeLine::@2/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#31 ← (byte) conio_cursor_x#75
  (byte) conio_cursor_y#30 ← (byte) conio_cursor_y#75
  (byte*) conio_cursor_text#30 ← (byte*) conio_cursor_text#73
  (byte*) conio_cursor_color#30 ← (byte*) conio_cursor_color#73
  to:MakeTeeLine::@return
MakeTeeLine::@return: scope:[MakeTeeLine]  from MakeTeeLine::@3
  (byte*) conio_cursor_color#74 ← phi( MakeTeeLine::@3/(byte*) conio_cursor_color#30 )
  (byte*) conio_cursor_text#74 ← phi( MakeTeeLine::@3/(byte*) conio_cursor_text#30 )
  (byte) conio_cursor_y#76 ← phi( MakeTeeLine::@3/(byte) conio_cursor_y#30 )
  (byte) conio_cursor_x#76 ← phi( MakeTeeLine::@3/(byte) conio_cursor_x#31 )
  (byte) conio_cursor_x#32 ← (byte) conio_cursor_x#76
  (byte) conio_cursor_y#31 ← (byte) conio_cursor_y#76
  (byte*) conio_cursor_text#31 ← (byte*) conio_cursor_text#74
  (byte*) conio_cursor_color#31 ← (byte*) conio_cursor_color#74
  return 
  to:@return

(void()) MakeNiceScreen()
MakeNiceScreen: scope:[MakeNiceScreen]  from main::@7
  (byte) conio_display_cursor#34 ← phi( main::@7/(byte) conio_display_cursor#16 )
  (byte*) conio_cursor_color#120 ← phi( main::@7/(byte*) conio_cursor_color#102 )
  (byte*) conio_cursor_text#120 ← phi( main::@7/(byte*) conio_cursor_text#102 )
  (byte) conio_cursor_y#120 ← phi( main::@7/(byte) conio_cursor_y#103 )
  (byte) conio_cursor_x#120 ← phi( main::@7/(byte) conio_cursor_x#103 )
  (byte) conio_textcolor#19 ← phi( main::@7/(byte) conio_textcolor#20 )
  (to_nomodify struct $0*) MakeNiceScreen::T#0 ← (struct $0*) 0
  (byte) MakeNiceScreen::I#0 ← (byte) 0
  (byte) MakeNiceScreen::X#0 ← (byte) 0
  (byte) textcolor::color#0 ← (const nomodify byte) COLOR_GRAY3
  call textcolor 
  (byte) textcolor::return#2 ← (byte) textcolor::return#1
  to:MakeNiceScreen::@7
MakeNiceScreen::@7: scope:[MakeNiceScreen]  from MakeNiceScreen
  (byte) conio_display_cursor#31 ← phi( MakeNiceScreen/(byte) conio_display_cursor#34 )
  (byte*) conio_cursor_color#119 ← phi( MakeNiceScreen/(byte*) conio_cursor_color#120 )
  (byte*) conio_cursor_text#119 ← phi( MakeNiceScreen/(byte*) conio_cursor_text#120 )
  (byte) conio_cursor_y#119 ← phi( MakeNiceScreen/(byte) conio_cursor_y#120 )
  (byte) conio_cursor_x#119 ← phi( MakeNiceScreen/(byte) conio_cursor_x#120 )
  (byte) conio_textcolor#14 ← phi( MakeNiceScreen/(byte) conio_textcolor#2 )
  (byte) conio_textcolor#5 ← (byte) conio_textcolor#14
  (byte) bordercolor::color#0 ← (const nomodify byte) COLOR_BLACK
  call bordercolor 
  (byte) bordercolor::return#2 ← (byte) bordercolor::return#1
  to:MakeNiceScreen::@8
MakeNiceScreen::@8: scope:[MakeNiceScreen]  from MakeNiceScreen::@7
  (byte) conio_textcolor#71 ← phi( MakeNiceScreen::@7/(byte) conio_textcolor#5 )
  (byte) conio_display_cursor#27 ← phi( MakeNiceScreen::@7/(byte) conio_display_cursor#31 )
  (byte*) conio_cursor_color#115 ← phi( MakeNiceScreen::@7/(byte*) conio_cursor_color#119 )
  (byte*) conio_cursor_text#115 ← phi( MakeNiceScreen::@7/(byte*) conio_cursor_text#119 )
  (byte) conio_cursor_y#115 ← phi( MakeNiceScreen::@7/(byte) conio_cursor_y#119 )
  (byte) conio_cursor_x#115 ← phi( MakeNiceScreen::@7/(byte) conio_cursor_x#119 )
  (byte) bgcolor::color#0 ← (const nomodify byte) COLOR_BLACK
  call bgcolor 
  (byte) bgcolor::return#2 ← (byte) bgcolor::return#1
  to:MakeNiceScreen::@9
MakeNiceScreen::@9: scope:[MakeNiceScreen]  from MakeNiceScreen::@8
  (byte) conio_textcolor#63 ← phi( MakeNiceScreen::@8/(byte) conio_textcolor#71 )
  (byte) conio_display_cursor#22 ← phi( MakeNiceScreen::@8/(byte) conio_display_cursor#27 )
  (byte*) conio_cursor_color#105 ← phi( MakeNiceScreen::@8/(byte*) conio_cursor_color#115 )
  (byte*) conio_cursor_text#105 ← phi( MakeNiceScreen::@8/(byte*) conio_cursor_text#115 )
  (byte) conio_cursor_y#106 ← phi( MakeNiceScreen::@8/(byte) conio_cursor_y#115 )
  (byte) conio_cursor_x#106 ← phi( MakeNiceScreen::@8/(byte) conio_cursor_x#115 )
  call clrscr 
  to:MakeNiceScreen::@10
MakeNiceScreen::@10: scope:[MakeNiceScreen]  from MakeNiceScreen::@9
  (byte) conio_textcolor#67 ← phi( MakeNiceScreen::@9/(byte) conio_textcolor#63 )
  (byte) conio_display_cursor#15 ← phi( MakeNiceScreen::@9/(byte) conio_display_cursor#22 )
  (byte*) conio_cursor_color#75 ← phi( MakeNiceScreen::@9/(byte*) conio_cursor_color#2 )
  (byte*) conio_cursor_text#75 ← phi( MakeNiceScreen::@9/(byte*) conio_cursor_text#2 )
  (byte) conio_cursor_y#77 ← phi( MakeNiceScreen::@9/(byte) conio_cursor_y#2 )
  (byte) conio_cursor_x#77 ← phi( MakeNiceScreen::@9/(byte) conio_cursor_x#2 )
  (byte) conio_cursor_x#33 ← (byte) conio_cursor_x#77
  (byte) conio_cursor_y#32 ← (byte) conio_cursor_y#77
  (byte*) conio_cursor_text#32 ← (byte*) conio_cursor_text#75
  (byte*) conio_cursor_color#32 ← (byte*) conio_cursor_color#75
  (byte) cursor::onoff#0 ← (number) 0
  call cursor 
  (byte) cursor::return#2 ← (byte) cursor::return#1
  to:MakeNiceScreen::@11
MakeNiceScreen::@11: scope:[MakeNiceScreen]  from MakeNiceScreen::@10
  (byte) conio_textcolor#52 ← phi( MakeNiceScreen::@10/(byte) conio_textcolor#67 )
  (byte*) conio_cursor_color#106 ← phi( MakeNiceScreen::@10/(byte*) conio_cursor_color#32 )
  (byte*) conio_cursor_text#106 ← phi( MakeNiceScreen::@10/(byte*) conio_cursor_text#32 )
  (byte) conio_cursor_y#107 ← phi( MakeNiceScreen::@10/(byte) conio_cursor_y#32 )
  (byte) conio_cursor_x#107 ← phi( MakeNiceScreen::@10/(byte) conio_cursor_x#33 )
  (byte) conio_display_cursor#12 ← phi( MakeNiceScreen::@10/(byte) conio_display_cursor#2 )
  (byte) conio_display_cursor#5 ← (byte) conio_display_cursor#12
  (byte) cputcxy::x#1 ← (number) 0
  (byte) cputcxy::y#1 ← (number) 0
  (byte) cputcxy::c#1 ← (const nomodify byte) CH_ULCORNER
  call cputcxy 
  to:MakeNiceScreen::@12
MakeNiceScreen::@12: scope:[MakeNiceScreen]  from MakeNiceScreen::@11
  (byte) conio_display_cursor#41 ← phi( MakeNiceScreen::@11/(byte) conio_display_cursor#5 )
  (byte) conio_textcolor#45 ← phi( MakeNiceScreen::@11/(byte) conio_textcolor#52 )
  (byte*) conio_cursor_color#76 ← phi( MakeNiceScreen::@11/(byte*) conio_cursor_color#11 )
  (byte*) conio_cursor_text#76 ← phi( MakeNiceScreen::@11/(byte*) conio_cursor_text#11 )
  (byte) conio_cursor_y#78 ← phi( MakeNiceScreen::@11/(byte) conio_cursor_y#11 )
  (byte) conio_cursor_x#78 ← phi( MakeNiceScreen::@11/(byte) conio_cursor_x#12 )
  (byte) conio_cursor_x#34 ← (byte) conio_cursor_x#78
  (byte) conio_cursor_y#33 ← (byte) conio_cursor_y#78
  (byte*) conio_cursor_text#33 ← (byte*) conio_cursor_text#76
  (byte*) conio_cursor_color#33 ← (byte*) conio_cursor_color#76
  (number~) MakeNiceScreen::$6 ← (volatile byte) XSize - (number) 2
  (byte) chline::length#1 ← (number~) MakeNiceScreen::$6
  call chline 
  to:MakeNiceScreen::@13
MakeNiceScreen::@13: scope:[MakeNiceScreen]  from MakeNiceScreen::@12
  (byte) conio_display_cursor#40 ← phi( MakeNiceScreen::@12/(byte) conio_display_cursor#41 )
  (byte) conio_textcolor#25 ← phi( MakeNiceScreen::@12/(byte) conio_textcolor#45 )
  (byte*) conio_cursor_color#77 ← phi( MakeNiceScreen::@12/(byte*) conio_cursor_color#18 )
  (byte*) conio_cursor_text#77 ← phi( MakeNiceScreen::@12/(byte*) conio_cursor_text#18 )
  (byte) conio_cursor_y#79 ← phi( MakeNiceScreen::@12/(byte) conio_cursor_y#18 )
  (byte) conio_cursor_x#79 ← phi( MakeNiceScreen::@12/(byte) conio_cursor_x#19 )
  (byte) conio_cursor_x#35 ← (byte) conio_cursor_x#79
  (byte) conio_cursor_y#34 ← (byte) conio_cursor_y#79
  (byte*) conio_cursor_text#34 ← (byte*) conio_cursor_text#77
  (byte*) conio_cursor_color#34 ← (byte*) conio_cursor_color#77
  (byte) cputc::c#5 ← (const nomodify byte) CH_URCORNER
  call cputc 
  to:MakeNiceScreen::@14
MakeNiceScreen::@14: scope:[MakeNiceScreen]  from MakeNiceScreen::@13
  (byte) conio_display_cursor#39 ← phi( MakeNiceScreen::@13/(byte) conio_display_cursor#40 )
  (byte) conio_textcolor#46 ← phi( MakeNiceScreen::@13/(byte) conio_textcolor#25 )
  (byte*) conio_cursor_color#78 ← phi( MakeNiceScreen::@13/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#78 ← phi( MakeNiceScreen::@13/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#80 ← phi( MakeNiceScreen::@13/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#80 ← phi( MakeNiceScreen::@13/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#36 ← (byte) conio_cursor_x#80
  (byte) conio_cursor_y#35 ← (byte) conio_cursor_y#80
  (byte*) conio_cursor_text#35 ← (byte*) conio_cursor_text#78
  (byte*) conio_cursor_color#35 ← (byte*) conio_cursor_color#78
  (byte) cvlinexy::x#0 ← (number) 0
  (byte) cvlinexy::y#0 ← (number) 1
  (byte) cvlinexy::length#0 ← (number) $17
  call cvlinexy 
  to:MakeNiceScreen::@15
MakeNiceScreen::@15: scope:[MakeNiceScreen]  from MakeNiceScreen::@14
  (byte) conio_display_cursor#38 ← phi( MakeNiceScreen::@14/(byte) conio_display_cursor#39 )
  (byte) conio_textcolor#26 ← phi( MakeNiceScreen::@14/(byte) conio_textcolor#46 )
  (byte*) conio_cursor_color#79 ← phi( MakeNiceScreen::@14/(byte*) conio_cursor_color#24 )
  (byte*) conio_cursor_text#79 ← phi( MakeNiceScreen::@14/(byte*) conio_cursor_text#24 )
  (byte) conio_cursor_y#81 ← phi( MakeNiceScreen::@14/(byte) conio_cursor_y#24 )
  (byte) conio_cursor_x#81 ← phi( MakeNiceScreen::@14/(byte) conio_cursor_x#25 )
  (byte) conio_cursor_x#37 ← (byte) conio_cursor_x#81
  (byte) conio_cursor_y#36 ← (byte) conio_cursor_y#81
  (byte*) conio_cursor_text#36 ← (byte*) conio_cursor_text#79
  (byte*) conio_cursor_color#36 ← (byte*) conio_cursor_color#79
  (byte) cputc::c#6 ← (const nomodify byte) CH_LLCORNER
  call cputc 
  to:MakeNiceScreen::@16
MakeNiceScreen::@16: scope:[MakeNiceScreen]  from MakeNiceScreen::@15
  (byte) conio_display_cursor#37 ← phi( MakeNiceScreen::@15/(byte) conio_display_cursor#38 )
  (byte) conio_textcolor#47 ← phi( MakeNiceScreen::@15/(byte) conio_textcolor#26 )
  (byte*) conio_cursor_color#80 ← phi( MakeNiceScreen::@15/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#80 ← phi( MakeNiceScreen::@15/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#82 ← phi( MakeNiceScreen::@15/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#82 ← phi( MakeNiceScreen::@15/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#38 ← (byte) conio_cursor_x#82
  (byte) conio_cursor_y#37 ← (byte) conio_cursor_y#82
  (byte*) conio_cursor_text#37 ← (byte*) conio_cursor_text#80
  (byte*) conio_cursor_color#37 ← (byte*) conio_cursor_color#80
  (number~) MakeNiceScreen::$11 ← (volatile byte) XSize - (number) 2
  (byte) chline::length#2 ← (number~) MakeNiceScreen::$11
  call chline 
  to:MakeNiceScreen::@17
MakeNiceScreen::@17: scope:[MakeNiceScreen]  from MakeNiceScreen::@16
  (byte) conio_display_cursor#36 ← phi( MakeNiceScreen::@16/(byte) conio_display_cursor#37 )
  (byte) conio_textcolor#27 ← phi( MakeNiceScreen::@16/(byte) conio_textcolor#47 )
  (byte*) conio_cursor_color#81 ← phi( MakeNiceScreen::@16/(byte*) conio_cursor_color#18 )
  (byte*) conio_cursor_text#81 ← phi( MakeNiceScreen::@16/(byte*) conio_cursor_text#18 )
  (byte) conio_cursor_y#83 ← phi( MakeNiceScreen::@16/(byte) conio_cursor_y#18 )
  (byte) conio_cursor_x#83 ← phi( MakeNiceScreen::@16/(byte) conio_cursor_x#19 )
  (byte) conio_cursor_x#39 ← (byte) conio_cursor_x#83
  (byte) conio_cursor_y#38 ← (byte) conio_cursor_y#83
  (byte*) conio_cursor_text#38 ← (byte*) conio_cursor_text#81
  (byte*) conio_cursor_color#38 ← (byte*) conio_cursor_color#81
  (byte) cputc::c#7 ← (const nomodify byte) CH_LRCORNER
  call cputc 
  to:MakeNiceScreen::@18
MakeNiceScreen::@18: scope:[MakeNiceScreen]  from MakeNiceScreen::@17
  (byte) conio_display_cursor#35 ← phi( MakeNiceScreen::@17/(byte) conio_display_cursor#36 )
  (byte) conio_textcolor#68 ← phi( MakeNiceScreen::@17/(byte) conio_textcolor#27 )
  (byte*) conio_cursor_color#82 ← phi( MakeNiceScreen::@17/(byte*) conio_cursor_color#8 )
  (byte*) conio_cursor_text#82 ← phi( MakeNiceScreen::@17/(byte*) conio_cursor_text#8 )
  (byte) conio_cursor_y#84 ← phi( MakeNiceScreen::@17/(byte) conio_cursor_y#8 )
  (byte) conio_cursor_x#84 ← phi( MakeNiceScreen::@17/(byte) conio_cursor_x#9 )
  (byte) conio_cursor_x#40 ← (byte) conio_cursor_x#84
  (byte) conio_cursor_y#39 ← (byte) conio_cursor_y#84
  (byte*) conio_cursor_text#39 ← (byte*) conio_cursor_text#82
  (byte*) conio_cursor_color#39 ← (byte*) conio_cursor_color#82
  (number~) MakeNiceScreen::$14 ← (volatile byte) XSize - (number) 1
  (byte) cvlinexy::x#1 ← (number~) MakeNiceScreen::$14
  (byte) cvlinexy::y#1 ← (number) 1
  (byte) cvlinexy::length#1 ← (number) $17
  call cvlinexy 
  to:MakeNiceScreen::@19
MakeNiceScreen::@19: scope:[MakeNiceScreen]  from MakeNiceScreen::@18
  (byte) conio_display_cursor#32 ← phi( MakeNiceScreen::@18/(byte) conio_display_cursor#35 )
  (byte) conio_textcolor#61 ← phi( MakeNiceScreen::@18/(byte) conio_textcolor#68 )
  (byte*) conio_cursor_color#83 ← phi( MakeNiceScreen::@18/(byte*) conio_cursor_color#24 )
  (byte*) conio_cursor_text#83 ← phi( MakeNiceScreen::@18/(byte*) conio_cursor_text#24 )
  (byte) conio_cursor_y#85 ← phi( MakeNiceScreen::@18/(byte) conio_cursor_y#24 )
  (byte) conio_cursor_x#85 ← phi( MakeNiceScreen::@18/(byte) conio_cursor_x#25 )
  (byte) conio_cursor_x#41 ← (byte) conio_cursor_x#85
  (byte) conio_cursor_y#40 ← (byte) conio_cursor_y#85
  (byte*) conio_cursor_text#40 ← (byte*) conio_cursor_text#83
  (byte*) conio_cursor_color#40 ← (byte*) conio_cursor_color#83
  (byte) MakeTeeLine::Y#0 ← (number) 7
  call MakeTeeLine 
  to:MakeNiceScreen::@20
MakeNiceScreen::@20: scope:[MakeNiceScreen]  from MakeNiceScreen::@19
  (byte) conio_display_cursor#28 ← phi( MakeNiceScreen::@19/(byte) conio_display_cursor#32 )
  (byte) conio_textcolor#48 ← phi( MakeNiceScreen::@19/(byte) conio_textcolor#61 )
  (byte*) conio_cursor_color#84 ← phi( MakeNiceScreen::@19/(byte*) conio_cursor_color#31 )
  (byte*) conio_cursor_text#84 ← phi( MakeNiceScreen::@19/(byte*) conio_cursor_text#31 )
  (byte) conio_cursor_y#86 ← phi( MakeNiceScreen::@19/(byte) conio_cursor_y#31 )
  (byte) conio_cursor_x#86 ← phi( MakeNiceScreen::@19/(byte) conio_cursor_x#32 )
  (byte) conio_cursor_x#42 ← (byte) conio_cursor_x#86
  (byte) conio_cursor_y#41 ← (byte) conio_cursor_y#86
  (byte*) conio_cursor_text#41 ← (byte*) conio_cursor_text#84
  (byte*) conio_cursor_color#41 ← (byte*) conio_cursor_color#84
  (byte) MakeTeeLine::Y#1 ← (number) $16
  call MakeTeeLine 
  to:MakeNiceScreen::@21
MakeNiceScreen::@21: scope:[MakeNiceScreen]  from MakeNiceScreen::@20
  (byte) conio_display_cursor#23 ← phi( MakeNiceScreen::@20/(byte) conio_display_cursor#28 )
  (byte) conio_textcolor#35 ← phi( MakeNiceScreen::@20/(byte) conio_textcolor#48 )
  (byte*) conio_cursor_color#85 ← phi( MakeNiceScreen::@20/(byte*) conio_cursor_color#31 )
  (byte*) conio_cursor_text#85 ← phi( MakeNiceScreen::@20/(byte*) conio_cursor_text#31 )
  (byte) conio_cursor_y#87 ← phi( MakeNiceScreen::@20/(byte) conio_cursor_y#31 )
  (byte) conio_cursor_x#87 ← phi( MakeNiceScreen::@20/(byte) conio_cursor_x#32 )
  (byte) conio_cursor_x#43 ← (byte) conio_cursor_x#87
  (byte) conio_cursor_y#42 ← (byte) conio_cursor_y#87
  (byte*) conio_cursor_text#42 ← (byte*) conio_cursor_text#85
  (byte*) conio_cursor_color#42 ← (byte*) conio_cursor_color#85
  (byte) MakeNiceScreen::I#1 ← (number) 0
  (to_nomodify struct $0*) MakeNiceScreen::T#1 ← (const struct $0*) MakeNiceScreen::Text
  to:MakeNiceScreen::@1
MakeNiceScreen::@1: scope:[MakeNiceScreen]  from MakeNiceScreen::@21 MakeNiceScreen::@23
  (byte) conio_display_cursor#18 ← phi( MakeNiceScreen::@21/(byte) conio_display_cursor#23 MakeNiceScreen::@23/(byte) conio_display_cursor#24 )
  (byte*) conio_cursor_color#108 ← phi( MakeNiceScreen::@21/(byte*) conio_cursor_color#42 MakeNiceScreen::@23/(byte*) conio_cursor_color#43 )
  (byte*) conio_cursor_text#108 ← phi( MakeNiceScreen::@21/(byte*) conio_cursor_text#42 MakeNiceScreen::@23/(byte*) conio_cursor_text#43 )
  (byte) conio_cursor_y#109 ← phi( MakeNiceScreen::@21/(byte) conio_cursor_y#42 MakeNiceScreen::@23/(byte) conio_cursor_y#43 )
  (byte) conio_cursor_x#109 ← phi( MakeNiceScreen::@21/(byte) conio_cursor_x#43 MakeNiceScreen::@23/(byte) conio_cursor_x#44 )
  (byte) conio_textcolor#22 ← phi( MakeNiceScreen::@21/(byte) conio_textcolor#35 MakeNiceScreen::@23/(byte) conio_textcolor#36 )
  (to_nomodify struct $0*) MakeNiceScreen::T#6 ← phi( MakeNiceScreen::@21/(to_nomodify struct $0*) MakeNiceScreen::T#1 MakeNiceScreen::@23/(to_nomodify struct $0*) MakeNiceScreen::T#2 )
  (byte) MakeNiceScreen::I#3 ← phi( MakeNiceScreen::@21/(byte) MakeNiceScreen::I#1 MakeNiceScreen::@23/(byte) MakeNiceScreen::I#2 )
  (byte~) MakeNiceScreen::$18 ← sizeof  (const struct $0*) MakeNiceScreen::Text
  (byte~) MakeNiceScreen::$19 ← (byte~) MakeNiceScreen::$18 / (const byte) SIZEOF_STRUCT_$0
  (bool~) MakeNiceScreen::$20 ← (byte) MakeNiceScreen::I#3 < (byte~) MakeNiceScreen::$19
  if((bool~) MakeNiceScreen::$20) goto MakeNiceScreen::@2
  to:MakeNiceScreen::@return
MakeNiceScreen::@2: scope:[MakeNiceScreen]  from MakeNiceScreen::@1
  (byte) conio_display_cursor#33 ← phi( MakeNiceScreen::@1/(byte) conio_display_cursor#18 )
  (byte) conio_textcolor#62 ← phi( MakeNiceScreen::@1/(byte) conio_textcolor#22 )
  (byte) MakeNiceScreen::I#6 ← phi( MakeNiceScreen::@1/(byte) MakeNiceScreen::I#3 )
  (byte*) conio_cursor_color#116 ← phi( MakeNiceScreen::@1/(byte*) conio_cursor_color#108 )
  (byte*) conio_cursor_text#116 ← phi( MakeNiceScreen::@1/(byte*) conio_cursor_text#108 )
  (byte) conio_cursor_y#116 ← phi( MakeNiceScreen::@1/(byte) conio_cursor_y#109 )
  (byte) conio_cursor_x#116 ← phi( MakeNiceScreen::@1/(byte) conio_cursor_x#109 )
  (to_nomodify struct $0*) MakeNiceScreen::T#3 ← phi( MakeNiceScreen::@1/(to_nomodify struct $0*) MakeNiceScreen::T#6 )
  (byte*~) MakeNiceScreen::$29 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (const byte) OFFSET_STRUCT_$0_MSG
  (byte*) strlen::str#1 ← (byte*~) MakeNiceScreen::$29
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:MakeNiceScreen::@22
MakeNiceScreen::@22: scope:[MakeNiceScreen]  from MakeNiceScreen::@2
  (byte) conio_display_cursor#29 ← phi( MakeNiceScreen::@2/(byte) conio_display_cursor#33 )
  (byte) conio_textcolor#49 ← phi( MakeNiceScreen::@2/(byte) conio_textcolor#62 )
  (byte) MakeNiceScreen::I#5 ← phi( MakeNiceScreen::@2/(byte) MakeNiceScreen::I#6 )
  (byte*) conio_cursor_color#107 ← phi( MakeNiceScreen::@2/(byte*) conio_cursor_color#116 )
  (byte*) conio_cursor_text#107 ← phi( MakeNiceScreen::@2/(byte*) conio_cursor_text#116 )
  (byte) conio_cursor_y#108 ← phi( MakeNiceScreen::@2/(byte) conio_cursor_y#116 )
  (byte) conio_cursor_x#108 ← phi( MakeNiceScreen::@2/(byte) conio_cursor_x#116 )
  (to_nomodify struct $0*) MakeNiceScreen::T#4 ← phi( MakeNiceScreen::@2/(to_nomodify struct $0*) MakeNiceScreen::T#3 )
  (word) strlen::return#4 ← phi( MakeNiceScreen::@2/(word) strlen::return#2 )
  (word~) MakeNiceScreen::$21 ← (word) strlen::return#4
  (byte~) MakeNiceScreen::$22 ← ((byte)) (word~) MakeNiceScreen::$21
  (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22
  (byte~) MakeNiceScreen::$24 ← (byte~) MakeNiceScreen::$23 >> (number) 1
  (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$24
  (byte*~) MakeNiceScreen::$30 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#4 + (const byte) OFFSET_STRUCT_$0_Y
  (byte*~) MakeNiceScreen::$31 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#4 + (const byte) OFFSET_STRUCT_$0_MSG
  (byte) cputsxy::x#0 ← (byte) MakeNiceScreen::X#1
  (byte) cputsxy::y#0 ← *((byte*~) MakeNiceScreen::$30)
  (to_nomodify byte*) cputsxy::s#0 ← (byte*~) MakeNiceScreen::$31
  call cputsxy 
  to:MakeNiceScreen::@23
MakeNiceScreen::@23: scope:[MakeNiceScreen]  from MakeNiceScreen::@22
  (byte) conio_display_cursor#24 ← phi( MakeNiceScreen::@22/(byte) conio_display_cursor#29 )
  (byte) conio_textcolor#36 ← phi( MakeNiceScreen::@22/(byte) conio_textcolor#49 )
  (byte) MakeNiceScreen::I#4 ← phi( MakeNiceScreen::@22/(byte) MakeNiceScreen::I#5 )
  (to_nomodify struct $0*) MakeNiceScreen::T#5 ← phi( MakeNiceScreen::@22/(to_nomodify struct $0*) MakeNiceScreen::T#4 )
  (byte*) conio_cursor_color#86 ← phi( MakeNiceScreen::@22/(byte*) conio_cursor_color#16 )
  (byte*) conio_cursor_text#86 ← phi( MakeNiceScreen::@22/(byte*) conio_cursor_text#16 )
  (byte) conio_cursor_y#88 ← phi( MakeNiceScreen::@22/(byte) conio_cursor_y#16 )
  (byte) conio_cursor_x#88 ← phi( MakeNiceScreen::@22/(byte) conio_cursor_x#17 )
  (byte) conio_cursor_x#44 ← (byte) conio_cursor_x#88
  (byte) conio_cursor_y#43 ← (byte) conio_cursor_y#88
  (byte*) conio_cursor_text#43 ← (byte*) conio_cursor_text#86
  (byte*) conio_cursor_color#43 ← (byte*) conio_cursor_color#86
  (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#5 + (const byte) SIZEOF_STRUCT_$0
  (byte) MakeNiceScreen::I#2 ← ++ (byte) MakeNiceScreen::I#4
  to:MakeNiceScreen::@1
MakeNiceScreen::@return: scope:[MakeNiceScreen]  from MakeNiceScreen::@1
  (byte) conio_display_cursor#13 ← phi( MakeNiceScreen::@1/(byte) conio_display_cursor#18 )
  (byte*) conio_cursor_color#87 ← phi( MakeNiceScreen::@1/(byte*) conio_cursor_color#108 )
  (byte*) conio_cursor_text#87 ← phi( MakeNiceScreen::@1/(byte*) conio_cursor_text#108 )
  (byte) conio_cursor_y#89 ← phi( MakeNiceScreen::@1/(byte) conio_cursor_y#109 )
  (byte) conio_cursor_x#89 ← phi( MakeNiceScreen::@1/(byte) conio_cursor_x#109 )
  (byte) conio_textcolor#15 ← phi( MakeNiceScreen::@1/(byte) conio_textcolor#22 )
  (byte) conio_textcolor#6 ← (byte) conio_textcolor#15
  (byte) conio_cursor_x#45 ← (byte) conio_cursor_x#89
  (byte) conio_cursor_y#44 ← (byte) conio_cursor_y#89
  (byte*) conio_cursor_text#44 ← (byte*) conio_cursor_text#87
  (byte*) conio_cursor_color#44 ← (byte*) conio_cursor_color#87
  (byte) conio_display_cursor#6 ← (byte) conio_display_cursor#13
  return 
  to:@return
@25: scope:[]  from @22
  (byte) conio_display_cursor#19 ← phi( @22/(byte) conio_display_cursor#25 )
  (byte*) conio_cursor_color#109 ← phi( @22/(byte*) conio_cursor_color#117 )
  (byte*) conio_cursor_text#109 ← phi( @22/(byte*) conio_cursor_text#117 )
  (byte) conio_cursor_y#110 ← phi( @22/(byte) conio_cursor_y#117 )
  (byte) conio_cursor_x#110 ← phi( @22/(byte) conio_cursor_x#117 )
  (byte) conio_textcolor#23 ← phi( @22/(byte) conio_textcolor#37 )
  call main 
  to:@26
@26: scope:[]  from @25
  (byte) conio_display_cursor#14 ← phi( @25/(byte) conio_display_cursor#4 )
  (byte*) conio_cursor_color#88 ← phi( @25/(byte*) conio_cursor_color#27 )
  (byte*) conio_cursor_text#88 ← phi( @25/(byte*) conio_cursor_text#27 )
  (byte) conio_cursor_y#90 ← phi( @25/(byte) conio_cursor_y#27 )
  (byte) conio_cursor_x#90 ← phi( @25/(byte) conio_cursor_x#28 )
  (byte) conio_textcolor#16 ← phi( @25/(byte) conio_textcolor#4 )
  (byte) conio_textcolor#7 ← (byte) conio_textcolor#16
  (byte) conio_cursor_x#46 ← (byte) conio_cursor_x#90
  (byte) conio_cursor_y#45 ← (byte) conio_cursor_y#90
  (byte*) conio_cursor_text#45 ← (byte*) conio_cursor_text#88
  (byte*) conio_cursor_color#45 ← (byte*) conio_cursor_color#88
  (byte) conio_display_cursor#7 ← (byte) conio_display_cursor#14
  to:@end
@end: scope:[]  from @26

SYMBOL TABLE SSA
(const byte*) $0::Msg[(number) $28]  = { fill( $28, 0) }
(byte) $0::Y
(label) @22
(label) @25
(label) @26
(label) @begin
(label) @end
(const nomodify byte) CH_HLINE = (byte) $40
(const nomodify byte) CH_LLCORNER = (byte) $6d
(const nomodify byte) CH_LRCORNER = (byte) $7d
(const nomodify byte) CH_LTEE = (byte) $6b
(const nomodify byte) CH_RTEE = (byte) $73
(const nomodify byte) CH_ULCORNER = (byte) $70
(const nomodify byte) CH_URCORNER = (byte) $6e
(const nomodify byte) CH_VLINE = (byte) $5d
(const nomodify byte) COLOR_BLACK = (byte) 0
(const nomodify byte) COLOR_GRAY3 = (byte) $f
(const nomodify byte*) CONIO_BGCOLOR = (byte*)(number) $d021
(const nomodify byte*) CONIO_BORDERCOLOR = (byte*)(number) $d020
(const nomodify byte*) CONIO_CIA1_PORT_A = (byte*)(number) $dc00
(const nomodify byte*) CONIO_CIA1_PORT_B = (byte*)(number) $dc01
(const nomodify byte) CONIO_HEIGHT = (byte) $19
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const nomodify byte) CONIO_WIDTH = (byte) $28
(void()) MakeNiceScreen()
(number~) MakeNiceScreen::$11
(number~) MakeNiceScreen::$14
(byte~) MakeNiceScreen::$18
(byte~) MakeNiceScreen::$19
(bool~) MakeNiceScreen::$20
(word~) MakeNiceScreen::$21
(byte~) MakeNiceScreen::$22
(byte~) MakeNiceScreen::$23
(byte~) MakeNiceScreen::$24
(byte*~) MakeNiceScreen::$29
(byte*~) MakeNiceScreen::$30
(byte*~) MakeNiceScreen::$31
(number~) MakeNiceScreen::$6
(label) MakeNiceScreen::@1
(label) MakeNiceScreen::@10
(label) MakeNiceScreen::@11
(label) MakeNiceScreen::@12
(label) MakeNiceScreen::@13
(label) MakeNiceScreen::@14
(label) MakeNiceScreen::@15
(label) MakeNiceScreen::@16
(label) MakeNiceScreen::@17
(label) MakeNiceScreen::@18
(label) MakeNiceScreen::@19
(label) MakeNiceScreen::@2
(label) MakeNiceScreen::@20
(label) MakeNiceScreen::@21
(label) MakeNiceScreen::@22
(label) MakeNiceScreen::@23
(label) MakeNiceScreen::@7
(label) MakeNiceScreen::@8
(label) MakeNiceScreen::@9
(label) MakeNiceScreen::@return
(byte) MakeNiceScreen::I
(byte) MakeNiceScreen::I#0
(byte) MakeNiceScreen::I#1
(byte) MakeNiceScreen::I#2
(byte) MakeNiceScreen::I#3
(byte) MakeNiceScreen::I#4
(byte) MakeNiceScreen::I#5
(byte) MakeNiceScreen::I#6
(to_nomodify struct $0*) MakeNiceScreen::T
(to_nomodify struct $0*) MakeNiceScreen::T#0
(to_nomodify struct $0*) MakeNiceScreen::T#1
(to_nomodify struct $0*) MakeNiceScreen::T#2
(to_nomodify struct $0*) MakeNiceScreen::T#3
(to_nomodify struct $0*) MakeNiceScreen::T#4
(to_nomodify struct $0*) MakeNiceScreen::T#5
(to_nomodify struct $0*) MakeNiceScreen::T#6
(const struct $0*) MakeNiceScreen::Text[]  = { { Y: (byte) 2, Msg: (byte*) "Wolfgang Amadeus Mozart" }, { Y: (byte) 4, Msg: (byte*) ""Eine kleine Nachtmusik"" }, { Y: (byte) 5, Msg: (byte*) "(KV 525)" }, { Y: (byte) 9, Msg: (byte*) "Ported to the SID in 1987 by" }, { Y: (byte) $b, Msg: (byte*) "Joachim von Bassewitz" }, { Y: (byte) $c, Msg: (byte*) "(joachim@von-bassewitz.de)" }, { Y: (byte) $d, Msg: (byte*) "and" }, { Y: (byte) $e, Msg: (byte*) "Ullrich von Bassewitz" }, { Y: (byte) $f, Msg: (byte*) "(ullrich@von-bassewitz.de)" }, { Y: (byte) $12, Msg: (byte*) "C Implementation by" }, { Y: (byte) $13, Msg: (byte*) "Ullrich von Bassewitz" }, { Y: (byte) $17, Msg: (byte*) "Press any key to quit..." } }
(byte) MakeNiceScreen::X
(byte) MakeNiceScreen::X#0
(byte) MakeNiceScreen::X#1
(void()) MakeTeeLine((byte) MakeTeeLine::Y)
(number~) MakeTeeLine::$1
(label) MakeTeeLine::@1
(label) MakeTeeLine::@2
(label) MakeTeeLine::@3
(label) MakeTeeLine::@return
(byte) MakeTeeLine::Y
(byte) MakeTeeLine::Y#0
(byte) MakeTeeLine::Y#1
(byte) MakeTeeLine::Y#2
(const byte) OFFSET_STRUCT_$0_MSG = (byte) 1
(const byte) OFFSET_STRUCT_$0_Y = (byte) 0
(const byte) SIZEOF_STRUCT_$0 = (byte) $29
(const nomodify byte*) VIC_MEMORY = (byte*)(number) $d018
(volatile byte) XSize loadstore
(volatile byte) YSize loadstore
(byte()) bgcolor((byte) bgcolor::color)
(label) bgcolor::@return
(byte) bgcolor::color
(byte) bgcolor::color#0
(byte) bgcolor::color#1
(byte) bgcolor::old
(byte) bgcolor::old#0
(byte) bgcolor::return
(byte) bgcolor::return#0
(byte) bgcolor::return#1
(byte) bgcolor::return#2
(byte) bgcolor::return#3
(byte()) bordercolor((byte) bordercolor::color)
(label) bordercolor::@return
(byte) bordercolor::color
(byte) bordercolor::color#0
(byte) bordercolor::color#1
(byte) bordercolor::old
(byte) bordercolor::old#0
(byte) bordercolor::return
(byte) bordercolor::return#0
(byte) bordercolor::return#1
(byte) bordercolor::return#2
(byte) bordercolor::return#3
(void()) chline((byte) chline::length)
(bool~) chline::$0
(label) chline::@1
(label) chline::@2
(label) chline::@7
(label) chline::@return
(byte) chline::i
(byte) chline::i#0
(byte) chline::i#1
(byte) chline::i#2
(byte) chline::i#3
(byte) chline::i#4
(byte) chline::length
(byte) chline::length#0
(byte) chline::length#1
(byte) chline::length#2
(byte) chline::length#3
(byte) chline::length#4
(byte) chline::length#5
(byte) chline::length#6
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte*) conio_cursor_color
(byte*) conio_cursor_color#0
(byte*) conio_cursor_color#1
(byte*) conio_cursor_color#10
(byte*) conio_cursor_color#100
(byte*) conio_cursor_color#101
(byte*) conio_cursor_color#102
(byte*) conio_cursor_color#103
(byte*) conio_cursor_color#104
(byte*) conio_cursor_color#105
(byte*) conio_cursor_color#106
(byte*) conio_cursor_color#107
(byte*) conio_cursor_color#108
(byte*) conio_cursor_color#109
(byte*) conio_cursor_color#11
(byte*) conio_cursor_color#110
(byte*) conio_cursor_color#111
(byte*) conio_cursor_color#112
(byte*) conio_cursor_color#113
(byte*) conio_cursor_color#114
(byte*) conio_cursor_color#115
(byte*) conio_cursor_color#116
(byte*) conio_cursor_color#117
(byte*) conio_cursor_color#118
(byte*) conio_cursor_color#119
(byte*) conio_cursor_color#12
(byte*) conio_cursor_color#120
(byte*) conio_cursor_color#13
(byte*) conio_cursor_color#14
(byte*) conio_cursor_color#15
(byte*) conio_cursor_color#16
(byte*) conio_cursor_color#17
(byte*) conio_cursor_color#18
(byte*) conio_cursor_color#19
(byte*) conio_cursor_color#2
(byte*) conio_cursor_color#20
(byte*) conio_cursor_color#21
(byte*) conio_cursor_color#22
(byte*) conio_cursor_color#23
(byte*) conio_cursor_color#24
(byte*) conio_cursor_color#25
(byte*) conio_cursor_color#26
(byte*) conio_cursor_color#27
(byte*) conio_cursor_color#28
(byte*) conio_cursor_color#29
(byte*) conio_cursor_color#3
(byte*) conio_cursor_color#30
(byte*) conio_cursor_color#31
(byte*) conio_cursor_color#32
(byte*) conio_cursor_color#33
(byte*) conio_cursor_color#34
(byte*) conio_cursor_color#35
(byte*) conio_cursor_color#36
(byte*) conio_cursor_color#37
(byte*) conio_cursor_color#38
(byte*) conio_cursor_color#39
(byte*) conio_cursor_color#4
(byte*) conio_cursor_color#40
(byte*) conio_cursor_color#41
(byte*) conio_cursor_color#42
(byte*) conio_cursor_color#43
(byte*) conio_cursor_color#44
(byte*) conio_cursor_color#45
(byte*) conio_cursor_color#46
(byte*) conio_cursor_color#47
(byte*) conio_cursor_color#48
(byte*) conio_cursor_color#49
(byte*) conio_cursor_color#5
(byte*) conio_cursor_color#50
(byte*) conio_cursor_color#51
(byte*) conio_cursor_color#52
(byte*) conio_cursor_color#53
(byte*) conio_cursor_color#54
(byte*) conio_cursor_color#55
(byte*) conio_cursor_color#56
(byte*) conio_cursor_color#57
(byte*) conio_cursor_color#58
(byte*) conio_cursor_color#59
(byte*) conio_cursor_color#6
(byte*) conio_cursor_color#60
(byte*) conio_cursor_color#61
(byte*) conio_cursor_color#62
(byte*) conio_cursor_color#63
(byte*) conio_cursor_color#64
(byte*) conio_cursor_color#65
(byte*) conio_cursor_color#66
(byte*) conio_cursor_color#67
(byte*) conio_cursor_color#68
(byte*) conio_cursor_color#69
(byte*) conio_cursor_color#7
(byte*) conio_cursor_color#70
(byte*) conio_cursor_color#71
(byte*) conio_cursor_color#72
(byte*) conio_cursor_color#73
(byte*) conio_cursor_color#74
(byte*) conio_cursor_color#75
(byte*) conio_cursor_color#76
(byte*) conio_cursor_color#77
(byte*) conio_cursor_color#78
(byte*) conio_cursor_color#79
(byte*) conio_cursor_color#8
(byte*) conio_cursor_color#80
(byte*) conio_cursor_color#81
(byte*) conio_cursor_color#82
(byte*) conio_cursor_color#83
(byte*) conio_cursor_color#84
(byte*) conio_cursor_color#85
(byte*) conio_cursor_color#86
(byte*) conio_cursor_color#87
(byte*) conio_cursor_color#88
(byte*) conio_cursor_color#89
(byte*) conio_cursor_color#9
(byte*) conio_cursor_color#90
(byte*) conio_cursor_color#91
(byte*) conio_cursor_color#92
(byte*) conio_cursor_color#93
(byte*) conio_cursor_color#94
(byte*) conio_cursor_color#95
(byte*) conio_cursor_color#96
(byte*) conio_cursor_color#97
(byte*) conio_cursor_color#98
(byte*) conio_cursor_color#99
(byte*) conio_cursor_text
(byte*) conio_cursor_text#0
(byte*) conio_cursor_text#1
(byte*) conio_cursor_text#10
(byte*) conio_cursor_text#100
(byte*) conio_cursor_text#101
(byte*) conio_cursor_text#102
(byte*) conio_cursor_text#103
(byte*) conio_cursor_text#104
(byte*) conio_cursor_text#105
(byte*) conio_cursor_text#106
(byte*) conio_cursor_text#107
(byte*) conio_cursor_text#108
(byte*) conio_cursor_text#109
(byte*) conio_cursor_text#11
(byte*) conio_cursor_text#110
(byte*) conio_cursor_text#111
(byte*) conio_cursor_text#112
(byte*) conio_cursor_text#113
(byte*) conio_cursor_text#114
(byte*) conio_cursor_text#115
(byte*) conio_cursor_text#116
(byte*) conio_cursor_text#117
(byte*) conio_cursor_text#118
(byte*) conio_cursor_text#119
(byte*) conio_cursor_text#12
(byte*) conio_cursor_text#120
(byte*) conio_cursor_text#13
(byte*) conio_cursor_text#14
(byte*) conio_cursor_text#15
(byte*) conio_cursor_text#16
(byte*) conio_cursor_text#17
(byte*) conio_cursor_text#18
(byte*) conio_cursor_text#19
(byte*) conio_cursor_text#2
(byte*) conio_cursor_text#20
(byte*) conio_cursor_text#21
(byte*) conio_cursor_text#22
(byte*) conio_cursor_text#23
(byte*) conio_cursor_text#24
(byte*) conio_cursor_text#25
(byte*) conio_cursor_text#26
(byte*) conio_cursor_text#27
(byte*) conio_cursor_text#28
(byte*) conio_cursor_text#29
(byte*) conio_cursor_text#3
(byte*) conio_cursor_text#30
(byte*) conio_cursor_text#31
(byte*) conio_cursor_text#32
(byte*) conio_cursor_text#33
(byte*) conio_cursor_text#34
(byte*) conio_cursor_text#35
(byte*) conio_cursor_text#36
(byte*) conio_cursor_text#37
(byte*) conio_cursor_text#38
(byte*) conio_cursor_text#39
(byte*) conio_cursor_text#4
(byte*) conio_cursor_text#40
(byte*) conio_cursor_text#41
(byte*) conio_cursor_text#42
(byte*) conio_cursor_text#43
(byte*) conio_cursor_text#44
(byte*) conio_cursor_text#45
(byte*) conio_cursor_text#46
(byte*) conio_cursor_text#47
(byte*) conio_cursor_text#48
(byte*) conio_cursor_text#49
(byte*) conio_cursor_text#5
(byte*) conio_cursor_text#50
(byte*) conio_cursor_text#51
(byte*) conio_cursor_text#52
(byte*) conio_cursor_text#53
(byte*) conio_cursor_text#54
(byte*) conio_cursor_text#55
(byte*) conio_cursor_text#56
(byte*) conio_cursor_text#57
(byte*) conio_cursor_text#58
(byte*) conio_cursor_text#59
(byte*) conio_cursor_text#6
(byte*) conio_cursor_text#60
(byte*) conio_cursor_text#61
(byte*) conio_cursor_text#62
(byte*) conio_cursor_text#63
(byte*) conio_cursor_text#64
(byte*) conio_cursor_text#65
(byte*) conio_cursor_text#66
(byte*) conio_cursor_text#67
(byte*) conio_cursor_text#68
(byte*) conio_cursor_text#69
(byte*) conio_cursor_text#7
(byte*) conio_cursor_text#70
(byte*) conio_cursor_text#71
(byte*) conio_cursor_text#72
(byte*) conio_cursor_text#73
(byte*) conio_cursor_text#74
(byte*) conio_cursor_text#75
(byte*) conio_cursor_text#76
(byte*) conio_cursor_text#77
(byte*) conio_cursor_text#78
(byte*) conio_cursor_text#79
(byte*) conio_cursor_text#8
(byte*) conio_cursor_text#80
(byte*) conio_cursor_text#81
(byte*) conio_cursor_text#82
(byte*) conio_cursor_text#83
(byte*) conio_cursor_text#84
(byte*) conio_cursor_text#85
(byte*) conio_cursor_text#86
(byte*) conio_cursor_text#87
(byte*) conio_cursor_text#88
(byte*) conio_cursor_text#89
(byte*) conio_cursor_text#9
(byte*) conio_cursor_text#90
(byte*) conio_cursor_text#91
(byte*) conio_cursor_text#92
(byte*) conio_cursor_text#93
(byte*) conio_cursor_text#94
(byte*) conio_cursor_text#95
(byte*) conio_cursor_text#96
(byte*) conio_cursor_text#97
(byte*) conio_cursor_text#98
(byte*) conio_cursor_text#99
(byte) conio_cursor_x
(byte) conio_cursor_x#0
(byte) conio_cursor_x#1
(byte) conio_cursor_x#10
(byte) conio_cursor_x#100
(byte) conio_cursor_x#101
(byte) conio_cursor_x#102
(byte) conio_cursor_x#103
(byte) conio_cursor_x#104
(byte) conio_cursor_x#105
(byte) conio_cursor_x#106
(byte) conio_cursor_x#107
(byte) conio_cursor_x#108
(byte) conio_cursor_x#109
(byte) conio_cursor_x#11
(byte) conio_cursor_x#110
(byte) conio_cursor_x#111
(byte) conio_cursor_x#112
(byte) conio_cursor_x#113
(byte) conio_cursor_x#114
(byte) conio_cursor_x#115
(byte) conio_cursor_x#116
(byte) conio_cursor_x#117
(byte) conio_cursor_x#118
(byte) conio_cursor_x#119
(byte) conio_cursor_x#12
(byte) conio_cursor_x#120
(byte) conio_cursor_x#13
(byte) conio_cursor_x#14
(byte) conio_cursor_x#15
(byte) conio_cursor_x#16
(byte) conio_cursor_x#17
(byte) conio_cursor_x#18
(byte) conio_cursor_x#19
(byte) conio_cursor_x#2
(byte) conio_cursor_x#20
(byte) conio_cursor_x#21
(byte) conio_cursor_x#22
(byte) conio_cursor_x#23
(byte) conio_cursor_x#24
(byte) conio_cursor_x#25
(byte) conio_cursor_x#26
(byte) conio_cursor_x#27
(byte) conio_cursor_x#28
(byte) conio_cursor_x#29
(byte) conio_cursor_x#3
(byte) conio_cursor_x#30
(byte) conio_cursor_x#31
(byte) conio_cursor_x#32
(byte) conio_cursor_x#33
(byte) conio_cursor_x#34
(byte) conio_cursor_x#35
(byte) conio_cursor_x#36
(byte) conio_cursor_x#37
(byte) conio_cursor_x#38
(byte) conio_cursor_x#39
(byte) conio_cursor_x#4
(byte) conio_cursor_x#40
(byte) conio_cursor_x#41
(byte) conio_cursor_x#42
(byte) conio_cursor_x#43
(byte) conio_cursor_x#44
(byte) conio_cursor_x#45
(byte) conio_cursor_x#46
(byte) conio_cursor_x#47
(byte) conio_cursor_x#48
(byte) conio_cursor_x#49
(byte) conio_cursor_x#5
(byte) conio_cursor_x#50
(byte) conio_cursor_x#51
(byte) conio_cursor_x#52
(byte) conio_cursor_x#53
(byte) conio_cursor_x#54
(byte) conio_cursor_x#55
(byte) conio_cursor_x#56
(byte) conio_cursor_x#57
(byte) conio_cursor_x#58
(byte) conio_cursor_x#59
(byte) conio_cursor_x#6
(byte) conio_cursor_x#60
(byte) conio_cursor_x#61
(byte) conio_cursor_x#62
(byte) conio_cursor_x#63
(byte) conio_cursor_x#64
(byte) conio_cursor_x#65
(byte) conio_cursor_x#66
(byte) conio_cursor_x#67
(byte) conio_cursor_x#68
(byte) conio_cursor_x#69
(byte) conio_cursor_x#7
(byte) conio_cursor_x#70
(byte) conio_cursor_x#71
(byte) conio_cursor_x#72
(byte) conio_cursor_x#73
(byte) conio_cursor_x#74
(byte) conio_cursor_x#75
(byte) conio_cursor_x#76
(byte) conio_cursor_x#77
(byte) conio_cursor_x#78
(byte) conio_cursor_x#79
(byte) conio_cursor_x#8
(byte) conio_cursor_x#80
(byte) conio_cursor_x#81
(byte) conio_cursor_x#82
(byte) conio_cursor_x#83
(byte) conio_cursor_x#84
(byte) conio_cursor_x#85
(byte) conio_cursor_x#86
(byte) conio_cursor_x#87
(byte) conio_cursor_x#88
(byte) conio_cursor_x#89
(byte) conio_cursor_x#9
(byte) conio_cursor_x#90
(byte) conio_cursor_x#91
(byte) conio_cursor_x#92
(byte) conio_cursor_x#93
(byte) conio_cursor_x#94
(byte) conio_cursor_x#95
(byte) conio_cursor_x#96
(byte) conio_cursor_x#97
(byte) conio_cursor_x#98
(byte) conio_cursor_x#99
(byte) conio_cursor_y
(byte) conio_cursor_y#0
(byte) conio_cursor_y#1
(byte) conio_cursor_y#10
(byte) conio_cursor_y#100
(byte) conio_cursor_y#101
(byte) conio_cursor_y#102
(byte) conio_cursor_y#103
(byte) conio_cursor_y#104
(byte) conio_cursor_y#105
(byte) conio_cursor_y#106
(byte) conio_cursor_y#107
(byte) conio_cursor_y#108
(byte) conio_cursor_y#109
(byte) conio_cursor_y#11
(byte) conio_cursor_y#110
(byte) conio_cursor_y#111
(byte) conio_cursor_y#112
(byte) conio_cursor_y#113
(byte) conio_cursor_y#114
(byte) conio_cursor_y#115
(byte) conio_cursor_y#116
(byte) conio_cursor_y#117
(byte) conio_cursor_y#118
(byte) conio_cursor_y#119
(byte) conio_cursor_y#12
(byte) conio_cursor_y#120
(byte) conio_cursor_y#13
(byte) conio_cursor_y#14
(byte) conio_cursor_y#15
(byte) conio_cursor_y#16
(byte) conio_cursor_y#17
(byte) conio_cursor_y#18
(byte) conio_cursor_y#19
(byte) conio_cursor_y#2
(byte) conio_cursor_y#20
(byte) conio_cursor_y#21
(byte) conio_cursor_y#22
(byte) conio_cursor_y#23
(byte) conio_cursor_y#24
(byte) conio_cursor_y#25
(byte) conio_cursor_y#26
(byte) conio_cursor_y#27
(byte) conio_cursor_y#28
(byte) conio_cursor_y#29
(byte) conio_cursor_y#3
(byte) conio_cursor_y#30
(byte) conio_cursor_y#31
(byte) conio_cursor_y#32
(byte) conio_cursor_y#33
(byte) conio_cursor_y#34
(byte) conio_cursor_y#35
(byte) conio_cursor_y#36
(byte) conio_cursor_y#37
(byte) conio_cursor_y#38
(byte) conio_cursor_y#39
(byte) conio_cursor_y#4
(byte) conio_cursor_y#40
(byte) conio_cursor_y#41
(byte) conio_cursor_y#42
(byte) conio_cursor_y#43
(byte) conio_cursor_y#44
(byte) conio_cursor_y#45
(byte) conio_cursor_y#46
(byte) conio_cursor_y#47
(byte) conio_cursor_y#48
(byte) conio_cursor_y#49
(byte) conio_cursor_y#5
(byte) conio_cursor_y#50
(byte) conio_cursor_y#51
(byte) conio_cursor_y#52
(byte) conio_cursor_y#53
(byte) conio_cursor_y#54
(byte) conio_cursor_y#55
(byte) conio_cursor_y#56
(byte) conio_cursor_y#57
(byte) conio_cursor_y#58
(byte) conio_cursor_y#59
(byte) conio_cursor_y#6
(byte) conio_cursor_y#60
(byte) conio_cursor_y#61
(byte) conio_cursor_y#62
(byte) conio_cursor_y#63
(byte) conio_cursor_y#64
(byte) conio_cursor_y#65
(byte) conio_cursor_y#66
(byte) conio_cursor_y#67
(byte) conio_cursor_y#68
(byte) conio_cursor_y#69
(byte) conio_cursor_y#7
(byte) conio_cursor_y#70
(byte) conio_cursor_y#71
(byte) conio_cursor_y#72
(byte) conio_cursor_y#73
(byte) conio_cursor_y#74
(byte) conio_cursor_y#75
(byte) conio_cursor_y#76
(byte) conio_cursor_y#77
(byte) conio_cursor_y#78
(byte) conio_cursor_y#79
(byte) conio_cursor_y#8
(byte) conio_cursor_y#80
(byte) conio_cursor_y#81
(byte) conio_cursor_y#82
(byte) conio_cursor_y#83
(byte) conio_cursor_y#84
(byte) conio_cursor_y#85
(byte) conio_cursor_y#86
(byte) conio_cursor_y#87
(byte) conio_cursor_y#88
(byte) conio_cursor_y#89
(byte) conio_cursor_y#9
(byte) conio_cursor_y#90
(byte) conio_cursor_y#91
(byte) conio_cursor_y#92
(byte) conio_cursor_y#93
(byte) conio_cursor_y#94
(byte) conio_cursor_y#95
(byte) conio_cursor_y#96
(byte) conio_cursor_y#97
(byte) conio_cursor_y#98
(byte) conio_cursor_y#99
(byte) conio_display_cursor
(byte) conio_display_cursor#0
(byte) conio_display_cursor#1
(byte) conio_display_cursor#10
(byte) conio_display_cursor#11
(byte) conio_display_cursor#12
(byte) conio_display_cursor#13
(byte) conio_display_cursor#14
(byte) conio_display_cursor#15
(byte) conio_display_cursor#16
(byte) conio_display_cursor#17
(byte) conio_display_cursor#18
(byte) conio_display_cursor#19
(byte) conio_display_cursor#2
(byte) conio_display_cursor#20
(byte) conio_display_cursor#21
(byte) conio_display_cursor#22
(byte) conio_display_cursor#23
(byte) conio_display_cursor#24
(byte) conio_display_cursor#25
(byte) conio_display_cursor#26
(byte) conio_display_cursor#27
(byte) conio_display_cursor#28
(byte) conio_display_cursor#29
(byte) conio_display_cursor#3
(byte) conio_display_cursor#30
(byte) conio_display_cursor#31
(byte) conio_display_cursor#32
(byte) conio_display_cursor#33
(byte) conio_display_cursor#34
(byte) conio_display_cursor#35
(byte) conio_display_cursor#36
(byte) conio_display_cursor#37
(byte) conio_display_cursor#38
(byte) conio_display_cursor#39
(byte) conio_display_cursor#4
(byte) conio_display_cursor#40
(byte) conio_display_cursor#41
(byte) conio_display_cursor#5
(byte) conio_display_cursor#6
(byte) conio_display_cursor#7
(byte) conio_display_cursor#8
(byte) conio_display_cursor#9
(byte) conio_textcolor
(byte) conio_textcolor#0
(byte) conio_textcolor#1
(byte) conio_textcolor#10
(byte) conio_textcolor#11
(byte) conio_textcolor#12
(byte) conio_textcolor#13
(byte) conio_textcolor#14
(byte) conio_textcolor#15
(byte) conio_textcolor#16
(byte) conio_textcolor#17
(byte) conio_textcolor#18
(byte) conio_textcolor#19
(byte) conio_textcolor#2
(byte) conio_textcolor#20
(byte) conio_textcolor#21
(byte) conio_textcolor#22
(byte) conio_textcolor#23
(byte) conio_textcolor#24
(byte) conio_textcolor#25
(byte) conio_textcolor#26
(byte) conio_textcolor#27
(byte) conio_textcolor#28
(byte) conio_textcolor#29
(byte) conio_textcolor#3
(byte) conio_textcolor#30
(byte) conio_textcolor#31
(byte) conio_textcolor#32
(byte) conio_textcolor#33
(byte) conio_textcolor#34
(byte) conio_textcolor#35
(byte) conio_textcolor#36
(byte) conio_textcolor#37
(byte) conio_textcolor#38
(byte) conio_textcolor#39
(byte) conio_textcolor#4
(byte) conio_textcolor#40
(byte) conio_textcolor#41
(byte) conio_textcolor#42
(byte) conio_textcolor#43
(byte) conio_textcolor#44
(byte) conio_textcolor#45
(byte) conio_textcolor#46
(byte) conio_textcolor#47
(byte) conio_textcolor#48
(byte) conio_textcolor#49
(byte) conio_textcolor#5
(byte) conio_textcolor#50
(byte) conio_textcolor#51
(byte) conio_textcolor#52
(byte) conio_textcolor#53
(byte) conio_textcolor#54
(byte) conio_textcolor#55
(byte) conio_textcolor#56
(byte) conio_textcolor#57
(byte) conio_textcolor#58
(byte) conio_textcolor#59
(byte) conio_textcolor#6
(byte) conio_textcolor#60
(byte) conio_textcolor#61
(byte) conio_textcolor#62
(byte) conio_textcolor#63
(byte) conio_textcolor#64
(byte) conio_textcolor#65
(byte) conio_textcolor#66
(byte) conio_textcolor#67
(byte) conio_textcolor#68
(byte) conio_textcolor#69
(byte) conio_textcolor#7
(byte) conio_textcolor#70
(byte) conio_textcolor#71
(byte) conio_textcolor#8
(byte) conio_textcolor#9
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(bool~) cputc::$3
(bool~) cputc::$4
(number~) cputc::$6
(label) cputc::@1
(label) cputc::@10
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@9
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(byte) cputc::c#4
(byte) cputc::c#5
(byte) cputc::c#6
(byte) cputc::c#7
(byte) cputc::c#8
(byte) cputc::c#9
(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
(label) cputcxy::@1
(label) cputcxy::@2
(label) cputcxy::@return
(byte) cputcxy::c
(byte) cputcxy::c#0
(byte) cputcxy::c#1
(byte) cputcxy::c#2
(byte) cputcxy::c#3
(byte) cputcxy::x
(byte) cputcxy::x#0
(byte) cputcxy::x#1
(byte) cputcxy::x#2
(byte) cputcxy::y
(byte) cputcxy::y#0
(byte) cputcxy::y#1
(byte) cputcxy::y#2
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@7
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
(label) cputsxy::@1
(label) cputsxy::@2
(label) cputsxy::@return
(to_nomodify byte*) cputsxy::s
(to_nomodify byte*) cputsxy::s#0
(to_nomodify byte*) cputsxy::s#1
(to_nomodify byte*) cputsxy::s#2
(byte) cputsxy::x
(byte) cputsxy::x#0
(byte) cputsxy::x#1
(byte) cputsxy::y
(byte) cputsxy::y#0
(byte) cputsxy::y#1
(byte()) cursor((byte) cursor::onoff)
(label) cursor::@return
(byte) cursor::old
(byte) cursor::old#0
(byte) cursor::onoff
(byte) cursor::onoff#0
(byte) cursor::onoff#1
(byte) cursor::return
(byte) cursor::return#0
(byte) cursor::return#1
(byte) cursor::return#2
(byte) cursor::return#3
(void()) cvline((byte) cvline::length)
(bool~) cvline::$0
(label) cvline::@1
(label) cvline::@2
(label) cvline::@7
(label) cvline::@8
(label) cvline::@return
(byte) cvline::i
(byte) cvline::i#0
(byte) cvline::i#1
(byte) cvline::i#2
(byte) cvline::i#3
(byte) cvline::i#4
(byte) cvline::i#5
(byte) cvline::length
(byte) cvline::length#0
(byte) cvline::length#1
(byte) cvline::length#2
(byte) cvline::length#3
(byte) cvline::length#4
(byte) cvline::length#5
(byte) cvline::x
(byte) cvline::x#0
(byte) cvline::x#1
(byte) cvline::x#2
(byte) cvline::x#3
(byte) cvline::x#4
(byte) cvline::y
(byte) cvline::y#0
(byte) cvline::y#1
(byte) cvline::y#2
(byte) cvline::y#3
(byte) cvline::y#4
(byte) cvline::y#5
(void()) cvlinexy((byte) cvlinexy::x , (byte) cvlinexy::y , (byte) cvlinexy::length)
(label) cvlinexy::@1
(label) cvlinexy::@2
(label) cvlinexy::@return
(byte) cvlinexy::length
(byte) cvlinexy::length#0
(byte) cvlinexy::length#1
(byte) cvlinexy::length#2
(byte) cvlinexy::length#3
(byte) cvlinexy::x
(byte) cvlinexy::x#0
(byte) cvlinexy::x#1
(byte) cvlinexy::x#2
(byte) cvlinexy::y
(byte) cvlinexy::y#0
(byte) cvlinexy::y#1
(byte) cvlinexy::y#2
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(word~) gotoxy::$4
(word~) gotoxy::$5
(word~) gotoxy::$6
(byte*~) gotoxy::$7
(byte*~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#10
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::x#7
(byte) gotoxy::x#8
(byte) gotoxy::x#9
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#10
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(byte) gotoxy::y#7
(byte) gotoxy::y#8
(byte) gotoxy::y#9
(byte()) kbhit()
(byte~) kbhit::$0
(label) kbhit::@return
(byte) kbhit::return
(byte) kbhit::return#0
(byte) kbhit::return#1
(byte) kbhit::return#2
(byte) kbhit::return#3
(byte) kbhit::return#4
(void()) main()
(byte~) main::$3
(bool~) main::$4
(bool~) main::$5
(label) main::@1
(label) main::@10
(label) main::@3
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(void()) screensize((byte*) screensize::x , (byte*) screensize::y)
(label) screensize::@return
(byte*) screensize::x
(byte*) screensize::x#0
(byte*) screensize::x#1
(byte*) screensize::y
(byte*) screensize::y#0
(byte*) screensize::y#1
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte()) textcolor((byte) textcolor::color)
(label) textcolor::@return
(byte) textcolor::color
(byte) textcolor::color#0
(byte) textcolor::color#1
(byte) textcolor::old
(byte) textcolor::old#0
(byte) textcolor::return
(byte) textcolor::return#0
(byte) textcolor::return#1
(byte) textcolor::return#2
(byte) textcolor::return#3

Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) cputc::$6 ← (byte) conio_cursor_y#48 + (number) 1
Adding number conversion cast (unumber) cputc::$6 in (number~) cputc::$6 ← (byte) conio_cursor_y#48 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x#7 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) $17 in *((const nomodify byte*) VIC_MEMORY) ← (number) $17
Adding number conversion cast (unumber) 0 in (bool~) main::$5 ← (number) 0 != (byte~) main::$3
Adding number conversion cast (unumber) 0 in (byte) cputcxy::x#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) MakeTeeLine::$1 ← (volatile byte) XSize - (number) 2
Adding number conversion cast (unumber) MakeTeeLine::$1 in (number~) MakeTeeLine::$1 ← (volatile byte) XSize - (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (byte) cursor::onoff#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) cputcxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) cputcxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) MakeNiceScreen::$6 ← (volatile byte) XSize - (number) 2
Adding number conversion cast (unumber) MakeNiceScreen::$6 in (number~) MakeNiceScreen::$6 ← (volatile byte) XSize - (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (byte) cvlinexy::x#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) cvlinexy::y#0 ← (number) 1
Adding number conversion cast (unumber) $17 in (byte) cvlinexy::length#0 ← (number) $17
Adding number conversion cast (unumber) 2 in (number~) MakeNiceScreen::$11 ← (volatile byte) XSize - (number) 2
Adding number conversion cast (unumber) MakeNiceScreen::$11 in (number~) MakeNiceScreen::$11 ← (volatile byte) XSize - (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) MakeNiceScreen::$14 ← (volatile byte) XSize - (number) 1
Adding number conversion cast (unumber) MakeNiceScreen::$14 in (number~) MakeNiceScreen::$14 ← (volatile byte) XSize - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) cvlinexy::y#1 ← (number) 1
Adding number conversion cast (unumber) $17 in (byte) cvlinexy::length#1 ← (number) $17
Adding number conversion cast (unumber) 7 in (byte) MakeTeeLine::Y#0 ← (number) 7
Adding number conversion cast (unumber) $16 in (byte) MakeTeeLine::Y#1 ← (number) $16
Adding number conversion cast (unumber) 0 in (byte) MakeNiceScreen::I#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte~) MakeNiceScreen::$24 ← (byte~) MakeNiceScreen::$23 >> (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) conio_cursor_x#1 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x#7 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) VIC_MEMORY) ← (unumber)(number) $17
Inlining cast (byte) cputcxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) cursor::onoff#0 ← (unumber)(number) 0
Inlining cast (byte) cputcxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) cputcxy::y#1 ← (unumber)(number) 0
Inlining cast (byte) cvlinexy::x#0 ← (unumber)(number) 0
Inlining cast (byte) cvlinexy::y#0 ← (unumber)(number) 1
Inlining cast (byte) cvlinexy::length#0 ← (unumber)(number) $17
Inlining cast (byte) cvlinexy::y#1 ← (unumber)(number) 1
Inlining cast (byte) cvlinexy::length#1 ← (unumber)(number) $17
Inlining cast (byte) MakeTeeLine::Y#0 ← (unumber)(number) 7
Inlining cast (byte) MakeTeeLine::Y#1 ← (unumber)(number) $16
Inlining cast (byte) MakeNiceScreen::I#1 ← (unumber)(number) 0
Inlining cast (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 56320
Simplifying constant pointer cast (byte*) 56321
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $17
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $17
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $17
Simplifying constant integer cast 7
Simplifying constant integer cast $16
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) cputc::$6 ← (byte) conio_cursor_y#48 + (byte) 1
Inferred type updated to byte in (unumber~) MakeTeeLine::$1 ← (volatile byte) XSize - (byte) 2
Inferred type updated to byte in (unumber~) MakeNiceScreen::$6 ← (volatile byte) XSize - (byte) 2
Inferred type updated to byte in (unumber~) MakeNiceScreen::$11 ← (volatile byte) XSize - (byte) 2
Inferred type updated to byte in (unumber~) MakeNiceScreen::$14 ← (volatile byte) XSize - (byte) 1
Inversing boolean not [38] (bool~) gotoxy::$1 ← (byte) gotoxy::x#7 < (const nomodify byte) CONIO_WIDTH from [37] (bool~) gotoxy::$0 ← (byte) gotoxy::x#7 >= (const nomodify byte) CONIO_WIDTH
Inversing boolean not [42] (bool~) gotoxy::$3 ← (byte) gotoxy::y#7 < (const nomodify byte) CONIO_HEIGHT from [41] (bool~) gotoxy::$2 ← (byte) gotoxy::y#7 >= (const nomodify byte) CONIO_HEIGHT
Inversing boolean not [89] (bool~) cputc::$2 ← (byte) conio_cursor_x#6 != (const nomodify byte) CONIO_WIDTH from [88] (bool~) cputc::$1 ← (byte) conio_cursor_x#6 == (const nomodify byte) CONIO_WIDTH
Inversing boolean not [95] (bool~) cputc::$4 ← (byte) conio_cursor_y#6 != (const nomodify byte) CONIO_HEIGHT from [94] (bool~) cputc::$3 ← (byte) conio_cursor_y#6 == (const nomodify byte) CONIO_HEIGHT
Inversing boolean not [322] (bool~) main::$4 ← (byte) 0 == (byte~) main::$3 from [321] (bool~) main::$5 ← (byte) 0 != (byte~) main::$3
Successful SSA optimization Pass2UnaryNotSimplification
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias conio_textcolor#24 = conio_textcolor#38 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias conio_textcolor#17 = conio_textcolor#8 conio_textcolor#51 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias conio_cursor_x#1 = conio_cursor_x#47 conio_cursor_x#2 
Alias conio_cursor_y#1 = conio_cursor_y#46 conio_cursor_y#2 
Alias conio_cursor_text#1 = conio_cursor_text#46 conio_cursor_text#2 
Alias conio_cursor_color#1 = conio_cursor_color#46 conio_cursor_color#2 
Alias gotoxy::y#10 = gotoxy::y#9 
Alias gotoxy::offset#0 = gotoxy::$6 
Alias conio_cursor_text#3 = gotoxy::$7 conio_cursor_text#47 conio_cursor_text#4 
Alias conio_cursor_color#3 = gotoxy::$8 conio_cursor_color#47 conio_cursor_color#4 
Alias gotoxy::x#10 = gotoxy::x#9 
Alias conio_cursor_x#3 = conio_cursor_x#48 conio_cursor_x#4 
Alias conio_cursor_y#3 = conio_cursor_y#47 conio_cursor_y#4 
Alias conio_cursor_y#48 = conio_cursor_y#91 conio_cursor_y#92 conio_cursor_y#50 
Alias conio_cursor_x#50 = conio_cursor_x#91 conio_cursor_x#92 
Alias conio_cursor_text#49 = conio_cursor_text#89 conio_cursor_text#90 
Alias conio_cursor_color#49 = conio_cursor_color#89 conio_cursor_color#90 
Alias gotoxy::y#1 = cputc::$6 
Alias conio_cursor_x#49 = conio_cursor_x#5 
Alias conio_cursor_y#49 = conio_cursor_y#5 
Alias conio_cursor_text#48 = conio_cursor_text#5 
Alias conio_cursor_color#48 = conio_cursor_color#5 
Alias cputc::c#8 = cputc::c#9 
Alias conio_textcolor#18 = conio_textcolor#9 
Alias conio_cursor_text#6 = conio_cursor_text#92 conio_cursor_text#91 
Alias conio_cursor_color#6 = conio_cursor_color#92 conio_cursor_color#91 
Alias conio_cursor_x#7 = conio_cursor_x#93 
Alias conio_cursor_y#6 = conio_cursor_y#93 
Alias conio_cursor_x#51 = conio_cursor_x#8 
Alias conio_cursor_y#51 = conio_cursor_y#7 
Alias conio_cursor_text#50 = conio_cursor_text#7 
Alias conio_cursor_color#50 = conio_cursor_color#7 
Alias conio_cursor_x#52 = conio_cursor_x#9 
Alias conio_cursor_y#52 = conio_cursor_y#8 
Alias conio_cursor_text#51 = conio_cursor_text#8 
Alias conio_cursor_color#51 = conio_cursor_color#8 
Alias cputcxy::c#2 = cputcxy::c#3 
Alias conio_textcolor#30 = conio_textcolor#39 
Alias conio_cursor_x#10 = conio_cursor_x#53 
Alias conio_cursor_y#53 = conio_cursor_y#9 
Alias conio_cursor_text#52 = conio_cursor_text#9 
Alias conio_cursor_color#52 = conio_cursor_color#9 
Alias conio_cursor_x#11 = conio_cursor_x#54 conio_cursor_x#55 conio_cursor_x#12 
Alias conio_cursor_y#10 = conio_cursor_y#54 conio_cursor_y#55 conio_cursor_y#11 
Alias conio_cursor_text#10 = conio_cursor_text#53 conio_cursor_text#54 conio_cursor_text#11 
Alias conio_cursor_color#10 = conio_cursor_color#53 conio_cursor_color#54 conio_cursor_color#11 
Alias cputs::c#1 = cputs::c#2 
Alias conio_cursor_x#14 = conio_cursor_x#95 conio_cursor_x#96 conio_cursor_x#57 
Alias conio_cursor_y#13 = conio_cursor_y#95 conio_cursor_y#96 conio_cursor_y#57 
Alias conio_cursor_text#13 = conio_cursor_text#94 conio_cursor_text#95 conio_cursor_text#56 
Alias conio_cursor_color#13 = conio_cursor_color#94 conio_cursor_color#95 conio_cursor_color#56 
Alias conio_textcolor#31 = conio_textcolor#40 conio_textcolor#55 
Alias cputs::s#0 = cputs::s#5 cputs::s#4 
Alias conio_cursor_x#13 = conio_cursor_x#56 
Alias conio_cursor_y#12 = conio_cursor_y#56 
Alias conio_cursor_text#12 = conio_cursor_text#55 
Alias conio_cursor_color#12 = conio_cursor_color#55 
Alias cputsxy::s#1 = cputsxy::s#2 
Alias conio_textcolor#64 = conio_textcolor#69 
Alias conio_cursor_x#15 = conio_cursor_x#58 
Alias conio_cursor_y#14 = conio_cursor_y#58 
Alias conio_cursor_text#14 = conio_cursor_text#57 
Alias conio_cursor_color#14 = conio_cursor_color#57 
Alias conio_cursor_x#16 = conio_cursor_x#59 conio_cursor_x#60 conio_cursor_x#17 
Alias conio_cursor_y#15 = conio_cursor_y#59 conio_cursor_y#60 conio_cursor_y#16 
Alias conio_cursor_text#15 = conio_cursor_text#58 conio_cursor_text#59 conio_cursor_text#16 
Alias conio_cursor_color#15 = conio_cursor_color#58 conio_cursor_color#59 conio_cursor_color#16 
Alias conio_cursor_x#19 = conio_cursor_x#98 conio_cursor_x#99 conio_cursor_x#62 
Alias conio_cursor_y#18 = conio_cursor_y#98 conio_cursor_y#99 conio_cursor_y#62 
Alias conio_cursor_text#18 = conio_cursor_text#97 conio_cursor_text#98 conio_cursor_text#61 
Alias conio_cursor_color#18 = conio_cursor_color#97 conio_cursor_color#98 conio_cursor_color#61 
Alias chline::i#2 = chline::i#4 chline::i#3 
Alias conio_textcolor#29 = conio_textcolor#41 conio_textcolor#57 
Alias chline::length#3 = chline::length#6 chline::length#5 
Alias conio_cursor_x#18 = conio_cursor_x#61 
Alias conio_cursor_y#17 = conio_cursor_y#61 
Alias conio_cursor_text#17 = conio_cursor_text#60 
Alias conio_cursor_color#17 = conio_cursor_color#60 
Alias conio_cursor_x#100 = conio_cursor_x#101 conio_cursor_x#66 conio_cursor_x#22 
Alias conio_cursor_y#100 = conio_cursor_y#101 conio_cursor_y#66 conio_cursor_y#21 
Alias conio_cursor_text#100 = conio_cursor_text#99 conio_cursor_text#64 conio_cursor_text#21 
Alias conio_cursor_color#100 = conio_cursor_color#99 conio_cursor_color#64 conio_cursor_color#21 
Alias cvline::y#2 = cvline::y#3 cvline::y#4 
Alias cvline::x#1 = cvline::x#2 cvline::x#3 cvline::x#4 
Alias conio_textcolor#32 = conio_textcolor#42 conio_textcolor#66 conio_textcolor#59 
Alias cvline::i#2 = cvline::i#5 cvline::i#4 cvline::i#3 
Alias cvline::length#1 = cvline::length#5 cvline::length#4 cvline::length#3 
Alias conio_cursor_x#20 = conio_cursor_x#64 
Alias conio_cursor_y#19 = conio_cursor_y#64 
Alias conio_cursor_text#19 = conio_cursor_text#62 
Alias conio_cursor_color#19 = conio_cursor_color#62 
Alias cvline::y#1 = cvline::y#5 
Alias conio_cursor_x#21 = conio_cursor_x#65 
Alias conio_cursor_y#20 = conio_cursor_y#65 
Alias conio_cursor_text#20 = conio_cursor_text#63 
Alias conio_cursor_color#20 = conio_cursor_color#63 
Alias cvlinexy::length#2 = cvlinexy::length#3 
Alias conio_textcolor#65 = conio_textcolor#70 
Alias conio_cursor_x#23 = conio_cursor_x#67 
Alias conio_cursor_y#22 = conio_cursor_y#67 
Alias conio_cursor_text#22 = conio_cursor_text#65 
Alias conio_cursor_color#22 = conio_cursor_color#65 
Alias conio_cursor_x#24 = conio_cursor_x#68 conio_cursor_x#69 conio_cursor_x#25 
Alias conio_cursor_y#23 = conio_cursor_y#68 conio_cursor_y#69 conio_cursor_y#24 
Alias conio_cursor_text#23 = conio_cursor_text#66 conio_cursor_text#67 conio_cursor_text#24 
Alias conio_cursor_color#23 = conio_cursor_color#66 conio_cursor_color#67 conio_cursor_color#24 
Alias textcolor::return#0 = textcolor::old#0 textcolor::return#3 textcolor::return#1 
Alias conio_textcolor#1 = conio_textcolor#11 conio_textcolor#2 
Alias bgcolor::return#0 = bgcolor::old#0 bgcolor::return#3 bgcolor::return#1 
Alias bordercolor::return#0 = bordercolor::old#0 bordercolor::return#3 bordercolor::return#1 
Alias kbhit::return#0 = kbhit::$0 kbhit::return#3 kbhit::return#1 
Alias cursor::return#0 = cursor::old#0 cursor::return#3 cursor::return#1 
Alias conio_display_cursor#1 = conio_display_cursor#9 conio_display_cursor#2 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias conio_textcolor#0 = conio_textcolor#37 conio_textcolor#23 
Alias conio_cursor_x#0 = conio_cursor_x#117 conio_cursor_x#110 
Alias conio_cursor_y#0 = conio_cursor_y#117 conio_cursor_y#110 
Alias conio_cursor_text#0 = conio_cursor_text#117 conio_cursor_text#109 
Alias conio_cursor_color#0 = conio_cursor_color#117 conio_cursor_color#109 
Alias conio_display_cursor#0 = conio_display_cursor#25 conio_display_cursor#19 
Alias conio_textcolor#20 = conio_textcolor#33 
Alias conio_cursor_x#103 = conio_cursor_x#113 
Alias conio_cursor_y#103 = conio_cursor_y#113 
Alias conio_cursor_text#102 = conio_cursor_text#113 
Alias conio_cursor_color#102 = conio_cursor_color#113 
Alias conio_display_cursor#16 = conio_display_cursor#20 
Alias conio_textcolor#12 = conio_textcolor#3 
Alias conio_cursor_x#26 = conio_cursor_x#70 
Alias conio_cursor_y#25 = conio_cursor_y#70 
Alias conio_cursor_text#25 = conio_cursor_text#68 
Alias conio_cursor_color#25 = conio_cursor_color#68 
Alias conio_display_cursor#10 = conio_display_cursor#3 
Alias kbhit::return#2 = kbhit::return#4 
Alias conio_cursor_x#104 = conio_cursor_x#114 conio_cursor_x#118 
Alias conio_cursor_y#104 = conio_cursor_y#114 conio_cursor_y#118 
Alias conio_cursor_text#103 = conio_cursor_text#114 conio_cursor_text#118 
Alias conio_cursor_color#103 = conio_cursor_color#114 conio_cursor_color#118 
Alias conio_textcolor#13 = conio_textcolor#43 conio_textcolor#60 conio_textcolor#34 conio_textcolor#21 conio_textcolor#4 
Alias conio_display_cursor#11 = conio_display_cursor#26 conio_display_cursor#30 conio_display_cursor#21 conio_display_cursor#17 conio_display_cursor#4 
Alias conio_cursor_x#27 = conio_cursor_x#71 conio_cursor_x#72 conio_cursor_x#28 
Alias conio_cursor_y#26 = conio_cursor_y#71 conio_cursor_y#72 conio_cursor_y#27 
Alias conio_cursor_text#26 = conio_cursor_text#69 conio_cursor_text#70 conio_cursor_text#27 
Alias conio_cursor_color#26 = conio_cursor_color#69 conio_cursor_color#70 conio_cursor_color#27 
Alias conio_textcolor#28 = conio_textcolor#44 conio_textcolor#53 
Alias conio_cursor_x#29 = conio_cursor_x#73 
Alias conio_cursor_y#28 = conio_cursor_y#73 
Alias conio_cursor_text#28 = conio_cursor_text#71 
Alias conio_cursor_color#28 = conio_cursor_color#71 
Alias chline::length#0 = MakeTeeLine::$1 
Alias conio_cursor_x#30 = conio_cursor_x#74 
Alias conio_cursor_y#29 = conio_cursor_y#74 
Alias conio_cursor_text#29 = conio_cursor_text#72 
Alias conio_cursor_color#29 = conio_cursor_color#72 
Alias conio_cursor_x#31 = conio_cursor_x#75 conio_cursor_x#76 conio_cursor_x#32 
Alias conio_cursor_y#30 = conio_cursor_y#75 conio_cursor_y#76 conio_cursor_y#31 
Alias conio_cursor_text#30 = conio_cursor_text#73 conio_cursor_text#74 conio_cursor_text#31 
Alias conio_cursor_color#30 = conio_cursor_color#73 conio_cursor_color#74 conio_cursor_color#31 
Alias conio_cursor_x#106 = conio_cursor_x#119 conio_cursor_x#120 conio_cursor_x#115 
Alias conio_cursor_y#106 = conio_cursor_y#119 conio_cursor_y#120 conio_cursor_y#115 
Alias conio_cursor_text#105 = conio_cursor_text#119 conio_cursor_text#120 conio_cursor_text#115 
Alias conio_cursor_color#105 = conio_cursor_color#119 conio_cursor_color#120 conio_cursor_color#115 
Alias conio_display_cursor#15 = conio_display_cursor#31 conio_display_cursor#34 conio_display_cursor#27 conio_display_cursor#22 
Alias conio_textcolor#14 = conio_textcolor#5 conio_textcolor#71 conio_textcolor#63 conio_textcolor#67 conio_textcolor#52 conio_textcolor#45 conio_textcolor#25 conio_textcolor#46 conio_textcolor#26 conio_textcolor#47 conio_textcolor#27 conio_textcolor#68 conio_textcolor#61 conio_textcolor#48 conio_textcolor#35 
Alias conio_cursor_x#107 = conio_cursor_x#33 conio_cursor_x#77 
Alias conio_cursor_y#107 = conio_cursor_y#32 conio_cursor_y#77 
Alias conio_cursor_text#106 = conio_cursor_text#32 conio_cursor_text#75 
Alias conio_cursor_color#106 = conio_cursor_color#32 conio_cursor_color#75 
Alias conio_display_cursor#12 = conio_display_cursor#5 conio_display_cursor#41 conio_display_cursor#40 conio_display_cursor#39 conio_display_cursor#38 conio_display_cursor#37 conio_display_cursor#36 conio_display_cursor#35 conio_display_cursor#32 conio_display_cursor#28 conio_display_cursor#23 
Alias conio_cursor_x#34 = conio_cursor_x#78 
Alias conio_cursor_y#33 = conio_cursor_y#78 
Alias conio_cursor_text#33 = conio_cursor_text#76 
Alias conio_cursor_color#33 = conio_cursor_color#76 
Alias chline::length#1 = MakeNiceScreen::$6 
Alias conio_cursor_x#35 = conio_cursor_x#79 
Alias conio_cursor_y#34 = conio_cursor_y#79 
Alias conio_cursor_text#34 = conio_cursor_text#77 
Alias conio_cursor_color#34 = conio_cursor_color#77 
Alias conio_cursor_x#36 = conio_cursor_x#80 
Alias conio_cursor_y#35 = conio_cursor_y#80 
Alias conio_cursor_text#35 = conio_cursor_text#78 
Alias conio_cursor_color#35 = conio_cursor_color#78 
Alias conio_cursor_x#37 = conio_cursor_x#81 
Alias conio_cursor_y#36 = conio_cursor_y#81 
Alias conio_cursor_text#36 = conio_cursor_text#79 
Alias conio_cursor_color#36 = conio_cursor_color#79 
Alias conio_cursor_x#38 = conio_cursor_x#82 
Alias conio_cursor_y#37 = conio_cursor_y#82 
Alias conio_cursor_text#37 = conio_cursor_text#80 
Alias conio_cursor_color#37 = conio_cursor_color#80 
Alias chline::length#2 = MakeNiceScreen::$11 
Alias conio_cursor_x#39 = conio_cursor_x#83 
Alias conio_cursor_y#38 = conio_cursor_y#83 
Alias conio_cursor_text#38 = conio_cursor_text#81 
Alias conio_cursor_color#38 = conio_cursor_color#81 
Alias conio_cursor_x#40 = conio_cursor_x#84 
Alias conio_cursor_y#39 = conio_cursor_y#84 
Alias conio_cursor_text#39 = conio_cursor_text#82 
Alias conio_cursor_color#39 = conio_cursor_color#82 
Alias cvlinexy::x#1 = MakeNiceScreen::$14 
Alias conio_cursor_x#41 = conio_cursor_x#85 
Alias conio_cursor_y#40 = conio_cursor_y#85 
Alias conio_cursor_text#40 = conio_cursor_text#83 
Alias conio_cursor_color#40 = conio_cursor_color#83 
Alias conio_cursor_x#42 = conio_cursor_x#86 
Alias conio_cursor_y#41 = conio_cursor_y#86 
Alias conio_cursor_text#41 = conio_cursor_text#84 
Alias conio_cursor_color#41 = conio_cursor_color#84 
Alias conio_cursor_x#43 = conio_cursor_x#87 
Alias conio_cursor_y#42 = conio_cursor_y#87 
Alias conio_cursor_text#42 = conio_cursor_text#85 
Alias conio_cursor_color#42 = conio_cursor_color#85 
Alias MakeNiceScreen::T#3 = MakeNiceScreen::T#6 MakeNiceScreen::T#4 MakeNiceScreen::T#5 
Alias conio_cursor_x#108 = conio_cursor_x#116 conio_cursor_x#109 conio_cursor_x#89 conio_cursor_x#45 
Alias conio_cursor_y#108 = conio_cursor_y#116 conio_cursor_y#109 conio_cursor_y#89 conio_cursor_y#44 
Alias conio_cursor_text#107 = conio_cursor_text#116 conio_cursor_text#108 conio_cursor_text#87 conio_cursor_text#44 
Alias conio_cursor_color#107 = conio_cursor_color#116 conio_cursor_color#108 conio_cursor_color#87 conio_cursor_color#44 
Alias MakeNiceScreen::I#3 = MakeNiceScreen::I#6 MakeNiceScreen::I#5 MakeNiceScreen::I#4 
Alias conio_textcolor#15 = conio_textcolor#62 conio_textcolor#22 conio_textcolor#49 conio_textcolor#36 conio_textcolor#6 
Alias conio_display_cursor#13 = conio_display_cursor#33 conio_display_cursor#18 conio_display_cursor#29 conio_display_cursor#24 conio_display_cursor#6 
Alias strlen::str#1 = MakeNiceScreen::$29 
Alias strlen::return#2 = strlen::return#4 
Alias MakeNiceScreen::X#1 = MakeNiceScreen::$24 
Alias cputsxy::s#0 = MakeNiceScreen::$31 
Alias conio_cursor_x#44 = conio_cursor_x#88 
Alias conio_cursor_y#43 = conio_cursor_y#88 
Alias conio_cursor_text#43 = conio_cursor_text#86 
Alias conio_cursor_color#43 = conio_cursor_color#86 
Alias conio_textcolor#16 = conio_textcolor#7 
Alias conio_cursor_x#46 = conio_cursor_x#90 
Alias conio_cursor_y#45 = conio_cursor_y#90 
Alias conio_cursor_text#45 = conio_cursor_text#88 
Alias conio_cursor_color#45 = conio_cursor_color#88 
Alias conio_display_cursor#14 = conio_display_cursor#7 
Successful SSA optimization Pass2AliasElimination
Alias gotoxy::y#10 = gotoxy::y#7 
Alias gotoxy::x#10 = gotoxy::x#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte) conio_textcolor#17 (byte) conio_textcolor#24
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Identical Phi Values (byte*) screensize::x#1 (byte*) screensize::x#0
Identical Phi Values (byte*) screensize::y#1 (byte*) screensize::y#0
Identical Phi Values (byte) conio_cursor_x#49 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#49 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#48 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#48 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_cursor_x#51 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#51 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#50 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#50 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_cursor_x#10 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#53 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#52 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#52 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_cursor_x#11 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#10 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#10 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#10 (byte*) conio_cursor_color#51
Identical Phi Values (to_nomodify byte*) cputs::s#3 (to_nomodify byte*) cputs::s#1
Identical Phi Values (byte) conio_cursor_x#111 (byte) conio_cursor_x#15
Identical Phi Values (byte) conio_cursor_y#111 (byte) conio_cursor_y#14
Identical Phi Values (byte*) conio_cursor_text#110 (byte*) conio_cursor_text#14
Identical Phi Values (byte*) conio_cursor_color#110 (byte*) conio_cursor_color#14
Identical Phi Values (byte) conio_textcolor#54 (byte) conio_textcolor#64
Identical Phi Values (byte) conio_textcolor#31 (byte) conio_textcolor#54
Identical Phi Values (byte) conio_cursor_x#13 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#12 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#12 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#12 (byte*) conio_cursor_color#51
Identical Phi Values (byte) cputsxy::x#1 (byte) cputsxy::x#0
Identical Phi Values (byte) cputsxy::y#1 (byte) cputsxy::y#0
Identical Phi Values (byte) conio_cursor_x#97 (byte) conio_cursor_x#108
Identical Phi Values (byte) conio_cursor_y#97 (byte) conio_cursor_y#108
Identical Phi Values (byte*) conio_cursor_text#96 (byte*) conio_cursor_text#107
Identical Phi Values (byte*) conio_cursor_color#96 (byte*) conio_cursor_color#107
Identical Phi Values (to_nomodify byte*) cputsxy::s#1 (to_nomodify byte*) cputsxy::s#0
Identical Phi Values (byte) conio_textcolor#64 (byte) conio_textcolor#15
Identical Phi Values (byte) conio_cursor_x#15 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#14 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#14 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#14 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_cursor_x#16 (byte) conio_cursor_x#14
Identical Phi Values (byte) conio_cursor_y#15 (byte) conio_cursor_y#13
Identical Phi Values (byte*) conio_cursor_text#15 (byte*) conio_cursor_text#13
Identical Phi Values (byte*) conio_cursor_color#15 (byte*) conio_cursor_color#13
Identical Phi Values (byte) chline::length#3 (byte) chline::length#4
Identical Phi Values (byte) conio_textcolor#29 (byte) conio_textcolor#56
Identical Phi Values (byte) conio_cursor_x#18 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#17 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#17 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#17 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_cursor_x#63 (byte) conio_cursor_x#23
Identical Phi Values (byte) conio_cursor_y#63 (byte) conio_cursor_y#22
Identical Phi Values (byte) cvline::length#2 (byte) cvline::length#0
Identical Phi Values (byte*) conio_cursor_text#112 (byte*) conio_cursor_text#22
Identical Phi Values (byte*) conio_cursor_color#112 (byte*) conio_cursor_color#22
Identical Phi Values (byte) conio_textcolor#58 (byte) conio_textcolor#65
Identical Phi Values (byte) cvline::length#1 (byte) cvline::length#2
Identical Phi Values (byte) cvline::x#1 (byte) cvline::x#0
Identical Phi Values (byte) conio_textcolor#32 (byte) conio_textcolor#58
Identical Phi Values (byte) conio_cursor_x#20 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#19 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#19 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#19 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_cursor_x#21 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#20 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#20 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#20 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_textcolor#65 (byte) conio_textcolor#14
Identical Phi Values (byte) conio_cursor_x#23 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#22 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#22 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#22 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_cursor_x#24 (byte) conio_cursor_x#100
Identical Phi Values (byte) conio_cursor_y#23 (byte) conio_cursor_y#100
Identical Phi Values (byte*) conio_cursor_text#23 (byte*) conio_cursor_text#100
Identical Phi Values (byte*) conio_cursor_color#23 (byte*) conio_cursor_color#100
Identical Phi Values (byte) conio_textcolor#10 (byte) conio_textcolor#19
Identical Phi Values (byte) textcolor::color#1 (byte) textcolor::color#0
Identical Phi Values (byte) bgcolor::color#1 (byte) bgcolor::color#0
Identical Phi Values (byte) bordercolor::color#1 (byte) bordercolor::color#0
Identical Phi Values (byte) conio_display_cursor#8 (byte) conio_display_cursor#15
Identical Phi Values (byte) cursor::onoff#1 (byte) cursor::onoff#0
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) conio_textcolor#20 (byte) conio_textcolor#0
Identical Phi Values (byte) conio_cursor_x#103 (byte) conio_cursor_x#0
Identical Phi Values (byte) conio_cursor_y#103 (byte) conio_cursor_y#0
Identical Phi Values (byte*) conio_cursor_text#102 (byte*) conio_cursor_text#0
Identical Phi Values (byte*) conio_cursor_color#102 (byte*) conio_cursor_color#0
Identical Phi Values (byte) conio_display_cursor#16 (byte) conio_display_cursor#0
Identical Phi Values (byte) conio_textcolor#12 (byte) conio_textcolor#15
Identical Phi Values (byte) conio_cursor_x#26 (byte) conio_cursor_x#108
Identical Phi Values (byte) conio_cursor_y#25 (byte) conio_cursor_y#108
Identical Phi Values (byte*) conio_cursor_text#25 (byte*) conio_cursor_text#107
Identical Phi Values (byte*) conio_cursor_color#25 (byte*) conio_cursor_color#107
Identical Phi Values (byte) conio_display_cursor#10 (byte) conio_display_cursor#13
Identical Phi Values (byte) conio_cursor_x#104 (byte) conio_cursor_x#26
Identical Phi Values (byte) conio_cursor_y#104 (byte) conio_cursor_y#25
Identical Phi Values (byte*) conio_cursor_text#103 (byte*) conio_cursor_text#25
Identical Phi Values (byte*) conio_cursor_color#103 (byte*) conio_cursor_color#25
Identical Phi Values (byte) conio_textcolor#13 (byte) conio_textcolor#12
Identical Phi Values (byte) conio_display_cursor#11 (byte) conio_display_cursor#10
Identical Phi Values (byte) conio_cursor_x#27 (byte) conio_cursor_x#1
Identical Phi Values (byte) conio_cursor_y#26 (byte) conio_cursor_y#1
Identical Phi Values (byte*) conio_cursor_text#26 (byte*) conio_cursor_text#1
Identical Phi Values (byte*) conio_cursor_color#26 (byte*) conio_cursor_color#1
Identical Phi Values (byte) conio_textcolor#28 (byte) conio_textcolor#14
Identical Phi Values (byte) conio_cursor_x#29 (byte) conio_cursor_x#11
Identical Phi Values (byte) conio_cursor_y#28 (byte) conio_cursor_y#10
Identical Phi Values (byte*) conio_cursor_text#28 (byte*) conio_cursor_text#10
Identical Phi Values (byte*) conio_cursor_color#28 (byte*) conio_cursor_color#10
Identical Phi Values (byte) conio_cursor_x#30 (byte) conio_cursor_x#19
Identical Phi Values (byte) conio_cursor_y#29 (byte) conio_cursor_y#18
Identical Phi Values (byte*) conio_cursor_text#29 (byte*) conio_cursor_text#18
Identical Phi Values (byte*) conio_cursor_color#29 (byte*) conio_cursor_color#18
Identical Phi Values (byte) conio_cursor_x#31 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#30 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#30 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#30 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_textcolor#19 (byte) conio_textcolor#20
Identical Phi Values (byte) conio_cursor_x#106 (byte) conio_cursor_x#103
Identical Phi Values (byte) conio_cursor_y#106 (byte) conio_cursor_y#103
Identical Phi Values (byte*) conio_cursor_text#105 (byte*) conio_cursor_text#102
Identical Phi Values (byte*) conio_cursor_color#105 (byte*) conio_cursor_color#102
Identical Phi Values (byte) conio_display_cursor#15 (byte) conio_display_cursor#16
Identical Phi Values (byte) conio_textcolor#14 (byte) conio_textcolor#1
Identical Phi Values (byte) conio_cursor_x#107 (byte) conio_cursor_x#1
Identical Phi Values (byte) conio_cursor_y#107 (byte) conio_cursor_y#1
Identical Phi Values (byte*) conio_cursor_text#106 (byte*) conio_cursor_text#1
Identical Phi Values (byte*) conio_cursor_color#106 (byte*) conio_cursor_color#1
Identical Phi Values (byte) conio_display_cursor#12 (byte) conio_display_cursor#1
Identical Phi Values (byte) conio_cursor_x#34 (byte) conio_cursor_x#11
Identical Phi Values (byte) conio_cursor_y#33 (byte) conio_cursor_y#10
Identical Phi Values (byte*) conio_cursor_text#33 (byte*) conio_cursor_text#10
Identical Phi Values (byte*) conio_cursor_color#33 (byte*) conio_cursor_color#10
Identical Phi Values (byte) conio_cursor_x#35 (byte) conio_cursor_x#19
Identical Phi Values (byte) conio_cursor_y#34 (byte) conio_cursor_y#18
Identical Phi Values (byte*) conio_cursor_text#34 (byte*) conio_cursor_text#18
Identical Phi Values (byte*) conio_cursor_color#34 (byte*) conio_cursor_color#18
Identical Phi Values (byte) conio_cursor_x#36 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#35 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#35 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#35 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_cursor_x#37 (byte) conio_cursor_x#24
Identical Phi Values (byte) conio_cursor_y#36 (byte) conio_cursor_y#23
Identical Phi Values (byte*) conio_cursor_text#36 (byte*) conio_cursor_text#23
Identical Phi Values (byte*) conio_cursor_color#36 (byte*) conio_cursor_color#23
Identical Phi Values (byte) conio_cursor_x#38 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#37 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#37 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#37 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_cursor_x#39 (byte) conio_cursor_x#19
Identical Phi Values (byte) conio_cursor_y#38 (byte) conio_cursor_y#18
Identical Phi Values (byte*) conio_cursor_text#38 (byte*) conio_cursor_text#18
Identical Phi Values (byte*) conio_cursor_color#38 (byte*) conio_cursor_color#18
Identical Phi Values (byte) conio_cursor_x#40 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#39 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#39 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#39 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_cursor_x#41 (byte) conio_cursor_x#24
Identical Phi Values (byte) conio_cursor_y#40 (byte) conio_cursor_y#23
Identical Phi Values (byte*) conio_cursor_text#40 (byte*) conio_cursor_text#23
Identical Phi Values (byte*) conio_cursor_color#40 (byte*) conio_cursor_color#23
Identical Phi Values (byte) conio_cursor_x#42 (byte) conio_cursor_x#31
Identical Phi Values (byte) conio_cursor_y#41 (byte) conio_cursor_y#30
Identical Phi Values (byte*) conio_cursor_text#41 (byte*) conio_cursor_text#30
Identical Phi Values (byte*) conio_cursor_color#41 (byte*) conio_cursor_color#30
Identical Phi Values (byte) conio_cursor_x#43 (byte) conio_cursor_x#31
Identical Phi Values (byte) conio_cursor_y#42 (byte) conio_cursor_y#30
Identical Phi Values (byte*) conio_cursor_text#42 (byte*) conio_cursor_text#30
Identical Phi Values (byte*) conio_cursor_color#42 (byte*) conio_cursor_color#30
Identical Phi Values (byte) conio_textcolor#15 (byte) conio_textcolor#14
Identical Phi Values (byte) conio_display_cursor#13 (byte) conio_display_cursor#12
Identical Phi Values (byte) conio_cursor_x#44 (byte) conio_cursor_x#16
Identical Phi Values (byte) conio_cursor_y#43 (byte) conio_cursor_y#15
Identical Phi Values (byte*) conio_cursor_text#43 (byte*) conio_cursor_text#15
Identical Phi Values (byte*) conio_cursor_color#43 (byte*) conio_cursor_color#15
Identical Phi Values (byte) conio_textcolor#16 (byte) conio_textcolor#13
Identical Phi Values (byte) conio_cursor_x#46 (byte) conio_cursor_x#27
Identical Phi Values (byte) conio_cursor_y#45 (byte) conio_cursor_y#26
Identical Phi Values (byte*) conio_cursor_text#45 (byte*) conio_cursor_text#26
Identical Phi Values (byte*) conio_cursor_color#45 (byte*) conio_cursor_color#26
Identical Phi Values (byte) conio_display_cursor#14 (byte) conio_display_cursor#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) conio_textcolor#50 (byte) conio_textcolor#1
Identical Phi Values (byte) conio_textcolor#24 (byte) conio_textcolor#50
Identical Phi Values (byte) conio_textcolor#30 (byte) conio_textcolor#1
Identical Phi Values (byte) conio_cursor_x#112 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#112 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#111 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#111 (byte*) conio_cursor_color#51
Identical Phi Values (byte) conio_textcolor#56 (byte) conio_textcolor#1
Identical Phi Values (byte) conio_cursor_x#100 (byte) conio_cursor_x#3
Identical Phi Values (byte) conio_cursor_y#100 (byte) conio_cursor_y#3
Identical Phi Values (byte*) conio_cursor_text#100 (byte*) conio_cursor_text#3
Identical Phi Values (byte*) conio_cursor_color#100 (byte*) conio_cursor_color#3
Identical Phi Values (byte) conio_cursor_x#102 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#102 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#101 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#101 (byte*) conio_cursor_color#51
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) conio_textcolor#18 (byte) conio_textcolor#1
Identical Phi Values (byte) conio_cursor_x#19 (byte) conio_cursor_x#52
Identical Phi Values (byte) conio_cursor_y#18 (byte) conio_cursor_y#52
Identical Phi Values (byte*) conio_cursor_text#18 (byte*) conio_cursor_text#51
Identical Phi Values (byte*) conio_cursor_color#18 (byte*) conio_cursor_color#51
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) clrscr::$0 [12] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [20] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [30] if((byte) gotoxy::x#7<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [33] if((byte) gotoxy::y#10<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [51] if((byte) cputc::c#8==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [62] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return
Simple Condition (bool~) cputc::$4 [66] if((byte) conio_cursor_y#6!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return
Simple Condition (bool~) cputs::$1 [88] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) chline::$0 [106] if((byte) chline::i#2<(byte) chline::length#4) goto chline::@2
Simple Condition (bool~) cvline::$0 [118] if((byte) cvline::i#2<(byte) cvline::length#0) goto cvline::@2
Simple Condition (bool~) strlen::$0 [161] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) main::$4 [179] if((byte) 0==(byte~) main::$3) goto main::@1
Simple Condition (bool~) MakeNiceScreen::$20 [258] if((byte) MakeNiceScreen::I#3<(byte~) MakeNiceScreen::$19) goto MakeNiceScreen::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [255] (byte~) MakeNiceScreen::$18 ← sizeof  (const struct $0*) MakeNiceScreen::Text
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) conio_cursor_x#0 = 0
Constant (const byte) conio_cursor_y#0 = 0
Constant (const byte*) conio_cursor_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) conio_cursor_color#0 = CONIO_SCREEN_COLORS
Constant (const byte) conio_textcolor#0 = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_display_cursor#0 = 0
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) conio_cursor_x#1 = 0
Constant (const byte) conio_cursor_y#1 = 0
Constant (const byte*) conio_cursor_text#1 = CONIO_SCREEN_TEXT
Constant (const byte*) conio_cursor_color#1 = CONIO_SCREEN_COLORS
Constant (const byte) gotoxy::x#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) conio_cursor_x#7 = 0
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) chline::i#0 = 0
Constant (const byte) cputc::c#2 = CH_HLINE
Constant (const byte) cvline::i#0 = 0
Constant (const byte) cputc::c#3 = CH_VLINE
Constant (const word) strlen::len#0 = 0
Constant (const byte*) screensize::x#0 = &XSize
Constant (const byte*) screensize::y#0 = &YSize
Constant (const byte) cputcxy::x#0 = 0
Constant (const byte) cputcxy::c#0 = CH_LTEE
Constant (const byte) cputc::c#4 = CH_RTEE
Constant (const to_nomodify struct $0*) MakeNiceScreen::T#0 = (struct $0*) 0
Constant (const byte) MakeNiceScreen::I#0 = 0
Constant (const byte) MakeNiceScreen::X#0 = 0
Constant (const byte) textcolor::color#0 = COLOR_GRAY3
Constant (const byte) bordercolor::color#0 = COLOR_BLACK
Constant (const byte) bgcolor::color#0 = COLOR_BLACK
Constant (const byte) cursor::onoff#0 = 0
Constant (const byte) cputcxy::x#1 = 0
Constant (const byte) cputcxy::y#1 = 0
Constant (const byte) cputcxy::c#1 = CH_ULCORNER
Constant (const byte) cputc::c#5 = CH_URCORNER
Constant (const byte) cvlinexy::x#0 = 0
Constant (const byte) cvlinexy::y#0 = 1
Constant (const byte) cvlinexy::length#0 = $17
Constant (const byte) cputc::c#6 = CH_LLCORNER
Constant (const byte) cputc::c#7 = CH_LRCORNER
Constant (const byte) cvlinexy::y#1 = 1
Constant (const byte) cvlinexy::length#1 = $17
Constant (const byte) MakeTeeLine::Y#0 = 7
Constant (const byte) MakeTeeLine::Y#1 = $16
Constant (const byte) MakeNiceScreen::I#1 = 0
Constant (const to_nomodify struct $0*) MakeNiceScreen::T#1 = MakeNiceScreen::Text
Constant (const byte) MakeNiceScreen::$18 = sizeof MakeNiceScreen::Text
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) textcolor::return#0 = conio_textcolor#0
Constant (const byte) conio_textcolor#1 = textcolor::color#0
Constant (const byte) cursor::return#0 = conio_display_cursor#0
Constant (const byte) conio_display_cursor#1 = cursor::onoff#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) textcolor::return#2 = textcolor::return#0
Constant (const byte) cursor::return#2 = cursor::return#0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [269] (byte) cputsxy::y#0 ← *((byte*~) MakeNiceScreen::$30)  -- *((byte*)MakeNiceScreen::T#3 + OFFSET_STRUCT_$0_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (byte*)MakeNiceScreen::T#3 in [266] (byte*~) MakeNiceScreen::$30 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (const byte) OFFSET_STRUCT_$0_Y
Simplifying expression containing zero (byte*)MakeNiceScreen::T#3 in [269] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (const byte) OFFSET_STRUCT_$0_Y)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable - keeping the phi block (byte) conio_cursor_x#94
Eliminating unused variable - keeping the phi block (byte) conio_cursor_y#94
Eliminating unused variable - keeping the phi block (byte*) conio_cursor_text#93
Eliminating unused variable - keeping the phi block (byte*) conio_cursor_color#93
Eliminating unused variable (byte) bordercolor::return#2 and assignment [122] (byte) bordercolor::return#2 ← (byte) bordercolor::return#0
Eliminating unused variable (byte) bgcolor::return#2 and assignment [124] (byte) bgcolor::return#2 ← (byte) bgcolor::return#0
Eliminating unused variable - keeping the phi block (byte) conio_cursor_x#108
Eliminating unused variable - keeping the phi block (byte) conio_cursor_y#108
Eliminating unused variable - keeping the phi block (byte*) conio_cursor_text#107
Eliminating unused variable - keeping the phi block (byte*) conio_cursor_color#107
Eliminating unused variable (byte*~) MakeNiceScreen::$30 and assignment [150] (byte*~) MakeNiceScreen::$30 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) textcolor::return#2
Eliminating unused constant (const byte) cursor::return#2
Eliminating unused constant (const to_nomodify struct $0*) MakeNiceScreen::T#0
Eliminating unused constant (const byte) MakeNiceScreen::I#0
Eliminating unused constant (const byte) MakeNiceScreen::X#0
Eliminating unused constant (const byte) OFFSET_STRUCT_$0_Y
Eliminating unused constant (const byte) conio_cursor_x#0
Eliminating unused constant (const byte) conio_cursor_y#0
Eliminating unused constant (const byte*) conio_cursor_text#0
Eliminating unused constant (const byte*) conio_cursor_color#0
Eliminating unused constant (const byte) conio_display_cursor#1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) bgcolor::return#0 and assignment [87] (byte) bgcolor::return#0 ← *((const nomodify byte*) CONIO_BGCOLOR)
Eliminating unused variable (byte) bordercolor::return#0 and assignment [90] (byte) bordercolor::return#0 ← *((const nomodify byte*) CONIO_BORDERCOLOR)
Eliminating unused variable - keeping the phi block (byte) conio_cursor_x#105
Eliminating unused variable - keeping the phi block (byte) conio_cursor_y#105
Eliminating unused variable - keeping the phi block (byte*) conio_cursor_text#104
Eliminating unused variable - keeping the phi block (byte*) conio_cursor_color#104
Eliminating unused constant (const byte) textcolor::return#0
Eliminating unused constant (const byte) cursor::onoff#0
Eliminating unused constant (const byte) cursor::return#0
Eliminating unused constant (const byte) conio_cursor_x#1
Eliminating unused constant (const byte) conio_cursor_y#1
Eliminating unused constant (const byte*) conio_cursor_text#1
Eliminating unused constant (const byte*) conio_cursor_color#1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) conio_textcolor#0
Eliminating unused constant (const byte) conio_display_cursor#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Successful SSA optimization PassNEliminateUnusedVars
Resolving array sizeof() sizeof (const struct $0*) MakeNiceScreen::Text
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [137] (byte~) MakeNiceScreen::$19 ← (const byte) MakeNiceScreen::$18 / (const byte) SIZEOF_STRUCT_$0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) MakeNiceScreen::$19 = MakeNiceScreen::$18/SIZEOF_STRUCT_$0
Successful SSA optimization Pass2ConstantIdentification
Adding number conversion cast (unumber) $c in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift and addition[19] (word~) gotoxy::$5 ← (word~) gotoxy::$4 * (const nomodify byte) CONIO_WIDTH
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const byte) gotoxy::x#0
Inlining constant with var siblings (const byte) gotoxy::y#0
Inlining constant with var siblings (const byte) gotoxy::x#1
Inlining constant with var siblings (const byte) gotoxy::x#2
Inlining constant with var siblings (const byte) gotoxy::y#2
Inlining constant with var siblings (const byte) cputc::c#2
Inlining constant with var siblings (const byte) cputc::c#3
Inlining constant with var siblings (const byte) cputc::c#4
Inlining constant with var siblings (const byte) cputc::c#5
Inlining constant with var siblings (const byte) cputc::c#6
Inlining constant with var siblings (const byte) cputc::c#7
Inlining constant with var siblings (const byte) cputcxy::x#0
Inlining constant with var siblings (const byte) cputcxy::c#0
Inlining constant with var siblings (const byte) cputcxy::x#1
Inlining constant with var siblings (const byte) cputcxy::y#1
Inlining constant with var siblings (const byte) cputcxy::c#1
Inlining constant with var siblings (const byte) chline::i#0
Inlining constant with var siblings (const byte) cvline::i#0
Inlining constant with var siblings (const byte) cvlinexy::x#0
Inlining constant with var siblings (const byte) cvlinexy::y#0
Inlining constant with var siblings (const byte) cvlinexy::length#0
Inlining constant with var siblings (const byte) cvlinexy::y#1
Inlining constant with var siblings (const byte) cvlinexy::length#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) MakeTeeLine::Y#0
Inlining constant with var siblings (const byte) MakeTeeLine::Y#1
Inlining constant with var siblings (const byte) MakeNiceScreen::I#1
Inlining constant with var siblings (const to_nomodify struct $0*) MakeNiceScreen::T#1
Inlining constant with var siblings (const byte) conio_cursor_x#7
Constant inlined conio_cursor_x#7 = (byte) 0
Constant inlined chline::i#0 = (byte) 0
Constant inlined cputc::c#2 = (const nomodify byte) CH_HLINE
Constant inlined cputc::c#3 = (const nomodify byte) CH_VLINE
Constant inlined MakeNiceScreen::$19 = (byte) $c*(byte) $29/(byte) $29
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined cputc::c#4 = (const nomodify byte) CH_RTEE
Constant inlined MakeNiceScreen::$18 = (byte) $c*(byte) $29
Constant inlined strlen::len#0 = (word) 0
Constant inlined cputc::c#5 = (const nomodify byte) CH_URCORNER
Constant inlined cputc::c#6 = (const nomodify byte) CH_LLCORNER
Constant inlined cvlinexy::length#0 = (byte) $17
Constant inlined MakeNiceScreen::T#1 = (const struct $0*) MakeNiceScreen::Text
Constant inlined cputcxy::x#0 = (byte) 0
Constant inlined cputcxy::x#1 = (byte) 0
Constant inlined bordercolor::color#0 = (const nomodify byte) COLOR_BLACK
Constant inlined cputcxy::y#1 = (byte) 0
Constant inlined conio_textcolor#1 = (const nomodify byte) COLOR_GRAY3
Constant inlined cvline::i#0 = (byte) 0
Constant inlined textcolor::color#0 = (const nomodify byte) COLOR_GRAY3
Constant inlined cvlinexy::length#1 = (byte) $17
Constant inlined MakeNiceScreen::I#1 = (byte) 0
Constant inlined cputcxy::c#1 = (const nomodify byte) CH_ULCORNER
Constant inlined cputcxy::c#0 = (const nomodify byte) CH_LTEE
Constant inlined cvlinexy::y#0 = (byte) 1
Constant inlined cvlinexy::y#1 = (byte) 1
Constant inlined clrscr::line_text#0 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined cvlinexy::x#0 = (byte) 0
Constant inlined MakeTeeLine::Y#0 = (byte) 7
Constant inlined MakeTeeLine::Y#1 = (byte) $16
Constant inlined OFFSET_STRUCT_$0_MSG = (byte) 1
Constant inlined cputc::c#7 = (const nomodify byte) CH_LRCORNER
Constant inlined gotoxy::y#2 = (byte) 0
Constant inlined bgcolor::color#0 = (const nomodify byte) COLOR_BLACK
Constant inlined gotoxy::x#0 = (byte) 0
Constant inlined gotoxy::y#0 = (byte) 0
Constant inlined gotoxy::x#1 = (byte) 0
Constant inlined gotoxy::x#2 = (byte) 0
Constant inlined SIZEOF_STRUCT_$0 = (byte) $29
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) CONIO_SCREEN_COLORS
Successful SSA optimization Pass2ConstantInlining
Alias gotoxy::$5 = gotoxy::$11 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) cputcxy::x#2 (byte) 0
Identical Phi Values (byte) cvlinexy::y#2 (byte) 1
Identical Phi Values (byte) cvlinexy::length#2 (byte) $17
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) gotoxy::x#3 = 0
Constant (const byte) gotoxy::y#6 = 1
Constant (const byte) cvline::length#0 = $17
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) gotoxy::x#3
Inlining constant with var siblings (const byte) gotoxy::y#6
Constant inlined gotoxy::x#3 = (byte) 0
Constant inlined gotoxy::y#6 = (byte) 1
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Added new block during phi lifting gotoxy::@6(between gotoxy::@1 and gotoxy::@2)
Added new block during phi lifting cputc::@11(between cputc::@3 and cputc::@return)
Added new block during phi lifting cputc::@12(between cputc::@4 and cputc::@return)
Fixing phi predecessor for conio_cursor_x#52 to new block ( cputc::@4 -> cputc::@12 ) during phi lifting.
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @25
Adding NOP phi() at start of @26
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@3
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of MakeNiceScreen
Adding NOP phi() at start of MakeNiceScreen::@7
Adding NOP phi() at start of MakeNiceScreen::@8
Adding NOP phi() at start of MakeNiceScreen::@9
Adding NOP phi() at start of MakeNiceScreen::@10
Adding NOP phi() at start of MakeNiceScreen::@11
Adding NOP phi() at start of MakeNiceScreen::@14
Adding NOP phi() at start of MakeNiceScreen::@19
Adding NOP phi() at start of MakeNiceScreen::@20
Adding NOP phi() at start of MakeNiceScreen::@21
Adding NOP phi() at start of cputsxy::@2
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of gotoxy::@4
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of MakeTeeLine::@3
Adding NOP phi() at start of cputcxy::@2
Adding NOP phi() at start of cvlinexy::@1
Adding NOP phi() at start of cvlinexy::@2
Adding NOP phi() at start of cursor
Adding NOP phi() at start of textcolor
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to screensize:8 MakeNiceScreen:10 kbhit:13 clrscr:18 
Calls in [MakeNiceScreen] to textcolor:43 bordercolor:45 bgcolor:47 clrscr:49 cursor:51 cputcxy:53 chline:56 cputc:61 cvlinexy:63 cputc:68 chline:71 cputc:76 cvlinexy:79 MakeTeeLine:81 MakeTeeLine:83 strlen:89 cputsxy:98 
Calls in [cputsxy] to gotoxy:107 cputs:109 
Calls in [cputs] to cputc:128 
Calls in [cputc] to gotoxy:145 gotoxy:161 
Calls in [MakeTeeLine] to cputcxy:197 chline:200 cputc:205 
Calls in [chline] to cputc:216 
Calls in [cputcxy] to gotoxy:222 cputc:229 
Calls in [cvlinexy] to gotoxy:235 cvline:237 
Calls in [cvline] to cputc:250 gotoxy:256 

Created 34 initial phi equivalence classes
Coalesced [32] clrscr::l#7 ← clrscr::l#1
Coalesced [33] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [34] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [38] clrscr::c#4 ← clrscr::c#1
Coalesced [55] chline::length#7 ← chline::length#1
Coalesced [57] conio_cursor_y#121 ← conio_cursor_y#52
Coalesced [58] conio_cursor_text#121 ← conio_cursor_text#51
Coalesced [59] conio_cursor_color#121 ← conio_cursor_color#51
Coalesced [60] conio_cursor_x#121 ← conio_cursor_x#52
Coalesced [64] conio_cursor_y#122 ← conio_cursor_y#3
Coalesced [65] conio_cursor_text#122 ← conio_cursor_text#3
Coalesced [66] conio_cursor_color#122 ← conio_cursor_color#3
Coalesced [67] conio_cursor_x#122 ← conio_cursor_x#3
Coalesced [70] chline::length#8 ← chline::length#2
Coalesced (already) [72] conio_cursor_y#123 ← conio_cursor_y#52
Coalesced (already) [73] conio_cursor_text#123 ← conio_cursor_text#51
Coalesced (already) [74] conio_cursor_color#123 ← conio_cursor_color#51
Coalesced (already) [75] conio_cursor_x#123 ← conio_cursor_x#52
Coalesced [78] cvlinexy::x#3 ← cvlinexy::x#1
Coalesced [101] MakeNiceScreen::I#7 ← MakeNiceScreen::I#2
Coalesced [102] MakeNiceScreen::T#7 ← MakeNiceScreen::T#2
Coalesced [105] gotoxy::x#11 ← gotoxy::x#4
Coalesced [106] gotoxy::y#13 ← gotoxy::y#4
Coalesced [112] cputs::s#6 ← cputs::s#1
Coalesced [113] conio_cursor_x#132 ← conio_cursor_x#3
Coalesced [114] conio_cursor_y#133 ← conio_cursor_y#3
Coalesced [115] conio_cursor_text#133 ← conio_cursor_text#3
Coalesced [116] conio_cursor_color#133 ← conio_cursor_color#3
Coalesced [123] cputc::c#11 ← cputc::c#1
Coalesced (already) [124] conio_cursor_y#127 ← conio_cursor_y#13
Coalesced (already) [125] conio_cursor_text#127 ← conio_cursor_text#13
Coalesced (already) [126] conio_cursor_color#127 ← conio_cursor_color#13
Coalesced (already) [127] conio_cursor_x#127 ← conio_cursor_x#14
Coalesced [129] cputs::s#7 ← cputs::s#0
Coalesced (already) [130] conio_cursor_x#133 ← conio_cursor_x#52
Coalesced (already) [131] conio_cursor_y#134 ← conio_cursor_y#52
Coalesced (already) [132] conio_cursor_text#134 ← conio_cursor_text#51
Coalesced (already) [133] conio_cursor_color#134 ← conio_cursor_color#51
Coalesced (already) [146] conio_cursor_x#129 ← conio_cursor_x#3
Coalesced (already) [147] conio_cursor_y#129 ← conio_cursor_y#3
Coalesced (already) [148] conio_cursor_text#129 ← conio_cursor_text#3
Coalesced (already) [149] conio_cursor_color#129 ← conio_cursor_color#3
Coalesced [152] conio_cursor_y#131 ← conio_cursor_y#6
Coalesced [153] conio_cursor_text#131 ← conio_cursor_text#6
Coalesced [154] conio_cursor_color#131 ← conio_cursor_color#6
Coalesced [155] conio_cursor_x#130 ← conio_cursor_x#6
Coalesced (already) [156] conio_cursor_y#130 ← conio_cursor_y#48
Coalesced (already) [157] conio_cursor_text#130 ← conio_cursor_text#6
Coalesced (already) [158] conio_cursor_color#130 ← conio_cursor_color#6
Coalesced [160] gotoxy::y#11 ← gotoxy::y#1
Coalesced (already) [162] conio_cursor_x#131 ← conio_cursor_x#3
Coalesced (already) [163] conio_cursor_y#132 ← conio_cursor_y#3
Coalesced (already) [164] conio_cursor_text#132 ← conio_cursor_text#3
Coalesced (already) [165] conio_cursor_color#132 ← conio_cursor_color#3
Not coalescing [173] conio_cursor_x#3 ← gotoxy::x#10
Not coalescing [174] conio_cursor_y#3 ← gotoxy::y#8
Coalesced [183] gotoxy::y#15 ← gotoxy::y#10
Coalesced [184] gotoxy::x#14 ← gotoxy::x#7
Coalesced [185] strlen::str#5 ← strlen::str#1
Coalesced [192] strlen::str#6 ← strlen::str#0
Coalesced [193] strlen::len#5 ← strlen::len#1
Coalesced [196] cputcxy::y#3 ← cputcxy::y#0
Coalesced [199] chline::length#9 ← chline::length#0
Coalesced (already) [201] conio_cursor_y#124 ← conio_cursor_y#52
Coalesced (already) [202] conio_cursor_text#124 ← conio_cursor_text#51
Coalesced (already) [203] conio_cursor_color#124 ← conio_cursor_color#51
Coalesced (already) [204] conio_cursor_x#124 ← conio_cursor_x#52
Coalesced (already) [212] conio_cursor_y#125 ← conio_cursor_y#52
Coalesced (already) [213] conio_cursor_text#125 ← conio_cursor_text#51
Coalesced (already) [214] conio_cursor_color#125 ← conio_cursor_color#51
Coalesced (already) [215] conio_cursor_x#125 ← conio_cursor_x#52
Coalesced [218] chline::i#5 ← chline::i#1
Coalesced [221] gotoxy::y#12 ← gotoxy::y#3
Coalesced [224] cputc::c#10 ← cputc::c#0
Coalesced (already) [225] conio_cursor_y#126 ← conio_cursor_y#3
Coalesced (already) [226] conio_cursor_text#126 ← conio_cursor_text#3
Coalesced (already) [227] conio_cursor_color#126 ← conio_cursor_color#3
Coalesced (already) [228] conio_cursor_x#126 ← conio_cursor_x#3
Coalesced [234] gotoxy::x#13 ← gotoxy::x#6
Coalesced [242] cvline::y#6 ← cvline::y#0
Coalesced (already) [246] conio_cursor_y#128 ← conio_cursor_y#3
Coalesced (already) [247] conio_cursor_text#128 ← conio_cursor_text#3
Coalesced (already) [248] conio_cursor_color#128 ← conio_cursor_color#3
Coalesced (already) [249] conio_cursor_x#128 ← conio_cursor_x#3
Coalesced [254] gotoxy::x#12 ← gotoxy::x#5
Coalesced [255] gotoxy::y#14 ← gotoxy::y#5
Coalesced [258] cvline::i#6 ← cvline::i#1
Coalesced [259] cvline::y#7 ← cvline::y#1
Coalesced down to 24 phi equivalence classes
Culled Empty Block (label) @26
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@10
Culled Empty Block (label) clrscr::@3
Culled Empty Block (label) clrscr::@2
Culled Empty Block (label) MakeNiceScreen::@21
Culled Empty Block (label) cputsxy::@2
Culled Empty Block (label) cputs::@7
Culled Empty Block (label) cputc::@10
Culled Empty Block (label) cputc::@12
Culled Empty Block (label) cputc::@11
Culled Empty Block (label) cputc::@9
Culled Empty Block (label) gotoxy::@3
Culled Empty Block (label) gotoxy::@4
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) MakeTeeLine::@3
Culled Empty Block (label) cputcxy::@2
Culled Empty Block (label) cvlinexy::@2
Renumbering block @22 to @1
Renumbering block @25 to @2
Renumbering block clrscr::@4 to clrscr::@2
Renumbering block clrscr::@5 to clrscr::@3
Renumbering block clrscr::@6 to clrscr::@4
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block gotoxy::@6 to gotoxy::@4
Renumbering block cputc::@3 to cputc::@2
Renumbering block cputc::@4 to cputc::@3
Renumbering block cputc::@5 to cputc::@4
Renumbering block chline::@7 to chline::@3
Renumbering block cvline::@7 to cvline::@3
Renumbering block cvline::@8 to cvline::@4
Renumbering block main::@3 to main::@2
Renumbering block main::@7 to main::@3
Renumbering block main::@9 to main::@4
Renumbering block MakeNiceScreen::@7 to MakeNiceScreen::@3
Renumbering block MakeNiceScreen::@8 to MakeNiceScreen::@4
Renumbering block MakeNiceScreen::@9 to MakeNiceScreen::@5
Renumbering block MakeNiceScreen::@10 to MakeNiceScreen::@6
Renumbering block MakeNiceScreen::@11 to MakeNiceScreen::@7
Renumbering block MakeNiceScreen::@12 to MakeNiceScreen::@8
Renumbering block MakeNiceScreen::@13 to MakeNiceScreen::@9
Renumbering block MakeNiceScreen::@14 to MakeNiceScreen::@10
Renumbering block MakeNiceScreen::@15 to MakeNiceScreen::@11
Renumbering block MakeNiceScreen::@16 to MakeNiceScreen::@12
Renumbering block MakeNiceScreen::@17 to MakeNiceScreen::@13
Renumbering block MakeNiceScreen::@18 to MakeNiceScreen::@14
Renumbering block MakeNiceScreen::@19 to MakeNiceScreen::@15
Renumbering block MakeNiceScreen::@20 to MakeNiceScreen::@16
Renumbering block MakeNiceScreen::@22 to MakeNiceScreen::@17
Renumbering block MakeNiceScreen::@23 to MakeNiceScreen::@18
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of MakeNiceScreen
Adding NOP phi() at start of MakeNiceScreen::@3
Adding NOP phi() at start of MakeNiceScreen::@4
Adding NOP phi() at start of MakeNiceScreen::@5
Adding NOP phi() at start of MakeNiceScreen::@6
Adding NOP phi() at start of MakeNiceScreen::@7
Adding NOP phi() at start of MakeNiceScreen::@9
Adding NOP phi() at start of MakeNiceScreen::@10
Adding NOP phi() at start of MakeNiceScreen::@11
Adding NOP phi() at start of MakeNiceScreen::@13
Adding NOP phi() at start of MakeNiceScreen::@15
Adding NOP phi() at start of MakeNiceScreen::@16
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of gotoxy::@4
Adding NOP phi() at start of strlen
Adding NOP phi() at start of MakeTeeLine::@2
Adding NOP phi() at start of chline::@2
Adding NOP phi() at start of cvlinexy::@1
Adding NOP phi() at start of cvline::@2
Adding NOP phi() at start of cursor
Adding NOP phi() at start of textcolor

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (volatile byte) XSize ← (byte) 0
  [2] (volatile byte) YSize ← (byte) 0
  to:@2
@2: scope:[]  from @1
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @2
  [5] phi()

(void()) main()
main: scope:[main]  from @2
  [6] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17
  [7] call screensize 
  to:main::@3
main::@3: scope:[main]  from main
  [8] phi()
  [9] call MakeNiceScreen 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  [10] phi()
  [11] call kbhit 
  [12] (byte) kbhit::return#2 ← (byte) kbhit::return#0
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] (byte~) main::$3 ← (byte) kbhit::return#2
  [14] if((byte) 0==(byte~) main::$3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@4
  [15] phi()
  [16] call clrscr 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [17] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from MakeNiceScreen::@5 main::@2
  [18] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@4
  [19] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@4/(byte*) clrscr::line_cols#1 )
  [19] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@4/(byte*) clrscr::line_text#1 )
  [19] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@4/(byte) clrscr::l#1 )
  [20] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [21] return 
  to:@return
clrscr::@2: scope:[clrscr]  from clrscr::@1 clrscr::@3
  [22] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@3/(byte) clrscr::c#1 )
  [23] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3
  to:clrscr::@4
clrscr::@4: scope:[clrscr]  from clrscr::@2
  [24] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH
  [25] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH
  [26] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@3: scope:[clrscr]  from clrscr::@2
  [27] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [28] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) COLOR_GRAY3
  [29] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@2

(byte()) kbhit()
kbhit: scope:[kbhit]  from main::@1
  [30] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0
  [31] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [32] return 
  to:@return

(void()) MakeNiceScreen()
MakeNiceScreen: scope:[MakeNiceScreen]  from main::@3
  [33] phi()
  [34] call textcolor 
  to:MakeNiceScreen::@3
MakeNiceScreen::@3: scope:[MakeNiceScreen]  from MakeNiceScreen
  [35] phi()
  [36] call bordercolor 
  to:MakeNiceScreen::@4
MakeNiceScreen::@4: scope:[MakeNiceScreen]  from MakeNiceScreen::@3
  [37] phi()
  [38] call bgcolor 
  to:MakeNiceScreen::@5
MakeNiceScreen::@5: scope:[MakeNiceScreen]  from MakeNiceScreen::@4
  [39] phi()
  [40] call clrscr 
  to:MakeNiceScreen::@6
MakeNiceScreen::@6: scope:[MakeNiceScreen]  from MakeNiceScreen::@5
  [41] phi()
  [42] call cursor 
  to:MakeNiceScreen::@7
MakeNiceScreen::@7: scope:[MakeNiceScreen]  from MakeNiceScreen::@6
  [43] phi()
  [44] call cputcxy 
  to:MakeNiceScreen::@8
MakeNiceScreen::@8: scope:[MakeNiceScreen]  from MakeNiceScreen::@7
  [45] (byte) chline::length#1 ← (volatile byte) XSize - (byte) 2
  [46] call chline 
  to:MakeNiceScreen::@9
MakeNiceScreen::@9: scope:[MakeNiceScreen]  from MakeNiceScreen::@8
  [47] phi()
  [48] call cputc 
  to:MakeNiceScreen::@10
MakeNiceScreen::@10: scope:[MakeNiceScreen]  from MakeNiceScreen::@9
  [49] phi()
  [50] call cvlinexy 
  to:MakeNiceScreen::@11
MakeNiceScreen::@11: scope:[MakeNiceScreen]  from MakeNiceScreen::@10
  [51] phi()
  [52] call cputc 
  to:MakeNiceScreen::@12
MakeNiceScreen::@12: scope:[MakeNiceScreen]  from MakeNiceScreen::@11
  [53] (byte) chline::length#2 ← (volatile byte) XSize - (byte) 2
  [54] call chline 
  to:MakeNiceScreen::@13
MakeNiceScreen::@13: scope:[MakeNiceScreen]  from MakeNiceScreen::@12
  [55] phi()
  [56] call cputc 
  to:MakeNiceScreen::@14
MakeNiceScreen::@14: scope:[MakeNiceScreen]  from MakeNiceScreen::@13
  [57] (byte) cvlinexy::x#1 ← (volatile byte) XSize - (byte) 1
  [58] call cvlinexy 
  to:MakeNiceScreen::@15
MakeNiceScreen::@15: scope:[MakeNiceScreen]  from MakeNiceScreen::@14
  [59] phi()
  [60] call MakeTeeLine 
  to:MakeNiceScreen::@16
MakeNiceScreen::@16: scope:[MakeNiceScreen]  from MakeNiceScreen::@15
  [61] phi()
  [62] call MakeTeeLine 
  to:MakeNiceScreen::@1
MakeNiceScreen::@1: scope:[MakeNiceScreen]  from MakeNiceScreen::@16 MakeNiceScreen::@18
  [63] (to_nomodify struct $0*) MakeNiceScreen::T#3 ← phi( MakeNiceScreen::@16/(const struct $0*) MakeNiceScreen::Text MakeNiceScreen::@18/(to_nomodify struct $0*) MakeNiceScreen::T#2 )
  [63] (byte) MakeNiceScreen::I#3 ← phi( MakeNiceScreen::@16/(byte) 0 MakeNiceScreen::@18/(byte) MakeNiceScreen::I#2 )
  [64] if((byte) MakeNiceScreen::I#3<(byte) $c*(byte) $29/(byte) $29) goto MakeNiceScreen::@2
  to:MakeNiceScreen::@return
MakeNiceScreen::@return: scope:[MakeNiceScreen]  from MakeNiceScreen::@1
  [65] return 
  to:@return
MakeNiceScreen::@2: scope:[MakeNiceScreen]  from MakeNiceScreen::@1
  [66] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1
  [67] call strlen 
  [68] (word) strlen::return#2 ← (word) strlen::len#2
  to:MakeNiceScreen::@17
MakeNiceScreen::@17: scope:[MakeNiceScreen]  from MakeNiceScreen::@2
  [69] (word~) MakeNiceScreen::$21 ← (word) strlen::return#2
  [70] (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21
  [71] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22
  [72] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1
  [73] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1
  [74] (byte) cputsxy::x#0 ← (byte) MakeNiceScreen::X#1
  [75] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3)
  [76] call cputsxy 
  to:MakeNiceScreen::@18
MakeNiceScreen::@18: scope:[MakeNiceScreen]  from MakeNiceScreen::@17
  [77] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29
  [78] (byte) MakeNiceScreen::I#2 ← ++ (byte) MakeNiceScreen::I#3
  to:MakeNiceScreen::@1

(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
cputsxy: scope:[cputsxy]  from MakeNiceScreen::@17
  [79] (byte) gotoxy::x#4 ← (byte) cputsxy::x#0
  [80] (byte) gotoxy::y#4 ← (byte) cputsxy::y#0
  [81] call gotoxy 
  to:cputsxy::@1
cputsxy::@1: scope:[cputsxy]  from cputsxy
  [82] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0
  [83] call cputs 
  to:cputsxy::@return
cputsxy::@return: scope:[cputsxy]  from cputsxy::@1
  [84] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from cputsxy::@1
  [85] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [86] (byte*) conio_cursor_color#13 ← phi( cputs/(byte*) conio_cursor_color#3 cputs::@2/(byte*) conio_cursor_color#51 )
  [86] (byte*) conio_cursor_text#13 ← phi( cputs/(byte*) conio_cursor_text#3 cputs::@2/(byte*) conio_cursor_text#51 )
  [86] (byte) conio_cursor_y#13 ← phi( cputs/(byte) conio_cursor_y#3 cputs::@2/(byte) conio_cursor_y#52 )
  [86] (byte) conio_cursor_x#14 ← phi( cputs/(byte) conio_cursor_x#3 cputs::@2/(byte) conio_cursor_x#52 )
  [86] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#1 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [87] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [88] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [89] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [90] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [91] (byte) cputc::c#1 ← (byte) cputs::c#1
  [92] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from MakeNiceScreen::@11 MakeNiceScreen::@13 MakeNiceScreen::@9 MakeTeeLine::@2 chline::@2 cputcxy::@1 cputs::@2 cvline::@2
  [93] (byte) conio_cursor_x#50 ← phi( MakeNiceScreen::@9/(byte) conio_cursor_x#52 MakeNiceScreen::@11/(byte) conio_cursor_x#3 MakeNiceScreen::@13/(byte) conio_cursor_x#52 MakeTeeLine::@2/(byte) conio_cursor_x#52 chline::@2/(byte) conio_cursor_x#52 cputcxy::@1/(byte) conio_cursor_x#3 cputs::@2/(byte) conio_cursor_x#14 cvline::@2/(byte) conio_cursor_x#3 )
  [93] (byte*) conio_cursor_color#49 ← phi( MakeNiceScreen::@9/(byte*) conio_cursor_color#51 MakeNiceScreen::@11/(byte*) conio_cursor_color#3 MakeNiceScreen::@13/(byte*) conio_cursor_color#51 MakeTeeLine::@2/(byte*) conio_cursor_color#51 chline::@2/(byte*) conio_cursor_color#51 cputcxy::@1/(byte*) conio_cursor_color#3 cputs::@2/(byte*) conio_cursor_color#13 cvline::@2/(byte*) conio_cursor_color#3 )
  [93] (byte*) conio_cursor_text#49 ← phi( MakeNiceScreen::@9/(byte*) conio_cursor_text#51 MakeNiceScreen::@11/(byte*) conio_cursor_text#3 MakeNiceScreen::@13/(byte*) conio_cursor_text#51 MakeTeeLine::@2/(byte*) conio_cursor_text#51 chline::@2/(byte*) conio_cursor_text#51 cputcxy::@1/(byte*) conio_cursor_text#3 cputs::@2/(byte*) conio_cursor_text#13 cvline::@2/(byte*) conio_cursor_text#3 )
  [93] (byte) conio_cursor_y#48 ← phi( MakeNiceScreen::@9/(byte) conio_cursor_y#52 MakeNiceScreen::@11/(byte) conio_cursor_y#3 MakeNiceScreen::@13/(byte) conio_cursor_y#52 MakeTeeLine::@2/(byte) conio_cursor_y#52 chline::@2/(byte) conio_cursor_y#52 cputcxy::@1/(byte) conio_cursor_y#3 cputs::@2/(byte) conio_cursor_y#13 cvline::@2/(byte) conio_cursor_y#3 )
  [93] (byte) cputc::c#8 ← phi( MakeNiceScreen::@9/(const nomodify byte) CH_URCORNER MakeNiceScreen::@11/(const nomodify byte) CH_LLCORNER MakeNiceScreen::@13/(const nomodify byte) CH_LRCORNER MakeTeeLine::@2/(const nomodify byte) CH_RTEE chline::@2/(const nomodify byte) CH_HLINE cputcxy::@1/(byte) cputc::c#0 cputs::@2/(byte) cputc::c#1 cvline::@2/(const nomodify byte) CH_VLINE )
  [94] if((byte) cputc::c#8==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [95] *((byte*) conio_cursor_text#49) ← (byte) cputc::c#8
  [96] (byte*) conio_cursor_text#6 ← ++ (byte*) conio_cursor_text#49
  [97] *((byte*) conio_cursor_color#49) ← (const nomodify byte) COLOR_GRAY3
  [98] (byte*) conio_cursor_color#6 ← ++ (byte*) conio_cursor_color#49
  [99] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#50
  [100] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [101] (byte) conio_cursor_y#6 ← ++ (byte) conio_cursor_y#48
  [102] if((byte) conio_cursor_y#6!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@3
  [103] phi()
  [104] call gotoxy 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3 cputc::@4
  [105] (byte*) conio_cursor_color#51 ← phi( cputc::@4/(byte*) conio_cursor_color#3 cputc::@2/(byte*) conio_cursor_color#6 cputc::@3/(byte*) conio_cursor_color#6 cputc::@1/(byte*) conio_cursor_color#3 )
  [105] (byte*) conio_cursor_text#51 ← phi( cputc::@4/(byte*) conio_cursor_text#3 cputc::@2/(byte*) conio_cursor_text#6 cputc::@3/(byte*) conio_cursor_text#6 cputc::@1/(byte*) conio_cursor_text#3 )
  [105] (byte) conio_cursor_y#52 ← phi( cputc::@4/(byte) conio_cursor_y#3 cputc::@2/(byte) conio_cursor_y#48 cputc::@3/(byte) conio_cursor_y#6 cputc::@1/(byte) conio_cursor_y#3 )
  [105] (byte) conio_cursor_x#52 ← phi( cputc::@4/(byte) conio_cursor_x#3 cputc::@2/(byte) conio_cursor_x#6 cputc::@3/(byte) 0 cputc::@1/(byte) conio_cursor_x#3 )
  [106] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [107] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#48 + (byte) 1
  [108] call gotoxy 
  to:cputc::@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cputc::@1 cputc::@4 cputcxy cputsxy cvline::@3 cvlinexy
  [109] (byte) gotoxy::y#10 ← phi( cputc::@1/(byte) gotoxy::y#1 cputc::@4/(byte) 0 cputcxy/(byte) gotoxy::y#3 cputsxy/(byte) gotoxy::y#4 cvline::@3/(byte) gotoxy::y#5 cvlinexy/(byte) 1 )
  [109] (byte) gotoxy::x#7 ← phi( cputc::@1/(byte) 0 cputc::@4/(byte) 0 cputcxy/(byte) 0 cputsxy/(byte) gotoxy::x#4 cvline::@3/(byte) gotoxy::x#5 cvlinexy/(byte) gotoxy::x#6 )
  [110] if((byte) gotoxy::x#7<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [111] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [112] (byte) gotoxy::x#10 ← phi( gotoxy::@3/(byte) gotoxy::x#7 gotoxy/(byte) 0 )
  [113] if((byte) gotoxy::y#10<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@4
  to:gotoxy::@2
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  [114] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  [115] (byte) gotoxy::y#8 ← phi( gotoxy::@4/(byte) gotoxy::y#10 gotoxy::@1/(byte) 0 )
  [116] (byte) conio_cursor_x#3 ← (byte) gotoxy::x#10
  [117] (byte) conio_cursor_y#3 ← (byte) gotoxy::y#8
  [118] (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8
  [119] (word~) gotoxy::$9 ← (word~) gotoxy::$4 << (byte) 2
  [120] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$4
  [121] (word~) gotoxy::$5 ← (word~) gotoxy::$10 << (byte) 3
  [122] (word) gotoxy::offset#0 ← (word~) gotoxy::$5 + (byte) gotoxy::x#10
  [123] (byte*) conio_cursor_text#3 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  [124] (byte*) conio_cursor_color#3 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [125] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from MakeNiceScreen::@2
  [126] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [127] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [127] (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [128] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [129] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [130] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [131] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) MakeTeeLine((byte) MakeTeeLine::Y)
MakeTeeLine: scope:[MakeTeeLine]  from MakeNiceScreen::@15 MakeNiceScreen::@16
  [132] (byte) MakeTeeLine::Y#2 ← phi( MakeNiceScreen::@15/(byte) 7 MakeNiceScreen::@16/(byte) $16 )
  [133] (byte) cputcxy::y#0 ← (byte) MakeTeeLine::Y#2
  [134] call cputcxy 
  to:MakeTeeLine::@1
MakeTeeLine::@1: scope:[MakeTeeLine]  from MakeTeeLine
  [135] (byte) chline::length#0 ← (volatile byte) XSize - (byte) 2
  [136] call chline 
  to:MakeTeeLine::@2
MakeTeeLine::@2: scope:[MakeTeeLine]  from MakeTeeLine::@1
  [137] phi()
  [138] call cputc 
  to:MakeTeeLine::@return
MakeTeeLine::@return: scope:[MakeTeeLine]  from MakeTeeLine::@2
  [139] return 
  to:@return

(void()) chline((byte) chline::length)
chline: scope:[chline]  from MakeNiceScreen::@12 MakeNiceScreen::@8 MakeTeeLine::@1
  [140] (byte) chline::length#4 ← phi( MakeNiceScreen::@8/(byte) chline::length#1 MakeNiceScreen::@12/(byte) chline::length#2 MakeTeeLine::@1/(byte) chline::length#0 )
  to:chline::@1
chline::@1: scope:[chline]  from chline chline::@3
  [141] (byte) chline::i#2 ← phi( chline/(byte) 0 chline::@3/(byte) chline::i#1 )
  [142] if((byte) chline::i#2<(byte) chline::length#4) goto chline::@2
  to:chline::@return
chline::@return: scope:[chline]  from chline::@1
  [143] return 
  to:@return
chline::@2: scope:[chline]  from chline::@1
  [144] phi()
  [145] call cputc 
  to:chline::@3
chline::@3: scope:[chline]  from chline::@2
  [146] (byte) chline::i#1 ← ++ (byte) chline::i#2
  to:chline::@1

(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
cputcxy: scope:[cputcxy]  from MakeNiceScreen::@7 MakeTeeLine
  [147] (byte) cputcxy::c#2 ← phi( MakeNiceScreen::@7/(const nomodify byte) CH_ULCORNER MakeTeeLine/(const nomodify byte) CH_LTEE )
  [147] (byte) cputcxy::y#2 ← phi( MakeNiceScreen::@7/(byte) 0 MakeTeeLine/(byte) cputcxy::y#0 )
  [148] (byte) gotoxy::y#3 ← (byte) cputcxy::y#2
  [149] call gotoxy 
  to:cputcxy::@1
cputcxy::@1: scope:[cputcxy]  from cputcxy
  [150] (byte) cputc::c#0 ← (byte) cputcxy::c#2
  [151] call cputc 
  to:cputcxy::@return
cputcxy::@return: scope:[cputcxy]  from cputcxy::@1
  [152] return 
  to:@return

(void()) cvlinexy((byte) cvlinexy::x , (byte) cvlinexy::y , (byte) cvlinexy::length)
cvlinexy: scope:[cvlinexy]  from MakeNiceScreen::@10 MakeNiceScreen::@14
  [153] (byte) cvlinexy::x#2 ← phi( MakeNiceScreen::@10/(byte) 0 MakeNiceScreen::@14/(byte) cvlinexy::x#1 )
  [154] (byte) gotoxy::x#6 ← (byte) cvlinexy::x#2
  [155] call gotoxy 
  to:cvlinexy::@1
cvlinexy::@1: scope:[cvlinexy]  from cvlinexy
  [156] phi()
  [157] call cvline 
  to:cvlinexy::@return
cvlinexy::@return: scope:[cvlinexy]  from cvlinexy::@1
  [158] return 
  to:@return

(void()) cvline((byte) cvline::length)
cvline: scope:[cvline]  from cvlinexy::@1
  [159] (byte) cvline::x#0 ← (byte) conio_cursor_x#3
  [160] (byte) cvline::y#0 ← (byte) conio_cursor_y#3
  to:cvline::@1
cvline::@1: scope:[cvline]  from cvline cvline::@4
  [161] (byte) cvline::y#2 ← phi( cvline/(byte) cvline::y#0 cvline::@4/(byte) cvline::y#1 )
  [161] (byte) cvline::i#2 ← phi( cvline/(byte) 0 cvline::@4/(byte) cvline::i#1 )
  [162] if((byte) cvline::i#2<(const byte) cvline::length#0) goto cvline::@2
  to:cvline::@return
cvline::@return: scope:[cvline]  from cvline::@1
  [163] return 
  to:@return
cvline::@2: scope:[cvline]  from cvline::@1
  [164] phi()
  [165] call cputc 
  to:cvline::@3
cvline::@3: scope:[cvline]  from cvline::@2
  [166] (byte) cvline::y#1 ← ++ (byte) cvline::y#2
  [167] (byte) gotoxy::x#5 ← (byte) cvline::x#0
  [168] (byte) gotoxy::y#5 ← (byte) cvline::y#1
  [169] call gotoxy 
  to:cvline::@4
cvline::@4: scope:[cvline]  from cvline::@3
  [170] (byte) cvline::i#1 ← ++ (byte) cvline::i#2
  to:cvline::@1

(byte()) cursor((byte) cursor::onoff)
cursor: scope:[cursor]  from MakeNiceScreen::@6
  [171] phi()
  to:cursor::@return
cursor::@return: scope:[cursor]  from cursor
  [172] return 
  to:@return

(byte()) bgcolor((byte) bgcolor::color)
bgcolor: scope:[bgcolor]  from MakeNiceScreen::@4
  [173] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK
  to:bgcolor::@return
bgcolor::@return: scope:[bgcolor]  from bgcolor
  [174] return 
  to:@return

(byte()) bordercolor((byte) bordercolor::color)
bordercolor: scope:[bordercolor]  from MakeNiceScreen::@3
  [175] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK
  to:bordercolor::@return
bordercolor::@return: scope:[bordercolor]  from bordercolor
  [176] return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from MakeNiceScreen
  [177] phi()
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [178] return 
  to:@return

(void()) screensize((byte*) screensize::x , (byte*) screensize::y)
screensize: scope:[screensize]  from main
  [179] *((const byte*) screensize::x#0) ← (const nomodify byte) CONIO_WIDTH
  [180] *((const byte*) screensize::y#0) ← (const nomodify byte) CONIO_HEIGHT
  to:screensize::@return
screensize::@return: scope:[screensize]  from screensize
  [181] return 
  to:@return

null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: cvline::@1 tails: cvline::@4 blocks: cvline::@4 cvline::@3 cvline::@2 cvline::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: cvline::@1 tails: cvline::@4 blocks: cvline::@4 cvline::@3 cvline::@2 cvline::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: cvline::@1 tails: cvline::@4 blocks: cvline::@4 cvline::@3 cvline::@2 cvline::@1  in scope cputc
null depth in calling loop Loop head: cvline::@1 tails: cvline::@4 blocks: cvline::@4 cvline::@3 cvline::@2 cvline::@1  in scope gotoxy

VARIABLE REGISTER WEIGHTS
(byte) $0::Y
(void()) MakeNiceScreen()
(word~) MakeNiceScreen::$21 1001.0
(byte~) MakeNiceScreen::$22 2002.0
(byte~) MakeNiceScreen::$23 2002.0
(byte) MakeNiceScreen::I
(byte) MakeNiceScreen::I#2 2002.0
(byte) MakeNiceScreen::I#3 214.5
(to_nomodify struct $0*) MakeNiceScreen::T
(to_nomodify struct $0*) MakeNiceScreen::T#2 1001.0
(to_nomodify struct $0*) MakeNiceScreen::T#3 154.0
(byte) MakeNiceScreen::X
(byte) MakeNiceScreen::X#1 1001.0
(void()) MakeTeeLine((byte) MakeTeeLine::Y)
(byte) MakeTeeLine::Y
(byte) MakeTeeLine::Y#2 1001.0
(volatile byte) XSize loadstore 39.101694915254235
(volatile byte) YSize loadstore 20.0
(byte()) bgcolor((byte) bgcolor::color)
(byte) bgcolor::color
(byte) bgcolor::old
(byte) bgcolor::return
(byte()) bordercolor((byte) bordercolor::color)
(byte) bordercolor::color
(byte) bordercolor::old
(byte) bordercolor::return
(void()) chline((byte) chline::length)
(byte) chline::i
(byte) chline::i#1 200002.0
(byte) chline::i#2 75000.75
(byte) chline::length
(byte) chline::length#0 2002.0
(byte) chline::length#1 202.0
(byte) chline::length#2 202.0
(byte) chline::length#4 16867.333333333332
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 200002.0
(byte) clrscr::c#2 125001.25
(byte) clrscr::l
(byte) clrscr::l#1 20002.0
(byte) clrscr::l#2 3333.6666666666665
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 10001.0
(byte*) clrscr::line_cols#5 15000.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 6667.333333333333
(byte*) clrscr::line_text#5 17143.285714285714
(byte*) conio_cursor_color
(byte*) conio_cursor_color#13 4020000.5999999996
(byte*) conio_cursor_color#3 5.218304813043478E7
(byte*) conio_cursor_color#49 4.2042262E7
(byte*) conio_cursor_color#51 1.7087550375E7
(byte*) conio_cursor_color#6 6.0000000599999994E7
(byte*) conio_cursor_text
(byte*) conio_cursor_text#13 4020000.5999999996
(byte*) conio_cursor_text#3 5.0008754458333336E7
(byte*) conio_cursor_text#49 7.007043666666667E7
(byte*) conio_cursor_text#51 1.7087550375E7
(byte*) conio_cursor_text#6 4.285714328571428E7
(byte) conio_cursor_x
(byte) conio_cursor_x#14 4020000.5999999996
(byte) conio_cursor_x#3 3.871677767741935E7
(byte) conio_cursor_x#50 1.83685515E7
(byte) conio_cursor_x#52 1.2920883666666668E7
(byte) conio_cursor_x#6 1.500000015E8
(byte) conio_cursor_y
(byte) conio_cursor_y#13 4020000.5999999996
(byte) conio_cursor_y#3 4.000733693333334E7
(byte) conio_cursor_y#48 3.8776413875E7
(byte) conio_cursor_y#52 1.7087550375E7
(byte) conio_cursor_y#6 1.500000015E8
(byte) conio_display_cursor
(byte) conio_textcolor
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 20002.0
(byte) cputc::c#1 2.0000002E7
(byte) cputc::c#8 1.05005002E8
(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
(byte) cputcxy::c
(byte) cputcxy::c#2 3333.6666666666665
(byte) cputcxy::x
(byte) cputcxy::y
(byte) cputcxy::y#0 2002.0
(byte) cputcxy::y#2 11002.0
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5000000.5
(to_nomodify byte*) cputs::s#1 55001.0
(to_nomodify byte*) cputs::s#2 1.5050002E7
(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
(to_nomodify byte*) cputsxy::s
(to_nomodify byte*) cputsxy::s#0 1833.6666666666665
(byte) cputsxy::x
(byte) cputsxy::x#0 5501.0
(byte) cputsxy::y
(byte) cputsxy::y#0 5501.0
(byte()) cursor((byte) cursor::onoff)
(byte) cursor::old
(byte) cursor::onoff
(byte) cursor::return
(void()) cvline((byte) cvline::length)
(byte) cvline::i
(byte) cvline::i#1 200002.0
(byte) cvline::i#2 37500.375
(byte) cvline::length
(byte) cvline::x
(byte) cvline::x#0 10000.181818181818
(byte) cvline::y
(byte) cvline::y#0 20002.0
(byte) cvline::y#1 60000.600000000006
(byte) cvline::y#2 52500.75
(void()) cvlinexy((byte) cvlinexy::x , (byte) cvlinexy::y , (byte) cvlinexy::length)
(byte) cvlinexy::length
(byte) cvlinexy::x
(byte) cvlinexy::x#1 202.0
(byte) cvlinexy::x#2 1102.0
(byte) cvlinexy::y
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word~) gotoxy::$10 2.000000002E9
(word~) gotoxy::$4 1.5000000015E9
(word~) gotoxy::$5 2.000000002E9
(word~) gotoxy::$9 2.000000002E9
(word) gotoxy::offset
(word) gotoxy::offset#0 1.5000000015E9
(byte) gotoxy::x
(byte) gotoxy::x#10 3.0000000029999995E8
(byte) gotoxy::x#4 10001.0
(byte) gotoxy::x#5 100001.0
(byte) gotoxy::x#6 2002.0
(byte) gotoxy::x#7 6.667036683333334E8
(byte) gotoxy::y
(byte) gotoxy::y#1 2.00000002E8
(byte) gotoxy::y#10 3.50020001E8
(byte) gotoxy::y#3 20002.0
(byte) gotoxy::y#4 20002.0
(byte) gotoxy::y#5 200002.0
(byte) gotoxy::y#8 6.666666673333334E8
(byte()) kbhit()
(byte) kbhit::return
(byte) kbhit::return#0 367.33333333333337
(byte) kbhit::return#2 202.0
(void()) main()
(byte~) main::$3 202.0
(void()) screensize((byte*) screensize::x , (byte*) screensize::y)
(byte*) screensize::x
(byte*) screensize::y
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 1000001.0
(word) strlen::len#2 500250.75
(word) strlen::return
(word) strlen::return#2 2002.0
(byte*) strlen::str
(byte*) strlen::str#0 2000002.0
(byte*) strlen::str#1 5501.0
(byte*) strlen::str#2 1003334.6666666667
(byte()) textcolor((byte) textcolor::color)
(byte) textcolor::color
(byte) textcolor::old
(byte) textcolor::return

Initial phi equivalence classes
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
[ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ]
[ cputs::s#2 cputs::s#1 cputs::s#0 ]
[ cputc::c#8 cputc::c#0 cputc::c#1 ]
[ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
[ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ]
[ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ]
[ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
[ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ]
[ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ MakeTeeLine::Y#2 ]
[ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
[ chline::i#2 chline::i#1 ]
[ cputcxy::y#2 cputcxy::y#0 ]
[ cputcxy::c#2 ]
[ cvlinexy::x#2 cvlinexy::x#1 ]
[ cvline::i#2 cvline::i#1 ]
[ cvline::y#2 cvline::y#0 cvline::y#1 ]
Added variable XSize to live range equivalence class [ XSize ]
Added variable YSize to live range equivalence class [ YSize ]
Added variable kbhit::return#2 to live range equivalence class [ kbhit::return#2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable kbhit::return#0 to live range equivalence class [ kbhit::return#0 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable MakeNiceScreen::$21 to live range equivalence class [ MakeNiceScreen::$21 ]
Added variable MakeNiceScreen::$22 to live range equivalence class [ MakeNiceScreen::$22 ]
Added variable MakeNiceScreen::$23 to live range equivalence class [ MakeNiceScreen::$23 ]
Added variable MakeNiceScreen::X#1 to live range equivalence class [ MakeNiceScreen::X#1 ]
Added variable cputsxy::s#0 to live range equivalence class [ cputsxy::s#0 ]
Added variable cputsxy::x#0 to live range equivalence class [ cputsxy::x#0 ]
Added variable cputsxy::y#0 to live range equivalence class [ cputsxy::y#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable gotoxy::$4 to live range equivalence class [ gotoxy::$4 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::$10 to live range equivalence class [ gotoxy::$10 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::offset#0 to live range equivalence class [ gotoxy::offset#0 ]
Added variable cvline::x#0 to live range equivalence class [ cvline::x#0 ]
Complete equivalence classes
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
[ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ]
[ cputs::s#2 cputs::s#1 cputs::s#0 ]
[ cputc::c#8 cputc::c#0 cputc::c#1 ]
[ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
[ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ]
[ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ]
[ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
[ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ]
[ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ MakeTeeLine::Y#2 ]
[ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
[ chline::i#2 chline::i#1 ]
[ cputcxy::y#2 cputcxy::y#0 ]
[ cputcxy::c#2 ]
[ cvlinexy::x#2 cvlinexy::x#1 ]
[ cvline::i#2 cvline::i#1 ]
[ cvline::y#2 cvline::y#0 cvline::y#1 ]
[ XSize ]
[ YSize ]
[ kbhit::return#2 ]
[ main::$3 ]
[ kbhit::return#0 ]
[ strlen::return#2 ]
[ MakeNiceScreen::$21 ]
[ MakeNiceScreen::$22 ]
[ MakeNiceScreen::$23 ]
[ MakeNiceScreen::X#1 ]
[ cputsxy::s#0 ]
[ cputsxy::x#0 ]
[ cputsxy::y#0 ]
[ cputs::c#1 ]
[ gotoxy::$4 ]
[ gotoxy::$9 ]
[ gotoxy::$10 ]
[ gotoxy::$5 ]
[ gotoxy::offset#0 ]
[ cvline::x#0 ]
Allocated zp[1]:2 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:3 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:7 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
Allocated zp[2]:9 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ]
Allocated zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 ]
Allocated zp[1]:13 [ cputc::c#8 cputc::c#0 cputc::c#1 ]
Allocated zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
Allocated zp[2]:15 [ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ]
Allocated zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ]
Allocated zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
Allocated zp[1]:20 [ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ]
Allocated zp[1]:21 [ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ]
Allocated zp[2]:22 [ strlen::str#2 strlen::str#1 strlen::str#0 ]
Allocated zp[2]:24 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:26 [ MakeTeeLine::Y#2 ]
Allocated zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
Allocated zp[1]:28 [ chline::i#2 chline::i#1 ]
Allocated zp[1]:29 [ cputcxy::y#2 cputcxy::y#0 ]
Allocated zp[1]:30 [ cputcxy::c#2 ]
Allocated zp[1]:31 [ cvlinexy::x#2 cvlinexy::x#1 ]
Allocated zp[1]:32 [ cvline::i#2 cvline::i#1 ]
Allocated zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ]
Allocated zp[1]:34 [ XSize ]
Allocated zp[1]:35 [ YSize ]
Allocated zp[1]:36 [ kbhit::return#2 ]
Allocated zp[1]:37 [ main::$3 ]
Allocated zp[1]:38 [ kbhit::return#0 ]
Allocated zp[2]:39 [ strlen::return#2 ]
Allocated zp[2]:41 [ MakeNiceScreen::$21 ]
Allocated zp[1]:43 [ MakeNiceScreen::$22 ]
Allocated zp[1]:44 [ MakeNiceScreen::$23 ]
Allocated zp[1]:45 [ MakeNiceScreen::X#1 ]
Allocated zp[2]:46 [ cputsxy::s#0 ]
Allocated zp[1]:48 [ cputsxy::x#0 ]
Allocated zp[1]:49 [ cputsxy::y#0 ]
Allocated zp[1]:50 [ cputs::c#1 ]
Allocated zp[2]:51 [ gotoxy::$4 ]
Allocated zp[2]:53 [ gotoxy::$9 ]
Allocated zp[2]:55 [ gotoxy::$10 ]
Allocated zp[2]:57 [ gotoxy::$5 ]
Allocated zp[2]:59 [ gotoxy::offset#0 ]
Allocated zp[1]:61 [ cvline::x#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Show a nice screen using conio.h
// From CC65 sample "Eine kleine Nachtmusik" by Ullrich von Bassewitz
// https://github.com/cc65/cc65/blob/master/samples/nachtm.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The horizontal line character
  .const CH_HLINE = $40
  // The vertical line character
  .const CH_VLINE = $5d
  // The upper left corner character
  .const CH_ULCORNER = $70
  // The upper right corner character
  .const CH_URCORNER = $6e
  // The lower left corner character
  .const CH_LLCORNER = $6d
  // The lower right corner character
  .const CH_LRCORNER = $7d
  // The left T character
  .const CH_LTEE = $6b
  // The right T character
  .const CH_RTEE = $73
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The background color register address
  .label CONIO_BGCOLOR = $d021
  // The border color register address
  .label CONIO_BORDERCOLOR = $d020
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CONIO_CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CONIO_CIA1_PORT_B = $dc01
  // The screen width
  .const CONIO_WIDTH = $28
  // The screen height
  .const CONIO_HEIGHT = $19
  .const COLOR_GRAY3 = $f
  .const COLOR_BLACK = 0
  .label VIC_MEMORY = $d018
  .label XSize = $22
  .label YSize = $23
  // The current cursor x-position
  .label conio_cursor_x = $13
  // The current cursor y-position
  .label conio_cursor_y = $e
  // The current cursor address
  .label conio_cursor_text = $f
  // The current cursor address
  .label conio_cursor_color = $11
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) XSize ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z XSize
  // [2] (volatile byte) YSize ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z YSize
  // [3] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [4] call main 
  jsr main
  // [5] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __3 = $25
    // [6] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    lda #$17
    sta VIC_MEMORY
    // [7] call screensize 
    jsr screensize
    // [8] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [9] call MakeNiceScreen 
    // [33] phi from main::@3 to MakeNiceScreen [phi:main::@3->MakeNiceScreen]
  MakeNiceScreen_from___b3:
    jsr MakeNiceScreen
    // [10] phi from main::@3 main::@4 to main::@1 [phi:main::@3/main::@4->main::@1]
  __b1_from___b3:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [11] call kbhit 
    jsr kbhit
    // [12] (byte) kbhit::return#2 ← (byte) kbhit::return#0 -- vbuz1=vbuz2 
    lda.z kbhit.return
    sta.z kbhit.return_1
    jmp __b4
    // main::@4
  __b4:
    // [13] (byte~) main::$3 ← (byte) kbhit::return#2 -- vbuz1=vbuz2 
    lda.z kbhit.return_1
    sta.z __3
    // [14] if((byte) 0==(byte~) main::$3) goto main::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __3
    beq __b1_from___b4
    // [15] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    jmp __b2
    // main::@2
  __b2:
    // [16] call clrscr 
    // [18] phi from main::@2 to clrscr [phi:main::@2->clrscr]
  clrscr_from___b2:
    jsr clrscr
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = 7
    .label line_text = 3
    .label line_cols = 5
    .label l = 2
    // [19] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [19] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [19] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [19] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [20] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #CONIO_HEIGHT
    bcc __b2_from___b1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [21] return 
    rts
    // [22] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b2_from___b1:
    // [22] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b2
    // clrscr::@2
  __b2:
    // [23] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #CONIO_WIDTH
    bcc __b3
    jmp __b4
    // clrscr::@4
  __b4:
    // [24] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [25] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [26] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [19] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
  __b1_from___b4:
    // [19] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [19] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [19] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // [27] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [28] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) COLOR_GRAY3 -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #COLOR_GRAY3
    ldy.z c
    sta (line_cols),y
    // [29] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [22] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
  __b2_from___b3:
    // [22] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    .label return = $26
    .label return_1 = $24
    // [30] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CONIO_CIA1_PORT_A
    // [31] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) -- vbuz1=_bnot__deref_pbuc1 
    lda CONIO_CIA1_PORT_B
    eor #$ff
    sta.z return
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [32] return 
    rts
}
  // MakeNiceScreen
MakeNiceScreen: {
    .label __21 = $29
    .label __22 = $2b
    .label __23 = $2c
    .label X = $2d
    .label T = 9
    .label I = 8
    // [34] call textcolor 
  /* Clear the screen hide the cursor, set colors */
    // [177] phi from MakeNiceScreen to textcolor [phi:MakeNiceScreen->textcolor]
  textcolor_from_MakeNiceScreen:
    jsr textcolor
    // [35] phi from MakeNiceScreen to MakeNiceScreen::@3 [phi:MakeNiceScreen->MakeNiceScreen::@3]
  __b3_from_MakeNiceScreen:
    jmp __b3
    // MakeNiceScreen::@3
  __b3:
    // [36] call bordercolor 
    jsr bordercolor
    // [37] phi from MakeNiceScreen::@3 to MakeNiceScreen::@4 [phi:MakeNiceScreen::@3->MakeNiceScreen::@4]
  __b4_from___b3:
    jmp __b4
    // MakeNiceScreen::@4
  __b4:
    // [38] call bgcolor 
    jsr bgcolor
    // [39] phi from MakeNiceScreen::@4 to MakeNiceScreen::@5 [phi:MakeNiceScreen::@4->MakeNiceScreen::@5]
  __b5_from___b4:
    jmp __b5
    // MakeNiceScreen::@5
  __b5:
    // [40] call clrscr 
    // [18] phi from MakeNiceScreen::@5 to clrscr [phi:MakeNiceScreen::@5->clrscr]
  clrscr_from___b5:
    jsr clrscr
    // [41] phi from MakeNiceScreen::@5 to MakeNiceScreen::@6 [phi:MakeNiceScreen::@5->MakeNiceScreen::@6]
  __b6_from___b5:
    jmp __b6
    // MakeNiceScreen::@6
  __b6:
    // [42] call cursor 
    // [171] phi from MakeNiceScreen::@6 to cursor [phi:MakeNiceScreen::@6->cursor]
  cursor_from___b6:
    jsr cursor
    // [43] phi from MakeNiceScreen::@6 to MakeNiceScreen::@7 [phi:MakeNiceScreen::@6->MakeNiceScreen::@7]
  __b7_from___b6:
    jmp __b7
    // MakeNiceScreen::@7
  __b7:
    // [44] call cputcxy 
  /* Top line */
    // [147] phi from MakeNiceScreen::@7 to cputcxy [phi:MakeNiceScreen::@7->cputcxy]
  cputcxy_from___b7:
    // [147] phi (byte) cputcxy::c#2 = (const nomodify byte) CH_ULCORNER [phi:MakeNiceScreen::@7->cputcxy#0] -- vbuz1=vbuc1 
    lda #CH_ULCORNER
    sta.z cputcxy.c
    // [147] phi (byte) cputcxy::y#2 = (byte) 0 [phi:MakeNiceScreen::@7->cputcxy#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cputcxy.y
    jsr cputcxy
    jmp __b8
    // MakeNiceScreen::@8
  __b8:
    // [45] (byte) chline::length#1 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [46] call chline 
    // [140] phi from MakeNiceScreen::@8 to chline [phi:MakeNiceScreen::@8->chline]
  chline_from___b8:
    // [140] phi (byte) chline::length#4 = (byte) chline::length#1 [phi:MakeNiceScreen::@8->chline#0] -- register_copy 
    jsr chline
    // [47] phi from MakeNiceScreen::@8 to MakeNiceScreen::@9 [phi:MakeNiceScreen::@8->MakeNiceScreen::@9]
  __b9_from___b8:
    jmp __b9
    // MakeNiceScreen::@9
  __b9:
    // [48] call cputc 
    // [93] phi from MakeNiceScreen::@9 to cputc [phi:MakeNiceScreen::@9->cputc]
  cputc_from___b9:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeNiceScreen::@9->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeNiceScreen::@9->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeNiceScreen::@9->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeNiceScreen::@9->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_URCORNER [phi:MakeNiceScreen::@9->cputc#4] -- vbuz1=vbuc1 
    lda #CH_URCORNER
    sta.z cputc.c
    jsr cputc
    // [49] phi from MakeNiceScreen::@9 to MakeNiceScreen::@10 [phi:MakeNiceScreen::@9->MakeNiceScreen::@10]
  __b10_from___b9:
    jmp __b10
    // MakeNiceScreen::@10
  __b10:
    // [50] call cvlinexy 
  /* Left line */
    // [153] phi from MakeNiceScreen::@10 to cvlinexy [phi:MakeNiceScreen::@10->cvlinexy]
  cvlinexy_from___b10:
    // [153] phi (byte) cvlinexy::x#2 = (byte) 0 [phi:MakeNiceScreen::@10->cvlinexy#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cvlinexy.x
    jsr cvlinexy
    // [51] phi from MakeNiceScreen::@10 to MakeNiceScreen::@11 [phi:MakeNiceScreen::@10->MakeNiceScreen::@11]
  __b11_from___b10:
    jmp __b11
    // MakeNiceScreen::@11
  __b11:
    // [52] call cputc 
  /* Bottom line */
    // [93] phi from MakeNiceScreen::@11 to cputc [phi:MakeNiceScreen::@11->cputc]
  cputc_from___b11:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:MakeNiceScreen::@11->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:MakeNiceScreen::@11->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:MakeNiceScreen::@11->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:MakeNiceScreen::@11->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_LLCORNER [phi:MakeNiceScreen::@11->cputc#4] -- vbuz1=vbuc1 
    lda #CH_LLCORNER
    sta.z cputc.c
    jsr cputc
    jmp __b12
    // MakeNiceScreen::@12
  __b12:
    // [53] (byte) chline::length#2 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [54] call chline 
    // [140] phi from MakeNiceScreen::@12 to chline [phi:MakeNiceScreen::@12->chline]
  chline_from___b12:
    // [140] phi (byte) chline::length#4 = (byte) chline::length#2 [phi:MakeNiceScreen::@12->chline#0] -- register_copy 
    jsr chline
    // [55] phi from MakeNiceScreen::@12 to MakeNiceScreen::@13 [phi:MakeNiceScreen::@12->MakeNiceScreen::@13]
  __b13_from___b12:
    jmp __b13
    // MakeNiceScreen::@13
  __b13:
    // [56] call cputc 
    // [93] phi from MakeNiceScreen::@13 to cputc [phi:MakeNiceScreen::@13->cputc]
  cputc_from___b13:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeNiceScreen::@13->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeNiceScreen::@13->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeNiceScreen::@13->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeNiceScreen::@13->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_LRCORNER [phi:MakeNiceScreen::@13->cputc#4] -- vbuz1=vbuc1 
    lda #CH_LRCORNER
    sta.z cputc.c
    jsr cputc
    jmp __b14
    // MakeNiceScreen::@14
  __b14:
    // [57] (byte) cvlinexy::x#1 ← (volatile byte) XSize - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z XSize
    dex
    stx.z cvlinexy.x
    // [58] call cvlinexy 
  /* Right line */
    // [153] phi from MakeNiceScreen::@14 to cvlinexy [phi:MakeNiceScreen::@14->cvlinexy]
  cvlinexy_from___b14:
    // [153] phi (byte) cvlinexy::x#2 = (byte) cvlinexy::x#1 [phi:MakeNiceScreen::@14->cvlinexy#0] -- register_copy 
    jsr cvlinexy
    // [59] phi from MakeNiceScreen::@14 to MakeNiceScreen::@15 [phi:MakeNiceScreen::@14->MakeNiceScreen::@15]
  __b15_from___b14:
    jmp __b15
    // MakeNiceScreen::@15
  __b15:
    // [60] call MakeTeeLine 
  /* Several divider lines */
    // [132] phi from MakeNiceScreen::@15 to MakeTeeLine [phi:MakeNiceScreen::@15->MakeTeeLine]
  MakeTeeLine_from___b15:
    // [132] phi (byte) MakeTeeLine::Y#2 = (byte) 7 [phi:MakeNiceScreen::@15->MakeTeeLine#0] -- vbuz1=vbuc1 
    lda #7
    sta.z MakeTeeLine.Y
    jsr MakeTeeLine
    // [61] phi from MakeNiceScreen::@15 to MakeNiceScreen::@16 [phi:MakeNiceScreen::@15->MakeNiceScreen::@16]
  __b16_from___b15:
    jmp __b16
    // MakeNiceScreen::@16
  __b16:
    // [62] call MakeTeeLine 
    // [132] phi from MakeNiceScreen::@16 to MakeTeeLine [phi:MakeNiceScreen::@16->MakeTeeLine]
  MakeTeeLine_from___b16:
    // [132] phi (byte) MakeTeeLine::Y#2 = (byte) $16 [phi:MakeNiceScreen::@16->MakeTeeLine#0] -- vbuz1=vbuc1 
    lda #$16
    sta.z MakeTeeLine.Y
    jsr MakeTeeLine
    // [63] phi from MakeNiceScreen::@16 to MakeNiceScreen::@1 [phi:MakeNiceScreen::@16->MakeNiceScreen::@1]
  __b1_from___b16:
    // [63] phi (to_nomodify struct $0*) MakeNiceScreen::T#3 = (const struct $0*) MakeNiceScreen::Text [phi:MakeNiceScreen::@16->MakeNiceScreen::@1#0] -- pssz1=pssc1 
    lda #<Text
    sta.z T
    lda #>Text
    sta.z T+1
    // [63] phi (byte) MakeNiceScreen::I#3 = (byte) 0 [phi:MakeNiceScreen::@16->MakeNiceScreen::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z I
    jmp __b1
  /* Write something into the frame */
    // MakeNiceScreen::@1
  __b1:
    // [64] if((byte) MakeNiceScreen::I#3<(byte) $c*(byte) $29/(byte) $29) goto MakeNiceScreen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z I
    cmp #$c*$29/$29
    bcc __b2
    jmp __breturn
    // MakeNiceScreen::@return
  __breturn:
    // [65] return 
    rts
    // MakeNiceScreen::@2
  __b2:
    // [66] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z T
    clc
    adc #1
    sta.z strlen.str
    lda.z T+1
    adc #0
    sta.z strlen.str+1
    // [67] call strlen 
    // [126] phi from MakeNiceScreen::@2 to strlen [phi:MakeNiceScreen::@2->strlen]
  strlen_from___b2:
    jsr strlen
    // [68] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b17
    // MakeNiceScreen::@17
  __b17:
    // [69] (word~) MakeNiceScreen::$21 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __21
    lda.z strlen.return+1
    sta.z __21+1
    // [70] (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21 -- vbuz1=_byte_vwuz2 
    lda.z __21
    sta.z __22
    // [71] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z XSize
    sec
    sbc.z __22
    sta.z __23
    // [72] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z __23
    lsr
    sta.z X
    // [73] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z T
    clc
    adc #1
    sta.z cputsxy.s
    lda.z T+1
    adc #0
    sta.z cputsxy.s+1
    // [74] (byte) cputsxy::x#0 ← (byte) MakeNiceScreen::X#1 -- vbuz1=vbuz2 
    lda.z X
    sta.z cputsxy.x
    // [75] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (T),y
    sta.z cputsxy.y
    // [76] call cputsxy 
    jsr cputsxy
    jmp __b18
    // MakeNiceScreen::@18
  __b18:
    // [77] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29 -- pssz1=pssz1_plus_vbuc1 
    lda #$29
    clc
    adc.z T
    sta.z T
    bcc !+
    inc.z T+1
  !:
    // [78] (byte) MakeNiceScreen::I#2 ← ++ (byte) MakeNiceScreen::I#3 -- vbuz1=_inc_vbuz1 
    inc.z I
    // [63] phi from MakeNiceScreen::@18 to MakeNiceScreen::@1 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1]
  __b1_from___b18:
    // [63] phi (to_nomodify struct $0*) MakeNiceScreen::T#3 = (to_nomodify struct $0*) MakeNiceScreen::T#2 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1#0] -- register_copy 
    // [63] phi (byte) MakeNiceScreen::I#3 = (byte) MakeNiceScreen::I#2 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1#1] -- register_copy 
    jmp __b1
    Text: .byte 2
    .text "Wolfgang Amadeus Mozart"
    .byte 0
    .fill $10, 0
    .byte 4
    .text @"\"Eine kleine Nachtmusik\""
    .byte 0
    .fill $f, 0
    .byte 5
    .text "(KV 525)"
    .byte 0
    .fill $1f, 0
    .byte 9
    .text "Ported to the SID in 1987 by"
    .byte 0
    .fill $b, 0
    .byte $b
    .text "Joachim von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $c
    .text "(joachim@von-bassewitz.de)"
    .byte 0
    .fill $d, 0
    .byte $d
    .text "and"
    .byte 0
    .fill $24, 0
    .byte $e
    .text "Ullrich von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $f
    .text "(ullrich@von-bassewitz.de)"
    .byte 0
    .fill $d, 0
    .byte $12
    .text "C Implementation by"
    .byte 0
    .fill $14, 0
    .byte $13
    .text "Ullrich von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $17
    .text "Press any key to quit..."
    .byte 0
    .fill $f, 0
}
  // cputsxy
// Move cursor and output a NUL-terminated string
// Same as "gotoxy (x, y); puts (s);"
// cputsxy(byte zp($30) x, byte zp($31) y, byte* zp($2e) s)
cputsxy: {
    .label x = $30
    .label y = $31
    .label s = $2e
    // [79] (byte) gotoxy::x#4 ← (byte) cputsxy::x#0 -- vbuz1=vbuz2 
    lda.z x
    sta.z gotoxy.x
    // [80] (byte) gotoxy::y#4 ← (byte) cputsxy::y#0 -- vbuz1=vbuz2 
    lda.z y
    sta.z gotoxy.y
    // [81] call gotoxy 
    // [109] phi from cputsxy to gotoxy [phi:cputsxy->gotoxy]
  gotoxy_from_cputsxy:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#4 [phi:cputsxy->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#4 [phi:cputsxy->gotoxy#1] -- register_copy 
    jsr gotoxy
    jmp __b1
    // cputsxy::@1
  __b1:
    // [82] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0 -- pbuz1=pbuz2 
    lda.z s
    sta.z cputs.s
    lda.z s+1
    sta.z cputs.s+1
    // [83] call cputs 
    // [85] phi from cputsxy::@1 to cputs [phi:cputsxy::@1->cputs]
  cputs_from___b1:
    jsr cputs
    jmp __breturn
    // cputsxy::@return
  __breturn:
    // [84] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($b) s)
cputs: {
    .label c = $32
    .label s = $b
    // [86] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [86] phi (byte*) conio_cursor_color#13 = (byte*) conio_cursor_color#3 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [86] phi (byte*) conio_cursor_text#13 = (byte*) conio_cursor_text#3 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    // [86] phi (byte) conio_cursor_y#13 = (byte) conio_cursor_y#3 [phi:cputs/cputs::@2->cputs::@1#2] -- register_copy 
    // [86] phi (byte) conio_cursor_x#14 = (byte) conio_cursor_x#3 [phi:cputs/cputs::@2->cputs::@1#3] -- register_copy 
    // [86] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#1 [phi:cputs/cputs::@2->cputs::@1#4] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [87] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [88] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [89] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [90] return 
    rts
    // cputs::@2
  __b2:
    // [91] (byte) cputc::c#1 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [92] call cputc 
    // [93] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#14 [phi:cputs::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#13 [phi:cputs::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#13 [phi:cputs::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#13 [phi:cputs::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (byte) cputc::c#1 [phi:cputs::@2->cputc#4] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward
// cputc(byte zp($d) c)
cputc: {
    .label c = $d
    // [94] if((byte) cputc::c#8==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1
    jmp __b2
    // cputc::@2
  __b2:
    // [95] *((byte*) conio_cursor_text#49) ← (byte) cputc::c#8 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [96] (byte*) conio_cursor_text#6 ← ++ (byte*) conio_cursor_text#49 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [97] *((byte*) conio_cursor_color#49) ← (const nomodify byte) COLOR_GRAY3 -- _deref_pbuz1=vbuc1 
    lda #COLOR_GRAY3
    ldy #0
    sta (conio_cursor_color),y
    // [98] (byte*) conio_cursor_color#6 ← ++ (byte*) conio_cursor_color#49 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [99] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#50 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [100] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_WIDTH
    cmp.z conio_cursor_x
    bne __breturn_from___b2
    jmp __b3
    // cputc::@3
  __b3:
    // [101] (byte) conio_cursor_y#6 ← ++ (byte) conio_cursor_y#48 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [102] if((byte) conio_cursor_y#6!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_HEIGHT
    cmp.z conio_cursor_y
    bne __breturn_from___b3
    // [103] phi from cputc::@3 to cputc::@4 [phi:cputc::@3->cputc::@4]
  __b4_from___b3:
    jmp __b4
    // cputc::@4
  __b4:
    // [104] call gotoxy 
    // [109] phi from cputc::@4 to gotoxy [phi:cputc::@4->gotoxy]
  gotoxy_from___b4:
    // [109] phi (byte) gotoxy::y#10 = (byte) 0 [phi:cputc::@4->gotoxy#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gotoxy.y
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputc::@4->gotoxy#1] -- vbuz1=vbuc1 
    lda #0
    sta.z gotoxy.x
    jsr gotoxy
    // [105] phi from cputc::@1 cputc::@2 cputc::@4 to cputc::@return [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return]
  __breturn_from___b1:
  __breturn_from___b2:
  __breturn_from___b4:
    // [105] phi (byte*) conio_cursor_color#51 = (byte*) conio_cursor_color#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#0] -- register_copy 
    // [105] phi (byte*) conio_cursor_text#51 = (byte*) conio_cursor_text#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#1] -- register_copy 
    // [105] phi (byte) conio_cursor_y#52 = (byte) conio_cursor_y#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#2] -- register_copy 
    // [105] phi (byte) conio_cursor_x#52 = (byte) conio_cursor_x#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#3] -- register_copy 
    jmp __breturn
    // [105] phi from cputc::@3 to cputc::@return [phi:cputc::@3->cputc::@return]
  __breturn_from___b3:
    // [105] phi (byte*) conio_cursor_color#51 = (byte*) conio_cursor_color#6 [phi:cputc::@3->cputc::@return#0] -- register_copy 
    // [105] phi (byte*) conio_cursor_text#51 = (byte*) conio_cursor_text#6 [phi:cputc::@3->cputc::@return#1] -- register_copy 
    // [105] phi (byte) conio_cursor_y#52 = (byte) conio_cursor_y#6 [phi:cputc::@3->cputc::@return#2] -- register_copy 
    // [105] phi (byte) conio_cursor_x#52 = (byte) 0 [phi:cputc::@3->cputc::@return#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    jmp __breturn
    // cputc::@return
  __breturn:
    // [106] return 
    rts
    // cputc::@1
  __b1:
    // [107] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#48 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z conio_cursor_y
    iny
    sty.z gotoxy.y
    // [108] call gotoxy 
    // [109] phi from cputc::@1 to gotoxy [phi:cputc::@1->gotoxy]
  gotoxy_from___b1:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#1 [phi:cputc::@1->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputc::@1->gotoxy#1] -- vbuz1=vbuc1 
    lda #0
    sta.z gotoxy.x
    jsr gotoxy
    jmp __breturn_from___b1
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte zp($14) x, byte zp($15) y)
gotoxy: {
    .label __4 = $33
    .label __5 = $39
    .label offset = $3b
    .label y = $15
    .label x = $14
    .label __9 = $35
    .label __10 = $37
    // [110] if((byte) gotoxy::x#7<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #CONIO_WIDTH
    bcc __b3_from_gotoxy
    // [112] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [112] phi (byte) gotoxy::x#10 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // [111] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [112] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [112] phi (byte) gotoxy::x#10 = (byte) gotoxy::x#7 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    // [113] if((byte) gotoxy::y#10<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #CONIO_HEIGHT
    bcc __b4_from___b1
    // [115] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
  __b2_from___b1:
    // [115] phi (byte) gotoxy::y#8 = (byte) 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b2
    // [114] phi from gotoxy::@1 to gotoxy::@4 [phi:gotoxy::@1->gotoxy::@4]
  __b4_from___b1:
    jmp __b4
    // gotoxy::@4
  __b4:
    // [115] phi from gotoxy::@4 to gotoxy::@2 [phi:gotoxy::@4->gotoxy::@2]
  __b2_from___b4:
    // [115] phi (byte) gotoxy::y#8 = (byte) gotoxy::y#10 [phi:gotoxy::@4->gotoxy::@2#0] -- register_copy 
    jmp __b2
    // gotoxy::@2
  __b2:
    // [116] (byte) conio_cursor_x#3 ← (byte) gotoxy::x#10 -- vbuz1=vbuz2 
    lda.z x
    sta.z conio_cursor_x
    // [117] (byte) conio_cursor_y#3 ← (byte) gotoxy::y#8 -- vbuz1=vbuz2 
    lda.z y
    sta.z conio_cursor_y
    // [118] (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8 -- vwuz1=_word_vbuz2 
    lda.z y
    sta.z __4
    lda #0
    sta.z __4+1
    // [119] (word~) gotoxy::$9 ← (word~) gotoxy::$4 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __4
    asl
    sta.z __9
    lda.z __4+1
    rol
    sta.z __9+1
    asl.z __9
    rol.z __9+1
    // [120] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$4 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z __9
    clc
    adc.z __4
    sta.z __10
    lda.z __9+1
    adc.z __4+1
    sta.z __10+1
    // [121] (word~) gotoxy::$5 ← (word~) gotoxy::$10 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z __10
    asl
    sta.z __5
    lda.z __10+1
    rol
    sta.z __5+1
    asl.z __5
    rol.z __5+1
    asl.z __5
    rol.z __5+1
    // [122] (word) gotoxy::offset#0 ← (word~) gotoxy::$5 + (byte) gotoxy::x#10 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z __5
    sta.z offset
    lda #0
    adc.z __5+1
    sta.z offset+1
    // [123] (byte*) conio_cursor_text#3 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda.z offset+1
    adc #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [124] (byte*) conio_cursor_color#3 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda.z offset+1
    adc #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [125] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($16) str)
strlen: {
    .label len = $18
    .label str = $16
    .label return = $27
    // [127] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [127] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [127] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [128] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [129] return 
    rts
    // strlen::@2
  __b2:
    // [130] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [131] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [127] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [127] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [127] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // MakeTeeLine
// MakeTeeLine(byte zp($1a) Y)
MakeTeeLine: {
    .label Y = $1a
    // [133] (byte) cputcxy::y#0 ← (byte) MakeTeeLine::Y#2 -- vbuz1=vbuz2 
    lda.z Y
    sta.z cputcxy.y
    // [134] call cputcxy 
    // [147] phi from MakeTeeLine to cputcxy [phi:MakeTeeLine->cputcxy]
  cputcxy_from_MakeTeeLine:
    // [147] phi (byte) cputcxy::c#2 = (const nomodify byte) CH_LTEE [phi:MakeTeeLine->cputcxy#0] -- vbuz1=vbuc1 
    lda #CH_LTEE
    sta.z cputcxy.c
    // [147] phi (byte) cputcxy::y#2 = (byte) cputcxy::y#0 [phi:MakeTeeLine->cputcxy#1] -- register_copy 
    jsr cputcxy
    jmp __b1
    // MakeTeeLine::@1
  __b1:
    // [135] (byte) chline::length#0 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [136] call chline 
    // [140] phi from MakeTeeLine::@1 to chline [phi:MakeTeeLine::@1->chline]
  chline_from___b1:
    // [140] phi (byte) chline::length#4 = (byte) chline::length#0 [phi:MakeTeeLine::@1->chline#0] -- register_copy 
    jsr chline
    // [137] phi from MakeTeeLine::@1 to MakeTeeLine::@2 [phi:MakeTeeLine::@1->MakeTeeLine::@2]
  __b2_from___b1:
    jmp __b2
    // MakeTeeLine::@2
  __b2:
    // [138] call cputc 
    // [93] phi from MakeTeeLine::@2 to cputc [phi:MakeTeeLine::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeTeeLine::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeTeeLine::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeTeeLine::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeTeeLine::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_RTEE [phi:MakeTeeLine::@2->cputc#4] -- vbuz1=vbuc1 
    lda #CH_RTEE
    sta.z cputc.c
    jsr cputc
    jmp __breturn
    // MakeTeeLine::@return
  __breturn:
    // [139] return 
    rts
}
  // chline
// Output a horizontal line with the given length starting at the current cursor position.
// chline(byte zp($1b) length)
chline: {
    .label i = $1c
    .label length = $1b
    // [141] phi from chline to chline::@1 [phi:chline->chline::@1]
  __b1_from_chline:
    // [141] phi (byte) chline::i#2 = (byte) 0 [phi:chline->chline::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // chline::@1
  __b1:
    // [142] if((byte) chline::i#2<(byte) chline::length#4) goto chline::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2_from___b1
    jmp __breturn
    // chline::@return
  __breturn:
    // [143] return 
    rts
    // [144] phi from chline::@1 to chline::@2 [phi:chline::@1->chline::@2]
  __b2_from___b1:
    jmp __b2
    // chline::@2
  __b2:
    // [145] call cputc 
    // [93] phi from chline::@2 to cputc [phi:chline::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:chline::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:chline::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:chline::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:chline::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_HLINE [phi:chline::@2->cputc#4] -- vbuz1=vbuc1 
    lda #CH_HLINE
    sta.z cputc.c
    jsr cputc
    jmp __b3
    // chline::@3
  __b3:
    // [146] (byte) chline::i#1 ← ++ (byte) chline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [141] phi from chline::@3 to chline::@1 [phi:chline::@3->chline::@1]
  __b1_from___b3:
    // [141] phi (byte) chline::i#2 = (byte) chline::i#1 [phi:chline::@3->chline::@1#0] -- register_copy 
    jmp __b1
}
  // cputcxy
// Move cursor and output one character
// Same as "gotoxy (x, y); cputc (c);"
// cputcxy(byte zp($1d) y, byte zp($1e) c)
cputcxy: {
    .label y = $1d
    .label c = $1e
    // [148] (byte) gotoxy::y#3 ← (byte) cputcxy::y#2 -- vbuz1=vbuz2 
    lda.z y
    sta.z gotoxy.y
    // [149] call gotoxy 
    // [109] phi from cputcxy to gotoxy [phi:cputcxy->gotoxy]
  gotoxy_from_cputcxy:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#3 [phi:cputcxy->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputcxy->gotoxy#1] -- vbuz1=vbuc1 
    lda #0
    sta.z gotoxy.x
    jsr gotoxy
    jmp __b1
    // cputcxy::@1
  __b1:
    // [150] (byte) cputc::c#0 ← (byte) cputcxy::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [151] call cputc 
    // [93] phi from cputcxy::@1 to cputc [phi:cputcxy::@1->cputc]
  cputc_from___b1:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:cputcxy::@1->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:cputcxy::@1->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:cputcxy::@1->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:cputcxy::@1->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (byte) cputc::c#0 [phi:cputcxy::@1->cputc#4] -- register_copy 
    jsr cputc
    jmp __breturn
    // cputcxy::@return
  __breturn:
    // [152] return 
    rts
}
  // cvlinexy
// Move cursor and output a vertical line with the given length
// Same as "gotoxy (x, y); cvline (length);"
// cvlinexy(byte zp($1f) x)
cvlinexy: {
    .label x = $1f
    // [154] (byte) gotoxy::x#6 ← (byte) cvlinexy::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z gotoxy.x
    // [155] call gotoxy 
    // [109] phi from cvlinexy to gotoxy [phi:cvlinexy->gotoxy]
  gotoxy_from_cvlinexy:
    // [109] phi (byte) gotoxy::y#10 = (byte) 1 [phi:cvlinexy->gotoxy#0] -- vbuz1=vbuc1 
    lda #1
    sta.z gotoxy.y
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#6 [phi:cvlinexy->gotoxy#1] -- register_copy 
    jsr gotoxy
    // [156] phi from cvlinexy to cvlinexy::@1 [phi:cvlinexy->cvlinexy::@1]
  __b1_from_cvlinexy:
    jmp __b1
    // cvlinexy::@1
  __b1:
    // [157] call cvline 
    jsr cvline
    jmp __breturn
    // cvlinexy::@return
  __breturn:
    // [158] return 
    rts
}
  // cvline
// Output a vertical line with the given length at the current cursor position.
cvline: {
    .const length = $17
    .label x = $3d
    .label y = $21
    .label i = $20
    // [159] (byte) cvline::x#0 ← (byte) conio_cursor_x#3 -- vbuz1=vbuz2 
    lda.z conio_cursor_x
    sta.z x
    // [160] (byte) cvline::y#0 ← (byte) conio_cursor_y#3 -- vbuz1=vbuz2 
    lda.z conio_cursor_y
    sta.z y
    // [161] phi from cvline to cvline::@1 [phi:cvline->cvline::@1]
  __b1_from_cvline:
    // [161] phi (byte) cvline::y#2 = (byte) cvline::y#0 [phi:cvline->cvline::@1#0] -- register_copy 
    // [161] phi (byte) cvline::i#2 = (byte) 0 [phi:cvline->cvline::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // cvline::@1
  __b1:
    // [162] if((byte) cvline::i#2<(const byte) cvline::length#0) goto cvline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #length
    bcc __b2_from___b1
    jmp __breturn
    // cvline::@return
  __breturn:
    // [163] return 
    rts
    // [164] phi from cvline::@1 to cvline::@2 [phi:cvline::@1->cvline::@2]
  __b2_from___b1:
    jmp __b2
    // cvline::@2
  __b2:
    // [165] call cputc 
    // [93] phi from cvline::@2 to cputc [phi:cvline::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:cvline::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:cvline::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:cvline::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:cvline::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_VLINE [phi:cvline::@2->cputc#4] -- vbuz1=vbuc1 
    lda #CH_VLINE
    sta.z cputc.c
    jsr cputc
    jmp __b3
    // cvline::@3
  __b3:
    // [166] (byte) cvline::y#1 ← ++ (byte) cvline::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [167] (byte) gotoxy::x#5 ← (byte) cvline::x#0 -- vbuz1=vbuz2 
    lda.z x
    sta.z gotoxy.x
    // [168] (byte) gotoxy::y#5 ← (byte) cvline::y#1 -- vbuz1=vbuz2 
    lda.z y
    sta.z gotoxy.y
    // [169] call gotoxy 
    // [109] phi from cvline::@3 to gotoxy [phi:cvline::@3->gotoxy]
  gotoxy_from___b3:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#5 [phi:cvline::@3->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#5 [phi:cvline::@3->gotoxy#1] -- register_copy 
    jsr gotoxy
    jmp __b4
    // cvline::@4
  __b4:
    // [170] (byte) cvline::i#1 ← ++ (byte) cvline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [161] phi from cvline::@4 to cvline::@1 [phi:cvline::@4->cvline::@1]
  __b1_from___b4:
    // [161] phi (byte) cvline::y#2 = (byte) cvline::y#1 [phi:cvline::@4->cvline::@1#0] -- register_copy 
    // [161] phi (byte) cvline::i#2 = (byte) cvline::i#1 [phi:cvline::@4->cvline::@1#1] -- register_copy 
    jmp __b1
}
  // cursor
// If onoff is 1, a cursor is displayed when waiting for keyboard input.
// If onoff is 0, the cursor is hidden when waiting for keyboard input.
// The function returns the old cursor setting.
cursor: {
    jmp __breturn
    // cursor::@return
  __breturn:
    // [172] return 
    rts
}
  // bgcolor
// Set the color for the background. The old color setting is returned.
bgcolor: {
    // [173] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK -- _deref_pbuc1=vbuc2 
    lda #COLOR_BLACK
    sta CONIO_BGCOLOR
    jmp __breturn
    // bgcolor::@return
  __breturn:
    // [174] return 
    rts
}
  // bordercolor
// Set the color for the border. The old color setting is returned.
bordercolor: {
    // [175] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK -- _deref_pbuc1=vbuc2 
    lda #COLOR_BLACK
    sta CONIO_BORDERCOLOR
    jmp __breturn
    // bordercolor::@return
  __breturn:
    // [176] return 
    rts
}
  // textcolor
// Set the color for text output. The old color setting is returned.
textcolor: {
    jmp __breturn
    // textcolor::@return
  __breturn:
    // [178] return 
    rts
}
  // screensize
// Return the current screen size.
screensize: {
    .label x = XSize
    .label y = YSize
    // [179] *((const byte*) screensize::x#0) ← (const nomodify byte) CONIO_WIDTH -- _deref_pbuc1=vbuc2 
    lda #CONIO_WIDTH
    sta.z x
    // [180] *((const byte*) screensize::y#0) ← (const nomodify byte) CONIO_HEIGHT -- _deref_pbuc1=vbuc2 
    lda #CONIO_HEIGHT
    sta.z y
    jmp __breturn
    // screensize::@return
  __breturn:
    // [181] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) XSize ← (byte) 0 [ XSize ] (  [ XSize ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) YSize ← (byte) 0 [ XSize ] (  [ XSize ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17 [ XSize ] ( main:4 [ XSize ] { }  ) always clobbers reg byte a 
Statement [24] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ clrscr::l#2 clrscr::l#1 ]
Statement [25] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [27] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ clrscr::c#2 clrscr::c#1 ]
Statement [28] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) COLOR_GRAY3 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [30] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 [ ] ( main:4::kbhit:11 [ ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [31] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) [ kbhit::return#0 ] ( main:4::kbhit:11 [ kbhit::return#0 ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [66] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::str#1 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::str#1 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
Statement [68] (word) strlen::return#2 ← (word) strlen::len#2 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::return#2 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::return#2 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [69] (word~) MakeNiceScreen::$21 ← (word) strlen::return#2 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$21 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$21 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [70] (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$22 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$22 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [71] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$23 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$23 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [72] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [73] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 cputsxy::s#0 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 cputsxy::s#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:45 [ MakeNiceScreen::X#1 ]
Statement [75] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3) [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 cputsxy::x#0 cputsxy::y#0 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 cputsxy::x#0 cputsxy::y#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:48 [ cputsxy::x#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:48 [ cputsxy::x#0 ]
Statement [77] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#2 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#2 ] { }  ) always clobbers reg byte a 
Statement [82] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0 [ cputs::s#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] ( main:4::MakeNiceScreen:9::cputsxy:76 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
Statement [87] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ cputs::s#2 conio_cursor_x#14 conio_cursor_y#13 conio_cursor_text#13 conio_cursor_color#13 cputs::c#1 ] ( main:4::MakeNiceScreen:9::cputsxy:76::cputs:83 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#2 conio_cursor_x#14 conio_cursor_y#13 conio_cursor_text#13 conio_cursor_color#13 cputs::c#1 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
Statement [95] *((byte*) conio_cursor_text#49) ← (byte) cputc::c#8 [ conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] ( main:4::MakeNiceScreen:9::cputc:48 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:28 [ chline::i#2 chline::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:61 [ cvline::x#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ cvline::i#2 cvline::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ]
Statement [97] *((byte*) conio_cursor_color#49) ← (const nomodify byte) COLOR_GRAY3 [ conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] ( main:4::MakeNiceScreen:9::cputc:48 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:28 [ chline::i#2 chline::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:61 [ cvline::x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ cvline::i#2 cvline::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ]
Statement [118] (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ cputcxy::c#2 ]
Statement [119] (word~) gotoxy::$9 ← (word~) gotoxy::$4 << (byte) 2 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [120] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$4 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [121] (word~) gotoxy::$5 ← (word~) gotoxy::$10 << (byte) 3 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [122] (word) gotoxy::offset#0 ← (word~) gotoxy::$5 + (byte) gotoxy::x#10 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [123] (byte*) conio_cursor_text#3 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 [ conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [124] (byte*) conio_cursor_color#3 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 [ conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [128] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:4::MakeNiceScreen:9::strlen:67 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::len#2 strlen::str#2 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [173] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK [ ] ( main:4::MakeNiceScreen:9::bgcolor:38 [ XSize ] { }  ) always clobbers reg byte a 
Statement [175] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK [ ] ( main:4::MakeNiceScreen:9::bordercolor:36 [ XSize ] { }  ) always clobbers reg byte a 
Statement [179] *((const byte*) screensize::x#0) ← (const nomodify byte) CONIO_WIDTH [ ] ( main:4::screensize:7 [ XSize ] { }  ) always clobbers reg byte a 
Statement [180] *((const byte*) screensize::y#0) ← (const nomodify byte) CONIO_HEIGHT [ ] ( main:4::screensize:7 [ XSize ] { }  ) always clobbers reg byte a 
Statement [1] (volatile byte) XSize ← (byte) 0 [ XSize ] (  [ XSize ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) YSize ← (byte) 0 [ XSize ] (  [ XSize ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17 [ XSize ] ( main:4 [ XSize ] { }  ) always clobbers reg byte a 
Statement [24] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [25] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [27] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) COLOR_GRAY3 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:16 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  main:4::MakeNiceScreen:9::clrscr:40 [ XSize clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [30] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 [ ] ( main:4::kbhit:11 [ ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [31] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) [ kbhit::return#0 ] ( main:4::kbhit:11 [ kbhit::return#0 ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [66] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::str#1 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::str#1 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [68] (word) strlen::return#2 ← (word) strlen::len#2 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::return#2 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::return#2 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [69] (word~) MakeNiceScreen::$21 ← (word) strlen::return#2 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$21 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$21 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [70] (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$22 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$22 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [71] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$23 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::$23 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [72] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [73] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 cputsxy::s#0 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 MakeNiceScreen::X#1 cputsxy::s#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a 
Statement [75] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3) [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 cputsxy::x#0 cputsxy::y#0 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 cputsxy::x#0 cputsxy::y#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } }  ) always clobbers reg byte a reg byte y 
Statement [77] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#2 ] ( main:4::MakeNiceScreen:9 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#2 ] { }  ) always clobbers reg byte a 
Statement [82] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0 [ cputs::s#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] ( main:4::MakeNiceScreen:9::cputsxy:76 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } }  ) always clobbers reg byte a 
Statement [87] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ cputs::s#2 conio_cursor_x#14 conio_cursor_y#13 conio_cursor_text#13 conio_cursor_color#13 cputs::c#1 ] ( main:4::MakeNiceScreen:9::cputsxy:76::cputs:83 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#2 conio_cursor_x#14 conio_cursor_y#13 conio_cursor_text#13 conio_cursor_color#13 cputs::c#1 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } }  ) always clobbers reg byte a reg byte y 
Statement [95] *((byte*) conio_cursor_text#49) ← (byte) cputc::c#8 [ conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] ( main:4::MakeNiceScreen:9::cputc:48 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_text#49 conio_cursor_color#49 conio_cursor_x#50 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  ) always clobbers reg byte y 
Statement [97] *((byte*) conio_cursor_color#49) ← (const nomodify byte) COLOR_GRAY3 [ conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] ( main:4::MakeNiceScreen:9::cputc:48 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145 [ XSize chline::length#4 chline::i#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151 [ XSize conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_y#48 conio_cursor_color#49 conio_cursor_x#50 conio_cursor_text#6 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  ) always clobbers reg byte a reg byte y 
Statement [118] (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [119] (word~) gotoxy::$9 ← (word~) gotoxy::$4 << (byte) 2 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$4 gotoxy::$9 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [120] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$4 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$10 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [121] (word~) gotoxy::$5 ← (word~) gotoxy::$10 << (byte) 3 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::x#10 gotoxy::$5 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [122] (word) gotoxy::offset#0 ← (word~) gotoxy::$5 + (byte) gotoxy::x#10 [ conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [123] (byte*) conio_cursor_text#3 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 [ conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 gotoxy::offset#0 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [124] (byte*) conio_cursor_color#3 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 [ conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] ( main:4::MakeNiceScreen:9::cputsxy:76::gotoxy:81 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputsxy::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#4 = gotoxy::x#7 cputsxy::x#0 MakeNiceScreen::X#1 } { gotoxy::y#10 = gotoxy::y#4 cputsxy::y#0 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:104 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:104 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:104 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:104 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } }  main:4::MakeNiceScreen:9::cputc:48::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:52::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputc:56::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputsxy:76::cputs:83::cputc:92::gotoxy:108 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 cputs::s#0 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputsxy::x#0 = MakeNiceScreen::X#1 } { cputs::s#1 = cputsxy::s#0 } { cputc::c#1 = cputc::c#8 cputs::c#1 } { conio_cursor_y#13 = conio_cursor_y#48 } { conio_cursor_text#13 = conio_cursor_text#49 } { conio_cursor_color#13 = conio_cursor_color#49 } { conio_cursor_x#14 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputc:138::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:46::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#1 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::chline:54::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#2 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::chline:136::cputc:145::gotoxy:108 [ XSize chline::length#4 chline::i#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { chline::length#0 = chline::length#4 } { conio_cursor_y#48 = conio_cursor_y#52 } { conio_cursor_text#49 = conio_cursor_text#51 } { conio_cursor_color#49 = conio_cursor_color#51 } { conio_cursor_x#50 = conio_cursor_x#52 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::cputc:151::gotoxy:108 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cputcxy::y#0 = cputcxy::y#2 MakeTeeLine::Y#2 } { cputc::c#0 = cputc::c#8 cputcxy::c#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::cputc:165::gotoxy:108 [ XSize cvline::x#0 cvline::i#2 cvline::y#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { conio_cursor_y#3 = conio_cursor_y#48 } { conio_cursor_text#3 = conio_cursor_text#49 } { conio_cursor_color#3 = conio_cursor_color#49 } { conio_cursor_x#3 = conio_cursor_x#50 } { gotoxy::y#1 = gotoxy::y#10 } }  main:4::MakeNiceScreen:9::cputcxy:44::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:60::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::MakeTeeLine:62::cputcxy:134::gotoxy:149 [ XSize cputcxy::c#2 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::y#10 = gotoxy::y#3 cputcxy::y#2 cputcxy::y#0 MakeTeeLine::Y#2 } }  main:4::MakeNiceScreen:9::cvlinexy:50::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 } }  main:4::MakeNiceScreen:9::cvlinexy:58::gotoxy:155 [ XSize conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#6 = gotoxy::x#7 cvlinexy::x#2 cvlinexy::x#1 } }  main:4::MakeNiceScreen:9::cvlinexy:50::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  main:4::MakeNiceScreen:9::cvlinexy:58::cvline:157::gotoxy:169 [ XSize cvline::x#0 cvline::i#2 cvline::y#1 conio_cursor_x#3 conio_cursor_y#3 conio_cursor_text#3 conio_cursor_color#3 ] { { cvlinexy::x#1 = cvlinexy::x#2 } { gotoxy::x#5 = gotoxy::x#7 cvline::x#0 } { gotoxy::y#10 = gotoxy::y#5 cvline::y#1 } }  ) always clobbers reg byte a 
Statement [128] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:4::MakeNiceScreen:9::strlen:67 [ XSize MakeNiceScreen::I#3 MakeNiceScreen::T#3 strlen::len#2 strlen::str#2 ] { { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [173] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK [ ] ( main:4::MakeNiceScreen:9::bgcolor:38 [ XSize ] { }  ) always clobbers reg byte a 
Statement [175] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK [ ] ( main:4::MakeNiceScreen:9::bordercolor:36 [ XSize ] { }  ) always clobbers reg byte a 
Statement [179] *((const byte*) screensize::x#0) ← (const nomodify byte) CONIO_WIDTH [ ] ( main:4::screensize:7 [ XSize ] { }  ) always clobbers reg byte a 
Statement [180] *((const byte*) screensize::y#0) ← (const nomodify byte) CONIO_HEIGHT [ ] ( main:4::screensize:7 [ XSize ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ cputc::c#8 cputc::c#0 cputc::c#1 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ] : zp[1]:14 , reg byte x , 
Potential registers zp[2]:15 [ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ] : zp[1]:19 , reg byte x , 
Potential registers zp[1]:20 [ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ strlen::str#2 strlen::str#1 strlen::str#0 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ strlen::len#2 strlen::len#1 ] : zp[2]:24 , 
Potential registers zp[1]:26 [ MakeTeeLine::Y#2 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ] : zp[1]:27 , reg byte x , 
Potential registers zp[1]:28 [ chline::i#2 chline::i#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[1]:29 [ cputcxy::y#2 cputcxy::y#0 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ cputcxy::c#2 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ cvlinexy::x#2 cvlinexy::x#1 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ cvline::i#2 cvline::i#1 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ XSize ] : zp[1]:34 , 
Potential registers zp[1]:35 [ YSize ] : zp[1]:35 , 
Potential registers zp[1]:36 [ kbhit::return#2 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ main::$3 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ kbhit::return#0 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:39 [ strlen::return#2 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ MakeNiceScreen::$21 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ MakeNiceScreen::$22 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ MakeNiceScreen::$23 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ MakeNiceScreen::X#1 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[2]:46 [ cputsxy::s#0 ] : zp[2]:46 , 
Potential registers zp[1]:48 [ cputsxy::x#0 ] : zp[1]:48 , reg byte x , 
Potential registers zp[1]:49 [ cputsxy::y#0 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ cputs::c#1 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:51 [ gotoxy::$4 ] : zp[2]:51 , 
Potential registers zp[2]:53 [ gotoxy::$9 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ gotoxy::$10 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ gotoxy::$5 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ gotoxy::offset#0 ] : zp[2]:59 , 
Potential registers zp[1]:61 [ cvline::x#0 ] : zp[1]:61 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [gotoxy] 2,000,000,002: zp[2]:53 [ gotoxy::$9 ] 2,000,000,002: zp[2]:55 [ gotoxy::$10 ] 2,000,000,002: zp[2]:57 [ gotoxy::$5 ] 1,500,000,001.5: zp[2]:51 [ gotoxy::$4 ] 1,500,000,001.5: zp[2]:59 [ gotoxy::offset#0 ] 1,216,926,676.33: zp[1]:21 [ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ] 966,815,672.63: zp[1]:20 [ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ] 
Uplift Scope [] 249,891,303.28: zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ] 224,026,214.94: zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ] 184,043,885.39: zp[2]:15 [ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ] 175,332,861.71: zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ] 39.1: zp[1]:34 [ XSize ] 20: zp[1]:35 [ YSize ] 
Uplift Scope [cputc] 125,025,006: zp[1]:13 [ cputc::c#8 cputc::c#0 cputc::c#1 ] 
Uplift Scope [cputs] 20,105,003.5: zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 ] 10,000,001: zp[1]:50 [ cputs::c#1 ] 
Uplift Scope [strlen] 3,008,837.67: zp[2]:22 [ strlen::str#2 strlen::str#1 strlen::str#0 ] 1,500,251.75: zp[2]:24 [ strlen::len#2 strlen::len#1 ] 2,002: zp[2]:39 [ strlen::return#2 ] 
Uplift Scope [clrscr] 325,003.25: zp[1]:7 [ clrscr::c#2 clrscr::c#1 ] 25,001.38: zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 23,810.62: zp[2]:3 [ clrscr::line_text#5 clrscr::line_text#1 ] 23,335.67: zp[1]:2 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [cvline] 237,502.38: zp[1]:32 [ cvline::i#2 cvline::i#1 ] 132,503.35: zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ] 10,000.18: zp[1]:61 [ cvline::x#0 ] 
Uplift Scope [chline] 275,002.75: zp[1]:28 [ chline::i#2 chline::i#1 ] 19,273.33: zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ] 
Uplift Scope [cputcxy] 13,004: zp[1]:29 [ cputcxy::y#2 cputcxy::y#0 ] 3,333.67: zp[1]:30 [ cputcxy::c#2 ] 
Uplift Scope [cputsxy] 5,501: zp[1]:48 [ cputsxy::x#0 ] 5,501: zp[1]:49 [ cputsxy::y#0 ] 1,833.67: zp[2]:46 [ cputsxy::s#0 ] 
Uplift Scope [MakeNiceScreen] 2,216.5: zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ] 2,002: zp[1]:43 [ MakeNiceScreen::$22 ] 2,002: zp[1]:44 [ MakeNiceScreen::$23 ] 1,155: zp[2]:9 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ] 1,001: zp[2]:41 [ MakeNiceScreen::$21 ] 1,001: zp[1]:45 [ MakeNiceScreen::X#1 ] 
Uplift Scope [cvlinexy] 1,304: zp[1]:31 [ cvlinexy::x#2 cvlinexy::x#1 ] 
Uplift Scope [MakeTeeLine] 1,001: zp[1]:26 [ MakeTeeLine::Y#2 ] 
Uplift Scope [kbhit] 367.33: zp[1]:38 [ kbhit::return#0 ] 202: zp[1]:36 [ kbhit::return#2 ] 
Uplift Scope [main] 202: zp[1]:37 [ main::$3 ] 
Uplift Scope [screensize] 
Uplift Scope [textcolor] 
Uplift Scope [bgcolor] 
Uplift Scope [bordercolor] 
Uplift Scope [cursor] 
Uplift Scope [$0] 

Uplifting [gotoxy] best 19235 combination zp[2]:53 [ gotoxy::$9 ] zp[2]:55 [ gotoxy::$10 ] zp[2]:57 [ gotoxy::$5 ] zp[2]:51 [ gotoxy::$4 ] zp[2]:59 [ gotoxy::offset#0 ] reg byte a [ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ] reg byte x [ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ] 
Uplifting [] best 19235 combination zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ] zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ] zp[2]:15 [ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ] zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ] zp[1]:34 [ XSize ] zp[1]:35 [ YSize ] 
Uplifting [cputc] best 18908 combination reg byte a [ cputc::c#8 cputc::c#0 cputc::c#1 ] 
Uplifting [cputs] best 18008 combination zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [strlen] best 18008 combination zp[2]:22 [ strlen::str#2 strlen::str#1 strlen::str#0 ] zp[2]:24 [ strlen::len#2 strlen::len#1 ] zp[2]:39 [ strlen::return#2 ] 
Uplifting [clrscr] best 16418 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:3 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [cvline] best 16418 combination zp[1]:32 [ cvline::i#2 cvline::i#1 ] zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ] zp[1]:61 [ cvline::x#0 ] 
Uplifting [chline] best 16418 combination zp[1]:28 [ chline::i#2 chline::i#1 ] zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ] 
Uplifting [cputcxy] best 16402 combination reg byte a [ cputcxy::y#2 cputcxy::y#0 ] reg byte y [ cputcxy::c#2 ] 
Uplifting [cputsxy] best 16336 combination reg byte x [ cputsxy::x#0 ] reg byte a [ cputsxy::y#0 ] zp[2]:46 [ cputsxy::s#0 ] 
Uplifting [MakeNiceScreen] best 16196 combination zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ] reg byte a [ MakeNiceScreen::$22 ] reg byte a [ MakeNiceScreen::$23 ] zp[2]:9 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ] zp[2]:41 [ MakeNiceScreen::$21 ] reg byte x [ MakeNiceScreen::X#1 ] 
Uplifting [cvlinexy] best 16187 combination reg byte x [ cvlinexy::x#2 cvlinexy::x#1 ] 
Uplifting [MakeTeeLine] best 16178 combination reg byte a [ MakeTeeLine::Y#2 ] 
Uplifting [kbhit] best 16085 combination reg byte a [ kbhit::return#0 ] reg byte a [ kbhit::return#2 ] 
Uplifting [main] best 16025 combination reg byte a [ main::$3 ] 
Uplifting [screensize] best 16025 combination 
Uplifting [textcolor] best 16025 combination 
Uplifting [bgcolor] best 16025 combination 
Uplifting [bordercolor] best 16025 combination 
Uplifting [cursor] best 16025 combination 
Uplifting [$0] best 16025 combination 
Attempting to uplift remaining variables inzp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
Uplifting [] best 16025 combination zp[1]:14 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ] 
Attempting to uplift remaining variables inzp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
Uplifting [] best 16025 combination zp[1]:19 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ] 
Attempting to uplift remaining variables inzp[1]:28 [ chline::i#2 chline::i#1 ]
Uplifting [chline] best 16025 combination zp[1]:28 [ chline::i#2 chline::i#1 ] 
Attempting to uplift remaining variables inzp[1]:32 [ cvline::i#2 cvline::i#1 ]
Uplifting [cvline] best 16025 combination zp[1]:32 [ cvline::i#2 cvline::i#1 ] 
Attempting to uplift remaining variables inzp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ]
Uplifting [cvline] best 16025 combination zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ] 
Attempting to uplift remaining variables inzp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
Uplifting [chline] best 16025 combination zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ] 
Attempting to uplift remaining variables inzp[1]:61 [ cvline::x#0 ]
Uplifting [cvline] best 16025 combination zp[1]:61 [ cvline::x#0 ] 
Attempting to uplift remaining variables inzp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
Uplifting [MakeNiceScreen] best 16025 combination zp[1]:8 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ] 
Attempting to uplift remaining variables inzp[1]:34 [ XSize ]
Uplifting [] best 16025 combination zp[1]:34 [ XSize ] 
Attempting to uplift remaining variables inzp[1]:35 [ YSize ]
Uplifting [] best 16025 combination zp[1]:35 [ YSize ] 
Coalescing zero page register [ zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 ] ] with [ zp[2]:46 [ cputsxy::s#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 ] ] with [ zp[2]:59 [ gotoxy::offset#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:39 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ gotoxy::$4 ] ] with [ zp[2]:55 [ gotoxy::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 gotoxy::offset#0 ] ] with [ zp[2]:57 [ gotoxy::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:41 [ MakeNiceScreen::$21 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 gotoxy::offset#0 gotoxy::$5 ] ] with [ zp[2]:51 [ gotoxy::$4 gotoxy::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 ] ] with [ zp[2]:3 [ clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 cputsxy::s#0 ] ] with [ zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[1]:32 [ cvline::i#2 cvline::i#1 ] ] with [ zp[1]:27 [ chline::length#4 chline::length#1 chline::length#2 chline::length#0 ] ]
Coalescing zero page register [ zp[1]:33 [ cvline::y#2 cvline::y#0 cvline::y#1 ] ] with [ zp[1]:28 [ chline::i#2 chline::i#1 ] ]
Coalescing zero page register [ zp[2]:53 [ gotoxy::$9 ] ] with [ zp[2]:22 [ strlen::str#2 strlen::str#1 strlen::str#0 ] ]
Coalescing zero page register [ zp[2]:24 [ strlen::len#2 strlen::len#1 strlen::return#2 MakeNiceScreen::$21 ] ] with [ zp[2]:11 [ cputs::s#2 cputs::s#1 cputs::s#0 cputsxy::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Allocated (was zp[1]:8) zp[1]:2 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
Allocated (was zp[2]:9) zp[2]:3 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 clrscr::line_text#5 clrscr::line_text#1 ]
Allocated (was zp[1]:14) zp[1]:5 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
Allocated (was zp[2]:15) zp[2]:6 [ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ]
Allocated (was zp[2]:17) zp[2]:8 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 gotoxy::offset#0 gotoxy::$5 gotoxy::$4 gotoxy::$10 ]
Allocated (was zp[1]:19) zp[1]:10 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
Allocated (was zp[2]:24) zp[2]:11 [ strlen::len#2 strlen::len#1 strlen::return#2 MakeNiceScreen::$21 cputs::s#2 cputs::s#1 cputs::s#0 cputsxy::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[1]:32) zp[1]:13 [ cvline::i#2 cvline::i#1 chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
Allocated (was zp[1]:33) zp[1]:14 [ cvline::y#2 cvline::y#0 cvline::y#1 chline::i#2 chline::i#1 ]
Allocated (was zp[1]:34) zp[1]:15 [ XSize ]
Allocated (was zp[1]:35) zp[1]:16 [ YSize ]
Allocated (was zp[2]:53) zp[2]:17 [ gotoxy::$9 strlen::str#2 strlen::str#1 strlen::str#0 ]
Allocated (was zp[1]:61) zp[1]:19 [ cvline::x#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Show a nice screen using conio.h
// From CC65 sample "Eine kleine Nachtmusik" by Ullrich von Bassewitz
// https://github.com/cc65/cc65/blob/master/samples/nachtm.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The horizontal line character
  .const CH_HLINE = $40
  // The vertical line character
  .const CH_VLINE = $5d
  // The upper left corner character
  .const CH_ULCORNER = $70
  // The upper right corner character
  .const CH_URCORNER = $6e
  // The lower left corner character
  .const CH_LLCORNER = $6d
  // The lower right corner character
  .const CH_LRCORNER = $7d
  // The left T character
  .const CH_LTEE = $6b
  // The right T character
  .const CH_RTEE = $73
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The background color register address
  .label CONIO_BGCOLOR = $d021
  // The border color register address
  .label CONIO_BORDERCOLOR = $d020
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CONIO_CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CONIO_CIA1_PORT_B = $dc01
  // The screen width
  .const CONIO_WIDTH = $28
  // The screen height
  .const CONIO_HEIGHT = $19
  .const COLOR_GRAY3 = $f
  .const COLOR_BLACK = 0
  .label VIC_MEMORY = $d018
  .label XSize = $f
  .label YSize = $10
  // The current cursor x-position
  .label conio_cursor_x = $a
  // The current cursor y-position
  .label conio_cursor_y = 5
  // The current cursor address
  .label conio_cursor_text = 6
  // The current cursor address
  .label conio_cursor_color = 8
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (volatile byte) XSize ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z XSize
  // [2] (volatile byte) YSize ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z YSize
  // [3] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [4] call main 
  jsr main
  // [5] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [6] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    lda #$17
    sta VIC_MEMORY
    // [7] call screensize 
    jsr screensize
    // [8] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [9] call MakeNiceScreen 
    // [33] phi from main::@3 to MakeNiceScreen [phi:main::@3->MakeNiceScreen]
  MakeNiceScreen_from___b3:
    jsr MakeNiceScreen
    // [10] phi from main::@3 main::@4 to main::@1 [phi:main::@3/main::@4->main::@1]
  __b1_from___b3:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [11] call kbhit 
    jsr kbhit
    // [12] (byte) kbhit::return#2 ← (byte) kbhit::return#0
    jmp __b4
    // main::@4
  __b4:
    // [13] (byte~) main::$3 ← (byte) kbhit::return#2
    // [14] if((byte) 0==(byte~) main::$3) goto main::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1_from___b4
    // [15] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    jmp __b2
    // main::@2
  __b2:
    // [16] call clrscr 
    // [18] phi from main::@2 to clrscr [phi:main::@2->clrscr]
  clrscr_from___b2:
    jsr clrscr
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 3
    .label line_cols = $b
    // [19] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [19] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [19] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [19] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [20] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #CONIO_HEIGHT
    bcc __b2_from___b1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [21] return 
    rts
    // [22] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b2_from___b1:
    // [22] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // clrscr::@2
  __b2:
    // [23] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #CONIO_WIDTH
    bcc __b3
    jmp __b4
    // clrscr::@4
  __b4:
    // [24] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [25] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [26] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [19] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
  __b1_from___b4:
    // [19] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [19] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [19] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // [27] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [28] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) COLOR_GRAY3 -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #COLOR_GRAY3
    sta (line_cols),y
    // [29] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [22] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
  __b2_from___b3:
    // [22] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // [30] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CONIO_CIA1_PORT_A
    // [31] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CONIO_CIA1_PORT_B
    eor #$ff
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [32] return 
    rts
}
  // MakeNiceScreen
MakeNiceScreen: {
    .label __21 = $b
    .label T = 3
    .label I = 2
    // [34] call textcolor 
  /* Clear the screen hide the cursor, set colors */
    // [177] phi from MakeNiceScreen to textcolor [phi:MakeNiceScreen->textcolor]
  textcolor_from_MakeNiceScreen:
    jsr textcolor
    // [35] phi from MakeNiceScreen to MakeNiceScreen::@3 [phi:MakeNiceScreen->MakeNiceScreen::@3]
  __b3_from_MakeNiceScreen:
    jmp __b3
    // MakeNiceScreen::@3
  __b3:
    // [36] call bordercolor 
    jsr bordercolor
    // [37] phi from MakeNiceScreen::@3 to MakeNiceScreen::@4 [phi:MakeNiceScreen::@3->MakeNiceScreen::@4]
  __b4_from___b3:
    jmp __b4
    // MakeNiceScreen::@4
  __b4:
    // [38] call bgcolor 
    jsr bgcolor
    // [39] phi from MakeNiceScreen::@4 to MakeNiceScreen::@5 [phi:MakeNiceScreen::@4->MakeNiceScreen::@5]
  __b5_from___b4:
    jmp __b5
    // MakeNiceScreen::@5
  __b5:
    // [40] call clrscr 
    // [18] phi from MakeNiceScreen::@5 to clrscr [phi:MakeNiceScreen::@5->clrscr]
  clrscr_from___b5:
    jsr clrscr
    // [41] phi from MakeNiceScreen::@5 to MakeNiceScreen::@6 [phi:MakeNiceScreen::@5->MakeNiceScreen::@6]
  __b6_from___b5:
    jmp __b6
    // MakeNiceScreen::@6
  __b6:
    // [42] call cursor 
    // [171] phi from MakeNiceScreen::@6 to cursor [phi:MakeNiceScreen::@6->cursor]
  cursor_from___b6:
    jsr cursor
    // [43] phi from MakeNiceScreen::@6 to MakeNiceScreen::@7 [phi:MakeNiceScreen::@6->MakeNiceScreen::@7]
  __b7_from___b6:
    jmp __b7
    // MakeNiceScreen::@7
  __b7:
    // [44] call cputcxy 
  /* Top line */
    // [147] phi from MakeNiceScreen::@7 to cputcxy [phi:MakeNiceScreen::@7->cputcxy]
  cputcxy_from___b7:
    // [147] phi (byte) cputcxy::c#2 = (const nomodify byte) CH_ULCORNER [phi:MakeNiceScreen::@7->cputcxy#0] -- vbuyy=vbuc1 
    ldy #CH_ULCORNER
    // [147] phi (byte) cputcxy::y#2 = (byte) 0 [phi:MakeNiceScreen::@7->cputcxy#1] -- vbuaa=vbuc1 
    lda #0
    jsr cputcxy
    jmp __b8
    // MakeNiceScreen::@8
  __b8:
    // [45] (byte) chline::length#1 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [46] call chline 
    // [140] phi from MakeNiceScreen::@8 to chline [phi:MakeNiceScreen::@8->chline]
  chline_from___b8:
    // [140] phi (byte) chline::length#4 = (byte) chline::length#1 [phi:MakeNiceScreen::@8->chline#0] -- register_copy 
    jsr chline
    // [47] phi from MakeNiceScreen::@8 to MakeNiceScreen::@9 [phi:MakeNiceScreen::@8->MakeNiceScreen::@9]
  __b9_from___b8:
    jmp __b9
    // MakeNiceScreen::@9
  __b9:
    // [48] call cputc 
    // [93] phi from MakeNiceScreen::@9 to cputc [phi:MakeNiceScreen::@9->cputc]
  cputc_from___b9:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeNiceScreen::@9->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeNiceScreen::@9->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeNiceScreen::@9->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeNiceScreen::@9->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_URCORNER [phi:MakeNiceScreen::@9->cputc#4] -- vbuaa=vbuc1 
    lda #CH_URCORNER
    jsr cputc
    // [49] phi from MakeNiceScreen::@9 to MakeNiceScreen::@10 [phi:MakeNiceScreen::@9->MakeNiceScreen::@10]
  __b10_from___b9:
    jmp __b10
    // MakeNiceScreen::@10
  __b10:
    // [50] call cvlinexy 
  /* Left line */
    // [153] phi from MakeNiceScreen::@10 to cvlinexy [phi:MakeNiceScreen::@10->cvlinexy]
  cvlinexy_from___b10:
    // [153] phi (byte) cvlinexy::x#2 = (byte) 0 [phi:MakeNiceScreen::@10->cvlinexy#0] -- vbuxx=vbuc1 
    ldx #0
    jsr cvlinexy
    // [51] phi from MakeNiceScreen::@10 to MakeNiceScreen::@11 [phi:MakeNiceScreen::@10->MakeNiceScreen::@11]
  __b11_from___b10:
    jmp __b11
    // MakeNiceScreen::@11
  __b11:
    // [52] call cputc 
  /* Bottom line */
    // [93] phi from MakeNiceScreen::@11 to cputc [phi:MakeNiceScreen::@11->cputc]
  cputc_from___b11:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:MakeNiceScreen::@11->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:MakeNiceScreen::@11->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:MakeNiceScreen::@11->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:MakeNiceScreen::@11->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_LLCORNER [phi:MakeNiceScreen::@11->cputc#4] -- vbuaa=vbuc1 
    lda #CH_LLCORNER
    jsr cputc
    jmp __b12
    // MakeNiceScreen::@12
  __b12:
    // [53] (byte) chline::length#2 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [54] call chline 
    // [140] phi from MakeNiceScreen::@12 to chline [phi:MakeNiceScreen::@12->chline]
  chline_from___b12:
    // [140] phi (byte) chline::length#4 = (byte) chline::length#2 [phi:MakeNiceScreen::@12->chline#0] -- register_copy 
    jsr chline
    // [55] phi from MakeNiceScreen::@12 to MakeNiceScreen::@13 [phi:MakeNiceScreen::@12->MakeNiceScreen::@13]
  __b13_from___b12:
    jmp __b13
    // MakeNiceScreen::@13
  __b13:
    // [56] call cputc 
    // [93] phi from MakeNiceScreen::@13 to cputc [phi:MakeNiceScreen::@13->cputc]
  cputc_from___b13:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeNiceScreen::@13->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeNiceScreen::@13->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeNiceScreen::@13->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeNiceScreen::@13->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_LRCORNER [phi:MakeNiceScreen::@13->cputc#4] -- vbuaa=vbuc1 
    lda #CH_LRCORNER
    jsr cputc
    jmp __b14
    // MakeNiceScreen::@14
  __b14:
    // [57] (byte) cvlinexy::x#1 ← (volatile byte) XSize - (byte) 1 -- vbuxx=vbuz1_minus_1 
    ldx.z XSize
    dex
    // [58] call cvlinexy 
  /* Right line */
    // [153] phi from MakeNiceScreen::@14 to cvlinexy [phi:MakeNiceScreen::@14->cvlinexy]
  cvlinexy_from___b14:
    // [153] phi (byte) cvlinexy::x#2 = (byte) cvlinexy::x#1 [phi:MakeNiceScreen::@14->cvlinexy#0] -- register_copy 
    jsr cvlinexy
    // [59] phi from MakeNiceScreen::@14 to MakeNiceScreen::@15 [phi:MakeNiceScreen::@14->MakeNiceScreen::@15]
  __b15_from___b14:
    jmp __b15
    // MakeNiceScreen::@15
  __b15:
    // [60] call MakeTeeLine 
  /* Several divider lines */
    // [132] phi from MakeNiceScreen::@15 to MakeTeeLine [phi:MakeNiceScreen::@15->MakeTeeLine]
  MakeTeeLine_from___b15:
    // [132] phi (byte) MakeTeeLine::Y#2 = (byte) 7 [phi:MakeNiceScreen::@15->MakeTeeLine#0] -- vbuaa=vbuc1 
    lda #7
    jsr MakeTeeLine
    // [61] phi from MakeNiceScreen::@15 to MakeNiceScreen::@16 [phi:MakeNiceScreen::@15->MakeNiceScreen::@16]
  __b16_from___b15:
    jmp __b16
    // MakeNiceScreen::@16
  __b16:
    // [62] call MakeTeeLine 
    // [132] phi from MakeNiceScreen::@16 to MakeTeeLine [phi:MakeNiceScreen::@16->MakeTeeLine]
  MakeTeeLine_from___b16:
    // [132] phi (byte) MakeTeeLine::Y#2 = (byte) $16 [phi:MakeNiceScreen::@16->MakeTeeLine#0] -- vbuaa=vbuc1 
    lda #$16
    jsr MakeTeeLine
    // [63] phi from MakeNiceScreen::@16 to MakeNiceScreen::@1 [phi:MakeNiceScreen::@16->MakeNiceScreen::@1]
  __b1_from___b16:
    // [63] phi (to_nomodify struct $0*) MakeNiceScreen::T#3 = (const struct $0*) MakeNiceScreen::Text [phi:MakeNiceScreen::@16->MakeNiceScreen::@1#0] -- pssz1=pssc1 
    lda #<Text
    sta.z T
    lda #>Text
    sta.z T+1
    // [63] phi (byte) MakeNiceScreen::I#3 = (byte) 0 [phi:MakeNiceScreen::@16->MakeNiceScreen::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z I
    jmp __b1
  /* Write something into the frame */
    // MakeNiceScreen::@1
  __b1:
    // [64] if((byte) MakeNiceScreen::I#3<(byte) $c*(byte) $29/(byte) $29) goto MakeNiceScreen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z I
    cmp #$c*$29/$29
    bcc __b2
    jmp __breturn
    // MakeNiceScreen::@return
  __breturn:
    // [65] return 
    rts
    // MakeNiceScreen::@2
  __b2:
    // [66] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z T
    clc
    adc #1
    sta.z strlen.str
    lda.z T+1
    adc #0
    sta.z strlen.str+1
    // [67] call strlen 
    // [126] phi from MakeNiceScreen::@2 to strlen [phi:MakeNiceScreen::@2->strlen]
  strlen_from___b2:
    jsr strlen
    // [68] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b17
    // MakeNiceScreen::@17
  __b17:
    // [69] (word~) MakeNiceScreen::$21 ← (word) strlen::return#2
    // [70] (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21 -- vbuaa=_byte_vwuz1 
    lda.z __21
    // [71] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22 -- vbuaa=vbuz1_minus_vbuaa 
    eor #$ff
    sec
    adc.z XSize
    // [72] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1 -- vbuxx=vbuaa_ror_1 
    lsr
    tax
    // [73] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z T
    clc
    adc #1
    sta.z cputsxy.s
    lda.z T+1
    adc #0
    sta.z cputsxy.s+1
    // [74] (byte) cputsxy::x#0 ← (byte) MakeNiceScreen::X#1
    // [75] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (T),y
    // [76] call cputsxy 
    jsr cputsxy
    jmp __b18
    // MakeNiceScreen::@18
  __b18:
    // [77] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29 -- pssz1=pssz1_plus_vbuc1 
    lda #$29
    clc
    adc.z T
    sta.z T
    bcc !+
    inc.z T+1
  !:
    // [78] (byte) MakeNiceScreen::I#2 ← ++ (byte) MakeNiceScreen::I#3 -- vbuz1=_inc_vbuz1 
    inc.z I
    // [63] phi from MakeNiceScreen::@18 to MakeNiceScreen::@1 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1]
  __b1_from___b18:
    // [63] phi (to_nomodify struct $0*) MakeNiceScreen::T#3 = (to_nomodify struct $0*) MakeNiceScreen::T#2 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1#0] -- register_copy 
    // [63] phi (byte) MakeNiceScreen::I#3 = (byte) MakeNiceScreen::I#2 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1#1] -- register_copy 
    jmp __b1
    Text: .byte 2
    .text "Wolfgang Amadeus Mozart"
    .byte 0
    .fill $10, 0
    .byte 4
    .text @"\"Eine kleine Nachtmusik\""
    .byte 0
    .fill $f, 0
    .byte 5
    .text "(KV 525)"
    .byte 0
    .fill $1f, 0
    .byte 9
    .text "Ported to the SID in 1987 by"
    .byte 0
    .fill $b, 0
    .byte $b
    .text "Joachim von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $c
    .text "(joachim@von-bassewitz.de)"
    .byte 0
    .fill $d, 0
    .byte $d
    .text "and"
    .byte 0
    .fill $24, 0
    .byte $e
    .text "Ullrich von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $f
    .text "(ullrich@von-bassewitz.de)"
    .byte 0
    .fill $d, 0
    .byte $12
    .text "C Implementation by"
    .byte 0
    .fill $14, 0
    .byte $13
    .text "Ullrich von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $17
    .text "Press any key to quit..."
    .byte 0
    .fill $f, 0
}
  // cputsxy
// Move cursor and output a NUL-terminated string
// Same as "gotoxy (x, y); puts (s);"
// cputsxy(byte register(X) x, byte register(A) y, byte* zp($b) s)
cputsxy: {
    .label s = $b
    // [79] (byte) gotoxy::x#4 ← (byte) cputsxy::x#0
    // [80] (byte) gotoxy::y#4 ← (byte) cputsxy::y#0
    // [81] call gotoxy 
    // [109] phi from cputsxy to gotoxy [phi:cputsxy->gotoxy]
  gotoxy_from_cputsxy:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#4 [phi:cputsxy->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#4 [phi:cputsxy->gotoxy#1] -- register_copy 
    jsr gotoxy
    jmp __b1
    // cputsxy::@1
  __b1:
    // [82] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0
    // [83] call cputs 
    // [85] phi from cputsxy::@1 to cputs [phi:cputsxy::@1->cputs]
  cputs_from___b1:
    jsr cputs
    jmp __breturn
    // cputsxy::@return
  __breturn:
    // [84] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($b) s)
cputs: {
    .label s = $b
    // [86] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [86] phi (byte*) conio_cursor_color#13 = (byte*) conio_cursor_color#3 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [86] phi (byte*) conio_cursor_text#13 = (byte*) conio_cursor_text#3 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    // [86] phi (byte) conio_cursor_y#13 = (byte) conio_cursor_y#3 [phi:cputs/cputs::@2->cputs::@1#2] -- register_copy 
    // [86] phi (byte) conio_cursor_x#14 = (byte) conio_cursor_x#3 [phi:cputs/cputs::@2->cputs::@1#3] -- register_copy 
    // [86] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#1 [phi:cputs/cputs::@2->cputs::@1#4] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [87] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [88] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [89] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [90] return 
    rts
    // cputs::@2
  __b2:
    // [91] (byte) cputc::c#1 ← (byte) cputs::c#1
    // [92] call cputc 
    // [93] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#14 [phi:cputs::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#13 [phi:cputs::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#13 [phi:cputs::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#13 [phi:cputs::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (byte) cputc::c#1 [phi:cputs::@2->cputc#4] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward
// cputc(byte register(A) c)
cputc: {
    // [94] if((byte) cputc::c#8==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    jmp __b2
    // cputc::@2
  __b2:
    // [95] *((byte*) conio_cursor_text#49) ← (byte) cputc::c#8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [96] (byte*) conio_cursor_text#6 ← ++ (byte*) conio_cursor_text#49 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [97] *((byte*) conio_cursor_color#49) ← (const nomodify byte) COLOR_GRAY3 -- _deref_pbuz1=vbuc1 
    lda #COLOR_GRAY3
    ldy #0
    sta (conio_cursor_color),y
    // [98] (byte*) conio_cursor_color#6 ← ++ (byte*) conio_cursor_color#49 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [99] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#50 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [100] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_WIDTH
    cmp.z conio_cursor_x
    bne __breturn_from___b2
    jmp __b3
    // cputc::@3
  __b3:
    // [101] (byte) conio_cursor_y#6 ← ++ (byte) conio_cursor_y#48 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [102] if((byte) conio_cursor_y#6!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_HEIGHT
    cmp.z conio_cursor_y
    bne __breturn_from___b3
    // [103] phi from cputc::@3 to cputc::@4 [phi:cputc::@3->cputc::@4]
  __b4_from___b3:
    jmp __b4
    // cputc::@4
  __b4:
    // [104] call gotoxy 
    // [109] phi from cputc::@4 to gotoxy [phi:cputc::@4->gotoxy]
  gotoxy_from___b4:
    // [109] phi (byte) gotoxy::y#10 = (byte) 0 [phi:cputc::@4->gotoxy#0] -- vbuaa=vbuc1 
    lda #0
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputc::@4->gotoxy#1] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    // [105] phi from cputc::@1 cputc::@2 cputc::@4 to cputc::@return [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return]
  __breturn_from___b1:
  __breturn_from___b2:
  __breturn_from___b4:
    // [105] phi (byte*) conio_cursor_color#51 = (byte*) conio_cursor_color#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#0] -- register_copy 
    // [105] phi (byte*) conio_cursor_text#51 = (byte*) conio_cursor_text#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#1] -- register_copy 
    // [105] phi (byte) conio_cursor_y#52 = (byte) conio_cursor_y#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#2] -- register_copy 
    // [105] phi (byte) conio_cursor_x#52 = (byte) conio_cursor_x#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#3] -- register_copy 
    jmp __breturn
    // [105] phi from cputc::@3 to cputc::@return [phi:cputc::@3->cputc::@return]
  __breturn_from___b3:
    // [105] phi (byte*) conio_cursor_color#51 = (byte*) conio_cursor_color#6 [phi:cputc::@3->cputc::@return#0] -- register_copy 
    // [105] phi (byte*) conio_cursor_text#51 = (byte*) conio_cursor_text#6 [phi:cputc::@3->cputc::@return#1] -- register_copy 
    // [105] phi (byte) conio_cursor_y#52 = (byte) conio_cursor_y#6 [phi:cputc::@3->cputc::@return#2] -- register_copy 
    // [105] phi (byte) conio_cursor_x#52 = (byte) 0 [phi:cputc::@3->cputc::@return#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    jmp __breturn
    // cputc::@return
  __breturn:
    // [106] return 
    rts
    // cputc::@1
  __b1:
    // [107] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#48 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z conio_cursor_y
    clc
    adc #1
    // [108] call gotoxy 
    // [109] phi from cputc::@1 to gotoxy [phi:cputc::@1->gotoxy]
  gotoxy_from___b1:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#1 [phi:cputc::@1->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputc::@1->gotoxy#1] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    jmp __breturn_from___b1
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) x, byte register(A) y)
gotoxy: {
    .label __4 = 8
    .label __5 = 8
    .label offset = 8
    .label __9 = $11
    .label __10 = 8
    // [110] if((byte) gotoxy::x#7<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #CONIO_WIDTH
    bcc __b3_from_gotoxy
    // [112] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [112] phi (byte) gotoxy::x#10 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [111] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [112] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [112] phi (byte) gotoxy::x#10 = (byte) gotoxy::x#7 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    // [113] if((byte) gotoxy::y#10<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@4 -- vbuaa_lt_vbuc1_then_la1 
    cmp #CONIO_HEIGHT
    bcc __b4_from___b1
    // [115] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
  __b2_from___b1:
    // [115] phi (byte) gotoxy::y#8 = (byte) 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b2
    // [114] phi from gotoxy::@1 to gotoxy::@4 [phi:gotoxy::@1->gotoxy::@4]
  __b4_from___b1:
    jmp __b4
    // gotoxy::@4
  __b4:
    // [115] phi from gotoxy::@4 to gotoxy::@2 [phi:gotoxy::@4->gotoxy::@2]
  __b2_from___b4:
    // [115] phi (byte) gotoxy::y#8 = (byte) gotoxy::y#10 [phi:gotoxy::@4->gotoxy::@2#0] -- register_copy 
    jmp __b2
    // gotoxy::@2
  __b2:
    // [116] (byte) conio_cursor_x#3 ← (byte) gotoxy::x#10 -- vbuz1=vbuxx 
    stx.z conio_cursor_x
    // [117] (byte) conio_cursor_y#3 ← (byte) gotoxy::y#8 -- vbuz1=vbuaa 
    sta.z conio_cursor_y
    // [118] (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8 -- vwuz1=_word_vbuaa 
    sta.z __4
    lda #0
    sta.z __4+1
    // [119] (word~) gotoxy::$9 ← (word~) gotoxy::$4 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __4
    asl
    sta.z __9
    lda.z __4+1
    rol
    sta.z __9+1
    asl.z __9
    rol.z __9+1
    // [120] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$4 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __10
    clc
    adc.z __9
    sta.z __10
    lda.z __10+1
    adc.z __9+1
    sta.z __10+1
    // [121] (word~) gotoxy::$5 ← (word~) gotoxy::$10 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __5
    rol.z __5+1
    asl.z __5
    rol.z __5+1
    asl.z __5
    rol.z __5+1
    // [122] (word) gotoxy::offset#0 ← (word~) gotoxy::$5 + (byte) gotoxy::x#10 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z offset
    sta.z offset
    bcc !+
    inc.z offset+1
  !:
    // [123] (byte*) conio_cursor_text#3 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda.z offset+1
    adc #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [124] (byte*) conio_cursor_color#3 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z conio_cursor_color
    adc #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda.z conio_cursor_color+1
    adc #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [125] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($11) str)
strlen: {
    .label len = $b
    .label str = $11
    .label return = $b
    // [127] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [127] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [127] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [128] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [129] return 
    rts
    // strlen::@2
  __b2:
    // [130] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [131] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [127] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [127] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [127] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // MakeTeeLine
// MakeTeeLine(byte register(A) Y)
MakeTeeLine: {
    // [133] (byte) cputcxy::y#0 ← (byte) MakeTeeLine::Y#2
    // [134] call cputcxy 
    // [147] phi from MakeTeeLine to cputcxy [phi:MakeTeeLine->cputcxy]
  cputcxy_from_MakeTeeLine:
    // [147] phi (byte) cputcxy::c#2 = (const nomodify byte) CH_LTEE [phi:MakeTeeLine->cputcxy#0] -- vbuyy=vbuc1 
    ldy #CH_LTEE
    // [147] phi (byte) cputcxy::y#2 = (byte) cputcxy::y#0 [phi:MakeTeeLine->cputcxy#1] -- register_copy 
    jsr cputcxy
    jmp __b1
    // MakeTeeLine::@1
  __b1:
    // [135] (byte) chline::length#0 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [136] call chline 
    // [140] phi from MakeTeeLine::@1 to chline [phi:MakeTeeLine::@1->chline]
  chline_from___b1:
    // [140] phi (byte) chline::length#4 = (byte) chline::length#0 [phi:MakeTeeLine::@1->chline#0] -- register_copy 
    jsr chline
    // [137] phi from MakeTeeLine::@1 to MakeTeeLine::@2 [phi:MakeTeeLine::@1->MakeTeeLine::@2]
  __b2_from___b1:
    jmp __b2
    // MakeTeeLine::@2
  __b2:
    // [138] call cputc 
    // [93] phi from MakeTeeLine::@2 to cputc [phi:MakeTeeLine::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeTeeLine::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeTeeLine::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeTeeLine::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeTeeLine::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_RTEE [phi:MakeTeeLine::@2->cputc#4] -- vbuaa=vbuc1 
    lda #CH_RTEE
    jsr cputc
    jmp __breturn
    // MakeTeeLine::@return
  __breturn:
    // [139] return 
    rts
}
  // chline
// Output a horizontal line with the given length starting at the current cursor position.
// chline(byte zp($d) length)
chline: {
    .label i = $e
    .label length = $d
    // [141] phi from chline to chline::@1 [phi:chline->chline::@1]
  __b1_from_chline:
    // [141] phi (byte) chline::i#2 = (byte) 0 [phi:chline->chline::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // chline::@1
  __b1:
    // [142] if((byte) chline::i#2<(byte) chline::length#4) goto chline::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2_from___b1
    jmp __breturn
    // chline::@return
  __breturn:
    // [143] return 
    rts
    // [144] phi from chline::@1 to chline::@2 [phi:chline::@1->chline::@2]
  __b2_from___b1:
    jmp __b2
    // chline::@2
  __b2:
    // [145] call cputc 
    // [93] phi from chline::@2 to cputc [phi:chline::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:chline::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:chline::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:chline::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:chline::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_HLINE [phi:chline::@2->cputc#4] -- vbuaa=vbuc1 
    lda #CH_HLINE
    jsr cputc
    jmp __b3
    // chline::@3
  __b3:
    // [146] (byte) chline::i#1 ← ++ (byte) chline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [141] phi from chline::@3 to chline::@1 [phi:chline::@3->chline::@1]
  __b1_from___b3:
    // [141] phi (byte) chline::i#2 = (byte) chline::i#1 [phi:chline::@3->chline::@1#0] -- register_copy 
    jmp __b1
}
  // cputcxy
// Move cursor and output one character
// Same as "gotoxy (x, y); cputc (c);"
// cputcxy(byte register(A) y, byte register(Y) c)
cputcxy: {
    // [148] (byte) gotoxy::y#3 ← (byte) cputcxy::y#2
    // [149] call gotoxy 
    // [109] phi from cputcxy to gotoxy [phi:cputcxy->gotoxy]
  gotoxy_from_cputcxy:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#3 [phi:cputcxy->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputcxy->gotoxy#1] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    jmp __b1
    // cputcxy::@1
  __b1:
    // [150] (byte) cputc::c#0 ← (byte) cputcxy::c#2 -- vbuaa=vbuyy 
    tya
    // [151] call cputc 
    // [93] phi from cputcxy::@1 to cputc [phi:cputcxy::@1->cputc]
  cputc_from___b1:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:cputcxy::@1->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:cputcxy::@1->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:cputcxy::@1->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:cputcxy::@1->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (byte) cputc::c#0 [phi:cputcxy::@1->cputc#4] -- register_copy 
    jsr cputc
    jmp __breturn
    // cputcxy::@return
  __breturn:
    // [152] return 
    rts
}
  // cvlinexy
// Move cursor and output a vertical line with the given length
// Same as "gotoxy (x, y); cvline (length);"
// cvlinexy(byte register(X) x)
cvlinexy: {
    // [154] (byte) gotoxy::x#6 ← (byte) cvlinexy::x#2
    // [155] call gotoxy 
    // [109] phi from cvlinexy to gotoxy [phi:cvlinexy->gotoxy]
  gotoxy_from_cvlinexy:
    // [109] phi (byte) gotoxy::y#10 = (byte) 1 [phi:cvlinexy->gotoxy#0] -- vbuaa=vbuc1 
    lda #1
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#6 [phi:cvlinexy->gotoxy#1] -- register_copy 
    jsr gotoxy
    // [156] phi from cvlinexy to cvlinexy::@1 [phi:cvlinexy->cvlinexy::@1]
  __b1_from_cvlinexy:
    jmp __b1
    // cvlinexy::@1
  __b1:
    // [157] call cvline 
    jsr cvline
    jmp __breturn
    // cvlinexy::@return
  __breturn:
    // [158] return 
    rts
}
  // cvline
// Output a vertical line with the given length at the current cursor position.
cvline: {
    .const length = $17
    .label x = $13
    .label y = $e
    .label i = $d
    // [159] (byte) cvline::x#0 ← (byte) conio_cursor_x#3 -- vbuz1=vbuz2 
    lda.z conio_cursor_x
    sta.z x
    // [160] (byte) cvline::y#0 ← (byte) conio_cursor_y#3 -- vbuz1=vbuz2 
    lda.z conio_cursor_y
    sta.z y
    // [161] phi from cvline to cvline::@1 [phi:cvline->cvline::@1]
  __b1_from_cvline:
    // [161] phi (byte) cvline::y#2 = (byte) cvline::y#0 [phi:cvline->cvline::@1#0] -- register_copy 
    // [161] phi (byte) cvline::i#2 = (byte) 0 [phi:cvline->cvline::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // cvline::@1
  __b1:
    // [162] if((byte) cvline::i#2<(const byte) cvline::length#0) goto cvline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #length
    bcc __b2_from___b1
    jmp __breturn
    // cvline::@return
  __breturn:
    // [163] return 
    rts
    // [164] phi from cvline::@1 to cvline::@2 [phi:cvline::@1->cvline::@2]
  __b2_from___b1:
    jmp __b2
    // cvline::@2
  __b2:
    // [165] call cputc 
    // [93] phi from cvline::@2 to cputc [phi:cvline::@2->cputc]
  cputc_from___b2:
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:cvline::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:cvline::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:cvline::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:cvline::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_VLINE [phi:cvline::@2->cputc#4] -- vbuaa=vbuc1 
    lda #CH_VLINE
    jsr cputc
    jmp __b3
    // cvline::@3
  __b3:
    // [166] (byte) cvline::y#1 ← ++ (byte) cvline::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [167] (byte) gotoxy::x#5 ← (byte) cvline::x#0 -- vbuxx=vbuz1 
    ldx.z x
    // [168] (byte) gotoxy::y#5 ← (byte) cvline::y#1 -- vbuaa=vbuz1 
    lda.z y
    // [169] call gotoxy 
    // [109] phi from cvline::@3 to gotoxy [phi:cvline::@3->gotoxy]
  gotoxy_from___b3:
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#5 [phi:cvline::@3->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#5 [phi:cvline::@3->gotoxy#1] -- register_copy 
    jsr gotoxy
    jmp __b4
    // cvline::@4
  __b4:
    // [170] (byte) cvline::i#1 ← ++ (byte) cvline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [161] phi from cvline::@4 to cvline::@1 [phi:cvline::@4->cvline::@1]
  __b1_from___b4:
    // [161] phi (byte) cvline::y#2 = (byte) cvline::y#1 [phi:cvline::@4->cvline::@1#0] -- register_copy 
    // [161] phi (byte) cvline::i#2 = (byte) cvline::i#1 [phi:cvline::@4->cvline::@1#1] -- register_copy 
    jmp __b1
}
  // cursor
// If onoff is 1, a cursor is displayed when waiting for keyboard input.
// If onoff is 0, the cursor is hidden when waiting for keyboard input.
// The function returns the old cursor setting.
cursor: {
    jmp __breturn
    // cursor::@return
  __breturn:
    // [172] return 
    rts
}
  // bgcolor
// Set the color for the background. The old color setting is returned.
bgcolor: {
    // [173] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK -- _deref_pbuc1=vbuc2 
    lda #COLOR_BLACK
    sta CONIO_BGCOLOR
    jmp __breturn
    // bgcolor::@return
  __breturn:
    // [174] return 
    rts
}
  // bordercolor
// Set the color for the border. The old color setting is returned.
bordercolor: {
    // [175] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK -- _deref_pbuc1=vbuc2 
    lda #COLOR_BLACK
    sta CONIO_BORDERCOLOR
    jmp __breturn
    // bordercolor::@return
  __breturn:
    // [176] return 
    rts
}
  // textcolor
// Set the color for text output. The old color setting is returned.
textcolor: {
    jmp __breturn
    // textcolor::@return
  __breturn:
    // [178] return 
    rts
}
  // screensize
// Return the current screen size.
screensize: {
    .label x = XSize
    .label y = YSize
    // [179] *((const byte*) screensize::x#0) ← (const nomodify byte) CONIO_WIDTH -- _deref_pbuc1=vbuc2 
    lda #CONIO_WIDTH
    sta.z x
    // [180] *((const byte*) screensize::y#0) ← (const nomodify byte) CONIO_HEIGHT -- _deref_pbuc1=vbuc2 
    lda #CONIO_HEIGHT
    sta.z y
    jmp __breturn
    // screensize::@return
  __breturn:
    // [181] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __breturn_from___b2 with __breturn_from___b4
Replacing label __breturn_from___b1 with __breturn_from___b4
Replacing label __b3_from_gotoxy with __b1
Replacing label __b4_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __bend_from___b2:
Removing instruction __b3_from_main:
Removing instruction MakeNiceScreen_from___b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b4:
Removing instruction clrscr_from___b2:
Removing instruction __b3_from_MakeNiceScreen:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b4:
Removing instruction clrscr_from___b5:
Removing instruction __b6_from___b5:
Removing instruction cursor_from___b6:
Removing instruction __b7_from___b6:
Removing instruction __b9_from___b8:
Removing instruction cputc_from___b9:
Removing instruction __b10_from___b9:
Removing instruction __b11_from___b10:
Removing instruction __b13_from___b12:
Removing instruction cputc_from___b13:
Removing instruction __b15_from___b14:
Removing instruction __b16_from___b15:
Removing instruction MakeTeeLine_from___b16:
Removing instruction cputs_from___b1:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b4_from___b3:
Removing instruction gotoxy_from___b4:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from___b2:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4_from___b1:
Removing instruction __b4:
Removing instruction __b2_from___b4:
Removing instruction __b2_from___b1:
Removing instruction cputc_from___b2:
Removing instruction __b2_from___b1:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_cvlinexy:
Removing instruction __b2_from___b1:
Removing instruction cputc_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_clrscr:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b3:
Removing instruction __breturn:
Removing instruction textcolor_from_MakeNiceScreen:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction cputcxy_from___b7:
Removing instruction __b8:
Removing instruction chline_from___b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction cvlinexy_from___b10:
Removing instruction __b11:
Removing instruction cputc_from___b11:
Removing instruction __b12:
Removing instruction chline_from___b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction cvlinexy_from___b14:
Removing instruction __b15:
Removing instruction MakeTeeLine_from___b15:
Removing instruction __b16:
Removing instruction __b1_from___b16:
Removing instruction __breturn:
Removing instruction strlen_from___b2:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b1_from___b18:
Removing instruction gotoxy_from_cputsxy:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction gotoxy_from___b1:
Removing instruction __b1_from_gotoxy:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction cputcxy_from_MakeTeeLine:
Removing instruction __b1:
Removing instruction chline_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_chline:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction gotoxy_from_cputcxy:
Removing instruction __b1:
Removing instruction cputc_from___b1:
Removing instruction __breturn:
Removing instruction gotoxy_from_cvlinexy:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_cvline:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction gotoxy_from___b3:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __breturn in bne __breturn_from___b4
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b4
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b2_from___b1 to __b4
Relabelling long label __breturn_from___b4 to __b2
Relabelling long label __breturn_from___b3 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination

FINAL SYMBOL TABLE
(const byte*) $0::Msg[(number) $28]  = { fill( $28, 0) }
(byte) $0::Y
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte) CH_HLINE = (byte) $40
(const nomodify byte) CH_LLCORNER = (byte) $6d
(const nomodify byte) CH_LRCORNER = (byte) $7d
(const nomodify byte) CH_LTEE = (byte) $6b
(const nomodify byte) CH_RTEE = (byte) $73
(const nomodify byte) CH_ULCORNER = (byte) $70
(const nomodify byte) CH_URCORNER = (byte) $6e
(const nomodify byte) CH_VLINE = (byte) $5d
(const nomodify byte) COLOR_BLACK = (byte) 0
(const nomodify byte) COLOR_GRAY3 = (byte) $f
(const nomodify byte*) CONIO_BGCOLOR = (byte*) 53281
(const nomodify byte*) CONIO_BORDERCOLOR = (byte*) 53280
(const nomodify byte*) CONIO_CIA1_PORT_A = (byte*) 56320
(const nomodify byte*) CONIO_CIA1_PORT_B = (byte*) 56321
(const nomodify byte) CONIO_HEIGHT = (byte) $19
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_WIDTH = (byte) $28
(void()) MakeNiceScreen()
(word~) MakeNiceScreen::$21 zp[2]:11 1001.0
(byte~) MakeNiceScreen::$22 reg byte a 2002.0
(byte~) MakeNiceScreen::$23 reg byte a 2002.0
(label) MakeNiceScreen::@1
(label) MakeNiceScreen::@10
(label) MakeNiceScreen::@11
(label) MakeNiceScreen::@12
(label) MakeNiceScreen::@13
(label) MakeNiceScreen::@14
(label) MakeNiceScreen::@15
(label) MakeNiceScreen::@16
(label) MakeNiceScreen::@17
(label) MakeNiceScreen::@18
(label) MakeNiceScreen::@2
(label) MakeNiceScreen::@3
(label) MakeNiceScreen::@4
(label) MakeNiceScreen::@5
(label) MakeNiceScreen::@6
(label) MakeNiceScreen::@7
(label) MakeNiceScreen::@8
(label) MakeNiceScreen::@9
(label) MakeNiceScreen::@return
(byte) MakeNiceScreen::I
(byte) MakeNiceScreen::I#2 I zp[1]:2 2002.0
(byte) MakeNiceScreen::I#3 I zp[1]:2 214.5
(to_nomodify struct $0*) MakeNiceScreen::T
(to_nomodify struct $0*) MakeNiceScreen::T#2 T zp[2]:3 1001.0
(to_nomodify struct $0*) MakeNiceScreen::T#3 T zp[2]:3 154.0
(const struct $0*) MakeNiceScreen::Text[]  = { { Y: (byte) 2, Msg: (byte*) "Wolfgang Amadeus Mozart" }, { Y: (byte) 4, Msg: (byte*) ""Eine kleine Nachtmusik"" }, { Y: (byte) 5, Msg: (byte*) "(KV 525)" }, { Y: (byte) 9, Msg: (byte*) "Ported to the SID in 1987 by" }, { Y: (byte) $b, Msg: (byte*) "Joachim von Bassewitz" }, { Y: (byte) $c, Msg: (byte*) "(joachim@von-bassewitz.de)" }, { Y: (byte) $d, Msg: (byte*) "and" }, { Y: (byte) $e, Msg: (byte*) "Ullrich von Bassewitz" }, { Y: (byte) $f, Msg: (byte*) "(ullrich@von-bassewitz.de)" }, { Y: (byte) $12, Msg: (byte*) "C Implementation by" }, { Y: (byte) $13, Msg: (byte*) "Ullrich von Bassewitz" }, { Y: (byte) $17, Msg: (byte*) "Press any key to quit..." } }
(byte) MakeNiceScreen::X
(byte) MakeNiceScreen::X#1 reg byte x 1001.0
(void()) MakeTeeLine((byte) MakeTeeLine::Y)
(label) MakeTeeLine::@1
(label) MakeTeeLine::@2
(label) MakeTeeLine::@return
(byte) MakeTeeLine::Y
(byte) MakeTeeLine::Y#2 reg byte a 1001.0
(const nomodify byte*) VIC_MEMORY = (byte*) 53272
(volatile byte) XSize loadstore zp[1]:15 39.101694915254235
(volatile byte) YSize loadstore zp[1]:16 20.0
(byte()) bgcolor((byte) bgcolor::color)
(label) bgcolor::@return
(byte) bgcolor::color
(byte) bgcolor::old
(byte) bgcolor::return
(byte()) bordercolor((byte) bordercolor::color)
(label) bordercolor::@return
(byte) bordercolor::color
(byte) bordercolor::old
(byte) bordercolor::return
(void()) chline((byte) chline::length)
(label) chline::@1
(label) chline::@2
(label) chline::@3
(label) chline::@return
(byte) chline::i
(byte) chline::i#1 i zp[1]:14 200002.0
(byte) chline::i#2 i zp[1]:14 75000.75
(byte) chline::length
(byte) chline::length#0 length zp[1]:13 2002.0
(byte) chline::length#1 length zp[1]:13 202.0
(byte) chline::length#2 length zp[1]:13 202.0
(byte) chline::length#4 length zp[1]:13 16867.333333333332
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 reg byte y 200002.0
(byte) clrscr::c#2 reg byte y 125001.25
(byte) clrscr::l
(byte) clrscr::l#1 reg byte x 20002.0
(byte) clrscr::l#2 reg byte x 3333.6666666666665
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:11 10001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:11 15000.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:3 6667.333333333333
(byte*) clrscr::line_text#5 line_text zp[2]:3 17143.285714285714
(byte*) conio_cursor_color
(byte*) conio_cursor_color#13 conio_cursor_color zp[2]:8 4020000.5999999996
(byte*) conio_cursor_color#3 conio_cursor_color zp[2]:8 5.218304813043478E7
(byte*) conio_cursor_color#49 conio_cursor_color zp[2]:8 4.2042262E7
(byte*) conio_cursor_color#51 conio_cursor_color zp[2]:8 1.7087550375E7
(byte*) conio_cursor_color#6 conio_cursor_color zp[2]:8 6.0000000599999994E7
(byte*) conio_cursor_text
(byte*) conio_cursor_text#13 conio_cursor_text zp[2]:6 4020000.5999999996
(byte*) conio_cursor_text#3 conio_cursor_text zp[2]:6 5.0008754458333336E7
(byte*) conio_cursor_text#49 conio_cursor_text zp[2]:6 7.007043666666667E7
(byte*) conio_cursor_text#51 conio_cursor_text zp[2]:6 1.7087550375E7
(byte*) conio_cursor_text#6 conio_cursor_text zp[2]:6 4.285714328571428E7
(byte) conio_cursor_x
(byte) conio_cursor_x#14 conio_cursor_x zp[1]:10 4020000.5999999996
(byte) conio_cursor_x#3 conio_cursor_x zp[1]:10 3.871677767741935E7
(byte) conio_cursor_x#50 conio_cursor_x zp[1]:10 1.83685515E7
(byte) conio_cursor_x#52 conio_cursor_x zp[1]:10 1.2920883666666668E7
(byte) conio_cursor_x#6 conio_cursor_x zp[1]:10 1.500000015E8
(byte) conio_cursor_y
(byte) conio_cursor_y#13 conio_cursor_y zp[1]:5 4020000.5999999996
(byte) conio_cursor_y#3 conio_cursor_y zp[1]:5 4.000733693333334E7
(byte) conio_cursor_y#48 conio_cursor_y zp[1]:5 3.8776413875E7
(byte) conio_cursor_y#52 conio_cursor_y zp[1]:5 1.7087550375E7
(byte) conio_cursor_y#6 conio_cursor_y zp[1]:5 1.500000015E8
(byte) conio_display_cursor
(byte) conio_textcolor
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 20002.0
(byte) cputc::c#1 reg byte a 2.0000002E7
(byte) cputc::c#8 reg byte a 1.05005002E8
(void()) cputcxy((byte) cputcxy::x , (byte) cputcxy::y , (byte) cputcxy::c)
(label) cputcxy::@1
(label) cputcxy::@return
(byte) cputcxy::c
(byte) cputcxy::c#2 reg byte y 3333.6666666666665
(byte) cputcxy::x
(byte) cputcxy::y
(byte) cputcxy::y#0 reg byte a 2002.0
(byte) cputcxy::y#2 reg byte a 11002.0
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:11 5000000.5
(to_nomodify byte*) cputs::s#1 s zp[2]:11 55001.0
(to_nomodify byte*) cputs::s#2 s zp[2]:11 1.5050002E7
(void()) cputsxy((byte) cputsxy::x , (byte) cputsxy::y , (to_nomodify byte*) cputsxy::s)
(label) cputsxy::@1
(label) cputsxy::@return
(to_nomodify byte*) cputsxy::s
(to_nomodify byte*) cputsxy::s#0 s zp[2]:11 1833.6666666666665
(byte) cputsxy::x
(byte) cputsxy::x#0 reg byte x 5501.0
(byte) cputsxy::y
(byte) cputsxy::y#0 reg byte a 5501.0
(byte()) cursor((byte) cursor::onoff)
(label) cursor::@return
(byte) cursor::old
(byte) cursor::onoff
(byte) cursor::return
(void()) cvline((byte) cvline::length)
(label) cvline::@1
(label) cvline::@2
(label) cvline::@3
(label) cvline::@4
(label) cvline::@return
(byte) cvline::i
(byte) cvline::i#1 i zp[1]:13 200002.0
(byte) cvline::i#2 i zp[1]:13 37500.375
(byte) cvline::length
(const byte) cvline::length#0 length = (byte) $17
(byte) cvline::x
(byte) cvline::x#0 x zp[1]:19 10000.181818181818
(byte) cvline::y
(byte) cvline::y#0 y zp[1]:14 20002.0
(byte) cvline::y#1 y zp[1]:14 60000.600000000006
(byte) cvline::y#2 y zp[1]:14 52500.75
(void()) cvlinexy((byte) cvlinexy::x , (byte) cvlinexy::y , (byte) cvlinexy::length)
(label) cvlinexy::@1
(label) cvlinexy::@return
(byte) cvlinexy::length
(byte) cvlinexy::x
(byte) cvlinexy::x#1 reg byte x 202.0
(byte) cvlinexy::x#2 reg byte x 1102.0
(byte) cvlinexy::y
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word~) gotoxy::$10 zp[2]:8 2.000000002E9
(word~) gotoxy::$4 zp[2]:8 1.5000000015E9
(word~) gotoxy::$5 zp[2]:8 2.000000002E9
(word~) gotoxy::$9 zp[2]:17 2.000000002E9
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0 offset zp[2]:8 1.5000000015E9
(byte) gotoxy::x
(byte) gotoxy::x#10 reg byte x 3.0000000029999995E8
(byte) gotoxy::x#4 reg byte x 10001.0
(byte) gotoxy::x#5 reg byte x 100001.0
(byte) gotoxy::x#6 reg byte x 2002.0
(byte) gotoxy::x#7 reg byte x 6.667036683333334E8
(byte) gotoxy::y
(byte) gotoxy::y#1 reg byte a 2.00000002E8
(byte) gotoxy::y#10 reg byte a 3.50020001E8
(byte) gotoxy::y#3 reg byte a 20002.0
(byte) gotoxy::y#4 reg byte a 20002.0
(byte) gotoxy::y#5 reg byte a 200002.0
(byte) gotoxy::y#8 reg byte a 6.666666673333334E8
(byte()) kbhit()
(label) kbhit::@return
(byte) kbhit::return
(byte) kbhit::return#0 reg byte a 367.33333333333337
(byte) kbhit::return#2 reg byte a 202.0
(void()) main()
(byte~) main::$3 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) screensize((byte*) screensize::x , (byte*) screensize::y)
(label) screensize::@return
(byte*) screensize::x
(const byte*) screensize::x#0 x = &(volatile byte) XSize
(byte*) screensize::y
(const byte*) screensize::y#0 y = &(volatile byte) YSize
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:11 1000001.0
(word) strlen::len#2 len zp[2]:11 500250.75
(word) strlen::return
(word) strlen::return#2 return zp[2]:11 2002.0
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:17 2000002.0
(byte*) strlen::str#1 str zp[2]:17 5501.0
(byte*) strlen::str#2 str zp[2]:17 1003334.6666666667
(byte()) textcolor((byte) textcolor::color)
(label) textcolor::@return
(byte) textcolor::color
(byte) textcolor::old
(byte) textcolor::return

reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[1]:2 [ MakeNiceScreen::I#3 MakeNiceScreen::I#2 ]
zp[2]:3 [ MakeNiceScreen::T#3 MakeNiceScreen::T#2 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte a [ cputc::c#8 cputc::c#0 cputc::c#1 ]
zp[1]:5 [ conio_cursor_y#48 conio_cursor_y#13 conio_cursor_y#3 conio_cursor_y#52 conio_cursor_y#6 ]
zp[2]:6 [ conio_cursor_text#49 conio_cursor_text#13 conio_cursor_text#3 conio_cursor_text#51 conio_cursor_text#6 ]
zp[2]:8 [ conio_cursor_color#49 conio_cursor_color#13 conio_cursor_color#3 conio_cursor_color#51 conio_cursor_color#6 gotoxy::offset#0 gotoxy::$5 gotoxy::$4 gotoxy::$10 ]
zp[1]:10 [ conio_cursor_x#50 conio_cursor_x#14 conio_cursor_x#3 conio_cursor_x#52 conio_cursor_x#6 ]
reg byte x [ gotoxy::x#10 gotoxy::x#7 gotoxy::x#4 gotoxy::x#5 gotoxy::x#6 ]
reg byte a [ gotoxy::y#8 gotoxy::y#10 gotoxy::y#1 gotoxy::y#3 gotoxy::y#4 gotoxy::y#5 ]
zp[2]:11 [ strlen::len#2 strlen::len#1 strlen::return#2 MakeNiceScreen::$21 cputs::s#2 cputs::s#1 cputs::s#0 cputsxy::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte a [ MakeTeeLine::Y#2 ]
reg byte a [ cputcxy::y#2 cputcxy::y#0 ]
reg byte y [ cputcxy::c#2 ]
reg byte x [ cvlinexy::x#2 cvlinexy::x#1 ]
zp[1]:13 [ cvline::i#2 cvline::i#1 chline::length#4 chline::length#1 chline::length#2 chline::length#0 ]
zp[1]:14 [ cvline::y#2 cvline::y#0 cvline::y#1 chline::i#2 chline::i#1 ]
zp[1]:15 [ XSize ]
zp[1]:16 [ YSize ]
reg byte a [ kbhit::return#2 ]
reg byte a [ main::$3 ]
reg byte a [ kbhit::return#0 ]
reg byte a [ MakeNiceScreen::$22 ]
reg byte a [ MakeNiceScreen::$23 ]
reg byte x [ MakeNiceScreen::X#1 ]
reg byte x [ cputsxy::x#0 ]
reg byte a [ cputsxy::y#0 ]
reg byte a [ cputs::c#1 ]
zp[2]:17 [ gotoxy::$9 strlen::str#2 strlen::str#1 strlen::str#0 ]
zp[1]:19 [ cvline::x#0 ]


FINAL ASSEMBLER
Score: 13128

  // File Comments
// Show a nice screen using conio.h
// From CC65 sample "Eine kleine Nachtmusik" by Ullrich von Bassewitz
// https://github.com/cc65/cc65/blob/master/samples/nachtm.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The horizontal line character
  .const CH_HLINE = $40
  // The vertical line character
  .const CH_VLINE = $5d
  // The upper left corner character
  .const CH_ULCORNER = $70
  // The upper right corner character
  .const CH_URCORNER = $6e
  // The lower left corner character
  .const CH_LLCORNER = $6d
  // The lower right corner character
  .const CH_LRCORNER = $7d
  // The left T character
  .const CH_LTEE = $6b
  // The right T character
  .const CH_RTEE = $73
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The background color register address
  .label CONIO_BGCOLOR = $d021
  // The border color register address
  .label CONIO_BORDERCOLOR = $d020
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CONIO_CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CONIO_CIA1_PORT_B = $dc01
  // The screen width
  .const CONIO_WIDTH = $28
  // The screen height
  .const CONIO_HEIGHT = $19
  .const COLOR_GRAY3 = $f
  .const COLOR_BLACK = 0
  .label VIC_MEMORY = $d018
  .label XSize = $f
  .label YSize = $10
  // The current cursor x-position
  .label conio_cursor_x = $a
  // The current cursor y-position
  .label conio_cursor_y = 5
  // The current cursor address
  .label conio_cursor_text = 6
  // The current cursor address
  .label conio_cursor_color = 8
  // @begin
__bbegin:
  // @1
  // XSize
  // [1] (volatile byte) XSize ← (byte) 0 -- vbuz1=vbuc1 
  lda #0
  sta.z XSize
  // YSize
  // [2] (volatile byte) YSize ← (byte) 0 -- vbuz1=vbuc1 
  sta.z YSize
  // [3] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [4] call main 
  jsr main
  rts
  // [5] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // *VIC_MEMORY = 0x17
    // [6] *((const nomodify byte*) VIC_MEMORY) ← (byte) $17 -- _deref_pbuc1=vbuc2 
    lda #$17
    sta VIC_MEMORY
    // screensize(&XSize, &YSize)
    // [7] call screensize 
    jsr screensize
    // [8] phi from main to main::@3 [phi:main->main::@3]
    // main::@3
    // MakeNiceScreen()
    // [9] call MakeNiceScreen 
    // [33] phi from main::@3 to MakeNiceScreen [phi:main::@3->MakeNiceScreen]
    jsr MakeNiceScreen
    // [10] phi from main::@3 main::@4 to main::@1 [phi:main::@3/main::@4->main::@1]
    // main::@1
  __b1:
    // kbhit()
    // [11] call kbhit 
    jsr kbhit
    // [12] (byte) kbhit::return#2 ← (byte) kbhit::return#0
    // main::@4
    // [13] (byte~) main::$3 ← (byte) kbhit::return#2
    // while(!kbhit())
    // [14] if((byte) 0==(byte~) main::$3) goto main::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // [15] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // main::@2
    // clrscr ()
    // [16] call clrscr 
    // [18] phi from main::@2 to clrscr [phi:main::@2->clrscr]
    jsr clrscr
    // main::@return
    // }
    // [17] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 3
    .label line_cols = $b
    // [19] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [19] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [19] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [19] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [20] if((byte) clrscr::l#2<(const nomodify byte) CONIO_HEIGHT) goto clrscr::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #CONIO_HEIGHT
    bcc __b4
    // clrscr::@return
    // }
    // [21] return 
    rts
    // [22] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b4:
    // [22] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@2
  __b2:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [23] if((byte) clrscr::c#2<(const nomodify byte) CONIO_WIDTH) goto clrscr::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #CONIO_WIDTH
    bcc __b3
    // clrscr::@4
    // line_text += CONIO_WIDTH
    // [24] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [25] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (const nomodify byte) CONIO_WIDTH -- pbuz1=pbuz1_plus_vbuc1 
    lda #CONIO_WIDTH
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [26] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [19] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
    // [19] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [19] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [19] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // line_text[c] = ' '
    // [27] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [28] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) COLOR_GRAY3 -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #COLOR_GRAY3
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [29] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [22] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
    // [22] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // *CONIO_CIA1_PORT_A = 0
    // [30] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CONIO_CIA1_PORT_A
    // ~*CONIO_CIA1_PORT_B
    // [31] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CONIO_CIA1_PORT_B
    eor #$ff
    // kbhit::@return
    // }
    // [32] return 
    rts
}
  // MakeNiceScreen
MakeNiceScreen: {
    .label __21 = $b
    .label T = 3
    .label I = 2
    // textcolor (COLOR_GRAY3)
    // [34] call textcolor 
  /* Clear the screen hide the cursor, set colors */
    // [177] phi from MakeNiceScreen to textcolor [phi:MakeNiceScreen->textcolor]
    jsr textcolor
    // [35] phi from MakeNiceScreen to MakeNiceScreen::@3 [phi:MakeNiceScreen->MakeNiceScreen::@3]
    // MakeNiceScreen::@3
    // bordercolor (COLOR_BLACK)
    // [36] call bordercolor 
    jsr bordercolor
    // [37] phi from MakeNiceScreen::@3 to MakeNiceScreen::@4 [phi:MakeNiceScreen::@3->MakeNiceScreen::@4]
    // MakeNiceScreen::@4
    // bgcolor (COLOR_BLACK)
    // [38] call bgcolor 
    jsr bgcolor
    // [39] phi from MakeNiceScreen::@4 to MakeNiceScreen::@5 [phi:MakeNiceScreen::@4->MakeNiceScreen::@5]
    // MakeNiceScreen::@5
    // clrscr ()
    // [40] call clrscr 
    // [18] phi from MakeNiceScreen::@5 to clrscr [phi:MakeNiceScreen::@5->clrscr]
    jsr clrscr
    // [41] phi from MakeNiceScreen::@5 to MakeNiceScreen::@6 [phi:MakeNiceScreen::@5->MakeNiceScreen::@6]
    // MakeNiceScreen::@6
    // cursor (0)
    // [42] call cursor 
    // [171] phi from MakeNiceScreen::@6 to cursor [phi:MakeNiceScreen::@6->cursor]
    jsr cursor
    // [43] phi from MakeNiceScreen::@6 to MakeNiceScreen::@7 [phi:MakeNiceScreen::@6->MakeNiceScreen::@7]
    // MakeNiceScreen::@7
    // cputcxy (0, 0, CH_ULCORNER)
    // [44] call cputcxy 
  /* Top line */
    // [147] phi from MakeNiceScreen::@7 to cputcxy [phi:MakeNiceScreen::@7->cputcxy]
    // [147] phi (byte) cputcxy::c#2 = (const nomodify byte) CH_ULCORNER [phi:MakeNiceScreen::@7->cputcxy#0] -- vbuyy=vbuc1 
    ldy #CH_ULCORNER
    // [147] phi (byte) cputcxy::y#2 = (byte) 0 [phi:MakeNiceScreen::@7->cputcxy#1] -- vbuaa=vbuc1 
    lda #0
    jsr cputcxy
    // MakeNiceScreen::@8
    // chline (XSize - 2)
    // [45] (byte) chline::length#1 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [46] call chline 
    // [140] phi from MakeNiceScreen::@8 to chline [phi:MakeNiceScreen::@8->chline]
    // [140] phi (byte) chline::length#4 = (byte) chline::length#1 [phi:MakeNiceScreen::@8->chline#0] -- register_copy 
    jsr chline
    // [47] phi from MakeNiceScreen::@8 to MakeNiceScreen::@9 [phi:MakeNiceScreen::@8->MakeNiceScreen::@9]
    // MakeNiceScreen::@9
    // cputc (CH_URCORNER)
    // [48] call cputc 
    // [93] phi from MakeNiceScreen::@9 to cputc [phi:MakeNiceScreen::@9->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeNiceScreen::@9->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeNiceScreen::@9->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeNiceScreen::@9->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeNiceScreen::@9->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_URCORNER [phi:MakeNiceScreen::@9->cputc#4] -- vbuaa=vbuc1 
    lda #CH_URCORNER
    jsr cputc
    // [49] phi from MakeNiceScreen::@9 to MakeNiceScreen::@10 [phi:MakeNiceScreen::@9->MakeNiceScreen::@10]
    // MakeNiceScreen::@10
    // cvlinexy (0, 1, 23)
    // [50] call cvlinexy 
  /* Left line */
    // [153] phi from MakeNiceScreen::@10 to cvlinexy [phi:MakeNiceScreen::@10->cvlinexy]
    // [153] phi (byte) cvlinexy::x#2 = (byte) 0 [phi:MakeNiceScreen::@10->cvlinexy#0] -- vbuxx=vbuc1 
    ldx #0
    jsr cvlinexy
    // [51] phi from MakeNiceScreen::@10 to MakeNiceScreen::@11 [phi:MakeNiceScreen::@10->MakeNiceScreen::@11]
    // MakeNiceScreen::@11
    // cputc (CH_LLCORNER)
    // [52] call cputc 
  /* Bottom line */
    // [93] phi from MakeNiceScreen::@11 to cputc [phi:MakeNiceScreen::@11->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:MakeNiceScreen::@11->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:MakeNiceScreen::@11->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:MakeNiceScreen::@11->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:MakeNiceScreen::@11->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_LLCORNER [phi:MakeNiceScreen::@11->cputc#4] -- vbuaa=vbuc1 
    lda #CH_LLCORNER
    jsr cputc
    // MakeNiceScreen::@12
    // chline (XSize - 2)
    // [53] (byte) chline::length#2 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [54] call chline 
    // [140] phi from MakeNiceScreen::@12 to chline [phi:MakeNiceScreen::@12->chline]
    // [140] phi (byte) chline::length#4 = (byte) chline::length#2 [phi:MakeNiceScreen::@12->chline#0] -- register_copy 
    jsr chline
    // [55] phi from MakeNiceScreen::@12 to MakeNiceScreen::@13 [phi:MakeNiceScreen::@12->MakeNiceScreen::@13]
    // MakeNiceScreen::@13
    // cputc (CH_LRCORNER)
    // [56] call cputc 
    // [93] phi from MakeNiceScreen::@13 to cputc [phi:MakeNiceScreen::@13->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeNiceScreen::@13->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeNiceScreen::@13->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeNiceScreen::@13->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeNiceScreen::@13->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_LRCORNER [phi:MakeNiceScreen::@13->cputc#4] -- vbuaa=vbuc1 
    lda #CH_LRCORNER
    jsr cputc
    // MakeNiceScreen::@14
    // cvlinexy (XSize - 1, 1, 23)
    // [57] (byte) cvlinexy::x#1 ← (volatile byte) XSize - (byte) 1 -- vbuxx=vbuz1_minus_1 
    ldx.z XSize
    dex
    // [58] call cvlinexy 
  /* Right line */
    // [153] phi from MakeNiceScreen::@14 to cvlinexy [phi:MakeNiceScreen::@14->cvlinexy]
    // [153] phi (byte) cvlinexy::x#2 = (byte) cvlinexy::x#1 [phi:MakeNiceScreen::@14->cvlinexy#0] -- register_copy 
    jsr cvlinexy
    // [59] phi from MakeNiceScreen::@14 to MakeNiceScreen::@15 [phi:MakeNiceScreen::@14->MakeNiceScreen::@15]
    // MakeNiceScreen::@15
    // MakeTeeLine (7)
    // [60] call MakeTeeLine 
  /* Several divider lines */
    // [132] phi from MakeNiceScreen::@15 to MakeTeeLine [phi:MakeNiceScreen::@15->MakeTeeLine]
    // [132] phi (byte) MakeTeeLine::Y#2 = (byte) 7 [phi:MakeNiceScreen::@15->MakeTeeLine#0] -- vbuaa=vbuc1 
    lda #7
    jsr MakeTeeLine
    // [61] phi from MakeNiceScreen::@15 to MakeNiceScreen::@16 [phi:MakeNiceScreen::@15->MakeNiceScreen::@16]
    // MakeNiceScreen::@16
    // MakeTeeLine (22)
    // [62] call MakeTeeLine 
    // [132] phi from MakeNiceScreen::@16 to MakeTeeLine [phi:MakeNiceScreen::@16->MakeTeeLine]
    // [132] phi (byte) MakeTeeLine::Y#2 = (byte) $16 [phi:MakeNiceScreen::@16->MakeTeeLine#0] -- vbuaa=vbuc1 
    lda #$16
    jsr MakeTeeLine
    // [63] phi from MakeNiceScreen::@16 to MakeNiceScreen::@1 [phi:MakeNiceScreen::@16->MakeNiceScreen::@1]
    // [63] phi (to_nomodify struct $0*) MakeNiceScreen::T#3 = (const struct $0*) MakeNiceScreen::Text [phi:MakeNiceScreen::@16->MakeNiceScreen::@1#0] -- pssz1=pssc1 
    lda #<Text
    sta.z T
    lda #>Text
    sta.z T+1
    // [63] phi (byte) MakeNiceScreen::I#3 = (byte) 0 [phi:MakeNiceScreen::@16->MakeNiceScreen::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z I
  /* Write something into the frame */
    // MakeNiceScreen::@1
  __b1:
    // for (I = 0, T = Text; I < sizeof (Text) / sizeof (TextDesc); ++I)
    // [64] if((byte) MakeNiceScreen::I#3<(byte) $c*(byte) $29/(byte) $29) goto MakeNiceScreen::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z I
    cmp #$c*$29/$29
    bcc __b2
    // MakeNiceScreen::@return
    // }
    // [65] return 
    rts
    // MakeNiceScreen::@2
  __b2:
    // strlen (T->Msg)
    // [66] (byte*) strlen::str#1 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z T
    clc
    adc #1
    sta.z strlen.str
    lda.z T+1
    adc #0
    sta.z strlen.str+1
    // [67] call strlen 
    // [126] phi from MakeNiceScreen::@2 to strlen [phi:MakeNiceScreen::@2->strlen]
    jsr strlen
    // strlen (T->Msg)
    // [68] (word) strlen::return#2 ← (word) strlen::len#2
    // MakeNiceScreen::@17
    // [69] (word~) MakeNiceScreen::$21 ← (word) strlen::return#2
    // (char)strlen (T->Msg)
    // [70] (byte~) MakeNiceScreen::$22 ← (byte)(word~) MakeNiceScreen::$21 -- vbuaa=_byte_vwuz1 
    lda.z __21
    // XSize - (char)strlen (T->Msg)
    // [71] (byte~) MakeNiceScreen::$23 ← (volatile byte) XSize - (byte~) MakeNiceScreen::$22 -- vbuaa=vbuz1_minus_vbuaa 
    eor #$ff
    sec
    adc.z XSize
    // X = (XSize - (char)strlen (T->Msg)) >> 1
    // [72] (byte) MakeNiceScreen::X#1 ← (byte~) MakeNiceScreen::$23 >> (byte) 1 -- vbuxx=vbuaa_ror_1 
    lsr
    tax
    // cputsxy (X, T->Y, T->Msg)
    // [73] (to_nomodify byte*) cputsxy::s#0 ← (byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda.z T
    clc
    adc #1
    sta.z cputsxy.s
    lda.z T+1
    adc #0
    sta.z cputsxy.s+1
    // [74] (byte) cputsxy::x#0 ← (byte) MakeNiceScreen::X#1
    // [75] (byte) cputsxy::y#0 ← *((byte*)(to_nomodify struct $0*) MakeNiceScreen::T#3) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (T),y
    // [76] call cputsxy 
    jsr cputsxy
    // MakeNiceScreen::@18
    // ++T;
    // [77] (to_nomodify struct $0*) MakeNiceScreen::T#2 ← (to_nomodify struct $0*) MakeNiceScreen::T#3 + (byte) $29 -- pssz1=pssz1_plus_vbuc1 
    lda #$29
    clc
    adc.z T
    sta.z T
    bcc !+
    inc.z T+1
  !:
    // for (I = 0, T = Text; I < sizeof (Text) / sizeof (TextDesc); ++I)
    // [78] (byte) MakeNiceScreen::I#2 ← ++ (byte) MakeNiceScreen::I#3 -- vbuz1=_inc_vbuz1 
    inc.z I
    // [63] phi from MakeNiceScreen::@18 to MakeNiceScreen::@1 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1]
    // [63] phi (to_nomodify struct $0*) MakeNiceScreen::T#3 = (to_nomodify struct $0*) MakeNiceScreen::T#2 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1#0] -- register_copy 
    // [63] phi (byte) MakeNiceScreen::I#3 = (byte) MakeNiceScreen::I#2 [phi:MakeNiceScreen::@18->MakeNiceScreen::@1#1] -- register_copy 
    jmp __b1
    Text: .byte 2
    .text "Wolfgang Amadeus Mozart"
    .byte 0
    .fill $10, 0
    .byte 4
    .text @"\"Eine kleine Nachtmusik\""
    .byte 0
    .fill $f, 0
    .byte 5
    .text "(KV 525)"
    .byte 0
    .fill $1f, 0
    .byte 9
    .text "Ported to the SID in 1987 by"
    .byte 0
    .fill $b, 0
    .byte $b
    .text "Joachim von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $c
    .text "(joachim@von-bassewitz.de)"
    .byte 0
    .fill $d, 0
    .byte $d
    .text "and"
    .byte 0
    .fill $24, 0
    .byte $e
    .text "Ullrich von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $f
    .text "(ullrich@von-bassewitz.de)"
    .byte 0
    .fill $d, 0
    .byte $12
    .text "C Implementation by"
    .byte 0
    .fill $14, 0
    .byte $13
    .text "Ullrich von Bassewitz"
    .byte 0
    .fill $12, 0
    .byte $17
    .text "Press any key to quit..."
    .byte 0
    .fill $f, 0
}
  // cputsxy
// Move cursor and output a NUL-terminated string
// Same as "gotoxy (x, y); puts (s);"
// cputsxy(byte register(X) x, byte register(A) y, byte* zp($b) s)
cputsxy: {
    .label s = $b
    // gotoxy(x, y)
    // [79] (byte) gotoxy::x#4 ← (byte) cputsxy::x#0
    // [80] (byte) gotoxy::y#4 ← (byte) cputsxy::y#0
    // [81] call gotoxy 
    // [109] phi from cputsxy to gotoxy [phi:cputsxy->gotoxy]
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#4 [phi:cputsxy->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#4 [phi:cputsxy->gotoxy#1] -- register_copy 
    jsr gotoxy
    // cputsxy::@1
    // cputs(s)
    // [82] (to_nomodify byte*) cputs::s#1 ← (to_nomodify byte*) cputsxy::s#0
    // [83] call cputs 
    // [85] phi from cputsxy::@1 to cputs [phi:cputsxy::@1->cputs]
    jsr cputs
    // cputsxy::@return
    // }
    // [84] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($b) s)
cputs: {
    .label s = $b
    // [86] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [86] phi (byte*) conio_cursor_color#13 = (byte*) conio_cursor_color#3 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // [86] phi (byte*) conio_cursor_text#13 = (byte*) conio_cursor_text#3 [phi:cputs/cputs::@2->cputs::@1#1] -- register_copy 
    // [86] phi (byte) conio_cursor_y#13 = (byte) conio_cursor_y#3 [phi:cputs/cputs::@2->cputs::@1#2] -- register_copy 
    // [86] phi (byte) conio_cursor_x#14 = (byte) conio_cursor_x#3 [phi:cputs/cputs::@2->cputs::@1#3] -- register_copy 
    // [86] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#1 [phi:cputs/cputs::@2->cputs::@1#4] -- register_copy 
    // cputs::@1
  __b1:
    // c=*s++
    // [87] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [88] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [89] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [90] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [91] (byte) cputc::c#1 ← (byte) cputs::c#1
    // [92] call cputc 
    // [93] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#14 [phi:cputs::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#13 [phi:cputs::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#13 [phi:cputs::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#13 [phi:cputs::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (byte) cputc::c#1 [phi:cputs::@2->cputc#4] -- register_copy 
    jsr cputc
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [94] if((byte) cputc::c#8==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [95] *((byte*) conio_cursor_text#49) ← (byte) cputc::c#8 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [96] (byte*) conio_cursor_text#6 ← ++ (byte*) conio_cursor_text#49 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [97] *((byte*) conio_cursor_color#49) ← (const nomodify byte) COLOR_GRAY3 -- _deref_pbuz1=vbuc1 
    lda #COLOR_GRAY3
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [98] (byte*) conio_cursor_color#6 ← ++ (byte*) conio_cursor_color#49 -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [99] (byte) conio_cursor_x#6 ← ++ (byte) conio_cursor_x#50 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [100] if((byte) conio_cursor_x#6!=(const nomodify byte) CONIO_WIDTH) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_WIDTH
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // if(++conio_cursor_y==CONIO_HEIGHT)
    // [101] (byte) conio_cursor_y#6 ← ++ (byte) conio_cursor_y#48 -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [102] if((byte) conio_cursor_y#6!=(const nomodify byte) CONIO_HEIGHT) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #CONIO_HEIGHT
    cmp.z conio_cursor_y
    bne __b3
    // [103] phi from cputc::@3 to cputc::@4 [phi:cputc::@3->cputc::@4]
    // cputc::@4
    // gotoxy(0,0)
    // [104] call gotoxy 
    // [109] phi from cputc::@4 to gotoxy [phi:cputc::@4->gotoxy]
    // [109] phi (byte) gotoxy::y#10 = (byte) 0 [phi:cputc::@4->gotoxy#0] -- vbuaa=vbuc1 
    lda #0
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputc::@4->gotoxy#1] -- vbuxx=vbuc1 
    tax
    jsr gotoxy
    // [105] phi from cputc::@1 cputc::@2 cputc::@4 to cputc::@return [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return]
    // [105] phi (byte*) conio_cursor_color#51 = (byte*) conio_cursor_color#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#0] -- register_copy 
    // [105] phi (byte*) conio_cursor_text#51 = (byte*) conio_cursor_text#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#1] -- register_copy 
    // [105] phi (byte) conio_cursor_y#52 = (byte) conio_cursor_y#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#2] -- register_copy 
    // [105] phi (byte) conio_cursor_x#52 = (byte) conio_cursor_x#3 [phi:cputc::@1/cputc::@2/cputc::@4->cputc::@return#3] -- register_copy 
    rts
    // [105] phi from cputc::@3 to cputc::@return [phi:cputc::@3->cputc::@return]
  __b3:
    // [105] phi (byte*) conio_cursor_color#51 = (byte*) conio_cursor_color#6 [phi:cputc::@3->cputc::@return#0] -- register_copy 
    // [105] phi (byte*) conio_cursor_text#51 = (byte*) conio_cursor_text#6 [phi:cputc::@3->cputc::@return#1] -- register_copy 
    // [105] phi (byte) conio_cursor_y#52 = (byte) conio_cursor_y#6 [phi:cputc::@3->cputc::@return#2] -- register_copy 
    // [105] phi (byte) conio_cursor_x#52 = (byte) 0 [phi:cputc::@3->cputc::@return#3] -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // cputc::@return
  __breturn:
    // }
    // [106] return 
    rts
    // cputc::@1
  __b1:
    // gotoxy(0, conio_cursor_y+1)
    // [107] (byte) gotoxy::y#1 ← (byte) conio_cursor_y#48 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z conio_cursor_y
    clc
    adc #1
    // [108] call gotoxy 
    // [109] phi from cputc::@1 to gotoxy [phi:cputc::@1->gotoxy]
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#1 [phi:cputc::@1->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputc::@1->gotoxy#1] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) x, byte register(A) y)
gotoxy: {
    .label __4 = 8
    .label __5 = 8
    .label offset = 8
    .label __9 = $11
    .label __10 = 8
    // if(x>=CONIO_WIDTH)
    // [110] if((byte) gotoxy::x#7<(const nomodify byte) CONIO_WIDTH) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #CONIO_WIDTH
    bcc __b1
    // [112] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [112] phi (byte) gotoxy::x#10 = (byte) 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [111] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [112] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [112] phi (byte) gotoxy::x#10 = (byte) gotoxy::x#7 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
  __b1:
    // if(y>=CONIO_HEIGHT)
    // [113] if((byte) gotoxy::y#10<(const nomodify byte) CONIO_HEIGHT) goto gotoxy::@4 -- vbuaa_lt_vbuc1_then_la1 
    cmp #CONIO_HEIGHT
    bcc __b2
    // [115] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
    // [115] phi (byte) gotoxy::y#8 = (byte) 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuaa=vbuc1 
    lda #0
    // [114] phi from gotoxy::@1 to gotoxy::@4 [phi:gotoxy::@1->gotoxy::@4]
    // gotoxy::@4
    // [115] phi from gotoxy::@4 to gotoxy::@2 [phi:gotoxy::@4->gotoxy::@2]
    // [115] phi (byte) gotoxy::y#8 = (byte) gotoxy::y#10 [phi:gotoxy::@4->gotoxy::@2#0] -- register_copy 
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [116] (byte) conio_cursor_x#3 ← (byte) gotoxy::x#10 -- vbuz1=vbuxx 
    stx.z conio_cursor_x
    // conio_cursor_y = y
    // [117] (byte) conio_cursor_y#3 ← (byte) gotoxy::y#8 -- vbuz1=vbuaa 
    sta.z conio_cursor_y
    // (unsigned int)y
    // [118] (word~) gotoxy::$4 ← (word)(byte) gotoxy::y#8 -- vwuz1=_word_vbuaa 
    sta.z __4
    lda #0
    sta.z __4+1
    // (unsigned int)y*CONIO_WIDTH
    // [119] (word~) gotoxy::$9 ← (word~) gotoxy::$4 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda.z __4
    asl
    sta.z __9
    lda.z __4+1
    rol
    sta.z __9+1
    asl.z __9
    rol.z __9+1
    // [120] (word~) gotoxy::$10 ← (word~) gotoxy::$9 + (word~) gotoxy::$4 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __10
    clc
    adc.z __9
    sta.z __10
    lda.z __10+1
    adc.z __9+1
    sta.z __10+1
    // [121] (word~) gotoxy::$5 ← (word~) gotoxy::$10 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __5
    rol.z __5+1
    asl.z __5
    rol.z __5+1
    asl.z __5
    rol.z __5+1
    // offset = (unsigned int)y*CONIO_WIDTH + x
    // [122] (word) gotoxy::offset#0 ← (word~) gotoxy::$5 + (byte) gotoxy::x#10 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z offset
    sta.z offset
    bcc !+
    inc.z offset+1
  !:
    // CONIO_SCREEN_TEXT + offset
    // [123] (byte*) conio_cursor_text#3 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z offset
    clc
    adc #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda.z offset+1
    adc #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // CONIO_SCREEN_COLORS + offset
    // [124] (byte*) conio_cursor_color#3 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z conio_cursor_color
    adc #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda.z conio_cursor_color+1
    adc #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // gotoxy::@return
    // }
    // [125] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($11) str)
strlen: {
    .label len = $b
    .label str = $11
    .label return = $b
    // [127] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [127] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [127] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    // strlen::@1
  __b1:
    // while(*str)
    // [128] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [129] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [130] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [131] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [127] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [127] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [127] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // MakeTeeLine
// MakeTeeLine(byte register(A) Y)
MakeTeeLine: {
    // cputcxy (0, Y, CH_LTEE)
    // [133] (byte) cputcxy::y#0 ← (byte) MakeTeeLine::Y#2
    // [134] call cputcxy 
    // [147] phi from MakeTeeLine to cputcxy [phi:MakeTeeLine->cputcxy]
    // [147] phi (byte) cputcxy::c#2 = (const nomodify byte) CH_LTEE [phi:MakeTeeLine->cputcxy#0] -- vbuyy=vbuc1 
    ldy #CH_LTEE
    // [147] phi (byte) cputcxy::y#2 = (byte) cputcxy::y#0 [phi:MakeTeeLine->cputcxy#1] -- register_copy 
    jsr cputcxy
    // MakeTeeLine::@1
    // chline (XSize - 2)
    // [135] (byte) chline::length#0 ← (volatile byte) XSize - (byte) 2 -- vbuz1=vbuz2_minus_2 
    lda.z XSize
    sec
    sbc #2
    sta.z chline.length
    // [136] call chline 
    // [140] phi from MakeTeeLine::@1 to chline [phi:MakeTeeLine::@1->chline]
    // [140] phi (byte) chline::length#4 = (byte) chline::length#0 [phi:MakeTeeLine::@1->chline#0] -- register_copy 
    jsr chline
    // [137] phi from MakeTeeLine::@1 to MakeTeeLine::@2 [phi:MakeTeeLine::@1->MakeTeeLine::@2]
    // MakeTeeLine::@2
    // cputc (CH_RTEE)
    // [138] call cputc 
    // [93] phi from MakeTeeLine::@2 to cputc [phi:MakeTeeLine::@2->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:MakeTeeLine::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:MakeTeeLine::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:MakeTeeLine::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:MakeTeeLine::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_RTEE [phi:MakeTeeLine::@2->cputc#4] -- vbuaa=vbuc1 
    lda #CH_RTEE
    jsr cputc
    // MakeTeeLine::@return
    // }
    // [139] return 
    rts
}
  // chline
// Output a horizontal line with the given length starting at the current cursor position.
// chline(byte zp($d) length)
chline: {
    .label i = $e
    .label length = $d
    // [141] phi from chline to chline::@1 [phi:chline->chline::@1]
    // [141] phi (byte) chline::i#2 = (byte) 0 [phi:chline->chline::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // chline::@1
  __b1:
    // for(char i=0;i<length;i++)
    // [142] if((byte) chline::i#2<(byte) chline::length#4) goto chline::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // chline::@return
    // }
    // [143] return 
    rts
    // [144] phi from chline::@1 to chline::@2 [phi:chline::@1->chline::@2]
    // chline::@2
  __b2:
    // cputc(CH_HLINE)
    // [145] call cputc 
    // [93] phi from chline::@2 to cputc [phi:chline::@2->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#52 [phi:chline::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#51 [phi:chline::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#51 [phi:chline::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#52 [phi:chline::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_HLINE [phi:chline::@2->cputc#4] -- vbuaa=vbuc1 
    lda #CH_HLINE
    jsr cputc
    // chline::@3
    // for(char i=0;i<length;i++)
    // [146] (byte) chline::i#1 ← ++ (byte) chline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [141] phi from chline::@3 to chline::@1 [phi:chline::@3->chline::@1]
    // [141] phi (byte) chline::i#2 = (byte) chline::i#1 [phi:chline::@3->chline::@1#0] -- register_copy 
    jmp __b1
}
  // cputcxy
// Move cursor and output one character
// Same as "gotoxy (x, y); cputc (c);"
// cputcxy(byte register(A) y, byte register(Y) c)
cputcxy: {
    // gotoxy(x, y)
    // [148] (byte) gotoxy::y#3 ← (byte) cputcxy::y#2
    // [149] call gotoxy 
    // [109] phi from cputcxy to gotoxy [phi:cputcxy->gotoxy]
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#3 [phi:cputcxy->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) 0 [phi:cputcxy->gotoxy#1] -- vbuxx=vbuc1 
    ldx #0
    jsr gotoxy
    // cputcxy::@1
    // cputc(c)
    // [150] (byte) cputc::c#0 ← (byte) cputcxy::c#2 -- vbuaa=vbuyy 
    tya
    // [151] call cputc 
    // [93] phi from cputcxy::@1 to cputc [phi:cputcxy::@1->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:cputcxy::@1->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:cputcxy::@1->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:cputcxy::@1->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:cputcxy::@1->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (byte) cputc::c#0 [phi:cputcxy::@1->cputc#4] -- register_copy 
    jsr cputc
    // cputcxy::@return
    // }
    // [152] return 
    rts
}
  // cvlinexy
// Move cursor and output a vertical line with the given length
// Same as "gotoxy (x, y); cvline (length);"
// cvlinexy(byte register(X) x)
cvlinexy: {
    // gotoxy(x,y)
    // [154] (byte) gotoxy::x#6 ← (byte) cvlinexy::x#2
    // [155] call gotoxy 
    // [109] phi from cvlinexy to gotoxy [phi:cvlinexy->gotoxy]
    // [109] phi (byte) gotoxy::y#10 = (byte) 1 [phi:cvlinexy->gotoxy#0] -- vbuaa=vbuc1 
    lda #1
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#6 [phi:cvlinexy->gotoxy#1] -- register_copy 
    jsr gotoxy
    // [156] phi from cvlinexy to cvlinexy::@1 [phi:cvlinexy->cvlinexy::@1]
    // cvlinexy::@1
    // cvline(length)
    // [157] call cvline 
    jsr cvline
    // cvlinexy::@return
    // }
    // [158] return 
    rts
}
  // cvline
// Output a vertical line with the given length at the current cursor position.
cvline: {
    .const length = $17
    .label x = $13
    .label y = $e
    .label i = $d
    // x = conio_cursor_x
    // [159] (byte) cvline::x#0 ← (byte) conio_cursor_x#3 -- vbuz1=vbuz2 
    lda.z conio_cursor_x
    sta.z x
    // y = conio_cursor_y
    // [160] (byte) cvline::y#0 ← (byte) conio_cursor_y#3 -- vbuz1=vbuz2 
    lda.z conio_cursor_y
    sta.z y
    // [161] phi from cvline to cvline::@1 [phi:cvline->cvline::@1]
    // [161] phi (byte) cvline::y#2 = (byte) cvline::y#0 [phi:cvline->cvline::@1#0] -- register_copy 
    // [161] phi (byte) cvline::i#2 = (byte) 0 [phi:cvline->cvline::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // cvline::@1
  __b1:
    // for(char i=0;i<length;i++)
    // [162] if((byte) cvline::i#2<(const byte) cvline::length#0) goto cvline::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #length
    bcc __b2
    // cvline::@return
    // }
    // [163] return 
    rts
    // [164] phi from cvline::@1 to cvline::@2 [phi:cvline::@1->cvline::@2]
    // cvline::@2
  __b2:
    // cputc(CH_VLINE)
    // [165] call cputc 
    // [93] phi from cvline::@2 to cputc [phi:cvline::@2->cputc]
    // [93] phi (byte) conio_cursor_x#50 = (byte) conio_cursor_x#3 [phi:cvline::@2->cputc#0] -- register_copy 
    // [93] phi (byte*) conio_cursor_color#49 = (byte*) conio_cursor_color#3 [phi:cvline::@2->cputc#1] -- register_copy 
    // [93] phi (byte*) conio_cursor_text#49 = (byte*) conio_cursor_text#3 [phi:cvline::@2->cputc#2] -- register_copy 
    // [93] phi (byte) conio_cursor_y#48 = (byte) conio_cursor_y#3 [phi:cvline::@2->cputc#3] -- register_copy 
    // [93] phi (byte) cputc::c#8 = (const nomodify byte) CH_VLINE [phi:cvline::@2->cputc#4] -- vbuaa=vbuc1 
    lda #CH_VLINE
    jsr cputc
    // cvline::@3
    // gotoxy(x, ++y);
    // [166] (byte) cvline::y#1 ← ++ (byte) cvline::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // gotoxy(x, ++y)
    // [167] (byte) gotoxy::x#5 ← (byte) cvline::x#0 -- vbuxx=vbuz1 
    ldx.z x
    // [168] (byte) gotoxy::y#5 ← (byte) cvline::y#1 -- vbuaa=vbuz1 
    lda.z y
    // [169] call gotoxy 
    // [109] phi from cvline::@3 to gotoxy [phi:cvline::@3->gotoxy]
    // [109] phi (byte) gotoxy::y#10 = (byte) gotoxy::y#5 [phi:cvline::@3->gotoxy#0] -- register_copy 
    // [109] phi (byte) gotoxy::x#7 = (byte) gotoxy::x#5 [phi:cvline::@3->gotoxy#1] -- register_copy 
    jsr gotoxy
    // cvline::@4
    // for(char i=0;i<length;i++)
    // [170] (byte) cvline::i#1 ← ++ (byte) cvline::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [161] phi from cvline::@4 to cvline::@1 [phi:cvline::@4->cvline::@1]
    // [161] phi (byte) cvline::y#2 = (byte) cvline::y#1 [phi:cvline::@4->cvline::@1#0] -- register_copy 
    // [161] phi (byte) cvline::i#2 = (byte) cvline::i#1 [phi:cvline::@4->cvline::@1#1] -- register_copy 
    jmp __b1
}
  // cursor
// If onoff is 1, a cursor is displayed when waiting for keyboard input.
// If onoff is 0, the cursor is hidden when waiting for keyboard input.
// The function returns the old cursor setting.
cursor: {
    // cursor::@return
    // }
    // [172] return 
    rts
}
  // bgcolor
// Set the color for the background. The old color setting is returned.
bgcolor: {
    // *CONIO_BGCOLOR = color
    // [173] *((const nomodify byte*) CONIO_BGCOLOR) ← (const nomodify byte) COLOR_BLACK -- _deref_pbuc1=vbuc2 
    lda #COLOR_BLACK
    sta CONIO_BGCOLOR
    // bgcolor::@return
    // }
    // [174] return 
    rts
}
  // bordercolor
// Set the color for the border. The old color setting is returned.
bordercolor: {
    // *CONIO_BORDERCOLOR = color
    // [175] *((const nomodify byte*) CONIO_BORDERCOLOR) ← (const nomodify byte) COLOR_BLACK -- _deref_pbuc1=vbuc2 
    lda #COLOR_BLACK
    sta CONIO_BORDERCOLOR
    // bordercolor::@return
    // }
    // [176] return 
    rts
}
  // textcolor
// Set the color for text output. The old color setting is returned.
textcolor: {
    // textcolor::@return
    // [178] return 
    rts
}
  // screensize
// Return the current screen size.
screensize: {
    .label x = XSize
    .label y = YSize
    // *x = CONIO_WIDTH
    // [179] *((const byte*) screensize::x#0) ← (const nomodify byte) CONIO_WIDTH -- _deref_pbuc1=vbuc2 
    lda #CONIO_WIDTH
    sta.z x
    // *y = CONIO_HEIGHT
    // [180] *((const byte*) screensize::y#0) ← (const nomodify byte) CONIO_HEIGHT -- _deref_pbuc1=vbuc2 
    lda #CONIO_HEIGHT
    sta.z y
    // screensize::@return
    // }
    // [181] return 
    rts
}
  // File Data

