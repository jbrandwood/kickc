
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::bu = 7
  main::bs = 7
  main::wu = $4e20
  main::ws = -$b1
  main::du = $1e8480
  main::ds = -$39a4f1
  main::ptr = (char *)0
  main::i#0 = 0
  main::$7 = main::i#0 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$7] = word1 $11
  main::i#1 = ++ main::i#0
  main::$8 = main::i#1 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$8] = word1 $179
  main::i#2 = ++ main::i#1
  main::$0 = word1  main::bu
  main::$9 = main::i#2 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$9] = main::$0
  main::i#3 = ++ main::i#2
  main::$1 = word1  main::bs
  main::$10 = main::i#3 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$10] = main::$1
  main::i#4 = ++ main::i#3
  main::$2 = word1  main::wu
  main::$11 = main::i#4 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$11] = main::$2
  main::i#5 = ++ main::i#4
  main::$3 = word1  main::ws
  main::$12 = main::i#5 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$12] = main::$3
  main::i#6 = ++ main::i#5
  main::$4 = word1  main::du
  main::$13 = main::i#6 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$13] = main::$4
  main::i#7 = ++ main::i#6
  main::$5 = word1  main::ds
  main::$14 = main::i#7 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$14] = main::$5
  main::i#8 = ++ main::i#7
  main::$6 = word1  main::ptr
  main::$15 = main::i#8 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$15] = main::$6
  main::i#9 = ++ main::i#8
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char SIZEOF_UNSIGNED_INT = 2
void __start()
void main()
unsigned int main::$0
unsigned int main::$1
char main::$10
char main::$11
char main::$12
char main::$13
char main::$14
char main::$15
unsigned int main::$2
unsigned int main::$3
unsigned int main::$4
unsigned int main::$5
unsigned int main::$6
char main::$7
char main::$8
char main::$9
__constant unsigned int * const main::SCREEN = (char *)$400
__loadstore volatile signed char main::bs
__loadstore volatile char main::bu
__loadstore volatile long main::ds
__loadstore volatile unsigned long main::du
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::i#6
char main::i#7
char main::i#8
char main::i#9
__loadstore char * volatile main::ptr
__loadstore volatile int main::ws
__loadstore volatile unsigned int main::wu

Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 0
Successful SSA optimization PassNCastSimplification
Constant right-side identified [14] main::$0 = word1  main::bu
Constant right-side identified [18] main::$1 = word1  main::bs
Constant right-side identified [22] main::$2 = word1  main::wu
Constant right-side identified [26] main::$3 = word1  main::ws
Constant right-side identified [38] main::$6 = word1  main::ptr
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$0 = 0
Constant main::$1 = 0
Constant main::$2 = 0
Constant main::$3 = 0
Constant main::$6 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero word1 $11 in [9] main::SCREEN[main::$7] = word1 $11
Simplifying constant evaluating to zero word1 $179 in [12] main::SCREEN[main::$8] = word1 $179
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused variable main::bu and assignment [0] main::bu = 7
Eliminating unused variable main::bs and assignment [1] main::bs = 7
Eliminating unused variable main::wu and assignment [2] main::wu = $4e20
Eliminating unused variable main::ws and assignment [3] main::ws = -$b1
Eliminating unused variable main::ptr and assignment [6] main::ptr = (char *) 0
Eliminating unused variable main::i#9 and assignment [35] main::i#9 = ++ main::i#8
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [2] main::$7 = main::i#0 * SIZEOF_UNSIGNED_INT
Constant right-side identified [4] main::i#1 = ++ main::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$7 = main::i#0*SIZEOF_UNSIGNED_INT
Constant main::i#1 = ++main::i#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::i#0*SIZEOF_UNSIGNED_INT in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [3] main::SCREEN[main::$7] = 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$7
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [3] main::$8 = main::i#1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [5] main::i#2 = ++ main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$8 = main::i#1*SIZEOF_UNSIGNED_INT
Constant main::i#2 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] main::$9 = main::i#2 * SIZEOF_UNSIGNED_INT
Constant right-side identified [6] main::i#3 = ++ main::i#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$9 = main::i#2*SIZEOF_UNSIGNED_INT
Constant main::i#3 = ++main::i#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] main::$10 = main::i#3 * SIZEOF_UNSIGNED_INT
Constant right-side identified [7] main::i#4 = ++ main::i#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$10 = main::i#3*SIZEOF_UNSIGNED_INT
Constant main::i#4 = ++main::i#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] main::$11 = main::i#4 * SIZEOF_UNSIGNED_INT
Constant right-side identified [8] main::i#5 = ++ main::i#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$11 = main::i#4*SIZEOF_UNSIGNED_INT
Constant main::i#5 = ++main::i#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] main::$12 = main::i#5 * SIZEOF_UNSIGNED_INT
Constant right-side identified [9] main::i#6 = ++ main::i#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$12 = main::i#5*SIZEOF_UNSIGNED_INT
Constant main::i#6 = ++main::i#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [9] main::$13 = main::i#6 * SIZEOF_UNSIGNED_INT
Constant right-side identified [11] main::i#7 = ++ main::i#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$13 = main::i#6*SIZEOF_UNSIGNED_INT
Constant main::i#7 = ++main::i#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::$14 = main::i#7 * SIZEOF_UNSIGNED_INT
Constant right-side identified [13] main::i#8 = ++ main::i#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$14 = main::i#7*SIZEOF_UNSIGNED_INT
Constant main::i#8 = ++main::i#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] main::$15 = main::i#8 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$15 = main::i#8*SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::i#0
Inlining constant with different constant siblings main::i#1
Inlining constant with different constant siblings main::i#2
Inlining constant with different constant siblings main::i#3
Inlining constant with different constant siblings main::i#4
Inlining constant with different constant siblings main::i#5
Inlining constant with different constant siblings main::i#6
Inlining constant with different constant siblings main::i#7
Inlining constant with different constant siblings main::i#8
Constant inlined main::i#8 = ++++++++++++++++0
Constant inlined main::i#7 = ++++++++++++++0
Constant inlined main::i#4 = ++++++++0
Constant inlined main::i#3 = ++++++0
Constant inlined main::i#6 = ++++++++++++0
Constant inlined main::i#5 = ++++++++++0
Constant inlined main::$12 = ++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$13 = ++++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$14 = ++++++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$15 = ++++++++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$10 = ++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$11 = ++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$1 = 0
Constant inlined main::$2 = 0
Constant inlined main::$0 = 0
Constant inlined main::i#0 = 0
Constant inlined main::$6 = 0
Constant inlined main::$3 = 0
Constant inlined main::i#2 = ++++0
Constant inlined main::i#1 = ++0
Constant inlined main::$9 = ++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$8 = ++0*SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++++++++0*SIZEOF_UNSIGNED_INT)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::du = $1e8480
  [1] main::ds = -$39a4f1
  [2] *main::SCREEN = 0
  [3] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = 0
  [4] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = 0
  [5] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = 0
  [6] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = 0
  [7] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = 0
  [8] main::$4 = word1  main::du
  [9] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4
  [10] main::$5 = word1  main::ds
  [11] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5
  [12] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = 0
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
unsigned int main::$4 // 4.0
unsigned int main::$5 // 4.0
__loadstore volatile long main::ds // 0.4444444444444444
__loadstore volatile unsigned long main::du // 0.5
char main::i

Initial phi equivalence classes
Added variable main::du to live range equivalence class [ main::du ]
Added variable main::ds to live range equivalence class [ main::ds ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Complete equivalence classes
[ main::du ]
[ main::ds ]
[ main::$4 ]
[ main::$5 ]
Allocated zp[2]:2 [ main::$4 ]
Allocated zp[2]:4 [ main::$5 ]
Allocated zp[4]:6 [ main::du ]
Allocated zp[4]:10 [ main::ds ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::du = $1e8480 [ main::du ] (  [ main::du ] { }  ) always clobbers reg byte a 
Statement [1] main::ds = -$39a4f1 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [2] *main::SCREEN = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [3] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [4] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [5] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [6] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [7] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = 0 [ main::du main::ds ] (  [ main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [8] main::$4 = word1  main::du [ main::ds main::$4 ] (  [ main::ds main::$4 ] { }  ) always clobbers reg byte a 
Statement [9] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4 [ main::ds ] (  [ main::ds ] { }  ) always clobbers reg byte a 
Statement [10] main::$5 = word1  main::ds [ main::$5 ] (  [ main::$5 ] { }  ) always clobbers reg byte a 
Statement [11] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [12] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[4]:6 [ main::du ] : zp[4]:6 , 
Potential registers zp[4]:10 [ main::ds ] : zp[4]:10 , 
Potential registers zp[2]:2 [ main::$4 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::$5 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4: zp[2]:2 [ main::$4 ] 4: zp[2]:4 [ main::$5 ] 0.5: zp[4]:6 [ main::du ] 0.44: zp[4]:10 [ main::ds ] 
Uplift Scope [] 

Uplifting [main] best 185 combination zp[2]:2 [ main::$4 ] zp[2]:4 [ main::$5 ] zp[4]:6 [ main::du ] zp[4]:10 [ main::ds ] 
Uplifting [] best 185 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test operator WORD1()
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-word1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label du = 6
    .label ds = $a
    .label __4 = 2
    .label __5 = 4
    // [0] main::du = $1e8480 -- vduz1=vduc1 
    lda #<$1e8480
    sta.z du
    lda #>$1e8480
    sta.z du+1
    lda #<$1e8480>>$10
    sta.z du+2
    lda #>$1e8480>>$10
    sta.z du+3
    // [1] main::ds = -$39a4f1 -- vdsz1=vdsc1 
    lda #<-$39a4f1
    sta.z ds
    lda #>-$39a4f1
    sta.z ds+1
    lda #<-$39a4f1>>$10
    sta.z ds+2
    lda #>-$39a4f1>>$10
    sta.z ds+3
    // [2] *main::SCREEN = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN
    lda #>0
    sta SCREEN+1
    // [3] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+1*SIZEOF_UNSIGNED_INT
    lda #>0
    sta SCREEN+1*SIZEOF_UNSIGNED_INT+1
    // [4] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+2*SIZEOF_UNSIGNED_INT
    lda #>0
    sta SCREEN+2*SIZEOF_UNSIGNED_INT+1
    // [5] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+3*SIZEOF_UNSIGNED_INT
    lda #>0
    sta SCREEN+3*SIZEOF_UNSIGNED_INT+1
    // [6] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+4*SIZEOF_UNSIGNED_INT
    lda #>0
    sta SCREEN+4*SIZEOF_UNSIGNED_INT+1
    // [7] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+5*SIZEOF_UNSIGNED_INT
    lda #>0
    sta SCREEN+5*SIZEOF_UNSIGNED_INT+1
    // [8] main::$4 = word1  main::du -- vwuz1=_word1_vduz2 
    lda.z du+2
    sta.z __4
    lda.z du+3
    sta.z __4+1
    // [9] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4 -- _deref_pwuc1=vwuz1 
    lda.z __4
    sta SCREEN+6*SIZEOF_UNSIGNED_INT
    lda.z __4+1
    sta SCREEN+6*SIZEOF_UNSIGNED_INT+1
    // [10] main::$5 = word1  main::ds -- vwuz1=_word1_vdsz2 
    lda.z ds+2
    sta.z __5
    lda.z ds+3
    sta.z __5+1
    // [11] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5 -- _deref_pwuc1=vwuz1 
    lda.z __5
    sta SCREEN+7*SIZEOF_UNSIGNED_INT
    lda.z __5+1
    sta SCREEN+7*SIZEOF_UNSIGNED_INT+1
    // [12] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+8*SIZEOF_UNSIGNED_INT
    lda #>0
    sta SCREEN+8*SIZEOF_UNSIGNED_INT+1
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char SIZEOF_UNSIGNED_INT = 2
void main()
unsigned int main::$4 // zp[2]:2 4.0
unsigned int main::$5 // zp[2]:4 4.0
__constant unsigned int * const main::SCREEN = (char *) 1024
__loadstore volatile long main::ds // zp[4]:10 0.4444444444444444
__loadstore volatile unsigned long main::du // zp[4]:6 0.5
char main::i

zp[4]:6 [ main::du ]
zp[4]:10 [ main::ds ]
zp[2]:2 [ main::$4 ]
zp[2]:4 [ main::$5 ]


FINAL ASSEMBLER
Score: 158

  // File Comments
// Test operator WORD1()
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-word1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label du = 6
    .label ds = $a
    .label __4 = 2
    .label __5 = 4
    // volatile unsigned long du = 2000000
    // [0] main::du = $1e8480 -- vduz1=vduc1 
    lda #<$1e8480
    sta.z du
    lda #>$1e8480
    sta.z du+1
    lda #<$1e8480>>$10
    sta.z du+2
    lda #>$1e8480>>$10
    sta.z du+3
    // volatile signed long ds = -3777777
    // [1] main::ds = -$39a4f1 -- vdsz1=vdsc1 
    lda #<-$39a4f1
    sta.z ds
    lda #>-$39a4f1
    sta.z ds+1
    lda #<-$39a4f1>>$10
    sta.z ds+2
    lda #>-$39a4f1>>$10
    sta.z ds+3
    // SCREEN[i++] = WORD1(17)
    // [2] *main::SCREEN = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN
    sta SCREEN+1
    // SCREEN[i++] = WORD1(377)
    // [3] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    sta SCREEN+1*SIZEOF_UNSIGNED_INT
    sta SCREEN+1*SIZEOF_UNSIGNED_INT+1
    // SCREEN[i++] = WORD1(bu)
    // [4] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    sta SCREEN+2*SIZEOF_UNSIGNED_INT
    sta SCREEN+2*SIZEOF_UNSIGNED_INT+1
    // SCREEN[i++] = WORD1(bs)
    // [5] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    sta SCREEN+3*SIZEOF_UNSIGNED_INT
    sta SCREEN+3*SIZEOF_UNSIGNED_INT+1
    // SCREEN[i++] = WORD1(wu)
    // [6] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    sta SCREEN+4*SIZEOF_UNSIGNED_INT
    sta SCREEN+4*SIZEOF_UNSIGNED_INT+1
    // SCREEN[i++] = WORD1(ws)
    // [7] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    sta SCREEN+5*SIZEOF_UNSIGNED_INT
    sta SCREEN+5*SIZEOF_UNSIGNED_INT+1
    // WORD1(du)
    // [8] main::$4 = word1  main::du -- vwuz1=_word1_vduz2 
    lda.z du+2
    sta.z __4
    lda.z du+3
    sta.z __4+1
    // SCREEN[i++] = WORD1(du)
    // [9] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4 -- _deref_pwuc1=vwuz1 
    lda.z __4
    sta SCREEN+6*SIZEOF_UNSIGNED_INT
    lda.z __4+1
    sta SCREEN+6*SIZEOF_UNSIGNED_INT+1
    // WORD1(ds)
    // [10] main::$5 = word1  main::ds -- vwuz1=_word1_vdsz2 
    lda.z ds+2
    sta.z __5
    lda.z ds+3
    sta.z __5+1
    // SCREEN[i++] = WORD1(ds)
    // [11] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5 -- _deref_pwuc1=vwuz1 
    lda.z __5
    sta SCREEN+7*SIZEOF_UNSIGNED_INT
    lda.z __5+1
    sta SCREEN+7*SIZEOF_UNSIGNED_INT+1
    // SCREEN[i++] = WORD1(ptr)
    // [12] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = 0 -- _deref_pwuc1=vwuc2 
    lda #<0
    sta SCREEN+8*SIZEOF_UNSIGNED_INT
    sta SCREEN+8*SIZEOF_UNSIGNED_INT+1
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

