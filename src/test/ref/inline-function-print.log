Inlined call call print screen main::hello 
Inlined call call print main::$1 main::hello 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::print1_at#0 = screen
  main::print1_msg#0 = main::hello
  to:main::print1
main::print1: scope:[main]  from main
  main::print1_at#3 = phi( main/main::print1_at#0 )
  main::print1_msg#3 = phi( main/main::print1_msg#0 )
  main::print1_j#0 = 0
  main::print1_i#0 = 0
  to:main::print1_@1
main::print1_@1: scope:[main]  from main::print1 main::print1_@2
  main::print1_j#3 = phi( main::print1/main::print1_j#0, main::print1_@2/main::print1_j#1 )
  main::print1_at#2 = phi( main::print1/main::print1_at#3, main::print1_@2/main::print1_at#1 )
  main::print1_i#2 = phi( main::print1/main::print1_i#0, main::print1_@2/main::print1_i#1 )
  main::print1_msg#1 = phi( main::print1/main::print1_msg#3, main::print1_@2/main::print1_msg#2 )
  main::print1_$0 = 0 != main::print1_msg#1[main::print1_i#2]
  if(main::print1_$0) goto main::print1_@2
  to:main::@1
main::print1_@2: scope:[main]  from main::print1_@1
  main::print1_j#2 = phi( main::print1_@1/main::print1_j#3 )
  main::print1_at#1 = phi( main::print1_@1/main::print1_at#2 )
  main::print1_i#3 = phi( main::print1_@1/main::print1_i#2 )
  main::print1_msg#2 = phi( main::print1_@1/main::print1_msg#1 )
  main::print1_at#1[main::print1_j#2] = main::print1_msg#2[main::print1_i#3]
  main::print1_j#1 = main::print1_j#2 + 2
  main::print1_i#1 = ++ main::print1_i#3
  to:main::print1_@1
main::@1: scope:[main]  from main::print1_@1
  main::$1 = screen + 2*$28
  main::print2_at#0 = main::$1
  main::print2_msg#0 = main::hello
  to:main::print2
main::print2: scope:[main]  from main::@1
  main::print2_at#3 = phi( main::@1/main::print2_at#0 )
  main::print2_msg#3 = phi( main::@1/main::print2_msg#0 )
  main::print2_j#0 = 0
  main::print2_i#0 = 0
  to:main::print2_@1
main::print2_@1: scope:[main]  from main::print2 main::print2_@2
  main::print2_j#3 = phi( main::print2/main::print2_j#0, main::print2_@2/main::print2_j#1 )
  main::print2_at#2 = phi( main::print2/main::print2_at#3, main::print2_@2/main::print2_at#1 )
  main::print2_i#2 = phi( main::print2/main::print2_i#0, main::print2_@2/main::print2_i#1 )
  main::print2_msg#1 = phi( main::print2/main::print2_msg#3, main::print2_@2/main::print2_msg#2 )
  main::print2_$0 = 0 != main::print2_msg#1[main::print2_i#2]
  if(main::print2_$0) goto main::print2_@2
  to:main::@return
main::print2_@2: scope:[main]  from main::print2_@1
  main::print2_j#2 = phi( main::print2_@1/main::print2_j#3 )
  main::print2_at#1 = phi( main::print2_@1/main::print2_at#2 )
  main::print2_i#3 = phi( main::print2_@1/main::print2_i#2 )
  main::print2_msg#2 = phi( main::print2_@1/main::print2_msg#1 )
  main::print2_at#1[main::print2_j#2] = main::print2_msg#2[main::print2_i#3]
  main::print2_j#1 = main::print2_j#2 + 2
  main::print2_i#1 = ++ main::print2_i#3
  to:main::print2_@1
main::@return: scope:[main]  from main::print2_@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
byte*~ main::$1
const byte* main::hello = "hello world!"
bool~ main::print1_$0
byte* main::print1_at
byte* main::print1_at#0
byte* main::print1_at#1
byte* main::print1_at#2
byte* main::print1_at#3
byte main::print1_i
byte main::print1_i#0
byte main::print1_i#1
byte main::print1_i#2
byte main::print1_i#3
byte main::print1_j
byte main::print1_j#0
byte main::print1_j#1
byte main::print1_j#2
byte main::print1_j#3
byte* main::print1_msg
byte* main::print1_msg#0
byte* main::print1_msg#1
byte* main::print1_msg#2
byte* main::print1_msg#3
bool~ main::print2_$0
byte* main::print2_at
byte* main::print2_at#0
byte* main::print2_at#1
byte* main::print2_at#2
byte* main::print2_at#3
byte main::print2_i
byte main::print2_i#0
byte main::print2_i#1
byte main::print2_i#2
byte main::print2_i#3
byte main::print2_j
byte main::print2_j#0
byte main::print2_j#1
byte main::print2_j#2
byte main::print2_j#3
byte* main::print2_msg
byte* main::print2_msg#0
byte* main::print2_msg#1
byte* main::print2_msg#2
byte* main::print2_msg#3
const byte* screen = (byte*)$400

Adding number conversion cast (unumber) 0 in main::print1_$0 = 0 != main::print1_msg#1[main::print1_i#2]
Adding number conversion cast (unumber) 2 in main::print1_j#1 = main::print1_j#2 + 2
Adding number conversion cast (unumber) 2*$28 in main::$1 = screen + 2*$28
Adding number conversion cast (unumber) 0 in main::print2_$0 = 0 != main::print2_msg#1[main::print2_i#2]
Adding number conversion cast (unumber) 2 in main::print2_j#1 = main::print2_j#2 + 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::print1_msg#0 = main::print1_msg#3 
Alias main::print1_at#0 = main::print1_at#3 
Alias main::print1_msg#1 = main::print1_msg#2 
Alias main::print1_i#2 = main::print1_i#3 
Alias main::print1_at#1 = main::print1_at#2 
Alias main::print1_j#2 = main::print1_j#3 
Alias main::print2_at#0 = main::$1 main::print2_at#3 
Alias main::print2_msg#0 = main::print2_msg#3 
Alias main::print2_msg#1 = main::print2_msg#2 
Alias main::print2_i#2 = main::print2_i#3 
Alias main::print2_at#1 = main::print2_at#2 
Alias main::print2_j#2 = main::print2_j#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values main::print1_msg#1 main::print1_msg#0
Identical Phi Values main::print1_at#1 main::print1_at#0
Identical Phi Values main::print2_msg#1 main::print2_msg#0
Identical Phi Values main::print2_at#1 main::print2_at#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::print1_$0 [6] if(0!=main::print1_msg#0[main::print1_i#2]) goto main::print1_@2
Simple Condition main::print2_$0 [16] if(0!=main::print2_msg#0[main::print2_i#2]) goto main::print2_@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [10] main::print2_at#0 = screen + (byte)2*$28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::print1_at#0 = screen
Constant main::print1_msg#0 = main::hello
Constant main::print1_j#0 = 0
Constant main::print1_i#0 = 0
Constant main::print2_at#0 = screen+(byte)2*$28
Constant main::print2_msg#0 = main::hello
Constant main::print2_j#0 = 0
Constant main::print2_i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::print1_j#0
Inlining constant with var siblings main::print1_i#0
Inlining constant with var siblings main::print2_j#0
Inlining constant with var siblings main::print2_i#0
Constant inlined main::print2_j#0 = 0
Constant inlined main::print1_at#0 = screen
Constant inlined main::print2_msg#0 = main::hello
Constant inlined main::print2_i#0 = 0
Constant inlined main::print1_msg#0 = main::hello
Constant inlined main::print1_i#0 = 0
Constant inlined main::print1_j#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast 2*$28
Successful SSA optimization PassNCastSimplification
Adding NOP phi() at start of main
Adding NOP phi() at start of main::print1
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::print2
CALL GRAPH

Created 4 initial phi equivalence classes
Coalesced [12] main::print2_i#4 = main::print2_i#1
Coalesced [13] main::print2_j#4 = main::print2_j#1
Coalesced [17] main::print1_i#4 = main::print1_i#1
Coalesced [18] main::print1_j#4 = main::print1_j#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::print1
Adding NOP phi() at start of main::print2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::print1
main::print1: scope:[main]  from main
  [1] phi()
  to:main::print1_@1
main::print1_@1: scope:[main]  from main::print1 main::print1_@2
  [2] main::print1_j#2 = phi( main::print1/0, main::print1_@2/main::print1_j#1 )
  [2] main::print1_i#2 = phi( main::print1/0, main::print1_@2/main::print1_i#1 )
  [3] if(0!=main::hello[main::print1_i#2]) goto main::print1_@2
  to:main::print2
main::print2: scope:[main]  from main::print1_@1
  [4] phi()
  to:main::print2_@1
main::print2_@1: scope:[main]  from main::print2 main::print2_@2
  [5] main::print2_j#2 = phi( main::print2/0, main::print2_@2/main::print2_j#1 )
  [5] main::print2_i#2 = phi( main::print2/0, main::print2_@2/main::print2_i#1 )
  [6] if(0!=main::hello[main::print2_i#2]) goto main::print2_@2
  to:main::@return
main::@return: scope:[main]  from main::print2_@1
  [7] return 
  to:@return
main::print2_@2: scope:[main]  from main::print2_@1
  [8] main::print2_at#0[main::print2_j#2] = main::hello[main::print2_i#2]
  [9] main::print2_j#1 = main::print2_j#2 + 2
  [10] main::print2_i#1 = ++ main::print2_i#2
  to:main::print2_@1
main::print1_@2: scope:[main]  from main::print1_@1
  [11] screen[main::print1_j#2] = main::hello[main::print1_i#2]
  [12] main::print1_j#1 = main::print1_j#2 + 2
  [13] main::print1_i#1 = ++ main::print1_i#2
  to:main::print1_@1


VARIABLE REGISTER WEIGHTS
void main()
byte* main::print1_at
byte main::print1_i
byte main::print1_i#1 22.0
byte main::print1_i#2 11.0
byte main::print1_j
byte main::print1_j#1 11.0
byte main::print1_j#2 11.0
byte* main::print1_msg
byte* main::print2_at
byte main::print2_i
byte main::print2_i#1 22.0
byte main::print2_i#2 11.0
byte main::print2_j
byte main::print2_j#1 11.0
byte main::print2_j#2 11.0
byte* main::print2_msg

Initial phi equivalence classes
[ main::print1_i#2 main::print1_i#1 ]
[ main::print1_j#2 main::print1_j#1 ]
[ main::print2_i#2 main::print2_i#1 ]
[ main::print2_j#2 main::print2_j#1 ]
Complete equivalence classes
[ main::print1_i#2 main::print1_i#1 ]
[ main::print1_j#2 main::print1_j#1 ]
[ main::print2_i#2 main::print2_i#1 ]
[ main::print2_j#2 main::print2_j#1 ]
Allocated zp[1]:2 [ main::print1_i#2 main::print1_i#1 ]
Allocated zp[1]:3 [ main::print1_j#2 main::print1_j#1 ]
Allocated zp[1]:4 [ main::print2_i#2 main::print2_i#1 ]
Allocated zp[1]:5 [ main::print2_j#2 main::print2_j#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] if(0!=main::hello[main::print1_i#2]) goto main::print1_@2 [ main::print1_i#2 main::print1_j#2 ] (  [ main::print1_i#2 main::print1_j#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::print1_i#2 main::print1_i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::print1_j#2 main::print1_j#1 ]
Statement [6] if(0!=main::hello[main::print2_i#2]) goto main::print2_@2 [ main::print2_i#2 main::print2_j#2 ] (  [ main::print2_i#2 main::print2_j#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::print2_i#2 main::print2_i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::print2_j#2 main::print2_j#1 ]
Statement [8] main::print2_at#0[main::print2_j#2] = main::hello[main::print2_i#2] [ main::print2_i#2 main::print2_j#2 ] (  [ main::print2_i#2 main::print2_j#2 ] { }  ) always clobbers reg byte a 
Statement [11] screen[main::print1_j#2] = main::hello[main::print1_i#2] [ main::print1_i#2 main::print1_j#2 ] (  [ main::print1_i#2 main::print1_j#2 ] { }  ) always clobbers reg byte a 
Statement [3] if(0!=main::hello[main::print1_i#2]) goto main::print1_@2 [ main::print1_i#2 main::print1_j#2 ] (  [ main::print1_i#2 main::print1_j#2 ] { }  ) always clobbers reg byte a 
Statement [6] if(0!=main::hello[main::print2_i#2]) goto main::print2_@2 [ main::print2_i#2 main::print2_j#2 ] (  [ main::print2_i#2 main::print2_j#2 ] { }  ) always clobbers reg byte a 
Statement [8] main::print2_at#0[main::print2_j#2] = main::hello[main::print2_i#2] [ main::print2_i#2 main::print2_j#2 ] (  [ main::print2_i#2 main::print2_j#2 ] { }  ) always clobbers reg byte a 
Statement [11] screen[main::print1_j#2] = main::hello[main::print1_i#2] [ main::print1_i#2 main::print1_j#2 ] (  [ main::print1_i#2 main::print1_j#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::print1_i#2 main::print1_i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::print1_j#2 main::print1_j#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::print2_i#2 main::print2_i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::print2_j#2 main::print2_j#1 ] : zp[1]:5 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[1]:2 [ main::print1_i#2 main::print1_i#1 ] 33: zp[1]:4 [ main::print2_i#2 main::print2_i#1 ] 22: zp[1]:3 [ main::print1_j#2 main::print1_j#1 ] 22: zp[1]:5 [ main::print2_j#2 main::print2_j#1 ] 
Uplift Scope [] 

Uplifting [main] best 732 combination reg byte y [ main::print1_i#2 main::print1_i#1 ] reg byte y [ main::print2_i#2 main::print2_i#1 ] reg byte x [ main::print1_j#2 main::print1_j#1 ] reg byte x [ main::print2_j#2 main::print2_j#1 ] 
Uplifting [] best 732 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// TEst inlining a slightly complex print function (containing a loop)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label print2_at = screen+2*$28
    // [1] phi from main to main::print1 [phi:main->main::print1]
  print1_from_main:
    jmp print1
    // main::print1
  print1:
    // [2] phi from main::print1 to main::print1_@1 [phi:main::print1->main::print1_@1]
  print1___b1_from_print1:
    // [2] phi main::print1_j#2 = 0 [phi:main::print1->main::print1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [2] phi main::print1_i#2 = 0 [phi:main::print1->main::print1_@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp print1___b1
    // main::print1_@1
  print1___b1:
    // [3] if(0!=main::hello[main::print1_i#2]) goto main::print1_@2 -- 0_neq_pbuc1_derefidx_vbuyy_then_la1 
    lda hello,y
    cmp #0
    bne print1___b2
    // [4] phi from main::print1_@1 to main::print2 [phi:main::print1_@1->main::print2]
  print2_from_print1___b1:
    jmp print2
    // main::print2
  print2:
    // [5] phi from main::print2 to main::print2_@1 [phi:main::print2->main::print2_@1]
  print2___b1_from_print2:
    // [5] phi main::print2_j#2 = 0 [phi:main::print2->main::print2_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi main::print2_i#2 = 0 [phi:main::print2->main::print2_@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp print2___b1
    // main::print2_@1
  print2___b1:
    // [6] if(0!=main::hello[main::print2_i#2]) goto main::print2_@2 -- 0_neq_pbuc1_derefidx_vbuyy_then_la1 
    lda hello,y
    cmp #0
    bne print2___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::print2_@2
  print2___b2:
    // [8] main::print2_at#0[main::print2_j#2] = main::hello[main::print2_i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda hello,y
    sta print2_at,x
    // [9] main::print2_j#1 = main::print2_j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [10] main::print2_i#1 = ++ main::print2_i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] phi from main::print2_@2 to main::print2_@1 [phi:main::print2_@2->main::print2_@1]
  print2___b1_from_print2___b2:
    // [5] phi main::print2_j#2 = main::print2_j#1 [phi:main::print2_@2->main::print2_@1#0] -- register_copy 
    // [5] phi main::print2_i#2 = main::print2_i#1 [phi:main::print2_@2->main::print2_@1#1] -- register_copy 
    jmp print2___b1
    // main::print1_@2
  print1___b2:
    // [11] screen[main::print1_j#2] = main::hello[main::print1_i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda hello,y
    sta screen,x
    // [12] main::print1_j#1 = main::print1_j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [13] main::print1_i#1 = ++ main::print1_i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [2] phi from main::print1_@2 to main::print1_@1 [phi:main::print1_@2->main::print1_@1]
  print1___b1_from_print1___b2:
    // [2] phi main::print1_j#2 = main::print1_j#1 [phi:main::print1_@2->main::print1_@1#0] -- register_copy 
    // [2] phi main::print1_i#2 = main::print1_i#1 [phi:main::print1_@2->main::print1_@1#1] -- register_copy 
    jmp print1___b1
    hello: .text "hello world!"
    .byte 0
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp print1
Removing instruction jmp print1___b1
Removing instruction jmp print2
Removing instruction jmp print2___b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction print1_from_main:
Removing instruction print1___b1_from_print1:
Removing instruction print2_from_print1___b1:
Removing instruction print2___b1_from_print2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print1:
Removing instruction print2:
Removing instruction __breturn:
Removing instruction print2___b1_from_print2___b2:
Removing instruction print1___b1_from_print1___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::hello = "hello world!"
byte* main::print1_at
byte main::print1_i
byte main::print1_i#1 reg byte y 22.0
byte main::print1_i#2 reg byte y 11.0
byte main::print1_j
byte main::print1_j#1 reg byte x 11.0
byte main::print1_j#2 reg byte x 11.0
byte* main::print1_msg
byte* main::print2_at
const byte* main::print2_at#0 print2_at = screen+2*$28
byte main::print2_i
byte main::print2_i#1 reg byte y 22.0
byte main::print2_i#2 reg byte y 11.0
byte main::print2_j
byte main::print2_j#1 reg byte x 11.0
byte main::print2_j#2 reg byte x 11.0
byte* main::print2_msg
const byte* screen = (byte*) 1024

reg byte y [ main::print1_i#2 main::print1_i#1 ]
reg byte x [ main::print1_j#2 main::print1_j#1 ]
reg byte y [ main::print2_i#2 main::print2_i#1 ]
reg byte x [ main::print2_j#2 main::print2_j#1 ]


FINAL ASSEMBLER
Score: 636

  // File Comments
// TEst inlining a slightly complex print function (containing a loop)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label print2_at = screen+2*$28
    // [1] phi from main to main::print1 [phi:main->main::print1]
    // main::print1
    // [2] phi from main::print1 to main::print1_@1 [phi:main::print1->main::print1_@1]
    // [2] phi main::print1_j#2 = 0 [phi:main::print1->main::print1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [2] phi main::print1_i#2 = 0 [phi:main::print1->main::print1_@1#1] -- vbuyy=vbuc1 
    ldy #0
    // main::print1_@1
  print1___b1:
    // for(byte i=0; msg[i]; i++)
    // [3] if(0!=main::hello[main::print1_i#2]) goto main::print1_@2 -- 0_neq_pbuc1_derefidx_vbuyy_then_la1 
    lda hello,y
    cmp #0
    bne print1___b2
    // [4] phi from main::print1_@1 to main::print2 [phi:main::print1_@1->main::print2]
    // main::print2
    // [5] phi from main::print2 to main::print2_@1 [phi:main::print2->main::print2_@1]
    // [5] phi main::print2_j#2 = 0 [phi:main::print2->main::print2_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi main::print2_i#2 = 0 [phi:main::print2->main::print2_@1#1] -- vbuyy=vbuc1 
    ldy #0
    // main::print2_@1
  print2___b1:
    // for(byte i=0; msg[i]; i++)
    // [6] if(0!=main::hello[main::print2_i#2]) goto main::print2_@2 -- 0_neq_pbuc1_derefidx_vbuyy_then_la1 
    lda hello,y
    cmp #0
    bne print2___b2
    // main::@return
    // }
    // [7] return 
    rts
    // main::print2_@2
  print2___b2:
    // at[j] = msg[i]
    // [8] main::print2_at#0[main::print2_j#2] = main::hello[main::print2_i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda hello,y
    sta print2_at,x
    // j += 2
    // [9] main::print2_j#1 = main::print2_j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // for(byte i=0; msg[i]; i++)
    // [10] main::print2_i#1 = ++ main::print2_i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] phi from main::print2_@2 to main::print2_@1 [phi:main::print2_@2->main::print2_@1]
    // [5] phi main::print2_j#2 = main::print2_j#1 [phi:main::print2_@2->main::print2_@1#0] -- register_copy 
    // [5] phi main::print2_i#2 = main::print2_i#1 [phi:main::print2_@2->main::print2_@1#1] -- register_copy 
    jmp print2___b1
    // main::print1_@2
  print1___b2:
    // at[j] = msg[i]
    // [11] screen[main::print1_j#2] = main::hello[main::print1_i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda hello,y
    sta screen,x
    // j += 2
    // [12] main::print1_j#1 = main::print1_j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // for(byte i=0; msg[i]; i++)
    // [13] main::print1_i#1 = ++ main::print1_i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [2] phi from main::print1_@2 to main::print1_@1 [phi:main::print1_@2->main::print1_@1]
    // [2] phi main::print1_j#2 = main::print1_j#1 [phi:main::print1_@2->main::print1_@1#0] -- register_copy 
    // [2] phi main::print1_i#2 = main::print1_i#1 [phi:main::print1_@2->main::print1_@1#1] -- register_copy 
    jmp print1___b1
    hello: .text "hello world!"
    .byte 0
}
  // File Data

