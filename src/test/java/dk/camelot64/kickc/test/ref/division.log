PARSING src/test/java/dk/camelot64/kickc/test/kc/division.kc
import "print.kc"

const byte* NULL = 0;

void main() {
    byte* rem = $ff;

    byte[] dividends = { 255, 255, 255, 255, 255, 255};
    byte[] divisors = { 5, 7, 11, 13, 17, 19 };

    print_cls();
    for( byte i: 0..5 ) {
        byte dividend = dividends[i];
        byte divisor = divisors[i];
        byte res = div8u(dividend, divisor, rem);
        print_byte(dividend);
        print_str(" / @");
        print_byte(divisor);
        print_str(" = @");
        print_byte(res);
        print_str(" @");
        print_byte(*rem);
        print_ln();
    }
}

// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// If remainder is non-null it will be set to the remainder.
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor, byte* remainder) {
    byte rem = 0;
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    *remainder = rem;
    return quotient;
}
Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

byte* line_cursor = $0400;
byte* char_cursor = line_cursor;

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(char_cursor++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        line_cursor = line_cursor + $28;
    } while (line_cursor<char_cursor);
    char_cursor = line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(char_cursor++) = ch;
}

// Clear the screen
void print_cls() {
    for(byte* sc=$0400; sc!=$0400+1000; sc++) {
        *sc = ' ';
    }
}



Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Adding pre/post-modifier (byte) div8u::rem ← ++ (byte) div8u::rem
Adding pre/post-modifier (byte) div8u::quotient ← ++ (byte) div8u::quotient

STATEMENTS
  (byte*) line_cursor ← (word/signed word/dword/signed dword) 1024
  (byte*) char_cursor ← (byte*) line_cursor
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (word/signed word/dword/signed dword) 1024
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (word/signed word/dword/signed dword~) print_cls::$0 ← (word/signed word/dword/signed dword) 1024 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (word/signed word/dword/signed dword~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
print_cls::@return:
  return 
endproc // print_cls()
  (byte*) NULL ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (void()) main()
  (byte*) main::rem ← (byte/word/signed word/dword/signed dword) 255
  (byte[]) main::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) main::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (void~) main::$0 ← call print_cls 
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
main::@1:
  (byte) main::dividend ← *((byte[]) main::dividends + (byte) main::i)
  (byte) main::divisor ← *((byte[]) main::divisors + (byte) main::i)
  (byte~) main::$1 ← call div8u (byte) main::dividend (byte) main::divisor (byte*) main::rem 
  (byte) main::res ← (byte~) main::$1
  (void~) main::$2 ← call print_byte (byte) main::dividend 
  (void~) main::$3 ← call print_str (string) " / @" 
  (void~) main::$4 ← call print_byte (byte) main::divisor 
  (void~) main::$5 ← call print_str (string) " = @" 
  (void~) main::$6 ← call print_byte (byte) main::res 
  (void~) main::$7 ← call print_str (string) " @" 
  (void~) main::$8 ← call print_byte *((byte*) main::rem) 
  (void~) main::$9 ← call print_ln 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$10 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) main::$10) goto main::@1
main::@return:
  return 
endproc // main()
proc (byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor , (byte*) div8u::remainder)
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
div8u::@1:
  (byte~) div8u::$0 ← (byte) div8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::rem ← (byte~) div8u::$0
  (byte~) div8u::$1 ← (byte) div8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8u::$3 ← ! (boolean~) div8u::$2
  if((boolean~) div8u::$3) goto div8u::@2
  (byte) div8u::rem ← ++ (byte) div8u::rem
div8u::@2:
  (byte~) div8u::$4 ← (byte) div8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::dividend ← (byte~) div8u::$4
  (byte~) div8u::$5 ← (byte) div8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::quotient ← (byte~) div8u::$5
  (boolean~) div8u::$6 ← (byte) div8u::rem >= (byte) div8u::divisor
  (boolean~) div8u::$7 ← ! (boolean~) div8u::$6
  if((boolean~) div8u::$7) goto div8u::@3
  (byte) div8u::quotient ← ++ (byte) div8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 ← (byte) div8u::rem - (byte) div8u::divisor
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
div8u::@3:
  (byte) div8u::i ← ++ (byte) div8u::i
  (boolean~) div8u::$9 ← (byte) div8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) div8u::$9) goto div8u::@1
  *((byte*) div8u::remainder) ← (byte) div8u::rem
  (byte) div8u::return ← (byte) div8u::quotient
  goto div8u::@return
div8u::@return:
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
endproc // div8u()
  call main 

SYMBOLS
(byte*) NULL
(byte*) char_cursor
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor , (byte*) div8u::remainder)
(byte~) div8u::$0
(byte~) div8u::$1
(boolean~) div8u::$2
(boolean~) div8u::$3
(byte~) div8u::$4
(byte~) div8u::$5
(boolean~) div8u::$6
(boolean~) div8u::$7
(byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
(boolean~) div8u::$9
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::divisor
(byte) div8u::i
(byte) div8u::quotient
(byte) div8u::rem
(byte*) div8u::remainder
(byte) div8u::return
(byte*) line_cursor
(void()) main()
(void~) main::$0
(byte~) main::$1
(boolean~) main::$10
(void~) main::$2
(void~) main::$3
(void~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(void~) main::$9
(label) main::@1
(label) main::@return
(byte) main::dividend
(byte[]) main::dividends
(byte) main::divisor
(byte[]) main::divisors
(byte) main::i
(byte*) main::rem
(byte) main::res
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(void()) print_cls()
(word/signed word/dword/signed dword~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w

Promoting word/signed word/dword/signed dword to byte* in line_cursor ← ((byte*)) 1024
Promoting word/signed word/dword/signed dword to byte* in print_cls::sc ← ((byte*)) 1024
Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in NULL ← ((byte*)) 0
Promoting byte/word/signed word/dword/signed dword to byte* in main::rem ← ((byte*)) 255
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) line_cursor ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) char_cursor ← (byte*) line_cursor
  to:@1
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_char: scope:[print_char]  from
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (word/signed word/dword/signed dword~) print_cls::$0 ← (word/signed word/dword/signed dword) 1024 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (word/signed word/dword/signed dword~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@8: scope:[]  from @7
  (byte*) NULL ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@9
main: scope:[main]  from
  (byte*) main::rem ← ((byte*)) (byte/word/signed word/dword/signed dword) 255
  (byte[]) main::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) main::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (void~) main::$0 ← call print_cls 
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::dividend ← *((byte[]) main::dividends + (byte) main::i)
  (byte) main::divisor ← *((byte[]) main::divisors + (byte) main::i)
  (byte~) main::$1 ← call div8u (byte) main::dividend (byte) main::divisor (byte*) main::rem 
  (byte) main::res ← (byte~) main::$1
  (void~) main::$2 ← call print_byte (byte) main::dividend 
  (void~) main::$3 ← call print_str (string) " / @" 
  (void~) main::$4 ← call print_byte (byte) main::divisor 
  (void~) main::$5 ← call print_str (string) " = @" 
  (void~) main::$6 ← call print_byte (byte) main::res 
  (void~) main::$7 ← call print_str (string) " @" 
  (void~) main::$8 ← call print_byte *((byte*) main::rem) 
  (void~) main::$9 ← call print_ln 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$10 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) main::$10) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
div8u: scope:[div8u]  from
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  (byte~) div8u::$0 ← (byte) div8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::rem ← (byte~) div8u::$0
  (byte~) div8u::$1 ← (byte) div8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8u::$3 ← ! (boolean~) div8u::$2
  if((boolean~) div8u::$3) goto div8u::@2
  to:div8u::@4
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  (byte~) div8u::$4 ← (byte) div8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::dividend ← (byte~) div8u::$4
  (byte~) div8u::$5 ← (byte) div8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::quotient ← (byte~) div8u::$5
  (boolean~) div8u::$6 ← (byte) div8u::rem >= (byte) div8u::divisor
  (boolean~) div8u::$7 ← ! (boolean~) div8u::$6
  if((boolean~) div8u::$7) goto div8u::@3
  to:div8u::@5
div8u::@4: scope:[div8u]  from div8u::@1
  (byte) div8u::rem ← ++ (byte) div8u::rem
  to:div8u::@2
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  (byte) div8u::i ← ++ (byte) div8u::i
  (boolean~) div8u::$9 ← (byte) div8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) div8u::$9) goto div8u::@1
  to:div8u::@6
div8u::@5: scope:[div8u]  from div8u::@2
  (byte) div8u::quotient ← ++ (byte) div8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 ← (byte) div8u::rem - (byte) div8u::divisor
  (byte) div8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
  to:div8u::@3
div8u::@6: scope:[div8u]  from div8u::@3
  *((byte*) div8u::remainder) ← (byte) div8u::rem
  (byte) div8u::return ← (byte) div8u::quotient
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6 div8u::@7
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
  to:@return
div8u::@7: scope:[div8u]  from
  to:div8u::@return
@10: scope:[]  from @9
  call main 
  to:@end
@end: scope:[]  from @10

Removing unused procedure print_sword
Removing unused procedure print_sbyte
Removing unused procedure print_word
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable (byte*) NULL and assignment [30] (byte*) NULL ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable - keeping the call (void~) main::$3
Eliminating unused variable - keeping the call (void~) main::$4
Eliminating unused variable - keeping the call (void~) main::$5
Eliminating unused variable - keeping the call (void~) main::$6
Eliminating unused variable - keeping the call (void~) main::$7
Eliminating unused variable - keeping the call (void~) main::$8
Eliminating unused variable - keeping the call (void~) main::$9
Creating constant string variable for inline (const string) print_byte::$4 "0123456789abcdef"
Creating constant string variable for inline (const string) main::str " / @"
Creating constant string variable for inline (const string) main::str1 " = @"
Creating constant string variable for inline (const string) main::str2 " @"
Removing empty block print_str::@4
Removing empty block print_str::@3
Removing empty block print_str::@5
Removing empty block print_str::@6
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block print_cls::@2
Removing empty block @8
Removing empty block main::@2
Removing empty block @9
Removing empty block div8u::@7
PROCEDURE MODIFY VARIABLE ANALYSIS
print_str modifies char_cursor
print_ln modifies line_cursor
print_ln modifies char_cursor
print_byte modifies char_cursor
print_char modifies char_cursor
main modifies char_cursor
main modifies line_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) line_cursor#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) char_cursor#0 ← (byte*) line_cursor#0
  to:@10
print_str: scope:[print_str]  from main::@5 main::@7 main::@9
  (byte*) char_cursor#44 ← phi( main::@5/(byte*) char_cursor#10 main::@7/(byte*) char_cursor#12 main::@9/(byte*) char_cursor#14 )
  (byte*) print_str::str#6 ← phi( main::@5/(byte*) print_str::str#1 main::@7/(byte*) print_str::str#2 main::@9/(byte*) print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) char_cursor#39 ← phi( print_str/(byte*) char_cursor#44 print_str::@2/(byte*) char_cursor#1 )
  (byte*) print_str::str#4 ← phi( print_str/(byte*) print_str::str#6 print_str::@2/(byte*) print_str::str#0 )
  (boolean~) print_str::$0 ← *((byte*) print_str::str#4) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#20 ← phi( print_str::@1/(byte*) char_cursor#39 )
  (byte*) print_str::str#5 ← phi( print_str::@1/(byte*) print_str::str#4 )
  *((byte*) char_cursor#20) ← *((byte*) print_str::str#5)
  (byte*) char_cursor#1 ← ++ (byte*) char_cursor#20
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#5
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#21 ← phi( print_str::@1/(byte*) char_cursor#39 )
  (byte*) char_cursor#2 ← (byte*) char_cursor#21
  return 
  to:@return
print_ln: scope:[print_ln]  from main::@11
  (byte*) char_cursor#40 ← phi( main::@11/(byte*) char_cursor#16 )
  (byte*) line_cursor#12 ← phi( main::@11/(byte*) line_cursor#13 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) char_cursor#22 ← phi( print_ln/(byte*) char_cursor#40 print_ln::@1/(byte*) char_cursor#22 )
  (byte*) line_cursor#6 ← phi( print_ln/(byte*) line_cursor#12 print_ln::@1/(byte*) line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor#1 < (byte*) char_cursor#22
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) line_cursor#7 ← phi( print_ln::@1/(byte*) line_cursor#1 )
  (byte*) char_cursor#3 ← (byte*) line_cursor#7
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) char_cursor#23 ← phi( print_ln::@2/(byte*) char_cursor#3 )
  (byte*) line_cursor#8 ← phi( print_ln::@2/(byte*) line_cursor#7 )
  (byte*) line_cursor#2 ← (byte*) line_cursor#8
  (byte*) char_cursor#4 ← (byte*) char_cursor#23
  return 
  to:@return
print_byte: scope:[print_byte]  from main::@10 main::@4 main::@6 main::@8
  (byte*) char_cursor#41 ← phi( main::@10/(byte*) char_cursor#15 main::@4/(byte*) char_cursor#42 main::@6/(byte*) char_cursor#11 main::@8/(byte*) char_cursor#13 )
  (byte) print_byte::b#4 ← phi( main::@10/(byte) print_byte::b#3 main::@4/(byte) print_byte::b#0 main::@6/(byte) print_byte::b#1 main::@8/(byte) print_byte::b#2 )
  (byte[]) print_byte::hextab#0 ← (const string) print_byte::$4
  (byte~) print_byte::$0 ← (byte) print_byte::b#4 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#0 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#5 ← phi( print_byte/(byte) print_byte::b#4 )
  (byte*) char_cursor#24 ← phi( print_byte/(byte*) char_cursor#9 )
  (byte*) char_cursor#5 ← (byte*) char_cursor#24
  (byte~) print_byte::$2 ← (byte) print_byte::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) print_char::ch#1 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) char_cursor#25 ← phi( print_byte::@1/(byte*) char_cursor#9 )
  (byte*) char_cursor#6 ← (byte*) char_cursor#25
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) char_cursor#26 ← phi( print_byte::@2/(byte*) char_cursor#6 )
  (byte*) char_cursor#7 ← (byte*) char_cursor#26
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  (byte*) char_cursor#27 ← phi( print_byte/(byte*) char_cursor#41 print_byte::@1/(byte*) char_cursor#5 )
  (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) char_cursor#27) ← (byte) print_char::ch#2
  (byte*) char_cursor#8 ← ++ (byte*) char_cursor#27
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) char_cursor#28 ← phi( print_char/(byte*) char_cursor#8 )
  (byte*) char_cursor#9 ← (byte*) char_cursor#28
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_cls::sc#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (word/signed word/dword/signed dword~) print_cls::$0 ← (word/signed word/dword/signed dword) 1024 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (word/signed word/dword/signed dword~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  return 
  to:@return
main: scope:[main]  from @10
  (byte*) line_cursor#24 ← phi( @10/(byte*) line_cursor#14 )
  (byte*) char_cursor#47 ← phi( @10/(byte*) char_cursor#43 )
  (byte*) main::rem#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) 255
  (byte[]) main::dividends#0 ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) main::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  call print_cls param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) line_cursor#23 ← phi( main/(byte*) line_cursor#24 )
  (byte*) char_cursor#46 ← phi( main/(byte*) char_cursor#47 )
  (byte*) main::rem#4 ← phi( main/(byte*) main::rem#0 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@12 main::@3
  (byte*) line_cursor#22 ← phi( main::@12/(byte*) line_cursor#3 main::@3/(byte*) line_cursor#23 )
  (byte*) char_cursor#45 ← phi( main::@12/(byte*) char_cursor#17 main::@3/(byte*) char_cursor#46 )
  (byte*) main::rem#1 ← phi( main::@12/(byte*) main::rem#3 main::@3/(byte*) main::rem#4 )
  (byte) main::i#2 ← phi( main::@12/(byte) main::i#1 main::@3/(byte) main::i#0 )
  (byte) main::dividend#0 ← *((byte[]) main::dividends#0 + (byte) main::i#2)
  (byte) main::divisor#0 ← *((byte[]) main::divisors#0 + (byte) main::i#2)
  (byte) div8u::dividend#0 ← (byte) main::dividend#0
  (byte) div8u::divisor#0 ← (byte) main::divisor#0
  (byte*) div8u::remainder#0 ← (byte*) main::rem#1
  call div8u param-assignment
  (byte) div8u::return#0 ← (byte) div8u::return#2
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte) main::i#11 ← phi( main::@1/(byte) main::i#2 )
  (byte*) line_cursor#21 ← phi( main::@1/(byte*) line_cursor#22 )
  (byte*) main::rem#11 ← phi( main::@1/(byte*) main::rem#1 )
  (byte) main::divisor#3 ← phi( main::@1/(byte) main::divisor#0 )
  (byte*) char_cursor#42 ← phi( main::@1/(byte*) char_cursor#45 )
  (byte) main::dividend#1 ← phi( main::@1/(byte) main::dividend#0 )
  (byte) div8u::return#3 ← phi( main::@1/(byte) div8u::return#0 )
  (byte~) main::$1 ← (byte) div8u::return#3
  (byte) main::res#0 ← (byte~) main::$1
  (byte) print_byte::b#0 ← (byte) main::dividend#1
  call print_byte param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::i#10 ← phi( main::@4/(byte) main::i#11 )
  (byte*) line_cursor#20 ← phi( main::@4/(byte*) line_cursor#21 )
  (byte*) main::rem#10 ← phi( main::@4/(byte*) main::rem#11 )
  (byte) main::res#4 ← phi( main::@4/(byte) main::res#0 )
  (byte) main::divisor#2 ← phi( main::@4/(byte) main::divisor#3 )
  (byte*) char_cursor#29 ← phi( main::@4/(byte*) char_cursor#7 )
  (byte*) char_cursor#10 ← (byte*) char_cursor#29
  (byte*) print_str::str#1 ← (const string) main::str
  call print_str param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) main::i#9 ← phi( main::@5/(byte) main::i#10 )
  (byte*) line_cursor#19 ← phi( main::@5/(byte*) line_cursor#20 )
  (byte*) main::rem#9 ← phi( main::@5/(byte*) main::rem#10 )
  (byte) main::res#3 ← phi( main::@5/(byte) main::res#4 )
  (byte) main::divisor#1 ← phi( main::@5/(byte) main::divisor#2 )
  (byte*) char_cursor#30 ← phi( main::@5/(byte*) char_cursor#2 )
  (byte*) char_cursor#11 ← (byte*) char_cursor#30
  (byte) print_byte::b#1 ← (byte) main::divisor#1
  call print_byte param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::i#8 ← phi( main::@6/(byte) main::i#9 )
  (byte*) line_cursor#18 ← phi( main::@6/(byte*) line_cursor#19 )
  (byte*) main::rem#8 ← phi( main::@6/(byte*) main::rem#9 )
  (byte) main::res#2 ← phi( main::@6/(byte) main::res#3 )
  (byte*) char_cursor#31 ← phi( main::@6/(byte*) char_cursor#7 )
  (byte*) char_cursor#12 ← (byte*) char_cursor#31
  (byte*) print_str::str#2 ← (const string) main::str1
  call print_str param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) main::i#7 ← phi( main::@7/(byte) main::i#8 )
  (byte*) line_cursor#17 ← phi( main::@7/(byte*) line_cursor#18 )
  (byte*) main::rem#6 ← phi( main::@7/(byte*) main::rem#8 )
  (byte) main::res#1 ← phi( main::@7/(byte) main::res#2 )
  (byte*) char_cursor#32 ← phi( main::@7/(byte*) char_cursor#2 )
  (byte*) char_cursor#13 ← (byte*) char_cursor#32
  (byte) print_byte::b#2 ← (byte) main::res#1
  call print_byte param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte) main::i#6 ← phi( main::@8/(byte) main::i#7 )
  (byte*) line_cursor#16 ← phi( main::@8/(byte*) line_cursor#17 )
  (byte*) main::rem#5 ← phi( main::@8/(byte*) main::rem#6 )
  (byte*) char_cursor#33 ← phi( main::@8/(byte*) char_cursor#7 )
  (byte*) char_cursor#14 ← (byte*) char_cursor#33
  (byte*) print_str::str#3 ← (const string) main::str2
  call print_str param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) main::i#5 ← phi( main::@9/(byte) main::i#6 )
  (byte*) line_cursor#15 ← phi( main::@9/(byte*) line_cursor#16 )
  (byte*) main::rem#2 ← phi( main::@9/(byte*) main::rem#5 )
  (byte*) char_cursor#34 ← phi( main::@9/(byte*) char_cursor#2 )
  (byte*) char_cursor#15 ← (byte*) char_cursor#34
  (byte) print_byte::b#3 ← *((byte*) main::rem#2)
  call print_byte param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte*) main::rem#7 ← phi( main::@10/(byte*) main::rem#2 )
  (byte) main::i#4 ← phi( main::@10/(byte) main::i#5 )
  (byte*) line_cursor#13 ← phi( main::@10/(byte*) line_cursor#15 )
  (byte*) char_cursor#35 ← phi( main::@10/(byte*) char_cursor#7 )
  (byte*) char_cursor#16 ← (byte*) char_cursor#35
  call print_ln param-assignment
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte*) main::rem#3 ← phi( main::@11/(byte*) main::rem#7 )
  (byte) main::i#3 ← phi( main::@11/(byte) main::i#4 )
  (byte*) char_cursor#36 ← phi( main::@11/(byte*) char_cursor#4 )
  (byte*) line_cursor#9 ← phi( main::@11/(byte*) line_cursor#2 )
  (byte*) line_cursor#3 ← (byte*) line_cursor#9
  (byte*) char_cursor#17 ← (byte*) char_cursor#36
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$10 ← (byte) main::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) main::$10) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@12
  (byte*) line_cursor#10 ← phi( main::@12/(byte*) line_cursor#3 )
  (byte*) char_cursor#37 ← phi( main::@12/(byte*) char_cursor#17 )
  (byte*) char_cursor#18 ← (byte*) char_cursor#37
  (byte*) line_cursor#4 ← (byte*) line_cursor#10
  return 
  to:@return
div8u: scope:[div8u]  from main::@1
  (byte*) div8u::remainder#7 ← phi( main::@1/(byte*) div8u::remainder#0 )
  (byte) div8u::divisor#5 ← phi( main::@1/(byte) div8u::divisor#0 )
  (byte) div8u::dividend#4 ← phi( main::@1/(byte) div8u::dividend#0 )
  (byte) div8u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  (byte*) div8u::remainder#5 ← phi( div8u/(byte*) div8u::remainder#7 div8u::@3/(byte*) div8u::remainder#2 )
  (byte) div8u::i#5 ← phi( div8u/(byte) div8u::i#0 div8u::@3/(byte) div8u::i#1 )
  (byte) div8u::divisor#3 ← phi( div8u/(byte) div8u::divisor#5 div8u::@3/(byte) div8u::divisor#6 )
  (byte) div8u::quotient#6 ← phi( div8u/(byte) div8u::quotient#0 div8u::@3/(byte) div8u::quotient#8 )
  (byte) div8u::dividend#2 ← phi( div8u/(byte) div8u::dividend#4 div8u::@3/(byte) div8u::dividend#5 )
  (byte) div8u::rem#4 ← phi( div8u/(byte) div8u::rem#0 div8u::@3/(byte) div8u::rem#9 )
  (byte~) div8u::$0 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::rem#1 ← (byte~) div8u::$0
  (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8u::$3 ← ! (boolean~) div8u::$2
  if((boolean~) div8u::$3) goto div8u::@2
  to:div8u::@4
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  (byte*) div8u::remainder#3 ← phi( div8u::@1/(byte*) div8u::remainder#5 div8u::@4/(byte*) div8u::remainder#6 )
  (byte) div8u::i#3 ← phi( div8u::@1/(byte) div8u::i#5 div8u::@4/(byte) div8u::i#6 )
  (byte) div8u::divisor#1 ← phi( div8u::@1/(byte) div8u::divisor#3 div8u::@4/(byte) div8u::divisor#4 )
  (byte) div8u::rem#5 ← phi( div8u::@1/(byte) div8u::rem#1 div8u::@4/(byte) div8u::rem#2 )
  (byte) div8u::quotient#3 ← phi( div8u::@1/(byte) div8u::quotient#6 div8u::@4/(byte) div8u::quotient#7 )
  (byte) div8u::dividend#3 ← phi( div8u::@1/(byte) div8u::dividend#2 div8u::@4/(byte) div8u::dividend#6 )
  (byte~) div8u::$4 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::dividend#1 ← (byte~) div8u::$4
  (byte~) div8u::$5 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8u::quotient#1 ← (byte~) div8u::$5
  (boolean~) div8u::$6 ← (byte) div8u::rem#5 >= (byte) div8u::divisor#1
  (boolean~) div8u::$7 ← ! (boolean~) div8u::$6
  if((boolean~) div8u::$7) goto div8u::@3
  to:div8u::@5
div8u::@4: scope:[div8u]  from div8u::@1
  (byte*) div8u::remainder#6 ← phi( div8u::@1/(byte*) div8u::remainder#5 )
  (byte) div8u::i#6 ← phi( div8u::@1/(byte) div8u::i#5 )
  (byte) div8u::divisor#4 ← phi( div8u::@1/(byte) div8u::divisor#3 )
  (byte) div8u::quotient#7 ← phi( div8u::@1/(byte) div8u::quotient#6 )
  (byte) div8u::dividend#6 ← phi( div8u::@1/(byte) div8u::dividend#2 )
  (byte) div8u::rem#6 ← phi( div8u::@1/(byte) div8u::rem#1 )
  (byte) div8u::rem#2 ← ++ (byte) div8u::rem#6
  to:div8u::@2
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  (byte) div8u::divisor#6 ← phi( div8u::@2/(byte) div8u::divisor#1 div8u::@5/(byte) div8u::divisor#2 )
  (byte) div8u::quotient#8 ← phi( div8u::@2/(byte) div8u::quotient#1 div8u::@5/(byte) div8u::quotient#2 )
  (byte*) div8u::remainder#2 ← phi( div8u::@2/(byte*) div8u::remainder#3 div8u::@5/(byte*) div8u::remainder#4 )
  (byte) div8u::dividend#5 ← phi( div8u::@2/(byte) div8u::dividend#1 div8u::@5/(byte) div8u::dividend#7 )
  (byte) div8u::rem#9 ← phi( div8u::@2/(byte) div8u::rem#5 div8u::@5/(byte) div8u::rem#3 )
  (byte) div8u::i#2 ← phi( div8u::@2/(byte) div8u::i#3 div8u::@5/(byte) div8u::i#4 )
  (byte) div8u::i#1 ← ++ (byte) div8u::i#2
  (boolean~) div8u::$9 ← (byte) div8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) div8u::$9) goto div8u::@1
  to:div8u::@6
div8u::@5: scope:[div8u]  from div8u::@2
  (byte*) div8u::remainder#4 ← phi( div8u::@2/(byte*) div8u::remainder#3 )
  (byte) div8u::dividend#7 ← phi( div8u::@2/(byte) div8u::dividend#1 )
  (byte) div8u::i#4 ← phi( div8u::@2/(byte) div8u::i#3 )
  (byte) div8u::divisor#2 ← phi( div8u::@2/(byte) div8u::divisor#1 )
  (byte) div8u::rem#7 ← phi( div8u::@2/(byte) div8u::rem#5 )
  (byte) div8u::quotient#4 ← phi( div8u::@2/(byte) div8u::quotient#1 )
  (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#4
  (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 ← (byte) div8u::rem#7 - (byte) div8u::divisor#2
  (byte) div8u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
  to:div8u::@3
div8u::@6: scope:[div8u]  from div8u::@3
  (byte) div8u::quotient#5 ← phi( div8u::@3/(byte) div8u::quotient#8 )
  (byte*) div8u::remainder#1 ← phi( div8u::@3/(byte*) div8u::remainder#2 )
  (byte) div8u::rem#8 ← phi( div8u::@3/(byte) div8u::rem#9 )
  *((byte*) div8u::remainder#1) ← (byte) div8u::rem#8
  (byte) div8u::return#1 ← (byte) div8u::quotient#5
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6
  (byte) div8u::return#4 ← phi( div8u::@6/(byte) div8u::return#1 )
  (byte) div8u::return#2 ← (byte) div8u::return#4
  return 
  to:@return
@10: scope:[]  from @begin
  (byte*) line_cursor#14 ← phi( @begin/(byte*) line_cursor#0 )
  (byte*) char_cursor#43 ← phi( @begin/(byte*) char_cursor#0 )
  call main param-assignment
  to:@11
@11: scope:[]  from @10
  (byte*) line_cursor#11 ← phi( @10/(byte*) line_cursor#4 )
  (byte*) char_cursor#38 ← phi( @10/(byte*) char_cursor#18 )
  (byte*) char_cursor#19 ← (byte*) char_cursor#38
  (byte*) line_cursor#5 ← (byte*) line_cursor#11
  to:@end
@end: scope:[]  from @11

SYMBOL TABLE SSA
(label) @10
(label) @11
(label) @begin
(label) @end
(byte*) char_cursor
(byte*) char_cursor#0
(byte*) char_cursor#1
(byte*) char_cursor#10
(byte*) char_cursor#11
(byte*) char_cursor#12
(byte*) char_cursor#13
(byte*) char_cursor#14
(byte*) char_cursor#15
(byte*) char_cursor#16
(byte*) char_cursor#17
(byte*) char_cursor#18
(byte*) char_cursor#19
(byte*) char_cursor#2
(byte*) char_cursor#20
(byte*) char_cursor#21
(byte*) char_cursor#22
(byte*) char_cursor#23
(byte*) char_cursor#24
(byte*) char_cursor#25
(byte*) char_cursor#26
(byte*) char_cursor#27
(byte*) char_cursor#28
(byte*) char_cursor#29
(byte*) char_cursor#3
(byte*) char_cursor#30
(byte*) char_cursor#31
(byte*) char_cursor#32
(byte*) char_cursor#33
(byte*) char_cursor#34
(byte*) char_cursor#35
(byte*) char_cursor#36
(byte*) char_cursor#37
(byte*) char_cursor#38
(byte*) char_cursor#39
(byte*) char_cursor#4
(byte*) char_cursor#40
(byte*) char_cursor#41
(byte*) char_cursor#42
(byte*) char_cursor#43
(byte*) char_cursor#44
(byte*) char_cursor#45
(byte*) char_cursor#46
(byte*) char_cursor#47
(byte*) char_cursor#5
(byte*) char_cursor#6
(byte*) char_cursor#7
(byte*) char_cursor#8
(byte*) char_cursor#9
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor , (byte*) div8u::remainder)
(byte~) div8u::$0
(byte~) div8u::$1
(boolean~) div8u::$2
(boolean~) div8u::$3
(byte~) div8u::$4
(byte~) div8u::$5
(boolean~) div8u::$6
(boolean~) div8u::$7
(byte/signed byte/word/signed word/dword/signed dword~) div8u::$8
(boolean~) div8u::$9
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@4
(label) div8u::@5
(label) div8u::@6
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0
(byte) div8u::dividend#1
(byte) div8u::dividend#2
(byte) div8u::dividend#3
(byte) div8u::dividend#4
(byte) div8u::dividend#5
(byte) div8u::dividend#6
(byte) div8u::dividend#7
(byte) div8u::divisor
(byte) div8u::divisor#0
(byte) div8u::divisor#1
(byte) div8u::divisor#2
(byte) div8u::divisor#3
(byte) div8u::divisor#4
(byte) div8u::divisor#5
(byte) div8u::divisor#6
(byte) div8u::i
(byte) div8u::i#0
(byte) div8u::i#1
(byte) div8u::i#2
(byte) div8u::i#3
(byte) div8u::i#4
(byte) div8u::i#5
(byte) div8u::i#6
(byte) div8u::quotient
(byte) div8u::quotient#0
(byte) div8u::quotient#1
(byte) div8u::quotient#2
(byte) div8u::quotient#3
(byte) div8u::quotient#4
(byte) div8u::quotient#5
(byte) div8u::quotient#6
(byte) div8u::quotient#7
(byte) div8u::quotient#8
(byte) div8u::rem
(byte) div8u::rem#0
(byte) div8u::rem#1
(byte) div8u::rem#2
(byte) div8u::rem#3
(byte) div8u::rem#4
(byte) div8u::rem#5
(byte) div8u::rem#6
(byte) div8u::rem#7
(byte) div8u::rem#8
(byte) div8u::rem#9
(byte*) div8u::remainder
(byte*) div8u::remainder#0
(byte*) div8u::remainder#1
(byte*) div8u::remainder#2
(byte*) div8u::remainder#3
(byte*) div8u::remainder#4
(byte*) div8u::remainder#5
(byte*) div8u::remainder#6
(byte*) div8u::remainder#7
(byte) div8u::return
(byte) div8u::return#0
(byte) div8u::return#1
(byte) div8u::return#2
(byte) div8u::return#3
(byte) div8u::return#4
(byte*) line_cursor
(byte*) line_cursor#0
(byte*) line_cursor#1
(byte*) line_cursor#10
(byte*) line_cursor#11
(byte*) line_cursor#12
(byte*) line_cursor#13
(byte*) line_cursor#14
(byte*) line_cursor#15
(byte*) line_cursor#16
(byte*) line_cursor#17
(byte*) line_cursor#18
(byte*) line_cursor#19
(byte*) line_cursor#2
(byte*) line_cursor#20
(byte*) line_cursor#21
(byte*) line_cursor#22
(byte*) line_cursor#23
(byte*) line_cursor#24
(byte*) line_cursor#3
(byte*) line_cursor#4
(byte*) line_cursor#5
(byte*) line_cursor#6
(byte*) line_cursor#7
(byte*) line_cursor#8
(byte*) line_cursor#9
(void()) main()
(byte~) main::$1
(boolean~) main::$10
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::dividend
(byte) main::dividend#0
(byte) main::dividend#1
(byte[]) main::dividends
(byte[]) main::dividends#0
(byte) main::divisor
(byte) main::divisor#0
(byte) main::divisor#1
(byte) main::divisor#2
(byte) main::divisor#3
(byte[]) main::divisors
(byte[]) main::divisors#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte*) main::rem
(byte*) main::rem#0
(byte*) main::rem#1
(byte*) main::rem#10
(byte*) main::rem#11
(byte*) main::rem#2
(byte*) main::rem#3
(byte*) main::rem#4
(byte*) main::rem#5
(byte*) main::rem#6
(byte*) main::rem#7
(byte*) main::rem#8
(byte*) main::rem#9
(byte) main::res
(byte) main::res#0
(byte) main::res#1
(byte) main::res#2
(byte) main::res#3
(byte) main::res#4
(const string) main::str = (string) " / @"
(const string) main::str1 = (string) " = @"
(const string) main::str2 = (string) " @"
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(const string) print_byte::$4 = (string) "0123456789abcdef"
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte[]) print_byte::hextab
(byte[]) print_byte::hextab#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(void()) print_cls()
(word/signed word/dword/signed dword~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (boolean~) div8u::$3 ← (byte~) div8u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8u::$2 ← (byte~) div8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8u::$7 ← (byte) div8u::rem#5 < (byte) div8u::divisor#1 from (boolean~) div8u::$6 ← (byte) div8u::rem#5 >= (byte) div8u::divisor#1
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: print_str::str#6 print_str::str#1
Not aliassing across scopes: char_cursor#44 char_cursor#10
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#40 char_cursor#16
Not aliassing across scopes: print_byte::b#4 print_byte::b#3
Not aliassing across scopes: char_cursor#41 char_cursor#15
Not aliassing across scopes: char_cursor#24 char_cursor#9
Not aliassing across scopes: char_cursor#25 char_cursor#9
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#41
Not aliassing across scopes: char_cursor#47 char_cursor#43
Not aliassing across scopes: line_cursor#24 line_cursor#14
Not aliassing across scopes: div8u::dividend#0 main::dividend#0
Not aliassing across scopes: div8u::divisor#0 main::divisor#0
Not aliassing across scopes: div8u::remainder#0 main::rem#1
Not aliassing across scopes: div8u::return#0 div8u::return#2
Not aliassing across scopes: main::$1 div8u::return#3
Not aliassing across scopes: print_byte::b#0 main::dividend#1
Not aliassing across scopes: char_cursor#29 char_cursor#7
Not aliassing across scopes: char_cursor#30 char_cursor#2
Not aliassing across scopes: print_byte::b#1 main::divisor#1
Not aliassing across scopes: char_cursor#31 char_cursor#7
Not aliassing across scopes: char_cursor#32 char_cursor#2
Not aliassing across scopes: print_byte::b#2 main::res#1
Not aliassing across scopes: char_cursor#33 char_cursor#7
Not aliassing across scopes: char_cursor#34 char_cursor#2
Not aliassing across scopes: char_cursor#35 char_cursor#7
Not aliassing across scopes: line_cursor#9 line_cursor#2
Not aliassing across scopes: char_cursor#36 char_cursor#4
Not aliassing across scopes: div8u::dividend#4 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#5 div8u::divisor#0
Not aliassing across scopes: div8u::remainder#7 div8u::remainder#0
Not aliassing across scopes: char_cursor#38 char_cursor#18
Not aliassing across scopes: line_cursor#11 line_cursor#4
Alias (byte*) char_cursor#0 = (byte*) line_cursor#0 (byte*) char_cursor#43 (byte*) line_cursor#14 
Alias (byte*) print_str::str#4 = (byte*) print_str::str#5 
Alias (byte*) char_cursor#2 = (byte*) char_cursor#20 (byte*) char_cursor#39 (byte*) char_cursor#21 
Alias (byte*) line_cursor#1 = (byte*~) print_ln::$0 (byte*) line_cursor#7 (byte*) char_cursor#3 (byte*) line_cursor#8 (byte*) char_cursor#23 (byte*) line_cursor#2 (byte*) char_cursor#4 
Alias (byte) print_byte::b#4 = (byte) print_byte::b#5 
Alias (byte*) char_cursor#24 = (byte*) char_cursor#5 
Alias (byte*) char_cursor#25 = (byte*) char_cursor#6 (byte*) char_cursor#26 (byte*) char_cursor#7 
Alias (byte*) char_cursor#28 = (byte*) char_cursor#8 (byte*) char_cursor#9 
Alias (byte*) main::rem#0 = (byte*) main::rem#4 
Alias (byte*) char_cursor#46 = (byte*) char_cursor#47 
Alias (byte*) line_cursor#23 = (byte*) line_cursor#24 
Alias (byte) div8u::return#0 = (byte) div8u::return#3 
Alias (byte) main::dividend#0 = (byte) main::dividend#1 
Alias (byte*) char_cursor#42 = (byte*) char_cursor#45 
Alias (byte) main::divisor#0 = (byte) main::divisor#3 (byte) main::divisor#2 (byte) main::divisor#1 
Alias (byte*) main::rem#1 = (byte*) main::rem#11 (byte*) main::rem#10 (byte*) main::rem#9 (byte*) main::rem#8 (byte*) main::rem#6 (byte*) main::rem#5 (byte*) main::rem#2 (byte*) main::rem#7 (byte*) main::rem#3 
Alias (byte*) line_cursor#13 = (byte*) line_cursor#21 (byte*) line_cursor#22 (byte*) line_cursor#20 (byte*) line_cursor#19 (byte*) line_cursor#18 (byte*) line_cursor#17 (byte*) line_cursor#16 (byte*) line_cursor#15 
Alias (byte) main::i#10 = (byte) main::i#11 (byte) main::i#2 (byte) main::i#9 (byte) main::i#8 (byte) main::i#7 (byte) main::i#6 (byte) main::i#5 (byte) main::i#4 (byte) main::i#3 
Alias (byte) main::res#0 = (byte~) main::$1 (byte) main::res#4 (byte) main::res#3 (byte) main::res#2 (byte) main::res#1 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#29 
Alias (byte*) char_cursor#11 = (byte*) char_cursor#30 
Alias (byte*) char_cursor#12 = (byte*) char_cursor#31 
Alias (byte*) char_cursor#13 = (byte*) char_cursor#32 
Alias (byte*) char_cursor#14 = (byte*) char_cursor#33 
Alias (byte*) char_cursor#15 = (byte*) char_cursor#34 
Alias (byte*) char_cursor#16 = (byte*) char_cursor#35 
Alias (byte*) line_cursor#10 = (byte*) line_cursor#3 (byte*) line_cursor#9 (byte*) line_cursor#4 
Alias (byte*) char_cursor#17 = (byte*) char_cursor#36 (byte*) char_cursor#37 (byte*) char_cursor#18 
Alias (byte) div8u::rem#1 = (byte~) div8u::$0 (byte) div8u::rem#6 
Alias (byte) div8u::dividend#1 = (byte~) div8u::$4 (byte) div8u::dividend#7 
Alias (byte) div8u::quotient#1 = (byte~) div8u::$5 (byte) div8u::quotient#4 
Alias (byte) div8u::dividend#2 = (byte) div8u::dividend#6 
Alias (byte) div8u::quotient#6 = (byte) div8u::quotient#7 
Alias (byte) div8u::divisor#3 = (byte) div8u::divisor#4 
Alias (byte) div8u::i#5 = (byte) div8u::i#6 
Alias (byte*) div8u::remainder#5 = (byte*) div8u::remainder#6 
Alias (byte) div8u::rem#5 = (byte) div8u::rem#7 
Alias (byte) div8u::divisor#1 = (byte) div8u::divisor#2 
Alias (byte) div8u::i#3 = (byte) div8u::i#4 
Alias (byte*) div8u::remainder#3 = (byte*) div8u::remainder#4 
Alias (byte) div8u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword~) div8u::$8 
Alias (byte) div8u::rem#8 = (byte) div8u::rem#9 
Alias (byte*) div8u::remainder#1 = (byte*) div8u::remainder#2 
Alias (byte) div8u::return#1 = (byte) div8u::quotient#5 (byte) div8u::quotient#8 (byte) div8u::return#4 (byte) div8u::return#2 
Alias (byte*) char_cursor#19 = (byte*) char_cursor#38 
Alias (byte*) line_cursor#11 = (byte*) line_cursor#5 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#6 print_str::str#1
Not aliassing across scopes: char_cursor#44 char_cursor#10
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#40 char_cursor#16
Not aliassing across scopes: print_byte::b#4 print_byte::b#3
Not aliassing across scopes: char_cursor#41 char_cursor#15
Not aliassing across scopes: char_cursor#24 char_cursor#28
Not aliassing across scopes: char_cursor#25 char_cursor#28
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#41
Not aliassing across scopes: char_cursor#46 char_cursor#0
Not aliassing across scopes: line_cursor#23 char_cursor#0
Not aliassing identity: main::rem#1 main::rem#1
Not aliassing across scopes: div8u::dividend#0 main::dividend#0
Not aliassing across scopes: div8u::divisor#0 main::divisor#0
Not aliassing across scopes: div8u::remainder#0 main::rem#1
Not aliassing across scopes: div8u::return#0 div8u::return#1
Not aliassing across scopes: main::res#0 div8u::return#0
Not aliassing across scopes: print_byte::b#0 main::dividend#0
Not aliassing across scopes: char_cursor#10 char_cursor#25
Not aliassing across scopes: char_cursor#11 char_cursor#2
Not aliassing across scopes: print_byte::b#1 main::divisor#0
Not aliassing across scopes: char_cursor#12 char_cursor#25
Not aliassing across scopes: char_cursor#13 char_cursor#2
Not aliassing across scopes: print_byte::b#2 main::res#0
Not aliassing across scopes: char_cursor#14 char_cursor#25
Not aliassing across scopes: char_cursor#15 char_cursor#2
Not aliassing across scopes: char_cursor#16 char_cursor#25
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#17 line_cursor#1
Not aliassing across scopes: div8u::dividend#4 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#5 div8u::divisor#0
Not aliassing across scopes: div8u::remainder#7 div8u::remainder#0
Not aliassing across scopes: char_cursor#19 char_cursor#17
Not aliassing across scopes: line_cursor#11 line_cursor#10
Alias (byte) div8u::dividend#2 = (byte) div8u::dividend#3 
Alias (byte) div8u::quotient#3 = (byte) div8u::quotient#6 
Alias (byte) div8u::divisor#1 = (byte) div8u::divisor#3 (byte) div8u::divisor#6 
Alias (byte) div8u::i#2 = (byte) div8u::i#3 (byte) div8u::i#5 
Alias (byte*) div8u::remainder#1 = (byte*) div8u::remainder#3 (byte*) div8u::remainder#5 
Alias (byte) div8u::dividend#1 = (byte) div8u::dividend#5 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#6 print_str::str#1
Not aliassing across scopes: char_cursor#44 char_cursor#10
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#40 char_cursor#16
Not aliassing across scopes: print_byte::b#4 print_byte::b#3
Not aliassing across scopes: char_cursor#41 char_cursor#15
Not aliassing across scopes: char_cursor#24 char_cursor#28
Not aliassing across scopes: char_cursor#25 char_cursor#28
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#41
Not aliassing across scopes: char_cursor#46 char_cursor#0
Not aliassing across scopes: line_cursor#23 char_cursor#0
Not aliassing identity: main::rem#1 main::rem#1
Not aliassing across scopes: div8u::dividend#0 main::dividend#0
Not aliassing across scopes: div8u::divisor#0 main::divisor#0
Not aliassing across scopes: div8u::remainder#0 main::rem#1
Not aliassing across scopes: div8u::return#0 div8u::return#1
Not aliassing across scopes: main::res#0 div8u::return#0
Not aliassing across scopes: print_byte::b#0 main::dividend#0
Not aliassing across scopes: char_cursor#10 char_cursor#25
Not aliassing across scopes: char_cursor#11 char_cursor#2
Not aliassing across scopes: print_byte::b#1 main::divisor#0
Not aliassing across scopes: char_cursor#12 char_cursor#25
Not aliassing across scopes: char_cursor#13 char_cursor#2
Not aliassing across scopes: print_byte::b#2 main::res#0
Not aliassing across scopes: char_cursor#14 char_cursor#25
Not aliassing across scopes: char_cursor#15 char_cursor#2
Not aliassing across scopes: char_cursor#16 char_cursor#25
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#17 line_cursor#1
Not aliassing across scopes: div8u::dividend#4 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#5 div8u::divisor#0
Not aliassing across scopes: div8u::remainder#7 div8u::remainder#0
Not aliassing across scopes: char_cursor#19 char_cursor#17
Not aliassing across scopes: line_cursor#11 line_cursor#10
Self Phi Eliminated (byte*) char_cursor#22
Self Phi Eliminated (byte*) main::rem#1
Self Phi Eliminated (byte) div8u::divisor#1
Self Phi Eliminated (byte*) div8u::remainder#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) line_cursor#12 (byte*) line_cursor#13
Redundant Phi (byte*) char_cursor#40 (byte*) char_cursor#16
Redundant Phi (byte*) char_cursor#22 (byte*) char_cursor#40
Redundant Phi (byte*) char_cursor#24 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#25 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#46 (byte*) char_cursor#0
Redundant Phi (byte*) line_cursor#23 (byte*) char_cursor#0
Redundant Phi (byte*) main::rem#1 (byte*) main::rem#0
Redundant Phi (byte*) char_cursor#10 (byte*) char_cursor#25
Redundant Phi (byte*) char_cursor#11 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#12 (byte*) char_cursor#25
Redundant Phi (byte*) char_cursor#13 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#14 (byte*) char_cursor#25
Redundant Phi (byte*) char_cursor#15 (byte*) char_cursor#2
Redundant Phi (byte*) char_cursor#16 (byte*) char_cursor#25
Redundant Phi (byte*) line_cursor#10 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#17 (byte*) line_cursor#1
Redundant Phi (byte) div8u::dividend#4 (byte) div8u::dividend#0
Redundant Phi (byte) div8u::divisor#5 (byte) div8u::divisor#0
Redundant Phi (byte*) div8u::remainder#7 (byte*) div8u::remainder#0
Redundant Phi (byte) div8u::divisor#1 (byte) div8u::divisor#5
Redundant Phi (byte*) div8u::remainder#1 (byte*) div8u::remainder#7
Redundant Phi (byte*) char_cursor#19 (byte*) char_cursor#17
Redundant Phi (byte*) line_cursor#11 (byte*) line_cursor#10
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) char_cursor#44 (byte*) char_cursor#28
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_str::$0 if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2
Simple Condition (boolean~) print_ln::$1 if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) main::$10 if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@1
Simple Condition (boolean~) div8u::$3 if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2
Simple Condition (boolean~) div8u::$7 if((byte) div8u::rem#5<(byte) div8u::divisor#0) goto div8u::@3
Simple Condition (boolean~) div8u::$9 if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) char_cursor#0 = ((byte*))1024
Constant (const string) print_byte::hextab#0 = print_byte::$4
Constant (const byte*) print_cls::sc#0 = ((byte*))1024
Constant (const word/signed word/dword/signed dword) print_cls::$0 = 1024+1000
Constant (const byte*) main::rem#0 = ((byte*))255
Constant (const byte[]) main::dividends#0 = { 255, 255, 255, 255, 255, 255 }
Constant (const byte[]) main::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) main::i#0 = 0
Constant (const string) print_str::str#1 = main::str
Constant (const string) print_str::str#2 = main::str1
Constant (const string) print_str::str#3 = main::str2
Constant (const byte) div8u::rem#0 = 0
Constant (const byte) div8u::quotient#0 = 0
Constant (const byte) div8u::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) div8u::remainder#0 = main::rem#0
Succesful SSA optimization Pass2ConstantIdentification
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) main::@3
Culled Empty Block (label) @11
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: char_cursor#2 char_cursor#28
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#4 print_byte::b#3
Not aliassing across scopes: char_cursor#41 char_cursor#2
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#41
Not aliassing across scopes: char_cursor#42 line_cursor#1
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: div8u::dividend#0 main::dividend#0
Not aliassing across scopes: div8u::divisor#0 main::divisor#0
Not aliassing across scopes: div8u::return#0 div8u::return#1
Not aliassing across scopes: main::res#0 div8u::return#0
Not aliassing across scopes: print_byte::b#0 main::dividend#0
Not aliassing across scopes: print_byte::b#1 main::divisor#0
Not aliassing across scopes: print_byte::b#2 main::res#0
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: char_cursor#2 char_cursor#28
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#4 print_byte::b#3
Not aliassing across scopes: char_cursor#41 char_cursor#2
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#41
Not aliassing across scopes: char_cursor#42 line_cursor#1
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: div8u::dividend#0 main::dividend#0
Not aliassing across scopes: div8u::divisor#0 main::divisor#0
Not aliassing across scopes: div8u::return#0 div8u::return#1
Not aliassing across scopes: main::res#0 div8u::return#0
Not aliassing across scopes: print_byte::b#0 main::dividend#0
Not aliassing across scopes: print_byte::b#1 main::divisor#0
Not aliassing across scopes: print_byte::b#2 main::res#0
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::rem#0
Inlining constant with var siblings (const byte) div8u::quotient#0
Inlining constant with var siblings (const byte) div8u::quotient#0
Inlining constant with var siblings (const byte) div8u::quotient#0
Inlining constant with var siblings (const byte) div8u::i#0
Inlining constant with var siblings (const byte) div8u::i#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Constant inlined print_cls::$0 = (word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000
Constant inlined div8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div8u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#3 = (const string) main::str2
Constant inlined print_str::str#2 = (const string) main::str1
Constant inlined char_cursor#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined print_str::str#1 = (const string) main::str
Constant inlined print_byte::$4 = (const string) print_byte::hextab#0
Constant inlined print_cls::sc#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined div8u::remainder#0 = (const byte*) main::rem#0
Constant inlined div8u::rem#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @10 @end main main::@1 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9 main::@10 main::@11 main::@12 main::@return print_ln print_ln::@1 print_ln::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div8u div8u::@1 div8u::@4 div8u::@2 div8u::@5 div8u::@3 div8u::@6 div8u::@return print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting main::@13(between main::@12 and main::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting div8u::@8(between div8u::@3 and div8u::@1)
Added new block during phi lifting div8u::@9(between div8u::@1 and div8u::@2)
Added new block during phi lifting div8u::@10(between div8u::@2 and div8u::@3)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @10 @end main main::@1 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9 main::@10 main::@11 main::@12 main::@return main::@13 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div8u div8u::@1 div8u::@4 div8u::@2 div8u::@5 div8u::@3 div8u::@6 div8u::@return div8u::@8 div8u::@10 div8u::@9 print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @10
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 div8u:11 print_byte:17 print_str:19 print_byte:23 print_str:25 print_byte:29 print_str:31 print_byte:35 print_ln:37 
Calls in [print_byte] to print_char:55 print_char:60 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 19 initial phi equivalence classes
Coalesced [15] print_byte::b#7 ← print_byte::b#0
Coalesced [16] char_cursor#50 ← char_cursor#42
Coalesced [21] print_byte::b#8 ← print_byte::b#1
Coalesced [22] char_cursor#51 ← char_cursor#2
Coalesced [27] print_byte::b#9 ← print_byte::b#2
Coalesced (already) [28] char_cursor#52 ← char_cursor#2
Coalesced [33] print_byte::b#6 ← print_byte::b#3
Coalesced (already) [34] char_cursor#49 ← char_cursor#2
Coalesced [41] main::i#12 ← main::i#1
Not coalescing [42] char_cursor#48 ← line_cursor#1
Coalesced [43] line_cursor#25 ← line_cursor#1
Coalesced [44] line_cursor#26 ← line_cursor#13
Coalesced (already) [49] line_cursor#27 ← line_cursor#1
Coalesced [53] print_char::ch#3 ← print_char::ch#0
Coalesced [54] char_cursor#53 ← char_cursor#41
Coalesced [58] print_char::ch#4 ← print_char::ch#1
Coalesced [59] char_cursor#54 ← char_cursor#28
Coalesced [67] print_str::str#7 ← print_str::str#6
Coalesced (already) [68] char_cursor#55 ← char_cursor#28
Coalesced [75] print_str::str#8 ← print_str::str#0
Coalesced [76] char_cursor#56 ← char_cursor#1
Coalesced [77] div8u::dividend#8 ← div8u::dividend#0
Coalesced [83] div8u::rem#12 ← div8u::rem#2
Coalesced [90] div8u::rem#14 ← div8u::rem#3
Coalesced [91] div8u::return#6 ← div8u::quotient#2
Coalesced [97] div8u::rem#10 ← div8u::rem#8
Coalesced [98] div8u::dividend#9 ← div8u::dividend#1
Coalesced [99] div8u::quotient#9 ← div8u::return#1
Coalesced [100] div8u::i#7 ← div8u::i#1
Coalesced [101] div8u::rem#13 ← div8u::rem#5
Coalesced [102] div8u::return#5 ← div8u::quotient#1
Coalesced [103] div8u::rem#11 ← div8u::rem#1
Coalesced [110] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) div8u::@8
Culled Empty Block (label) div8u::@10
Culled Empty Block (label) div8u::@9
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @10 @end main main::@1 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9 main::@10 main::@11 main::@12 main::@return main::@13 print_ln print_ln::@1 print_ln::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div8u div8u::@1 div8u::@4 div8u::@2 div8u::@5 div8u::@3 div8u::@6 div8u::@return print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @10
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of div8u
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@10
@10: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @10
  [3] phi() [ ] ( )
main: scope:[main]  from @10
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@13
  [6] (byte*) line_cursor#13 ← phi( main::@13/(byte*) line_cursor#1 main/((byte*))(word/signed word/dword/signed dword) 1024 ) [ main::i#10 char_cursor#42 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 ] )
  [6] (byte*) char_cursor#42 ← phi( main::@13/(byte*~) char_cursor#48 main/((byte*))(word/signed word/dword/signed dword) 1024 ) [ main::i#10 char_cursor#42 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 ] )
  [6] (byte) main::i#10 ← phi( main::@13/(byte) main::i#1 main/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ main::i#10 char_cursor#42 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 ] )
  [7] (byte) main::dividend#0 ← *((const byte[]) main::dividends#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] )
  [8] (byte) main::divisor#0 ← *((const byte[]) main::divisors#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] )
  [9] (byte) div8u::dividend#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] )
  [10] (byte) div8u::divisor#0 ← (byte) main::divisor#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] )
  [11] call div8u param-assignment [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
  [12] (byte) div8u::return#0 ← (byte) div8u::return#1 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] )
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] (byte) main::res#0 ← (byte) div8u::return#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] )
  [14] (byte) print_byte::b#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] )
  [15] call print_byte param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] )
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] phi() [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] )
  [17] call print_str param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] )
  to:main::@6
main::@6: scope:[main]  from main::@5
  [18] (byte) print_byte::b#1 ← (byte) main::divisor#0 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] )
  [19] call print_byte param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] )
  to:main::@7
main::@7: scope:[main]  from main::@6
  [20] phi() [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] )
  [21] call print_str param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [22] (byte) print_byte::b#2 ← (byte) main::res#0 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] )
  [23] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@9
main::@9: scope:[main]  from main::@8
  [24] phi() [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  [25] call print_str param-assignment [ main::i#10 line_cursor#13 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#2 ] )
  to:main::@10
main::@10: scope:[main]  from main::@9
  [26] (byte) print_byte::b#3 ← *((const byte*) main::rem#0) [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] )
  [27] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@11
main::@11: scope:[main]  from main::@10
  [28] phi() [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  [29] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  to:main::@12
main::@12: scope:[main]  from main::@11
  [30] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] )
  [31] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@13 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@12
  [32] return  [ ] ( main:2 [ ] )
  to:@return
main::@13: scope:[main]  from main::@12
  [33] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] )
  to:main::@1
print_ln: scope:[print_ln]  from main::@11
  [34] phi() [ line_cursor#13 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [35] (byte*) line_cursor#6 ← phi( print_ln/(byte*) line_cursor#13 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#6 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#6 char_cursor#28 ] )
  [36] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] )
  [37] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [38] return  [ line_cursor#1 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 ] )
  to:@return
print_byte: scope:[print_byte]  from main::@10 main::@4 main::@6 main::@8
  [39] (byte*) char_cursor#41 ← phi( main::@10/(byte*) char_cursor#2 main::@4/(byte*) char_cursor#42 main::@6/(byte*) char_cursor#2 main::@8/(byte*) char_cursor#2 ) [ print_byte::b#4 char_cursor#41 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 ] )
  [39] (byte) print_byte::b#4 ← phi( main::@10/(byte) print_byte::b#3 main::@4/(byte) print_byte::b#0 main::@6/(byte) print_byte::b#1 main::@8/(byte) print_byte::b#2 ) [ print_byte::b#4 char_cursor#41 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 ] )
  [40] (byte~) print_byte::$0 ← (byte) print_byte::b#4 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#4 char_cursor#41 print_byte::$0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] )
  [41] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#4 char_cursor#41 print_char::ch#0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] )
  [42] call print_char param-assignment [ char_cursor#28 print_byte::b#4 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [43] (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] )
  [44] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] )
  [45] call print_char param-assignment [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [46] return  [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [47] (byte*) char_cursor#27 ← phi( print_byte/(byte*) char_cursor#41 print_byte::@1/(byte*) char_cursor#28 ) [ print_char::ch#2 char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_char::ch#2 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 print_char::ch#2 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 print_char::ch#2 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 print_char::ch#2 char_cursor#27 ] )
  [47] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 ) [ print_char::ch#2 char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 print_char::ch#2 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_char::ch#2 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 print_char::ch#2 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 print_char::ch#2 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 print_char::ch#2 char_cursor#27 ] )
  [48] *((byte*) char_cursor#27) ← (byte) print_char::ch#2 [ char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] )
  [49] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [50] return  [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  to:@return
print_str: scope:[print_str]  from main::@5 main::@7 main::@9
  [51] (byte*) print_str::str#6 ← phi( main::@5/(const string) main::str main::@7/(const string) main::str1 main::@9/(const string) main::str2 ) [ char_cursor#28 print_str::str#6 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_str::str#6 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_str::str#6 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#28 print_str::str#6 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [52] (byte*) char_cursor#2 ← phi( print_str/(byte*) char_cursor#28 print_str::@2/(byte*) char_cursor#1 ) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] )
  [52] (byte*) print_str::str#4 ← phi( print_str/(byte*) print_str::str#6 print_str::@2/(byte*) print_str::str#0 ) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] )
  [53] if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [54] return  [ char_cursor#2 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [55] *((byte*) char_cursor#2) ← *((byte*) print_str::str#4) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] )
  [56] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#4 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#4 char_cursor#1 ] )
  [57] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4 [ print_str::str#0 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#0 char_cursor#1 ] )
  to:print_str::@1
div8u: scope:[div8u]  from main::@1
  [58] phi() [ div8u::dividend#0 div8u::divisor#0 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] )
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  [59] (byte) div8u::i#2 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::i#1 ) [ div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] )
  [59] (byte) div8u::quotient#3 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::return#1 ) [ div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] )
  [59] (byte) div8u::dividend#2 ← phi( div8u/(byte) div8u::dividend#0 div8u::@3/(byte) div8u::dividend#1 ) [ div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] )
  [59] (byte) div8u::rem#4 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::rem#8 ) [ div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::rem#4 div8u::dividend#2 div8u::quotient#3 div8u::i#2 ] )
  [60] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] )
  [61] (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] )
  [62] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] )
  to:div8u::@4
div8u::@4: scope:[div8u]  from div8u::@1
  [63] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] )
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  [64] (byte) div8u::rem#5 ← phi( div8u::@1/(byte) div8u::rem#1 div8u::@4/(byte) div8u::rem#2 ) [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#5 ] )
  [65] (byte) div8u::dividend#1 ← (byte) div8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] )
  [66] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] )
  [67] if((byte) div8u::rem#5<(byte) div8u::divisor#0) goto div8u::@3 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] )
  to:div8u::@5
div8u::@5: scope:[div8u]  from div8u::@2
  [68] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] )
  [69] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#0 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] )
  to:div8u::@3
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  [70] (byte) div8u::return#1 ← phi( div8u::@2/(byte) div8u::quotient#1 div8u::@5/(byte) div8u::quotient#2 ) [ div8u::divisor#0 div8u::return#1 div8u::i#2 div8u::rem#8 div8u::dividend#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::i#2 div8u::rem#8 div8u::dividend#1 ] )
  [70] (byte) div8u::rem#8 ← phi( div8u::@2/(byte) div8u::rem#5 div8u::@5/(byte) div8u::rem#3 ) [ div8u::divisor#0 div8u::return#1 div8u::i#2 div8u::rem#8 div8u::dividend#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::i#2 div8u::rem#8 div8u::dividend#1 ] )
  [71] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] )
  [72] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] )
  to:div8u::@6
div8u::@6: scope:[div8u]  from div8u::@3
  [73] *((const byte*) main::rem#0) ← (byte) div8u::rem#8 [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6
  [74] return  [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
  to:@return
print_cls: scope:[print_cls]  from main
  [75] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [76] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) 1024 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [77] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [78] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [79] if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [80] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@10 dominated by  @10 @begin 
@end dominated by  @end @10 @begin 
main dominated by  main @10 @begin 
main::@1 dominated by  main main::@1 @10 @begin 
main::@4 dominated by  main main::@1 @10 main::@4 @begin 
main::@5 dominated by  main main::@1 main::@5 @10 main::@4 @begin 
main::@6 dominated by  main main::@1 main::@5 main::@6 @10 main::@4 @begin 
main::@7 dominated by  main::@7 main main::@1 main::@5 main::@6 @10 main::@4 @begin 
main::@8 dominated by  main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 @begin 
main::@9 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 @begin 
main::@10 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 @begin main::@10 
main::@11 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 
main::@12 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 main::@12 
main::@return dominated by  main::@9 main::@return main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 main::@12 
main::@13 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 main::@13 main::@12 
print_ln dominated by  main::@9 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 print_ln 
print_ln::@1 dominated by  main::@9 print_ln::@1 main::@7 main::@8 main main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 print_ln 
print_ln::@return dominated by  main::@9 print_ln::@1 main::@7 main::@8 main print_ln::@return main::@1 main::@5 main::@6 @10 main::@4 main::@11 @begin main::@10 print_ln 
print_byte dominated by  main main::@1 @10 main::@4 @begin print_byte 
print_byte::@1 dominated by  main main::@1 print_byte::@1 @10 main::@4 @begin print_byte 
print_byte::@return dominated by  main main::@1 print_byte::@1 @10 main::@4 @begin print_byte print_byte::@return 
print_char dominated by  main print_char main::@1 @10 main::@4 @begin print_byte 
print_char::@return dominated by  main print_char main::@1 @10 main::@4 print_char::@return @begin print_byte 
print_str dominated by  main main::@1 main::@5 @10 main::@4 @begin print_str 
print_str::@1 dominated by  main print_str::@1 main::@1 main::@5 @10 main::@4 @begin print_str 
print_str::@return dominated by  print_str::@return main print_str::@1 main::@1 main::@5 @10 main::@4 @begin print_str 
print_str::@2 dominated by  main print_str::@1 print_str::@2 main::@1 main::@5 @10 main::@4 @begin print_str 
div8u dominated by  main main::@1 @10 @begin div8u 
div8u::@1 dominated by  main main::@1 @10 @begin div8u::@1 div8u 
div8u::@4 dominated by  main div8u::@4 main::@1 @10 @begin div8u::@1 div8u 
div8u::@2 dominated by  main div8u::@2 main::@1 @10 @begin div8u::@1 div8u 
div8u::@5 dominated by  main div8u::@2 div8u::@5 main::@1 @10 @begin div8u::@1 div8u 
div8u::@3 dominated by  main div8u::@3 div8u::@2 main::@1 @10 @begin div8u::@1 div8u 
div8u::@6 dominated by  main div8u::@3 div8u::@2 div8u::@6 main::@1 @10 @begin div8u::@1 div8u 
div8u::@return dominated by  main div8u::@3 div8u::@2 div8u::@6 main::@1 div8u::@return @10 @begin div8u::@1 div8u 
print_cls dominated by  main @10 @begin print_cls 
print_cls::@1 dominated by  main @10 @begin print_cls::@1 print_cls 
print_cls::@return dominated by  main print_cls::@return @10 @begin print_cls::@1 print_cls 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@13 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_str::@1 tails: print_str::@2 blocks: null
Found back edge: Loop head: div8u::@1 tails: div8u::@3 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@13 blocks: main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@5 main::@4 main::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Populated: Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: main::@1 tails: main::@13 blocks: main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@5 main::@4 main::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@13 blocks: main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@5 main::@4 main::@1 
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 1 loops in scope [div8u]
  Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4 
Found 0 loops in scope [print_byte]
Found 1 loops in scope [print_str]
  Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [print_char]
Loop head: main::@1 tails: main::@13 blocks: main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@5 main::@4 main::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1  depth: 2
Loop head: div8u::@1 tails: div8u::@3 blocks: div8u::@3 div8u::@2 div8u::@5 div8u::@1 div8u::@4  depth: 2
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) char_cursor
(byte*) char_cursor#1 101.0
(byte*) char_cursor#2 33.8
(byte*) char_cursor#27 4.0
(byte*) char_cursor#28 5.349999999999999
(byte*) char_cursor#41 15.333333333333332
(byte*) char_cursor#42 2.4444444444444446
(byte*~) char_cursor#48 22.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor , (byte*) div8u::remainder)
(byte~) div8u::$1 202.0
(byte) div8u::dividend
(byte) div8u::dividend#0 4.333333333333333
(byte) div8u::dividend#1 25.25
(byte) div8u::dividend#2 50.83333333333333
(byte) div8u::divisor
(byte) div8u::divisor#0 13.3125
(byte) div8u::i
(byte) div8u::i#1 151.5
(byte) div8u::i#2 16.833333333333332
(byte) div8u::quotient
(byte) div8u::quotient#1 151.5
(byte) div8u::quotient#2 101.0
(byte) div8u::quotient#3 28.857142857142858
(byte) div8u::rem
(byte) div8u::rem#1 101.0
(byte) div8u::rem#2 202.0
(byte) div8u::rem#3 202.0
(byte) div8u::rem#4 202.0
(byte) div8u::rem#5 101.0
(byte) div8u::rem#8 101.66666666666667
(byte*) div8u::remainder
(byte) div8u::return
(byte) div8u::return#0 22.0
(byte) div8u::return#1 52.33333333333333
(byte*) line_cursor
(byte*) line_cursor#1 46.42857142857143
(byte*) line_cursor#13 0.5416666666666666
(byte*) line_cursor#6 204.0
(void()) main()
(byte) main::dividend
(byte) main::dividend#0 4.714285714285714
(byte[]) main::dividends
(byte) main::divisor
(byte) main::divisor#0 3.3000000000000003
(byte[]) main::divisors
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#10 1.8333333333333333
(byte*) main::rem
(byte) main::res
(byte) main::res#0 2.4444444444444446
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 22.0
(byte) print_byte::b#1 22.0
(byte) print_byte::b#2 22.0
(byte) print_byte::b#3 22.0
(byte) print_byte::b#4 12.0
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(void()) print_ln()
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#4 101.5
(byte*) print_str::str#6 2.0

Initial phi equivalence classes
[ main::i#10 main::i#1 ]
[ line_cursor#6 line_cursor#13 line_cursor#1 ]
[ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ]
[ print_str::str#4 print_str::str#6 print_str::str#0 ]
[ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
[ div8u::i#2 div8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable main::dividend#0 to zero page equivalence class [ main::dividend#0 ]
Added variable main::divisor#0 to zero page equivalence class [ main::divisor#0 ]
Added variable div8u::divisor#0 to zero page equivalence class [ div8u::divisor#0 ]
Added variable div8u::return#0 to zero page equivalence class [ div8u::return#0 ]
Added variable main::res#0 to zero page equivalence class [ main::res#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div8u::$1 to zero page equivalence class [ div8u::$1 ]
Complete equivalence classes
[ main::i#10 main::i#1 ]
[ line_cursor#6 line_cursor#13 line_cursor#1 ]
[ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ]
[ print_str::str#4 print_str::str#6 print_str::str#0 ]
[ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
[ div8u::i#2 div8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ main::dividend#0 ]
[ main::divisor#0 ]
[ div8u::divisor#0 ]
[ div8u::return#0 ]
[ main::res#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div8u::$1 ]
Allocated zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Allocated zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ]
Allocated zp ZP_BYTE:5 [ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
Allocated zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:7 [ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ]
Allocated zp ZP_WORD:9 [ print_str::str#4 print_str::str#6 print_str::str#0 ]
Allocated zp ZP_BYTE:11 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
Allocated zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Allocated zp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
Allocated zp ZP_BYTE:14 [ div8u::i#2 div8u::i#1 ]
Allocated zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:17 [ main::dividend#0 ]
Allocated zp ZP_BYTE:18 [ main::divisor#0 ]
Allocated zp ZP_BYTE:19 [ div8u::divisor#0 ]
Allocated zp ZP_BYTE:20 [ div8u::return#0 ]
Allocated zp ZP_BYTE:21 [ main::res#0 ]
Allocated zp ZP_BYTE:22 [ print_byte::$0 ]
Allocated zp ZP_BYTE:23 [ print_byte::$2 ]
Allocated zp ZP_BYTE:24 [ div8u::$1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label char_cursor = 7
  .label line_cursor = 3
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @10 [phi:@begin->@10]
b10_from_bbegin:
  jmp b10
//SEG4 @10
b10:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @10 to main [phi:@10->main]
main_from_b10:
  jsr main
//SEG7 [3] phi from @10 to @end [phi:@10->@end]
bend_from_b10:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label rem = $ff
    .label dividend = $11
    .label divisor = $12
    .label res = $15
    .label i = 2
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [75] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte*) line_cursor#13 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG14 [6] phi (byte*) char_cursor#42 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG15 [6] phi (byte) main::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte) main::dividend#0 ← *((const byte[]) main::dividends#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG18 [8] (byte) main::divisor#0 ← *((const byte[]) main::divisors#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG19 [9] (byte) div8u::dividend#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG20 [10] (byte) div8u::divisor#0 ← (byte) main::divisor#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta div8u.divisor
  //SEG21 [11] call div8u param-assignment [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
  //SEG22 [58] phi from main::@1 to div8u [phi:main::@1->div8u]
  div8u_from_b1:
    jsr div8u
  //SEG23 [12] (byte) div8u::return#0 ← (byte) div8u::return#1 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ) -- vbuz1=vbuz2 
    lda div8u.return_1
    sta div8u.return
    jmp b4
  //SEG24 main::@4
  b4:
  //SEG25 [13] (byte) main::res#0 ← (byte) div8u::return#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta res
  //SEG26 [14] (byte) print_byte::b#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta print_byte.b
  //SEG27 [15] call print_byte param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] )
  //SEG28 [39] phi from main::@4 to print_byte [phi:main::@4->print_byte]
  print_byte_from_b4:
  //SEG29 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#42 [phi:main::@4->print_byte#0] -- register_copy 
  //SEG30 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#0 [phi:main::@4->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG31 [16] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
  //SEG32 main::@5
  b5:
  //SEG33 [17] call print_str param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] )
  //SEG34 [51] phi from main::@5 to print_str [phi:main::@5->print_str]
  print_str_from_b5:
  //SEG35 [51] phi (byte*) print_str::str#6 = (const string) main::str [phi:main::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG36 main::@6
  b6:
  //SEG37 [18] (byte) print_byte::b#1 ← (byte) main::divisor#0 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG38 [19] call print_byte param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] )
  //SEG39 [39] phi from main::@6 to print_byte [phi:main::@6->print_byte]
  print_byte_from_b6:
  //SEG40 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@6->print_byte#0] -- register_copy 
  //SEG41 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#1 [phi:main::@6->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG42 [20] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG43 main::@7
  b7:
  //SEG44 [21] call print_str param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] )
  //SEG45 [51] phi from main::@7 to print_str [phi:main::@7->print_str]
  print_str_from_b7:
  //SEG46 [51] phi (byte*) print_str::str#6 = (const string) main::str1 [phi:main::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG47 main::@8
  b8:
  //SEG48 [22] (byte) print_byte::b#2 ← (byte) main::res#0 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG49 [23] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG50 [39] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  print_byte_from_b8:
  //SEG51 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@8->print_byte#0] -- register_copy 
  //SEG52 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG53 [24] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG54 main::@9
  b9:
  //SEG55 [25] call print_str param-assignment [ main::i#10 line_cursor#13 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#2 ] )
  //SEG56 [51] phi from main::@9 to print_str [phi:main::@9->print_str]
  print_str_from_b9:
  //SEG57 [51] phi (byte*) print_str::str#6 = (const string) main::str2 [phi:main::@9->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b10
  //SEG58 main::@10
  b10:
  //SEG59 [26] (byte) print_byte::b#3 ← *((const byte*) main::rem#0) [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ) -- vbuz1=_deref_pbuc1 
    lda rem
    sta print_byte.b
  //SEG60 [27] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG61 [39] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  print_byte_from_b10:
  //SEG62 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@10->print_byte#0] -- register_copy 
  //SEG63 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG64 [28] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG65 main::@11
  b11:
  //SEG66 [29] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  //SEG67 [34] phi from main::@11 to print_ln [phi:main::@11->print_ln]
  print_ln_from_b11:
    jsr print_ln
    jmp b12
  //SEG68 main::@12
  b12:
  //SEG69 [30] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG70 [31] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@13 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b13
    jmp breturn
  //SEG71 main::@return
  breturn:
  //SEG72 [32] return  [ ] ( main:2 [ ] )
    rts
  //SEG73 main::@13
  b13:
  //SEG74 [33] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG75 [6] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  b1_from_b13:
  //SEG76 [6] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@13->main::@1#0] -- register_copy 
  //SEG77 [6] phi (byte*) char_cursor#42 = (byte*~) char_cursor#48 [phi:main::@13->main::@1#1] -- register_copy 
  //SEG78 [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@13->main::@1#2] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG79 print_ln
print_ln: {
  //SEG80 [35] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG81 [35] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG82 print_ln::@1
  b1:
  //SEG83 [36] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG84 [37] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG85 print_ln::@return
  breturn:
  //SEG86 [38] return  [ line_cursor#1 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 ] )
    rts
}
//SEG87 print_byte
print_byte: {
    .label _0 = $16
    .label _2 = $17
    .label b = 5
  //SEG88 [40] (byte~) print_byte::$0 ← (byte) print_byte::b#4 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#4 char_cursor#41 print_byte::$0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG89 [41] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#4 char_cursor#41 print_char::ch#0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda hextab,y
    sta print_char.ch
  //SEG90 [42] call print_char param-assignment [ char_cursor#28 print_byte::b#4 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] )
  //SEG91 [47] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG92 [47] phi (byte*) char_cursor#27 = (byte*) char_cursor#41 [phi:print_byte->print_char#0] -- register_copy 
  //SEG93 [47] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG94 print_byte::@1
  b1:
  //SEG95 [43] (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG96 [44] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda hextab,y
    sta print_char.ch
  //SEG97 [45] call print_char param-assignment [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG98 [47] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG99 [47] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG100 [47] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG101 print_byte::@return
  breturn:
  //SEG102 [46] return  [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG103 print_char
print_char: {
    .label ch = 6
  //SEG104 [48] *((byte*) char_cursor#27) ← (byte) print_char::ch#2 [ char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (char_cursor),y
  //SEG105 [49] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG106 print_char::@return
  breturn:
  //SEG107 [50] return  [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
}
//SEG108 print_str
print_str: {
    .label str = 9
  //SEG109 [52] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG110 [52] phi (byte*) char_cursor#2 = (byte*) char_cursor#28 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG111 [52] phi (byte*) print_str::str#4 = (byte*) print_str::str#6 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG112 print_str::@1
  b1:
  //SEG113 [53] if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG114 print_str::@return
  breturn:
  //SEG115 [54] return  [ char_cursor#2 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 ] )
    rts
  //SEG116 print_str::@2
  b2:
  //SEG117 [55] *((byte*) char_cursor#2) ← *((byte*) print_str::str#4) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG118 [56] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#4 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#4 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG119 [57] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4 [ print_str::str#0 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG120 div8u
div8u: {
    .label _1 = $18
    .label dividend = $c
    .label divisor = $13
    .label return = $14
    .label rem = $b
    .label quotient = $d
    .label i = $e
    .label return_1 = $d
  //SEG121 [59] phi from div8u to div8u::@1 [phi:div8u->div8u::@1]
  b1_from_div8u:
  //SEG122 [59] phi (byte) div8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG123 [59] phi (byte) div8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG124 [59] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8u->div8u::@1#2] -- register_copy 
  //SEG125 [59] phi (byte) div8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem
    jmp b1
  //SEG126 [59] phi from div8u::@3 to div8u::@1 [phi:div8u::@3->div8u::@1]
  b1_from_b3:
  //SEG127 [59] phi (byte) div8u::i#2 = (byte) div8u::i#1 [phi:div8u::@3->div8u::@1#0] -- register_copy 
  //SEG128 [59] phi (byte) div8u::quotient#3 = (byte) div8u::return#1 [phi:div8u::@3->div8u::@1#1] -- register_copy 
  //SEG129 [59] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:div8u::@3->div8u::@1#2] -- register_copy 
  //SEG130 [59] phi (byte) div8u::rem#4 = (byte) div8u::rem#8 [phi:div8u::@3->div8u::@1#3] -- register_copy 
    jmp b1
  //SEG131 div8u::@1
  b1:
  //SEG132 [60] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG133 [61] (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and dividend
    sta _1
  //SEG134 [62] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuz1_eq_0_then_la1 
    lda _1
    beq b2_from_b1
    jmp b4
  //SEG135 div8u::@4
  b4:
  //SEG136 [63] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ) -- vbuz1=_inc_vbuz1 
    inc rem
  //SEG137 [64] phi from div8u::@1 div8u::@4 to div8u::@2 [phi:div8u::@1/div8u::@4->div8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG138 [64] phi (byte) div8u::rem#5 = (byte) div8u::rem#1 [phi:div8u::@1/div8u::@4->div8u::@2#0] -- register_copy 
    jmp b2
  //SEG139 div8u::@2
  b2:
  //SEG140 [65] (byte) div8u::dividend#1 ← (byte) div8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG141 [66] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG142 [67] if((byte) div8u::rem#5<(byte) div8u::divisor#0) goto div8u::@3 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3_from_b2
    jmp b5
  //SEG143 div8u::@5
  b5:
  //SEG144 [68] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG145 [69] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#0 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ) -- vbuz1=vbuz1_minus_vbuz2 
    lda rem
    sec
    sbc divisor
    sta rem
  //SEG146 [70] phi from div8u::@2 div8u::@5 to div8u::@3 [phi:div8u::@2/div8u::@5->div8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG147 [70] phi (byte) div8u::return#1 = (byte) div8u::quotient#1 [phi:div8u::@2/div8u::@5->div8u::@3#0] -- register_copy 
  //SEG148 [70] phi (byte) div8u::rem#8 = (byte) div8u::rem#5 [phi:div8u::@2/div8u::@5->div8u::@3#1] -- register_copy 
    jmp b3
  //SEG149 div8u::@3
  b3:
  //SEG150 [71] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG151 [72] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b3
    jmp b6
  //SEG152 div8u::@6
  b6:
  //SEG153 [73] *((const byte*) main::rem#0) ← (byte) div8u::rem#8 [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ) -- _deref_pbuc1=vbuz1 
    lda rem
    sta main.rem
    jmp breturn
  //SEG154 div8u::@return
  breturn:
  //SEG155 [74] return  [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
    rts
}
//SEG156 print_cls
print_cls: {
    .label sc = $f
  //SEG157 [76] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG158 [76] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG159 [76] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG160 [76] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG161 print_cls::@1
  b1:
  //SEG162 [77] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG163 [78] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG164 [79] if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG165 print_cls::@return
  breturn:
  //SEG166 [80] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [33] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Statement [36] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [37] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [43] (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ main::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ main::res#0 ]
Statement [48] *((byte*) char_cursor#27) ← (byte) print_char::ch#2 [ char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ main::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:21 [ main::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
Statement [53] if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) always clobbers reg byte a reg byte y 
Statement [55] *((byte*) char_cursor#2) ← *((byte*) print_str::str#4) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) always clobbers reg byte a reg byte y 
Statement [61] (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ main::dividend#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ div8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ div8u::i#2 div8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
Statement [69] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#0 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ) always clobbers reg byte a 
Statement [77] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [79] if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [8] (byte) main::divisor#0 ← *((const byte[]) main::divisors#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ) always clobbers reg byte a 
Statement [33] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) always clobbers reg byte a 
Statement [36] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [37] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [43] (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] ) always clobbers reg byte a 
Statement [48] *((byte*) char_cursor#27) ← (byte) print_char::ch#2 [ char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] ) always clobbers reg byte y 
Statement [53] if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) always clobbers reg byte a reg byte y 
Statement [55] *((byte*) char_cursor#2) ← *((byte*) print_str::str#4) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) always clobbers reg byte a reg byte y 
Statement [61] (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) always clobbers reg byte a 
Statement [69] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#0 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ) always clobbers reg byte a 
Statement [77] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [79] if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#10 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_str::str#4 print_str::str#6 print_str::str#0 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ] : zp ZP_BYTE:13 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ div8u::i#2 div8u::i#1 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ main::dividend#0 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ main::divisor#0 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_BYTE:19 [ div8u::divisor#0 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ div8u::return#0 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ main::res#0 ] : zp ZP_BYTE:21 , reg byte x , 
Potential registers zp ZP_BYTE:22 [ print_byte::$0 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ print_byte::$2 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ div8u::$1 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [div8u] 909.67: zp ZP_BYTE:11 [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ] 333.69: zp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ] 202: zp ZP_BYTE:24 [ div8u::$1 ] 168.33: zp ZP_BYTE:14 [ div8u::i#2 div8u::i#1 ] 80.42: zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] 22: zp ZP_BYTE:20 [ div8u::return#0 ] 13.31: zp ZP_BYTE:19 [ div8u::divisor#0 ] 
Uplift Scope [] 250.97: zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] 183.93: zp ZP_WORD:7 [ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:9 [ print_str::str#4 print_str::str#6 print_str::str#0 ] 
Uplift Scope [print_byte] 100: zp ZP_BYTE:5 [ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ] 4: zp ZP_BYTE:22 [ print_byte::$0 ] 4: zp ZP_BYTE:23 [ print_byte::$2 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [main] 12.83: zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 4.71: zp ZP_BYTE:17 [ main::dividend#0 ] 3.3: zp ZP_BYTE:18 [ main::divisor#0 ] 2.44: zp ZP_BYTE:21 [ main::res#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_ln] 

Uplifting [div8u] best 20989 combination reg byte y [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ] zp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ] reg byte a [ div8u::$1 ] reg byte x [ div8u::i#2 div8u::i#1 ] zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] reg byte a [ div8u::return#0 ] zp ZP_BYTE:19 [ div8u::divisor#0 ] 
Uplifting [] best 20989 combination zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] zp ZP_WORD:7 [ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ] 
Uplifting [print_str] best 20989 combination zp ZP_WORD:9 [ print_str::str#4 print_str::str#6 print_str::str#0 ] 
Uplifting [print_byte] best 20859 combination reg byte x [ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_cls] best 20859 combination zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [main] best 20859 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] zp ZP_BYTE:17 [ main::dividend#0 ] zp ZP_BYTE:18 [ main::divisor#0 ] zp ZP_BYTE:21 [ main::res#0 ] 
Uplifting [print_char] best 20850 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_ln] best 20850 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
Uplifting [div8u] best 20850 combination zp ZP_BYTE:13 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Uplifting [div8u] best 20850 combination zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ div8u::divisor#0 ]
Uplifting [div8u] best 20850 combination zp ZP_BYTE:19 [ div8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Uplifting [main] best 20850 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ main::dividend#0 ]
Uplifting [main] best 20850 combination zp ZP_BYTE:17 [ main::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ main::divisor#0 ]
Uplifting [main] best 20850 combination zp ZP_BYTE:18 [ main::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ main::res#0 ]
Uplifting [main] best 20850 combination zp ZP_BYTE:21 [ main::res#0 ] 
Coalescing zero page register [ zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] ] with [ zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:12 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] ] with [ zp ZP_BYTE:21 [ main::res#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:18 [ main::divisor#0 ] ] with [ zp ZP_BYTE:19 [ div8u::divisor#0 ] ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:5 [ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ print_str::str#4 print_str::str#6 print_str::str#0 ]
Allocated (was zp ZP_BYTE:12) zp ZP_BYTE:9 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 main::res#0 ]
Allocated (was zp ZP_BYTE:13) zp ZP_BYTE:10 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
Allocated (was zp ZP_BYTE:17) zp ZP_BYTE:11 [ main::dividend#0 ]
Allocated (was zp ZP_BYTE:18) zp ZP_BYTE:12 [ main::divisor#0 div8u::divisor#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label char_cursor = 5
  .label line_cursor = 3
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @10 [phi:@begin->@10]
b10_from_bbegin:
  jmp b10
//SEG4 @10
b10:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @10 to main [phi:@10->main]
main_from_b10:
  jsr main
//SEG7 [3] phi from @10 to @end [phi:@10->@end]
bend_from_b10:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label rem = $ff
    .label dividend = $b
    .label divisor = $c
    .label res = 9
    .label i = 2
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [75] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte*) line_cursor#13 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG14 [6] phi (byte*) char_cursor#42 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG15 [6] phi (byte) main::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte) main::dividend#0 ← *((const byte[]) main::dividends#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG18 [8] (byte) main::divisor#0 ← *((const byte[]) main::divisors#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG19 [9] (byte) div8u::dividend#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG20 [10] (byte) div8u::divisor#0 ← (byte) main::divisor#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] )
    // (byte) div8u::divisor#0 = (byte) main::divisor#0  // register copy zp ZP_BYTE:12
  //SEG21 [11] call div8u param-assignment [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
  //SEG22 [58] phi from main::@1 to div8u [phi:main::@1->div8u]
  div8u_from_b1:
    jsr div8u
  //SEG23 [12] (byte) div8u::return#0 ← (byte) div8u::return#1 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ) -- vbuaa=vbuz1 
    lda div8u.return
    jmp b4
  //SEG24 main::@4
  b4:
  //SEG25 [13] (byte) main::res#0 ← (byte) div8u::return#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ) -- vbuz1=vbuaa 
    sta res
  //SEG26 [14] (byte) print_byte::b#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ) -- vbuxx=vbuz1 
    ldx dividend
  //SEG27 [15] call print_byte param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] )
  //SEG28 [39] phi from main::@4 to print_byte [phi:main::@4->print_byte]
  print_byte_from_b4:
  //SEG29 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#42 [phi:main::@4->print_byte#0] -- register_copy 
  //SEG30 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#0 [phi:main::@4->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG31 [16] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
  //SEG32 main::@5
  b5:
  //SEG33 [17] call print_str param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] )
  //SEG34 [51] phi from main::@5 to print_str [phi:main::@5->print_str]
  print_str_from_b5:
  //SEG35 [51] phi (byte*) print_str::str#6 = (const string) main::str [phi:main::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b6
  //SEG36 main::@6
  b6:
  //SEG37 [18] (byte) print_byte::b#1 ← (byte) main::divisor#0 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ) -- vbuxx=vbuz1 
    ldx divisor
  //SEG38 [19] call print_byte param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] )
  //SEG39 [39] phi from main::@6 to print_byte [phi:main::@6->print_byte]
  print_byte_from_b6:
  //SEG40 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@6->print_byte#0] -- register_copy 
  //SEG41 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#1 [phi:main::@6->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG42 [20] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG43 main::@7
  b7:
  //SEG44 [21] call print_str param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] )
  //SEG45 [51] phi from main::@7 to print_str [phi:main::@7->print_str]
  print_str_from_b7:
  //SEG46 [51] phi (byte*) print_str::str#6 = (const string) main::str1 [phi:main::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b8
  //SEG47 main::@8
  b8:
  //SEG48 [22] (byte) print_byte::b#2 ← (byte) main::res#0 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ) -- vbuxx=vbuz1 
    ldx res
  //SEG49 [23] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG50 [39] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  print_byte_from_b8:
  //SEG51 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@8->print_byte#0] -- register_copy 
  //SEG52 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG53 [24] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG54 main::@9
  b9:
  //SEG55 [25] call print_str param-assignment [ main::i#10 line_cursor#13 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#2 ] )
  //SEG56 [51] phi from main::@9 to print_str [phi:main::@9->print_str]
  print_str_from_b9:
  //SEG57 [51] phi (byte*) print_str::str#6 = (const string) main::str2 [phi:main::@9->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b10
  //SEG58 main::@10
  b10:
  //SEG59 [26] (byte) print_byte::b#3 ← *((const byte*) main::rem#0) [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ) -- vbuxx=_deref_pbuc1 
    ldx rem
  //SEG60 [27] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG61 [39] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  print_byte_from_b10:
  //SEG62 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@10->print_byte#0] -- register_copy 
  //SEG63 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG64 [28] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG65 main::@11
  b11:
  //SEG66 [29] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  //SEG67 [34] phi from main::@11 to print_ln [phi:main::@11->print_ln]
  print_ln_from_b11:
    jsr print_ln
    jmp b12
  //SEG68 main::@12
  b12:
  //SEG69 [30] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG70 [31] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@13 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b13
    jmp breturn
  //SEG71 main::@return
  breturn:
  //SEG72 [32] return  [ ] ( main:2 [ ] )
    rts
  //SEG73 main::@13
  b13:
  //SEG74 [33] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG75 [6] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  b1_from_b13:
  //SEG76 [6] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@13->main::@1#0] -- register_copy 
  //SEG77 [6] phi (byte*) char_cursor#42 = (byte*~) char_cursor#48 [phi:main::@13->main::@1#1] -- register_copy 
  //SEG78 [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@13->main::@1#2] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG79 print_ln
print_ln: {
  //SEG80 [35] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG81 [35] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG82 print_ln::@1
  b1:
  //SEG83 [36] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG84 [37] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG85 print_ln::@return
  breturn:
  //SEG86 [38] return  [ line_cursor#1 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 ] )
    rts
}
//SEG87 print_byte
print_byte: {
  //SEG88 [40] (byte~) print_byte::$0 ← (byte) print_byte::b#4 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#4 char_cursor#41 print_byte::$0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] ) -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG89 [41] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#4 char_cursor#41 print_char::ch#0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG90 [42] call print_char param-assignment [ char_cursor#28 print_byte::b#4 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] )
  //SEG91 [47] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG92 [47] phi (byte*) char_cursor#27 = (byte*) char_cursor#41 [phi:print_byte->print_char#0] -- register_copy 
  //SEG93 [47] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG94 print_byte::@1
  b1:
  //SEG95 [43] (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG96 [44] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG97 [45] call print_char param-assignment [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG98 [47] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG99 [47] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG100 [47] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG101 print_byte::@return
  breturn:
  //SEG102 [46] return  [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG103 print_char
print_char: {
  //SEG104 [48] *((byte*) char_cursor#27) ← (byte) print_char::ch#2 [ char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG105 [49] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG106 print_char::@return
  breturn:
  //SEG107 [50] return  [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
}
//SEG108 print_str
print_str: {
    .label str = 7
  //SEG109 [52] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG110 [52] phi (byte*) char_cursor#2 = (byte*) char_cursor#28 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG111 [52] phi (byte*) print_str::str#4 = (byte*) print_str::str#6 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG112 print_str::@1
  b1:
  //SEG113 [53] if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG114 print_str::@return
  breturn:
  //SEG115 [54] return  [ char_cursor#2 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 ] )
    rts
  //SEG116 print_str::@2
  b2:
  //SEG117 [55] *((byte*) char_cursor#2) ← *((byte*) print_str::str#4) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG118 [56] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#4 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#4 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG119 [57] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4 [ print_str::str#0 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG120 div8u
div8u: {
    .label dividend = 9
    .label divisor = $c
    .label quotient = $a
    .label return = $a
  //SEG121 [59] phi from div8u to div8u::@1 [phi:div8u->div8u::@1]
  b1_from_div8u:
  //SEG122 [59] phi (byte) div8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG123 [59] phi (byte) div8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG124 [59] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8u->div8u::@1#2] -- register_copy 
  //SEG125 [59] phi (byte) div8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#3] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG126 [59] phi from div8u::@3 to div8u::@1 [phi:div8u::@3->div8u::@1]
  b1_from_b3:
  //SEG127 [59] phi (byte) div8u::i#2 = (byte) div8u::i#1 [phi:div8u::@3->div8u::@1#0] -- register_copy 
  //SEG128 [59] phi (byte) div8u::quotient#3 = (byte) div8u::return#1 [phi:div8u::@3->div8u::@1#1] -- register_copy 
  //SEG129 [59] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:div8u::@3->div8u::@1#2] -- register_copy 
  //SEG130 [59] phi (byte) div8u::rem#4 = (byte) div8u::rem#8 [phi:div8u::@3->div8u::@1#3] -- register_copy 
    jmp b1
  //SEG131 div8u::@1
  b1:
  //SEG132 [60] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG133 [61] (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG134 [62] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG135 div8u::@4
  b4:
  //SEG136 [63] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG137 [64] phi from div8u::@1 div8u::@4 to div8u::@2 [phi:div8u::@1/div8u::@4->div8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG138 [64] phi (byte) div8u::rem#5 = (byte) div8u::rem#1 [phi:div8u::@1/div8u::@4->div8u::@2#0] -- register_copy 
    jmp b2
  //SEG139 div8u::@2
  b2:
  //SEG140 [65] (byte) div8u::dividend#1 ← (byte) div8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG141 [66] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG142 [67] if((byte) div8u::rem#5<(byte) div8u::divisor#0) goto div8u::@3 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ) -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3_from_b2
    jmp b5
  //SEG143 div8u::@5
  b5:
  //SEG144 [68] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG145 [69] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#0 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ) -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG146 [70] phi from div8u::@2 div8u::@5 to div8u::@3 [phi:div8u::@2/div8u::@5->div8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG147 [70] phi (byte) div8u::return#1 = (byte) div8u::quotient#1 [phi:div8u::@2/div8u::@5->div8u::@3#0] -- register_copy 
  //SEG148 [70] phi (byte) div8u::rem#8 = (byte) div8u::rem#5 [phi:div8u::@2/div8u::@5->div8u::@3#1] -- register_copy 
    jmp b3
  //SEG149 div8u::@3
  b3:
  //SEG150 [71] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG151 [72] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b3
    jmp b6
  //SEG152 div8u::@6
  b6:
  //SEG153 [73] *((const byte*) main::rem#0) ← (byte) div8u::rem#8 [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ) -- _deref_pbuc1=vbuyy 
    sty main.rem
    jmp breturn
  //SEG154 div8u::@return
  breturn:
  //SEG155 [74] return  [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
    rts
}
//SEG156 print_cls
print_cls: {
    .label sc = 3
  //SEG157 [76] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG158 [76] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG159 [76] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG160 [76] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG161 print_cls::@1
  b1:
  //SEG162 [77] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG163 [78] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG164 [79] if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG165 print_cls::@return
  breturn:
  //SEG166 [80] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b10
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy i
Removing instruction ldy #0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b10_from_bbegin:
Removing instruction main_from_b10:
Removing instruction bend_from_b10:
Removing instruction b5_from_b4:
Removing instruction print_str_from_b5:
Removing instruction b7_from_b6:
Removing instruction print_str_from_b7:
Removing instruction b9_from_b8:
Removing instruction print_str_from_b9:
Removing instruction b11_from_b10:
Removing instruction print_ln_from_b11:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b10:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction div8u_from_b1:
Removing instruction b4:
Removing instruction print_byte_from_b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction print_byte_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction print_byte_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction print_byte_from_b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction breturn:
Removing instruction b1_from_b13:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_div8u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @10
(label) @begin
(label) @end
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:5 101.0
(byte*) char_cursor#2 char_cursor zp ZP_WORD:5 33.8
(byte*) char_cursor#27 char_cursor zp ZP_WORD:5 4.0
(byte*) char_cursor#28 char_cursor zp ZP_WORD:5 5.349999999999999
(byte*) char_cursor#41 char_cursor zp ZP_WORD:5 15.333333333333332
(byte*) char_cursor#42 char_cursor zp ZP_WORD:5 2.4444444444444446
(byte*~) char_cursor#48 char_cursor zp ZP_WORD:5 22.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor , (byte*) div8u::remainder)
(byte~) div8u::$1 reg byte a 202.0
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@4
(label) div8u::@5
(label) div8u::@6
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 dividend zp ZP_BYTE:9 4.333333333333333
(byte) div8u::dividend#1 dividend zp ZP_BYTE:9 25.25
(byte) div8u::dividend#2 dividend zp ZP_BYTE:9 50.83333333333333
(byte) div8u::divisor
(byte) div8u::divisor#0 divisor zp ZP_BYTE:12 13.3125
(byte) div8u::i
(byte) div8u::i#1 reg byte x 151.5
(byte) div8u::i#2 reg byte x 16.833333333333332
(byte) div8u::quotient
(byte) div8u::quotient#1 quotient zp ZP_BYTE:10 151.5
(byte) div8u::quotient#2 quotient zp ZP_BYTE:10 101.0
(byte) div8u::quotient#3 quotient zp ZP_BYTE:10 28.857142857142858
(byte) div8u::rem
(byte) div8u::rem#1 reg byte y 101.0
(byte) div8u::rem#2 reg byte y 202.0
(byte) div8u::rem#3 reg byte y 202.0
(byte) div8u::rem#4 reg byte y 202.0
(byte) div8u::rem#5 reg byte y 101.0
(byte) div8u::rem#8 reg byte y 101.66666666666667
(byte*) div8u::remainder
(byte) div8u::return
(byte) div8u::return#0 reg byte a 22.0
(byte) div8u::return#1 return zp ZP_BYTE:10 52.33333333333333
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:3 46.42857142857143
(byte*) line_cursor#13 line_cursor zp ZP_WORD:3 0.5416666666666666
(byte*) line_cursor#6 line_cursor zp ZP_WORD:3 204.0
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::dividend
(byte) main::dividend#0 dividend zp ZP_BYTE:11 4.714285714285714
(byte[]) main::dividends
(const byte[]) main::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
(byte) main::divisor
(byte) main::divisor#0 divisor zp ZP_BYTE:12 3.3000000000000003
(byte[]) main::divisors
(const byte[]) main::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 11.0
(byte) main::i#10 i zp ZP_BYTE:2 1.8333333333333333
(byte*) main::rem
(const byte*) main::rem#0 rem = ((byte*))(byte/word/signed word/dword/signed dword) 255
(byte) main::res
(byte) main::res#0 res zp ZP_BYTE:9 2.4444444444444446
(const string) main::str str = (string) " / @"
(const string) main::str1 str1 = (string) " = @"
(const string) main::str2 str2 = (string) " @"
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 22.0
(byte) print_byte::b#1 reg byte x 22.0
(byte) print_byte::b#2 reg byte x 22.0
(byte) print_byte::b#3 reg byte x 22.0
(byte) print_byte::b#4 reg byte x 12.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 202.0
(byte*) print_str::str#4 str zp ZP_WORD:7 101.5
(byte*) print_str::str#6 str zp ZP_WORD:7 2.0

zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 print_cls::sc#2 print_cls::sc#1 ]
reg byte x [ print_byte::b#4 print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:5 [ char_cursor#27 char_cursor#41 char_cursor#2 char_cursor#42 char_cursor#48 char_cursor#28 char_cursor#1 ]
zp ZP_WORD:7 [ print_str::str#4 print_str::str#6 print_str::str#0 ]
reg byte y [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
zp ZP_BYTE:9 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 main::res#0 ]
zp ZP_BYTE:10 [ div8u::quotient#3 div8u::return#1 div8u::quotient#1 div8u::quotient#2 ]
reg byte x [ div8u::i#2 div8u::i#1 ]
zp ZP_BYTE:11 [ main::dividend#0 ]
zp ZP_BYTE:12 [ main::divisor#0 div8u::divisor#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ div8u::$1 ]


FINAL ASSEMBLER
Score: 16930

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label char_cursor = 5
  .label line_cursor = 3
//SEG2 @begin
//SEG3 [1] phi from @begin to @10 [phi:@begin->@10]
//SEG4 @10
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @10 to main [phi:@10->main]
  jsr main
//SEG7 [3] phi from @10 to @end [phi:@10->@end]
//SEG8 @end
//SEG9 main
main: {
    .label rem = $ff
    .label dividend = $b
    .label divisor = $c
    .label res = 9
    .label i = 2
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [75] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 [6] phi (byte*) line_cursor#13 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG14 [6] phi (byte*) char_cursor#42 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG15 [6] phi (byte) main::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG16 main::@1
  b1:
  //SEG17 [7] (byte) main::dividend#0 ← *((const byte[]) main::dividends#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG18 [8] (byte) main::divisor#0 ← *((const byte[]) main::divisors#0 + (byte) main::i#10) [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG19 [9] (byte) div8u::dividend#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG20 [10] (byte) div8u::divisor#0 ← (byte) main::divisor#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::dividend#0 div8u::divisor#0 ] )
    // (byte) div8u::divisor#0 = (byte) main::divisor#0  // register copy zp ZP_BYTE:12
  //SEG21 [11] call div8u param-assignment [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
  //SEG22 [58] phi from main::@1 to div8u [phi:main::@1->div8u]
    jsr div8u
  //SEG23 [12] (byte) div8u::return#0 ← (byte) div8u::return#1 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#0 ] ) -- vbuaa=vbuz1 
    lda div8u.return
  //SEG24 main::@4
  //SEG25 [13] (byte) main::res#0 ← (byte) div8u::return#0 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 main::res#0 ] ) -- vbuz1=vbuaa 
    sta res
  //SEG26 [14] (byte) print_byte::b#0 ← (byte) main::dividend#0 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ( main:2 [ main::i#10 char_cursor#42 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#0 ] ) -- vbuxx=vbuz1 
    ldx dividend
  //SEG27 [15] call print_byte param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] )
  //SEG28 [39] phi from main::@4 to print_byte [phi:main::@4->print_byte]
  //SEG29 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#42 [phi:main::@4->print_byte#0] -- register_copy 
  //SEG30 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#0 [phi:main::@4->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG31 [16] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  //SEG32 main::@5
  //SEG33 [17] call print_str param-assignment [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] )
  //SEG34 [51] phi from main::@5 to print_str [phi:main::@5->print_str]
  //SEG35 [51] phi (byte*) print_str::str#6 = (const string) main::str [phi:main::@5->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG36 main::@6
  //SEG37 [18] (byte) print_byte::b#1 ← (byte) main::divisor#0 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#1 char_cursor#2 ] ) -- vbuxx=vbuz1 
    ldx divisor
  //SEG38 [19] call print_byte param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] )
  //SEG39 [39] phi from main::@6 to print_byte [phi:main::@6->print_byte]
  //SEG40 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@6->print_byte#0] -- register_copy 
  //SEG41 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#1 [phi:main::@6->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG42 [20] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  //SEG43 main::@7
  //SEG44 [21] call print_str param-assignment [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] )
  //SEG45 [51] phi from main::@7 to print_str [phi:main::@7->print_str]
  //SEG46 [51] phi (byte*) print_str::str#6 = (const string) main::str1 [phi:main::@7->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG47 main::@8
  //SEG48 [22] (byte) print_byte::b#2 ← (byte) main::res#0 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#2 ] ) -- vbuxx=vbuz1 
    ldx res
  //SEG49 [23] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG50 [39] phi from main::@8 to print_byte [phi:main::@8->print_byte]
  //SEG51 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@8->print_byte#0] -- register_copy 
  //SEG52 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#2 [phi:main::@8->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG53 [24] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  //SEG54 main::@9
  //SEG55 [25] call print_str param-assignment [ main::i#10 line_cursor#13 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#2 ] )
  //SEG56 [51] phi from main::@9 to print_str [phi:main::@9->print_str]
  //SEG57 [51] phi (byte*) print_str::str#6 = (const string) main::str2 [phi:main::@9->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG58 main::@10
  //SEG59 [26] (byte) print_byte::b#3 ← *((const byte*) main::rem#0) [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ( main:2 [ main::i#10 line_cursor#13 print_byte::b#3 char_cursor#2 ] ) -- vbuxx=_deref_pbuc1 
    ldx rem
  //SEG60 [27] call print_byte param-assignment [ main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG61 [39] phi from main::@10 to print_byte [phi:main::@10->print_byte]
  //SEG62 [39] phi (byte*) char_cursor#41 = (byte*) char_cursor#2 [phi:main::@10->print_byte#0] -- register_copy 
  //SEG63 [39] phi (byte) print_byte::b#4 = (byte) print_byte::b#3 [phi:main::@10->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG64 [28] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  //SEG65 main::@11
  //SEG66 [29] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  //SEG67 [34] phi from main::@11 to print_ln [phi:main::@11->print_ln]
    jsr print_ln
  //SEG68 main::@12
  //SEG69 [30] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG70 [31] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto main::@13 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b13
  //SEG71 main::@return
  //SEG72 [32] return  [ ] ( main:2 [ ] )
    rts
  //SEG73 main::@13
  b13:
  //SEG74 [33] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG75 [6] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  //SEG76 [6] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@13->main::@1#0] -- register_copy 
  //SEG77 [6] phi (byte*) char_cursor#42 = (byte*~) char_cursor#48 [phi:main::@13->main::@1#1] -- register_copy 
  //SEG78 [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@13->main::@1#2] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG79 print_ln
print_ln: {
  //SEG80 [35] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG81 [35] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG82 print_ln::@1
  b1:
  //SEG83 [36] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG84 [37] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1
  !:
  //SEG85 print_ln::@return
  //SEG86 [38] return  [ line_cursor#1 ] ( main:2::print_ln:29 [ main::i#10 line_cursor#1 ] )
    rts
}
//SEG87 print_byte
print_byte: {
  //SEG88 [40] (byte~) print_byte::$0 ← (byte) print_byte::b#4 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#4 char_cursor#41 print_byte::$0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_byte::$0 ] ) -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG89 [41] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#4 char_cursor#41 print_char::ch#0 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#41 print_char::ch#0 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG90 [42] call print_char param-assignment [ char_cursor#28 print_byte::b#4 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::b#4 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::b#4 ] )
  //SEG91 [47] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG92 [47] phi (byte*) char_cursor#27 = (byte*) char_cursor#41 [phi:print_byte->print_char#0] -- register_copy 
  //SEG93 [47] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG94 print_byte::@1
  //SEG95 [43] (byte~) print_byte::$2 ← (byte) print_byte::b#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_byte::$2 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_byte::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG96 [44] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 print_char::ch#1 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG97 [45] call print_char param-assignment [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG98 [47] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG99 [47] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG100 [47] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG101 print_byte::@return
  //SEG102 [46] return  [ char_cursor#28 ] ( main:2::print_byte:15 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27 [ main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG103 print_char
print_char: {
  //SEG104 [48] *((byte*) char_cursor#27) ← (byte) print_char::ch#2 [ char_cursor#27 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#27 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#27 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#27 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#27 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#27 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG105 [49] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG106 print_char::@return
  //SEG107 [50] return  [ char_cursor#28 ] ( main:2::print_byte:15::print_char:42 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:19::print_char:42 [ main::i#10 line_cursor#13 main::res#0 print_byte::b#4 char_cursor#28 ] main:2::print_byte:23::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:27::print_char:42 [ main::i#10 line_cursor#13 print_byte::b#4 char_cursor#28 ] main:2::print_byte:15::print_char:45 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#28 ] main:2::print_byte:19::print_char:45 [ main::i#10 line_cursor#13 main::res#0 char_cursor#28 ] main:2::print_byte:23::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] main:2::print_byte:27::print_char:45 [ main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
}
//SEG108 print_str
print_str: {
    .label str = 7
  //SEG109 [52] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG110 [52] phi (byte*) char_cursor#2 = (byte*) char_cursor#28 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG111 [52] phi (byte*) print_str::str#4 = (byte*) print_str::str#6 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG112 print_str::@1
  b1:
  //SEG113 [53] if(*((byte*) print_str::str#4)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG114 print_str::@return
  //SEG115 [54] return  [ char_cursor#2 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 ] )
    rts
  //SEG116 print_str::@2
  b2:
  //SEG117 [55] *((byte*) char_cursor#2) ← *((byte*) print_str::str#4) [ char_cursor#2 print_str::str#4 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 char_cursor#2 print_str::str#4 ] main:2::print_str:25 [ main::i#10 line_cursor#13 char_cursor#2 print_str::str#4 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (char_cursor),y
  //SEG118 [56] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#4 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#4 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#4 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG119 [57] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4 [ print_str::str#0 char_cursor#1 ] ( main:2::print_str:17 [ main::i#10 line_cursor#13 main::divisor#0 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:21 [ main::i#10 line_cursor#13 main::res#0 print_str::str#0 char_cursor#1 ] main:2::print_str:25 [ main::i#10 line_cursor#13 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG120 div8u
div8u: {
    .label dividend = 9
    .label divisor = $c
    .label quotient = $a
    .label return = $a
  //SEG121 [59] phi from div8u to div8u::@1 [phi:div8u->div8u::@1]
  //SEG122 [59] phi (byte) div8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG123 [59] phi (byte) div8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#1] -- vbuz1=vbuc1 
    txa
    sta quotient
  //SEG124 [59] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8u->div8u::@1#2] -- register_copy 
  //SEG125 [59] phi (byte) div8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8u->div8u::@1#3] -- vbuyy=vbuc1 
    tay
  //SEG126 [59] phi from div8u::@3 to div8u::@1 [phi:div8u::@3->div8u::@1]
  //SEG127 [59] phi (byte) div8u::i#2 = (byte) div8u::i#1 [phi:div8u::@3->div8u::@1#0] -- register_copy 
  //SEG128 [59] phi (byte) div8u::quotient#3 = (byte) div8u::return#1 [phi:div8u::@3->div8u::@1#1] -- register_copy 
  //SEG129 [59] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:div8u::@3->div8u::@1#2] -- register_copy 
  //SEG130 [59] phi (byte) div8u::rem#4 = (byte) div8u::rem#8 [phi:div8u::@3->div8u::@1#3] -- register_copy 
  //SEG131 div8u::@1
  b1:
  //SEG132 [60] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG133 [61] (byte~) div8u::$1 ← (byte) div8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG134 [62] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG135 div8u::@4
  //SEG136 [63] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::dividend#2 div8u::quotient#3 div8u::i#2 div8u::rem#2 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG137 [64] phi from div8u::@1 div8u::@4 to div8u::@2 [phi:div8u::@1/div8u::@4->div8u::@2]
  //SEG138 [64] phi (byte) div8u::rem#5 = (byte) div8u::rem#1 [phi:div8u::@1/div8u::@4->div8u::@2#0] -- register_copy 
  //SEG139 div8u::@2
  b2:
  //SEG140 [65] (byte) div8u::dividend#1 ← (byte) div8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::quotient#3 div8u::i#2 div8u::dividend#1 div8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG141 [66] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG142 [67] if((byte) div8u::rem#5<(byte) div8u::divisor#0) goto div8u::@3 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#1 ] ) -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3
  //SEG143 div8u::@5
  //SEG144 [68] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::rem#5 div8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG145 [69] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#0 [ div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::i#2 div8u::dividend#1 div8u::quotient#2 div8u::rem#3 ] ) -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG146 [70] phi from div8u::@2 div8u::@5 to div8u::@3 [phi:div8u::@2/div8u::@5->div8u::@3]
  //SEG147 [70] phi (byte) div8u::return#1 = (byte) div8u::quotient#1 [phi:div8u::@2/div8u::@5->div8u::@3#0] -- register_copy 
  //SEG148 [70] phi (byte) div8u::rem#8 = (byte) div8u::rem#5 [phi:div8u::@2/div8u::@5->div8u::@3#1] -- register_copy 
  //SEG149 div8u::@3
  b3:
  //SEG150 [71] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG151 [72] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::divisor#0 div8u::return#1 div8u::rem#8 div8u::dividend#1 div8u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG152 div8u::@6
  //SEG153 [73] *((const byte*) main::rem#0) ← (byte) div8u::rem#8 [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] ) -- _deref_pbuc1=vbuyy 
    sty main.rem
  //SEG154 div8u::@return
  //SEG155 [74] return  [ div8u::return#1 ] ( main:2::div8u:11 [ main::i#10 char_cursor#42 line_cursor#13 main::dividend#0 main::divisor#0 div8u::return#1 ] )
    rts
}
//SEG156 print_cls
print_cls: {
    .label sc = 3
  //SEG157 [76] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG158 [76] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG159 [76] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG160 [76] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG161 print_cls::@1
  b1:
  //SEG162 [77] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG163 [78] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG164 [79] if((byte*) print_cls::sc#1!=(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG165 print_cls::@return
  //SEG166 [80] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

