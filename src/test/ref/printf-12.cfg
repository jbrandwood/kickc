@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] (volatile byte) main::c ← (byte) 'x'
  [11] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] (byte) cputc::c#3 ← (volatile byte) main::c
  [13] call cputc 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call cputs 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call cputs 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] phi()
  [23] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [24] phi()
  [25] call cputc 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [26] phi()
  [27] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [28] phi()
  [29] call cputs 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [30] phi()
  [31] call printf_schar 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [32] phi()
  [33] call cputs 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [34] phi()
  [35] call cputs 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [36] phi()
  [37] call printf_uchar 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [38] phi()
  [39] call cputs 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [40] phi()
  [41] call cputs 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [42] phi()
  [43] call printf_sint 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [44] phi()
  [45] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [46] phi()
  [47] call cputs 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [48] phi()
  [49] call printf_uint 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [50] phi()
  [51] call cputs 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [52] phi()
  [53] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [54] phi()
  [55] call printf_slong 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [56] phi()
  [57] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [58] phi()
  [59] call cputs 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [60] phi()
  [61] call printf_ulong 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [62] phi()
  [63] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@27
  [64] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@1 main::@10 main::@12 main::@13 main::@15 main::@16 main::@18 main::@19 main::@21 main::@22 main::@24 main::@25 main::@27 main::@3 main::@4 main::@6 main::@7 main::@9 printf_number_buffer::@5
  [65] (to_nomodify byte*) cputs::s#21 ← phi( main::@1/(const byte*) main::s main::@10/(const byte*) main::s6 main::@12/(const byte*) main::s1 main::@13/(const byte*) main::s8 main::@15/(const byte*) main::s1 main::@16/(const byte*) main::s10 main::@18/(const byte*) main::s1 main::@19/(const byte*) main::s12 main::@21/(const byte*) main::s1 main::@22/(const byte*) main::s14 main::@24/(const byte*) main::s1 main::@25/(const byte*) main::s16 main::@27/(const byte*) main::s1 main::@3/(const byte*) main::s1 main::@4/(const byte*) main::s2 main::@6/(const byte*) main::s1 main::@7/(const byte*) main::s4 main::@9/(const byte*) main::s1 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [66] (to_nomodify byte*) cputs::s#20 ← phi( cputs/(to_nomodify byte*) cputs::s#21 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [67] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#20)
  [68] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#20
  [69] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [70] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [71] (byte) cputc::c#0 ← (byte) cputs::c#1
  [72] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 main::@2 main::@8 printf_number_buffer::@9 printf_padding::@2
  [73] (byte) cputc::c#5 ← phi( cputs::@2/(byte) cputc::c#0 main::@2/(byte) cputc::c#3 main::@8/(byte) '%' printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  [74] if((byte) cputc::c#5==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [75] *((byte*) conio_cursor_text) ← (byte) cputc::c#5
  [76] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [77] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [78] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [79] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [80] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [81] (byte) conio_cursor_x ← (byte) 0
  [82] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [83] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [84] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [85] phi()
  [86] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [87] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  [88] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28
  [89] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [90] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  [91] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28
  [92] (byte*) conio_cursor_color ← (byte*~) cputln::$3
  [93] (byte) conio_cursor_x ← (byte) 0
  [94] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [95] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [96] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [97] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [98] phi()
  [99] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [100] phi()
  [101] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [102] phi()
  [103] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [104] phi()
  [105] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [106] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [107] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [108] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [109] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [110] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [111] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [112] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [112] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [113] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [114] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [115] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [116] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [117] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [118] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [119] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [120] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [120] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [121] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [122] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [123] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [124] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [124] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [125] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [126] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [127] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [128] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [129] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@26
  [130] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [131] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [132] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [133] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [134] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [135] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@3 printf_sint::@3 printf_slong::@3 printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [136] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_upper_case#0 printf_sint::@3/(const byte) printf_sint::format_upper_case#0 printf_slong::@3/(const byte) printf_slong::format_upper_case#0 printf_uchar::@2/(const byte) printf_uchar::format_upper_case#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_upper_case#0 )
  [136] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_schar::@3/(byte) printf_number_buffer::buffer_sign#4 printf_sint::@3/(byte) printf_number_buffer::buffer_sign#2 printf_slong::@3/(byte) printf_number_buffer::buffer_sign#0 printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#5 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#3 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#1 )
  [136] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_zero_padding#0 printf_sint::@3/(const byte) printf_sint::format_zero_padding#0 printf_slong::@3/(const byte) printf_slong::format_zero_padding#0 printf_uchar::@2/(const byte) printf_uchar::format_zero_padding#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_zero_padding#0 )
  [136] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_justify_left#0 printf_sint::@3/(const byte) printf_sint::format_justify_left#0 printf_slong::@3/(const byte) printf_slong::format_justify_left#0 printf_uchar::@2/(const byte) printf_uchar::format_justify_left#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_justify_left#0 )
  [136] (byte) printf_number_buffer::format_min_length#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_min_length#0 printf_sint::@3/(const byte) printf_sint::format_min_length#0 printf_slong::@3/(const byte) printf_slong::format_min_length#0 printf_uchar::@2/(const byte) printf_uchar::format_min_length#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_min_length#0 )
  [137] if((byte) 0==(byte) printf_number_buffer::format_min_length#10) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [138] phi()
  [139] call strlen 
  [140] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [141] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [142] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [143] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [144] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [145] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [146] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#10 - (signed byte) printf_number_buffer::len#2
  [147] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [148] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [149] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [150] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [151] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [152] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [153] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [154] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [155] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [156] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10
  [157] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [158] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [159] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [160] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [161] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [162] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [163] phi()
  [164] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [165] phi()
  [166] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [167] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [168] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [169] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [170] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [171] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [172] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [173] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [173] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [174] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [175] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [176] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [177] (byte) cputc::c#1 ← (byte) printf_padding::pad#5
  [178] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [179] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [180] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [181] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [182] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [183] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [184] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [185] call toupper 
  [186] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [187] (byte~) strupr::$0 ← (byte) toupper::return#3
  [188] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [189] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [190] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [191] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [192] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [193] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [194] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [195] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [196] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [196] (byte*) strlen::str#2 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [197] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [198] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [199] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [200] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_slong::@2 printf_ulong::@1
  [201] (dword) ultoa::value#10 ← phi( printf_slong::@2/(const dword) printf_slong::uvalue#0 printf_ulong::@1/(const dword) main::ul )
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [202] (byte*) ultoa::buffer#10 ← phi( ultoa::@4/(byte*) ultoa::buffer#15 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [202] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [202] (dword) ultoa::value#3 ← phi( ultoa::@4/(dword) ultoa::value#7 ultoa/(dword) ultoa::value#10 )
  [202] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [203] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [204] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#3
  [205] *((byte*) ultoa::buffer#10) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [206] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#10
  [207] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [208] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [209] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [210] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [211] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [212] if((dword) ultoa::value#3>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [213] (byte*) ultoa::buffer#15 ← phi( ultoa::@7/(byte*) ultoa::buffer#10 ultoa::@6/(byte*) ultoa::buffer#4 )
  [213] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [213] (dword) ultoa::value#7 ← phi( ultoa::@7/(dword) ultoa::value#3 ultoa::@6/(dword) ultoa::value#0 )
  [214] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [215] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#10
  [216] (dword) ultoa_append::value#0 ← (dword) ultoa::value#3
  [217] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [218] call ultoa_append 
  [219] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [220] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [221] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#10
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [222] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [223] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [223] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [224] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [225] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [226] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [227] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [228] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(void()) printf_slong((signed dword) printf_slong::value , (byte) printf_slong::format_min_length , (byte) printf_slong::format_justify_left , (byte) printf_slong::format_sign_always , (byte) printf_slong::format_zero_padding , (byte) printf_slong::format_upper_case , (byte) printf_slong::format_radix)
printf_slong: scope:[printf_slong]  from main::@23
  [229] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  to:printf_slong::@1
printf_slong::@1: scope:[printf_slong]  from printf_slong
  [230] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_slong::@2
printf_slong::@2: scope:[printf_slong]  from printf_slong::@1
  [231] phi()
  [232] call ultoa 
  to:printf_slong::@3
printf_slong::@3: scope:[printf_slong]  from printf_slong::@2
  [233] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [234] call printf_number_buffer 
  to:printf_slong::@return
printf_slong::@return: scope:[printf_slong]  from printf_slong::@3
  [235] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@20 main::@5
  [236] (byte) printf_uint::format_radix#2 ← phi( main::@20/(const byte) DECIMAL main::@5/(const byte) HEXADECIMAL )
  [236] (word) printf_uint::uvalue#2 ← phi( main::@20/(const word) main::ui main::@5/(word)&(volatile byte) main::c )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [237] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [238] (word) utoa::value#2 ← (word) printf_uint::uvalue#2
  [239] (byte) utoa::radix#1 ← (byte) printf_uint::format_radix#2
  [240] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [241] (byte) printf_number_buffer::buffer_sign#3 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [242] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [243] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2 printf_uint::@1
  [244] (word) utoa::value#10 ← phi( printf_sint::@2/(const word) printf_sint::uvalue#0 printf_uint::@1/(word) utoa::value#2 )
  [244] (byte) utoa::radix#2 ← phi( printf_sint::@2/(const byte) DECIMAL printf_uint::@1/(byte) utoa::radix#1 )
  [245] if((byte) utoa::radix#2==(const byte) DECIMAL) goto utoa::@1
  to:utoa::@2
utoa::@2: scope:[utoa]  from utoa
  [246] if((byte) utoa::radix#2==(const byte) HEXADECIMAL) goto utoa::@1
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@2
  [247] if((byte) utoa::radix#2==(const byte) OCTAL) goto utoa::@1
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@3
  [248] if((byte) utoa::radix#2==(const byte) BINARY) goto utoa::@1
  to:utoa::@5
utoa::@5: scope:[utoa]  from utoa::@4
  [249] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e'
  [250] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r'
  [251] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r'
  [252] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@5 utoa::@8
  [253] return 
  to:@return
utoa::@1: scope:[utoa]  from utoa utoa::@2 utoa::@3 utoa::@4
  [254] (word*) utoa::digit_values#8 ← phi( utoa/(const word*) RADIX_DECIMAL_VALUES utoa::@2/(const word*) RADIX_HEXADECIMAL_VALUES utoa::@3/(const word*) RADIX_OCTAL_VALUES utoa::@4/(const word*) RADIX_BINARY_VALUES )
  [254] (byte) utoa::max_digits#7 ← phi( utoa/(byte) 5 utoa::@2/(byte) 4 utoa::@3/(byte) 6 utoa::@4/(byte) $10 )
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@1 utoa::@9
  [255] (byte*) utoa::buffer#10 ← phi( utoa::@9/(byte*) utoa::buffer#15 utoa::@1/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [255] (byte) utoa::started#2 ← phi( utoa::@9/(byte) utoa::started#4 utoa::@1/(byte) 0 )
  [255] (word) utoa::value#3 ← phi( utoa::@9/(word) utoa::value#7 utoa::@1/(word) utoa::value#10 )
  [255] (byte) utoa::digit#2 ← phi( utoa::@9/(byte) utoa::digit#1 utoa::@1/(byte) 0 )
  [256] (byte~) utoa::$4 ← (byte) utoa::max_digits#7 - (byte) 1
  [257] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@7
  to:utoa::@8
utoa::@8: scope:[utoa]  from utoa::@6
  [258] (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  [259] *((byte*) utoa::buffer#10) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [260] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#10
  [261] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@7: scope:[utoa]  from utoa::@6
  [262] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [263] (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#8 + (byte~) utoa::$10)
  [264] if((byte) 0!=(byte) utoa::started#2) goto utoa::@10
  to:utoa::@12
utoa::@12: scope:[utoa]  from utoa::@7
  [265] if((word) utoa::value#3>=(word) utoa::digit_value#0) goto utoa::@10
  to:utoa::@9
utoa::@9: scope:[utoa]  from utoa::@11 utoa::@12
  [266] (byte*) utoa::buffer#15 ← phi( utoa::@12/(byte*) utoa::buffer#10 utoa::@11/(byte*) utoa::buffer#4 )
  [266] (byte) utoa::started#4 ← phi( utoa::@12/(byte) utoa::started#2 utoa::@11/(byte) 1 )
  [266] (word) utoa::value#7 ← phi( utoa::@12/(word) utoa::value#3 utoa::@11/(word) utoa::value#0 )
  [267] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@6
utoa::@10: scope:[utoa]  from utoa::@12 utoa::@7
  [268] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#10
  [269] (word) utoa_append::value#0 ← (word) utoa::value#3
  [270] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [271] call utoa_append 
  [272] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@11
utoa::@11: scope:[utoa]  from utoa::@10
  [273] (word) utoa::value#0 ← (word) utoa_append::return#0
  [274] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#10
  to:utoa::@9

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@10
  [275] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [276] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [276] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [277] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [278] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [279] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [280] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [281] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@17
  [282] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  to:printf_sint::@1
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [283] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint::@1
  [284] phi()
  [285] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [286] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [287] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [288] return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@14
  [289] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [290] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [291] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [292] (byte) printf_number_buffer::buffer_sign#5 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [293] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [294] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2 printf_uchar::@1
  [295] (byte) uctoa::value#10 ← phi( printf_schar::@2/(const byte) printf_schar::uvalue#0 printf_uchar::@1/(const byte) main::uc )
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [296] (byte*) uctoa::buffer#10 ← phi( uctoa::@4/(byte*) uctoa::buffer#15 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [296] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [296] (byte) uctoa::value#3 ← phi( uctoa::@4/(byte) uctoa::value#7 uctoa/(byte) uctoa::value#10 )
  [296] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [297] if((byte) uctoa::digit#2<(byte) 3-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [298] *((byte*) uctoa::buffer#10) ← *((const byte*) DIGITS + (byte) uctoa::value#3)
  [299] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#10
  [300] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [301] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [302] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_DECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [303] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [304] if((byte) uctoa::value#3>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [305] (byte*) uctoa::buffer#15 ← phi( uctoa::@7/(byte*) uctoa::buffer#10 uctoa::@6/(byte*) uctoa::buffer#4 )
  [305] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [305] (byte) uctoa::value#7 ← phi( uctoa::@7/(byte) uctoa::value#3 uctoa::@6/(byte) uctoa::value#0 )
  [306] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [307] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#10
  [308] (byte) uctoa_append::value#0 ← (byte) uctoa::value#3
  [309] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [310] call uctoa_append 
  [311] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [312] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [313] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#10
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [314] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [315] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [315] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [316] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [317] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [318] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [319] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [320] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@11
  [321] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  to:printf_schar::@1
printf_schar::@1: scope:[printf_schar]  from printf_schar
  [322] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1
  [323] phi()
  [324] call uctoa 
  to:printf_schar::@3
printf_schar::@3: scope:[printf_schar]  from printf_schar::@2
  [325] (byte) printf_number_buffer::buffer_sign#4 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [326] call printf_number_buffer 
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@3
  [327] return 
  to:@return

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [328] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [329] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@5/(byte*) clrscr::line_cols#1 )
  [329] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@5/(byte*) clrscr::line_text#1 )
  [329] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [330] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [331] (byte) conio_cursor_x ← (byte) 0
  [332] (byte) conio_cursor_y ← (byte) 0
  [333] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [334] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [335] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [336] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [337] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [338] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [339] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [340] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [341] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [342] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [343] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3
