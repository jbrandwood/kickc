Identified constant variable (byte*) main::SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (dword) PI_u4f28#0 ← (number) $3243f6a9
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (word~) main::$0 ← > (dword) PI_u4f28#0
  (byte~) main::$1 ← > (word~) main::$0
  *((byte*) main::SCREEN#0 + (number) 0) ← (byte~) main::$1
  (word~) main::$2 ← > (dword) PI_u4f28#0
  (byte~) main::$3 ← < (word~) main::$2
  *((byte*) main::SCREEN#0 + (number) 1) ← (byte~) main::$3
  (word~) main::$4 ← < (dword) PI_u4f28#0
  (byte~) main::$5 ← > (word~) main::$4
  *((byte*) main::SCREEN#0 + (number) 2) ← (byte~) main::$5
  (word~) main::$6 ← < (dword) PI_u4f28#0
  (byte~) main::$7 ← < (word~) main::$6
  *((byte*) main::SCREEN#0 + (number) 3) ← (byte~) main::$7
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(dword) PI_u4f28
(dword) PI_u4f28#0
(void()) main()
(word~) main::$0
(byte~) main::$1
(word~) main::$2
(byte~) main::$3
(word~) main::$4
(byte~) main::$5
(word~) main::$6
(byte~) main::$7
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0

Adding number conversion cast (unumber) $3243f6a9 in (dword) PI_u4f28#0 ← (number) $3243f6a9
Adding number conversion cast (unumber) 0 in *((byte*) main::SCREEN#0 + (number) 0) ← (byte~) main::$1
Adding number conversion cast (unumber) 1 in *((byte*) main::SCREEN#0 + (number) 1) ← (byte~) main::$3
Adding number conversion cast (unumber) 2 in *((byte*) main::SCREEN#0 + (number) 2) ← (byte~) main::$5
Adding number conversion cast (unumber) 3 in *((byte*) main::SCREEN#0 + (number) 3) ← (byte~) main::$7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (dword) PI_u4f28#0 ← (unumber)(number) $3243f6a9
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $3243f6a9
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (dword) $3243f6a9
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identified duplicate assignment right side [5] (word~) main::$2 ← > (dword) PI_u4f28#0
Identified duplicate assignment right side [11] (word~) main::$6 ← < (dword) PI_u4f28#0
Successful SSA optimization Pass2DuplicateRValueIdentification
Constant (const dword) PI_u4f28#0 = $3243f6a9
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN#0 in [4] *((const byte*) main::SCREEN#0 + (byte) 0) ← (byte~) main::$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Alias (word~) main::$2 = (word~) main::$0 
Alias (word~) main::$6 = (word~) main::$4 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (word~) main::$2 ← > (const dword) PI_u4f28#0
Constant right-side identified [6] (word~) main::$6 ← < (const dword) PI_u4f28#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::$2 = >PI_u4f28#0
Constant (const word) main::$6 = <PI_u4f28#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte~) main::$1 ← > (const word) main::$2
Constant right-side identified [2] (byte~) main::$3 ← < (const word) main::$2
Constant right-side identified [4] (byte~) main::$5 ← > (const word) main::$6
Constant right-side identified [6] (byte~) main::$7 ← < (const word) main::$6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$1 = >main::$2
Constant (const byte) main::$3 = <main::$2
Constant (const byte) main::$5 = >main::$6
Constant (const byte) main::$7 = <main::$6
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = >>(const dword) PI_u4f28#0
Constant inlined main::$2 = >(const dword) PI_u4f28#0
Constant inlined main::$5 = ><(const dword) PI_u4f28#0
Constant inlined main::$6 = <(const dword) PI_u4f28#0
Constant inlined main::$3 = <>(const dword) PI_u4f28#0
Constant inlined main::$7 = <<(const dword) PI_u4f28#0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN#0+1)
Consolidated array index constant in *(main::SCREEN#0+2)
Consolidated array index constant in *(main::SCREEN#0+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0
  [5] *((const byte*) main::SCREEN#0+(byte) 1) ← <>(const dword) PI_u4f28#0
  [6] *((const byte*) main::SCREEN#0+(byte) 2) ← ><(const dword) PI_u4f28#0
  [7] *((const byte*) main::SCREEN#0+(byte) 3) ← <<(const dword) PI_u4f28#0
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(dword) PI_u4f28
(void()) main()
(byte*) main::SCREEN

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// PI in u[4.28] format
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const PI_u4f28 = $3243f6a9
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28>>$10
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte) 1) ← <>(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28>>$10
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte) 2) ← ><(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28&$ffff
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte) 3) ← <<(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28&$ffff
    sta SCREEN+3
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}
//SEG16 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN#0+(byte) 1) ← <>(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0+(byte) 2) ← ><(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0+(byte) 3) ← <<(const dword) PI_u4f28#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// PI in u[4.28] format
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const PI_u4f28 = $3243f6a9
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28>>$10
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte) 1) ← <>(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28>>$10
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte) 2) ← ><(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28&$ffff
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte) 3) ← <<(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28&$ffff
    sta SCREEN+3
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}
//SEG16 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword) $3243f6a9
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024



FINAL ASSEMBLER
Score: 30

//SEG0 File Comments
// PI in u[4.28] format
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const PI_u4f28 = $3243f6a9
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← >>(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28>>$10
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte) 1) ← <>(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28>>$10
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte) 2) ← ><(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #>PI_u4f28&$ffff
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte) 3) ← <<(const dword) PI_u4f28#0 -- _deref_pbuc1=vbuc2 
    lda #<PI_u4f28&$ffff
    sta SCREEN+3
  //SEG14 main::@return
  //SEG15 [8] return 
    rts
}
//SEG16 File Data

