@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [5] (byte*) main::sc#2 ← phi( main/(const byte*) SCREEN main::@1/(byte*) main::sc#1 )
  [5] (byte*) main::camelot#2 ← phi( main/(const byte*) CAMELOT main::@1/(byte*) main::camelot#1 )
  [6] *((byte*) main::sc#2) ← *((byte*) main::camelot#2)
  [7] (byte*) main::sc#1 ← ++ (byte*) main::sc#2
  [8] (byte*) main::camelot#1 ← ++ (byte*) main::camelot#2
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) 7) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [11] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [11] (byte*) main::sc2#2 ← phi( main::@1/(const byte*) SCREEN+(byte) $28 main::@2/(byte*) main::sc2#1 )
  [11] (byte*) main::reigns#2 ← phi( main::@1/(const byte*) main::reigns#0 main::@2/(byte*) main::reigns#1 )
  [12] *((byte*) main::sc2#2) ← *((byte*) main::reigns#2)
  [13] (byte*) main::sc2#1 ← ++ (byte*) main::sc2#2
  [14] (byte*) main::reigns#1 ← ++ (byte*) main::reigns#2
  [15] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [16] if((byte) main::i1#1!=(byte) 6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [17] phi()
  [18] call memcpy 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [19] phi()
  [20] call memcpy 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [21] return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from main::@3 main::@4
  [22] (word) memcpy::num#2 ← phi( main::@3/(byte) 7 main::@4/(byte) 5 )
  [22] (void*) memcpy::destination#2 ← phi( main::@3/(void*)(const byte*) SCREEN+(byte) $a main::@4/(void*)(const byte*) SCREEN+(byte) $32 )
  [22] (void*) memcpy::source#2 ← phi( main::@3/(void*)(const byte*) CAMELOT main::@4/(void*)(const string) main::$5 )
  [23] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word) memcpy::num#2
  [24] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [25] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [26] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [26] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [27] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [28] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [29] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [30] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [31] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1
