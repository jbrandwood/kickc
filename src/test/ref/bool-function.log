
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#2 = phi( main/main::i#0, main::@3/main::i#1 )
  main::$0 = main::i#2 & 1
  main::$1 = main::$0 == 0
  isSet::i#0 = main::i#2
  isSet::b#0 = main::$1
  call isSet
  isSet::return#0 = isSet::return#2
  to:main::@5
main::@5: scope:[main]  from main::@1
  main::i#6 = phi( main::@1/main::i#2 )
  isSet::return#3 = phi( main::@1/isSet::return#0 )
  main::$2 = isSet::return#3
  if(main::$2) goto main::@2
  to:main::@4
main::@2: scope:[main]  from main::@5
  main::i#3 = phi( main::@5/main::i#6 )
  main::screen[main::i#3] = '*'
  to:main::@3
main::@4: scope:[main]  from main::@5
  main::i#4 = phi( main::@5/main::i#6 )
  main::screen[main::i#4] = ' '
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  main::i#5 = phi( main::@2/main::i#3, main::@4/main::i#4 )
  main::i#1 = main::i#5 + rangenext(0,$64)
  main::$3 = main::i#1 != rangelast(0,$64)
  if(main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

bool isSet(char i , bool b)
isSet: scope:[isSet]  from main::@1
  isSet::b#1 = phi( main::@1/isSet::b#0 )
  isSet::i#1 = phi( main::@1/isSet::i#0 )
  isSet::$0 = isSet::i#1 & 8
  isSet::$1 = isSet::$0 != 0
  isSet::$2 = isSet::b#1 || isSet::$1
  isSet::return#1 = isSet::$2
  to:isSet::@return
isSet::@return: scope:[isSet]  from isSet
  isSet::return#4 = phi( isSet/isSet::return#1 )
  isSet::return#2 = isSet::return#4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
bool isSet(char i , bool b)
number isSet::$0
bool isSet::$1
bool isSet::$2
bool isSet::b
bool isSet::b#0
bool isSet::b#1
char isSet::i
char isSet::i#0
char isSet::i#1
bool isSet::return
bool isSet::return#0
bool isSet::return#1
bool isSet::return#2
bool isSet::return#3
bool isSet::return#4
void main()
number main::$0
bool main::$1
bool main::$2
bool main::$3
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::i#6
__constant char *main::screen = (char *)$400

Adding number conversion cast (unumber) 1 in main::$0 = main::i#2 & 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::i#2 & (unumber)1
Adding number conversion cast (unumber) 0 in main::$1 = main::$0 == 0
Adding number conversion cast (unumber) 8 in isSet::$0 = isSet::i#1 & 8
Adding number conversion cast (unumber) isSet::$0 in isSet::$0 = isSet::i#1 & (unumber)8
Adding number conversion cast (unumber) 0 in isSet::$1 = isSet::$0 != 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$0 = main::i#2 & 1
Inferred type updated to char in isSet::$0 = isSet::i#1 & 8
Alias isSet::b#0 = main::$1 
Alias isSet::return#0 = isSet::return#3 
Alias main::i#2 = main::i#6 main::i#3 main::i#4 
Alias isSet::return#1 = isSet::$2 isSet::return#4 isSet::return#2 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values isSet::i#1 isSet::i#0
Identical Phi Values isSet::b#1 isSet::b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$3 [13] if(main::i#1!=rangelast(0,$64)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [11] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [13] if(main::i#1!=rangelast(0,$64)) goto main::@1 to $65
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $65 in [11] if(main::i#1!=$65) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $65
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $65
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@6(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to isSet:5 

Created 1 initial phi equivalence classes
Coalesced [13] main::i#7 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@6
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::i#2 = phi( main/0, main::@3/main::i#1 )
  [2] main::$0 = main::i#2 & 1
  [3] isSet::b#0 = main::$0 == 0
  [4] isSet::i#0 = main::i#2
  [5] call isSet
  [6] isSet::return#0 = isSet::return#1
  to:main::@5
main::@5: scope:[main]  from main::@1
  [7] main::$2 = isSet::return#0
  [8] if(main::$2) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@5
  [9] main::screen[main::i#2] = ' '
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [10] main::i#1 = ++ main::i#2
  [11] if(main::i#1!=$65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [12] return 
  to:@return
main::@2: scope:[main]  from main::@5
  [13] main::screen[main::i#2] = '*'
  to:main::@3

bool isSet(char i , bool b)
isSet: scope:[isSet]  from main::@1
  [14] isSet::$0 = isSet::i#0 & 8
  [15] isSet::$1 = isSet::$0 != 0
  [16] isSet::return#1 = isSet::b#0 || isSet::$1
  to:isSet::@return
isSet::@return: scope:[isSet]  from isSet
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
bool isSet(char i , bool b)
char isSet::$0 // 202.0
bool isSet::$1 // 202.0
bool isSet::b
bool isSet::b#0 // 28.0
char isSet::i
char isSet::i#0 // 112.0
bool isSet::return
bool isSet::return#0 // 22.0
bool isSet::return#1 // 37.33333333333333
void main()
char main::$0 // 22.0
bool main::$2 // 22.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 6.6

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable isSet::b#0 to live range equivalence class [ isSet::b#0 ]
Added variable isSet::i#0 to live range equivalence class [ isSet::i#0 ]
Added variable isSet::return#0 to live range equivalence class [ isSet::return#0 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable isSet::$0 to live range equivalence class [ isSet::$0 ]
Added variable isSet::$1 to live range equivalence class [ isSet::$1 ]
Added variable isSet::return#1 to live range equivalence class [ isSet::return#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$0 ]
[ isSet::b#0 ]
[ isSet::i#0 ]
[ isSet::return#0 ]
[ main::$2 ]
[ isSet::$0 ]
[ isSet::$1 ]
[ isSet::return#1 ]
Allocated zp[1]:2 [ isSet::$0 ]
Allocated zp[1]:3 [ isSet::$1 ]
Allocated zp[1]:4 [ isSet::i#0 ]
Allocated zp[1]:5 [ isSet::return#1 ]
Allocated zp[1]:6 [ isSet::b#0 ]
Allocated zp[1]:7 [ main::i#2 main::i#1 ]
Allocated zp[1]:8 [ main::$0 ]
Allocated zp[1]:9 [ isSet::return#0 ]
Allocated zp[1]:10 [ main::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] isSet::b#0 = main::$0 == 0 [ main::i#2 isSet::b#0 ] (  [ main::i#2 isSet::b#0 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::i#2 main::i#1 ]
Statement [9] main::screen[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [13] main::screen[main::i#2] = '*' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [15] isSet::$1 = isSet::$0 != 0 [ isSet::b#0 isSet::$1 ] ( isSet:5 [ main::i#2 isSet::b#0 isSet::$1 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ isSet::b#0 ]
Statement [16] isSet::return#1 = isSet::b#0 || isSet::$1 [ isSet::return#1 ] ( isSet:5 [ main::i#2 isSet::return#1 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Statement [2] main::$0 = main::i#2 & 1 [ main::i#2 main::$0 ] (  [ main::i#2 main::$0 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Statement [3] isSet::b#0 = main::$0 == 0 [ main::i#2 isSet::b#0 ] (  [ main::i#2 isSet::b#0 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Statement [9] main::screen[main::i#2] = ' ' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [13] main::screen[main::i#2] = '*' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [15] isSet::$1 = isSet::$0 != 0 [ isSet::b#0 isSet::$1 ] ( isSet:5 [ main::i#2 isSet::b#0 isSet::$1 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Statement [16] isSet::return#1 = isSet::b#0 || isSet::$1 [ isSet::return#1 ] ( isSet:5 [ main::i#2 isSet::return#1 ] { { isSet::i#0 = main::i#2 } { isSet::return#0 = isSet::return#1 } }  ) always clobbers reg byte a 
Potential registers zp[1]:7 [ main::i#2 main::i#1 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ isSet::b#0 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ isSet::i#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ isSet::return#0 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::$2 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ isSet::$0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ isSet::$1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ isSet::return#1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [isSet] 202: zp[1]:2 [ isSet::$0 ] 202: zp[1]:3 [ isSet::$1 ] 112: zp[1]:4 [ isSet::i#0 ] 37.33: zp[1]:5 [ isSet::return#1 ] 28: zp[1]:6 [ isSet::b#0 ] 22: zp[1]:9 [ isSet::return#0 ] 
Uplift Scope [main] 23.1: zp[1]:7 [ main::i#2 main::i#1 ] 22: zp[1]:8 [ main::$0 ] 22: zp[1]:10 [ main::$2 ] 
Uplift Scope [] 

Uplifting [isSet] best 1091 combination reg byte a [ isSet::$0 ] reg byte a [ isSet::$1 ] reg byte a [ isSet::i#0 ] reg byte a [ isSet::return#1 ] zp[1]:6 [ isSet::b#0 ] zp[1]:9 [ isSet::return#0 ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [main] best 801 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] reg byte a [ main::$2 ] 
Uplifting [] best 801 combination 
Attempting to uplift remaining variables inzp[1]:6 [ isSet::b#0 ]
Uplifting [isSet] best 794 combination reg byte y [ isSet::b#0 ] 
Attempting to uplift remaining variables inzp[1]:9 [ isSet::return#0 ]
Uplifting [isSet] best 734 combination reg byte a [ isSet::return#0 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a function taking boolean parameter and returning boolean result
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bool-function.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [3] isSet::b#0 = main::$0 == 0 -- vboyy=vbuaa_eq_vbuc1 
    eor #0
    beq !+
    lda #1
  !:
    eor #1
    tay
    // [4] isSet::i#0 = main::i#2 -- vbuaa=vbuxx 
    txa
    // [5] call isSet -- call_phi_near 
    jsr isSet
    // [6] isSet::return#0 = isSet::return#1
    jmp __b5
    // main::@5
  __b5:
    // [7] main::$2 = isSet::return#0
    // [8] if(main::$2) goto main::@2 -- vboaa_then_la1 
    cmp #0
    bne __b2
    jmp __b4
    // main::@4
  __b4:
    // [9] main::screen[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    jmp __b3
    // main::@3
  __b3:
    // [10] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if(main::i#1!=$65) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
    // main::@2
  __b2:
    // [13] main::screen[main::i#2] = '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp __b3
}
  // isSet
// Determine whether to set a char to '*.
// Returns true if i&8!=0 or b=true
// __register(A) bool isSet(__register(A) char i, __register(Y) bool b)
isSet: {
    // [14] isSet::$0 = isSet::i#0 & 8 -- vbuaa=vbuaa_band_vbuc1 
    and #8
    // [15] isSet::$1 = isSet::$0 != 0 -- vboaa=vbuaa_neq_vbuc1 
    eor #0
    beq !+
    lda #1
  !:
    // [16] isSet::return#1 = isSet::b#0 || isSet::$1 -- vboaa=vboyy_or_vboaa 
    sty.z $ff
    ora.z $ff
    jmp __breturn
    // isSet::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b5:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
bool isSet(char i , bool b)
char isSet::$0 // reg byte a 202.0
bool isSet::$1 // reg byte a 202.0
bool isSet::b
bool isSet::b#0 // reg byte y 28.0
char isSet::i
char isSet::i#0 // reg byte a 112.0
bool isSet::return
bool isSet::return#0 // reg byte a 22.0
bool isSet::return#1 // reg byte a 37.33333333333333
void main()
char main::$0 // reg byte a 22.0
bool main::$2 // reg byte a 22.0
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 6.6
__constant char *main::screen = (char *) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$0 ]
reg byte y [ isSet::b#0 ]
reg byte a [ isSet::i#0 ]
reg byte a [ isSet::return#0 ]
reg byte a [ main::$2 ]
reg byte a [ isSet::$0 ]
reg byte a [ isSet::$1 ]
reg byte a [ isSet::return#1 ]


FINAL ASSEMBLER
Score: 551

  // File Comments
// Test a function taking boolean parameter and returning boolean result
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bool-function.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // i&1
    // [2] main::$0 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // isSet(i, (i&1)==0)
    // [3] isSet::b#0 = main::$0 == 0 -- vboyy=vbuaa_eq_vbuc1 
    eor #0
    beq !+
    lda #1
  !:
    eor #1
    tay
    // [4] isSet::i#0 = main::i#2 -- vbuaa=vbuxx 
    txa
    // [5] call isSet -- call_phi_near 
    jsr isSet
    // [6] isSet::return#0 = isSet::return#1
    // main::@5
    // [7] main::$2 = isSet::return#0
    // if( isSet(i, (i&1)==0))
    // [8] if(main::$2) goto main::@2 -- vboaa_then_la1 
    cmp #0
    bne __b2
    // main::@4
    // screen[i] = ' '
    // [9] main::screen[main::i#2] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta screen,x
    // main::@3
  __b3:
    // for(byte i: 0..100)
    // [10] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [11] if(main::i#1!=$65) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b1
    // main::@return
    // }
    // [12] return 
    rts
    // main::@2
  __b2:
    // screen[i] = '*'
    // [13] main::screen[main::i#2] = '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp __b3
}
  // isSet
// Determine whether to set a char to '*.
// Returns true if i&8!=0 or b=true
// __register(A) bool isSet(__register(A) char i, __register(Y) bool b)
isSet: {
    // i&8
    // [14] isSet::$0 = isSet::i#0 & 8 -- vbuaa=vbuaa_band_vbuc1 
    and #8
    // (i&8)!=0
    // [15] isSet::$1 = isSet::$0 != 0 -- vboaa=vbuaa_neq_vbuc1 
    eor #0
    beq !+
    lda #1
  !:
    // b || ((i&8)!=0)
    // [16] isSet::return#1 = isSet::b#0 || isSet::$1 -- vboaa=vboyy_or_vboaa 
    sty.z $ff
    ora.z $ff
    // isSet::@return
    // }
    // [17] return 
    rts
}
  // File Data

