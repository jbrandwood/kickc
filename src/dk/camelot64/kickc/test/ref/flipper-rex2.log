byte[1000] SCREEN = $0400;
byte[16*16] buffer1 = $1000;
byte[16*16] buffer2 = $1100;
byte *RASTER = $d012;

main();

void main() {
  prepare();
  do {
     byte c = 25;
     do{
       do { } while(*RASTER!=254)
       do { } while(*RASTER!=255)
       c--;
     } while(c!=0)
     flip();
     plot();
  } while(true)
}

// Prepare buffer
void prepare() {
   byte i=0;
   do {
      buffer1[i] = i;
   } while (++i!=0)
}

// Flip buffer
void flip() {
   byte srcIdx = 0;
   byte dstIdx = 15;
   byte r=16;
   do {
      byte c = 16;
      do {
         buffer2[dstIdx] = buffer1[srcIdx++];
         dstIdx = dstIdx+16;
      } while(--c!=0)
      dstIdx--;
     } while(--r!=0)
   byte i=0;
   do {
      buffer1[i] = buffer2[i];
   } while (++i!=0)
}

// Plot buffer on screen
void plot() {
   byte* line = SCREEN+5*40+12;
   byte y=16;
   byte i=0;
   do {
      byte x=0;
      do {
         line[x] = buffer1[i++];
      } while(++x<16)
      line = line+40;
   } while(--y!=0)
}
Adding pre/post-modifier (byte) main::c ← -- (byte) main::c
Adding pre/post-modifier (byte) prepare::i ← ++ (byte) prepare::i
Adding pre/post-modifier (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
Adding pre/post-modifier (byte) flip::c ← -- (byte) flip::c
Adding pre/post-modifier (byte) flip::dstIdx ← -- (byte) flip::dstIdx
Adding pre/post-modifier (byte) flip::r ← -- (byte) flip::r
Adding pre/post-modifier (byte) flip::i ← ++ (byte) flip::i
Adding pre/post-modifier (byte) plot::i ← ++ (byte) plot::i
Adding pre/post-modifier (byte) plot::x ← ++ (byte) plot::x
Adding pre/post-modifier (byte) plot::y ← -- (byte) plot::y
PROGRAM
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  proc (void()) main()
  (void~) main::$0 ← call prepare 
main::@1:
  (byte) main::c ← (byte) 25
main::@2:
main::@3:
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
main::@4:
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
main::@return:
  return 
  endproc // main()
  proc (void()) prepare()
  (byte) prepare::i ← (byte) 0
prepare::@1:
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
prepare::@return:
  return 
  endproc // prepare()
  proc (void()) flip()
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
flip::@1:
  (byte) flip::c ← (byte) 16
flip::@2:
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  (byte) flip::i ← (byte) 0
flip::@3:
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
flip::@return:
  return 
  endproc // flip()
  proc (void()) plot()
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
plot::@1:
  (byte) plot::x ← (byte) 0
plot::@2:
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
plot::@return:
  return 
  endproc // plot()

SYMBOLS
(void~) $0
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0
(byte~) flip::$1
(boolean~) flip::$2
(boolean~) flip::$3
(byte~) flip::$4
(boolean~) flip::$5
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@return
(byte) flip::c
(byte) flip::dstIdx
(byte) flip::i
(byte) flip::r
(byte) flip::srcIdx

(void()) main()
(void~) main::$0
(byte~) main::$1
(boolean~) main::$2
(byte~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(void~) main::$6
(void~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::c

(void()) plot()
(byte~) plot::$0
(byte*~) plot::$1
(byte*~) plot::$2
(byte~) plot::$3
(boolean~) plot::$4
(byte*~) plot::$5
(boolean~) plot::$6
(label) plot::@1
(label) plot::@2
(label) plot::@return
(byte) plot::i
(byte*) plot::line
(byte) plot::x
(byte) plot::y

(void()) prepare()
(boolean~) prepare::$0
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i


INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  to:@5
main: from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: from @3 main
  (byte) main::c ← (byte) 25
  to:main::@2
main::@2: from @2 main::@1
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  to:main::@4
main::@4: from @1 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:@4
@4: from @3
  to:main::@return
main::@return: from @4
  return 
  to:@RETURN
@5: from @BEGIN
  to:@7
prepare: from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:@6
@6: from prepare::@1
  to:prepare::@return
prepare::@return: from @6
  return 
  to:@RETURN
@7: from @5
  to:@11
flip: from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:@10
@10: from flip::@3
  to:flip::@return
flip::@return: from @10
  return 
  to:@RETURN
@11: from @7
  to:@14
plot: from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:@13
@13: from @12
  to:plot::@return
plot::@return: from @13
  return 
  to:@RETURN
@14: from @11
  to:@END
@END: from @14

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  call main param-assignment
  to:@15
@15: from @BEGIN
  to:@5
main: from @BEGIN
  call prepare param-assignment
  to:@16
@16: from main
  to:main::@1
main::@1: from @16 @18
  (byte) main::c ← (byte) 25
  to:main::@2
main::@2: from @2 main::@1
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  to:main::@4
main::@4: from @1 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:@4
@4: from @18
  to:main::@return
main::@return: from @4
  return 
  to:@RETURN
@5: from @15
  to:@7
prepare: from main
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:@6
@6: from prepare::@1
  to:prepare::@return
prepare::@return: from @6
  return 
  to:@RETURN
@7: from @5
  to:@11
flip: from @3
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:@10
@10: from flip::@3
  to:flip::@return
flip::@return: from @10
  return 
  to:@RETURN
@11: from @7
  to:@14
plot: from @17
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::y ← (byte) 16
  (byte) plot::i ← (byte) 0
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:@13
@13: from @12
  to:plot::@return
plot::@return: from @13
  return 
  to:@RETURN
@14: from @11
  to:@END
@END: from @14

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@15
@15: from @BEGIN
  to:@5
main: from @BEGIN
  (byte[256]) buffer2#16 ← phi( @BEGIN/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#12 ← phi( @BEGIN/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#9 ← phi( @BEGIN/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:@16
@16: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#7 ← phi( main/(byte*) RASTER#9 )
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(byte[256]) buffer1#22 @18/(byte[256]) buffer1#23 )
  (byte[256]) buffer2#13 ← phi( @16/(byte[256]) buffer2#14 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(byte[1000]) SCREEN#10 @18/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( @16/(byte*) RASTER#7 @18/(byte*) RASTER#8 )
  (byte) main::c#0 ← (byte) 25
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#8 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#16 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#4 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) main::c#0 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#5 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#19 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#19 )
  (byte[256]) buffer2#11 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#11 )
  (byte[1000]) SCREEN#7 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#5 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#5 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  (byte[256]) buffer2#10 ← phi( main::@3/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#4 ← phi( main::@3/(byte) main::c#5 )
  (byte*) RASTER#4 ← phi( main::@3/(byte*) RASTER#1 )
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#17 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[256]) buffer2#9 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[1000]) SCREEN#5 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( @1/(byte*) RASTER#4 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#5 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  (byte*) RASTER#11 ← phi( @2/(byte*) RASTER#5 )
  (byte[256]) buffer1#14 ← phi( @2/(byte[256]) buffer1#16 )
  (byte[256]) buffer2#7 ← phi( @2/(byte[256]) buffer2#8 )
  (byte[1000]) SCREEN#3 ← phi( @2/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:@17
@17: from @3
  (byte[256]) buffer2#17 ← phi( @3/(byte[256]) buffer2#7 )
  (byte*) RASTER#10 ← phi( @3/(byte*) RASTER#11 )
  (byte[256]) buffer1#15 ← phi( @3/(byte[256]) buffer1#14 )
  (byte[1000]) SCREEN#2 ← phi( @3/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:@18
@18: from @17
  (byte[256]) buffer2#15 ← phi( @17/(byte[256]) buffer2#17 )
  (byte[256]) buffer1#23 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#11 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#8 ← phi( @17/(byte*) RASTER#10 )
  if(true) goto main::@1
  to:@4
@4: from @18
  to:main::@return
main::@return: from @4
  return 
  to:@RETURN
@5: from @15
  to:@7
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:@6
@6: from prepare::@1
  to:prepare::@return
prepare::@return: from @6
  return 
  to:@RETURN
@7: from @5
  to:@11
flip: from @3
  (byte[256]) buffer2#6 ← phi( @3/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#11 ← phi( @3/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) flip::r#0 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#4 flip/(byte) flip::srcIdx#0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#5 flip/(byte[256]) buffer2#6 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) flip::dstIdx#0 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte[256]) buffer2#5 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte[256]) buffer2#4 ← phi( @8/(byte[256]) buffer2#5 )
  (byte[256]) buffer1#7 ← phi( @8/(byte[256]) buffer1#10 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#7 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) flip::i#0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#4 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:@10
@10: from flip::@3
  to:flip::@return
flip::@return: from @10
  return 
  to:@RETURN
@11: from @7
  to:@14
plot: from @17
  (byte[256]) buffer1#13 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::y#0 ← (byte) 16
  (byte) plot::i#0 ← (byte) 0
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) plot::y#0 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#13 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#4 plot/(byte) plot::i#0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:@13
@13: from @12
  to:plot::@return
plot::@return: from @13
  return 
  to:@RETURN
@14: from @11
  to:@END
@END: from @14

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@15
@15: from @BEGIN
  to:@5
main: from @BEGIN
  (byte[256]) buffer2#16 ← phi( @BEGIN/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#12 ← phi( @BEGIN/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#9 ← phi( @BEGIN/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:@16
@16: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#7 ← phi( main/(byte*) RASTER#9 )
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(byte[256]) buffer1#22 @18/(byte[256]) buffer1#23 )
  (byte[256]) buffer2#13 ← phi( @16/(byte[256]) buffer2#14 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(byte[1000]) SCREEN#10 @18/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( @16/(byte*) RASTER#7 @18/(byte*) RASTER#8 )
  (byte) main::c#0 ← (byte) 25
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#8 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#16 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#4 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) main::c#0 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#5 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#19 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#19 )
  (byte[256]) buffer2#11 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#11 )
  (byte[1000]) SCREEN#7 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#5 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#5 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  (byte[256]) buffer2#10 ← phi( main::@3/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#4 ← phi( main::@3/(byte) main::c#5 )
  (byte*) RASTER#4 ← phi( main::@3/(byte*) RASTER#1 )
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#17 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[256]) buffer2#9 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[1000]) SCREEN#5 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( @1/(byte*) RASTER#4 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#5 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  (byte*) RASTER#11 ← phi( @2/(byte*) RASTER#5 )
  (byte[256]) buffer1#14 ← phi( @2/(byte[256]) buffer1#16 )
  (byte[256]) buffer2#7 ← phi( @2/(byte[256]) buffer2#8 )
  (byte[1000]) SCREEN#3 ← phi( @2/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:@17
@17: from @3
  (byte[256]) buffer2#17 ← phi( @3/(byte[256]) buffer2#7 )
  (byte*) RASTER#10 ← phi( @3/(byte*) RASTER#11 )
  (byte[256]) buffer1#15 ← phi( @3/(byte[256]) buffer1#14 )
  (byte[1000]) SCREEN#2 ← phi( @3/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:@18
@18: from @17
  (byte[256]) buffer2#15 ← phi( @17/(byte[256]) buffer2#17 )
  (byte[256]) buffer1#23 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#11 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#8 ← phi( @17/(byte*) RASTER#10 )
  if(true) goto main::@1
  to:@4
@4: from @18
  to:main::@return
main::@return: from @4
  return 
  to:@RETURN
@5: from @15
  to:@7
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:@6
@6: from prepare::@1
  to:prepare::@return
prepare::@return: from @6
  return 
  to:@RETURN
@7: from @5
  to:@11
flip: from @3
  (byte[256]) buffer2#6 ← phi( @3/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#11 ← phi( @3/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) flip::r#0 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#4 flip/(byte) flip::srcIdx#0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#5 flip/(byte[256]) buffer2#6 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) flip::dstIdx#0 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte[256]) buffer2#5 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte[256]) buffer2#4 ← phi( @8/(byte[256]) buffer2#5 )
  (byte[256]) buffer1#7 ← phi( @8/(byte[256]) buffer1#10 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#7 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) flip::i#0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#4 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:@10
@10: from flip::@3
  to:flip::@return
flip::@return: from @10
  return 
  to:@RETURN
@11: from @7
  to:@14
plot: from @17
  (byte[256]) buffer1#13 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::y#0 ← (byte) 16
  (byte) plot::i#0 ← (byte) 0
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) plot::y#0 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#13 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#4 plot/(byte) plot::i#0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:@13
@13: from @12
  to:plot::@return
plot::@return: from @13
  return 
  to:@RETURN
@14: from @11
  to:@END
@END: from @14

Culled Empty Block (label) @15
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#16 ← phi( @BEGIN/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#12 ← phi( @BEGIN/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#9 ← phi( @BEGIN/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:@16
@16: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#7 ← phi( main/(byte*) RASTER#9 )
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(byte[256]) buffer1#22 @18/(byte[256]) buffer1#23 )
  (byte[256]) buffer2#13 ← phi( @16/(byte[256]) buffer2#14 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(byte[1000]) SCREEN#10 @18/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( @16/(byte*) RASTER#7 @18/(byte*) RASTER#8 )
  (byte) main::c#0 ← (byte) 25
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#8 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#16 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#4 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) main::c#0 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#5 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#19 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#19 )
  (byte[256]) buffer2#11 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#11 )
  (byte[1000]) SCREEN#7 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#5 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#5 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  (byte[256]) buffer2#10 ← phi( main::@3/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#4 ← phi( main::@3/(byte) main::c#5 )
  (byte*) RASTER#4 ← phi( main::@3/(byte*) RASTER#1 )
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#17 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[256]) buffer2#9 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[1000]) SCREEN#5 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( @1/(byte*) RASTER#4 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#5 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  (byte*) RASTER#11 ← phi( @2/(byte*) RASTER#5 )
  (byte[256]) buffer1#14 ← phi( @2/(byte[256]) buffer1#16 )
  (byte[256]) buffer2#7 ← phi( @2/(byte[256]) buffer2#8 )
  (byte[1000]) SCREEN#3 ← phi( @2/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:@17
@17: from @3
  (byte[256]) buffer2#17 ← phi( @3/(byte[256]) buffer2#7 )
  (byte*) RASTER#10 ← phi( @3/(byte*) RASTER#11 )
  (byte[256]) buffer1#15 ← phi( @3/(byte[256]) buffer1#14 )
  (byte[1000]) SCREEN#2 ← phi( @3/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:@18
@18: from @17
  (byte[256]) buffer2#15 ← phi( @17/(byte[256]) buffer2#17 )
  (byte[256]) buffer1#23 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#11 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#8 ← phi( @17/(byte*) RASTER#10 )
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  (byte[256]) buffer2#6 ← phi( @3/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#11 ← phi( @3/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) flip::r#0 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#4 flip/(byte) flip::srcIdx#0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#5 flip/(byte[256]) buffer2#6 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) flip::dstIdx#0 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte[256]) buffer2#5 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte[256]) buffer2#4 ← phi( @8/(byte[256]) buffer2#5 )
  (byte[256]) buffer1#7 ← phi( @8/(byte[256]) buffer1#10 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#7 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) flip::i#0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#4 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte[256]) buffer1#13 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::y#0 ← (byte) 16
  (byte) plot::i#0 ← (byte) 0
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) plot::y#0 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#13 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#4 plot/(byte) plot::i#0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte[1000]) SCREEN#0 (word) 1024
Constant (byte[256]) buffer1#0 (word) 4096
Constant (byte[256]) buffer2#0 (word) 4352
Constant (byte*) RASTER#0 (word) 53266
Constant (byte) main::c#0 (byte) 25
Constant (byte) prepare::i#0 (byte) 0
Constant (byte) flip::srcIdx#0 (byte) 0
Constant (byte) flip::dstIdx#0 (byte) 15
Constant (byte) flip::r#0 (byte) 16
Constant (byte) flip::c#0 (byte) 16
Constant (byte) flip::i#0 (byte) 0
Constant (byte~) plot::$0 (byte) 200
Constant (byte) plot::y#0 (byte) 16
Constant (byte) plot::i#0 (byte) 0
Constant (byte) plot::x#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#16 ← phi( @BEGIN/(word) 4352 )
  (byte[1000]) SCREEN#12 ← phi( @BEGIN/(word) 1024 )
  (byte*) RASTER#9 ← phi( @BEGIN/(word) 53266 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(word) 4096 )
  call prepare param-assignment
  to:@16
@16: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#7 ← phi( main/(byte*) RASTER#9 )
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(byte[256]) buffer1#22 @18/(byte[256]) buffer1#23 )
  (byte[256]) buffer2#13 ← phi( @16/(byte[256]) buffer2#14 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(byte[1000]) SCREEN#10 @18/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( @16/(byte*) RASTER#7 @18/(byte*) RASTER#8 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#8 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#16 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#4 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#5 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#19 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#19 )
  (byte[256]) buffer2#11 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#11 )
  (byte[1000]) SCREEN#7 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#5 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#5 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  (byte[256]) buffer2#10 ← phi( main::@3/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#4 ← phi( main::@3/(byte) main::c#5 )
  (byte*) RASTER#4 ← phi( main::@3/(byte*) RASTER#1 )
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#17 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[256]) buffer2#9 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[1000]) SCREEN#5 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( @1/(byte*) RASTER#4 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#5 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  (byte*) RASTER#11 ← phi( @2/(byte*) RASTER#5 )
  (byte[256]) buffer1#14 ← phi( @2/(byte[256]) buffer1#16 )
  (byte[256]) buffer2#7 ← phi( @2/(byte[256]) buffer2#8 )
  (byte[1000]) SCREEN#3 ← phi( @2/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:@17
@17: from @3
  (byte[256]) buffer2#17 ← phi( @3/(byte[256]) buffer2#7 )
  (byte*) RASTER#10 ← phi( @3/(byte*) RASTER#11 )
  (byte[256]) buffer1#15 ← phi( @3/(byte[256]) buffer1#14 )
  (byte[1000]) SCREEN#2 ← phi( @3/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:@18
@18: from @17
  (byte[256]) buffer2#15 ← phi( @17/(byte[256]) buffer2#17 )
  (byte[256]) buffer1#23 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#11 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#8 ← phi( @17/(byte*) RASTER#10 )
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  (byte[256]) buffer2#6 ← phi( @3/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#11 ← phi( @3/(byte[256]) buffer1#14 )
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#4 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#5 flip/(byte[256]) buffer2#6 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte[256]) buffer2#5 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte[256]) buffer2#4 ← phi( @8/(byte[256]) buffer2#5 )
  (byte[256]) buffer1#7 ← phi( @8/(byte[256]) buffer1#10 )
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#7 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#4 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte[256]) buffer1#13 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte) 200
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#13 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#4 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Consolidated constant in assignment (byte*~) plot::$2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#16 ← phi( @BEGIN/(word) 4352 )
  (byte[1000]) SCREEN#12 ← phi( @BEGIN/(word) 1024 )
  (byte*) RASTER#9 ← phi( @BEGIN/(word) 53266 )
  (byte[256]) buffer1#9 ← phi( @BEGIN/(word) 4096 )
  call prepare param-assignment
  to:@16
@16: from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#7 ← phi( main/(byte*) RASTER#9 )
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(byte[256]) buffer1#22 @18/(byte[256]) buffer1#23 )
  (byte[256]) buffer2#13 ← phi( @16/(byte[256]) buffer2#14 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(byte[1000]) SCREEN#10 @18/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( @16/(byte*) RASTER#7 @18/(byte*) RASTER#8 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#8 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#16 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#4 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#5 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#19 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#19 )
  (byte[256]) buffer2#11 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#11 )
  (byte[1000]) SCREEN#7 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#5 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#5 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  (byte[256]) buffer2#10 ← phi( main::@3/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@3/(byte[1000]) SCREEN#7 )
  (byte) main::c#4 ← phi( main::@3/(byte) main::c#5 )
  (byte*) RASTER#4 ← phi( main::@3/(byte*) RASTER#1 )
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#17 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[256]) buffer2#9 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[1000]) SCREEN#5 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( @1/(byte*) RASTER#4 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#5 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  (byte*) RASTER#11 ← phi( @2/(byte*) RASTER#5 )
  (byte[256]) buffer1#14 ← phi( @2/(byte[256]) buffer1#16 )
  (byte[256]) buffer2#7 ← phi( @2/(byte[256]) buffer2#8 )
  (byte[1000]) SCREEN#3 ← phi( @2/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:@17
@17: from @3
  (byte[256]) buffer2#17 ← phi( @3/(byte[256]) buffer2#7 )
  (byte*) RASTER#10 ← phi( @3/(byte*) RASTER#11 )
  (byte[256]) buffer1#15 ← phi( @3/(byte[256]) buffer1#14 )
  (byte[1000]) SCREEN#2 ← phi( @3/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:@18
@18: from @17
  (byte[256]) buffer2#15 ← phi( @17/(byte[256]) buffer2#17 )
  (byte[256]) buffer1#23 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#11 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#8 ← phi( @17/(byte*) RASTER#10 )
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  (byte[256]) buffer2#6 ← phi( @3/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#11 ← phi( @3/(byte[256]) buffer1#14 )
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#4 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#5 flip/(byte[256]) buffer2#6 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte[256]) buffer2#5 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  (byte[256]) buffer2#4 ← phi( @8/(byte[256]) buffer2#5 )
  (byte[256]) buffer1#7 ← phi( @8/(byte[256]) buffer1#10 )
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#7 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#4 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte[256]) buffer1#13 ← phi( @17/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( @17/(byte[1000]) SCREEN#2 )
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 212
  (byte*) plot::line#0 ← (byte*~) plot::$2
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#13 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#4 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Alias (byte[256]) buffer2#14 = (byte[256]) buffer2#16 
Alias (byte[256]) buffer1#22 = (byte[256]) buffer1#9 (byte[256]) buffer1#5 
Alias (byte[1000]) SCREEN#10 = (byte[1000]) SCREEN#12 
Alias (byte*) RASTER#7 = (byte*) RASTER#9 
Alias (byte[256]) buffer2#10 = (byte[256]) buffer2#11 
Alias (byte[256]) buffer1#18 = (byte[256]) buffer1#19 
Alias (byte[1000]) SCREEN#6 = (byte[1000]) SCREEN#7 
Alias (byte) main::c#4 = (byte) main::c#5 
Alias (byte*) RASTER#1 = (byte*) RASTER#4 
Alias (byte[256]) buffer2#15 = (byte[256]) buffer2#8 (byte[256]) buffer2#9 (byte[256]) buffer2#7 (byte[256]) buffer2#17 (byte[256]) buffer2#6 
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#16 (byte[256]) buffer1#17 (byte[256]) buffer1#14 (byte[256]) buffer1#15 (byte[256]) buffer1#23 (byte[256]) buffer1#13 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#4 (byte[1000]) SCREEN#5 (byte[1000]) SCREEN#3 (byte[1000]) SCREEN#2 (byte[1000]) SCREEN#11 (byte*~) plot::$1 
Alias (byte*) RASTER#10 = (byte*) RASTER#5 (byte*) RASTER#2 (byte*) RASTER#11 (byte*) RASTER#8 
Alias (byte) main::c#2 = (byte) main::c#3 
Alias (byte) flip::dstIdx#1 = (byte~) flip::$1 (byte) flip::dstIdx#4 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#5 (byte[256]) buffer2#4 
Alias (byte) flip::srcIdx#1 = (byte) flip::srcIdx#4 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#2 (byte[256]) buffer1#7 
Alias (byte) flip::r#2 = (byte) flip::r#3 
Alias (byte*) plot::line#0 = (byte*~) plot::$2 
Alias (byte) plot::i#1 = (byte) plot::i#4 
Alias (byte[256]) buffer1#12 = (byte[256]) buffer1#4 
Alias (byte) plot::y#2 = (byte) plot::y#3 
Alias (byte*) plot::line#2 = (byte*) plot::line#3 
Alias (byte*) plot::line#1 = (byte*~) plot::$5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  (byte[256]) buffer2#14 ← phi( @BEGIN/(word) 4352 )
  (byte[1000]) SCREEN#10 ← phi( @BEGIN/(word) 1024 )
  (byte*) RASTER#7 ← phi( @BEGIN/(word) 53266 )
  (byte[256]) buffer1#22 ← phi( @BEGIN/(word) 4096 )
  call prepare param-assignment
  to:@16
@16: from main
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(byte[256]) buffer1#22 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( @16/(byte[256]) buffer2#14 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(byte[1000]) SCREEN#10 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( @16/(byte*) RASTER#7 @18/(byte*) RASTER#10 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#15 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#10 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#18 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[256]) buffer2#10 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#11 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#15 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#1 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#10 ← phi( @1/(byte*) RASTER#1 main::@4/(byte*) RASTER#10 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#22 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#15 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#10 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#10 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#1 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#12 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Redundant Phi (byte[256]) buffer2#14 (word) 4352
Redundant Phi (byte[1000]) SCREEN#10 (word) 1024
Redundant Phi (byte*) RASTER#7 (word) 53266
Redundant Phi (byte[256]) buffer1#22 (word) 4096
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:@16
@16: from main
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( @16/(word) 4352 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( @16/(word) 53266 @18/(byte*) RASTER#10 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#15 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#10 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#18 ← phi( main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[256]) buffer2#10 ← phi( main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@2/(byte) main::c#6 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#11 ← phi( @1/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#15 ← phi( @1/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#1 ← phi( @1/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( @1/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#10 ← phi( @1/(byte*) RASTER#1 main::@4/(byte*) RASTER#10 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#15 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#10 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#10 flip::@3/(byte[256]) buffer1#3 )
  (byte) flip::i#2 ← phi( @9/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#1 flip::@3/(byte[256]) buffer2#2 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#12 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Self Phi Eliminated (byte[256]) buffer1#18
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte[1000]) SCREEN#6
Self Phi Eliminated (byte) main::c#4
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[256]) buffer2#15
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte) main::c#2
Self Phi Eliminated (byte*) RASTER#10
Self Phi Eliminated (byte[256]) buffer1#1
Self Phi Eliminated (byte) flip::r#2
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer1#3
Self Phi Eliminated (byte[256]) buffer2#2
Self Phi Eliminated (byte) plot::y#2
Self Phi Eliminated (byte*) plot::line#2
Self Phi Eliminated (byte[256]) buffer1#12
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:@16
@16: from main
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( @16/(word) 4352 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( @16/(word) 53266 @18/(byte*) RASTER#10 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#15 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#10 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#18 ← phi( main::@2/(byte[256]) buffer1#20 )
  (byte[256]) buffer2#10 ← phi( main::@2/(byte[256]) buffer2#12 )
  (byte[1000]) SCREEN#6 ← phi( main::@2/(byte[1000]) SCREEN#8 )
  (byte) main::c#4 ← phi( main::@2/(byte) main::c#6 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:@1
@1: from main::@3
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#11 ← phi( @1/(byte[256]) buffer1#18 )
  (byte[256]) buffer2#15 ← phi( @1/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#1 ← phi( @1/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( @1/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( @1/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#15 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:@9
@9: from @8
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#10 )
  (byte) flip::i#2 ← phi( @9/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Simple Condition (boolean~) main::$2 if((byte~) main::$1!=(byte) 254) goto main::@3
Simple Condition (boolean~) main::$4 if((byte~) main::$3!=(byte) 255) goto main::@4
Simple Condition (boolean~) main::$5 if((byte) main::c#1!=(byte) 0) goto main::@2
Simple Condition (boolean~) prepare::$0 if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
Simple Condition (boolean~) flip::$2 if((byte) flip::c#1!=(byte) 0) goto flip::@2
Simple Condition (boolean~) flip::$3 if((byte) flip::r#1!=(byte) 0) goto flip::@1
Simple Condition (boolean~) flip::$5 if((byte) flip::i#1!=(byte) 0) goto flip::@3
Simple Condition (boolean~) plot::$4 if((byte) plot::x#1<(byte) 16) goto plot::@2
Simple Condition (boolean~) plot::$6 if((byte) plot::y#1!=(byte) 0) goto plot::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:@16
@16: from main
  to:main::@1
main::@1: from @16 @18
  (byte[256]) buffer1#21 ← phi( @16/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( @16/(word) 4352 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( @16/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( @16/(word) 53266 @18/(byte*) RASTER#10 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#15 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#10 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#18 ← phi( main::@2/(byte[256]) buffer1#20 )
  (byte[256]) buffer2#10 ← phi( main::@2/(byte[256]) buffer2#12 )
  (byte[1000]) SCREEN#6 ← phi( main::@2/(byte[1000]) SCREEN#8 )
  (byte) main::c#4 ← phi( main::@2/(byte) main::c#6 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:@1
@1: from main::@3
  to:main::@4
main::@4: from @1 main::@4
  (byte[256]) buffer1#11 ← phi( @1/(byte[256]) buffer1#18 )
  (byte[256]) buffer2#15 ← phi( @1/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#1 ← phi( @1/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( @1/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( @1/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#15 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:@9
@9: from @8
  to:flip::@3
flip::@3: from @9 flip::@3
  (byte[256]) buffer1#3 ← phi( @9/(byte[256]) buffer1#10 )
  (byte) flip::i#2 ← phi( @9/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @9/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Culled Empty Block (label) @16
Culled Empty Block (label) @1
Culled Empty Block (label) @9
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  (byte[256]) buffer1#21 ← phi( main/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( main/(word) 4352 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( main/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( main/(word) 53266 @18/(byte*) RASTER#10 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#15 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#10 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#18 ← phi( main::@2/(byte[256]) buffer1#20 )
  (byte[256]) buffer2#10 ← phi( main::@2/(byte[256]) buffer2#12 )
  (byte[1000]) SCREEN#6 ← phi( main::@2/(byte[1000]) SCREEN#8 )
  (byte) main::c#4 ← phi( main::@2/(byte) main::c#6 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer1#11 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[256]) buffer2#15 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#15 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte[256]) buffer1#3 ← phi( @8/(byte[256]) buffer1#10 )
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @8/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte[256]) buffer1#1 (word) 4096
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  (byte[256]) buffer1#21 ← phi( main/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( main/(word) 4352 @18/(byte[256]) buffer2#15 )
  (byte[1000]) SCREEN#9 ← phi( main/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( main/(word) 53266 @18/(byte*) RASTER#10 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#12 ← phi( @2/(byte[256]) buffer2#15 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#20 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#8 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#6 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#3 ← phi( @2/(byte*) RASTER#10 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte[256]) buffer1#18 ← phi( main::@2/(byte[256]) buffer1#20 )
  (byte[256]) buffer2#10 ← phi( main::@2/(byte[256]) buffer2#12 )
  (byte[1000]) SCREEN#6 ← phi( main::@2/(byte[1000]) SCREEN#8 )
  (byte) main::c#4 ← phi( main::@2/(byte) main::c#6 )
  (byte*) RASTER#1 ← phi( main::@2/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte[256]) buffer1#11 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[256]) buffer2#15 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#4 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#6 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#3 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#15 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#10 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte[256]) buffer1#3 ← phi( @8/(byte[256]) buffer1#10 )
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte[256]) buffer2#2 ← phi( @8/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#4 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#8 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#4 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#12 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte[1000]) SCREEN#1
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#18 (byte[256]) buffer1#20 
Alias (byte[256]) buffer2#10 = (byte[256]) buffer2#12 (byte[256]) buffer2#15 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#6 (byte[1000]) SCREEN#8 
Alias (byte) main::c#2 = (byte) main::c#4 (byte) main::c#6 
Alias (byte*) RASTER#1 = (byte*) RASTER#3 (byte*) RASTER#10 
Alias (byte) flip::r#2 = (byte) flip::r#4 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#3 (byte[256]) buffer2#2 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#6 (byte[256]) buffer1#3 
Alias (byte) plot::y#2 = (byte) plot::y#4 
Alias (byte*) plot::line#2 = (byte*) plot::line#4 
Alias (byte[256]) buffer1#12 = (byte[256]) buffer1#8 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  (byte[256]) buffer1#21 ← phi( main/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( main/(word) 4352 @18/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#9 ← phi( main/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( main/(word) 53266 @18/(byte*) RASTER#1 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#10 ← phi( @2/(byte[256]) buffer2#10 main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#11 ← phi( @2/(byte[256]) buffer1#11 main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#1 ← phi( @2/(byte[1000]) SCREEN#1 main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#1 ← phi( @2/(byte*) RASTER#1 main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#10 ← phi( @8/(byte[256]) buffer1#10 flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#1 ← phi( @8/(byte[256]) buffer2#1 flip/(byte[256]) buffer2#10 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#12 ← phi( @12/(byte[256]) buffer1#12 plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte[256]) buffer1#12
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  (byte[256]) buffer1#21 ← phi( main/(word) 4096 @18/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#13 ← phi( main/(word) 4352 @18/(byte[256]) buffer2#10 )
  (byte[1000]) SCREEN#9 ← phi( main/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#6 ← phi( main/(word) 53266 @18/(byte*) RASTER#1 )
  to:main::@2
main::@2: from @2 main::@1
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#13 )
  (byte[256]) buffer1#11 ← phi( main::@1/(byte[256]) buffer1#21 )
  (byte[1000]) SCREEN#1 ← phi( main::@1/(byte[1000]) SCREEN#9 )
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#6 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte[256]) buffer1#10 ← phi( flip/(byte[256]) buffer1#11 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte[256]) buffer2#1 ← phi( flip/(byte[256]) buffer2#10 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte[256]) buffer1#12 ← phi( plot/(byte[256]) buffer1#11 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#12 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte[1000]) SCREEN#1
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#10 (byte[256]) buffer2#13 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#11 (byte[256]) buffer1#21 (byte[256]) buffer1#12 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#9 
Alias (byte*) RASTER#1 = (byte*) RASTER#6 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  (byte[256]) buffer1#10 ← phi( main/(word) 4096 @18/(byte[256]) buffer1#10 )
  (byte[256]) buffer2#1 ← phi( main/(word) 4352 @18/(byte[256]) buffer2#1 )
  (byte[1000]) SCREEN#1 ← phi( main/(word) 1024 @18/(byte[1000]) SCREEN#1 )
  (byte*) RASTER#1 ← phi( main/(word) 53266 @18/(byte*) RASTER#1 )
  to:main::@2
main::@2: from @2 main::@1
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#10 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte*) RASTER#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  (byte[256]) buffer1#10 ← phi( main/(word) 4096 )
  (byte[256]) buffer2#1 ← phi( main/(word) 4352 )
  (byte[1000]) SCREEN#1 ← phi( main/(word) 1024 )
  (byte*) RASTER#1 ← phi( main/(word) 53266 )
  to:main::@2
main::@2: from @2 main::@1
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (byte[1000]) SCREEN#1 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#10 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte[256]) buffer1#10 (word) 4096
Constant (byte[256]) buffer2#1 (word) 4352
Constant (byte[1000]) SCREEN#1 (word) 1024
Constant (byte*) RASTER#1 (word) 53266
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@1
main::@1: from @18 main
  to:main::@2
main::@2: from @2 main::@1
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 main::@1/(byte) 25 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@1
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (word) 1024 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Culled Empty Block (label) main::@1
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@2
main::@2: from @18 @2 main
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 @18/(byte) 25 main/(byte) 25 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@2
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  (byte*) plot::line#0 ← (word) 1024 + (byte) 212
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(byte*) plot::line#0 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Constant (byte*) plot::line#0 (word) 1236
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  call main param-assignment
  to:@END
main: from @BEGIN
  call prepare param-assignment
  to:main::@2
main::@2: from @18 @2 main
  (byte) main::c#2 ← phi( @2/(byte) main::c#1 @18/(byte) 25 main/(byte) 25 )
  to:main::@3
main::@3: from main::@2 main::@3
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:@2
@2: from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:@3
@3: from @2
  call flip param-assignment
  to:@17
@17: from @3
  call plot param-assignment
  to:@18
@18: from @17
  if(true) goto main::@2
  to:main::@return
main::@return: from @18
  return 
  to:@RETURN
prepare: from main
  to:prepare::@1
prepare::@1: from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: from prepare::@1
  return 
  to:@RETURN
flip: from @3
  to:flip::@1
flip::@1: from @8 flip
  (byte) flip::r#2 ← phi( @8/(byte) flip::r#1 flip/(byte) 16 )
  (byte) flip::srcIdx#3 ← phi( @8/(byte) flip::srcIdx#1 flip/(byte) 0 )
  (byte) flip::dstIdx#5 ← phi( @8/(byte) flip::dstIdx#2 flip/(byte) 15 )
  to:flip::@2
flip::@2: from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:@8
@8: from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: from @8 flip::@3
  (byte) flip::i#2 ← phi( @8/(byte) 0 flip::@3/(byte) flip::i#1 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: from flip::@3
  return 
  to:@RETURN
plot: from @17
  to:plot::@1
plot::@1: from @12 plot
  (byte) plot::y#2 ← phi( @12/(byte) plot::y#1 plot/(byte) 16 )
  (byte) plot::i#3 ← phi( @12/(byte) plot::i#1 plot/(byte) 0 )
  (byte*) plot::line#2 ← phi( @12/(byte*) plot::line#1 plot/(word) 1236 )
  to:plot::@2
plot::@2: from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:@12
@12: from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: from @12
  return 
  to:@RETURN
@END: from @BEGIN

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
INITIAL ASM
BBEGIN:
  jsr main
  jmp BEND
BEND:
main:
  jsr prepare
main__B2_from_main:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
  jmp main__B2
main__B2_from_B18:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
  jmp main__B2
main__B2_from_B2:
  // (byte) main::c#2 = (byte) main::c#1  // register copy 
  jmp main__B2
main__B2:
  jmp main__B3
main__B3:
  // (byte~) main::$1 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$1!=(byte) 254) goto main::@3  //  aby_neq_coby1_then_la1
  cmp #254
  bne main__main__B3
  jmp main__B4
main__B4:
  // (byte~) main::$3 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$3!=(byte) 255) goto main::@4  //  aby_neq_coby1_then_la1
  cmp #255
  bne main__main__B4
  jmp B2
B2:
  // (byte) main::c#1 ← -- (byte) main::c#2  //  xby=_dec_xby
  dex
  // if((byte) main::c#1!=(byte) 0) goto main::@2  //  xby_neq_0_then_la1
  cpx #0
  bne main__B2_from_B2
  jmp B3
B3:
  jsr flip
  jmp B17
B17:
  jsr plot
  jmp B18
B18:
  // if(true) goto main::@2  //  true_then_la1
  jmp main__B2_from_B18
  jmp main__Breturn
main__Breturn:
  rts
plot:
plot__B1_from_plot:
  // (byte) plot::y#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 100
  // (byte) plot::i#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte*) plot::line#2 = (word) 1236  // zpptrby1=cowo1
  lda #<1236
  sta 101
  lda #>1236
  sta 101+1
  jmp plot__B1
plot__B1_from_B12:
  // (byte) plot::y#2 = (byte) plot::y#1  // register copy 
  // (byte) plot::i#3 = (byte) plot::i#1  // register copy 
  // (byte*) plot::line#2 = (byte*) plot::line#1  // register copy 
  jmp plot__B1
plot__B1:
plot__B2_from_B1:
  // (byte) plot::x#2 = (byte) 0  // yby=coby1
  ldy #0
  // (byte) plot::i#2 = (byte) plot::i#3  // register copy 
  jmp plot__B2
plot__B2_from_B2:
  // (byte) plot::x#2 = (byte) plot::x#1  // register copy 
  // (byte) plot::i#2 = (byte) plot::i#1  // register copy 
  jmp plot__B2
plot__B2:
  // (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3  //  ptr_zpptrby1_yby=aby
  sta (101),y
  // (byte) plot::i#1 ← ++ (byte) plot::i#2  //  xby=_inc_xby
  inx
  // (byte) plot::x#1 ← ++ (byte) plot::x#2  //  yby=_inc_yby
  iny
  // if((byte) plot::x#1<(byte) 16) goto plot::@2  //  yby_lt_coby1_then_la1
  cpy #16
  bcc plot__B2_from_B2
  jmp B12
B12:
  // (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40  //  zpptrby1=zpptrby1_plus_coby1
  lda 101
  clc
  adc #40
  sta 101
  bcc !+
  inc 101+1
!:
  // (byte) plot::y#1 ← -- (byte) plot::y#2  //  zpby1=_dec_zpby1
  dec 100
  // if((byte) plot::y#1!=(byte) 0) goto plot::@1  //  zpby1_neq_0_then_la1
  lda 100
  bne plot__B1_from_B12
  jmp plot__Breturn
plot__Breturn:
  rts
flip:
flip__B1_from_flip:
  // (byte) flip::r#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 104
  // (byte) flip::srcIdx#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte) flip::dstIdx#5 = (byte) 15  // yby=coby1
  ldy #15
  jmp flip__B1
flip__B1_from_B8:
  // (byte) flip::r#2 = (byte) flip::r#1  // register copy 
  // (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1  // register copy 
  // (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2  // register copy 
  jmp flip__B1
flip__B1:
flip__B2_from_B1:
  // (byte) flip::c#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 103
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3  // register copy 
  jmp flip__B2
flip__B2_from_B2:
  // (byte) flip::c#2 = (byte) flip::c#1  // register copy 
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1  // register copy 
  jmp flip__B2
flip__B2:
  // (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0  //  ptr_cowo1_yby=aby
  sta 4352,y
  // (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2  //  xby=_inc_xby
  inx
  // (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16  //  yby=yby_plus_coby1
  tya
  clc
  adc #16
  tay
  // (byte) flip::c#1 ← -- (byte) flip::c#2  //  zpby1=_dec_zpby1
  dec 103
  // if((byte) flip::c#1!=(byte) 0) goto flip::@2  //  zpby1_neq_0_then_la1
  lda 103
  bne flip__B2_from_B2
  jmp B8
B8:
  // (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1  //  yby=_dec_yby
  dey
  // (byte) flip::r#1 ← -- (byte) flip::r#2  //  zpby1=_dec_zpby1
  dec 104
  // if((byte) flip::r#1!=(byte) 0) goto flip::@1  //  zpby1_neq_0_then_la1
  lda 104
  bne flip__B1_from_B8
flip__B3_from_B8:
  // (byte) flip::i#2 = (byte) 0  // xby=coby1
  ldx #0
  jmp flip__B3
flip__B3_from_B3:
  // (byte) flip::i#2 = (byte) flip::i#1  // register copy 
  jmp flip__B3
flip__B3:
  // (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2  //  aby=cowo1_staridx_xby
  lda 4352,x
  // *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4  //  ptr_cowo1_xby=aby
  sta 4096,x
  // (byte) flip::i#1 ← ++ (byte) flip::i#2  //  xby=_inc_xby
  inx
  // if((byte) flip::i#1!=(byte) 0) goto flip::@3  //  xby_neq_0_then_la1
  cpx #0
  bne flip__B3_from_B3
  jmp flip__Breturn
flip__Breturn:
  rts
prepare:
prepare__B1_from_prepare:
  // (byte) prepare::i#2 = (byte) 0  // xby=coby1
  ldx #0
  jmp prepare__B1
prepare__B1_from_B1:
  // (byte) prepare::i#2 = (byte) prepare::i#1  // register copy 
  jmp prepare__B1
prepare__B1:
  // *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2  //  ptr_cowo1_xby=xby
  txa
  sta 4096,x
  // (byte) prepare::i#1 ← ++ (byte) prepare::i#2  //  xby=_inc_xby
  inx
  // if((byte) prepare::i#1!=(byte) 0) goto prepare::@1  //  xby_neq_0_then_la1
  cpx #0
  bne prepare__B1_from_B1
  jmp prepare__Breturn
prepare__Breturn:
  rts

Removing instruction jmp BEND
Removing instruction jmp main__B2
Removing instruction jmp main__B3
Removing instruction jmp main__B4
Removing instruction jmp B2
Removing instruction jmp B3
Removing instruction jmp B17
Removing instruction jmp B18
Removing instruction jmp main__Breturn
Removing instruction jmp plot__B1
Removing instruction jmp plot__B2
Removing instruction jmp B12
Removing instruction jmp plot__Breturn
Removing instruction jmp flip__B1
Removing instruction jmp flip__B2
Removing instruction jmp B8
Removing instruction jmp flip__B3
Removing instruction jmp flip__Breturn
Removing instruction jmp prepare__B1
Removing instruction jmp prepare__Breturn
Succesful ASM optimization Pass4NextJumpElimination
ASSEMBLER
BBEGIN:
  jsr main
BEND:
main:
  jsr prepare
main__B2_from_main:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
  jmp main__B2
main__B2_from_B18:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
  jmp main__B2
main__B2_from_B2:
  // (byte) main::c#2 = (byte) main::c#1  // register copy 
main__B2:
main__B3:
  // (byte~) main::$1 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$1!=(byte) 254) goto main::@3  //  aby_neq_coby1_then_la1
  cmp #254
  bne main__main__B3
main__B4:
  // (byte~) main::$3 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$3!=(byte) 255) goto main::@4  //  aby_neq_coby1_then_la1
  cmp #255
  bne main__main__B4
B2:
  // (byte) main::c#1 ← -- (byte) main::c#2  //  xby=_dec_xby
  dex
  // if((byte) main::c#1!=(byte) 0) goto main::@2  //  xby_neq_0_then_la1
  cpx #0
  bne main__B2_from_B2
B3:
  jsr flip
B17:
  jsr plot
B18:
  // if(true) goto main::@2  //  true_then_la1
  jmp main__B2_from_B18
main__Breturn:
  rts
plot:
plot__B1_from_plot:
  // (byte) plot::y#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 100
  // (byte) plot::i#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte*) plot::line#2 = (word) 1236  // zpptrby1=cowo1
  lda #<1236
  sta 101
  lda #>1236
  sta 101+1
  jmp plot__B1
plot__B1_from_B12:
  // (byte) plot::y#2 = (byte) plot::y#1  // register copy 
  // (byte) plot::i#3 = (byte) plot::i#1  // register copy 
  // (byte*) plot::line#2 = (byte*) plot::line#1  // register copy 
plot__B1:
plot__B2_from_B1:
  // (byte) plot::x#2 = (byte) 0  // yby=coby1
  ldy #0
  // (byte) plot::i#2 = (byte) plot::i#3  // register copy 
  jmp plot__B2
plot__B2_from_B2:
  // (byte) plot::x#2 = (byte) plot::x#1  // register copy 
  // (byte) plot::i#2 = (byte) plot::i#1  // register copy 
plot__B2:
  // (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3  //  ptr_zpptrby1_yby=aby
  sta (101),y
  // (byte) plot::i#1 ← ++ (byte) plot::i#2  //  xby=_inc_xby
  inx
  // (byte) plot::x#1 ← ++ (byte) plot::x#2  //  yby=_inc_yby
  iny
  // if((byte) plot::x#1<(byte) 16) goto plot::@2  //  yby_lt_coby1_then_la1
  cpy #16
  bcc plot__B2_from_B2
B12:
  // (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40  //  zpptrby1=zpptrby1_plus_coby1
  lda 101
  clc
  adc #40
  sta 101
  bcc !+
  inc 101+1
!:
  // (byte) plot::y#1 ← -- (byte) plot::y#2  //  zpby1=_dec_zpby1
  dec 100
  // if((byte) plot::y#1!=(byte) 0) goto plot::@1  //  zpby1_neq_0_then_la1
  lda 100
  bne plot__B1_from_B12
plot__Breturn:
  rts
flip:
flip__B1_from_flip:
  // (byte) flip::r#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 104
  // (byte) flip::srcIdx#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte) flip::dstIdx#5 = (byte) 15  // yby=coby1
  ldy #15
  jmp flip__B1
flip__B1_from_B8:
  // (byte) flip::r#2 = (byte) flip::r#1  // register copy 
  // (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1  // register copy 
  // (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2  // register copy 
flip__B1:
flip__B2_from_B1:
  // (byte) flip::c#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 103
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3  // register copy 
  jmp flip__B2
flip__B2_from_B2:
  // (byte) flip::c#2 = (byte) flip::c#1  // register copy 
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1  // register copy 
flip__B2:
  // (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0  //  ptr_cowo1_yby=aby
  sta 4352,y
  // (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2  //  xby=_inc_xby
  inx
  // (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16  //  yby=yby_plus_coby1
  tya
  clc
  adc #16
  tay
  // (byte) flip::c#1 ← -- (byte) flip::c#2  //  zpby1=_dec_zpby1
  dec 103
  // if((byte) flip::c#1!=(byte) 0) goto flip::@2  //  zpby1_neq_0_then_la1
  lda 103
  bne flip__B2_from_B2
B8:
  // (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1  //  yby=_dec_yby
  dey
  // (byte) flip::r#1 ← -- (byte) flip::r#2  //  zpby1=_dec_zpby1
  dec 104
  // if((byte) flip::r#1!=(byte) 0) goto flip::@1  //  zpby1_neq_0_then_la1
  lda 104
  bne flip__B1_from_B8
flip__B3_from_B8:
  // (byte) flip::i#2 = (byte) 0  // xby=coby1
  ldx #0
  jmp flip__B3
flip__B3_from_B3:
  // (byte) flip::i#2 = (byte) flip::i#1  // register copy 
flip__B3:
  // (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2  //  aby=cowo1_staridx_xby
  lda 4352,x
  // *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4  //  ptr_cowo1_xby=aby
  sta 4096,x
  // (byte) flip::i#1 ← ++ (byte) flip::i#2  //  xby=_inc_xby
  inx
  // if((byte) flip::i#1!=(byte) 0) goto flip::@3  //  xby_neq_0_then_la1
  cpx #0
  bne flip__B3_from_B3
flip__Breturn:
  rts
prepare:
prepare__B1_from_prepare:
  // (byte) prepare::i#2 = (byte) 0  // xby=coby1
  ldx #0
  jmp prepare__B1
prepare__B1_from_B1:
  // (byte) prepare::i#2 = (byte) prepare::i#1  // register copy 
prepare__B1:
  // *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2  //  ptr_cowo1_xby=xby
  txa
  sta 4096,x
  // (byte) prepare::i#1 ← ++ (byte) prepare::i#2  //  xby=_inc_xby
  inx
  // if((byte) prepare::i#1!=(byte) 0) goto prepare::@1  //  xby_neq_0_then_la1
  cpx #0
  bne prepare__B1_from_B1
prepare__Breturn:
  rts

Removing instruction jmp main__B2
Removing instruction jmp plot__B1
Removing instruction jmp plot__B2
Removing instruction jmp flip__B1
Removing instruction jmp flip__B2
Removing instruction jmp flip__B3
Removing instruction jmp prepare__B1
Succesful ASM optimization Pass4NextJumpElimination
ASSEMBLER
BBEGIN:
  jsr main
BEND:
main:
  jsr prepare
main__B2_from_main:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
  jmp main__B2
main__B2_from_B18:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
main__B2_from_B2:
  // (byte) main::c#2 = (byte) main::c#1  // register copy 
main__B2:
main__B3:
  // (byte~) main::$1 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$1!=(byte) 254) goto main::@3  //  aby_neq_coby1_then_la1
  cmp #254
  bne main__main__B3
main__B4:
  // (byte~) main::$3 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$3!=(byte) 255) goto main::@4  //  aby_neq_coby1_then_la1
  cmp #255
  bne main__main__B4
B2:
  // (byte) main::c#1 ← -- (byte) main::c#2  //  xby=_dec_xby
  dex
  // if((byte) main::c#1!=(byte) 0) goto main::@2  //  xby_neq_0_then_la1
  cpx #0
  bne main__B2_from_B2
B3:
  jsr flip
B17:
  jsr plot
B18:
  // if(true) goto main::@2  //  true_then_la1
  jmp main__B2_from_B18
main__Breturn:
  rts
plot:
plot__B1_from_plot:
  // (byte) plot::y#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 100
  // (byte) plot::i#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte*) plot::line#2 = (word) 1236  // zpptrby1=cowo1
  lda #<1236
  sta 101
  lda #>1236
  sta 101+1
plot__B1_from_B12:
  // (byte) plot::y#2 = (byte) plot::y#1  // register copy 
  // (byte) plot::i#3 = (byte) plot::i#1  // register copy 
  // (byte*) plot::line#2 = (byte*) plot::line#1  // register copy 
plot__B1:
plot__B2_from_B1:
  // (byte) plot::x#2 = (byte) 0  // yby=coby1
  ldy #0
  // (byte) plot::i#2 = (byte) plot::i#3  // register copy 
plot__B2_from_B2:
  // (byte) plot::x#2 = (byte) plot::x#1  // register copy 
  // (byte) plot::i#2 = (byte) plot::i#1  // register copy 
plot__B2:
  // (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3  //  ptr_zpptrby1_yby=aby
  sta (101),y
  // (byte) plot::i#1 ← ++ (byte) plot::i#2  //  xby=_inc_xby
  inx
  // (byte) plot::x#1 ← ++ (byte) plot::x#2  //  yby=_inc_yby
  iny
  // if((byte) plot::x#1<(byte) 16) goto plot::@2  //  yby_lt_coby1_then_la1
  cpy #16
  bcc plot__B2_from_B2
B12:
  // (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40  //  zpptrby1=zpptrby1_plus_coby1
  lda 101
  clc
  adc #40
  sta 101
  bcc !+
  inc 101+1
!:
  // (byte) plot::y#1 ← -- (byte) plot::y#2  //  zpby1=_dec_zpby1
  dec 100
  // if((byte) plot::y#1!=(byte) 0) goto plot::@1  //  zpby1_neq_0_then_la1
  lda 100
  bne plot__B1_from_B12
plot__Breturn:
  rts
flip:
flip__B1_from_flip:
  // (byte) flip::r#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 104
  // (byte) flip::srcIdx#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte) flip::dstIdx#5 = (byte) 15  // yby=coby1
  ldy #15
flip__B1_from_B8:
  // (byte) flip::r#2 = (byte) flip::r#1  // register copy 
  // (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1  // register copy 
  // (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2  // register copy 
flip__B1:
flip__B2_from_B1:
  // (byte) flip::c#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 103
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3  // register copy 
flip__B2_from_B2:
  // (byte) flip::c#2 = (byte) flip::c#1  // register copy 
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1  // register copy 
flip__B2:
  // (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0  //  ptr_cowo1_yby=aby
  sta 4352,y
  // (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2  //  xby=_inc_xby
  inx
  // (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16  //  yby=yby_plus_coby1
  tya
  clc
  adc #16
  tay
  // (byte) flip::c#1 ← -- (byte) flip::c#2  //  zpby1=_dec_zpby1
  dec 103
  // if((byte) flip::c#1!=(byte) 0) goto flip::@2  //  zpby1_neq_0_then_la1
  lda 103
  bne flip__B2_from_B2
B8:
  // (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1  //  yby=_dec_yby
  dey
  // (byte) flip::r#1 ← -- (byte) flip::r#2  //  zpby1=_dec_zpby1
  dec 104
  // if((byte) flip::r#1!=(byte) 0) goto flip::@1  //  zpby1_neq_0_then_la1
  lda 104
  bne flip__B1_from_B8
flip__B3_from_B8:
  // (byte) flip::i#2 = (byte) 0  // xby=coby1
  ldx #0
flip__B3_from_B3:
  // (byte) flip::i#2 = (byte) flip::i#1  // register copy 
flip__B3:
  // (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2  //  aby=cowo1_staridx_xby
  lda 4352,x
  // *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4  //  ptr_cowo1_xby=aby
  sta 4096,x
  // (byte) flip::i#1 ← ++ (byte) flip::i#2  //  xby=_inc_xby
  inx
  // if((byte) flip::i#1!=(byte) 0) goto flip::@3  //  xby_neq_0_then_la1
  cpx #0
  bne flip__B3_from_B3
flip__Breturn:
  rts
prepare:
prepare__B1_from_prepare:
  // (byte) prepare::i#2 = (byte) 0  // xby=coby1
  ldx #0
prepare__B1_from_B1:
  // (byte) prepare::i#2 = (byte) prepare::i#1  // register copy 
prepare__B1:
  // *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2  //  ptr_cowo1_xby=xby
  txa
  sta 4096,x
  // (byte) prepare::i#1 ← ++ (byte) prepare::i#2  //  xby=_inc_xby
  inx
  // if((byte) prepare::i#1!=(byte) 0) goto prepare::@1  //  xby_neq_0_then_la1
  cpx #0
  bne prepare__B1_from_B1
prepare__Breturn:
  rts

FINAL SYMBOL TABLE
(label) @12
(label) @17
(label) @18
(label) @2
(label) @3
(label) @8
(label) @BEGIN
(label) @END
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0 reg byte a
(byte~) flip::$4 reg byte a
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@return
(byte) flip::c
(byte) flip::c#1 zp byte:103
(byte) flip::c#2 zp byte:103
(byte) flip::dstIdx
(byte) flip::dstIdx#1 reg byte y
(byte) flip::dstIdx#2 reg byte y
(byte) flip::dstIdx#3 reg byte y
(byte) flip::dstIdx#5 reg byte y
(byte) flip::i
(byte) flip::i#1 reg byte x
(byte) flip::i#2 reg byte x
(byte) flip::r
(byte) flip::r#1 zp byte:104
(byte) flip::r#2 zp byte:104
(byte) flip::srcIdx
(byte) flip::srcIdx#1 reg byte x
(byte) flip::srcIdx#2 reg byte x
(byte) flip::srcIdx#3 reg byte x

(void()) main()
(byte~) main::$1 reg byte a
(byte~) main::$3 reg byte a
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x
(byte) main::c#2 reg byte x

(void()) plot()
(byte~) plot::$3 reg byte a
(label) plot::@1
(label) plot::@2
(label) plot::@return
(byte) plot::i
(byte) plot::i#1 reg byte x
(byte) plot::i#2 reg byte x
(byte) plot::i#3 reg byte x
(byte*) plot::line
(byte*) plot::line#1 zp ptr byte:101
(byte*) plot::line#2 zp ptr byte:101
(byte) plot::x
(byte) plot::x#1 reg byte y
(byte) plot::x#2 reg byte y
(byte) plot::y
(byte) plot::y#1 zp byte:100
(byte) plot::y#2 zp byte:100

(void()) prepare()
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#1 reg byte x
(byte) prepare::i#2 reg byte x


FINAL CODE
BBEGIN:
  jsr main
BEND:
main:
  jsr prepare
main__B2_from_main:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
  jmp main__B2
main__B2_from_B18:
  // (byte) main::c#2 = (byte) 25  // xby=coby1
  ldx #25
main__B2_from_B2:
  // (byte) main::c#2 = (byte) main::c#1  // register copy 
main__B2:
main__B3:
  // (byte~) main::$1 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$1!=(byte) 254) goto main::@3  //  aby_neq_coby1_then_la1
  cmp #254
  bne main__main__B3
main__B4:
  // (byte~) main::$3 ← * (word) 53266  //  aby=_star_cowo1
  lda 53266
  // if((byte~) main::$3!=(byte) 255) goto main::@4  //  aby_neq_coby1_then_la1
  cmp #255
  bne main__main__B4
B2:
  // (byte) main::c#1 ← -- (byte) main::c#2  //  xby=_dec_xby
  dex
  // if((byte) main::c#1!=(byte) 0) goto main::@2  //  xby_neq_0_then_la1
  cpx #0
  bne main__B2_from_B2
B3:
  jsr flip
B17:
  jsr plot
B18:
  // if(true) goto main::@2  //  true_then_la1
  jmp main__B2_from_B18
main__Breturn:
  rts
plot:
plot__B1_from_plot:
  // (byte) plot::y#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 100
  // (byte) plot::i#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte*) plot::line#2 = (word) 1236  // zpptrby1=cowo1
  lda #<1236
  sta 101
  lda #>1236
  sta 101+1
plot__B1_from_B12:
  // (byte) plot::y#2 = (byte) plot::y#1  // register copy 
  // (byte) plot::i#3 = (byte) plot::i#1  // register copy 
  // (byte*) plot::line#2 = (byte*) plot::line#1  // register copy 
plot__B1:
plot__B2_from_B1:
  // (byte) plot::x#2 = (byte) 0  // yby=coby1
  ldy #0
  // (byte) plot::i#2 = (byte) plot::i#3  // register copy 
plot__B2_from_B2:
  // (byte) plot::x#2 = (byte) plot::x#1  // register copy 
  // (byte) plot::i#2 = (byte) plot::i#1  // register copy 
plot__B2:
  // (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3  //  ptr_zpptrby1_yby=aby
  sta (101),y
  // (byte) plot::i#1 ← ++ (byte) plot::i#2  //  xby=_inc_xby
  inx
  // (byte) plot::x#1 ← ++ (byte) plot::x#2  //  yby=_inc_yby
  iny
  // if((byte) plot::x#1<(byte) 16) goto plot::@2  //  yby_lt_coby1_then_la1
  cpy #16
  bcc plot__B2_from_B2
B12:
  // (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40  //  zpptrby1=zpptrby1_plus_coby1
  lda 101
  clc
  adc #40
  sta 101
  bcc !+
  inc 101+1
!:
  // (byte) plot::y#1 ← -- (byte) plot::y#2  //  zpby1=_dec_zpby1
  dec 100
  // if((byte) plot::y#1!=(byte) 0) goto plot::@1  //  zpby1_neq_0_then_la1
  lda 100
  bne plot__B1_from_B12
plot__Breturn:
  rts
flip:
flip__B1_from_flip:
  // (byte) flip::r#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 104
  // (byte) flip::srcIdx#3 = (byte) 0  // xby=coby1
  ldx #0
  // (byte) flip::dstIdx#5 = (byte) 15  // yby=coby1
  ldy #15
flip__B1_from_B8:
  // (byte) flip::r#2 = (byte) flip::r#1  // register copy 
  // (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1  // register copy 
  // (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2  // register copy 
flip__B1:
flip__B2_from_B1:
  // (byte) flip::c#2 = (byte) 16  // zpby1=coby1
  lda #16
  sta 103
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3  // register copy 
flip__B2_from_B2:
  // (byte) flip::c#2 = (byte) flip::c#1  // register copy 
  // (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1  // register copy 
  // (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1  // register copy 
flip__B2:
  // (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2  //  aby=cowo1_staridx_xby
  lda 4096,x
  // *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0  //  ptr_cowo1_yby=aby
  sta 4352,y
  // (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2  //  xby=_inc_xby
  inx
  // (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16  //  yby=yby_plus_coby1
  tya
  clc
  adc #16
  tay
  // (byte) flip::c#1 ← -- (byte) flip::c#2  //  zpby1=_dec_zpby1
  dec 103
  // if((byte) flip::c#1!=(byte) 0) goto flip::@2  //  zpby1_neq_0_then_la1
  lda 103
  bne flip__B2_from_B2
B8:
  // (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1  //  yby=_dec_yby
  dey
  // (byte) flip::r#1 ← -- (byte) flip::r#2  //  zpby1=_dec_zpby1
  dec 104
  // if((byte) flip::r#1!=(byte) 0) goto flip::@1  //  zpby1_neq_0_then_la1
  lda 104
  bne flip__B1_from_B8
flip__B3_from_B8:
  // (byte) flip::i#2 = (byte) 0  // xby=coby1
  ldx #0
flip__B3_from_B3:
  // (byte) flip::i#2 = (byte) flip::i#1  // register copy 
flip__B3:
  // (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2  //  aby=cowo1_staridx_xby
  lda 4352,x
  // *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4  //  ptr_cowo1_xby=aby
  sta 4096,x
  // (byte) flip::i#1 ← ++ (byte) flip::i#2  //  xby=_inc_xby
  inx
  // if((byte) flip::i#1!=(byte) 0) goto flip::@3  //  xby_neq_0_then_la1
  cpx #0
  bne flip__B3_from_B3
flip__Breturn:
  rts
prepare:
prepare__B1_from_prepare:
  // (byte) prepare::i#2 = (byte) 0  // xby=coby1
  ldx #0
prepare__B1_from_B1:
  // (byte) prepare::i#2 = (byte) prepare::i#1  // register copy 
prepare__B1:
  // *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2  //  ptr_cowo1_xby=xby
  txa
  sta 4096,x
  // (byte) prepare::i#1 ← ++ (byte) prepare::i#2  //  xby=_inc_xby
  inx
  // if((byte) prepare::i#1!=(byte) 0) goto prepare::@1  //  xby_neq_0_then_la1
  cpx #0
  bne prepare__B1_from_B1
prepare__Breturn:
  rts

