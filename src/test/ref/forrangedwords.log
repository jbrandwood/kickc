Identified constant variable (byte*) main::SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (word) main::w#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (word) main::w#2 ← phi( main/(word) main::w#0 main::@1/(word) main::w#1 )
  (byte~) main::$0 ← < (word) main::w#2
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) main::$0
  (byte~) main::$1 ← > (word) main::w#2
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$1
  (word) main::w#1 ← (word) main::w#2 + rangenext(0,$ffff)
  (bool~) main::$2 ← (word) main::w#1 != rangelast(0,$ffff)
  if((bool~) main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word/signed dword~) main::$3 ← - (word/signed word/dword/signed dword) $7fff
  (signed word) main::sw#0 ← (signed word/signed dword~) main::$3
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (signed word) main::sw#2 ← phi( main::@2/(signed word) main::sw#0 main::@3/(signed word) main::sw#1 )
  (byte~) main::$4 ← < (signed word) main::sw#2
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$4
  (byte~) main::$5 ← > (signed word) main::sw#2
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte~) main::$5
  (signed word) main::sw#1 ← (signed word) main::sw#2 + rangenext(main::$3,$7ffe)
  (bool~) main::$6 ← (signed word) main::sw#1 != rangelast(main::$3,$7ffe)
  if((bool~) main::$6) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte~) main::$1
(bool~) main::$2
(signed word/signed dword~) main::$3
(byte~) main::$4
(byte~) main::$5
(bool~) main::$6
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(signed word) main::sw
(signed word) main::sw#0
(signed word) main::sw#1
(signed word) main::sw#2
(word) main::w
(word) main::w#0
(word) main::w#1
(word) main::w#2

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Alias (signed word) main::sw#0 = (signed word/signed dword~) main::$3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$2 [9] if((word) main::w#1!=rangelast(0,$ffff)) goto main::@1
Simple Condition (bool~) main::$6 [19] if((signed word) main::sw#1!=rangelast(main::sw#0,$7ffe)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::SCREEN#0 = ((byte*))$400
Constant (const word) main::w#0 = 0
Constant (const signed word) main::sw#0 = -$7fff
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN#0+0)
Consolidated array index constant in *(main::SCREEN#0+1)
Consolidated array index constant in *(main::SCREEN#0+3)
Consolidated array index constant in *(main::SCREEN#0+4)
Successful SSA optimization Pass2ConstantAdditionElimination
Resolved ranged next value main::w#1 ← ++ main::w#2 to ++
Resolved ranged comparison value if(main::w#1!=rangelast(0,$ffff)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value main::sw#1 ← ++ main::sw#2 to ++
Resolved ranged comparison value if(main::sw#1!=rangelast(main::sw#0,$7ffe)) goto main::@3 to (word/signed word/dword/signed dword) $7fff
Culled Empty Block (label) main::@2
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const word) main::w#0
Inlining constant with var siblings (const signed word) main::sw#0
Constant inlined main::w#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::sw#0 = -(word/signed word/dword/signed dword) $7fff
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero main::SCREEN#0+0
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [20] main::sw#3 ← main::sw#1
Coalesced [21] main::w#3 ← main::w#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (word) main::w#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(word) main::w#1 )
  [6] (byte~) main::$0 ← < (word) main::w#2
  [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$0
  [8] (byte~) main::$1 ← > (word) main::w#2
  [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$1
  [10] (word) main::w#1 ← ++ (word) main::w#2
  [11] if((word) main::w#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3
  [12] (signed word) main::sw#2 ← phi( main::@1/-(word/signed word/dword/signed dword) $7fff main::@3/(signed word) main::sw#1 )
  [13] (byte~) main::$4 ← < (signed word) main::sw#2
  [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$4
  [15] (byte~) main::$5 ← > (signed word) main::sw#2
  [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte~) main::$5
  [17] (signed word) main::sw#1 ← ++ (signed word) main::sw#2
  [18] if((signed word) main::sw#1!=(word/signed word/dword/signed dword) $7fff) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  [19] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 22.0
(byte~) main::$1 22.0
(byte~) main::$4 22.0
(byte~) main::$5 22.0
(byte*) main::SCREEN
(signed word) main::sw
(signed word) main::sw#1 16.5
(signed word) main::sw#2 8.8
(word) main::w
(word) main::w#1 16.5
(word) main::w#2 8.8

Initial phi equivalence classes
[ main::w#2 main::w#1 ]
[ main::sw#2 main::sw#1 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Complete equivalence classes
[ main::w#2 main::w#1 ]
[ main::sw#2 main::sw#1 ]
[ main::$0 ]
[ main::$1 ]
[ main::$4 ]
[ main::$5 ]
Allocated zp ZP_WORD:2 [ main::w#2 main::w#1 ]
Allocated zp ZP_WORD:4 [ main::sw#2 main::sw#1 ]
Allocated zp ZP_BYTE:6 [ main::$0 ]
Allocated zp ZP_BYTE:7 [ main::$1 ]
Allocated zp ZP_BYTE:8 [ main::$4 ]
Allocated zp ZP_BYTE:9 [ main::$5 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
    .label _0 = 6
    .label _1 = 7
    .label _4 = 8
    .label _5 = 9
    .label w = 2
    .label sw = 4
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (word) main::w#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta w
    lda #0
    sta w+1
    jmp b1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (word) main::w#2 = (word) main::w#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte~) main::$0 ← < (word) main::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta _0
  //SEG17 [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$0 -- _deref_pbuc1=vbuz1 
    lda _0
    sta SCREEN
  //SEG18 [8] (byte~) main::$1 ← > (word) main::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta _1
  //SEG19 [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuz1 
    lda _1
    sta SCREEN+1
  //SEG20 [10] (word) main::w#1 ← ++ (word) main::w#2 -- vwuz1=_inc_vwuz1 
    inc w
    bne !+
    inc w+1
  !:
  //SEG21 [11] if((word) main::w#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vwuz1_neq_0_then_la1 
    lda w
    bne b1_from_b1
    lda w+1
    bne b1_from_b1
  //SEG22 [12] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
  //SEG23 [12] phi (signed word) main::sw#2 = -(word/signed word/dword/signed dword) $7fff [phi:main::@1->main::@3#0] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta sw
    lda #>-$7fff
    sta sw+1
    jmp b3
  //SEG24 [12] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG25 [12] phi (signed word) main::sw#2 = (signed word) main::sw#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp b3
  //SEG26 main::@3
  b3:
  //SEG27 [13] (byte~) main::$4 ← < (signed word) main::sw#2 -- vbuz1=_lo_vwsz2 
    lda sw
    sta _4
  //SEG28 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$4 -- _deref_pbuc1=vbuz1 
    lda _4
    sta SCREEN+3
  //SEG29 [15] (byte~) main::$5 ← > (signed word) main::sw#2 -- vbuz1=_hi_vwsz2 
    lda sw+1
    sta _5
  //SEG30 [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte~) main::$5 -- _deref_pbuc1=vbuz1 
    lda _5
    sta SCREEN+4
  //SEG31 [17] (signed word) main::sw#1 ← ++ (signed word) main::sw#2 -- vwsz1=_inc_vwsz1 
    inc sw
    bne !+
    inc sw+1
  !:
  //SEG32 [18] if((signed word) main::sw#1!=(word/signed word/dword/signed dword) $7fff) goto main::@3 -- vwsz1_neq_vwuc1_then_la1 
    lda sw+1
    cmp #>$7fff
    bne b3_from_b3
    lda sw
    cmp #<$7fff
    bne b3_from_b3
    jmp breturn
  //SEG33 main::@return
  breturn:
  //SEG34 [19] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte~) main::$0 ← < (word) main::w#2 [ main::w#2 main::$0 ] ( main:2 [ main::w#2 main::$0 ] ) always clobbers reg byte a 
Statement [8] (byte~) main::$1 ← > (word) main::w#2 [ main::w#2 main::$1 ] ( main:2 [ main::w#2 main::$1 ] ) always clobbers reg byte a 
Statement [11] if((word) main::w#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::w#1 ] ( main:2 [ main::w#1 ] ) always clobbers reg byte a 
Statement [13] (byte~) main::$4 ← < (signed word) main::sw#2 [ main::sw#2 main::$4 ] ( main:2 [ main::sw#2 main::$4 ] ) always clobbers reg byte a 
Statement [15] (byte~) main::$5 ← > (signed word) main::sw#2 [ main::sw#2 main::$5 ] ( main:2 [ main::sw#2 main::$5 ] ) always clobbers reg byte a 
Statement [18] if((signed word) main::sw#1!=(word/signed word/dword/signed dword) $7fff) goto main::@3 [ main::sw#1 ] ( main:2 [ main::sw#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::w#2 main::w#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ main::sw#2 main::sw#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ main::$0 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::$4 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ main::$5 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 25.3: zp ZP_WORD:2 [ main::w#2 main::w#1 ] 25.3: zp ZP_WORD:4 [ main::sw#2 main::sw#1 ] 22: zp ZP_BYTE:6 [ main::$0 ] 22: zp ZP_BYTE:7 [ main::$1 ] 22: zp ZP_BYTE:8 [ main::$4 ] 22: zp ZP_BYTE:9 [ main::$5 ] 
Uplift Scope [] 

Uplifting [main] best 1158 combination zp ZP_WORD:2 [ main::w#2 main::w#1 ] zp ZP_WORD:4 [ main::sw#2 main::sw#1 ] reg byte a [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$4 ] reg byte a [ main::$5 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [] best 1158 combination 
Coalescing zero page register [ zp ZP_WORD:2 [ main::w#2 main::w#1 ] ] with [ zp ZP_WORD:4 [ main::sw#2 main::sw#1 ] ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label SCREEN = $400
    .label w = 2
    .label sw = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (word) main::w#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta w
    lda #0
    sta w+1
    jmp b1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (word) main::w#2 = (word) main::w#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte~) main::$0 ← < (word) main::w#2 -- vbuaa=_lo_vwuz1 
    lda w
  //SEG17 [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
  //SEG18 [8] (byte~) main::$1 ← > (word) main::w#2 -- vbuaa=_hi_vwuz1 
    lda w+1
  //SEG19 [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
  //SEG20 [10] (word) main::w#1 ← ++ (word) main::w#2 -- vwuz1=_inc_vwuz1 
    inc w
    bne !+
    inc w+1
  !:
  //SEG21 [11] if((word) main::w#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vwuz1_neq_0_then_la1 
    lda w
    bne b1_from_b1
    lda w+1
    bne b1_from_b1
  //SEG22 [12] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
  //SEG23 [12] phi (signed word) main::sw#2 = -(word/signed word/dword/signed dword) $7fff [phi:main::@1->main::@3#0] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta sw
    lda #>-$7fff
    sta sw+1
    jmp b3
  //SEG24 [12] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG25 [12] phi (signed word) main::sw#2 = (signed word) main::sw#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp b3
  //SEG26 main::@3
  b3:
  //SEG27 [13] (byte~) main::$4 ← < (signed word) main::sw#2 -- vbuaa=_lo_vwsz1 
    lda sw
  //SEG28 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+3
  //SEG29 [15] (byte~) main::$5 ← > (signed word) main::sw#2 -- vbuaa=_hi_vwsz1 
    lda sw+1
  //SEG30 [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte~) main::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+4
  //SEG31 [17] (signed word) main::sw#1 ← ++ (signed word) main::sw#2 -- vwsz1=_inc_vwsz1 
    inc sw
    bne !+
    inc sw+1
  !:
  //SEG32 [18] if((signed word) main::sw#1!=(word/signed word/dword/signed dword) $7fff) goto main::@3 -- vwsz1_neq_vwuc1_then_la1 
    lda sw+1
    cmp #>$7fff
    bne b3_from_b3
    lda sw
    cmp #<$7fff
    bne b3_from_b3
    jmp breturn
  //SEG33 main::@return
  breturn:
  //SEG34 [19] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b3_from_b3 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b3_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0 reg byte a 22.0
(byte~) main::$1 reg byte a 22.0
(byte~) main::$4 reg byte a 22.0
(byte~) main::$5 reg byte a 22.0
(label) main::@1
(label) main::@3
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(signed word) main::sw
(signed word) main::sw#1 sw zp ZP_WORD:2 16.5
(signed word) main::sw#2 sw zp ZP_WORD:2 8.8
(word) main::w
(word) main::w#1 w zp ZP_WORD:2 16.5
(word) main::w#2 w zp ZP_WORD:2 8.8

zp ZP_WORD:2 [ main::w#2 main::w#1 main::sw#2 main::sw#1 ]
reg byte a [ main::$0 ]
reg byte a [ main::$1 ]
reg byte a [ main::$4 ]
reg byte a [ main::$5 ]


FINAL ASSEMBLER
Score: 976

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label SCREEN = $400
    .label w = 2
    .label sw = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (word) main::w#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta w
    sta w+1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG14 [5] phi (word) main::w#2 = (word) main::w#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] (byte~) main::$0 ← < (word) main::w#2 -- vbuaa=_lo_vwuz1 
    lda w
  //SEG17 [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
  //SEG18 [8] (byte~) main::$1 ← > (word) main::w#2 -- vbuaa=_hi_vwuz1 
    lda w+1
  //SEG19 [9] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
  //SEG20 [10] (word) main::w#1 ← ++ (word) main::w#2 -- vwuz1=_inc_vwuz1 
    inc w
    bne !+
    inc w+1
  !:
  //SEG21 [11] if((word) main::w#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vwuz1_neq_0_then_la1 
    lda w
    bne b1
    lda w+1
    bne b1
  //SEG22 [12] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  //SEG23 [12] phi (signed word) main::sw#2 = -(word/signed word/dword/signed dword) $7fff [phi:main::@1->main::@3#0] -- vwsz1=vwsc1 
    lda #<-$7fff
    sta sw
    lda #>-$7fff
    sta sw+1
  //SEG24 [12] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG25 [12] phi (signed word) main::sw#2 = (signed word) main::sw#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG26 main::@3
  b3:
  //SEG27 [13] (byte~) main::$4 ← < (signed word) main::sw#2 -- vbuaa=_lo_vwsz1 
    lda sw
  //SEG28 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$4 -- _deref_pbuc1=vbuaa 
    sta SCREEN+3
  //SEG29 [15] (byte~) main::$5 ← > (signed word) main::sw#2 -- vbuaa=_hi_vwsz1 
    lda sw+1
  //SEG30 [16] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte~) main::$5 -- _deref_pbuc1=vbuaa 
    sta SCREEN+4
  //SEG31 [17] (signed word) main::sw#1 ← ++ (signed word) main::sw#2 -- vwsz1=_inc_vwsz1 
    inc sw
    bne !+
    inc sw+1
  !:
  //SEG32 [18] if((signed word) main::sw#1!=(word/signed word/dword/signed dword) $7fff) goto main::@3 -- vwsz1_neq_vwuc1_then_la1 
    lda sw+1
    cmp #>$7fff
    bne b3
    lda sw
    cmp #<$7fff
    bne b3
  //SEG33 main::@return
  //SEG34 [19] return 
    rts
}

