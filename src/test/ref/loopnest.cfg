@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ] ( )
main: scope:[main]  from @2
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 100 main::@3/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [6] call nest  [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [8] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return  [ ] ( main:2 [ ] )
  to:@return
nest: scope:[nest]  from main::@1
  [10] phi() [ ] ( main:2::nest:6 [ main::i#2 ] )
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  [11] (byte) nest::j#2 ← phi( nest/(byte/signed byte/word/signed word/dword/signed dword) 100 nest::@1/(byte) nest::j#1 ) [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] )
  [12] *((const byte*) SCREEN#0) ← (byte) nest::j#2 [ nest::j#2 ] ( main:2::nest:6 [ main::i#2 nest::j#2 ] )
  [13] (byte) nest::j#1 ← -- (byte) nest::j#2 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] )
  [14] if((byte) nest::j#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto nest::@1 [ nest::j#1 ] ( main:2::nest:6 [ main::i#2 nest::j#1 ] )
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [15] return  [ ] ( main:2::nest:6 [ main::i#2 ] )
  to:@return
