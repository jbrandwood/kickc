@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const nomodify byte*) PROCPORT_DDR) ← (const nomodify byte) PROCPORT_DDR_MEMORY_MASK
  [6] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_IO
  [7] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [8] *((const nomodify byte*) VIC_CONTROL) ← *((const nomodify byte*) VIC_CONTROL) | (byte) $80
  [9] *((const nomodify byte*) RASTER) ← (byte) 0
  [10] *((const nomodify byte*) IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [11] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_CLOBBER)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [13] *((const nomodify byte*) BORDER_COLOR) ← ++ *((const nomodify byte*) BORDER_COLOR)
  to:main::@1

interrupt(HARDWARE_CLOBBER)(void()) irq()
irq: scope:[irq]  from
  [14] phi()
  [15] call do_irq 
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [16] return 
  to:@return

(void()) do_irq()
do_irq: scope:[do_irq]  from irq
  [17] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE
  [18] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  [19] *((const nomodify byte*) IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  to:do_irq::@return
do_irq::@return: scope:[do_irq]  from do_irq
  [20] return 
  to:@return
