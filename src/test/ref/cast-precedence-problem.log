
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte~) main::$0 ← (const byte) main::min + (const byte) main::max
  (word) main::sumw#0 ← (byte~) main::$0
  (word~) main::$1 ← (word) main::sumw#0 >> (number) 1
  (byte~) main::$7 ← (byte)(word~) main::$1
  (number~) main::$2 ← (byte~) main::$7 + (number) 1
  (byte) main::midw#0 ← (number~) main::$2
  *((const byte*) main::SCREEN + (number) 0) ← (byte) main::midw#0
  (byte~) main::$3 ← (const byte) main::min + (const byte) main::max
  (byte) main::sumb#0 ← (byte~) main::$3
  (byte~) main::$4 ← (byte) main::sumb#0 >> (number) 1
  (number~) main::$5 ← (byte~) main::$4 + (number) 1
  (byte) main::midb#0 ← (number~) main::$5
  *((const byte*) main::SCREEN + (number) 1) ← (byte) main::midb#0
  (bool~) main::$6 ← *((const byte*) main::SCREEN + (number) 0) == *((const byte*) main::SCREEN + (number) 1)
  if((bool~) main::$6) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main
  *((const byte*) main::BG_COLOR) ← (number) 5
  to:main::@return
main::@2: scope:[main]  from main
  *((const byte*) main::BG_COLOR) ← (number) 2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte~) main::$0
(word~) main::$1
(number~) main::$2
(byte~) main::$3
(byte~) main::$4
(number~) main::$5
(bool~) main::$6
(byte~) main::$7
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::BG_COLOR = (byte*)(number) $d021
(const byte*) main::SCREEN = (byte*)(number) $400
(const byte) main::max = (byte) $c8
(byte) main::midb
(byte) main::midb#0
(byte) main::midw
(byte) main::midw#0
(const byte) main::min = (byte) $a
(byte) main::sumb
(byte) main::sumb#0
(word) main::sumw
(word) main::sumw#0

Adding number conversion cast (unumber) 1 in (word~) main::$1 ← (word) main::sumw#0 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$2 ← (byte~) main::$7 + (number) 1
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte~) main::$7 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((const byte*) main::SCREEN + (number) 0) ← (byte) main::midw#0
Adding number conversion cast (unumber) 1 in (byte~) main::$4 ← (byte) main::sumb#0 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$5 ← (byte~) main::$4 + (number) 1
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (byte~) main::$4 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in *((const byte*) main::SCREEN + (number) 1) ← (byte) main::midb#0
Adding number conversion cast (unumber) 0 in (bool~) main::$6 ← *((const byte*) main::SCREEN + (number) 0) == *((const byte*) main::SCREEN + (number) 1)
Adding number conversion cast (unumber) 1 in (bool~) main::$6 ← *((const byte*) main::SCREEN + (unumber)(number) 0) == *((const byte*) main::SCREEN + (number) 1)
Adding number conversion cast (unumber) 5 in *((const byte*) main::BG_COLOR) ← (number) 5
Adding number conversion cast (unumber) 2 in *((const byte*) main::BG_COLOR) ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const byte*) main::BG_COLOR) ← (unumber)(number) 5
Inlining cast *((const byte*) main::BG_COLOR) ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$2 ← (byte~) main::$7 + (byte) 1
Inferred type updated to byte in (unumber~) main::$5 ← (byte~) main::$4 + (byte) 1
Alias main::sumw#0 = main::$0 
Alias main::midw#0 = main::$2 
Alias main::sumb#0 = main::$3 
Alias main::midb#0 = main::$5 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$6 [10] if(*((const byte*) main::SCREEN + (byte) 0)==*((const byte*) main::SCREEN + (byte) 1)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (word) main::sumw#0 ← (const byte) main::min + (const byte) main::max
Constant right-side identified [5] (byte) main::sumb#0 ← (const byte) main::min + (const byte) main::max
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::sumw#0 = main::min+main::max
Constant (const byte) main::sumb#0 = main::min+main::max
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [4] *((const byte*) main::SCREEN + (byte) 0) ← (byte) main::midw#0
Simplifying expression containing zero main::SCREEN in [10] if(*((const byte*) main::SCREEN + (byte) 0)==*((const byte*) main::SCREEN + (byte) 1)) goto main::@1
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [0] (word~) main::$1 ← (const word) main::sumw#0 >> (byte) 1
Constant right-side identified [4] (byte~) main::$4 ← (const byte) main::sumb#0 >> (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::$1 = main::sumw#0>>1
Constant (const byte) main::$4 = main::sumb#0>>1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$7 = (byte)main::$1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte) main::midw#0 ← (const byte) main::$7 + (byte) 1
Constant right-side identified [2] (byte) main::midb#0 ← (const byte) main::$4 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::midw#0 = main::$7+1
Constant (const byte) main::midb#0 = main::$4+1
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$4 = (const byte) main::sumb#0>>(byte) 1
Constant inlined main::$1 = (const word) main::sumw#0>>(byte) 1
Constant inlined main::$7 = (byte)(const word) main::sumw#0>>(byte) 1
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::SCREEN) ← (const byte) main::midw#0
  [1] *((const byte*) main::SCREEN+(byte) 1) ← (const byte) main::midb#0
  [2] if(*((const byte*) main::SCREEN)==*((const byte*) main::SCREEN+(byte) 1)) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main
  [3] *((const byte*) main::BG_COLOR) ← (byte) 2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  [4] return 
  to:@return
main::@1: scope:[main]  from main
  [5] *((const byte*) main::BG_COLOR) ← (byte) 5
  to:main::@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::midb
(byte) main::midw
(byte) main::sumb
(word) main::sumw

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that casting inside constants in the output handles precedence between cast and + correctly - should generate the following KA-expression ($ff & sumw>>1)+1
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const min = $a
    .const max = $c8
    .const sumw = min+max
    .const sumb = min+max
    .const midw = (sumw>>1)+1
    .const midb = (sumb>>1)+1
    .label SCREEN = $400
    .label BG_COLOR = $d021
    // [0] *((const byte*) main::SCREEN) ← (const byte) main::midw#0 -- _deref_pbuc1=vbuc2 
    lda #midw
    sta SCREEN
    // [1] *((const byte*) main::SCREEN+(byte) 1) ← (const byte) main::midb#0 -- _deref_pbuc1=vbuc2 
    lda #midb
    sta SCREEN+1
    // [2] if(*((const byte*) main::SCREEN)==*((const byte*) main::SCREEN+(byte) 1)) goto main::@1 -- _deref_pbuc1_eq__deref_pbuc2_then_la1 
    lda SCREEN
    cmp SCREEN+1
    beq __b1
    jmp __b2
    // main::@2
  __b2:
    // [3] *((const byte*) main::BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@1
  __b1:
    // [5] *((const byte*) main::BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    jmp __breturn
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::SCREEN) ← (const byte) main::midw#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) main::SCREEN+(byte) 1) ← (const byte) main::midb#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] if(*((const byte*) main::SCREEN)==*((const byte*) main::SCREEN+(byte) 1)) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const byte*) main::BG_COLOR) ← (byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const byte*) main::BG_COLOR) ← (byte) 5 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 49 combination 
Uplifting [] best 49 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that casting inside constants in the output handles precedence between cast and + correctly - should generate the following KA-expression ($ff & sumw>>1)+1
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const min = $a
    .const max = $c8
    .const sumw = min+max
    .const sumb = min+max
    .const midw = (sumw>>1)+1
    .const midb = (sumb>>1)+1
    .label SCREEN = $400
    .label BG_COLOR = $d021
    // [0] *((const byte*) main::SCREEN) ← (const byte) main::midw#0 -- _deref_pbuc1=vbuc2 
    lda #midw
    sta SCREEN
    // [1] *((const byte*) main::SCREEN+(byte) 1) ← (const byte) main::midb#0 -- _deref_pbuc1=vbuc2 
    lda #midb
    sta SCREEN+1
    // [2] if(*((const byte*) main::SCREEN)==*((const byte*) main::SCREEN+(byte) 1)) goto main::@1 -- _deref_pbuc1_eq__deref_pbuc2_then_la1 
    lda SCREEN
    cmp SCREEN+1
    beq __b1
    jmp __b2
    // main::@2
  __b2:
    // [3] *((const byte*) main::BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@1
  __b1:
    // [5] *((const byte*) main::BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    jmp __breturn
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::BG_COLOR = (byte*) 53281
(const byte*) main::SCREEN = (byte*) 1024
(const byte) main::max = (byte) $c8
(byte) main::midb
(const byte) main::midb#0 midb = (const byte) main::sumb#0>>(byte) 1+(byte) 1
(byte) main::midw
(const byte) main::midw#0 midw = (byte)(const word) main::sumw#0>>(byte) 1+(byte) 1
(const byte) main::min = (byte) $a
(byte) main::sumb
(const byte) main::sumb#0 sumb = (const byte) main::min+(const byte) main::max
(word) main::sumw
(const word) main::sumw#0 sumw = (const byte) main::min+(const byte) main::max



FINAL ASSEMBLER
Score: 46

  // File Comments
// Tests that casting inside constants in the output handles precedence between cast and + correctly - should generate the following KA-expression ($ff & sumw>>1)+1
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const min = $a
    .const max = $c8
    .const sumw = min+max
    .const sumb = min+max
    .const midw = (sumw>>1)+1
    .const midb = (sumb>>1)+1
    .label SCREEN = $400
    .label BG_COLOR = $d021
    // SCREEN[0] = midw
    // [0] *((const byte*) main::SCREEN) ← (const byte) main::midw#0 -- _deref_pbuc1=vbuc2 
    lda #midw
    sta SCREEN
    // SCREEN[1] = midb
    // [1] *((const byte*) main::SCREEN+(byte) 1) ← (const byte) main::midb#0 -- _deref_pbuc1=vbuc2 
    lda #midb
    sta SCREEN+1
    // if(SCREEN[0]==SCREEN[1])
    // [2] if(*((const byte*) main::SCREEN)==*((const byte*) main::SCREEN+(byte) 1)) goto main::@1 -- _deref_pbuc1_eq__deref_pbuc2_then_la1 
    lda SCREEN
    cmp SCREEN+1
    beq __b1
    // main::@2
    // *BG_COLOR = 2
    // [3] *((const byte*) main::BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // main::@return
    // }
    // [4] return 
    rts
    // main::@1
  __b1:
    // *BG_COLOR = 5
    // [5] *((const byte*) main::BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    rts
}
  // File Data

