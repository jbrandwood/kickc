word $0::x_position
word $0::x_velocity
word $0::y_position
word $0::y_velocity
const struct RICOH_2A03* APU = (struct RICOH_2A03*) 16384
const nomodify byte* FR_COUNTER = (byte*) 16407
const nomodify byte* MEMORY = (byte*) 0
const byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
const byte OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
const byte OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
const byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
const byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
const byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
const byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
const byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
const byte OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
const byte OFFSET_STRUCT_SPRITEDATA_TILE = 1
const byte OFFSET_STRUCT_SPRITEDATA_X = 3
const struct RICOH_2C02* PPU = (struct RICOH_2C02*) 8192
const nomodify byte* PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
const nomodify byte* PPU_NAME_TABLE_0 = (byte*) 8192
const nomodify byte* PPU_PALETTE = (byte*) 16128
const nomodify to_volatile byte* PPU_PPUSTATUS = (byte*) 8194
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
byte RICOH_2A03::DMC_FREQ
byte RICOH_2A03::DMC_LEN
byte RICOH_2A03::DMC_RAW
byte RICOH_2A03::DMC_START
byte RICOH_2A03::JOY1
byte RICOH_2A03::JOY2
byte RICOH_2A03::NOISE_HI
byte RICOH_2A03::NOISE_LO
byte RICOH_2A03::NOISE_VOL
byte RICOH_2A03::OAMDMA
byte RICOH_2A03::SND_CHN
byte RICOH_2A03::SQ1_HI
byte RICOH_2A03::SQ1_LO
byte RICOH_2A03::SQ1_SWEEP
byte RICOH_2A03::SQ1_VOL
byte RICOH_2A03::SQ2_HI
byte RICOH_2A03::SQ2_LO
byte RICOH_2A03::SQ2_SWEEP
byte RICOH_2A03::SQ2_VOL
byte RICOH_2A03::TRI_HI
byte RICOH_2A03::TRI_LINEAR
byte RICOH_2A03::TRI_LO
byte RICOH_2A03::UNUSED1
byte RICOH_2A03::UNUSED2
byte RICOH_2C02::OAMADDR
byte RICOH_2C02::OAMDATA
byte RICOH_2C02::PPUADDR
byte RICOH_2C02::PPUCTRL
byte RICOH_2C02::PPUDATA
byte RICOH_2C02::PPUMASK
byte RICOH_2C02::PPUSCROLL
volatile byte RICOH_2C02::PPUSTATUS loadstore
const byte SIZEOF_BYTE = 1
const struct SpriteData* SPRITE_BUFFER[$100]  = { fill( $100, 0) }
byte SpriteData::attributes
byte SpriteData::tile
byte SpriteData::x
byte SpriteData::y
const byte* TILES[]  = kickasm {{ .import binary "lazydata.chr"
 }}
const to_nomodify void()** VECTORS[]  = { &vblank, &main, (void()*) 0 }
void __start()
label __start::@1
label __start::@return
label __start::__init1
const struct $0* balls[$40]  = { fill( $40, 0) }
const to_nomodify byte* h_bar_tilemap[]  = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
signed word main()
word~ main::$10 zp[2]:25 101.0
word~ main::$11 zp[2]:25 202.0
byte~ main::$12 reg byte a 202.0
byte~ main::$14 reg byte a 202.0
word~ main::$20 zp[2]:12 2002.0
word~ main::$23 zp[2]:14 667.3333333333334
word~ main::$25 zp[2]:16 667.3333333333334
byte~ main::$26 zp[1]:18 1001.0
byte~ main::$30 reg byte a 1001.0
word~ main::$31 zp[2]:19 2002.0
word~ main::$32 zp[2]:21 500.5
word~ main::$33 zp[2]:23 1001.0
byte~ main::$36 reg byte y 50.5
byte~ main::$38 reg byte x 151.5
byte~ main::$44 reg byte y 864.5
byte~ main::$48 reg byte x 1001.0
word~ main::$56 zp[2]:19 2002.0
word~ main::$9 zp[2]:25 202.0
label main::@1
label main::@10
label main::@11
label main::@12
label main::@13
label main::@14
label main::@15
label main::@16
label main::@17
label main::@18
label main::@19
label main::@2
label main::@20
label main::@21
label main::@22
label main::@23
label main::@24
label main::@25
label main::@3
label main::@4
label main::@5
label main::@6
label main::@7
label main::@8
label main::@9
byte main::active_balls
byte main::active_balls#1 active_balls zp[1]:3 75.75
byte main::active_balls#2 active_balls zp[1]:3 56.11111111111111
byte main::active_balls#8 active_balls zp[1]:3 42.57575757575758
label main::enableVideoOutput1
byte main::h_bar
byte main::h_bar#1 h_bar zp[1]:11 80.125
byte main::i
byte main::i#10 i zp[1]:5 148.2962962962963
byte main::i#14 reg byte x 28.857142857142858
byte main::i#2 reg byte x 202.0
byte main::i#4 i zp[1]:5 2002.0
label main::initNES1
label main::initNES1_@1
label main::initNES1_@7
label main::initNES1_clearVBlankFlag1
label main::initNES1_disableAudioOutput1
label main::initNES1_disableVideoOutput1
byte main::initNES1_i
byte main::initNES1_i#1 reg byte x 151.5
byte main::initNES1_i#2 reg byte x 112.22222222222223
label main::initNES1_waitForVBlank1
byte~ main::initNES1_waitForVBlank1_$0 reg byte a 202.0
label main::initNES1_waitForVBlank1_@1
label main::initNES1_waitForVBlank2
byte~ main::initNES1_waitForVBlank2_$0 reg byte a 202.0
label main::initNES1_waitForVBlank2_@1
signed word main::return
byte main::sprite_idx
byte main::sprite_idx#2 sprite_idx zp[1]:6 1001.0
byte main::sprite_idx#3 sprite_idx zp[1]:6 115.5
byte main::timer
byte main::timer#1 reg byte x 101.0
byte main::timer#15 timer zp[1]:4 9.181818181818182
byte main::timer#21 timer zp[1]:4 202.0
byte main::timer#3 timer zp[1]:4 57.714285714285715
byte main::timer_2
byte main::timer_2#1 timer_2 zp[1]:2 6.733333333333333
byte main::timer_2#2 timer_2 zp[1]:2 202.0
const to_nomodify byte* palette[]  = { $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4, $34, $24, $14, 4 }
void ppuDataFill(nomodify void* ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
label ppuDataFill::@1
label ppuDataFill::@2
label ppuDataFill::@return
word ppuDataFill::i
word ppuDataFill::i#1 i zp[2]:16 2002.0
word ppuDataFill::i#2 i zp[2]:16 1001.0
nomodify void* ppuDataFill::ppuData
label ppuDataFill::ppuDataPrepare1
byte~ ppuDataFill::ppuDataPrepare1_$0 reg byte a 202.0
byte~ ppuDataFill::ppuDataPrepare1_$1 reg byte a 202.0
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData
nomodify void* ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:12 67.33333333333333
label ppuDataFill::ppuDataPut1
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#3 size zp[2]:14 111.22222222222223
byte ppuDataFill::val
void ppuDataTransfer(nomodify void* ppuDataTransfer::ppuData , nomodify void* ppuDataTransfer::cpuData , word ppuDataTransfer::size)
label ppuDataTransfer::@1
label ppuDataTransfer::@2
label ppuDataTransfer::@3
label ppuDataTransfer::@4
label ppuDataTransfer::@return
nomodify void* ppuDataTransfer::cpuData
nomodify void* ppuDataTransfer::cpuData#2 cpuData zp[2]:14
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:14 1001.0
byte* ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:14 776.0
byte* ppuDataTransfer::cpuSrc#6 cpuSrc zp[2]:14 202.0
word ppuDataTransfer::i
word ppuDataTransfer::i#1 i zp[2]:16 2002.0
word ppuDataTransfer::i#2 i zp[2]:16 600.5999999999999
nomodify void* ppuDataTransfer::ppuData
label ppuDataTransfer::ppuDataPrepare1
byte~ ppuDataTransfer::ppuDataPrepare1_$0 reg byte a 202.0
byte~ ppuDataTransfer::ppuDataPrepare1_$1 reg byte a 202.0
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData
nomodify void* ppuDataTransfer::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:12 67.33333333333333
label ppuDataTransfer::ppuDataPut1
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
word ppuDataTransfer::size
const byte* printf_buffer_number::digits[$b]  = { fill( $b, 0) }
byte printf_buffer_number::sign
byte printf_format_number::justify_left
byte printf_format_number::min_length
byte printf_format_number::radix
byte printf_format_number::sign_always
byte printf_format_number::upper_case
byte printf_format_number::zero_padding
byte printf_format_string::justify_left
byte printf_format_string::min_length
word rand()
word~ rand::$0 zp[2]:27 2002.0
word~ rand::$1 zp[2]:29 2002.0
word~ rand::$2 zp[2]:31 2002.0
label rand::@return
word rand::return
word rand::return#0 return zp[2]:25 300.75
word rand::return#2 return zp[2]:25 202.0
word rand::return#3 return zp[2]:25 202.0
word rand_state
word rand_state#0 rand_state zp[2]:7 1501.5
word rand_state#1 rand_state zp[2]:7 1501.5
word rand_state#10 rand_state zp[2]:7 1102.0
word rand_state#11 rand_state zp[2]:7 146.93333333333334
word rand_state#17 rand_state zp[2]:7 67.33333333333333
volatile byte scroll_y loadstore zp[1]:9 105.0
const to_nomodify byte* sine_table[$100]  = { $40, $42, $43, $45, $46, $48, $49, $4b, $4c, $4e, $50, $51, $53, $54, $56, $57, $58, $5a, $5b, $5d, $5e, $60, $61, $62, $64, $65, $66, $67, $69, $6a, $6b, $6c, $6d, $6e, $6f, $70, $71, $72, $73, $74, $75, $76, $77, $78, $78, $79, $7a, $7b, $7b, $7c, $7c, $7d, $7d, $7e, $7e, $7e, $7f, $7f, $7f, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $7f, $7f, $7f, $7e, $7e, $7e, $7d, $7d, $7c, $7c, $7b, $7b, $7a, $79, $78, $78, $77, $76, $75, $74, $73, $72, $71, $70, $6f, $6e, $6d, $6c, $6b, $6a, $69, $67, $66, $65, $64, $62, $61, $60, $5e, $5d, $5b, $5a, $58, $57, $56, $54, $53, $51, $50, $4e, $4c, $4b, $49, $48, $46, $45, $43, $42, $40, $3e, $3d, $3b, $3a, $38, $37, $35, $34, $32, $30, $2f, $2d, $2c, $2a, $29, $28, $26, $25, $23, $22, $20, $1f, $1e, $1c, $1b, $1a, $19, $17, $16, $15, $14, $13, $12, $11, $10, $f, $e, $d, $c, $b, $a, 9, 8, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, $a, $b, $c, $d, $e, $f, $10, $11, $12, $13, $14, $15, $16, $17, $19, $1a, $1b, $1c, $1e, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2c, $2d, $2f, $30, $32, $34, $35, $37, $38, $3a, $3b, $3d, $3e }
interrupt(HARDWARE_STACK) void vblank()
label vblank::@1
label vblank::@return
label vblank::ppuSpriteBufferDmaTransfer1
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
volatile byte vblank_hit loadstore zp[1]:10 10.757281553398059

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::i#14 main::i#2 ]
zp[1]:2 [ main::timer_2#2 main::timer_2#1 ]
zp[1]:3 [ main::active_balls#2 main::active_balls#8 main::active_balls#1 ]
zp[1]:4 [ main::timer#3 main::timer#15 main::timer#21 ]
zp[1]:5 [ main::i#10 main::i#4 ]
zp[1]:6 [ main::sprite_idx#3 main::sprite_idx#2 ]
zp[2]:7 [ rand_state#10 rand_state#17 rand_state#11 rand_state#0 rand_state#1 ]
zp[1]:9 [ scroll_y ]
zp[1]:10 [ vblank_hit ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
zp[1]:11 [ main::h_bar#1 ]
reg byte a [ main::$14 ]
reg byte x [ main::timer#1 ]
reg byte x [ main::$38 ]
reg byte y [ main::$44 ]
zp[2]:12 [ main::$20 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::ppuDataPrepare1_ppuData#0 ]
zp[2]:14 [ main::$23 ppuDataFill::size#3 ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#6 ppuDataTransfer::cpuSrc#1 ]
zp[2]:16 [ main::$25 ppuDataFill::i#2 ppuDataFill::i#1 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[1]:18 [ main::$26 ]
reg byte a [ main::$30 ]
zp[2]:19 [ main::$56 main::$31 ]
zp[2]:21 [ main::$32 ]
reg byte x [ main::$48 ]
zp[2]:23 [ main::$33 ]
zp[2]:25 [ rand::return#2 main::$9 rand::return#0 main::$10 rand::return#3 main::$11 ]
reg byte y [ main::$36 ]
reg byte a [ main::$12 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataTransfer::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
zp[2]:27 [ rand::$0 ]
zp[2]:29 [ rand::$1 ]
zp[2]:31 [ rand::$2 ]
