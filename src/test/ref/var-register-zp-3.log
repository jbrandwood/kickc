Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  print2::at = screen
  print2::msg = main::msg
  call print2 
  to:main::@1
main::@1: scope:[main]  from main
  main::$1 = screen + $50
  print2::at = main::$1
  print2::msg = main::msg1
  call print2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void print2(byte* print2::at , byte* print2::msg)
print2: scope:[print2]  from main main::@1
  print2::j#0 = 0
  print2::i#0 = 0
  to:print2::@1
print2::@1: scope:[print2]  from print2 print2::@3
  print2::j#4 = phi( print2/print2::j#0, print2::@3/print2::j#1 )
  print2::i#2 = phi( print2/print2::i#0, print2::@3/print2::i#1 )
  print2::$1 = 0 != print2::msg[print2::i#2]
  if(print2::$1) goto print2::@2
  to:print2::@return
print2::@2: scope:[print2]  from print2::@1
  print2::i#3 = phi( print2::@1/print2::i#2 )
  print2::j#2 = phi( print2::@1/print2::j#4 )
  print_char::at = print2::at
  print_char::idx#0 = print2::j#2
  print_char::ch#0 = print2::msg[print2::i#3]
  call print_char 
  to:print2::@3
print2::@3: scope:[print2]  from print2::@2
  print2::i#4 = phi( print2::@2/print2::i#3 )
  print2::j#3 = phi( print2::@2/print2::j#2 )
  print2::j#1 = print2::j#3 + 2
  print2::i#1 = ++ print2::i#4
  to:print2::@1
print2::@return: scope:[print2]  from print2::@1
  return 
  to:@return

void print_char(byte* print_char::at , byte print_char::idx , byte print_char::ch)
print_char: scope:[print_char]  from print2::@2
  print_char::idx#1 = phi( print2::@2/print_char::idx#0 )
  print_char::ch#1 = phi( print2::@2/print_char::ch#0 )
  print_char::at[print_char::idx#1] = print_char::ch#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
byte*~ main::$1
const byte* main::msg[6]  = "hello"
const byte* main::msg1[6]  = "world"
void print2(byte* print2::at , byte* print2::msg)
bool~ print2::$1
byte* print2::at loadstore !zp[-1]:250
byte print2::i
byte print2::i#0
byte print2::i#1
byte print2::i#2
byte print2::i#3
byte print2::i#4
byte print2::j
byte print2::j#0
byte print2::j#1
byte print2::j#2
byte print2::j#3
byte print2::j#4
byte* print2::msg loadstore !zp[-1]:252
void print_char(byte* print_char::at , byte print_char::idx , byte print_char::ch)
byte* print_char::at loadstore !zp[-1]:250
byte print_char::ch !reg byte a
byte print_char::ch#0 !reg byte a
byte print_char::ch#1 !reg byte a
byte print_char::idx !reg byte x
byte print_char::idx#0 !reg byte x
byte print_char::idx#1 !reg byte x
const byte* screen = (byte*)$400

Adding number conversion cast (unumber) $50 in main::$1 = screen + $50
Adding number conversion cast (unumber) 0 in print2::$1 = 0 != print2::msg[print2::i#2]
Adding number conversion cast (unumber) 2 in print2::j#1 = print2::j#3 + 2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $50
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)print2::at = main::$1 
Alias print2::j#2 = print2::j#4 print2::j#3 
Alias print2::i#2 = print2::i#3 print2::i#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)print2::at = main::$1 
Simple Condition print2::$1 [12] if(0!=print2::msg[print2::i#2]) goto print2::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [3] main::$1 = screen + $50
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$1 = screen+$50
Constant print2::j#0 = 0
Constant print2::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print2::j#0
Inlining constant with var siblings print2::i#0
Constant inlined main::$1 = screen+$50
Constant inlined print2::j#0 = 0
Constant inlined print2::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print2
CALL GRAPH
Calls in [main] to print2:2 print2:5 
Calls in [print2] to print_char:17 

Created 4 initial phi equivalence classes
Coalesced [15] print_char::ch#2 = print_char::ch#0
Coalesced [16] print_char::idx#2 = print_char::idx#0
Coalesced [20] print2::i#5 = print2::i#1
Coalesced [21] print2::j#5 = print2::j#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of print2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] print2::at = screen
  [1] print2::msg = main::msg
  [2] call print2 
  to:main::@1
main::@1: scope:[main]  from main
  [3] print2::at = screen+$50
  [4] print2::msg = main::msg1
  [5] call print2 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return

void print2(byte* print2::at , byte* print2::msg)
print2: scope:[print2]  from main main::@1
  [7] phi()
  to:print2::@1
print2::@1: scope:[print2]  from print2 print2::@3
  [8] print2::j#2 = phi( print2/0, print2::@3/print2::j#1 )
  [8] print2::i#2 = phi( print2/0, print2::@3/print2::i#1 )
  [9] if(0!=print2::msg[print2::i#2]) goto print2::@2
  to:print2::@return
print2::@return: scope:[print2]  from print2::@1
  [10] return 
  to:@return
print2::@2: scope:[print2]  from print2::@1
  [11] print_char::at = print2::at
  [12] print_char::idx#0 = print2::j#2
  [13] print_char::ch#0 = print2::msg[print2::i#2]
  [14] call print_char 
  to:print2::@3
print2::@3: scope:[print2]  from print2::@2
  [15] print2::j#1 = print2::j#2 + 2
  [16] print2::i#1 = ++ print2::i#2
  to:print2::@1

void print_char(byte* print_char::at , byte print_char::idx , byte print_char::ch)
print_char: scope:[print_char]  from print2::@2
  [17] print_char::idx#1 = phi( print2::@2/print_char::idx#0 )
  [17] print_char::ch#1 = phi( print2::@2/print_char::ch#0 )
  [18] print_char::at[print_char::idx#1] = print_char::ch#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [19] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void print2(byte* print2::at , byte* print2::msg)
byte* print2::at loadstore !zp[-1]:250 8.076923076923077
byte print2::i
byte print2::i#1 202.0
byte print2::i#2 57.714285714285715
byte print2::j
byte print2::j#1 101.0
byte print2::j#2 50.5
byte* print2::msg loadstore !zp[-1]:252 18.727272727272727
void print_char(byte* print_char::at , byte print_char::idx , byte print_char::ch)
byte* print_char::at loadstore !zp[-1]:250 275.5
byte print_char::ch !reg byte a
byte print_char::ch#0 !reg byte a 202.0
byte print_char::ch#1 !reg byte a 1102.0
byte print_char::idx !reg byte x
byte print_char::idx#0 !reg byte x 101.0
byte print_char::idx#1 !reg byte x 1102.0

Initial phi equivalence classes
[ print2::i#2 print2::i#1 ]
[ print2::j#2 print2::j#1 ]
[ print_char::ch#1 print_char::ch#0 ]
[ print_char::idx#1 print_char::idx#0 ]
Added variable print2::at to live range equivalence class [ print2::at ]
Added variable print2::msg to live range equivalence class [ print2::msg ]
Added variable print_char::at to live range equivalence class [ print_char::at ]
Complete equivalence classes
[ print2::i#2 print2::i#1 ]
[ print2::j#2 print2::j#1 ]
[ print_char::ch#1 print_char::ch#0 ]
[ print_char::idx#1 print_char::idx#0 ]
[ print2::at ]
[ print2::msg ]
[ print_char::at ]
Allocated zp[1]:2 [ print2::i#2 print2::i#1 ]
Allocated zp[1]:3 [ print2::j#2 print2::j#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] print2::at = screen [ print2::at ] (  [ print2::at ] { }  ) always clobbers reg byte a 
Statement [1] print2::msg = main::msg [ print2::at print2::msg ] (  [ print2::at print2::msg ] { }  ) always clobbers reg byte a 
Statement [3] print2::at = screen+$50 [ print2::at ] (  [ print2::at ] { }  ) always clobbers reg byte a 
Statement [4] print2::msg = main::msg1 [ print2::at print2::msg ] (  [ print2::at print2::msg ] { }  ) always clobbers reg byte a 
Statement [9] if(0!=print2::msg[print2::i#2]) goto print2::@2 [ print2::at print2::msg print2::i#2 print2::j#2 ] ( print2:2 [ print2::at print2::msg print2::i#2 print2::j#2 ] { }  print2:5 [ print2::at print2::msg print2::i#2 print2::j#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ print2::i#2 print2::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ print2::j#2 print2::j#1 ]
Statement [13] print_char::ch#0 = print2::msg[print2::i#2] [ print2::at print2::msg print2::i#2 print2::j#2 print_char::at print_char::idx#0 print_char::ch#0 ] ( print2:2 [ print2::at print2::msg print2::i#2 print2::j#2 print_char::at print_char::idx#0 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  print2:5 [ print2::at print2::msg print2::i#2 print2::j#2 print_char::at print_char::idx#0 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  ) always clobbers reg byte a 
Statement [18] print_char::at[print_char::idx#1] = print_char::ch#1 [ ] ( print2:2::print_char:14 [ print2::at print2::msg print2::i#2 print2::j#2 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  print2:5::print_char:14 [ print2::at print2::msg print2::i#2 print2::j#2 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ print2::i#2 print2::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ print2::j#2 print2::j#1 ]
Statement [0] print2::at = screen [ print2::at ] (  [ print2::at ] { }  ) always clobbers reg byte a 
Statement [1] print2::msg = main::msg [ print2::at print2::msg ] (  [ print2::at print2::msg ] { }  ) always clobbers reg byte a 
Statement [3] print2::at = screen+$50 [ print2::at ] (  [ print2::at ] { }  ) always clobbers reg byte a 
Statement [4] print2::msg = main::msg1 [ print2::at print2::msg ] (  [ print2::at print2::msg ] { }  ) always clobbers reg byte a 
Statement [9] if(0!=print2::msg[print2::i#2]) goto print2::@2 [ print2::at print2::msg print2::i#2 print2::j#2 ] ( print2:2 [ print2::at print2::msg print2::i#2 print2::j#2 ] { }  print2:5 [ print2::at print2::msg print2::i#2 print2::j#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] print_char::ch#0 = print2::msg[print2::i#2] [ print2::at print2::msg print2::i#2 print2::j#2 print_char::at print_char::idx#0 print_char::ch#0 ] ( print2:2 [ print2::at print2::msg print2::i#2 print2::j#2 print_char::at print_char::idx#0 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  print2:5 [ print2::at print2::msg print2::i#2 print2::j#2 print_char::at print_char::idx#0 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  ) always clobbers reg byte a reg byte y 
Statement [18] print_char::at[print_char::idx#1] = print_char::ch#1 [ ] ( print2:2::print_char:14 [ print2::at print2::msg print2::i#2 print2::j#2 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  print2:5::print_char:14 [ print2::at print2::msg print2::i#2 print2::j#2 ] { { print_char::ch#0 = print_char::ch#1 } { print_char::idx#0 = print_char::idx#1 print2::j#2 } { print_char::at = print2::at } }  ) always clobbers reg byte y 
Potential registers zp[1]:2 [ print2::i#2 print2::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ print2::j#2 print2::j#1 ] : zp[1]:3 , reg byte x , 
Potential registers reg byte a [ print_char::ch#1 print_char::ch#0 ] : reg byte a , 
Potential registers reg byte x [ print_char::idx#1 print_char::idx#0 ] : reg byte x , 
Potential registers zp[2]:250 [ print2::at ] : zp[2]:250 , 
Potential registers zp[2]:252 [ print2::msg ] : zp[2]:252 , 
Potential registers zp[2]:250 [ print_char::at ] : zp[2]:250 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 1,304: reg byte a [ print_char::ch#1 print_char::ch#0 ] 1,203: reg byte x [ print_char::idx#1 print_char::idx#0 ] 275.5: zp[2]:250 [ print_char::at ] 
Uplift Scope [print2] 259.71: zp[1]:2 [ print2::i#2 print2::i#1 ] 151.5: zp[1]:3 [ print2::j#2 print2::j#1 ] 18.73: zp[2]:252 [ print2::msg ] 8.08: zp[2]:250 [ print2::at ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print_char] best 685 combination reg byte a [ print_char::ch#1 print_char::ch#0 ] reg byte x [ print_char::idx#1 print_char::idx#0 ] zp[2]:250 [ print_char::at ] 
Uplifting [print2] best 565 combination zp[1]:2 [ print2::i#2 print2::i#1 ] reg byte x [ print2::j#2 print2::j#1 ] zp[2]:252 [ print2::msg ] zp[2]:250 [ print2::at ] 
Uplifting [main] best 565 combination 
Uplifting [] best 565 combination 
Attempting to uplift remaining variables inzp[1]:2 [ print2::i#2 print2::i#1 ]
Uplifting [print2] best 565 combination zp[1]:2 [ print2::i#2 print2::i#1 ] 
Coalescing zero page register [ zp[2]:250 [ print2::at ] ] with [ zp[2]:250 [ print_char::at ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as register on a specific ZP address
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // [0] print2::at = screen -- pbuz1=pbuc1 
    lda #<screen
    sta.z print2.at
    lda #>screen
    sta.z print2.at+1
    // [1] print2::msg = main::msg -- pbuz1=pbuc1 
    lda #<msg
    sta.z print2.msg
    lda #>msg
    sta.z print2.msg+1
    // [2] call print2 
    // [7] phi from main to print2 [phi:main->print2]
  print2_from_main:
    jsr print2
    jmp __b1
    // main::@1
  __b1:
    // [3] print2::at = screen+$50 -- pbuz1=pbuc1 
    lda #<screen+$50
    sta.z print2.at
    lda #>screen+$50
    sta.z print2.at+1
    // [4] print2::msg = main::msg1 -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print2.msg
    lda #>msg1
    sta.z print2.msg+1
    // [5] call print2 
    // [7] phi from main::@1 to print2 [phi:main::@1->print2]
  print2_from___b1:
    jsr print2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
    msg: .text "hello"
    .byte 0
    msg1: .text "world"
    .byte 0
}
  // print2
// print2(byte* zp($fa) at, byte* zp($fc) msg)
print2: {
    .label at = $fa
    .label msg = $fc
    .label i = 2
    // [8] phi from print2 to print2::@1 [phi:print2->print2::@1]
  __b1_from_print2:
    // [8] phi print2::j#2 = 0 [phi:print2->print2::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [8] phi print2::i#2 = 0 [phi:print2->print2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // print2::@1
  __b1:
    // [9] if(0!=print2::msg[print2::i#2]) goto print2::@2 -- vbuc1_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print2::@return
  __breturn:
    // [10] return 
    rts
    // print2::@2
  __b2:
    // [11] print_char::at = print2::at
    // [12] print_char::idx#0 = print2::j#2
    // [13] print_char::ch#0 = print2::msg[print2::i#2] -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (msg),y
    // [14] call print_char 
    // [17] phi from print2::@2 to print_char [phi:print2::@2->print_char]
  print_char_from___b2:
    // [17] phi print_char::idx#1 = print_char::idx#0 [phi:print2::@2->print_char#0] -- register_copy 
    // [17] phi print_char::ch#1 = print_char::ch#0 [phi:print2::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print2::@3
  __b3:
    // [15] print2::j#1 = print2::j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [16] print2::i#1 = ++ print2::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] phi from print2::@3 to print2::@1 [phi:print2::@3->print2::@1]
  __b1_from___b3:
    // [8] phi print2::j#2 = print2::j#1 [phi:print2::@3->print2::@1#0] -- register_copy 
    // [8] phi print2::i#2 = print2::i#1 [phi:print2::@3->print2::@1#1] -- register_copy 
    jmp __b1
}
  // print_char
// print_char(byte* zp($fa) at, byte register(X) idx, byte register(A) ch)
print_char: {
    .label at = $fa
    // [18] print_char::at[print_char::idx#1] = print_char::ch#1 -- pbuz1_derefidx_vbuxx=vbuaa 
    stx.z $ff
    ldy.z $ff
    sta (at),y
    jmp __breturn
    // print_char::@return
  __breturn:
    // [19] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Removing instruction print2_from_main:
Removing instruction __b1:
Removing instruction print2_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_print2:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::msg[6]  = "hello"
const byte* main::msg1[6]  = "world"
void print2(byte* print2::at , byte* print2::msg)
byte* print2::at loadstore !zp[-1]:250 zp[2]:250 8.076923076923077
byte print2::i
byte print2::i#1 i zp[1]:2 202.0
byte print2::i#2 i zp[1]:2 57.714285714285715
byte print2::j
byte print2::j#1 reg byte x 101.0
byte print2::j#2 reg byte x 50.5
byte* print2::msg loadstore !zp[-1]:252 zp[2]:252 18.727272727272727
void print_char(byte* print_char::at , byte print_char::idx , byte print_char::ch)
byte* print_char::at loadstore !zp[-1]:250 zp[2]:250 275.5
byte print_char::ch !reg byte a
byte print_char::ch#0 !reg byte a 202.0
byte print_char::ch#1 !reg byte a 1102.0
byte print_char::idx !reg byte x
byte print_char::idx#0 !reg byte x 101.0
byte print_char::idx#1 !reg byte x 1102.0
const byte* screen = (byte*) 1024

zp[1]:2 [ print2::i#2 print2::i#1 ]
reg byte x [ print2::j#2 print2::j#1 ]
reg byte a [ print_char::ch#1 print_char::ch#0 ]
reg byte x [ print_char::idx#1 print_char::idx#0 ]
zp[2]:250 [ print2::at print_char::at ]
zp[2]:252 [ print2::msg ]


FINAL ASSEMBLER
Score: 493

  // File Comments
// Test declaring a variable as register on a specific ZP address
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    // print2(screen, "hello")
    // [0] print2::at = screen -- pbuz1=pbuc1 
    lda #<screen
    sta.z print2.at
    lda #>screen
    sta.z print2.at+1
    // [1] print2::msg = main::msg -- pbuz1=pbuc1 
    lda #<msg
    sta.z print2.msg
    lda #>msg
    sta.z print2.msg+1
    // [2] call print2 
    // [7] phi from main to print2 [phi:main->print2]
    jsr print2
    // main::@1
    // print2(screen+80, "world")
    // [3] print2::at = screen+$50 -- pbuz1=pbuc1 
    lda #<screen+$50
    sta.z print2.at
    lda #>screen+$50
    sta.z print2.at+1
    // [4] print2::msg = main::msg1 -- pbuz1=pbuc1 
    lda #<msg1
    sta.z print2.msg
    lda #>msg1
    sta.z print2.msg+1
    // [5] call print2 
    // [7] phi from main::@1 to print2 [phi:main::@1->print2]
    jsr print2
    // main::@return
    // }
    // [6] return 
    rts
    msg: .text "hello"
    .byte 0
    msg1: .text "world"
    .byte 0
}
  // print2
// print2(byte* zp($fa) at, byte* zp($fc) msg)
print2: {
    .label at = $fa
    .label msg = $fc
    .label i = 2
    // [8] phi from print2 to print2::@1 [phi:print2->print2::@1]
    // [8] phi print2::j#2 = 0 [phi:print2->print2::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [8] phi print2::i#2 = 0 [phi:print2->print2::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z i
    // print2::@1
  __b1:
    // for(byte i=0; msg[i]; i++)
    // [9] if(0!=print2::msg[print2::i#2]) goto print2::@2 -- vbuc1_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (msg),y
    cmp #0
    bne __b2
    // print2::@return
    // }
    // [10] return 
    rts
    // print2::@2
  __b2:
    // print_char(at, j, msg[i])
    // [11] print_char::at = print2::at
    // [12] print_char::idx#0 = print2::j#2
    // [13] print_char::ch#0 = print2::msg[print2::i#2] -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (msg),y
    // [14] call print_char 
    // [17] phi from print2::@2 to print_char [phi:print2::@2->print_char]
    // [17] phi print_char::idx#1 = print_char::idx#0 [phi:print2::@2->print_char#0] -- register_copy 
    // [17] phi print_char::ch#1 = print_char::ch#0 [phi:print2::@2->print_char#1] -- register_copy 
    jsr print_char
    // print2::@3
    // j += 2
    // [15] print2::j#1 = print2::j#2 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // for(byte i=0; msg[i]; i++)
    // [16] print2::i#1 = ++ print2::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] phi from print2::@3 to print2::@1 [phi:print2::@3->print2::@1]
    // [8] phi print2::j#2 = print2::j#1 [phi:print2::@3->print2::@1#0] -- register_copy 
    // [8] phi print2::i#2 = print2::i#1 [phi:print2::@3->print2::@1#1] -- register_copy 
    jmp __b1
}
  // print_char
// print_char(byte* zp($fa) at, byte register(X) idx, byte register(A) ch)
print_char: {
    .label at = $fa
    // at[idx] = ch
    // [18] print_char::at[print_char::idx#1] = print_char::ch#1 -- pbuz1_derefidx_vbuxx=vbuaa 
    stx.z $ff
    ldy.z $ff
    sta (at),y
    // print_char::@return
    // }
    // [19] return 
    rts
}
  // File Data

