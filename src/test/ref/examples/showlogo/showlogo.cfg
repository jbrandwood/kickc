@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  [5] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [6] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0
  [7] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0)
  [8] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [9] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [10] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [11] *((const byte*) D016#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [12] call fill 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [13] phi()
  [14] call fill 
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@4
  [15] (byte) main::ch#2 ← phi( main::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) main::ch#1 )
  [16] *((const byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2
  [17] (byte) main::ch#1 ← ++ (byte) main::ch#2
  [18] if((byte) main::ch#1!=(byte/word/signed word/dword/signed dword) $f0) goto main::@2
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@2
  [19] *((const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e7) ← ++ *((const byte*) SCREEN#0+(word/signed word/dword/signed dword) $3e7)
  kickasm() {{ inc $d020  }}
  to:main::@1
fill: scope:[fill]  from main::@3 main::@4
  [21] (byte) fill::val#3 ← phi( main::@4/(const byte) WHITE#0|(byte/signed byte/word/signed word/dword/signed dword) 8 main::@3/(const byte) BLACK#0 )
  [21] (word) fill::size#2 ← phi( main::@4/(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) $19 main::@3/(byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) $19 )
  [21] (byte*) fill::addr#0 ← phi( main::@4/(const byte*) COLS#0 main::@3/(const byte*) SCREEN#0 )
  [22] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word) fill::size#2
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [23] (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  [24] *((byte*) fill::addr#2) ← (byte) fill::val#3
  [25] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [26] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [27] return 
  to:@return
