Resolved forward reference SPRITE to SPRITE
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call mulf8s_prepare mulf8s::a 
Inlined call call mulf8s_prepare anim::cos_a 
Inlined call call mulf8s_prepare anim::sin_a 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void mulf_init()
mulf_init: scope:[mulf_init]  from init
  mulf_init::sqr#0 = 0
  mulf_init::x_2#0 = 0
  mulf_init::c#0 = 0
  mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
  mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@4
  mulf_init::x_2#5 = phi( mulf_init/mulf_init::x_2#0, mulf_init::@4/mulf_init::x_2#2 )
  mulf_init::sqr1_hi#5 = phi( mulf_init/mulf_init::sqr1_hi#0, mulf_init::@4/mulf_init::sqr1_hi#1 )
  mulf_init::sqr#6 = phi( mulf_init/mulf_init::sqr#0, mulf_init::@4/mulf_init::sqr#1 )
  mulf_init::c#3 = phi( mulf_init/mulf_init::c#0, mulf_init::@4/mulf_init::c#4 )
  mulf_init::sqr1_lo#2 = phi( mulf_init/mulf_init::sqr1_lo#0, mulf_init::@4/mulf_init::sqr1_lo#1 )
  mulf_init::$0 = mulf_init::sqr1_lo#2 != mulf_sqr1_lo+$200
  if(mulf_init::$0) goto mulf_init::@2
  to:mulf_init::@3
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  mulf_init::x_2#4 = phi( mulf_init::@1/mulf_init::x_2#5 )
  mulf_init::sqr1_hi#3 = phi( mulf_init::@1/mulf_init::sqr1_hi#5 )
  mulf_init::sqr1_lo#4 = phi( mulf_init::@1/mulf_init::sqr1_lo#2 )
  mulf_init::sqr#5 = phi( mulf_init::@1/mulf_init::sqr#6 )
  mulf_init::c#2 = phi( mulf_init::@1/mulf_init::c#3 )
  mulf_init::c#1 = ++ mulf_init::c#2
  mulf_init::$1 = mulf_init::c#1 & 1
  mulf_init::$2 = mulf_init::$1 == 0
  mulf_init::$3 = ! mulf_init::$2
  if(mulf_init::$3) goto mulf_init::@4
  to:mulf_init::@5
mulf_init::@3: scope:[mulf_init]  from mulf_init::@1
  mulf_init::x_255#0 = (byte)-1
  mulf_init::dir#0 = $ff
  mulf_init::sqr2_hi#0 = mulf_sqr2_hi
  mulf_init::sqr2_lo#0 = mulf_sqr2_lo
  to:mulf_init::@6
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2 mulf_init::@5
  mulf_init::c#4 = phi( mulf_init::@2/mulf_init::c#1, mulf_init::@5/mulf_init::c#5 )
  mulf_init::x_2#2 = phi( mulf_init::@2/mulf_init::x_2#4, mulf_init::@5/mulf_init::x_2#1 )
  mulf_init::sqr1_hi#2 = phi( mulf_init::@2/mulf_init::sqr1_hi#3, mulf_init::@5/mulf_init::sqr1_hi#4 )
  mulf_init::sqr1_lo#3 = phi( mulf_init::@2/mulf_init::sqr1_lo#4, mulf_init::@5/mulf_init::sqr1_lo#5 )
  mulf_init::sqr#3 = phi( mulf_init::@2/mulf_init::sqr#5, mulf_init::@5/mulf_init::sqr#2 )
  mulf_init::$4 = < mulf_init::sqr#3
  *mulf_init::sqr1_lo#3 = mulf_init::$4
  mulf_init::$5 = > mulf_init::sqr#3
  *mulf_init::sqr1_hi#2 = mulf_init::$5
  mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2
  mulf_init::$6 = mulf_init::sqr#3 + mulf_init::x_2#2
  mulf_init::sqr#1 = mulf_init::$6
  mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#3
  to:mulf_init::@1
mulf_init::@5: scope:[mulf_init]  from mulf_init::@2
  mulf_init::c#5 = phi( mulf_init::@2/mulf_init::c#1 )
  mulf_init::sqr1_hi#4 = phi( mulf_init::@2/mulf_init::sqr1_hi#3 )
  mulf_init::sqr1_lo#5 = phi( mulf_init::@2/mulf_init::sqr1_lo#4 )
  mulf_init::sqr#4 = phi( mulf_init::@2/mulf_init::sqr#5 )
  mulf_init::x_2#3 = phi( mulf_init::@2/mulf_init::x_2#4 )
  mulf_init::x_2#1 = ++ mulf_init::x_2#3
  mulf_init::sqr#2 = ++ mulf_init::sqr#4
  to:mulf_init::@4
mulf_init::@6: scope:[mulf_init]  from mulf_init::@3 mulf_init::@9
  mulf_init::dir#3 = phi( mulf_init::@3/mulf_init::dir#0, mulf_init::@9/mulf_init::dir#4 )
  mulf_init::sqr2_hi#3 = phi( mulf_init::@3/mulf_init::sqr2_hi#0, mulf_init::@9/mulf_init::sqr2_hi#4 )
  mulf_init::x_255#3 = phi( mulf_init::@3/mulf_init::x_255#0, mulf_init::@9/mulf_init::x_255#4 )
  mulf_init::sqr2_lo#2 = phi( mulf_init::@3/mulf_init::sqr2_lo#0, mulf_init::@9/mulf_init::sqr2_lo#1 )
  mulf_init::$7 = mulf_init::sqr2_lo#2 != mulf_sqr2_lo+$1ff
  if(mulf_init::$7) goto mulf_init::@7
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@6
  mulf_init::dir#2 = phi( mulf_init::@6/mulf_init::dir#3 )
  mulf_init::sqr2_hi#2 = phi( mulf_init::@6/mulf_init::sqr2_hi#3 )
  mulf_init::sqr2_lo#3 = phi( mulf_init::@6/mulf_init::sqr2_lo#2 )
  mulf_init::x_255#2 = phi( mulf_init::@6/mulf_init::x_255#3 )
  *mulf_init::sqr2_lo#3 = mulf_sqr1_lo[mulf_init::x_255#2]
  *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2]
  mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2
  mulf_init::$8 = mulf_init::x_255#2 + mulf_init::dir#2
  mulf_init::x_255#1 = mulf_init::$8
  mulf_init::$9 = mulf_init::x_255#1 == 0
  mulf_init::$10 = ! mulf_init::$9
  if(mulf_init::$10) goto mulf_init::@9
  to:mulf_init::@10
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6
  *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
  *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
  to:mulf_init::@return
mulf_init::@9: scope:[mulf_init]  from mulf_init::@10 mulf_init::@7
  mulf_init::dir#4 = phi( mulf_init::@10/mulf_init::dir#1, mulf_init::@7/mulf_init::dir#2 )
  mulf_init::sqr2_hi#4 = phi( mulf_init::@10/mulf_init::sqr2_hi#5, mulf_init::@7/mulf_init::sqr2_hi#1 )
  mulf_init::x_255#4 = phi( mulf_init::@10/mulf_init::x_255#5, mulf_init::@7/mulf_init::x_255#1 )
  mulf_init::sqr2_lo#4 = phi( mulf_init::@10/mulf_init::sqr2_lo#5, mulf_init::@7/mulf_init::sqr2_lo#3 )
  mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#4
  to:mulf_init::@6
mulf_init::@10: scope:[mulf_init]  from mulf_init::@7
  mulf_init::sqr2_hi#5 = phi( mulf_init::@7/mulf_init::sqr2_hi#1 )
  mulf_init::x_255#5 = phi( mulf_init::@7/mulf_init::x_255#1 )
  mulf_init::sqr2_lo#5 = phi( mulf_init::@7/mulf_init::sqr2_lo#3 )
  mulf_init::dir#1 = 1
  to:mulf_init::@9
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return

void mulf8u_prepare(byte mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  mulf8u_prepare::a#2 = phi( anim::mulf8s_prepare1/mulf8u_prepare::a#0, anim::mulf8s_prepare2/mulf8u_prepare::a#1 )
  *mulf8u_prepare::memA = mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  return 
  to:@return

word mulf8u_prepared(byte mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  mulf8u_prepared::b#1 = phi( mulf8s_prepared/mulf8u_prepared::b#0 )
  *mulf8u_prepared::memB = mulf8u_prepared::b#1
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  mulf8u_prepared::return#0 = ((word)) { *mulf8u_prepared::memB, *mulf8u_prepared::resL }
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  mulf8u_prepared::return#3 = phi( mulf8u_prepared/mulf8u_prepared::return#0 )
  mulf8u_prepared::return#1 = mulf8u_prepared::return#3
  return 
  to:@return

signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@12 anim::@15 anim::@8 anim::@9
  mulf8s_prepared::b#4 = phi( anim::@12/mulf8s_prepared::b#1, anim::@15/mulf8s_prepared::b#3, anim::@8/mulf8s_prepared::b#0, anim::@9/mulf8s_prepared::b#2 )
  mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#4
  call mulf8u_prepared 
  mulf8u_prepared::return#2 = mulf8u_prepared::return#1
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  mulf8s_prepared::b#7 = phi( mulf8s_prepared/mulf8s_prepared::b#4 )
  mulf8u_prepared::return#4 = phi( mulf8s_prepared/mulf8u_prepared::return#2 )
  mulf8s_prepared::$0 = mulf8u_prepared::return#4
  mulf8s_prepared::m#0 = mulf8s_prepared::$0
  mulf8s_prepared::$1 = *mulf8s_prepared::memA < 0
  mulf8s_prepared::$2 = ! mulf8s_prepared::$1
  if(mulf8s_prepared::$2) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  mulf8s_prepared::m#6 = phi( mulf8s_prepared::@3/mulf8s_prepared::m#1, mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  mulf8s_prepared::b#5 = phi( mulf8s_prepared::@3/mulf8s_prepared::b#6, mulf8s_prepared::@5/mulf8s_prepared::b#7 )
  mulf8s_prepared::$3 = mulf8s_prepared::b#5 < 0
  mulf8s_prepared::$4 = ! mulf8s_prepared::$3
  if(mulf8s_prepared::$4) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  mulf8s_prepared::b#6 = phi( mulf8s_prepared::@5/mulf8s_prepared::b#7 )
  mulf8s_prepared::m#3 = phi( mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  mulf8s_prepared::$6 = > mulf8s_prepared::m#3
  mulf8s_prepared::$13 = (byte)mulf8s_prepared::b#6
  mulf8s_prepared::$7 = mulf8s_prepared::$6 - mulf8s_prepared::$13
  mulf8s_prepared::$11 = mulf8s_prepared::$7
  mulf8s_prepared::m#1 = mulf8s_prepared::m#3 hi= mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  mulf8s_prepared::m#4 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#6, mulf8s_prepared::@4/mulf8s_prepared::m#2 )
  mulf8s_prepared::return#0 = (signed word)mulf8s_prepared::m#4
  to:mulf8s_prepared::@return
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  mulf8s_prepared::m#5 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#6 )
  mulf8s_prepared::$9 = > mulf8s_prepared::m#5
  mulf8s_prepared::$14 = (byte)*mulf8s_prepared::memA
  mulf8s_prepared::$10 = mulf8s_prepared::$9 - mulf8s_prepared::$14
  mulf8s_prepared::$12 = mulf8s_prepared::$10
  mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  mulf8s_prepared::return#6 = phi( mulf8s_prepared::@2/mulf8s_prepared::return#0 )
  mulf8s_prepared::return#1 = mulf8s_prepared::return#6
  return 
  to:@return

dword clock()
clock: scope:[clock]  from anim::@7
  clock::$0 = $ffffffff - *CIA2_TIMER_AB
  clock::return#0 = clock::$0
  to:clock::@return
clock::@return: scope:[clock]  from clock
  clock::return#3 = phi( clock/clock::return#0 )
  clock::return#1 = clock::return#3
  return 
  to:@return

void clock_start()
clock_start: scope:[clock_start]  from anim::@3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *CIA2_TIMER_AB = $ffffffff
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  return 
  to:@return

void print_uint_at(word print_uint_at::w , byte* print_uint_at::at)
print_uint_at: scope:[print_uint_at]  from print_ulong_at print_ulong_at::@1
  print_uint_at::at#2 = phi( print_ulong_at/print_uint_at::at#0, print_ulong_at::@1/print_uint_at::at#1 )
  print_uint_at::w#2 = phi( print_ulong_at/print_uint_at::w#0, print_ulong_at::@1/print_uint_at::w#1 )
  print_uint_at::$0 = > print_uint_at::w#2
  print_uchar_at::b#0 = print_uint_at::$0
  print_uchar_at::at#0 = print_uint_at::at#2
  call print_uchar_at 
  to:print_uint_at::@1
print_uint_at::@1: scope:[print_uint_at]  from print_uint_at
  print_uint_at::at#3 = phi( print_uint_at/print_uint_at::at#2 )
  print_uint_at::w#3 = phi( print_uint_at/print_uint_at::w#2 )
  print_uint_at::$2 = < print_uint_at::w#3
  print_uint_at::$3 = print_uint_at::at#3 + 2
  print_uchar_at::b#1 = print_uint_at::$2
  print_uchar_at::at#1 = print_uint_at::$3
  call print_uchar_at 
  to:print_uint_at::@2
print_uint_at::@2: scope:[print_uint_at]  from print_uint_at::@1
  to:print_uint_at::@return
print_uint_at::@return: scope:[print_uint_at]  from print_uint_at::@2
  return 
  to:@return

void print_ulong_at(dword print_ulong_at::dw , byte* print_ulong_at::at)
print_ulong_at: scope:[print_ulong_at]  from anim::@17
  print_ulong_at::at#1 = phi( anim::@17/print_ulong_at::at#0 )
  print_ulong_at::dw#1 = phi( anim::@17/print_ulong_at::dw#0 )
  print_ulong_at::$0 = > print_ulong_at::dw#1
  print_uint_at::w#0 = print_ulong_at::$0
  print_uint_at::at#0 = print_ulong_at::at#1
  call print_uint_at 
  to:print_ulong_at::@1
print_ulong_at::@1: scope:[print_ulong_at]  from print_ulong_at
  print_ulong_at::at#2 = phi( print_ulong_at/print_ulong_at::at#1 )
  print_ulong_at::dw#2 = phi( print_ulong_at/print_ulong_at::dw#1 )
  print_ulong_at::$2 = < print_ulong_at::dw#2
  print_ulong_at::$3 = print_ulong_at::at#2 + 4
  print_uint_at::w#1 = print_ulong_at::$2
  print_uint_at::at#1 = print_ulong_at::$3
  call print_uint_at 
  to:print_ulong_at::@2
print_ulong_at::@2: scope:[print_ulong_at]  from print_ulong_at::@1
  to:print_ulong_at::@return
print_ulong_at::@return: scope:[print_ulong_at]  from print_ulong_at::@2
  return 
  to:@return

void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
print_uchar_at: scope:[print_uchar_at]  from print_uint_at print_uint_at::@1
  print_uchar_at::at#2 = phi( print_uint_at/print_uchar_at::at#0, print_uint_at::@1/print_uchar_at::at#1 )
  print_uchar_at::b#2 = phi( print_uint_at/print_uchar_at::b#0, print_uint_at::@1/print_uchar_at::b#1 )
  print_uchar_at::$0 = print_uchar_at::b#2 >> 4
  print_char_at::ch#0 = print_hextab[print_uchar_at::$0]
  print_char_at::at#0 = print_uchar_at::at#2
  call print_char_at 
  to:print_uchar_at::@1
print_uchar_at::@1: scope:[print_uchar_at]  from print_uchar_at
  print_uchar_at::at#3 = phi( print_uchar_at/print_uchar_at::at#2 )
  print_uchar_at::b#3 = phi( print_uchar_at/print_uchar_at::b#2 )
  print_uchar_at::$2 = print_uchar_at::b#3 & $f
  print_uchar_at::$3 = print_uchar_at::at#3 + 1
  print_char_at::ch#1 = print_hextab[print_uchar_at::$2]
  print_char_at::at#1 = print_uchar_at::$3
  call print_char_at 
  to:print_uchar_at::@2
print_uchar_at::@2: scope:[print_uchar_at]  from print_uchar_at::@1
  to:print_uchar_at::@return
print_uchar_at::@return: scope:[print_uchar_at]  from print_uchar_at::@2
  return 
  to:@return

void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
print_char_at: scope:[print_char_at]  from print_uchar_at print_uchar_at::@1
  print_char_at::at#2 = phi( print_uchar_at/print_char_at::at#0, print_uchar_at::@1/print_char_at::at#1 )
  print_char_at::ch#2 = phi( print_uchar_at/print_char_at::ch#0, print_uchar_at::@1/print_char_at::ch#1 )
  *print_char_at::at#2 = print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  asm { sei  }
  call init 
  to:main::@1
main::@1: scope:[main]  from main
  call anim 
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void init()
init: scope:[init]  from main
  call mulf_init 
  to:init::@2
init::@2: scope:[init]  from init
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff
  init::$1 = SCREEN + $3f8
  init::sprites_ptr#0 = init::$1
  init::i#0 = 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@2
  init::i#2 = phi( init::@1/init::i#1, init::@2/init::i#0 )
  init::sprites_ptr#1 = phi( init::@1/init::sprites_ptr#1, init::@2/init::sprites_ptr#0 )
  init::$2 = SPRITE / $40
  init::sprites_ptr#1[init::i#2] = (byte)init::$2
  SPRITES_COLOR[init::i#2] = GREEN
  init::i#1 = init::i#2 + rangenext(0,7)
  init::$3 = init::i#1 != rangelast(0,7)
  if(init::$3) goto init::@1
  to:init::@return
init::@return: scope:[init]  from init::@1
  return 
  to:@return

void anim()
anim: scope:[anim]  from main::@1
  anim::angle#0 = 0
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@18
  anim::angle#9 = phi( anim/anim::angle#0, anim::@18/anim::angle#11 )
  if(true) goto anim::@2
  to:anim::@return
anim::@2: scope:[anim]  from anim::@1 anim::@2
  anim::angle#6 = phi( anim::@1/anim::angle#9, anim::@2/anim::angle#6 )
  anim::$0 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
  if(anim::$0) goto anim::@2
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2
  anim::angle#4 = phi( anim::@2/anim::angle#6 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  call clock_start 
  to:anim::@10
anim::@10: scope:[anim]  from anim::@3
  anim::angle#2 = phi( anim::@3/anim::angle#4 )
  anim::cos_a#0 = (signed byte)COS[anim::angle#2]
  anim::sin_a#0 = (signed byte)SIN[anim::angle#2]
  anim::sprite_msb#0 = 0
  anim::i#0 = 0
  to:anim::@4
anim::@4: scope:[anim]  from anim::@10 anim::@5
  anim::angle#21 = phi( anim::@10/anim::angle#2, anim::@5/anim::angle#5 )
  anim::sprite_msb#16 = phi( anim::@10/anim::sprite_msb#0, anim::@5/anim::sprite_msb#7 )
  anim::sin_a#6 = phi( anim::@10/anim::sin_a#0, anim::@5/anim::sin_a#7 )
  anim::cos_a#1 = phi( anim::@10/anim::cos_a#0, anim::@5/anim::cos_a#2 )
  anim::i#2 = phi( anim::@10/anim::i#0, anim::@5/anim::i#1 )
  anim::x#0 = xs[anim::i#2]
  anim::y#0 = ys[anim::i#2]
  anim::mulf8s_prepare1_a#0 = anim::cos_a#1
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@4
  anim::angle#20 = phi( anim::@4/anim::angle#21 )
  anim::cos_a#13 = phi( anim::@4/anim::cos_a#1 )
  anim::i#14 = phi( anim::@4/anim::i#2 )
  anim::sprite_msb#15 = phi( anim::@4/anim::sprite_msb#16 )
  anim::sin_a#5 = phi( anim::@4/anim::sin_a#6 )
  anim::y#7 = phi( anim::@4/anim::y#0 )
  anim::x#5 = phi( anim::@4/anim::x#0 )
  anim::mulf8s_prepare1_a#1 = phi( anim::@4/anim::mulf8s_prepare1_a#0 )
  mulf8u_prepare::a#0 = (byte)anim::mulf8s_prepare1_a#1
  call mulf8u_prepare 
  to:anim::@11
anim::@11: scope:[anim]  from anim::mulf8s_prepare1
  anim::angle#19 = phi( anim::mulf8s_prepare1/anim::angle#20 )
  anim::cos_a#12 = phi( anim::mulf8s_prepare1/anim::cos_a#13 )
  anim::i#13 = phi( anim::mulf8s_prepare1/anim::i#14 )
  anim::sprite_msb#14 = phi( anim::mulf8s_prepare1/anim::sprite_msb#15 )
  anim::sin_a#4 = phi( anim::mulf8s_prepare1/anim::sin_a#5 )
  anim::y#5 = phi( anim::mulf8s_prepare1/anim::y#7 )
  anim::x#3 = phi( anim::mulf8s_prepare1/anim::x#5 )
  to:anim::@8
anim::@8: scope:[anim]  from anim::@11
  anim::angle#18 = phi( anim::@11/anim::angle#19 )
  anim::cos_a#11 = phi( anim::@11/anim::cos_a#12 )
  anim::i#12 = phi( anim::@11/anim::i#13 )
  anim::sprite_msb#13 = phi( anim::@11/anim::sprite_msb#14 )
  anim::sin_a#3 = phi( anim::@11/anim::sin_a#4 )
  anim::y#3 = phi( anim::@11/anim::y#5 )
  anim::x#1 = phi( anim::@11/anim::x#3 )
  mulf8s_prepared::b#0 = anim::x#1
  call mulf8s_prepared 
  mulf8s_prepared::return#2 = mulf8s_prepared::return#1
  to:anim::@12
anim::@12: scope:[anim]  from anim::@8
  anim::angle#17 = phi( anim::@8/anim::angle#18 )
  anim::cos_a#10 = phi( anim::@8/anim::cos_a#11 )
  anim::i#11 = phi( anim::@8/anim::i#12 )
  anim::sprite_msb#12 = phi( anim::@8/anim::sprite_msb#13 )
  anim::x#9 = phi( anim::@8/anim::x#1 )
  anim::sin_a#2 = phi( anim::@8/anim::sin_a#3 )
  anim::y#1 = phi( anim::@8/anim::y#3 )
  mulf8s_prepared::return#7 = phi( anim::@8/mulf8s_prepared::return#2 )
  anim::$4 = mulf8s_prepared::return#7
  anim::$5 = anim::$4 * 2
  anim::xr#0 = anim::$5
  mulf8s_prepared::b#1 = anim::y#1
  call mulf8s_prepared 
  mulf8s_prepared::return#3 = mulf8s_prepared::return#1
  to:anim::@13
anim::@13: scope:[anim]  from anim::@12
  anim::angle#16 = phi( anim::@12/anim::angle#17 )
  anim::cos_a#9 = phi( anim::@12/anim::cos_a#10 )
  anim::i#10 = phi( anim::@12/anim::i#11 )
  anim::sprite_msb#11 = phi( anim::@12/anim::sprite_msb#12 )
  anim::x#8 = phi( anim::@12/anim::x#9 )
  anim::xr#7 = phi( anim::@12/anim::xr#0 )
  anim::y#8 = phi( anim::@12/anim::y#1 )
  anim::sin_a#1 = phi( anim::@12/anim::sin_a#2 )
  mulf8s_prepared::return#8 = phi( anim::@12/mulf8s_prepared::return#3 )
  anim::$6 = mulf8s_prepared::return#8
  anim::$7 = anim::$6 * 2
  anim::yr#0 = anim::$7
  anim::mulf8s_prepare2_a#0 = anim::sin_a#1
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@13
  anim::sin_a#13 = phi( anim::@13/anim::sin_a#1 )
  anim::angle#15 = phi( anim::@13/anim::angle#16 )
  anim::cos_a#8 = phi( anim::@13/anim::cos_a#9 )
  anim::i#9 = phi( anim::@13/anim::i#10 )
  anim::sprite_msb#10 = phi( anim::@13/anim::sprite_msb#11 )
  anim::yr#8 = phi( anim::@13/anim::yr#0 )
  anim::x#7 = phi( anim::@13/anim::x#8 )
  anim::xr#6 = phi( anim::@13/anim::xr#7 )
  anim::y#6 = phi( anim::@13/anim::y#8 )
  anim::mulf8s_prepare2_a#1 = phi( anim::@13/anim::mulf8s_prepare2_a#0 )
  mulf8u_prepare::a#1 = (byte)anim::mulf8s_prepare2_a#1
  call mulf8u_prepare 
  to:anim::@14
anim::@14: scope:[anim]  from anim::mulf8s_prepare2
  anim::sin_a#12 = phi( anim::mulf8s_prepare2/anim::sin_a#13 )
  anim::angle#13 = phi( anim::mulf8s_prepare2/anim::angle#15 )
  anim::cos_a#7 = phi( anim::mulf8s_prepare2/anim::cos_a#8 )
  anim::i#8 = phi( anim::mulf8s_prepare2/anim::i#9 )
  anim::sprite_msb#9 = phi( anim::mulf8s_prepare2/anim::sprite_msb#10 )
  anim::yr#7 = phi( anim::mulf8s_prepare2/anim::yr#8 )
  anim::x#6 = phi( anim::mulf8s_prepare2/anim::x#7 )
  anim::xr#5 = phi( anim::mulf8s_prepare2/anim::xr#6 )
  anim::y#4 = phi( anim::mulf8s_prepare2/anim::y#6 )
  to:anim::@9
anim::@9: scope:[anim]  from anim::@14
  anim::sin_a#11 = phi( anim::@14/anim::sin_a#12 )
  anim::angle#12 = phi( anim::@14/anim::angle#13 )
  anim::cos_a#6 = phi( anim::@14/anim::cos_a#7 )
  anim::i#7 = phi( anim::@14/anim::i#8 )
  anim::sprite_msb#8 = phi( anim::@14/anim::sprite_msb#9 )
  anim::yr#6 = phi( anim::@14/anim::yr#7 )
  anim::x#4 = phi( anim::@14/anim::x#6 )
  anim::xr#4 = phi( anim::@14/anim::xr#5 )
  anim::y#2 = phi( anim::@14/anim::y#4 )
  mulf8s_prepared::b#2 = anim::y#2
  call mulf8s_prepared 
  mulf8s_prepared::return#4 = mulf8s_prepared::return#1
  to:anim::@15
anim::@15: scope:[anim]  from anim::@9
  anim::sin_a#10 = phi( anim::@9/anim::sin_a#11 )
  anim::angle#10 = phi( anim::@9/anim::angle#12 )
  anim::cos_a#5 = phi( anim::@9/anim::cos_a#6 )
  anim::i#6 = phi( anim::@9/anim::i#7 )
  anim::sprite_msb#6 = phi( anim::@9/anim::sprite_msb#8 )
  anim::yr#4 = phi( anim::@9/anim::yr#6 )
  anim::x#2 = phi( anim::@9/anim::x#4 )
  anim::xr#2 = phi( anim::@9/anim::xr#4 )
  mulf8s_prepared::return#9 = phi( anim::@9/mulf8s_prepared::return#4 )
  anim::$9 = mulf8s_prepared::return#9
  anim::$10 = anim::$9 * 2
  anim::xr#1 = anim::xr#2 - anim::$10
  mulf8s_prepared::b#3 = anim::x#2
  call mulf8s_prepared 
  mulf8s_prepared::return#5 = mulf8s_prepared::return#1
  to:anim::@16
anim::@16: scope:[anim]  from anim::@15
  anim::sin_a#8 = phi( anim::@15/anim::sin_a#10 )
  anim::angle#7 = phi( anim::@15/anim::angle#10 )
  anim::cos_a#3 = phi( anim::@15/anim::cos_a#5 )
  anim::i#4 = phi( anim::@15/anim::i#6 )
  anim::sprite_msb#3 = phi( anim::@15/anim::sprite_msb#6 )
  anim::xr#3 = phi( anim::@15/anim::xr#1 )
  anim::yr#2 = phi( anim::@15/anim::yr#4 )
  mulf8s_prepared::return#10 = phi( anim::@15/mulf8s_prepared::return#5 )
  anim::$11 = mulf8s_prepared::return#10
  anim::$12 = anim::$11 * 2
  anim::yr#1 = anim::yr#2 + anim::$12
  anim::$13 = > anim::xr#3
  anim::$29 = (signed byte)anim::$13
  anim::$14 = anim::$29 + $18
  anim::$15 = anim::$14 + $95
  anim::xpos#0 = anim::$15
  anim::$16 = anim::sprite_msb#3 / 2
  anim::sprite_msb#1 = anim::$16
  anim::$17 = > anim::xpos#0
  anim::$18 = anim::$17 != 0
  anim::$19 = ! anim::$18
  if(anim::$19) goto anim::@5
  to:anim::@6
anim::@5: scope:[anim]  from anim::@16 anim::@6
  anim::sin_a#7 = phi( anim::@16/anim::sin_a#8, anim::@6/anim::sin_a#9 )
  anim::angle#5 = phi( anim::@16/anim::angle#7, anim::@6/anim::angle#8 )
  anim::sprite_msb#7 = phi( anim::@16/anim::sprite_msb#1, anim::@6/anim::sprite_msb#2 )
  anim::cos_a#2 = phi( anim::@16/anim::cos_a#3, anim::@6/anim::cos_a#4 )
  anim::xpos#1 = phi( anim::@16/anim::xpos#0, anim::@6/anim::xpos#2 )
  anim::i#3 = phi( anim::@16/anim::i#4, anim::@6/anim::i#5 )
  anim::yr#3 = phi( anim::@16/anim::yr#1, anim::@6/anim::yr#5 )
  anim::$20 = > anim::yr#3
  anim::$21 = anim::$20 + $59
  anim::$22 = anim::$21 + $33
  anim::ypos#0 = anim::$22
  anim::$23 = anim::i#3 * 2
  anim::i2#0 = anim::$23
  anim::$24 = < anim::xpos#1
  SPRITES_XPOS[anim::i2#0] = anim::$24
  SPRITES_YPOS[anim::i2#0] = anim::ypos#0
  anim::i#1 = anim::i#3 + rangenext(0,7)
  anim::$25 = anim::i#1 != rangelast(0,7)
  if(anim::$25) goto anim::@4
  to:anim::@7
anim::@6: scope:[anim]  from anim::@16
  anim::sin_a#9 = phi( anim::@16/anim::sin_a#8 )
  anim::angle#8 = phi( anim::@16/anim::angle#7 )
  anim::cos_a#4 = phi( anim::@16/anim::cos_a#3 )
  anim::xpos#2 = phi( anim::@16/anim::xpos#0 )
  anim::i#5 = phi( anim::@16/anim::i#4 )
  anim::yr#5 = phi( anim::@16/anim::yr#1 )
  anim::sprite_msb#4 = phi( anim::@16/anim::sprite_msb#1 )
  anim::sprite_msb#2 = anim::sprite_msb#4 | $80
  to:anim::@5
anim::@7: scope:[anim]  from anim::@5
  anim::angle#3 = phi( anim::@5/anim::angle#5 )
  anim::sprite_msb#5 = phi( anim::@5/anim::sprite_msb#7 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) = anim::sprite_msb#5
  anim::angle#1 = ++ anim::angle#3
  call clock 
  clock::return#2 = clock::return#1
  to:anim::@17
anim::@17: scope:[anim]  from anim::@7
  anim::angle#14 = phi( anim::@7/anim::angle#1 )
  clock::return#4 = phi( anim::@7/clock::return#2 )
  anim::$26 = clock::return#4
  anim::$27 = anim::$26 - CLOCKS_PER_INIT
  anim::cyclecount#0 = anim::$27
  print_ulong_at::dw#0 = anim::cyclecount#0
  print_ulong_at::at#0 = SCREEN
  call print_ulong_at 
  to:anim::@18
anim::@18: scope:[anim]  from anim::@17
  anim::angle#11 = phi( anim::@17/anim::angle#14 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE
  to:anim::@1
anim::@return: scope:[anim]  from anim::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const nomodify dword* CIA2_TIMER_AB = (dword*)$dd04
const nomodify byte CIA_TIMER_CONTROL_A_COUNT_CYCLES = 0
const nomodify byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
const nomodify byte CIA_TIMER_CONTROL_CONTINUOUS = 0
const nomodify byte CIA_TIMER_CONTROL_START = 1
const nomodify byte CIA_TIMER_CONTROL_STOP = 0
const nomodify dword CLOCKS_PER_INIT = $12
const byte* COS = SIN+$40
const nomodify byte GREEN = 5
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
const byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB = $10
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* SCREEN = (byte*)$400
const byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
const byte* SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const nomodify byte* SPRITES_COLOR = (byte*)$d027
const nomodify byte* SPRITES_XPOS = (byte*)$d000
const nomodify byte* SPRITES_YPOS = (byte*)$d001
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
void __start()
void anim()
bool~ anim::$0
number~ anim::$10
signed word~ anim::$11
number~ anim::$12
byte~ anim::$13
number~ anim::$14
number~ anim::$15
number~ anim::$16
byte~ anim::$17
bool~ anim::$18
bool~ anim::$19
byte~ anim::$20
number~ anim::$21
number~ anim::$22
number~ anim::$23
byte~ anim::$24
bool~ anim::$25
dword~ anim::$26
dword~ anim::$27
signed byte~ anim::$29
signed word~ anim::$4
number~ anim::$5
signed word~ anim::$6
number~ anim::$7
signed word~ anim::$9
byte anim::angle
byte anim::angle#0
byte anim::angle#1
byte anim::angle#10
byte anim::angle#11
byte anim::angle#12
byte anim::angle#13
byte anim::angle#14
byte anim::angle#15
byte anim::angle#16
byte anim::angle#17
byte anim::angle#18
byte anim::angle#19
byte anim::angle#2
byte anim::angle#20
byte anim::angle#21
byte anim::angle#3
byte anim::angle#4
byte anim::angle#5
byte anim::angle#6
byte anim::angle#7
byte anim::angle#8
byte anim::angle#9
signed byte anim::cos_a
signed byte anim::cos_a#0
signed byte anim::cos_a#1
signed byte anim::cos_a#10
signed byte anim::cos_a#11
signed byte anim::cos_a#12
signed byte anim::cos_a#13
signed byte anim::cos_a#2
signed byte anim::cos_a#3
signed byte anim::cos_a#4
signed byte anim::cos_a#5
signed byte anim::cos_a#6
signed byte anim::cos_a#7
signed byte anim::cos_a#8
signed byte anim::cos_a#9
dword anim::cyclecount
dword anim::cyclecount#0
byte anim::i
byte anim::i#0
byte anim::i#1
byte anim::i#10
byte anim::i#11
byte anim::i#12
byte anim::i#13
byte anim::i#14
byte anim::i#2
byte anim::i#3
byte anim::i#4
byte anim::i#5
byte anim::i#6
byte anim::i#7
byte anim::i#8
byte anim::i#9
byte anim::i2
byte anim::i2#0
signed byte anim::mulf8s_prepare1_a
signed byte anim::mulf8s_prepare1_a#0
signed byte anim::mulf8s_prepare1_a#1
signed byte anim::mulf8s_prepare2_a
signed byte anim::mulf8s_prepare2_a#0
signed byte anim::mulf8s_prepare2_a#1
signed byte anim::sin_a
signed byte anim::sin_a#0
signed byte anim::sin_a#1
signed byte anim::sin_a#10
signed byte anim::sin_a#11
signed byte anim::sin_a#12
signed byte anim::sin_a#13
signed byte anim::sin_a#2
signed byte anim::sin_a#3
signed byte anim::sin_a#4
signed byte anim::sin_a#5
signed byte anim::sin_a#6
signed byte anim::sin_a#7
signed byte anim::sin_a#8
signed byte anim::sin_a#9
byte anim::sprite_msb
byte anim::sprite_msb#0
byte anim::sprite_msb#1
byte anim::sprite_msb#10
byte anim::sprite_msb#11
byte anim::sprite_msb#12
byte anim::sprite_msb#13
byte anim::sprite_msb#14
byte anim::sprite_msb#15
byte anim::sprite_msb#16
byte anim::sprite_msb#2
byte anim::sprite_msb#3
byte anim::sprite_msb#4
byte anim::sprite_msb#5
byte anim::sprite_msb#6
byte anim::sprite_msb#7
byte anim::sprite_msb#8
byte anim::sprite_msb#9
signed byte anim::x
signed byte anim::x#0
signed byte anim::x#1
signed byte anim::x#2
signed byte anim::x#3
signed byte anim::x#4
signed byte anim::x#5
signed byte anim::x#6
signed byte anim::x#7
signed byte anim::x#8
signed byte anim::x#9
signed word anim::xpos
signed word anim::xpos#0
signed word anim::xpos#1
signed word anim::xpos#2
signed word anim::xr
signed word anim::xr#0
signed word anim::xr#1
signed word anim::xr#2
signed word anim::xr#3
signed word anim::xr#4
signed word anim::xr#5
signed word anim::xr#6
signed word anim::xr#7
signed byte anim::y
signed byte anim::y#0
signed byte anim::y#1
signed byte anim::y#2
signed byte anim::y#3
signed byte anim::y#4
signed byte anim::y#5
signed byte anim::y#6
signed byte anim::y#7
signed byte anim::y#8
byte anim::ypos
byte anim::ypos#0
signed word anim::yr
signed word anim::yr#0
signed word anim::yr#1
signed word anim::yr#2
signed word anim::yr#3
signed word anim::yr#4
signed word anim::yr#5
signed word anim::yr#6
signed word anim::yr#7
signed word anim::yr#8
dword clock()
number~ clock::$0
dword clock::return
dword clock::return#0
dword clock::return#1
dword clock::return#2
dword clock::return#3
dword clock::return#4
void clock_start()
void init()
byte*~ init::$1
byte*~ init::$2
bool~ init::$3
byte init::i
byte init::i#0
byte init::i#1
byte init::i#2
byte* init::sprites_ptr
byte* init::sprites_ptr#0
byte* init::sprites_ptr#1
void main()
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
word~ mulf8s_prepared::$0
bool~ mulf8s_prepared::$1
byte~ mulf8s_prepared::$10
byte~ mulf8s_prepared::$11
byte~ mulf8s_prepared::$12
byte~ mulf8s_prepared::$13
byte~ mulf8s_prepared::$14
bool~ mulf8s_prepared::$2
bool~ mulf8s_prepared::$3
bool~ mulf8s_prepared::$4
byte~ mulf8s_prepared::$6
byte~ mulf8s_prepared::$7
byte~ mulf8s_prepared::$9
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0
signed byte mulf8s_prepared::b#1
signed byte mulf8s_prepared::b#2
signed byte mulf8s_prepared::b#3
signed byte mulf8s_prepared::b#4
signed byte mulf8s_prepared::b#5
signed byte mulf8s_prepared::b#6
signed byte mulf8s_prepared::b#7
word mulf8s_prepared::m
word mulf8s_prepared::m#0
word mulf8s_prepared::m#1
word mulf8s_prepared::m#2
word mulf8s_prepared::m#3
word mulf8s_prepared::m#4
word mulf8s_prepared::m#5
word mulf8s_prepared::m#6
const nomodify signed byte* mulf8s_prepared::memA = (signed byte*)$fd
signed word mulf8s_prepared::return
signed word mulf8s_prepared::return#0
signed word mulf8s_prepared::return#1
signed word mulf8s_prepared::return#10
signed word mulf8s_prepared::return#2
signed word mulf8s_prepared::return#3
signed word mulf8s_prepared::return#4
signed word mulf8s_prepared::return#5
signed word mulf8s_prepared::return#6
signed word mulf8s_prepared::return#7
signed word mulf8s_prepared::return#8
signed word mulf8s_prepared::return#9
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#0
byte mulf8u_prepare::a#1
byte mulf8u_prepare::a#2
const nomodify byte* mulf8u_prepare::memA = (byte*)$fd
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0
byte mulf8u_prepared::b#1
const nomodify byte* mulf8u_prepared::memB = (byte*)$ff
const nomodify byte* mulf8u_prepared::resL = (byte*)$fe
word mulf8u_prepared::return
word mulf8u_prepared::return#0
word mulf8u_prepared::return#1
word mulf8u_prepared::return#2
word mulf8u_prepared::return#3
word mulf8u_prepared::return#4
void mulf_init()
bool~ mulf_init::$0
number~ mulf_init::$1
bool~ mulf_init::$10
bool~ mulf_init::$2
bool~ mulf_init::$3
byte~ mulf_init::$4
byte~ mulf_init::$5
word~ mulf_init::$6
bool~ mulf_init::$7
byte~ mulf_init::$8
bool~ mulf_init::$9
byte mulf_init::c
byte mulf_init::c#0
byte mulf_init::c#1
byte mulf_init::c#2
byte mulf_init::c#3
byte mulf_init::c#4
byte mulf_init::c#5
byte mulf_init::dir
byte mulf_init::dir#0
byte mulf_init::dir#1
byte mulf_init::dir#2
byte mulf_init::dir#3
byte mulf_init::dir#4
word mulf_init::sqr
word mulf_init::sqr#0
word mulf_init::sqr#1
word mulf_init::sqr#2
word mulf_init::sqr#3
word mulf_init::sqr#4
word mulf_init::sqr#5
word mulf_init::sqr#6
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#0
byte* mulf_init::sqr1_hi#1
byte* mulf_init::sqr1_hi#2
byte* mulf_init::sqr1_hi#3
byte* mulf_init::sqr1_hi#4
byte* mulf_init::sqr1_hi#5
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#0
byte* mulf_init::sqr1_lo#1
byte* mulf_init::sqr1_lo#2
byte* mulf_init::sqr1_lo#3
byte* mulf_init::sqr1_lo#4
byte* mulf_init::sqr1_lo#5
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#0
byte* mulf_init::sqr2_hi#1
byte* mulf_init::sqr2_hi#2
byte* mulf_init::sqr2_hi#3
byte* mulf_init::sqr2_hi#4
byte* mulf_init::sqr2_hi#5
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#0
byte* mulf_init::sqr2_lo#1
byte* mulf_init::sqr2_lo#2
byte* mulf_init::sqr2_lo#3
byte* mulf_init::sqr2_lo#4
byte* mulf_init::sqr2_lo#5
byte mulf_init::x_2
byte mulf_init::x_2#0
byte mulf_init::x_2#1
byte mulf_init::x_2#2
byte mulf_init::x_2#3
byte mulf_init::x_2#4
byte mulf_init::x_2#5
byte mulf_init::x_255
byte mulf_init::x_255#0
byte mulf_init::x_255#1
byte mulf_init::x_255#2
byte mulf_init::x_255#3
byte mulf_init::x_255#4
byte mulf_init::x_255#5
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
byte* print_char_at::at
byte* print_char_at::at#0
byte* print_char_at::at#1
byte* print_char_at::at#2
byte print_char_at::ch
byte print_char_at::ch#0
byte print_char_at::ch#1
byte print_char_at::ch#2
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
byte~ print_uchar_at::$0
number~ print_uchar_at::$2
byte*~ print_uchar_at::$3
byte* print_uchar_at::at
byte* print_uchar_at::at#0
byte* print_uchar_at::at#1
byte* print_uchar_at::at#2
byte* print_uchar_at::at#3
byte print_uchar_at::b
byte print_uchar_at::b#0
byte print_uchar_at::b#1
byte print_uchar_at::b#2
byte print_uchar_at::b#3
void print_uint_at(word print_uint_at::w , byte* print_uint_at::at)
byte~ print_uint_at::$0
byte~ print_uint_at::$2
byte*~ print_uint_at::$3
byte* print_uint_at::at
byte* print_uint_at::at#0
byte* print_uint_at::at#1
byte* print_uint_at::at#2
byte* print_uint_at::at#3
word print_uint_at::w
word print_uint_at::w#0
word print_uint_at::w#1
word print_uint_at::w#2
word print_uint_at::w#3
void print_ulong_at(dword print_ulong_at::dw , byte* print_ulong_at::at)
word~ print_ulong_at::$0
word~ print_ulong_at::$2
byte*~ print_ulong_at::$3
byte* print_ulong_at::at
byte* print_ulong_at::at#0
byte* print_ulong_at::at#1
byte* print_ulong_at::at#2
dword print_ulong_at::dw
dword print_ulong_at::dw#0
dword print_ulong_at::dw#1
dword print_ulong_at::dw#2
const signed byte* xs[8]  = { -$46, -$46, -$46, 0, 0, $46, $46, $46 }
const signed byte* ys[8]  = { -$46, 0, $46, -$46, $46, -$46, 0, $46 }

Fixing inline constructor with mulf8u_prepared::$0 = (byte)*mulf8u_prepared::memB w= (byte)*mulf8u_prepared::resL
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (unumber) 1 in mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Adding number conversion cast (unumber) 1 in mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Adding number conversion cast (unumber) $200 in mulf_init::$0 = mulf_init::sqr1_lo#2 != mulf_sqr1_lo+$200
Adding number conversion cast (unumber) 1 in mulf_init::$1 = mulf_init::c#1 & 1
Adding number conversion cast (unumber) mulf_init::$1 in mulf_init::$1 = mulf_init::c#1 & (unumber)1
Adding number conversion cast (unumber) 0 in mulf_init::$2 = mulf_init::$1 == 0
Adding number conversion cast (unumber) $1ff in mulf_init::$7 = mulf_init::sqr2_lo#2 != mulf_sqr2_lo+$1ff
Adding number conversion cast (unumber) 0 in mulf_init::$9 = mulf_init::x_255#1 == 0
Adding number conversion cast (unumber) $100 in *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
Adding number conversion cast (unumber) $1ff in *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+(unumber)$100)
Adding number conversion cast (unumber) $100 in *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
Adding number conversion cast (unumber) $1ff in *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+(unumber)$100)
Adding number conversion cast (unumber) 1 in mulf_init::dir#1 = 1
Adding number conversion cast (snumber) 0 in mulf8s_prepared::$1 = *mulf8s_prepared::memA < 0
Adding number conversion cast (snumber) 0 in mulf8s_prepared::$3 = mulf8s_prepared::b#5 < 0
Adding number conversion cast (unumber) $ffffffff in clock::$0 = $ffffffff - *CIA2_TIMER_AB
Adding number conversion cast (unumber) clock::$0 in clock::$0 = (unumber)$ffffffff - *CIA2_TIMER_AB
Adding number conversion cast (unumber) $ffffffff in *CIA2_TIMER_AB = $ffffffff
Adding number conversion cast (unumber) 2 in print_uint_at::$3 = print_uint_at::at#3 + 2
Adding number conversion cast (unumber) 4 in print_ulong_at::$3 = print_ulong_at::at#2 + 4
Adding number conversion cast (unumber) 4 in print_uchar_at::$0 = print_uchar_at::b#2 >> 4
Adding number conversion cast (unumber) $f in print_uchar_at::$2 = print_uchar_at::b#3 & $f
Adding number conversion cast (unumber) print_uchar_at::$2 in print_uchar_at::$2 = print_uchar_at::b#3 & (unumber)$f
Adding number conversion cast (unumber) 1 in print_uchar_at::$3 = print_uchar_at::at#3 + 1
Adding number conversion cast (unumber) $ff in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff
Adding number conversion cast (unumber) $3f8 in init::$1 = SCREEN + $3f8
Adding number conversion cast (unumber) $40 in init::$2 = SPRITE / $40
Adding number conversion cast (unumber) $ff in anim::$0 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
Adding number conversion cast (snumber) 2 in anim::$5 = anim::$4 * 2
Adding number conversion cast (snumber) anim::$5 in anim::$5 = anim::$4 * (snumber)2
Adding number conversion cast (snumber) 2 in anim::$7 = anim::$6 * 2
Adding number conversion cast (snumber) anim::$7 in anim::$7 = anim::$6 * (snumber)2
Adding number conversion cast (snumber) 2 in anim::$10 = anim::$9 * 2
Adding number conversion cast (snumber) anim::$10 in anim::$10 = anim::$9 * (snumber)2
Adding number conversion cast (snumber) 2 in anim::$12 = anim::$11 * 2
Adding number conversion cast (snumber) anim::$12 in anim::$12 = anim::$11 * (snumber)2
Adding number conversion cast (snumber) $18 in anim::$14 = anim::$29 + $18
Adding number conversion cast (snumber) anim::$14 in anim::$14 = anim::$29 + (snumber)$18
Adding number conversion cast (snumber) $95 in anim::$15 = anim::$14 + $95
Adding number conversion cast (snumber) anim::$15 in anim::$15 = anim::$14 + (snumber)$95
Adding number conversion cast (unumber) 2 in anim::$16 = anim::sprite_msb#3 / 2
Adding number conversion cast (unumber) anim::$16 in anim::$16 = anim::sprite_msb#3 / (unumber)2
Adding number conversion cast (unumber) 0 in anim::$18 = anim::$17 != 0
Adding number conversion cast (unumber) $59 in anim::$21 = anim::$20 + $59
Adding number conversion cast (unumber) anim::$21 in anim::$21 = anim::$20 + (unumber)$59
Adding number conversion cast (unumber) $33 in anim::$22 = anim::$21 + $33
Adding number conversion cast (unumber) anim::$22 in anim::$22 = anim::$21 + (unumber)$33
Adding number conversion cast (unumber) 2 in anim::$23 = anim::i#3 * 2
Adding number conversion cast (unumber) anim::$23 in anim::$23 = anim::i#3 * (unumber)2
Adding number conversion cast (unumber) $80 in anim::sprite_msb#2 = anim::sprite_msb#4 | $80
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast mulf_init::dir#1 = (unumber)1
Inlining cast *CIA2_TIMER_AB = (unumber)$ffffffff
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = (unumber)$ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (dword*) 56580
Simplifying constant pointer cast (byte*) 253
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant pointer cast (signed byte*) 253
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $40
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $200
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast $1ff
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast 1
Simplifying constant integer cast *mulf8u_prepared::memB
Simplifying constant integer cast *mulf8u_prepared::resL
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast $3f8
Simplifying constant integer cast $40
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $95
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $59
Simplifying constant integer cast $33
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $ff
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) $18
Finalized signed number type (signed word) $95
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $59
Finalized unsigned number type (byte) $33
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in mulf_init::$1 = mulf_init::c#1 & 1
Inferred type updated to dword in clock::$0 = $ffffffff - *CIA2_TIMER_AB
Inferred type updated to byte in print_uchar_at::$2 = print_uchar_at::b#3 & $f
Inferred type updated to signed word in anim::$5 = anim::$4 * 2
Inferred type updated to signed word in anim::$7 = anim::$6 * 2
Inferred type updated to signed word in anim::$10 = anim::$9 * 2
Inferred type updated to signed word in anim::$12 = anim::$11 * 2
Inferred type updated to signed byte in anim::$14 = anim::$29 + $18
Inferred type updated to signed word in anim::$15 = anim::$14 + $95
Inferred type updated to byte in anim::$16 = anim::sprite_msb#3 / 2
Inferred type updated to byte in anim::$21 = anim::$20 + $59
Inferred type updated to byte in anim::$22 = anim::$21 + $33
Inferred type updated to byte in anim::$23 = anim::i#3 * 2
Inversing boolean not [12] mulf_init::$3 = mulf_init::$1 != 0 from [11] mulf_init::$2 = mulf_init::$1 == 0
Inversing boolean not [40] mulf_init::$10 = mulf_init::x_255#1 != 0 from [39] mulf_init::$9 = mulf_init::x_255#1 == 0
Inversing boolean not [69] mulf8s_prepared::$2 = *mulf8s_prepared::memA >= 0 from [68] mulf8s_prepared::$1 = *mulf8s_prepared::memA < 0
Inversing boolean not [73] mulf8s_prepared::$4 = mulf8s_prepared::b#5 >= 0 from [72] mulf8s_prepared::$3 = mulf8s_prepared::b#5 < 0
Inversing boolean not [225] anim::$19 = anim::$17 == 0 from [224] anim::$18 = anim::$17 != 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias mulf_init::c#2 = mulf_init::c#3 
Alias mulf_init::sqr#4 = mulf_init::sqr#5 mulf_init::sqr#6 
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#4 mulf_init::sqr1_lo#5 
Alias mulf_init::sqr1_hi#3 = mulf_init::sqr1_hi#5 mulf_init::sqr1_hi#4 
Alias mulf_init::x_2#3 = mulf_init::x_2#4 mulf_init::x_2#5 
Alias mulf_init::sqr#1 = mulf_init::$6 
Alias mulf_init::c#1 = mulf_init::c#5 
Alias mulf_init::x_255#2 = mulf_init::x_255#3 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#3 mulf_init::sqr2_lo#5 
Alias mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#3 
Alias mulf_init::dir#2 = mulf_init::dir#3 
Alias mulf_init::x_255#1 = mulf_init::$8 mulf_init::x_255#5 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#5 
Alias mulf8u_prepared::return#0 = mulf8u_prepared::$0 mulf8u_prepared::return#3 mulf8u_prepared::return#1 
Alias mulf8u_prepared::return#2 = mulf8u_prepared::return#4 
Alias mulf8s_prepared::b#4 = mulf8s_prepared::b#7 mulf8s_prepared::b#6 
Alias mulf8s_prepared::m#0 = mulf8s_prepared::$0 mulf8s_prepared::m#3 
Alias mulf8s_prepared::$11 = mulf8s_prepared::$7 
Alias mulf8s_prepared::m#5 = mulf8s_prepared::m#6 
Alias mulf8s_prepared::$12 = mulf8s_prepared::$10 
Alias mulf8s_prepared::return#0 = mulf8s_prepared::return#6 mulf8s_prepared::return#1 
Alias clock::return#0 = clock::$0 clock::return#3 clock::return#1 
Alias print_uchar_at::b#0 = print_uint_at::$0 
Alias print_uint_at::w#2 = print_uint_at::w#3 
Alias print_uint_at::at#2 = print_uint_at::at#3 
Alias print_uchar_at::b#1 = print_uint_at::$2 
Alias print_uchar_at::at#1 = print_uint_at::$3 
Alias print_uint_at::w#0 = print_ulong_at::$0 
Alias print_ulong_at::dw#1 = print_ulong_at::dw#2 
Alias print_ulong_at::at#1 = print_ulong_at::at#2 
Alias print_uint_at::w#1 = print_ulong_at::$2 
Alias print_uint_at::at#1 = print_ulong_at::$3 
Alias print_uchar_at::b#2 = print_uchar_at::b#3 
Alias print_uchar_at::at#2 = print_uchar_at::at#3 
Alias print_char_at::at#1 = print_uchar_at::$3 
Alias init::sprites_ptr#0 = init::$1 
Alias anim::angle#2 = anim::angle#4 anim::angle#6 
Alias anim::cos_a#1 = anim::mulf8s_prepare1_a#0 anim::mulf8s_prepare1_a#1 anim::cos_a#13 anim::cos_a#12 anim::cos_a#11 anim::cos_a#10 anim::cos_a#9 anim::cos_a#8 anim::cos_a#7 anim::cos_a#6 anim::cos_a#5 anim::cos_a#3 anim::cos_a#4 
Alias anim::x#0 = anim::x#5 anim::x#3 anim::x#1 anim::x#9 anim::x#8 anim::x#7 anim::x#6 anim::x#4 anim::x#2 
Alias anim::y#0 = anim::y#7 anim::y#5 anim::y#3 anim::y#1 anim::y#8 anim::y#6 anim::y#4 anim::y#2 
Alias anim::sin_a#1 = anim::sin_a#5 anim::sin_a#6 anim::sin_a#4 anim::sin_a#3 anim::sin_a#2 anim::mulf8s_prepare2_a#0 anim::mulf8s_prepare2_a#1 anim::sin_a#13 anim::sin_a#12 anim::sin_a#11 anim::sin_a#10 anim::sin_a#8 anim::sin_a#9 
Alias anim::sprite_msb#10 = anim::sprite_msb#15 anim::sprite_msb#16 anim::sprite_msb#14 anim::sprite_msb#13 anim::sprite_msb#12 anim::sprite_msb#11 anim::sprite_msb#9 anim::sprite_msb#8 anim::sprite_msb#6 anim::sprite_msb#3 
Alias anim::i#10 = anim::i#14 anim::i#2 anim::i#13 anim::i#12 anim::i#11 anim::i#9 anim::i#8 anim::i#7 anim::i#6 anim::i#4 anim::i#5 
Alias anim::angle#10 = anim::angle#20 anim::angle#21 anim::angle#19 anim::angle#18 anim::angle#17 anim::angle#16 anim::angle#15 anim::angle#13 anim::angle#12 anim::angle#7 anim::angle#8 
Alias mulf8s_prepared::return#2 = mulf8s_prepared::return#7 
Alias anim::xr#0 = anim::$5 anim::xr#7 anim::xr#6 anim::xr#5 anim::xr#4 anim::xr#2 
Alias mulf8s_prepared::return#3 = mulf8s_prepared::return#8 
Alias anim::yr#0 = anim::$7 anim::yr#8 anim::yr#7 anim::yr#6 anim::yr#4 anim::yr#2 
Alias mulf8s_prepared::return#4 = mulf8s_prepared::return#9 
Alias mulf8s_prepared::return#10 = mulf8s_prepared::return#5 
Alias anim::xr#1 = anim::xr#3 
Alias anim::xpos#0 = anim::$15 anim::xpos#2 
Alias anim::sprite_msb#1 = anim::$16 anim::sprite_msb#4 
Alias anim::ypos#0 = anim::$22 
Alias anim::i2#0 = anim::$23 
Alias anim::yr#1 = anim::yr#5 
Alias anim::sprite_msb#5 = anim::sprite_msb#7 
Alias anim::angle#3 = anim::angle#5 
Alias clock::return#2 = clock::return#4 
Alias anim::angle#1 = anim::angle#14 anim::angle#11 
Alias anim::cyclecount#0 = anim::$27 
Successful SSA optimization Pass2AliasElimination
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#3 
Alias mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#3 
Alias mulf_init::c#1 = mulf_init::c#4 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#4 
Alias mulf_init::x_255#1 = mulf_init::x_255#4 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#4 
Alias mulf8s_prepared::b#4 = mulf8s_prepared::b#5 
Alias anim::yr#1 = anim::yr#3 
Alias anim::i#10 = anim::i#3 
Alias anim::xpos#0 = anim::xpos#1 
Alias anim::cos_a#1 = anim::cos_a#2 
Alias anim::angle#10 = anim::angle#3 
Alias anim::sin_a#1 = anim::sin_a#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values mulf8u_prepared::b#1 mulf8u_prepared::b#0
Identical Phi Values print_ulong_at::dw#1 print_ulong_at::dw#0
Identical Phi Values print_ulong_at::at#1 print_ulong_at::at#0
Identical Phi Values init::sprites_ptr#1 init::sprites_ptr#0
Identical Phi Values anim::angle#2 anim::angle#9
Identical Phi Values anim::cos_a#1 anim::cos_a#0
Identical Phi Values anim::sin_a#1 anim::sin_a#0
Identical Phi Values anim::angle#10 anim::angle#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition mulf_init::$0 [7] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2
Simple Condition mulf_init::$3 [11] if(mulf_init::$1!=0) goto mulf_init::@4
Simple Condition mulf_init::$7 [28] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@7
Simple Condition mulf_init::$10 [34] if(mulf_init::x_255#1!=0) goto mulf_init::@9
Simple Condition mulf8s_prepared::$2 [56] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1
Simple Condition mulf8s_prepared::$4 [59] if(mulf8s_prepared::b#4>=0) goto mulf8s_prepared::@2
Simple Condition init::$3 [122] if(init::i#1!=rangelast(0,7)) goto init::@1
Simple Condition anim::$0 [129] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2
Simple Condition anim::$19 [172] if(anim::$17==0) goto anim::@5
Simple Condition anim::$25 [183] if(anim::i#1!=rangelast(0,7)) goto anim::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [114] init::sprites_ptr#0 = SCREEN + $3f8
Constant right-side identified [117] init::$2 = SPRITE / $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant mulf_init::sqr#0 = 0
Constant mulf_init::x_2#0 = 0
Constant mulf_init::c#0 = 0
Constant mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Constant mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Constant mulf_init::x_255#0 = -1
Constant mulf_init::dir#0 = $ff
Constant mulf_init::sqr2_hi#0 = mulf_sqr2_hi
Constant mulf_init::sqr2_lo#0 = mulf_sqr2_lo
Constant mulf_init::dir#1 = 1
Constant init::sprites_ptr#0 = SCREEN+$3f8
Constant init::i#0 = 0
Constant init::$2 = SPRITE/$40
Constant anim::angle#0 = 0
Constant anim::sprite_msb#0 = 0
Constant anim::i#0 = 0
Constant print_ulong_at::at#0 = SCREEN
Successful SSA optimization Pass2ConstantIdentification
Constant print_uint_at::at#0 = print_ulong_at::at#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)init::$2 in [118] init::sprites_ptr#0[init::i#2] = (byte)init::$2
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [126] if(true) goto anim::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [120] init::i#1 = ++ init::i#2 to ++
Resolved ranged comparison value [122] if(init::i#1!=rangelast(0,7)) goto init::@1 to 8
Resolved ranged next value [181] anim::i#1 = ++ anim::i#10 to ++
Resolved ranged comparison value [183] if(anim::i#1!=rangelast(0,7)) goto anim::@4 to 8
Simplifying constant evaluating to zero CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES in [73] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
Simplifying constant evaluating to zero CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS in [74] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A in [74] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = 0|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [76] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS in [77] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
Successful SSA optimization PassNSimplifyExpressionWithZero
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [77] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused block anim::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused constant CIA_TIMER_CONTROL_STOP
Eliminating unused constant CIA_TIMER_CONTROL_CONTINUOUS
Eliminating unused constant CIA_TIMER_CONTROL_A_COUNT_CYCLES
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [99] if(init::i#1!=8) goto init::@1
Adding number conversion cast (unumber) 8 in [152] if(anim::i#1!=8) goto anim::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [73] print_uint_at::at#1 = print_ulong_at::at#0 + 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant print_uint_at::at#1 = print_ulong_at::at#0+4
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [44] mulf8s_prepared::$13 = (byte)mulf8s_prepared::b#4 keeping mulf8s_prepared::b#4
Inlining Noop Cast [48] mulf8s_prepared::return#0 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [50] mulf8s_prepared::$14 = (byte)*mulf8s_prepared::memA keeping *mulf8s_prepared::memA
Inlining Noop Cast [104] anim::cos_a#0 = (signed byte)COS[anim::angle#9] keeping COS[anim::angle#9]
Inlining Noop Cast [105] anim::sin_a#0 = (signed byte)SIN[anim::angle#9] keeping SIN[anim::angle#9]
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [109] mulf8u_prepare::a#0 = (byte)(signed byte)COS[anim::angle#9] keeping (signed byte)COS[anim::angle#9]
Inlining Noop Cast [113] mulf8s_prepared::return#2 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [118] mulf8s_prepared::return#3 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [121] mulf8u_prepare::a#1 = (byte)(signed byte)SIN[anim::angle#9] keeping (signed byte)SIN[anim::angle#9]
Inlining Noop Cast [125] mulf8s_prepared::return#4 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Inlining Noop Cast [131] mulf8s_prepared::return#10 = (signed word)mulf8s_prepared::m#4 keeping mulf8s_prepared::m#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [136] anim::$29 = (signed byte)anim::$13 keeping anim::$29
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [115] anim::xr#0 = anim::$4 * 2
Rewriting multiplication to use shift [120] anim::yr#0 = anim::$6 * 2
Rewriting multiplication to use shift [127] anim::$10 = anim::$9 * 2
Rewriting multiplication to use shift [133] anim::$12 = anim::$11 * 2
Rewriting division to use shift [139] anim::sprite_msb#1 = anim::sprite_msb#10 / 2
Rewriting multiplication to use shift [146] anim::i2#0 = anim::i#10 * 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings mulf_init::sqr#0
Inlining constant with var siblings mulf_init::x_2#0
Inlining constant with var siblings mulf_init::c#0
Inlining constant with var siblings mulf_init::sqr1_hi#0
Inlining constant with var siblings mulf_init::sqr1_lo#0
Inlining constant with var siblings mulf_init::x_255#0
Inlining constant with var siblings mulf_init::dir#0
Inlining constant with var siblings mulf_init::sqr2_hi#0
Inlining constant with var siblings mulf_init::sqr2_lo#0
Inlining constant with var siblings mulf_init::dir#1
Inlining constant with var siblings print_uint_at::at#0
Inlining constant with var siblings print_uint_at::at#1
Inlining constant with var siblings init::i#0
Inlining constant with var siblings anim::angle#0
Inlining constant with var siblings anim::sprite_msb#0
Inlining constant with var siblings anim::i#0
Constant inlined mulf_init::c#0 = 0
Constant inlined mulf_init::sqr2_lo#0 = mulf_sqr2_lo
Constant inlined mulf_init::sqr#0 = 0
Constant inlined anim::sprite_msb#0 = 0
Constant inlined print_uint_at::at#1 = SCREEN+4
Constant inlined init::i#0 = 0
Constant inlined mulf_init::sqr2_hi#0 = mulf_sqr2_hi
Constant inlined print_uint_at::at#0 = SCREEN
Constant inlined init::$2 = SPRITE/$40
Constant inlined anim::angle#0 = 0
Constant inlined anim::i#0 = 0
Constant inlined print_ulong_at::at#0 = SCREEN
Constant inlined mulf_init::dir#1 = 1
Constant inlined mulf_init::dir#0 = $ff
Constant inlined mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Constant inlined mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Constant inlined mulf_init::x_255#0 = -1
Constant inlined mulf_init::x_2#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment anim::xpos#0
Consolidated constant in assignment anim::ypos#0
Successful SSA optimization Pass2ConstantAdditionElimination
Alias anim::$21 = anim::$20 
Successful SSA optimization Pass2AliasElimination
Inlining Noop Cast [125] anim::$14 = (signed byte)anim::$29 keeping anim::$14
Successful SSA optimization Pass2NopCastInlining
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (word) $140
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3000
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting mulf_init::@11(between mulf_init::@2 and mulf_init::@4)
Added new block during phi lifting mulf_init::@12(between mulf_init::@7 and mulf_init::@9)
Added new block during phi lifting mulf8s_prepared::@6(between mulf8s_prepared::@5 and mulf8s_prepared::@1)
Added new block during phi lifting mulf8s_prepared::@7(between mulf8s_prepared::@1 and mulf8s_prepared::@2)
Added new block during phi lifting init::@3(between init::@1 and init::@1)
Added new block during phi lifting anim::@19(between anim::@5 and anim::@4)
Added new block during phi lifting anim::@20(between anim::@16 and anim::@5)
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@10
Adding NOP phi() at start of anim::@11
Adding NOP phi() at start of anim::@14
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@3
Adding NOP phi() at start of mulf_init::@10
Adding NOP phi() at start of print_ulong_at::@2
Adding NOP phi() at start of print_uint_at::@2
Adding NOP phi() at start of print_uchar_at::@2
CALL GRAPH
Calls in [main] to init:1 anim:3 
Calls in [init] to mulf_init:7 
Calls in [anim] to clock_start:20 mulf8u_prepare:26 mulf8s_prepared:30 mulf8s_prepared:35 mulf8u_prepare:39 mulf8s_prepared:43 mulf8s_prepared:49 clock:71 print_ulong_at:76 
Calls in [mulf8s_prepared] to mulf8u_prepared:138 
Calls in [print_ulong_at] to print_uint_at:160 print_uint_at:163 
Calls in [print_uint_at] to print_uchar_at:175 print_uchar_at:180 
Calls in [print_uchar_at] to print_char_at:189 print_char_at:195 

Created 27 initial phi equivalence classes
Coalesced [15] init::i#3 = init::i#1
Coalesced [29] mulf8s_prepared::b#10 = mulf8s_prepared::b#0
Coalesced [34] mulf8s_prepared::b#8 = mulf8s_prepared::b#1
Coalesced [42] mulf8s_prepared::b#11 = mulf8s_prepared::b#2
Coalesced [48] mulf8s_prepared::b#9 = mulf8s_prepared::b#3
Coalesced [59] anim::sprite_msb#19 = anim::sprite_msb#2
Coalesced [78] anim::angle#22 = anim::angle#1
Coalesced [79] anim::i#15 = anim::i#1
Coalesced [80] anim::sprite_msb#17 = anim::sprite_msb#5
Coalesced [81] anim::sprite_msb#18 = anim::sprite_msb#1
Coalesced [99] mulf_init::sqr2_lo#6 = mulf_init::sqr2_lo#1
Coalesced [100] mulf_init::x_255#6 = mulf_init::x_255#1
Coalesced [101] mulf_init::sqr2_hi#6 = mulf_init::sqr2_hi#1
Coalesced [102] mulf_init::dir#5 = mulf_init::dir#4
Coalesced (already) [103] mulf_init::dir#6 = mulf_init::dir#2
Coalesced [109] mulf_init::sqr#9 = mulf_init::sqr#2
Coalesced [110] mulf_init::x_2#8 = mulf_init::x_2#1
Coalesced [119] mulf_init::sqr1_lo#6 = mulf_init::sqr1_lo#1
Coalesced [120] mulf_init::c#6 = mulf_init::c#1
Coalesced [121] mulf_init::sqr#7 = mulf_init::sqr#1
Coalesced [122] mulf_init::sqr1_hi#6 = mulf_init::sqr1_hi#1
Coalesced [123] mulf_init::x_2#6 = mulf_init::x_2#2
Coalesced [124] mulf_init::sqr#8 = mulf_init::sqr#4
Coalesced (already) [125] mulf_init::x_2#7 = mulf_init::x_2#3
Coalesced [145] mulf8s_prepared::m#7 = mulf8s_prepared::m#1
Coalesced [151] mulf8s_prepared::m#10 = mulf8s_prepared::m#2
Coalesced [154] mulf8s_prepared::m#9 = mulf8s_prepared::m#5
Coalesced [155] mulf8s_prepared::m#8 = mulf8s_prepared::m#0
Coalesced [159] print_uint_at::w#4 = print_uint_at::w#0
Coalesced [162] print_uint_at::w#5 = print_uint_at::w#1
Coalesced [173] print_uchar_at::b#4 = print_uchar_at::b#0
Coalesced [174] print_uchar_at::at#4 = print_uchar_at::at#0
Coalesced [178] print_uchar_at::b#5 = print_uchar_at::b#1
Coalesced [179] print_uchar_at::at#5 = print_uchar_at::at#1
Coalesced [187] print_char_at::ch#3 = print_char_at::ch#0
Coalesced [188] print_char_at::at#3 = print_char_at::at#0
Coalesced [193] print_char_at::ch#4 = print_char_at::ch#1
Coalesced [194] print_char_at::at#4 = print_char_at::at#1
Coalesced down to 22 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label init::@3
Culled Empty Block label anim::@10
Culled Empty Block label anim::@11
Culled Empty Block label anim::@14
Culled Empty Block label anim::@19
Culled Empty Block label anim::@20
Culled Empty Block label mulf_init::@3
Culled Empty Block label mulf_init::@10
Culled Empty Block label mulf_init::@11
Culled Empty Block label mulf8s_prepared::@7
Culled Empty Block label mulf8s_prepared::@6
Culled Empty Block label print_ulong_at::@2
Culled Empty Block label print_uint_at::@2
Culled Empty Block label print_uchar_at::@2
Renumbering block mulf_init::@4 to mulf_init::@3
Renumbering block mulf_init::@5 to mulf_init::@4
Renumbering block mulf_init::@6 to mulf_init::@5
Renumbering block mulf_init::@7 to mulf_init::@6
Renumbering block mulf_init::@8 to mulf_init::@7
Renumbering block mulf_init::@9 to mulf_init::@8
Renumbering block mulf_init::@12 to mulf_init::@9
Renumbering block anim::@12 to anim::@10
Renumbering block anim::@13 to anim::@11
Renumbering block anim::@15 to anim::@12
Renumbering block anim::@16 to anim::@13
Renumbering block anim::@17 to anim::@14
Renumbering block anim::@18 to anim::@15
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of init
Adding NOP phi() at start of anim
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@9

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call anim 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

void init()
init: scope:[init]  from main
  [5] phi()
  [6] call mulf_init 
  to:init::@2
init::@2: scope:[init]  from init
  [7] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@2
  [8] init::i#2 = phi( init::@1/init::i#1, init::@2/0 )
  [9] init::sprites_ptr#0[init::i#2] = (byte)SPRITE/$40
  [10] SPRITES_COLOR[init::i#2] = GREEN
  [11] init::i#1 = ++ init::i#2
  [12] if(init::i#1!=8) goto init::@1
  to:init::@return
init::@return: scope:[init]  from init::@1
  [13] return 
  to:@return

void anim()
anim: scope:[anim]  from main::@1
  [14] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@15
  [15] anim::angle#9 = phi( anim/0, anim::@15/anim::angle#1 )
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@2
  [16] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2
  [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [18] call clock_start 
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@5
  [19] anim::sprite_msb#10 = phi( anim::@3/0, anim::@5/anim::sprite_msb#5 )
  [19] anim::i#10 = phi( anim::@3/0, anim::@5/anim::i#1 )
  [20] anim::x#0 = xs[anim::i#10]
  [21] anim::y#0 = ys[anim::i#10]
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@4
  [22] mulf8u_prepare::a#3 = (byte)(signed byte)COS[anim::angle#9]
  [23] call mulf8u_prepare 
  to:anim::@8
anim::@8: scope:[anim]  from anim::mulf8s_prepare1
  [24] mulf8s_prepared::b#0 = anim::x#0
  [25] call mulf8s_prepared 
  to:anim::@10
anim::@10: scope:[anim]  from anim::@8
  [26] anim::$4 = (signed word)mulf8s_prepared::m#4
  [27] anim::xr#0 = anim::$4 << 1
  [28] mulf8s_prepared::b#1 = anim::y#0
  [29] call mulf8s_prepared 
  to:anim::@11
anim::@11: scope:[anim]  from anim::@10
  [30] anim::$6 = (signed word)mulf8s_prepared::m#4
  [31] anim::yr#0 = anim::$6 << 1
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@11
  [32] mulf8u_prepare::a#4 = (byte)(signed byte)SIN[anim::angle#9]
  [33] call mulf8u_prepare 
  to:anim::@9
anim::@9: scope:[anim]  from anim::mulf8s_prepare2
  [34] mulf8s_prepared::b#2 = anim::y#0
  [35] call mulf8s_prepared 
  to:anim::@12
anim::@12: scope:[anim]  from anim::@9
  [36] anim::$9 = (signed word)mulf8s_prepared::m#4
  [37] anim::$10 = anim::$9 << 1
  [38] anim::xr#1 = anim::xr#0 - anim::$10
  [39] mulf8s_prepared::b#3 = anim::x#0
  [40] call mulf8s_prepared 
  to:anim::@13
anim::@13: scope:[anim]  from anim::@12
  [41] anim::$11 = (signed word)mulf8s_prepared::m#4
  [42] anim::$12 = anim::$11 << 1
  [43] anim::yr#1 = anim::yr#0 + anim::$12
  [44] anim::$14 = > anim::xr#1
  [45] anim::xpos#0 = (signed byte)anim::$14 + $18+$95
  [46] anim::sprite_msb#1 = anim::sprite_msb#10 >> 1
  [47] anim::$17 = > anim::xpos#0
  [48] if(anim::$17==0) goto anim::@5
  to:anim::@6
anim::@6: scope:[anim]  from anim::@13
  [49] anim::sprite_msb#2 = anim::sprite_msb#1 | $80
  to:anim::@5
anim::@5: scope:[anim]  from anim::@13 anim::@6
  [50] anim::sprite_msb#5 = phi( anim::@13/anim::sprite_msb#1, anim::@6/anim::sprite_msb#2 )
  [51] anim::$21 = > anim::yr#1
  [52] anim::ypos#0 = anim::$21 + $59+$33
  [53] anim::i2#0 = anim::i#10 << 1
  [54] anim::$24 = < anim::xpos#0
  [55] SPRITES_XPOS[anim::i2#0] = anim::$24
  [56] SPRITES_YPOS[anim::i2#0] = anim::ypos#0
  [57] anim::i#1 = ++ anim::i#10
  [58] if(anim::i#1!=8) goto anim::@4
  to:anim::@7
anim::@7: scope:[anim]  from anim::@5
  [59] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) = anim::sprite_msb#5
  [60] anim::angle#1 = ++ anim::angle#9
  [61] call clock 
  [62] clock::return#2 = clock::return#0
  to:anim::@14
anim::@14: scope:[anim]  from anim::@7
  [63] anim::$26 = clock::return#2
  [64] anim::cyclecount#0 = anim::$26 - CLOCKS_PER_INIT
  [65] print_ulong_at::dw#0 = anim::cyclecount#0
  [66] call print_ulong_at 
  to:anim::@15
anim::@15: scope:[anim]  from anim::@14
  [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE
  to:anim::@1

void mulf_init()
mulf_init: scope:[mulf_init]  from init
  [68] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [69] mulf_init::x_2#3 = phi( mulf_init/0, mulf_init::@3/mulf_init::x_2#2 )
  [69] mulf_init::sqr1_hi#2 = phi( mulf_init/mulf_sqr1_hi+1, mulf_init::@3/mulf_init::sqr1_hi#1 )
  [69] mulf_init::sqr#4 = phi( mulf_init/0, mulf_init::@3/mulf_init::sqr#1 )
  [69] mulf_init::c#2 = phi( mulf_init/0, mulf_init::@3/mulf_init::c#1 )
  [69] mulf_init::sqr1_lo#2 = phi( mulf_init/mulf_sqr1_lo+1, mulf_init::@3/mulf_init::sqr1_lo#1 )
  [70] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [71] mulf_init::dir#2 = phi( mulf_init::@1/$ff, mulf_init::@8/mulf_init::dir#4 )
  [71] mulf_init::sqr2_hi#2 = phi( mulf_init::@1/mulf_sqr2_hi, mulf_init::@8/mulf_init::sqr2_hi#1 )
  [71] mulf_init::x_255#2 = phi( mulf_init::@1/-1, mulf_init::@8/mulf_init::x_255#1 )
  [71] mulf_init::sqr2_lo#2 = phi( mulf_init::@1/mulf_sqr2_lo, mulf_init::@8/mulf_init::sqr2_lo#1 )
  [72] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [73] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100)
  [74] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [75] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [76] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2]
  [77] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2]
  [78] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2
  [79] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2
  [80] if(mulf_init::x_255#1!=0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [81] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [82] mulf_init::dir#4 = phi( mulf_init::@6/1, mulf_init::@9/mulf_init::dir#2 )
  [83] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [84] mulf_init::c#1 = ++ mulf_init::c#2
  [85] mulf_init::$1 = mulf_init::c#1 & 1
  [86] if(mulf_init::$1!=0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [87] mulf_init::x_2#1 = ++ mulf_init::x_2#3
  [88] mulf_init::sqr#2 = ++ mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [89] mulf_init::x_2#2 = phi( mulf_init::@2/mulf_init::x_2#3, mulf_init::@4/mulf_init::x_2#1 )
  [89] mulf_init::sqr#3 = phi( mulf_init::@2/mulf_init::sqr#4, mulf_init::@4/mulf_init::sqr#2 )
  [90] mulf_init::$4 = < mulf_init::sqr#3
  [91] *mulf_init::sqr1_lo#2 = mulf_init::$4
  [92] mulf_init::$5 = > mulf_init::sqr#3
  [93] *mulf_init::sqr1_hi#2 = mulf_init::$5
  [94] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2
  [95] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2
  [96] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2
  to:mulf_init::@1

void clock_start()
clock_start: scope:[clock_start]  from anim::@3
  [97] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0
  [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [99] *CIA2_TIMER_AB = $ffffffff
  [100] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [101] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [102] return 
  to:@return

void mulf8u_prepare(byte mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  [103] mulf8u_prepare::a#2 = phi( anim::mulf8s_prepare1/mulf8u_prepare::a#3, anim::mulf8s_prepare2/mulf8u_prepare::a#4 )
  [104] *mulf8u_prepare::memA = mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [106] return 
  to:@return

signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@10 anim::@12 anim::@8 anim::@9
  [107] mulf8s_prepared::b#4 = phi( anim::@10/mulf8s_prepared::b#1, anim::@12/mulf8s_prepared::b#3, anim::@8/mulf8s_prepared::b#0, anim::@9/mulf8s_prepared::b#2 )
  [108] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#4
  [109] call mulf8u_prepared 
  [110] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [111] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
  [112] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [113] mulf8s_prepared::$6 = > mulf8s_prepared::m#0
  [114] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#4
  [115] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [116] mulf8s_prepared::m#5 = phi( mulf8s_prepared::@3/mulf8s_prepared::m#1, mulf8s_prepared::@5/mulf8s_prepared::m#0 )
  [117] if(mulf8s_prepared::b#4>=0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [118] mulf8s_prepared::$9 = > mulf8s_prepared::m#5
  [119] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA
  [120] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [121] mulf8s_prepared::m#4 = phi( mulf8s_prepared::@1/mulf8s_prepared::m#5, mulf8s_prepared::@4/mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [122] return 
  to:@return

dword clock()
clock: scope:[clock]  from anim::@7
  [123] clock::return#0 = $ffffffff - *CIA2_TIMER_AB
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [124] return 
  to:@return

void print_ulong_at(dword print_ulong_at::dw , byte* print_ulong_at::at)
print_ulong_at: scope:[print_ulong_at]  from anim::@14
  [125] print_uint_at::w#0 = > print_ulong_at::dw#0
  [126] call print_uint_at 
  to:print_ulong_at::@1
print_ulong_at::@1: scope:[print_ulong_at]  from print_ulong_at
  [127] print_uint_at::w#1 = < print_ulong_at::dw#0
  [128] call print_uint_at 
  to:print_ulong_at::@return
print_ulong_at::@return: scope:[print_ulong_at]  from print_ulong_at::@1
  [129] return 
  to:@return

word mulf8u_prepared(byte mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [130] *mulf8u_prepared::memB = mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [132] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [133] return 
  to:@return

void print_uint_at(word print_uint_at::w , byte* print_uint_at::at)
print_uint_at: scope:[print_uint_at]  from print_ulong_at print_ulong_at::@1
  [134] print_uint_at::at#2 = phi( print_ulong_at/SCREEN, print_ulong_at::@1/SCREEN+4 )
  [134] print_uint_at::w#2 = phi( print_ulong_at/print_uint_at::w#0, print_ulong_at::@1/print_uint_at::w#1 )
  [135] print_uchar_at::b#0 = > print_uint_at::w#2
  [136] print_uchar_at::at#0 = print_uint_at::at#2
  [137] call print_uchar_at 
  to:print_uint_at::@1
print_uint_at::@1: scope:[print_uint_at]  from print_uint_at
  [138] print_uchar_at::b#1 = < print_uint_at::w#2
  [139] print_uchar_at::at#1 = print_uint_at::at#2 + 2
  [140] call print_uchar_at 
  to:print_uint_at::@return
print_uint_at::@return: scope:[print_uint_at]  from print_uint_at::@1
  [141] return 
  to:@return

void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
print_uchar_at: scope:[print_uchar_at]  from print_uint_at print_uint_at::@1
  [142] print_uchar_at::at#2 = phi( print_uint_at/print_uchar_at::at#0, print_uint_at::@1/print_uchar_at::at#1 )
  [142] print_uchar_at::b#2 = phi( print_uint_at/print_uchar_at::b#0, print_uint_at::@1/print_uchar_at::b#1 )
  [143] print_uchar_at::$0 = print_uchar_at::b#2 >> 4
  [144] print_char_at::ch#0 = print_hextab[print_uchar_at::$0]
  [145] print_char_at::at#0 = print_uchar_at::at#2
  [146] call print_char_at 
  to:print_uchar_at::@1
print_uchar_at::@1: scope:[print_uchar_at]  from print_uchar_at
  [147] print_uchar_at::$2 = print_uchar_at::b#2 & $f
  [148] print_char_at::at#1 = print_uchar_at::at#2 + 1
  [149] print_char_at::ch#1 = print_hextab[print_uchar_at::$2]
  [150] call print_char_at 
  to:print_uchar_at::@return
print_uchar_at::@return: scope:[print_uchar_at]  from print_uchar_at::@1
  [151] return 
  to:@return

void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
print_char_at: scope:[print_char_at]  from print_uchar_at print_uchar_at::@1
  [152] print_char_at::at#2 = phi( print_uchar_at/print_char_at::at#0, print_uchar_at::@1/print_char_at::at#1 )
  [152] print_char_at::ch#2 = phi( print_uchar_at/print_char_at::ch#0, print_uchar_at::@1/print_char_at::ch#1 )
  [153] *print_char_at::at#2 = print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [154] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void anim()
signed word~ anim::$10 2002.0
signed word~ anim::$11 2002.0
signed word~ anim::$12 2002.0
byte~ anim::$14 1001.0
byte~ anim::$17 2002.0
byte~ anim::$21 2002.0
byte~ anim::$24 2002.0
dword~ anim::$26 202.0
signed word~ anim::$4 2002.0
signed word~ anim::$6 2002.0
signed word~ anim::$9 2002.0
byte anim::angle
byte anim::angle#1 25.25
byte anim::angle#9 4.488888888888889
signed byte anim::cos_a
dword anim::cyclecount
dword anim::cyclecount#0 202.0
byte anim::i
byte anim::i#1 1501.5
byte anim::i#10 131.71052631578948
byte anim::i2
byte anim::i2#0 1001.0
signed byte anim::mulf8s_prepare1_a
signed byte anim::mulf8s_prepare2_a
signed byte anim::sin_a
byte anim::sprite_msb
byte anim::sprite_msb#1 1001.0
byte anim::sprite_msb#10 74.14814814814815
byte anim::sprite_msb#2 2002.0
byte anim::sprite_msb#5 344.8888888888889
signed byte anim::x
signed byte anim::x#0 158.05263157894737
signed word anim::xpos
signed word anim::xpos#0 333.6666666666667
signed word anim::xr
signed word anim::xr#0 182.0
signed word anim::xr#1 333.6666666666667
signed byte anim::y
signed byte anim::y#0 231.0
byte anim::ypos
byte anim::ypos#0 500.5
signed word anim::yr
signed word anim::yr#0 166.83333333333334
signed word anim::yr#1 250.25
dword clock()
dword clock::return
dword clock::return#0 367.33333333333337
dword clock::return#2 202.0
void clock_start()
void init()
byte init::i
byte init::i#1 151.5
byte init::i#2 134.66666666666666
byte* init::sprites_ptr
void main()
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 20002.0
byte~ mulf8s_prepared::$12 20002.0
byte~ mulf8s_prepared::$6 20002.0
byte~ mulf8s_prepared::$9 20002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 2002.0
signed byte mulf8s_prepared::b#1 2002.0
signed byte mulf8s_prepared::b#2 2002.0
signed byte mulf8s_prepared::b#3 2002.0
signed byte mulf8s_prepared::b#4 1400.5
word mulf8s_prepared::m
word mulf8s_prepared::m#0 10001.0
word mulf8s_prepared::m#1 20002.0
word mulf8s_prepared::m#2 20002.0
word mulf8s_prepared::m#4 3333.6666666666665
word mulf8s_prepared::m#5 12501.25
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#2 12003.0
byte mulf8u_prepare::a#3 2002.0
byte mulf8u_prepare::a#4 2002.0
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 110002.0
word mulf8u_prepared::return
word mulf8u_prepared::return#0 36667.33333333333
word mulf8u_prepared::return#2 20002.0
void mulf_init()
byte~ mulf_init::$1 2002.0
byte~ mulf_init::$4 2002.0
byte~ mulf_init::$5 2002.0
byte mulf_init::c
byte mulf_init::c#1 231.0
byte mulf_init::c#2 1001.0
byte mulf_init::dir
byte mulf_init::dir#2 375.375
byte mulf_init::dir#4 1001.0
word mulf_init::sqr
word mulf_init::sqr#1 1001.0
word mulf_init::sqr#2 2002.0
word mulf_init::sqr#3 834.1666666666667
word mulf_init::sqr#4 500.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 667.3333333333334
byte* mulf_init::sqr1_hi#2 250.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 2002.0
byte* mulf_init::sqr1_lo#2 286.0
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 333.6666666666667
byte* mulf_init::sqr2_hi#2 750.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 2002.0
byte* mulf_init::sqr2_lo#2 444.8888888888889
byte mulf_init::x_2
byte mulf_init::x_2#1 1001.0
byte mulf_init::x_2#2 500.5
byte mulf_init::x_2#3 600.5999999999999
byte mulf_init::x_255
byte mulf_init::x_255#1 600.5999999999999
byte mulf_init::x_255#2 800.8
void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
byte* print_char_at::at
byte* print_char_at::at#0 200002.0
byte* print_char_at::at#1 100001.0
byte* print_char_at::at#2 1200003.0
byte print_char_at::ch
byte print_char_at::ch#0 100001.0
byte print_char_at::ch#1 200002.0
byte print_char_at::ch#2 1200003.0
void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
byte~ print_uchar_at::$0 200002.0
byte~ print_uchar_at::$2 100001.0
byte* print_uchar_at::at
byte* print_uchar_at::at#0 20002.0
byte* print_uchar_at::at#1 20002.0
byte* print_uchar_at::at#2 36667.33333333333
byte print_uchar_at::b
byte print_uchar_at::b#0 10001.0
byte print_uchar_at::b#1 10001.0
byte print_uchar_at::b#2 44000.8
void print_uint_at(word print_uint_at::w , byte* print_uint_at::at)
byte* print_uint_at::at
byte* print_uint_at::at#2 4000.4
word print_uint_at::w
word print_uint_at::w#0 2002.0
word print_uint_at::w#1 2002.0
word print_uint_at::w#2 5501.0
void print_ulong_at(dword print_ulong_at::dw , byte* print_ulong_at::at)
byte* print_ulong_at::at
dword print_ulong_at::dw
dword print_ulong_at::dw#0 701.0

Initial phi equivalence classes
[ init::i#2 init::i#1 ]
[ anim::angle#9 anim::angle#1 ]
[ anim::i#10 anim::i#1 ]
[ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
[ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ]
[ print_uint_at::at#2 ]
[ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
[ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ]
[ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
[ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
Added variable anim::x#0 to live range equivalence class [ anim::x#0 ]
Added variable anim::y#0 to live range equivalence class [ anim::y#0 ]
Added variable anim::$4 to live range equivalence class [ anim::$4 ]
Added variable anim::xr#0 to live range equivalence class [ anim::xr#0 ]
Added variable anim::$6 to live range equivalence class [ anim::$6 ]
Added variable anim::yr#0 to live range equivalence class [ anim::yr#0 ]
Added variable anim::$9 to live range equivalence class [ anim::$9 ]
Added variable anim::$10 to live range equivalence class [ anim::$10 ]
Added variable anim::xr#1 to live range equivalence class [ anim::xr#1 ]
Added variable anim::$11 to live range equivalence class [ anim::$11 ]
Added variable anim::$12 to live range equivalence class [ anim::$12 ]
Added variable anim::yr#1 to live range equivalence class [ anim::yr#1 ]
Added variable anim::$14 to live range equivalence class [ anim::$14 ]
Added variable anim::xpos#0 to live range equivalence class [ anim::xpos#0 ]
Added variable anim::$17 to live range equivalence class [ anim::$17 ]
Added variable anim::$21 to live range equivalence class [ anim::$21 ]
Added variable anim::ypos#0 to live range equivalence class [ anim::ypos#0 ]
Added variable anim::i2#0 to live range equivalence class [ anim::i2#0 ]
Added variable anim::$24 to live range equivalence class [ anim::$24 ]
Added variable clock::return#2 to live range equivalence class [ clock::return#2 ]
Added variable anim::$26 to live range equivalence class [ anim::$26 ]
Added variable anim::cyclecount#0 to live range equivalence class [ anim::cyclecount#0 ]
Added variable print_ulong_at::dw#0 to live range equivalence class [ print_ulong_at::dw#0 ]
Added variable mulf_init::$1 to live range equivalence class [ mulf_init::$1 ]
Added variable mulf_init::$4 to live range equivalence class [ mulf_init::$4 ]
Added variable mulf_init::$5 to live range equivalence class [ mulf_init::$5 ]
Added variable mulf8u_prepared::b#0 to live range equivalence class [ mulf8u_prepared::b#0 ]
Added variable mulf8u_prepared::return#2 to live range equivalence class [ mulf8u_prepared::return#2 ]
Added variable mulf8s_prepared::$6 to live range equivalence class [ mulf8s_prepared::$6 ]
Added variable mulf8s_prepared::$11 to live range equivalence class [ mulf8s_prepared::$11 ]
Added variable mulf8s_prepared::$9 to live range equivalence class [ mulf8s_prepared::$9 ]
Added variable mulf8s_prepared::$12 to live range equivalence class [ mulf8s_prepared::$12 ]
Added variable clock::return#0 to live range equivalence class [ clock::return#0 ]
Added variable mulf8u_prepared::return#0 to live range equivalence class [ mulf8u_prepared::return#0 ]
Added variable print_uchar_at::$0 to live range equivalence class [ print_uchar_at::$0 ]
Added variable print_uchar_at::$2 to live range equivalence class [ print_uchar_at::$2 ]
Complete equivalence classes
[ init::i#2 init::i#1 ]
[ anim::angle#9 anim::angle#1 ]
[ anim::i#10 anim::i#1 ]
[ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
[ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
[ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
[ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ]
[ print_uint_at::at#2 ]
[ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
[ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ]
[ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
[ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
[ anim::x#0 ]
[ anim::y#0 ]
[ anim::$4 ]
[ anim::xr#0 ]
[ anim::$6 ]
[ anim::yr#0 ]
[ anim::$9 ]
[ anim::$10 ]
[ anim::xr#1 ]
[ anim::$11 ]
[ anim::$12 ]
[ anim::yr#1 ]
[ anim::$14 ]
[ anim::xpos#0 ]
[ anim::$17 ]
[ anim::$21 ]
[ anim::ypos#0 ]
[ anim::i2#0 ]
[ anim::$24 ]
[ clock::return#2 ]
[ anim::$26 ]
[ anim::cyclecount#0 ]
[ print_ulong_at::dw#0 ]
[ mulf_init::$1 ]
[ mulf_init::$4 ]
[ mulf_init::$5 ]
[ mulf8u_prepared::b#0 ]
[ mulf8u_prepared::return#2 ]
[ mulf8s_prepared::$6 ]
[ mulf8s_prepared::$11 ]
[ mulf8s_prepared::$9 ]
[ mulf8s_prepared::$12 ]
[ clock::return#0 ]
[ mulf8u_prepared::return#0 ]
[ print_uchar_at::$0 ]
[ print_uchar_at::$2 ]
Allocated zp[1]:2 [ init::i#2 init::i#1 ]
Allocated zp[1]:3 [ anim::angle#9 anim::angle#1 ]
Allocated zp[1]:4 [ anim::i#10 anim::i#1 ]
Allocated zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
Allocated zp[2]:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp[2]:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp[1]:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp[2]:12 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp[2]:15 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ]
Allocated zp[2]:18 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp[1]:20 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
Allocated zp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
Allocated zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ]
Allocated zp[2]:24 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ]
Allocated zp[2]:26 [ print_uint_at::at#2 ]
Allocated zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
Allocated zp[2]:29 [ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ]
Allocated zp[1]:31 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
Allocated zp[2]:32 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
Allocated zp[1]:34 [ anim::x#0 ]
Allocated zp[1]:35 [ anim::y#0 ]
Allocated zp[2]:36 [ anim::$4 ]
Allocated zp[2]:38 [ anim::xr#0 ]
Allocated zp[2]:40 [ anim::$6 ]
Allocated zp[2]:42 [ anim::yr#0 ]
Allocated zp[2]:44 [ anim::$9 ]
Allocated zp[2]:46 [ anim::$10 ]
Allocated zp[2]:48 [ anim::xr#1 ]
Allocated zp[2]:50 [ anim::$11 ]
Allocated zp[2]:52 [ anim::$12 ]
Allocated zp[2]:54 [ anim::yr#1 ]
Allocated zp[1]:56 [ anim::$14 ]
Allocated zp[2]:57 [ anim::xpos#0 ]
Allocated zp[1]:59 [ anim::$17 ]
Allocated zp[1]:60 [ anim::$21 ]
Allocated zp[1]:61 [ anim::ypos#0 ]
Allocated zp[1]:62 [ anim::i2#0 ]
Allocated zp[1]:63 [ anim::$24 ]
Allocated zp[4]:64 [ clock::return#2 ]
Allocated zp[4]:68 [ anim::$26 ]
Allocated zp[4]:72 [ anim::cyclecount#0 ]
Allocated zp[4]:76 [ print_ulong_at::dw#0 ]
Allocated zp[1]:80 [ mulf_init::$1 ]
Allocated zp[1]:81 [ mulf_init::$4 ]
Allocated zp[1]:82 [ mulf_init::$5 ]
Allocated zp[1]:83 [ mulf8u_prepared::b#0 ]
Allocated zp[2]:84 [ mulf8u_prepared::return#2 ]
Allocated zp[1]:86 [ mulf8s_prepared::$6 ]
Allocated zp[1]:87 [ mulf8s_prepared::$11 ]
Allocated zp[1]:88 [ mulf8s_prepared::$9 ]
Allocated zp[1]:89 [ mulf8s_prepared::$12 ]
Allocated zp[4]:90 [ clock::return#0 ]
Allocated zp[2]:94 [ mulf8u_prepared::return#0 ]
Allocated zp[1]:96 [ print_uchar_at::$0 ]
Allocated zp[1]:97 [ print_uchar_at::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:60 [ anim::$21 ] has ALU potential.
Statement [7] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [9] init::sprites_ptr#0[init::i#2] = (byte)SPRITE/$40 [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ init::i#2 init::i#1 ]
Statement [10] SPRITES_COLOR[init::i#2] = GREEN [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2 [ anim::angle#9 ] ( anim:3 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ anim::angle#9 anim::angle#1 ]
Statement [26] anim::$4 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ anim::i#10 anim::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ anim::x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:35 [ anim::y#0 ]
Statement [27] anim::xr#0 = anim::$4 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  ) always clobbers reg byte a 
Statement [30] anim::$6 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] { }  ) always clobbers reg byte a 
Statement [31] anim::yr#0 = anim::$6 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] { }  ) always clobbers reg byte a 
Statement [36] anim::$9 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [37] anim::$10 = anim::$9 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [38] anim::xr#1 = anim::xr#0 - anim::$10 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [41] anim::$11 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] { }  ) always clobbers reg byte a 
Statement [42] anim::$12 = anim::$11 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] { }  ) always clobbers reg byte a 
Statement [43] anim::yr#1 = anim::yr#0 + anim::$12 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] { }  ) always clobbers reg byte a 
Statement [45] anim::xpos#0 = (signed byte)anim::$14 + $18+$95 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:3 [ anim::angle#9 anim::angle#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:4 [ anim::i#10 anim::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
Statement [49] anim::sprite_msb#2 = anim::sprite_msb#1 | $80 [ anim::angle#9 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] { }  ) always clobbers reg byte a 
Statement [53] anim::i2#0 = anim::i#10 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ anim::ypos#0 ]
Statement [56] SPRITES_YPOS[anim::i2#0] = anim::ypos#0 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 ] { }  ) always clobbers reg byte a 
Statement [62] clock::return#2 = clock::return#0 [ anim::angle#1 clock::return#2 ] ( anim:3 [ anim::angle#1 clock::return#2 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [63] anim::$26 = clock::return#2 [ anim::angle#1 anim::$26 ] ( anim:3 [ anim::angle#1 anim::$26 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [64] anim::cyclecount#0 = anim::$26 - CLOCKS_PER_INIT [ anim::angle#1 anim::cyclecount#0 ] ( anim:3 [ anim::angle#1 anim::cyclecount#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [65] print_ulong_at::dw#0 = anim::cyclecount#0 [ anim::angle#1 print_ulong_at::dw#0 ] ( anim:3 [ anim::angle#1 print_ulong_at::dw#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE [ anim::angle#1 ] ( anim:3 [ anim::angle#1 ] { }  ) always clobbers reg byte a 
Statement [70] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [72] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [73] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) [ ] ( init:1::mulf_init:6 [ ] { }  ) always clobbers reg byte a 
Statement [74] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) [ ] ( init:1::mulf_init:6 [ ] { }  ) always clobbers reg byte a 
Statement [76] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [77] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [85] mulf_init::$1 = mulf_init::c#1 & 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [91] *mulf_init::sqr1_lo#2 = mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [93] *mulf_init::sqr1_hi#2 = mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [95] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [97] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [99] *CIA2_TIMER_AB = $ffffffff [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [100] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [101] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [110] mulf8u_prepared::return#2 = mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
Statement [111] mulf8s_prepared::m#0 = mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [112] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [114] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [119] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [123] clock::return#0 = $ffffffff - *CIA2_TIMER_AB [ clock::return#0 ] ( anim:3::clock:61 [ anim::angle#1 clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [125] print_uint_at::w#0 = > print_ulong_at::dw#0 [ print_ulong_at::dw#0 print_uint_at::w#0 ] ( anim:3::print_ulong_at:66 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } }  ) always clobbers reg byte a 
Statement [127] print_uint_at::w#1 = < print_ulong_at::dw#0 [ print_uint_at::w#1 ] ( anim:3::print_ulong_at:66 [ anim::angle#1 print_uint_at::w#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:34 [ anim::x#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:35 [ anim::y#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
Statement [132] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL [ mulf8u_prepared::return#0 ] ( anim:3::mulf8s_prepared:25::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:29::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:35::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:40::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [136] print_uchar_at::at#0 = print_uint_at::at#2 [ print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] ( anim:3::print_ulong_at:66::print_uint_at:126 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
Statement [139] print_uchar_at::at#1 = print_uint_at::at#2 + 2 [ print_uchar_at::b#1 print_uchar_at::at#1 ] ( anim:3::print_ulong_at:66::print_uint_at:126 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#1 print_uchar_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128 [ anim::angle#1 print_uchar_at::b#1 print_uchar_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } }  ) always clobbers reg byte a 
Statement [143] print_uchar_at::$0 = print_uchar_at::b#2 >> 4 [ print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  ) always clobbers reg byte a 
Statement [145] print_char_at::at#0 = print_uchar_at::at#2 [ print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
Statement [147] print_uchar_at::$2 = print_uchar_at::b#2 & $f [ print_uchar_at::at#2 print_uchar_at::$2 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a 
Statement [148] print_char_at::at#1 = print_uchar_at::at#2 + 1 [ print_uchar_at::$2 print_char_at::at#1 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:97 [ print_uchar_at::$2 ]
Statement [153] *print_char_at::at#2 = print_char_at::ch#2 [ ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137::print_char_at:146 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137::print_char_at:146 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140::print_char_at:146 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140::print_char_at:146 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137::print_char_at:150 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137::print_char_at:150 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140::print_char_at:150 [ anim::angle#1 print_ulong_at::dw#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140::print_char_at:150 [ anim::angle#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ anim::angle#9 anim::angle#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
Statement [7] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [9] init::sprites_ptr#0[init::i#2] = (byte)SPRITE/$40 [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] SPRITES_COLOR[init::i#2] = GREEN [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2 [ anim::angle#9 ] ( anim:3 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [22] mulf8u_prepare::a#3 = (byte)(signed byte)COS[anim::angle#9] [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8u_prepare::a#3 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8u_prepare::a#3 ] { { mulf8u_prepare::a#2 = mulf8u_prepare::a#3 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:4 [ anim::i#10 anim::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:34 [ anim::x#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:35 [ anim::y#0 ]
Statement [26] anim::$4 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  ) always clobbers reg byte a 
Statement [27] anim::xr#0 = anim::$4 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  ) always clobbers reg byte a 
Statement [30] anim::$6 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] { }  ) always clobbers reg byte a 
Statement [31] anim::yr#0 = anim::$6 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] { }  ) always clobbers reg byte a 
Statement [32] mulf8u_prepare::a#4 = (byte)(signed byte)SIN[anim::angle#9] [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] { { mulf8u_prepare::a#2 = mulf8u_prepare::a#4 } }  ) always clobbers reg byte y 
Statement [36] anim::$9 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [37] anim::$10 = anim::$9 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [38] anim::xr#1 = anim::xr#0 - anim::$10 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [41] anim::$11 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] { }  ) always clobbers reg byte a 
Statement [42] anim::$12 = anim::$11 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] { }  ) always clobbers reg byte a 
Statement [43] anim::yr#1 = anim::yr#0 + anim::$12 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] { }  ) always clobbers reg byte a 
Statement [45] anim::xpos#0 = (signed byte)anim::$14 + $18+$95 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [49] anim::sprite_msb#2 = anim::sprite_msb#1 | $80 [ anim::angle#9 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] { }  ) always clobbers reg byte a 
Statement [53] anim::i2#0 = anim::i#10 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] { }  ) always clobbers reg byte a 
Statement [56] SPRITES_YPOS[anim::i2#0] = anim::ypos#0 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 ] { }  ) always clobbers reg byte a 
Statement [58] if(anim::i#1!=8) goto anim::@4 [ anim::angle#9 anim::i#1 anim::sprite_msb#5 ] ( anim:3 [ anim::angle#9 anim::i#1 anim::sprite_msb#5 ] { }  ) always clobbers reg byte a 
Statement [59] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) = anim::sprite_msb#5 [ anim::angle#9 ] ( anim:3 [ anim::angle#9 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [62] clock::return#2 = clock::return#0 [ anim::angle#1 clock::return#2 ] ( anim:3 [ anim::angle#1 clock::return#2 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [63] anim::$26 = clock::return#2 [ anim::angle#1 anim::$26 ] ( anim:3 [ anim::angle#1 anim::$26 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [64] anim::cyclecount#0 = anim::$26 - CLOCKS_PER_INIT [ anim::angle#1 anim::cyclecount#0 ] ( anim:3 [ anim::angle#1 anim::cyclecount#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [65] print_ulong_at::dw#0 = anim::cyclecount#0 [ anim::angle#1 print_ulong_at::dw#0 ] ( anim:3 [ anim::angle#1 print_ulong_at::dw#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE [ anim::angle#1 ] ( anim:3 [ anim::angle#1 ] { }  ) always clobbers reg byte a 
Statement [70] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Statement [72] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Statement [73] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) [ ] ( init:1::mulf_init:6 [ ] { }  ) always clobbers reg byte a 
Statement [74] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) [ ] ( init:1::mulf_init:6 [ ] { }  ) always clobbers reg byte a 
Statement [76] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [77] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [85] mulf_init::$1 = mulf_init::c#1 & 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [91] *mulf_init::sqr1_lo#2 = mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [93] *mulf_init::sqr1_hi#2 = mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [95] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [97] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [99] *CIA2_TIMER_AB = $ffffffff [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [100] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [101] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [110] mulf8u_prepared::return#2 = mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [111] mulf8s_prepared::m#0 = mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [112] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [114] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [119] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [123] clock::return#0 = $ffffffff - *CIA2_TIMER_AB [ clock::return#0 ] ( anim:3::clock:61 [ anim::angle#1 clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [125] print_uint_at::w#0 = > print_ulong_at::dw#0 [ print_ulong_at::dw#0 print_uint_at::w#0 ] ( anim:3::print_ulong_at:66 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } }  ) always clobbers reg byte a 
Statement [127] print_uint_at::w#1 = < print_ulong_at::dw#0 [ print_uint_at::w#1 ] ( anim:3::print_ulong_at:66 [ anim::angle#1 print_uint_at::w#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [132] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL [ mulf8u_prepared::return#0 ] ( anim:3::mulf8s_prepared:25::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:29::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:35::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:40::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [136] print_uchar_at::at#0 = print_uint_at::at#2 [ print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] ( anim:3::print_ulong_at:66::print_uint_at:126 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } }  ) always clobbers reg byte a 
Statement [139] print_uchar_at::at#1 = print_uint_at::at#2 + 2 [ print_uchar_at::b#1 print_uchar_at::at#1 ] ( anim:3::print_ulong_at:66::print_uint_at:126 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#1 print_uchar_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128 [ anim::angle#1 print_uchar_at::b#1 print_uchar_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } }  ) always clobbers reg byte a 
Statement [143] print_uchar_at::$0 = print_uchar_at::b#2 >> 4 [ print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  ) always clobbers reg byte a 
Statement [145] print_char_at::at#0 = print_uchar_at::at#2 [ print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  ) always clobbers reg byte a 
Statement [147] print_uchar_at::$2 = print_uchar_at::b#2 & $f [ print_uchar_at::at#2 print_uchar_at::$2 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a 
Statement [148] print_char_at::at#1 = print_uchar_at::at#2 + 1 [ print_uchar_at::$2 print_char_at::at#1 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a 
Statement [153] *print_char_at::at#2 = print_char_at::ch#2 [ ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137::print_char_at:146 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137::print_char_at:146 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140::print_char_at:146 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140::print_char_at:146 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137::print_char_at:150 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137::print_char_at:150 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140::print_char_at:150 [ anim::angle#1 print_ulong_at::dw#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140::print_char_at:150 [ anim::angle#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a reg byte y 
Statement [7] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [9] init::sprites_ptr#0[init::i#2] = (byte)SPRITE/$40 [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Statement [10] SPRITES_COLOR[init::i#2] = GREEN [ init::i#2 ] ( init:1 [ init::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2 [ anim::angle#9 ] ( anim:3 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [20] anim::x#0 = xs[anim::i#10] [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [21] anim::y#0 = ys[anim::i#10] [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [22] mulf8u_prepare::a#3 = (byte)(signed byte)COS[anim::angle#9] [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8u_prepare::a#3 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8u_prepare::a#3 ] { { mulf8u_prepare::a#2 = mulf8u_prepare::a#3 } }  ) always clobbers reg byte y 
Statement [26] anim::$4 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::$4 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  ) always clobbers reg byte a 
Statement [27] anim::xr#0 = anim::$4 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  ) always clobbers reg byte a 
Statement [30] anim::$6 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::$6 ] { }  ) always clobbers reg byte a 
Statement [31] anim::yr#0 = anim::$6 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 ] { }  ) always clobbers reg byte a 
Statement [32] mulf8u_prepare::a#4 = (byte)(signed byte)SIN[anim::angle#9] [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 anim::yr#0 mulf8u_prepare::a#4 ] { { mulf8u_prepare::a#2 = mulf8u_prepare::a#4 } }  ) always clobbers reg byte y 
Statement [36] anim::$9 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$9 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [37] anim::$10 = anim::$9 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 anim::$10 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [38] anim::xr#1 = anim::xr#0 - anim::$10 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::yr#0 anim::xr#1 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [41] anim::$11 = (signed word)mulf8s_prepared::m#4 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$11 ] { }  ) always clobbers reg byte a 
Statement [42] anim::$12 = anim::$11 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 anim::$12 ] { }  ) always clobbers reg byte a 
Statement [43] anim::yr#1 = anim::yr#0 + anim::$12 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::xr#1 anim::yr#1 ] { }  ) always clobbers reg byte a 
Statement [45] anim::xpos#0 = (signed byte)anim::$14 + $18+$95 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#1 anim::xpos#0 ] { }  ) always clobbers reg byte a reg byte x 
Statement [49] anim::sprite_msb#2 = anim::sprite_msb#1 | $80 [ anim::angle#9 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::yr#1 anim::xpos#0 anim::sprite_msb#2 ] { }  ) always clobbers reg byte a 
Statement [53] anim::i2#0 = anim::i#10 << 1 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 anim::xpos#0 anim::ypos#0 anim::i2#0 ] { }  ) always clobbers reg byte a 
Statement [56] SPRITES_YPOS[anim::i2#0] = anim::ypos#0 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 ] ( anim:3 [ anim::angle#9 anim::i#10 anim::sprite_msb#5 ] { }  ) always clobbers reg byte a 
Statement [58] if(anim::i#1!=8) goto anim::@4 [ anim::angle#9 anim::i#1 anim::sprite_msb#5 ] ( anim:3 [ anim::angle#9 anim::i#1 anim::sprite_msb#5 ] { }  ) always clobbers reg byte a 
Statement [59] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) = anim::sprite_msb#5 [ anim::angle#9 ] ( anim:3 [ anim::angle#9 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [62] clock::return#2 = clock::return#0 [ anim::angle#1 clock::return#2 ] ( anim:3 [ anim::angle#1 clock::return#2 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [63] anim::$26 = clock::return#2 [ anim::angle#1 anim::$26 ] ( anim:3 [ anim::angle#1 anim::$26 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [64] anim::cyclecount#0 = anim::$26 - CLOCKS_PER_INIT [ anim::angle#1 anim::cyclecount#0 ] ( anim:3 [ anim::angle#1 anim::cyclecount#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [65] print_ulong_at::dw#0 = anim::cyclecount#0 [ anim::angle#1 print_ulong_at::dw#0 ] ( anim:3 [ anim::angle#1 print_ulong_at::dw#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE [ anim::angle#1 ] ( anim:3 [ anim::angle#1 ] { }  ) always clobbers reg byte a 
Statement [70] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Statement [72] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Statement [73] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) [ ] ( init:1::mulf_init:6 [ ] { }  ) always clobbers reg byte a 
Statement [74] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) [ ] ( init:1::mulf_init:6 [ ] { }  ) always clobbers reg byte a 
Statement [76] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [77] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [79] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( init:1::mulf_init:6 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [85] mulf_init::$1 = mulf_init::c#1 & 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [91] *mulf_init::sqr1_lo#2 = mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [93] *mulf_init::sqr1_hi#2 = mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [95] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( init:1::mulf_init:6 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [97] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [99] *CIA2_TIMER_AB = $ffffffff [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [100] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement [101] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( anim:3::clock_start:18 [ anim::angle#9 ] { }  ) always clobbers reg byte a 
Statement asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  } always clobbers reg byte a 
Statement [110] mulf8u_prepared::return#2 = mulf8u_prepared::return#0 [ mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#2 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [111] mulf8s_prepared::m#0 = mulf8u_prepared::return#2 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [112] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [114] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#4 [ mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8s_prepared::m#0 mulf8s_prepared::$11 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [119] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA [ mulf8s_prepared::m#5 mulf8s_prepared::$12 ] ( anim:3::mulf8s_prepared:25 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } }  anim:3::mulf8s_prepared:29 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:35 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } }  anim:3::mulf8s_prepared:40 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::m#5 mulf8s_prepared::$12 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } }  ) always clobbers reg byte a 
Statement [123] clock::return#0 = $ffffffff - *CIA2_TIMER_AB [ clock::return#0 ] ( anim:3::clock:61 [ anim::angle#1 clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [125] print_uint_at::w#0 = > print_ulong_at::dw#0 [ print_ulong_at::dw#0 print_uint_at::w#0 ] ( anim:3::print_ulong_at:66 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } }  ) always clobbers reg byte a 
Statement [127] print_uint_at::w#1 = < print_ulong_at::dw#0 [ print_uint_at::w#1 ] ( anim:3::print_ulong_at:66 [ anim::angle#1 print_uint_at::w#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } }  ) always clobbers reg byte a 
Statement asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  } always clobbers reg byte a reg byte x 
Statement [132] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL [ mulf8u_prepared::return#0 ] ( anim:3::mulf8s_prepared:25::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#0 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:29::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::y#0 anim::xr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#1 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:35::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::x#0 anim::xr#0 anim::yr#0 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#2 = mulf8s_prepared::b#4 anim::y#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  anim:3::mulf8s_prepared:40::mulf8u_prepared:109 [ anim::angle#9 anim::i#10 anim::sprite_msb#10 anim::yr#0 anim::xr#1 mulf8s_prepared::b#4 mulf8u_prepared::return#0 ] { { mulf8s_prepared::b#3 = mulf8s_prepared::b#4 anim::x#0 } { mulf8u_prepared::return#0 = mulf8u_prepared::return#2 } }  ) always clobbers reg byte a 
Statement [136] print_uchar_at::at#0 = print_uint_at::at#2 [ print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] ( anim:3::print_ulong_at:66::print_uint_at:126 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#0 print_uchar_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } }  ) always clobbers reg byte a 
Statement [139] print_uchar_at::at#1 = print_uint_at::at#2 + 2 [ print_uchar_at::b#1 print_uchar_at::at#1 ] ( anim:3::print_ulong_at:66::print_uint_at:126 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#1 print_uchar_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128 [ anim::angle#1 print_uchar_at::b#1 print_uchar_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } }  ) always clobbers reg byte a 
Statement [143] print_uchar_at::$0 = print_uchar_at::b#2 >> 4 [ print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 print_uchar_at::$0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  ) always clobbers reg byte a 
Statement [145] print_char_at::at#0 = print_uchar_at::at#2 [ print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  ) always clobbers reg byte a 
Statement [147] print_uchar_at::$2 = print_uchar_at::b#2 & $f [ print_uchar_at::at#2 print_uchar_at::$2 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::at#2 print_uchar_at::$2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a 
Statement [148] print_char_at::at#1 = print_uchar_at::at#2 + 1 [ print_uchar_at::$2 print_char_at::at#1 ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140 [ anim::angle#1 print_uchar_at::$2 print_char_at::at#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a 
Statement [153] *print_char_at::at#2 = print_char_at::ch#2 [ ] ( anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137::print_char_at:146 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137::print_char_at:146 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uint_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140::print_char_at:146 [ anim::angle#1 print_ulong_at::dw#0 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140::print_char_at:146 [ anim::angle#1 print_uchar_at::b#2 print_uchar_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_char_at::ch#0 = print_char_at::ch#2 } { print_char_at::at#0 = print_char_at::at#2 print_uchar_at::at#2 print_uchar_at::at#1 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:137::print_char_at:150 [ anim::angle#1 print_ulong_at::dw#0 print_uint_at::w#2 print_uint_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:137::print_char_at:150 [ anim::angle#1 print_uint_at::w#2 print_uint_at::at#2 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#0 = print_uchar_at::b#2 } { print_uchar_at::at#0 = print_uchar_at::at#2 print_uint_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:126::print_uchar_at:140::print_char_at:150 [ anim::angle#1 print_ulong_at::dw#0 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#0 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  anim:3::print_ulong_at:66::print_uint_at:128::print_uchar_at:140::print_char_at:150 [ anim::angle#1 ] { { print_ulong_at::dw#0 = anim::cyclecount#0 } { print_uint_at::w#1 = print_uint_at::w#2 } { print_uchar_at::b#1 = print_uchar_at::b#2 } { print_uchar_at::at#1 = print_uchar_at::at#2 } { print_char_at::ch#1 = print_char_at::ch#2 } { print_char_at::at#1 = print_char_at::at#2 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ init::i#2 init::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ anim::angle#9 anim::angle#1 ] : zp[1]:3 , 
Potential registers zp[1]:4 [ anim::i#10 anim::i#1 ] : zp[1]:4 , 
Potential registers zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ] : zp[1]:5 , 
Potential registers zp[2]:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp[1]:11 , reg byte x , 
Potential registers zp[2]:12 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp[1]:14 , reg byte x , 
Potential registers zp[2]:15 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ] : zp[1]:17 , reg byte x , 
Potential registers zp[2]:18 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ] : zp[1]:21 , reg byte y , 
Potential registers zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ print_uint_at::at#2 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[2]:29 [ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[2]:32 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ anim::x#0 ] : zp[1]:34 , 
Potential registers zp[1]:35 [ anim::y#0 ] : zp[1]:35 , 
Potential registers zp[2]:36 [ anim::$4 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ anim::xr#0 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ anim::$6 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ anim::yr#0 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ anim::$9 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ anim::$10 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ anim::xr#1 ] : zp[2]:48 , 
Potential registers zp[2]:50 [ anim::$11 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ anim::$12 ] : zp[2]:52 , 
Potential registers zp[2]:54 [ anim::yr#1 ] : zp[2]:54 , 
Potential registers zp[1]:56 [ anim::$14 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:57 [ anim::xpos#0 ] : zp[2]:57 , 
Potential registers zp[1]:59 [ anim::$17 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ anim::$21 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:61 [ anim::ypos#0 ] : zp[1]:61 , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ anim::i2#0 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ anim::$24 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:64 [ clock::return#2 ] : zp[4]:64 , 
Potential registers zp[4]:68 [ anim::$26 ] : zp[4]:68 , 
Potential registers zp[4]:72 [ anim::cyclecount#0 ] : zp[4]:72 , 
Potential registers zp[4]:76 [ print_ulong_at::dw#0 ] : zp[4]:76 , 
Potential registers zp[1]:80 [ mulf_init::$1 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:81 [ mulf_init::$4 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ mulf_init::$5 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ mulf8u_prepared::b#0 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:84 [ mulf8u_prepared::return#2 ] : zp[2]:84 , 
Potential registers zp[1]:86 [ mulf8s_prepared::$6 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ mulf8s_prepared::$11 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ mulf8s_prepared::$9 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:89 [ mulf8s_prepared::$12 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:90 [ clock::return#0 ] : zp[4]:90 , 
Potential registers zp[2]:94 [ mulf8u_prepared::return#0 ] : zp[2]:94 , 
Potential registers zp[1]:96 [ print_uchar_at::$0 ] : zp[1]:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:97 [ print_uchar_at::$2 ] : zp[1]:97 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char_at] 1,500,006: zp[1]:31 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ] 1,500,006: zp[2]:32 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] 
Uplift Scope [print_uchar_at] 200,002: zp[1]:96 [ print_uchar_at::$0 ] 100,001: zp[1]:97 [ print_uchar_at::$2 ] 76,671.33: zp[2]:29 [ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ] 64,002.8: zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ] 
Uplift Scope [mulf8u_prepared] 110,002: zp[1]:83 [ mulf8u_prepared::b#0 ] 36,667.33: zp[2]:94 [ mulf8u_prepared::return#0 ] 20,002: zp[2]:84 [ mulf8u_prepared::return#2 ] 
Uplift Scope [mulf8s_prepared] 65,839.92: zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] 20,002: zp[1]:86 [ mulf8s_prepared::$6 ] 20,002: zp[1]:87 [ mulf8s_prepared::$11 ] 20,002: zp[1]:88 [ mulf8s_prepared::$9 ] 20,002: zp[1]:89 [ mulf8s_prepared::$12 ] 9,408.5: zp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ] 
Uplift Scope [anim] 3,422.04: zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ] 2,002: zp[2]:36 [ anim::$4 ] 2,002: zp[2]:40 [ anim::$6 ] 2,002: zp[2]:44 [ anim::$9 ] 2,002: zp[2]:46 [ anim::$10 ] 2,002: zp[2]:50 [ anim::$11 ] 2,002: zp[2]:52 [ anim::$12 ] 2,002: zp[1]:59 [ anim::$17 ] 2,002: zp[1]:60 [ anim::$21 ] 2,002: zp[1]:63 [ anim::$24 ] 1,633.21: zp[1]:4 [ anim::i#10 anim::i#1 ] 1,001: zp[1]:56 [ anim::$14 ] 1,001: zp[1]:62 [ anim::i2#0 ] 500.5: zp[1]:61 [ anim::ypos#0 ] 333.67: zp[2]:48 [ anim::xr#1 ] 333.67: zp[2]:57 [ anim::xpos#0 ] 250.25: zp[2]:54 [ anim::yr#1 ] 231: zp[1]:35 [ anim::y#0 ] 202: zp[4]:68 [ anim::$26 ] 202: zp[4]:72 [ anim::cyclecount#0 ] 182: zp[2]:38 [ anim::xr#0 ] 166.83: zp[2]:42 [ anim::yr#0 ] 158.05: zp[1]:34 [ anim::x#0 ] 29.74: zp[1]:3 [ anim::angle#9 anim::angle#1 ] 
Uplift Scope [mulf_init] 4,337.67: zp[2]:18 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 2,446.89: zp[2]:12 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 2,288: zp[2]:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 2,102.1: zp[1]:11 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 2,002: zp[1]:80 [ mulf_init::$1 ] 2,002: zp[1]:81 [ mulf_init::$4 ] 2,002: zp[1]:82 [ mulf_init::$5 ] 1,401.4: zp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 1,376.38: zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ] 1,232: zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ] 1,084.42: zp[2]:15 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 917.58: zp[2]:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [mulf8u_prepare] 16,007: zp[1]:20 [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] 
Uplift Scope [print_uint_at] 9,505: zp[2]:24 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ] 4,000.4: zp[2]:26 [ print_uint_at::at#2 ] 
Uplift Scope [print_ulong_at] 701: zp[4]:76 [ print_ulong_at::dw#0 ] 
Uplift Scope [clock] 367.33: zp[4]:90 [ clock::return#0 ] 202: zp[4]:64 [ clock::return#2 ] 
Uplift Scope [init] 286.17: zp[1]:2 [ init::i#2 init::i#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [clock_start] 
Uplift Scope [RADIX] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print_char_at] best 43977 combination reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ] zp[2]:32 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] 
Uplifting [print_uchar_at] best 43969 combination reg byte a [ print_uchar_at::$0 ] reg byte y [ print_uchar_at::$2 ] zp[2]:29 [ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ] zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ] 
Uplifting [mulf8u_prepared] best 43963 combination reg byte a [ mulf8u_prepared::b#0 ] zp[2]:94 [ mulf8u_prepared::return#0 ] zp[2]:84 [ mulf8u_prepared::return#2 ] 
Uplifting [mulf8s_prepared] best 43939 combination zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] reg byte a [ mulf8s_prepared::$6 ] reg byte a [ mulf8s_prepared::$11 ] reg byte a [ mulf8s_prepared::$9 ] reg byte a [ mulf8s_prepared::$12 ] zp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [anim] best 42539 combination zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ] zp[2]:36 [ anim::$4 ] zp[2]:40 [ anim::$6 ] zp[2]:44 [ anim::$9 ] zp[2]:46 [ anim::$10 ] zp[2]:50 [ anim::$11 ] zp[2]:52 [ anim::$12 ] reg byte a [ anim::$17 ] reg byte a [ anim::$21 ] reg byte a [ anim::$24 ] zp[1]:4 [ anim::i#10 anim::i#1 ] zp[1]:56 [ anim::$14 ] zp[1]:62 [ anim::i2#0 ] zp[1]:61 [ anim::ypos#0 ] zp[2]:48 [ anim::xr#1 ] zp[2]:57 [ anim::xpos#0 ] zp[2]:54 [ anim::yr#1 ] zp[1]:35 [ anim::y#0 ] zp[4]:68 [ anim::$26 ] zp[4]:72 [ anim::cyclecount#0 ] zp[2]:38 [ anim::xr#0 ] zp[2]:42 [ anim::yr#0 ] zp[1]:34 [ anim::x#0 ] zp[1]:3 [ anim::angle#9 anim::angle#1 ] 
Limited combination testing to 100 combinations of 3840 possible.
Uplifting [mulf_init] best 42309 combination zp[2]:18 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] zp[2]:12 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp[2]:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$1 ] reg byte a [ mulf_init::$4 ] reg byte a [ mulf_init::$5 ] zp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ] zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ] zp[2]:15 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp[2]:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [mulf8u_prepare] best 41706 combination reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ] 
Uplifting [print_uint_at] best 41706 combination zp[2]:24 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ] zp[2]:26 [ print_uint_at::at#2 ] 
Uplifting [print_ulong_at] best 41706 combination zp[4]:76 [ print_ulong_at::dw#0 ] 
Uplifting [clock] best 41706 combination zp[4]:90 [ clock::return#0 ] zp[4]:64 [ clock::return#2 ] 
Uplifting [init] best 41556 combination reg byte x [ init::i#2 init::i#1 ] 
Uplifting [MOS6526_CIA] best 41556 combination 
Uplifting [MOS6569_VICII] best 41556 combination 
Uplifting [MOS6581_SID] best 41556 combination 
Uplifting [clock_start] best 41556 combination 
Uplifting [RADIX] best 41556 combination 
Uplifting [main] best 41556 combination 
Uplifting [] best 41556 combination 
Attempting to uplift remaining variables inzp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
Uplifting [print_uchar_at] best 41556 combination zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ] 
Attempting to uplift remaining variables inzp[1]:21 [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
Uplifting [mulf8s_prepared] best 40355 combination reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ] 
Attempting to uplift remaining variables inzp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
Uplifting [anim] best 40355 combination zp[1]:5 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ] 
Attempting to uplift remaining variables inzp[1]:4 [ anim::i#10 anim::i#1 ]
Uplifting [anim] best 40355 combination zp[1]:4 [ anim::i#10 anim::i#1 ] 
Attempting to uplift remaining variables inzp[1]:14 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 40235 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ]
Uplifting [mulf_init] best 40235 combination zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ] 
Attempting to uplift remaining variables inzp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ]
Uplifting [mulf_init] best 40235 combination zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ] 
Attempting to uplift remaining variables inzp[1]:56 [ anim::$14 ]
Uplifting [anim] best 39635 combination reg byte a [ anim::$14 ] 
Attempting to uplift remaining variables inzp[1]:62 [ anim::i2#0 ]
Uplifting [anim] best 38935 combination reg byte x [ anim::i2#0 ] 
Attempting to uplift remaining variables inzp[1]:61 [ anim::ypos#0 ]
Uplifting [anim] best 38735 combination reg byte y [ anim::ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:35 [ anim::y#0 ]
Uplifting [anim] best 38735 combination zp[1]:35 [ anim::y#0 ] 
Attempting to uplift remaining variables inzp[1]:34 [ anim::x#0 ]
Uplifting [anim] best 38735 combination zp[1]:34 [ anim::x#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ anim::angle#9 anim::angle#1 ]
Uplifting [anim] best 38735 combination zp[1]:3 [ anim::angle#9 anim::angle#1 ] 
Coalescing zero page register [ zp[2]:26 [ print_uint_at::at#2 ] ] with [ zp[2]:29 [ print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 ] ] with [ zp[2]:36 [ anim::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 ] ] with [ zp[2]:40 [ anim::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 ] ] with [ zp[2]:44 [ anim::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 ] ] with [ zp[2]:50 [ anim::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 ] ] with [ zp[2]:84 [ mulf8u_prepared::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ anim::xr#0 ] ] with [ zp[2]:48 [ anim::xr#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:42 [ anim::yr#0 ] ] with [ zp[2]:54 [ anim::yr#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:64 [ clock::return#2 ] ] with [ zp[4]:68 [ anim::$26 ] ] - score: 1
Coalescing zero page register [ zp[4]:64 [ clock::return#2 anim::$26 ] ] with [ zp[4]:90 [ clock::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:72 [ anim::cyclecount#0 ] ] with [ zp[4]:76 [ print_ulong_at::dw#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 ] ] with [ zp[2]:46 [ anim::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 ] ] with [ zp[2]:52 [ anim::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 ] ] with [ zp[2]:94 [ mulf8u_prepared::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:64 [ clock::return#2 anim::$26 clock::return#0 ] ] with [ zp[4]:72 [ anim::cyclecount#0 print_ulong_at::dw#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:8 [ mulf_init::c#2 mulf_init::c#1 ] ] with [ zp[1]:3 [ anim::angle#9 anim::angle#1 ] ]
Coalescing zero page register [ zp[1]:17 [ mulf_init::dir#2 mulf_init::dir#4 ] ] with [ zp[1]:4 [ anim::i#10 anim::i#1 ] ]
Coalescing zero page register [ zp[2]:22 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 ] ] with [ zp[2]:6 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ]
Coalescing zero page register [ zp[2]:24 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 ] ] with [ zp[2]:9 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ]
Coalescing zero page register [ zp[2]:26 [ print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 ] ] with [ zp[2]:12 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Coalescing zero page register [ zp[2]:32 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] ] with [ zp[2]:15 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ]
Coalescing zero page register [ zp[1]:34 [ anim::x#0 ] ] with [ zp[1]:28 [ print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ] ]
Coalescing zero page register [ zp[2]:38 [ anim::xr#0 anim::xr#1 ] ] with [ zp[2]:18 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp[2]:42 [ anim::yr#0 anim::yr#1 ] ] with [ zp[2]:24 [ print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ]
Coalescing zero page register [ zp[2]:57 [ anim::xpos#0 ] ] with [ zp[2]:26 [ print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Allocated (was zp[1]:5) zp[1]:2 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
Allocated (was zp[1]:8) zp[1]:3 [ mulf_init::c#2 mulf_init::c#1 anim::angle#9 anim::angle#1 ]
Allocated (was zp[1]:17) zp[1]:4 [ mulf_init::dir#2 mulf_init::dir#4 anim::i#10 anim::i#1 ]
Allocated (was zp[2]:22) zp[2]:5 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated (was zp[2]:32) zp[2]:7 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated (was zp[1]:34) zp[1]:9 [ anim::x#0 print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
Allocated (was zp[1]:35) zp[1]:10 [ anim::y#0 ]
Allocated (was zp[2]:38) zp[2]:11 [ anim::xr#0 anim::xr#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated (was zp[2]:42) zp[2]:13 [ anim::yr#0 anim::yr#1 print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated (was zp[2]:57) zp[2]:15 [ anim::xpos#0 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated (was zp[4]:64) zp[4]:17 [ clock::return#2 anim::$26 clock::return#0 anim::cyclecount#0 print_ulong_at::dw#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// 2D rotattion of 8 sprites 
  // Upstart
  // Commodore 64 PRG executable file
.file [name="rotate.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB = $10
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  .label SCREEN = $400
  .label COS = SIN+$40
.segment Code
  // main
// sin(x) = cos(x+PI/2)
main: {
    // asm { sei  }
    sei
    // [1] call init 
    // [5] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call anim 
    // [14] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from___b1:
    jsr anim
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // init
init: {
    .label sprites_ptr = SCREEN+$3f8
    // [6] call mulf_init 
    // [68] phi from init to mulf_init [phi:init->mulf_init]
  mulf_init_from_init:
    jsr mulf_init
    jmp __b2
    // init::@2
  __b2:
    // [7] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [8] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
  __b1_from___b2:
    // [8] phi init::i#2 = 0 [phi:init::@2->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [8] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  __b1_from___b1:
    // [8] phi init::i#2 = init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp __b1
    // init::@1
  __b1:
    // [9] init::sprites_ptr#0[init::i#2] = (byte)SPRITE/$40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
    // [10] SPRITES_COLOR[init::i#2] = GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLOR,x
    // [11] init::i#1 = ++ init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [12] if(init::i#1!=8) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b1
    jmp __breturn
    // init::@return
  __breturn:
    // [13] return 
    rts
}
  // anim
anim: {
    .label __4 = 5
    .label __6 = 5
    .label __9 = 5
    .label __10 = 5
    .label __11 = 5
    .label __12 = 5
    .label __26 = $11
    .label x = 9
    .label y = $a
    .label xr = $b
    .label yr = $d
    .label xpos = $f
    // signed fixed[0.7]
    .label sprite_msb = 2
    .label i = 4
    .label angle = 3
    .label cyclecount = $11
    // [15] phi from anim to anim::@1 [phi:anim->anim::@1]
  __b1_from_anim:
    // [15] phi anim::angle#9 = 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    jmp __b1
    // anim::@1
  __b1:
    jmp __b2
    // anim::@2
  __b2:
    // [16] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    jmp __b3
    // anim::@3
  __b3:
    // [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [18] call clock_start 
    jsr clock_start
    // [19] phi from anim::@3 to anim::@4 [phi:anim::@3->anim::@4]
  __b4_from___b3:
    // [19] phi anim::sprite_msb#10 = 0 [phi:anim::@3->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sprite_msb
    // [19] phi anim::i#10 = 0 [phi:anim::@3->anim::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b4
    // [19] phi from anim::@5 to anim::@4 [phi:anim::@5->anim::@4]
  __b4_from___b5:
    // [19] phi anim::sprite_msb#10 = anim::sprite_msb#5 [phi:anim::@5->anim::@4#0] -- register_copy 
    // [19] phi anim::i#10 = anim::i#1 [phi:anim::@5->anim::@4#1] -- register_copy 
    jmp __b4
    // anim::@4
  __b4:
    // [20] anim::x#0 = xs[anim::i#10] -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xs,y
    sta.z x
    // [21] anim::y#0 = ys[anim::i#10] -- vbsz1=pbsc1_derefidx_vbuz2 
    // signed fixed[7.0]
    ldy.z i
    lda ys,y
    sta.z y
    jmp mulf8s_prepare1
    // anim::mulf8s_prepare1
  mulf8s_prepare1:
    // [22] mulf8u_prepare::a#3 = (byte)(signed byte)COS[anim::angle#9] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z angle
    lda COS,y
    // [23] call mulf8u_prepare 
    // [103] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare1:
    // [103] phi mulf8u_prepare::a#2 = mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp __b8
    // anim::@8
  __b8:
    // [24] mulf8s_prepared::b#0 = anim::x#0 -- vbsyy=vbsz1 
    ldy.z x
    // [25] call mulf8s_prepared 
    // [107] phi from anim::@8 to mulf8s_prepared [phi:anim::@8->mulf8s_prepared]
  mulf8s_prepared_from___b8:
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#0 [phi:anim::@8->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp __b10
    // anim::@10
  __b10:
    // [26] anim::$4 = (signed word)mulf8s_prepared::m#4
    // [27] anim::xr#0 = anim::$4 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z __4
    asl
    sta.z xr
    lda.z __4+1
    rol
    sta.z xr+1
    // [28] mulf8s_prepared::b#1 = anim::y#0 -- vbsyy=vbsz1 
    ldy.z y
    // [29] call mulf8s_prepared 
    // [107] phi from anim::@10 to mulf8s_prepared [phi:anim::@10->mulf8s_prepared]
  mulf8s_prepared_from___b10:
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#1 [phi:anim::@10->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp __b11
    // anim::@11
  __b11:
    // [30] anim::$6 = (signed word)mulf8s_prepared::m#4
    // [31] anim::yr#0 = anim::$6 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z __6
    asl
    sta.z yr
    lda.z __6+1
    rol
    sta.z yr+1
    jmp mulf8s_prepare2
    // anim::mulf8s_prepare2
  mulf8s_prepare2:
    // [32] mulf8u_prepare::a#4 = (byte)(signed byte)SIN[anim::angle#9] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z angle
    lda SIN,y
    // [33] call mulf8u_prepare 
    // [103] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
  mulf8u_prepare_from_mulf8s_prepare2:
    // [103] phi mulf8u_prepare::a#2 = mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    jmp __b9
    // anim::@9
  __b9:
    // [34] mulf8s_prepared::b#2 = anim::y#0 -- vbsyy=vbsz1 
    ldy.z y
    // [35] call mulf8s_prepared 
    // [107] phi from anim::@9 to mulf8s_prepared [phi:anim::@9->mulf8s_prepared]
  mulf8s_prepared_from___b9:
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#2 [phi:anim::@9->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp __b12
    // anim::@12
  __b12:
    // [36] anim::$9 = (signed word)mulf8s_prepared::m#4
    // [37] anim::$10 = anim::$9 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z __10
    rol.z __10+1
    // [38] anim::xr#1 = anim::xr#0 - anim::$10 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z xr
    sec
    sbc.z __10
    sta.z xr
    lda.z xr+1
    sbc.z __10+1
    sta.z xr+1
    // [39] mulf8s_prepared::b#3 = anim::x#0 -- vbsyy=vbsz1 
    ldy.z x
    // [40] call mulf8s_prepared 
    // [107] phi from anim::@12 to mulf8s_prepared [phi:anim::@12->mulf8s_prepared]
  mulf8s_prepared_from___b12:
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#3 [phi:anim::@12->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    jmp __b13
    // anim::@13
  __b13:
    // [41] anim::$11 = (signed word)mulf8s_prepared::m#4
    // [42] anim::$12 = anim::$11 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z __12
    rol.z __12+1
    // [43] anim::yr#1 = anim::yr#0 + anim::$12 -- vwsz1=vwsz1_plus_vwsz2 
    // signed fixed[8.8]
    lda.z yr
    clc
    adc.z __12
    sta.z yr
    lda.z yr+1
    adc.z __12+1
    sta.z yr+1
    // [44] anim::$14 = > anim::xr#1 -- vbuaa=_hi_vwsz1 
    lda.z xr+1
    // [45] anim::xpos#0 = (signed byte)anim::$14 + $18+$95 -- vwsz1=vbsaa_plus_vwsc1 
    tax
    clc
    adc #<$18+$95
    sta.z xpos
    txa
    ora #$7f
    bmi !+
    lda #0
  !:
    adc #>$18+$95
    sta.z xpos+1
    // [46] anim::sprite_msb#1 = anim::sprite_msb#10 >> 1 -- vbuz1=vbuz1_ror_1 
    lsr.z sprite_msb
    // [47] anim::$17 = > anim::xpos#0 -- vbuaa=_hi_vwsz1 
    lda.z xpos+1
    // [48] if(anim::$17==0) goto anim::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5_from___b13
    jmp __b6
    // anim::@6
  __b6:
    // [49] anim::sprite_msb#2 = anim::sprite_msb#1 | $80 -- vbuz1=vbuz1_bor_vbuc1 
    lda #$80
    ora.z sprite_msb
    sta.z sprite_msb
    // [50] phi from anim::@13 anim::@6 to anim::@5 [phi:anim::@13/anim::@6->anim::@5]
  __b5_from___b13:
  __b5_from___b6:
    // [50] phi anim::sprite_msb#5 = anim::sprite_msb#1 [phi:anim::@13/anim::@6->anim::@5#0] -- register_copy 
    jmp __b5
    // anim::@5
  __b5:
    // [51] anim::$21 = > anim::yr#1 -- vbuaa=_hi_vwsz1 
    lda.z yr+1
    // [52] anim::ypos#0 = anim::$21 + $59+$33 -- vbuyy=vbuaa_plus_vbuc1 
    clc
    adc #$59+$33
    tay
    // [53] anim::i2#0 = anim::i#10 << 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [54] anim::$24 = < anim::xpos#0 -- vbuaa=_lo_vwsz1 
    lda.z xpos
    // [55] SPRITES_XPOS[anim::i2#0] = anim::$24 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
    // [56] SPRITES_YPOS[anim::i2#0] = anim::ypos#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SPRITES_YPOS,x
    // [57] anim::i#1 = ++ anim::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [58] if(anim::i#1!=8) goto anim::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne __b4_from___b5
    jmp __b7
    // anim::@7
  __b7:
    // [59] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) = anim::sprite_msb#5 -- _deref_pbuc1=vbuz1 
    lda.z sprite_msb
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB
    // [60] anim::angle#1 = ++ anim::angle#9 -- vbuz1=_inc_vbuz1 
    inc.z angle
    // [61] call clock 
    jsr clock
    // [62] clock::return#2 = clock::return#0
    jmp __b14
    // anim::@14
  __b14:
    // [63] anim::$26 = clock::return#2
    // [64] anim::cyclecount#0 = anim::$26 - CLOCKS_PER_INIT -- vduz1=vduz1_minus_vduc1 
    lda.z cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // [65] print_ulong_at::dw#0 = anim::cyclecount#0
    // [66] call print_ulong_at 
    // Print cycle count
    jsr print_ulong_at
    jmp __b15
    // anim::@15
  __b15:
    // [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [15] phi from anim::@15 to anim::@1 [phi:anim::@15->anim::@1]
  __b1_from___b15:
    // [15] phi anim::angle#9 = anim::angle#1 [phi:anim::@15->anim::@1#0] -- register_copy 
    jmp __b1
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = 3
    // Counter used for determining x%2==0
    .label sqr1_hi = $d
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $b
    .label sqr1_lo = 5
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = 7
    .label sqr2_lo = $f
    //Start with g(0)=f(255)
    .label dir = 4
    // [69] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [69] phi mulf_init::x_2#3 = 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [69] phi mulf_init::sqr1_hi#2 = mulf_sqr1_hi+1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [69] phi mulf_init::sqr#4 = 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    // [69] phi mulf_init::c#2 = 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [69] phi mulf_init::sqr1_lo#2 = mulf_sqr1_lo+1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    jmp __b1
    // mulf_init::@1
  __b1:
    // [70] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [71] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
  __b5_from___b1:
    // [71] phi mulf_init::dir#2 = $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [71] phi mulf_init::sqr2_hi#2 = mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [71] phi mulf_init::x_255#2 = -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [71] phi mulf_init::sqr2_lo#2 = mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    jmp __b5
    // mulf_init::@5
  __b5:
    // [72] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    jmp __b7
    // mulf_init::@7
  __b7:
    // [73] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [74] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [75] return 
    rts
    // mulf_init::@6
  __b6:
    // [76] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // [77] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
    // [78] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // [79] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // [80] if(mulf_init::x_255#1!=0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b9_from___b6
    // [82] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
  __b8_from___b6:
    // [82] phi mulf_init::dir#4 = 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    jmp __b8
    // [81] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
  __b9_from___b6:
    jmp __b9
    // mulf_init::@9
  __b9:
    // [82] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
  __b8_from___b9:
    // [82] phi mulf_init::dir#4 = mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    jmp __b8
    // mulf_init::@8
  __b8:
    // [83] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [71] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
  __b5_from___b8:
    // [71] phi mulf_init::dir#2 = mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [71] phi mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [71] phi mulf_init::x_255#2 = mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [71] phi mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // [84] mulf_init::c#1 = ++ mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [85] mulf_init::$1 = mulf_init::c#1 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // [86] if(mulf_init::$1!=0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3_from___b2
    jmp __b4
    // mulf_init::@4
  __b4:
    // [87] mulf_init::x_2#1 = ++ mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // [88] mulf_init::sqr#2 = ++ mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [89] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [89] phi mulf_init::x_2#2 = mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [89] phi mulf_init::sqr#3 = mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    jmp __b3
    // mulf_init::@3
  __b3:
    // [90] mulf_init::$4 = < mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // [91] *mulf_init::sqr1_lo#2 = mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // [92] mulf_init::$5 = > mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // [93] *mulf_init::sqr1_hi#2 = mulf_init::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
    // [94] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // [95] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // [96] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [69] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
  __b1_from___b3:
    // [69] phi mulf_init::x_2#3 = mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [69] phi mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [69] phi mulf_init::sqr#4 = mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [69] phi mulf_init::c#2 = mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [69] phi mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [97] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [99] *CIA2_TIMER_AB = $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [100] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [101] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    jmp __breturn
    // clock_start::@return
  __breturn:
    // [102] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // [104] *mulf8u_prepare::memA = mulf8u_prepare::a#2 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    lda memA
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    jmp __breturn
    // mulf8u_prepare::@return
  __breturn:
    // [106] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte register(Y) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = 5
    // [108] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#4 -- vbuaa=vbuyy 
    tya
    // [109] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [110] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
    jmp __b5
    // mulf8s_prepared::@5
  __b5:
    // [111] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
    // [112] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1_from___b5
    jmp __b3
    // mulf8s_prepared::@3
  __b3:
    // [113] mulf8s_prepared::$6 = > mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [114] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#4 -- vbuaa=vbuaa_minus_vbuyy 
    sty.z $ff
    sec
    sbc.z $ff
    // [115] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [116] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [116] phi mulf8s_prepared::m#5 = mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    jmp __b1
    // mulf8s_prepared::@1
  __b1:
    // [117] if(mulf8s_prepared::b#4>=0) goto mulf8s_prepared::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b2_from___b1
    jmp __b4
    // mulf8s_prepared::@4
  __b4:
    // [118] mulf8s_prepared::$9 = > mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // [119] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [120] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [121] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [121] phi mulf8s_prepared::m#4 = mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    jmp __b2
    // mulf8s_prepared::@2
  __b2:
    jmp __breturn
    // mulf8s_prepared::@return
  __breturn:
    // [122] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $11
    // [123] clock::return#0 = $ffffffff - *CIA2_TIMER_AB -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    jmp __breturn
    // clock::@return
  __breturn:
    // [124] return 
    rts
}
  // print_ulong_at
// Print a unsigned long as HEX at a specific position
// print_ulong_at(dword zp($11) dw)
print_ulong_at: {
    .label dw = $11
    // [125] print_uint_at::w#0 = > print_ulong_at::dw#0 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z print_uint_at.w
    lda.z dw+3
    sta.z print_uint_at.w+1
    // [126] call print_uint_at 
    // [134] phi from print_ulong_at to print_uint_at [phi:print_ulong_at->print_uint_at]
  print_uint_at_from_print_ulong_at:
    // [134] phi print_uint_at::at#2 = SCREEN [phi:print_ulong_at->print_uint_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z print_uint_at.at
    lda #>SCREEN
    sta.z print_uint_at.at+1
    // [134] phi print_uint_at::w#2 = print_uint_at::w#0 [phi:print_ulong_at->print_uint_at#1] -- register_copy 
    jsr print_uint_at
    jmp __b1
    // print_ulong_at::@1
  __b1:
    // [127] print_uint_at::w#1 = < print_ulong_at::dw#0 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z print_uint_at.w
    lda.z dw+1
    sta.z print_uint_at.w+1
    // [128] call print_uint_at 
    // [134] phi from print_ulong_at::@1 to print_uint_at [phi:print_ulong_at::@1->print_uint_at]
  print_uint_at_from___b1:
    // [134] phi print_uint_at::at#2 = SCREEN+4 [phi:print_ulong_at::@1->print_uint_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+4
    sta.z print_uint_at.at
    lda #>SCREEN+4
    sta.z print_uint_at.at+1
    // [134] phi print_uint_at::w#2 = print_uint_at::w#1 [phi:print_ulong_at::@1->print_uint_at#1] -- register_copy 
    jsr print_uint_at
    jmp __breturn
    // print_ulong_at::@return
  __breturn:
    // [129] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = 5
    // [130] *mulf8u_prepared::memB = mulf8u_prepared::b#0 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    ldx memB
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // [132] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    jmp __breturn
    // mulf8u_prepared::@return
  __breturn:
    // [133] return 
    rts
}
  // print_uint_at
// Print a unsigned int as HEX at a specific position
// print_uint_at(word zp($d) w, byte* zp($f) at)
print_uint_at: {
    .label w = $d
    .label at = $f
    // [135] print_uchar_at::b#0 = > print_uint_at::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar_at.b
    // [136] print_uchar_at::at#0 = print_uint_at::at#2
    // [137] call print_uchar_at 
    // [142] phi from print_uint_at to print_uchar_at [phi:print_uint_at->print_uchar_at]
  print_uchar_at_from_print_uint_at:
    // [142] phi print_uchar_at::at#2 = print_uchar_at::at#0 [phi:print_uint_at->print_uchar_at#0] -- register_copy 
    // [142] phi print_uchar_at::b#2 = print_uchar_at::b#0 [phi:print_uint_at->print_uchar_at#1] -- register_copy 
    jsr print_uchar_at
    jmp __b1
    // print_uint_at::@1
  __b1:
    // [138] print_uchar_at::b#1 = < print_uint_at::w#2 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar_at.b
    // [139] print_uchar_at::at#1 = print_uint_at::at#2 + 2 -- pbuz1=pbuz1_plus_vbuc1 
    lda #2
    clc
    adc.z print_uchar_at.at
    sta.z print_uchar_at.at
    bcc !+
    inc.z print_uchar_at.at+1
  !:
    // [140] call print_uchar_at 
    // [142] phi from print_uint_at::@1 to print_uchar_at [phi:print_uint_at::@1->print_uchar_at]
  print_uchar_at_from___b1:
    // [142] phi print_uchar_at::at#2 = print_uchar_at::at#1 [phi:print_uint_at::@1->print_uchar_at#0] -- register_copy 
    // [142] phi print_uchar_at::b#2 = print_uchar_at::b#1 [phi:print_uint_at::@1->print_uchar_at#1] -- register_copy 
    jsr print_uchar_at
    jmp __breturn
    // print_uint_at::@return
  __breturn:
    // [141] return 
    rts
}
  // print_uchar_at
// Print a char as HEX at a specific position
// print_uchar_at(byte zp(9) b, byte* zp($f) at)
print_uchar_at: {
    .label b = 9
    .label at = $f
    // [143] print_uchar_at::$0 = print_uchar_at::b#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [144] print_char_at::ch#0 = print_hextab[print_uchar_at::$0] -- vbuxx=pbuc1_derefidx_vbuaa 
    tay
    ldx print_hextab,y
    // [145] print_char_at::at#0 = print_uchar_at::at#2 -- pbuz1=pbuz2 
    lda.z at
    sta.z print_char_at.at
    lda.z at+1
    sta.z print_char_at.at+1
    // [146] call print_char_at 
  // Table of hexadecimal digits
    // [152] phi from print_uchar_at to print_char_at [phi:print_uchar_at->print_char_at]
  print_char_at_from_print_uchar_at:
    // [152] phi print_char_at::at#2 = print_char_at::at#0 [phi:print_uchar_at->print_char_at#0] -- register_copy 
    // [152] phi print_char_at::ch#2 = print_char_at::ch#0 [phi:print_uchar_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp __b1
    // print_uchar_at::@1
  __b1:
    // [147] print_uchar_at::$2 = print_uchar_at::b#2 & $f -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    tay
    // [148] print_char_at::at#1 = print_uchar_at::at#2 + 1 -- pbuz1=pbuz2_plus_1 
    clc
    lda.z at
    adc #1
    sta.z print_char_at.at
    lda.z at+1
    adc #0
    sta.z print_char_at.at+1
    // [149] print_char_at::ch#1 = print_hextab[print_uchar_at::$2] -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx print_hextab,y
    // [150] call print_char_at 
    // [152] phi from print_uchar_at::@1 to print_char_at [phi:print_uchar_at::@1->print_char_at]
  print_char_at_from___b1:
    // [152] phi print_char_at::at#2 = print_char_at::at#1 [phi:print_uchar_at::@1->print_char_at#0] -- register_copy 
    // [152] phi print_char_at::ch#2 = print_char_at::ch#1 [phi:print_uchar_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp __breturn
    // print_uchar_at::@return
  __breturn:
    // [151] return 
    rts
}
  // print_char_at
// Print a single char
// print_char_at(byte register(X) ch, byte* zp(7) at)
print_char_at: {
    .label at = 7
    // [153] *print_char_at::at#2 = print_char_at::ch#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (at),y
    jmp __breturn
    // print_char_at::@return
  __breturn:
    // [154] return 
    rts
}
  // File Data
.segment Data
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  print_hextab: .text "0123456789abcdef"
  // Sine and Cosine tables  
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))

  // Positions to rotate
  xs: .byte -$46, -$46, -$46, 0, 0, $46, $46, $46
  ys: .byte -$46, 0, $46, -$46, $46, -$46, 0, $46
.pc = $3000 "SPRITE"
// A single sprite
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp mulf8s_prepare1
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp mulf8s_prepare2
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b6
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy.z i
Removing instruction lda.z xpos+1
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda memA
Replacing instruction ldx memB with TAX
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b5_from___b13 with __b5
Replacing label __b4_from___b5 with __b4
Replacing label __b1 with __b2
Replacing label __b9_from___b6 with __b8
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Removing instruction __b1_from_main:
Removing instruction anim_from___b1:
Removing instruction __b1_from___b1:
Removing instruction __b1:
Removing instruction __b4_from___b5:
Removing instruction __b5_from___b13:
Removing instruction __b5_from___b6:
Removing instruction __b9_from___b6:
Removing instruction __b9:
Removing instruction __b8_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction init_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction mulf_init_from_init:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_anim:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction mulf8s_prepare1:
Removing instruction mulf8u_prepare_from_mulf8s_prepare1:
Removing instruction __b8:
Removing instruction mulf8s_prepared_from___b8:
Removing instruction __b10:
Removing instruction mulf8s_prepared_from___b10:
Removing instruction __b11:
Removing instruction mulf8s_prepare2:
Removing instruction mulf8u_prepare_from_mulf8s_prepare2:
Removing instruction __b9:
Removing instruction mulf8s_prepared_from___b9:
Removing instruction __b12:
Removing instruction mulf8s_prepared_from___b12:
Removing instruction __b13:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b1_from___b15:
Removing instruction __b1_from_mulf_init:
Removing instruction __b5_from___b1:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b8_from___b6:
Removing instruction __b5_from___b8:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_uint_at_from_print_ulong_at:
Removing instruction __b1:
Removing instruction print_uint_at_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_uchar_at_from_print_uint_at:
Removing instruction __b1:
Removing instruction print_uchar_at_from___b1:
Removing instruction __breturn:
Removing instruction print_char_at_from_print_uchar_at:
Removing instruction __b1:
Removing instruction print_char_at_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b8
Succesful ASM optimization Pass5NextJumpElimination
Fixing long branch [173] bne __b4 to beq

FINAL SYMBOL TABLE
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const nomodify dword* CIA2_TIMER_AB = (dword*) 56580
const nomodify byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
const nomodify byte CIA_TIMER_CONTROL_START = 1
const nomodify dword CLOCKS_PER_INIT = $12
const byte* COS = SIN+$40
const nomodify byte GREEN = 5
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
const byte OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB = $10
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte* SCREEN = (byte*) 1024
const byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
const byte* SPRITE[]  = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const nomodify byte* SPRITES_COLOR = (byte*) 53287
const nomodify byte* SPRITES_XPOS = (byte*) 53248
const nomodify byte* SPRITES_YPOS = (byte*) 53249
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
void anim()
signed word~ anim::$10 zp[2]:5 2002.0
signed word~ anim::$11 zp[2]:5 2002.0
signed word~ anim::$12 zp[2]:5 2002.0
byte~ anim::$14 reg byte a 1001.0
byte~ anim::$17 reg byte a 2002.0
byte~ anim::$21 reg byte a 2002.0
byte~ anim::$24 reg byte a 2002.0
dword~ anim::$26 zp[4]:17 202.0
signed word~ anim::$4 zp[2]:5 2002.0
signed word~ anim::$6 zp[2]:5 2002.0
signed word~ anim::$9 zp[2]:5 2002.0
byte anim::angle
byte anim::angle#1 angle zp[1]:3 25.25
byte anim::angle#9 angle zp[1]:3 4.488888888888889
signed byte anim::cos_a
dword anim::cyclecount
dword anim::cyclecount#0 cyclecount zp[4]:17 202.0
byte anim::i
byte anim::i#1 i zp[1]:4 1501.5
byte anim::i#10 i zp[1]:4 131.71052631578948
byte anim::i2
byte anim::i2#0 reg byte x 1001.0
signed byte anim::mulf8s_prepare1_a
signed byte anim::mulf8s_prepare2_a
signed byte anim::sin_a
byte anim::sprite_msb
byte anim::sprite_msb#1 sprite_msb zp[1]:2 1001.0
byte anim::sprite_msb#10 sprite_msb zp[1]:2 74.14814814814815
byte anim::sprite_msb#2 sprite_msb zp[1]:2 2002.0
byte anim::sprite_msb#5 sprite_msb zp[1]:2 344.8888888888889
signed byte anim::x
signed byte anim::x#0 x zp[1]:9 158.05263157894737
signed word anim::xpos
signed word anim::xpos#0 xpos zp[2]:15 333.6666666666667
signed word anim::xr
signed word anim::xr#0 xr zp[2]:11 182.0
signed word anim::xr#1 xr zp[2]:11 333.6666666666667
signed byte anim::y
signed byte anim::y#0 y zp[1]:10 231.0
byte anim::ypos
byte anim::ypos#0 reg byte y 500.5
signed word anim::yr
signed word anim::yr#0 yr zp[2]:13 166.83333333333334
signed word anim::yr#1 yr zp[2]:13 250.25
dword clock()
dword clock::return
dword clock::return#0 return zp[4]:17 367.33333333333337
dword clock::return#2 return zp[4]:17 202.0
void clock_start()
void init()
byte init::i
byte init::i#1 reg byte x 151.5
byte init::i#2 reg byte x 134.66666666666666
byte* init::sprites_ptr
const byte* init::sprites_ptr#0 sprites_ptr = SCREEN+$3f8
void main()
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 reg byte a 20002.0
byte~ mulf8s_prepared::$12 reg byte a 20002.0
byte~ mulf8s_prepared::$6 reg byte a 20002.0
byte~ mulf8s_prepared::$9 reg byte a 20002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 reg byte y 2002.0
signed byte mulf8s_prepared::b#1 reg byte y 2002.0
signed byte mulf8s_prepared::b#2 reg byte y 2002.0
signed byte mulf8s_prepared::b#3 reg byte y 2002.0
signed byte mulf8s_prepared::b#4 reg byte y 1400.5
word mulf8s_prepared::m
word mulf8s_prepared::m#0 m zp[2]:5 10001.0
word mulf8s_prepared::m#1 m zp[2]:5 20002.0
word mulf8s_prepared::m#2 m zp[2]:5 20002.0
word mulf8s_prepared::m#4 m zp[2]:5 3333.6666666666665
word mulf8s_prepared::m#5 m zp[2]:5 12501.25
const nomodify signed byte* mulf8s_prepared::memA = (signed byte*) 253
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#2 reg byte a 12003.0
byte mulf8u_prepare::a#3 reg byte a 2002.0
byte mulf8u_prepare::a#4 reg byte a 2002.0
const nomodify byte* mulf8u_prepare::memA = (byte*) 253
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 reg byte a 110002.0
const nomodify byte* mulf8u_prepared::memB = (byte*) 255
const nomodify byte* mulf8u_prepared::resL = (byte*) 254
word mulf8u_prepared::return
word mulf8u_prepared::return#0 return zp[2]:5 36667.33333333333
word mulf8u_prepared::return#2 return zp[2]:5 20002.0
void mulf_init()
byte~ mulf_init::$1 reg byte a 2002.0
byte~ mulf_init::$4 reg byte a 2002.0
byte~ mulf_init::$5 reg byte a 2002.0
byte mulf_init::c
byte mulf_init::c#1 c zp[1]:3 231.0
byte mulf_init::c#2 c zp[1]:3 1001.0
byte mulf_init::dir
byte mulf_init::dir#2 dir zp[1]:4 375.375
byte mulf_init::dir#4 dir zp[1]:4 1001.0
word mulf_init::sqr
word mulf_init::sqr#1 sqr zp[2]:11 1001.0
word mulf_init::sqr#2 sqr zp[2]:11 2002.0
word mulf_init::sqr#3 sqr zp[2]:11 834.1666666666667
word mulf_init::sqr#4 sqr zp[2]:11 500.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 sqr1_hi zp[2]:13 667.3333333333334
byte* mulf_init::sqr1_hi#2 sqr1_hi zp[2]:13 250.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 sqr1_lo zp[2]:5 2002.0
byte* mulf_init::sqr1_lo#2 sqr1_lo zp[2]:5 286.0
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 sqr2_hi zp[2]:7 333.6666666666667
byte* mulf_init::sqr2_hi#2 sqr2_hi zp[2]:7 750.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 sqr2_lo zp[2]:15 2002.0
byte* mulf_init::sqr2_lo#2 sqr2_lo zp[2]:15 444.8888888888889
byte mulf_init::x_2
byte mulf_init::x_2#1 reg byte x 1001.0
byte mulf_init::x_2#2 reg byte x 500.5
byte mulf_init::x_2#3 reg byte x 600.5999999999999
byte mulf_init::x_255
byte mulf_init::x_255#1 reg byte x 600.5999999999999
byte mulf_init::x_255#2 reg byte x 800.8
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void print_char_at(byte print_char_at::ch , byte* print_char_at::at)
byte* print_char_at::at
byte* print_char_at::at#0 at zp[2]:7 200002.0
byte* print_char_at::at#1 at zp[2]:7 100001.0
byte* print_char_at::at#2 at zp[2]:7 1200003.0
byte print_char_at::ch
byte print_char_at::ch#0 reg byte x 100001.0
byte print_char_at::ch#1 reg byte x 200002.0
byte print_char_at::ch#2 reg byte x 1200003.0
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
void print_uchar_at(byte print_uchar_at::b , byte* print_uchar_at::at)
byte~ print_uchar_at::$0 reg byte a 200002.0
byte~ print_uchar_at::$2 reg byte y 100001.0
byte* print_uchar_at::at
byte* print_uchar_at::at#0 at zp[2]:15 20002.0
byte* print_uchar_at::at#1 at zp[2]:15 20002.0
byte* print_uchar_at::at#2 at zp[2]:15 36667.33333333333
byte print_uchar_at::b
byte print_uchar_at::b#0 b zp[1]:9 10001.0
byte print_uchar_at::b#1 b zp[1]:9 10001.0
byte print_uchar_at::b#2 b zp[1]:9 44000.8
void print_uint_at(word print_uint_at::w , byte* print_uint_at::at)
byte* print_uint_at::at
byte* print_uint_at::at#2 at zp[2]:15 4000.4
word print_uint_at::w
word print_uint_at::w#0 w zp[2]:13 2002.0
word print_uint_at::w#1 w zp[2]:13 2002.0
word print_uint_at::w#2 w zp[2]:13 5501.0
void print_ulong_at(dword print_ulong_at::dw , byte* print_ulong_at::at)
byte* print_ulong_at::at
dword print_ulong_at::dw
dword print_ulong_at::dw#0 dw zp[4]:17 701.0
const signed byte* xs[8]  = { -$46, -$46, -$46, 0, 0, $46, $46, $46 }
const signed byte* ys[8]  = { -$46, 0, $46, -$46, $46, -$46, 0, $46 }

reg byte x [ init::i#2 init::i#1 ]
zp[1]:2 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
zp[1]:3 [ mulf_init::c#2 mulf_init::c#1 anim::angle#9 anim::angle#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:4 [ mulf_init::dir#2 mulf_init::dir#4 anim::i#10 anim::i#1 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
zp[2]:5 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
zp[2]:7 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp[1]:9 [ anim::x#0 print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
zp[1]:10 [ anim::y#0 ]
zp[2]:11 [ anim::xr#0 anim::xr#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:13 [ anim::yr#0 anim::yr#1 print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
reg byte a [ anim::$14 ]
zp[2]:15 [ anim::xpos#0 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte a [ anim::$17 ]
reg byte a [ anim::$21 ]
reg byte y [ anim::ypos#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$24 ]
zp[4]:17 [ clock::return#2 anim::$26 clock::return#0 anim::cyclecount#0 print_ulong_at::dw#0 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]


FINAL ASSEMBLER
Score: 28434

  // File Comments
// 2D rotattion of 8 sprites 
  // Upstart
  // Commodore 64 PRG executable file
.file [name="rotate.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB = $10
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  .label SCREEN = $400
  .label COS = SIN+$40
.segment Code
  // main
// sin(x) = cos(x+PI/2)
main: {
    // asm
    // asm { sei  }
    sei
    // init()
    // [1] call init 
    // [5] phi from main to init [phi:main->init]
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // anim()
    // [3] call anim 
    // [14] phi from main::@1 to anim [phi:main::@1->anim]
    jsr anim
    // main::@return
    // }
    // [4] return 
    rts
}
  // init
init: {
    .label sprites_ptr = SCREEN+$3f8
    // mulf_init()
    // [6] call mulf_init 
    // [68] phi from init to mulf_init [phi:init->mulf_init]
    jsr mulf_init
    // init::@2
    // VICII->SPRITES_ENABLE = %11111111
    // [7] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) = $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE
    // [8] phi from init::@2 to init::@1 [phi:init::@2->init::@1]
    // [8] phi init::i#2 = 0 [phi:init::@2->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [8] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
    // [8] phi init::i#2 = init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    // init::@1
  __b1:
    // sprites_ptr[i] = (char)(SPRITE/$40)
    // [9] init::sprites_ptr#0[init::i#2] = (byte)SPRITE/$40 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
    // SPRITES_COLOR[i] = GREEN
    // [10] SPRITES_COLOR[init::i#2] = GREEN -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLOR,x
    // for(char i: 0..7)
    // [11] init::i#1 = ++ init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [12] if(init::i#1!=8) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // init::@return
    // }
    // [13] return 
    rts
}
  // anim
anim: {
    .label __4 = 5
    .label __6 = 5
    .label __9 = 5
    .label __10 = 5
    .label __11 = 5
    .label __12 = 5
    .label __26 = $11
    .label x = 9
    .label y = $a
    .label xr = $b
    .label yr = $d
    .label xpos = $f
    // signed fixed[0.7]
    .label sprite_msb = 2
    .label i = 4
    .label angle = 3
    .label cyclecount = $11
    // [15] phi from anim to anim::@1 [phi:anim->anim::@1]
    // [15] phi anim::angle#9 = 0 [phi:anim->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    // anim::@1
    // anim::@2
  __b2:
    // while(VICII->RASTER!=$ff)
    // [16] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto anim::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b2
    // anim::@3
    // (VICII->BORDER_COLOR)++;
    // [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = ++ *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // clock_start()
    // [18] call clock_start 
    jsr clock_start
    // [19] phi from anim::@3 to anim::@4 [phi:anim::@3->anim::@4]
    // [19] phi anim::sprite_msb#10 = 0 [phi:anim::@3->anim::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sprite_msb
    // [19] phi anim::i#10 = 0 [phi:anim::@3->anim::@4#1] -- vbuz1=vbuc1 
    sta.z i
    // [19] phi from anim::@5 to anim::@4 [phi:anim::@5->anim::@4]
    // [19] phi anim::sprite_msb#10 = anim::sprite_msb#5 [phi:anim::@5->anim::@4#0] -- register_copy 
    // [19] phi anim::i#10 = anim::i#1 [phi:anim::@5->anim::@4#1] -- register_copy 
    // anim::@4
  __b4:
    // x = xs[i]
    // [20] anim::x#0 = xs[anim::i#10] -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda xs,y
    sta.z x
    // y = ys[i]
    // [21] anim::y#0 = ys[anim::i#10] -- vbsz1=pbsc1_derefidx_vbuz2 
    // signed fixed[7.0]
    lda ys,y
    sta.z y
    // anim::mulf8s_prepare1
    // [22] mulf8u_prepare::a#3 = (byte)(signed byte)COS[anim::angle#9] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z angle
    lda COS,y
    // mulf8u_prepare((char)a)
    // [23] call mulf8u_prepare 
    // [103] phi from anim::mulf8s_prepare1 to mulf8u_prepare [phi:anim::mulf8s_prepare1->mulf8u_prepare]
    // [103] phi mulf8u_prepare::a#2 = mulf8u_prepare::a#3 [phi:anim::mulf8s_prepare1->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    // anim::@8
    // mulf8s_prepared(x)
    // [24] mulf8s_prepared::b#0 = anim::x#0 -- vbsyy=vbsz1 
    ldy.z x
    // [25] call mulf8s_prepared 
    // [107] phi from anim::@8 to mulf8s_prepared [phi:anim::@8->mulf8s_prepared]
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#0 [phi:anim::@8->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@10
    // mulf8s_prepared(x)
    // [26] anim::$4 = (signed word)mulf8s_prepared::m#4
    // xr = mulf8s_prepared(x)*2
    // [27] anim::xr#0 = anim::$4 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z __4
    asl
    sta.z xr
    lda.z __4+1
    rol
    sta.z xr+1
    // mulf8s_prepared(y)
    // [28] mulf8s_prepared::b#1 = anim::y#0 -- vbsyy=vbsz1 
    ldy.z y
    // [29] call mulf8s_prepared 
    // [107] phi from anim::@10 to mulf8s_prepared [phi:anim::@10->mulf8s_prepared]
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#1 [phi:anim::@10->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@11
    // mulf8s_prepared(y)
    // [30] anim::$6 = (signed word)mulf8s_prepared::m#4
    // yr = mulf8s_prepared(y)*2
    // [31] anim::yr#0 = anim::$6 << 1 -- vwsz1=vwsz2_rol_1 
    lda.z __6
    asl
    sta.z yr
    lda.z __6+1
    rol
    sta.z yr+1
    // anim::mulf8s_prepare2
    // [32] mulf8u_prepare::a#4 = (byte)(signed byte)SIN[anim::angle#9] -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z angle
    lda SIN,y
    // mulf8u_prepare((char)a)
    // [33] call mulf8u_prepare 
    // [103] phi from anim::mulf8s_prepare2 to mulf8u_prepare [phi:anim::mulf8s_prepare2->mulf8u_prepare]
    // [103] phi mulf8u_prepare::a#2 = mulf8u_prepare::a#4 [phi:anim::mulf8s_prepare2->mulf8u_prepare#0] -- register_copy 
    jsr mulf8u_prepare
    // anim::@9
    // mulf8s_prepared(y)
    // [34] mulf8s_prepared::b#2 = anim::y#0 -- vbsyy=vbsz1 
    ldy.z y
    // [35] call mulf8s_prepared 
    // [107] phi from anim::@9 to mulf8s_prepared [phi:anim::@9->mulf8s_prepared]
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#2 [phi:anim::@9->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@12
    // mulf8s_prepared(y)
    // [36] anim::$9 = (signed word)mulf8s_prepared::m#4
    // mulf8s_prepared(y)*2
    // [37] anim::$10 = anim::$9 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z __10
    rol.z __10+1
    // xr -= mulf8s_prepared(y)*2
    // [38] anim::xr#1 = anim::xr#0 - anim::$10 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z xr
    sec
    sbc.z __10
    sta.z xr
    lda.z xr+1
    sbc.z __10+1
    sta.z xr+1
    // mulf8s_prepared(x)
    // [39] mulf8s_prepared::b#3 = anim::x#0 -- vbsyy=vbsz1 
    ldy.z x
    // [40] call mulf8s_prepared 
    // [107] phi from anim::@12 to mulf8s_prepared [phi:anim::@12->mulf8s_prepared]
    // [107] phi mulf8s_prepared::b#4 = mulf8s_prepared::b#3 [phi:anim::@12->mulf8s_prepared#0] -- register_copy 
    jsr mulf8s_prepared
    // anim::@13
    // mulf8s_prepared(x)
    // [41] anim::$11 = (signed word)mulf8s_prepared::m#4
    // mulf8s_prepared(x)*2
    // [42] anim::$12 = anim::$11 << 1 -- vwsz1=vwsz1_rol_1 
    asl.z __12
    rol.z __12+1
    // yr += mulf8s_prepared(x)*2
    // [43] anim::yr#1 = anim::yr#0 + anim::$12 -- vwsz1=vwsz1_plus_vwsz2 
    // signed fixed[8.8]
    lda.z yr
    clc
    adc.z __12
    sta.z yr
    lda.z yr+1
    adc.z __12+1
    sta.z yr+1
    // >xr
    // [44] anim::$14 = > anim::xr#1 -- vbuaa=_hi_vwsz1 
    lda.z xr+1
    // xpos = ((signed char) >xr) + 24 /*border*/ + 149
    // [45] anim::xpos#0 = (signed byte)anim::$14 + $18+$95 -- vwsz1=vbsaa_plus_vwsc1 
    tax
    clc
    adc #<$18+$95
    sta.z xpos
    txa
    ora #$7f
    bmi !+
    lda #0
  !:
    adc #>$18+$95
    sta.z xpos+1
    // sprite_msb = sprite_msb/2
    // [46] anim::sprite_msb#1 = anim::sprite_msb#10 >> 1 -- vbuz1=vbuz1_ror_1 
    lsr.z sprite_msb
    // >xpos
    // [47] anim::$17 = > anim::xpos#0 -- vbuaa=_hi_vwsz1 
    // if(>xpos!=0)
    // [48] if(anim::$17==0) goto anim::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b5
    // anim::@6
    // sprite_msb |= $80
    // [49] anim::sprite_msb#2 = anim::sprite_msb#1 | $80 -- vbuz1=vbuz1_bor_vbuc1 
    lda #$80
    ora.z sprite_msb
    sta.z sprite_msb
    // [50] phi from anim::@13 anim::@6 to anim::@5 [phi:anim::@13/anim::@6->anim::@5]
    // [50] phi anim::sprite_msb#5 = anim::sprite_msb#1 [phi:anim::@13/anim::@6->anim::@5#0] -- register_copy 
    // anim::@5
  __b5:
    // (>yr) + 89
    // [51] anim::$21 = > anim::yr#1 -- vbuaa=_hi_vwsz1 
    lda.z yr+1
    // ypos = (>yr) + 89 /*center*/+ 51
    // [52] anim::ypos#0 = anim::$21 + $59+$33 -- vbuyy=vbuaa_plus_vbuc1 
    clc
    adc #$59+$33
    tay
    // i2 = i*2
    // [53] anim::i2#0 = anim::i#10 << 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // <xpos
    // [54] anim::$24 = < anim::xpos#0 -- vbuaa=_lo_vwsz1 
    lda.z xpos
    // SPRITES_XPOS[i2] = <xpos
    // [55] SPRITES_XPOS[anim::i2#0] = anim::$24 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
    // SPRITES_YPOS[i2] = ypos
    // [56] SPRITES_YPOS[anim::i2#0] = anim::ypos#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SPRITES_YPOS,x
    // for(char i: 0..7)
    // [57] anim::i#1 = ++ anim::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [58] if(anim::i#1!=8) goto anim::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    beq !__b4+
    jmp __b4
  !__b4:
    // anim::@7
    // VICII->SPRITES_XMSB = sprite_msb
    // [59] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) = anim::sprite_msb#5 -- _deref_pbuc1=vbuz1 
    lda.z sprite_msb
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB
    // angle++;
    // [60] anim::angle#1 = ++ anim::angle#9 -- vbuz1=_inc_vbuz1 
    inc.z angle
    // clock()
    // [61] call clock 
    jsr clock
    // [62] clock::return#2 = clock::return#0
    // anim::@14
    // [63] anim::$26 = clock::return#2
    // cyclecount = clock()-CLOCKS_PER_INIT
    // [64] anim::cyclecount#0 = anim::$26 - CLOCKS_PER_INIT -- vduz1=vduz1_minus_vduc1 
    lda.z cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // print_ulong_at(cyclecount, SCREEN)
    // [65] print_ulong_at::dw#0 = anim::cyclecount#0
    // [66] call print_ulong_at 
    // Print cycle count
    jsr print_ulong_at
    // anim::@15
    // VICII->BORDER_COLOR = LIGHT_BLUE
    // [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = LIGHT_BLUE -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [15] phi from anim::@15 to anim::@1 [phi:anim::@15->anim::@1]
    // [15] phi anim::angle#9 = anim::angle#1 [phi:anim::@15->anim::@1#0] -- register_copy 
    jmp __b2
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = 3
    // Counter used for determining x%2==0
    .label sqr1_hi = $d
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $b
    .label sqr1_lo = 5
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = 7
    .label sqr2_lo = $f
    //Start with g(0)=f(255)
    .label dir = 4
    // [69] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
    // [69] phi mulf_init::x_2#3 = 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [69] phi mulf_init::sqr1_hi#2 = mulf_sqr1_hi+1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [69] phi mulf_init::sqr#4 = 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    txa
    sta.z sqr
    sta.z sqr+1
    // [69] phi mulf_init::c#2 = 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    sta.z c
    // [69] phi mulf_init::sqr1_lo#2 = mulf_sqr1_lo+1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    // mulf_init::@1
  __b1:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [70] if(mulf_init::sqr1_lo#2!=mulf_sqr1_lo+$200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [71] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
    // [71] phi mulf_init::dir#2 = $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [71] phi mulf_init::sqr2_hi#2 = mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [71] phi mulf_init::x_255#2 = -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [71] phi mulf_init::sqr2_lo#2 = mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    // mulf_init::@5
  __b5:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [72] if(mulf_init::sqr2_lo#2!=mulf_sqr2_lo+$1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    // mulf_init::@7
    // *(mulf_sqr2_lo+511) = *(mulf_sqr1_lo+256)
    // [73] *(mulf_sqr2_lo+$1ff) = *(mulf_sqr1_lo+$100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // *(mulf_sqr2_hi+511) = *(mulf_sqr1_hi+256)
    // [74] *(mulf_sqr2_hi+$1ff) = *(mulf_sqr1_hi+$100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    // mulf_init::@return
    // }
    // [75] return 
    rts
    // mulf_init::@6
  __b6:
    // *sqr2_lo = mulf_sqr1_lo[x_255]
    // [76] *mulf_init::sqr2_lo#2 = mulf_sqr1_lo[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255]
    // [77] *mulf_init::sqr2_hi#2 = mulf_sqr1_hi[mulf_init::x_255#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255];
    // [78] mulf_init::sqr2_hi#1 = ++ mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // x_255 = x_255 + dir
    // [79] mulf_init::x_255#1 = mulf_init::x_255#2 + mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // if(x_255==0)
    // [80] if(mulf_init::x_255#1!=0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b8
    // [82] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
    // [82] phi mulf_init::dir#4 = 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    // [81] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
    // mulf_init::@9
    // [82] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
    // [82] phi mulf_init::dir#4 = mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    // mulf_init::@8
  __b8:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [83] mulf_init::sqr2_lo#1 = ++ mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [71] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
    // [71] phi mulf_init::dir#2 = mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [71] phi mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [71] phi mulf_init::x_255#2 = mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [71] phi mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // if((++c&1)==0)
    // [84] mulf_init::c#1 = ++ mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // ++c&1
    // [85] mulf_init::$1 = mulf_init::c#1 & 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // if((++c&1)==0)
    // [86] if(mulf_init::$1!=0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    // mulf_init::@4
    // x_2++;
    // [87] mulf_init::x_2#1 = ++ mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // sqr++;
    // [88] mulf_init::sqr#2 = ++ mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [89] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
    // [89] phi mulf_init::x_2#2 = mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [89] phi mulf_init::sqr#3 = mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    // mulf_init::@3
  __b3:
    // <sqr
    // [90] mulf_init::$4 = < mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // *sqr1_lo = <sqr
    // [91] *mulf_init::sqr1_lo#2 = mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // >sqr
    // [92] mulf_init::$5 = > mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // *sqr1_hi++ = >sqr
    // [93] *mulf_init::sqr1_hi#2 = mulf_init::$5 -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
    // *sqr1_hi++ = >sqr;
    // [94] mulf_init::sqr1_hi#1 = ++ mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // sqr = sqr + x_2
    // [95] mulf_init::sqr#1 = mulf_init::sqr#3 + mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [96] mulf_init::sqr1_lo#1 = ++ mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [69] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
    // [69] phi mulf_init::x_2#3 = mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [69] phi mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [69] phi mulf_init::sqr#4 = mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [69] phi mulf_init::c#2 = mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [69] phi mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [97] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // *CIA2_TIMER_AB = 0xffffffff
    // [99] *CIA2_TIMER_AB = $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [100] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [101] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // clock_start::@return
    // }
    // [102] return 
    rts
}
  // mulf8u_prepare
// Prepare for fast multiply with an unsigned char to a unsigned int result
// mulf8u_prepare(byte register(A) a)
mulf8u_prepare: {
    .label memA = $fd
    // *memA = a
    // [104] *mulf8u_prepare::memA = mulf8u_prepare::a#2 -- _deref_pbuc1=vbuaa 
    sta memA
    // asm
    // asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
    sta mulf8u_prepared.sm1+1
    sta mulf8u_prepared.sm3+1
    eor #$ff
    sta mulf8u_prepared.sm2+1
    sta mulf8u_prepared.sm4+1
    // mulf8u_prepare::@return
    // }
    // [106] return 
    rts
}
  // mulf8s_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8s_prepare(char a)
// mulf8s_prepared(signed byte register(Y) b)
mulf8s_prepared: {
    .label memA = $fd
    .label m = 5
    // mulf8u_prepared((char) b)
    // [108] mulf8u_prepared::b#0 = (byte)mulf8s_prepared::b#4 -- vbuaa=vbuyy 
    tya
    // [109] call mulf8u_prepared 
    jsr mulf8u_prepared
    // [110] mulf8u_prepared::return#2 = mulf8u_prepared::return#0
    // mulf8s_prepared::@5
    // m = mulf8u_prepared((char) b)
    // [111] mulf8s_prepared::m#0 = mulf8u_prepared::return#2
    // if(*memA<0)
    // [112] if(*mulf8s_prepared::memA>=0) goto mulf8s_prepared::@1 -- _deref_pbsc1_ge_0_then_la1 
    lda memA
    cmp #0
    bpl __b1
    // mulf8s_prepared::@3
    // >m
    // [113] mulf8s_prepared::$6 = > mulf8s_prepared::m#0 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)b
    // [114] mulf8s_prepared::$11 = mulf8s_prepared::$6 - (byte)mulf8s_prepared::b#4 -- vbuaa=vbuaa_minus_vbuyy 
    sty.z $ff
    sec
    sbc.z $ff
    // [115] mulf8s_prepared::m#1 = mulf8s_prepared::m#0 hi= mulf8s_prepared::$11 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [116] phi from mulf8s_prepared::@3 mulf8s_prepared::@5 to mulf8s_prepared::@1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1]
    // [116] phi mulf8s_prepared::m#5 = mulf8s_prepared::m#1 [phi:mulf8s_prepared::@3/mulf8s_prepared::@5->mulf8s_prepared::@1#0] -- register_copy 
    // mulf8s_prepared::@1
  __b1:
    // if(b<0)
    // [117] if(mulf8s_prepared::b#4>=0) goto mulf8s_prepared::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b2
    // mulf8s_prepared::@4
    // >m
    // [118] mulf8s_prepared::$9 = > mulf8s_prepared::m#5 -- vbuaa=_hi_vwuz1 
    lda.z m+1
    // >m = (>m)-(char)*memA
    // [119] mulf8s_prepared::$12 = mulf8s_prepared::$9 - (byte)*mulf8s_prepared::memA -- vbuaa=vbuaa_minus__deref_pbuc1 
    sec
    sbc memA
    // [120] mulf8s_prepared::m#2 = mulf8s_prepared::m#5 hi= mulf8s_prepared::$12 -- vwuz1=vwuz1_sethi_vbuaa 
    sta.z m+1
    // [121] phi from mulf8s_prepared::@1 mulf8s_prepared::@4 to mulf8s_prepared::@2 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2]
    // [121] phi mulf8s_prepared::m#4 = mulf8s_prepared::m#5 [phi:mulf8s_prepared::@1/mulf8s_prepared::@4->mulf8s_prepared::@2#0] -- register_copy 
    // mulf8s_prepared::@2
  __b2:
    // mulf8s_prepared::@return
    // }
    // [122] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $11
    // 0xffffffff - *CIA2_TIMER_AB
    // [123] clock::return#0 = $ffffffff - *CIA2_TIMER_AB -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    // clock::@return
    // }
    // [124] return 
    rts
}
  // print_ulong_at
// Print a unsigned long as HEX at a specific position
// print_ulong_at(dword zp($11) dw)
print_ulong_at: {
    .label dw = $11
    // print_uint_at(>dw, at)
    // [125] print_uint_at::w#0 = > print_ulong_at::dw#0 -- vwuz1=_hi_vduz2 
    lda.z dw+2
    sta.z print_uint_at.w
    lda.z dw+3
    sta.z print_uint_at.w+1
    // [126] call print_uint_at 
    // [134] phi from print_ulong_at to print_uint_at [phi:print_ulong_at->print_uint_at]
    // [134] phi print_uint_at::at#2 = SCREEN [phi:print_ulong_at->print_uint_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z print_uint_at.at
    lda #>SCREEN
    sta.z print_uint_at.at+1
    // [134] phi print_uint_at::w#2 = print_uint_at::w#0 [phi:print_ulong_at->print_uint_at#1] -- register_copy 
    jsr print_uint_at
    // print_ulong_at::@1
    // print_uint_at(<dw, at+4)
    // [127] print_uint_at::w#1 = < print_ulong_at::dw#0 -- vwuz1=_lo_vduz2 
    lda.z dw
    sta.z print_uint_at.w
    lda.z dw+1
    sta.z print_uint_at.w+1
    // [128] call print_uint_at 
    // [134] phi from print_ulong_at::@1 to print_uint_at [phi:print_ulong_at::@1->print_uint_at]
    // [134] phi print_uint_at::at#2 = SCREEN+4 [phi:print_ulong_at::@1->print_uint_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+4
    sta.z print_uint_at.at
    lda #>SCREEN+4
    sta.z print_uint_at.at+1
    // [134] phi print_uint_at::w#2 = print_uint_at::w#1 [phi:print_ulong_at::@1->print_uint_at#1] -- register_copy 
    jsr print_uint_at
    // print_ulong_at::@return
    // }
    // [129] return 
    rts
}
  // mulf8u_prepared
// Calculate fast multiply with a prepared unsigned char to a unsigned int result
// The prepared number is set by calling mulf8u_prepare(char a)
// mulf8u_prepared(byte register(A) b)
mulf8u_prepared: {
    .label resL = $fe
    .label memB = $ff
    .label return = 5
    // *memB = b
    // [130] *mulf8u_prepared::memB = mulf8u_prepared::b#0 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm
    // asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
    tax
    sec
  sm1:
    lda mulf_sqr1_lo,x
  sm2:
    sbc mulf_sqr2_lo,x
    sta resL
  sm3:
    lda mulf_sqr1_hi,x
  sm4:
    sbc mulf_sqr2_hi,x
    sta memB
    // return { *memB, *resL };
    // [132] mulf8u_prepared::return#0 = *mulf8u_prepared::memB w= *mulf8u_prepared::resL -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda resL
    sta.z return
    lda memB
    sta.z return+1
    // mulf8u_prepared::@return
    // }
    // [133] return 
    rts
}
  // print_uint_at
// Print a unsigned int as HEX at a specific position
// print_uint_at(word zp($d) w, byte* zp($f) at)
print_uint_at: {
    .label w = $d
    .label at = $f
    // print_uchar_at(>w, at)
    // [135] print_uchar_at::b#0 = > print_uint_at::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar_at.b
    // [136] print_uchar_at::at#0 = print_uint_at::at#2
    // [137] call print_uchar_at 
    // [142] phi from print_uint_at to print_uchar_at [phi:print_uint_at->print_uchar_at]
    // [142] phi print_uchar_at::at#2 = print_uchar_at::at#0 [phi:print_uint_at->print_uchar_at#0] -- register_copy 
    // [142] phi print_uchar_at::b#2 = print_uchar_at::b#0 [phi:print_uint_at->print_uchar_at#1] -- register_copy 
    jsr print_uchar_at
    // print_uint_at::@1
    // print_uchar_at(<w, at+2)
    // [138] print_uchar_at::b#1 = < print_uint_at::w#2 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar_at.b
    // [139] print_uchar_at::at#1 = print_uint_at::at#2 + 2 -- pbuz1=pbuz1_plus_vbuc1 
    lda #2
    clc
    adc.z print_uchar_at.at
    sta.z print_uchar_at.at
    bcc !+
    inc.z print_uchar_at.at+1
  !:
    // [140] call print_uchar_at 
    // [142] phi from print_uint_at::@1 to print_uchar_at [phi:print_uint_at::@1->print_uchar_at]
    // [142] phi print_uchar_at::at#2 = print_uchar_at::at#1 [phi:print_uint_at::@1->print_uchar_at#0] -- register_copy 
    // [142] phi print_uchar_at::b#2 = print_uchar_at::b#1 [phi:print_uint_at::@1->print_uchar_at#1] -- register_copy 
    jsr print_uchar_at
    // print_uint_at::@return
    // }
    // [141] return 
    rts
}
  // print_uchar_at
// Print a char as HEX at a specific position
// print_uchar_at(byte zp(9) b, byte* zp($f) at)
print_uchar_at: {
    .label b = 9
    .label at = $f
    // b>>4
    // [143] print_uchar_at::$0 = print_uchar_at::b#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // print_char_at(print_hextab[b>>4], at)
    // [144] print_char_at::ch#0 = print_hextab[print_uchar_at::$0] -- vbuxx=pbuc1_derefidx_vbuaa 
    tay
    ldx print_hextab,y
    // [145] print_char_at::at#0 = print_uchar_at::at#2 -- pbuz1=pbuz2 
    lda.z at
    sta.z print_char_at.at
    lda.z at+1
    sta.z print_char_at.at+1
    // [146] call print_char_at 
  // Table of hexadecimal digits
    // [152] phi from print_uchar_at to print_char_at [phi:print_uchar_at->print_char_at]
    // [152] phi print_char_at::at#2 = print_char_at::at#0 [phi:print_uchar_at->print_char_at#0] -- register_copy 
    // [152] phi print_char_at::ch#2 = print_char_at::ch#0 [phi:print_uchar_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    // print_uchar_at::@1
    // b&$f
    // [147] print_uchar_at::$2 = print_uchar_at::b#2 & $f -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    tay
    // print_char_at(print_hextab[b&$f], at+1)
    // [148] print_char_at::at#1 = print_uchar_at::at#2 + 1 -- pbuz1=pbuz2_plus_1 
    clc
    lda.z at
    adc #1
    sta.z print_char_at.at
    lda.z at+1
    adc #0
    sta.z print_char_at.at+1
    // [149] print_char_at::ch#1 = print_hextab[print_uchar_at::$2] -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx print_hextab,y
    // [150] call print_char_at 
    // [152] phi from print_uchar_at::@1 to print_char_at [phi:print_uchar_at::@1->print_char_at]
    // [152] phi print_char_at::at#2 = print_char_at::at#1 [phi:print_uchar_at::@1->print_char_at#0] -- register_copy 
    // [152] phi print_char_at::ch#2 = print_char_at::ch#1 [phi:print_uchar_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    // print_uchar_at::@return
    // }
    // [151] return 
    rts
}
  // print_char_at
// Print a single char
// print_char_at(byte register(X) ch, byte* zp(7) at)
print_char_at: {
    .label at = 7
    // *(at) = ch
    // [153] *print_char_at::at#2 = print_char_at::ch#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (at),y
    // print_char_at::@return
    // }
    // [154] return 
    rts
}
  // File Data
.segment Data
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  print_hextab: .text "0123456789abcdef"
  // Sine and Cosine tables  
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))

  // Positions to rotate
  xs: .byte -$46, -$46, -$46, 0, 0, $46, $46, $46
  ys: .byte -$46, 0, $46, -$46, $46, -$46, 0, $46
.pc = $3000 "SPRITE"
// A single sprite
SPRITE:
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)


