Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) rpc#0 ← (byte) 0
  (byte) key#0 ← (byte) 0
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) rpc#7 ← phi( @1/(byte) rpc#9 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) rpc#4 ← phi( main/(byte) rpc#7 main::@3/(byte) rpc#8 )
  (byte) rpc#1 ← ++ (byte) rpc#4
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte) rpc#10 ← phi( main::@1/(byte) rpc#1 main::@2/(byte) rpc#10 )
  (byte) key#1 ← *((const byte*) DC00)
  (bool~) main::$0 ← (byte) key#1 == (number) 0
  (number~) main::$1 ← (byte) key#1 & (number) $1f
  (bool~) main::$2 ← (number~) main::$1 == (number) $1f
  (bool~) main::$3 ← (bool~) main::$0 && (bool~) main::$2
  if((bool~) main::$3) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) key#6 ← phi( main::@2/(byte) key#1 )
  (byte) rpc#8 ← phi( main::@2/(byte) rpc#10 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) key#4 ← phi( main::@3/(byte) key#6 )
  (byte) rpc#5 ← phi( main::@3/(byte) rpc#8 )
  (byte) rpc#2 ← (byte) rpc#5
  (byte) key#2 ← (byte) key#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) key#7 ← phi( @begin/(byte) key#0 )
  (byte) rpc#9 ← phi( @begin/(byte) rpc#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (byte) key#5 ← phi( @1/(byte) key#2 )
  (byte) rpc#6 ← phi( @1/(byte) rpc#2 )
  (byte) rpc#3 ← (byte) rpc#6
  (byte) key#3 ← (byte) key#5
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) DC00 = (byte*)(number) $dc00
(byte) key
(byte) key#0
(byte) key#1
(byte) key#2
(byte) key#3
(byte) key#4
(byte) key#5
(byte) key#6
(byte) key#7
(void()) main()
(bool~) main::$0
(number~) main::$1
(bool~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) rpc
(byte) rpc#0
(byte) rpc#1
(byte) rpc#10
(byte) rpc#2
(byte) rpc#3
(byte) rpc#4
(byte) rpc#5
(byte) rpc#6
(byte) rpc#7
(byte) rpc#8
(byte) rpc#9

Adding number conversion cast (unumber) 0 in (bool~) main::$0 ← (byte) key#1 == (number) 0
Adding number conversion cast (unumber) $1f in (number~) main::$1 ← (byte) key#1 & (number) $1f
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) key#1 & (unumber)(number) $1f
Adding number conversion cast (unumber) $1f in (bool~) main::$2 ← (unumber~) main::$1 == (number) $1f
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast $1f
Simplifying constant integer cast $1f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $1f
Finalized unsigned number type (byte) $1f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) key#1 & (byte) $1f
Alias (byte) rpc#10 = (byte) rpc#8 (byte) rpc#5 (byte) rpc#2 
Alias (byte) key#1 = (byte) key#6 (byte) key#4 (byte) key#2 
Alias (byte) rpc#0 = (byte) rpc#9 
Alias (byte) key#0 = (byte) key#7 
Alias (byte) rpc#3 = (byte) rpc#6 
Alias (byte) key#3 = (byte) key#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) rpc#7 (byte) rpc#0
Identical Phi Values (byte) rpc#10 (byte) rpc#1
Identical Phi Values (byte) rpc#3 (byte) rpc#10
Identical Phi Values (byte) key#3 (byte) key#1
Successful SSA optimization Pass2IdenticalPhiElimination
Rewriting && if()-condition to two if()s [10] (bool~) main::$3 ← (bool~) main::$0 && (bool~) main::$2
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte) rpc#0 = 0
Constant (const byte) key#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [13] if(true) goto main::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) key#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Simple Condition (bool~) main::$0 [6] if((byte) key#1==(byte) 0) goto main::@5
Simple Condition (bool~) main::$2 [8] if((byte~) main::$1==(byte) $1f) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [6] if((byte) key#1!=(byte) 0) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Inlining constant with var siblings (const byte) rpc#0
Constant inlined rpc#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [12] rpc#11 ← rpc#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Renumbering block main::@5 to main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  [5] (byte) rpc#4 ← phi( main/(byte) 0 main::@2/(byte) rpc#1 main::@3/(byte) rpc#1 )
  [6] (byte) rpc#1 ← ++ (byte) rpc#4
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [7] (byte) key#1 ← *((const byte*) DC00)
  [8] (byte~) main::$1 ← (byte) key#1 & (byte) $1f
  [9] if((byte) key#1!=(byte) 0) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] if((byte~) main::$1==(byte) $1f) goto main::@2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(byte) key
(byte) key#1 151.5
(void()) main()
(byte~) main::$1 101.0
(byte) rpc
(byte) rpc#1 42.6
(byte) rpc#4 213.0

Initial phi equivalence classes
[ rpc#4 rpc#1 ]
Added variable key#1 to live range equivalence class [ key#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ rpc#4 rpc#1 ]
[ key#1 ]
[ main::$1 ]
Allocated zp[1]:2 [ rpc#4 rpc#1 ]
Allocated zp[1]:3 [ key#1 ]
Allocated zp[1]:4 [ main::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Duplicate Loop Problem from Richard-William Loerakker
// Resulted in infinite loop in loop depth analysis
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label DC00 = $dc00
  .label rpc = 2
  .label key = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __1 = 4
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) rpc#4 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z rpc
    jmp __b1
    // [5] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [5] phi (byte) rpc#4 = (byte) rpc#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) rpc#1 ← ++ (byte) rpc#4 -- vbuz1=_inc_vbuz1 
    inc.z rpc
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte) key#1 ← *((const byte*) DC00) -- vbuz1=_deref_pbuc1 
    lda DC00
    sta.z key
    // [8] (byte~) main::$1 ← (byte) key#1 & (byte) $1f -- vbuz1=vbuz2_band_vbuc1 
    lda #$1f
    and.z key
    sta.z __1
    // [9] if((byte) key#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z key
    cmp #0
    bne __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [10] if((byte~) main::$1==(byte) $1f) goto main::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #$1f
    cmp.z __1
    beq __b2
    jmp __b1_from___b3
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ rpc#4 rpc#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ key#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 255.6: zp[1]:2 [ rpc#4 rpc#1 ] 151.5: zp[1]:3 [ key#1 ] 
Uplift Scope [main] 101: zp[1]:4 [ main::$1 ] 

Uplifting [] best 2842 combination reg byte y [ rpc#4 rpc#1 ] reg byte x [ key#1 ] 
Uplifting [main] best 2442 combination reg byte a [ main::$1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Duplicate Loop Problem from Richard-William Loerakker
// Resulted in infinite loop in loop depth analysis
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label DC00 = $dc00
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) rpc#4 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [5] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
  __b1_from___b2:
  __b1_from___b3:
    // [5] phi (byte) rpc#4 = (byte) rpc#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) rpc#1 ← ++ (byte) rpc#4 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte) key#1 ← *((const byte*) DC00) -- vbuxx=_deref_pbuc1 
    ldx DC00
    // [8] (byte~) main::$1 ← (byte) key#1 & (byte) $1f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$1f
    // [9] if((byte) key#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [10] if((byte~) main::$1==(byte) $1f) goto main::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$1f
    beq __b2
    jmp __b1_from___b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b3 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) DC00 = (byte*) 56320
(byte) key
(byte) key#1 reg byte x 151.5
(void()) main()
(byte~) main::$1 reg byte a 101.0
(label) main::@1
(label) main::@2
(label) main::@3
(byte) rpc
(byte) rpc#1 reg byte y 42.6
(byte) rpc#4 reg byte y 213.0

reg byte y [ rpc#4 rpc#1 ]
reg byte x [ key#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 2040

  // File Comments
// Duplicate Loop Problem from Richard-William Loerakker
// Resulted in infinite loop in loop depth analysis
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label DC00 = $dc00
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) rpc#4 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@2 main::@3 to main::@1 [phi:main::@2/main::@3->main::@1]
    // [5] phi (byte) rpc#4 = (byte) rpc#1 [phi:main::@2/main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // rpc++;
    // [6] (byte) rpc#1 ← ++ (byte) rpc#4 -- vbuyy=_inc_vbuyy 
    iny
    // main::@2
  __b2:
    // key = *DC00
    // [7] (byte) key#1 ← *((const byte*) DC00) -- vbuxx=_deref_pbuc1 
    ldx DC00
    // key & %00011111
    // [8] (byte~) main::$1 ← (byte) key#1 & (byte) $1f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$1f
    // while(key == 0 && ((key & %00011111) == %00011111))
    // [9] if((byte) key#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::@3
    // [10] if((byte~) main::$1==(byte) $1f) goto main::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$1f
    beq __b2
    jmp __b1
}
  // File Data

