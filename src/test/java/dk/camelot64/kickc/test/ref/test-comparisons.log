PARSING src/test/java/dk/camelot64/kickc/test/test-comparisons.kc
import "print.kc"

void main() {
    print_cls();
    byte r;
    byte[$10] cs = { $07, $f7, $17, $e7, $27, $d7 , $37, $c7, $47, $b7, $57, $a7, $67, $97, $77, $87 };
    byte a = 7;
    for( byte i : 0..$f ) {
        byte b = $ee-a;
        r = '-'; if(a<b) r='+'; printu(a, '<', b, r);
        r = '-'; if(a<$87) r='+'; printu(a, '<', $87, r);
        r = '-'; if(a<cs[i]) r='+'; printu(a, '<', cs[i], r);
        r = '-'; if(a<a) r='+'; printu(a, '<', a, r);
        print_ln();
        a=a+$10;
    }

}


void printu(byte a, byte op, byte b, byte res) {
    print_char(' ');
    print_byte(a);
    print_char(op);
    print_byte(b);
    print_char(' ');
    print_char(res);
}

Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/print.kc

byte* line_cursor = $0400;
byte* char_cursor = line_cursor;

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(char_cursor++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        line_cursor = line_cursor + $28;
    } while (line_cursor<char_cursor);
    char_cursor = line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(char_cursor++) = ch;
}

// Clear the screen
void print_cls() {
    for(byte* sc=$0400; sc!=$0400+1000; sc++) {
        *sc = ' ';
    }
}



Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc

STATEMENTS
  (byte*) line_cursor ← (word/signed word) 1024
  (byte*) char_cursor ← (byte*) line_cursor
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (word/signed word) 1024
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (word/signed word~) print_cls::$0 ← (word/signed word) 1024 + (word/signed word) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (word/signed word~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
print_cls::@return:
  return 
endproc // print_cls()
proc (void()) main()
  (void~) main::$0 ← call print_cls 
  (byte[16]) main::cs ← { (byte/signed byte/word/signed word) 7, (byte/word/signed word) 247, (byte/signed byte/word/signed word) 23, (byte/word/signed word) 231, (byte/signed byte/word/signed word) 39, (byte/word/signed word) 215, (byte/signed byte/word/signed word) 55, (byte/word/signed word) 199, (byte/signed byte/word/signed word) 71, (byte/word/signed word) 183, (byte/signed byte/word/signed word) 87, (byte/word/signed word) 167, (byte/signed byte/word/signed word) 103, (byte/word/signed word) 151, (byte/signed byte/word/signed word) 119, (byte/word/signed word) 135 }
  (byte) main::a ← (byte/signed byte/word/signed word) 7
  (byte) main::i ← (byte/signed byte/word/signed word) 0
main::@1:
  (byte/signed byte/word/signed word~) main::$1 ← (byte/word/signed word) 238 - (byte) main::a
  (byte) main::b ← (byte/signed byte/word/signed word~) main::$1
  (byte) main::r ← (byte) '-'
  (boolean~) main::$2 ← (byte) main::a < (byte) main::b
  (boolean~) main::$3 ← ! (boolean~) main::$2
  if((boolean~) main::$3) goto main::@2
  (byte) main::r ← (byte) '+'
main::@2:
  (void~) main::$4 ← call printu (byte) main::a (byte) '<' (byte) main::b (byte) main::r 
  (byte) main::r ← (byte) '-'
  (boolean~) main::$5 ← (byte) main::a < (byte/word/signed word) 135
  (boolean~) main::$6 ← ! (boolean~) main::$5
  if((boolean~) main::$6) goto main::@3
  (byte) main::r ← (byte) '+'
main::@3:
  (void~) main::$7 ← call printu (byte) main::a (byte) '<' (byte/word/signed word) 135 (byte) main::r 
  (byte) main::r ← (byte) '-'
  (boolean~) main::$8 ← (byte) main::a < *((byte[16]) main::cs + (byte) main::i)
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@4
  (byte) main::r ← (byte) '+'
main::@4:
  (void~) main::$10 ← call printu (byte) main::a (byte) '<' *((byte[16]) main::cs + (byte) main::i) (byte) main::r 
  (byte) main::r ← (byte) '-'
  (boolean~) main::$11 ← (byte) main::a < (byte) main::a
  (boolean~) main::$12 ← ! (boolean~) main::$11
  if((boolean~) main::$12) goto main::@5
  (byte) main::r ← (byte) '+'
main::@5:
  (void~) main::$13 ← call printu (byte) main::a (byte) '<' (byte) main::a (byte) main::r 
  (void~) main::$14 ← call print_ln 
  (byte/word~) main::$15 ← (byte) main::a + (byte/signed byte/word/signed word) 16
  (byte) main::a ← (byte/word~) main::$15
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$16 ← (byte) main::i != (byte/signed byte/word/signed word) 16
  if((boolean~) main::$16) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) printu((byte) printu::a , (byte) printu::op , (byte) printu::b , (byte) printu::res)
  (void~) printu::$0 ← call print_char (byte) ' ' 
  (void~) printu::$1 ← call print_byte (byte) printu::a 
  (void~) printu::$2 ← call print_char (byte) printu::op 
  (void~) printu::$3 ← call print_byte (byte) printu::b 
  (void~) printu::$4 ← call print_char (byte) ' ' 
  (void~) printu::$5 ← call print_char (byte) printu::res 
printu::@return:
  return 
endproc // printu()
  call main 

SYMBOLS
(byte*) char_cursor
(byte*) line_cursor
(void()) main()
(void~) main::$0
(byte/signed byte/word/signed word~) main::$1
(void~) main::$10
(boolean~) main::$11
(boolean~) main::$12
(void~) main::$13
(void~) main::$14
(byte/word~) main::$15
(boolean~) main::$16
(boolean~) main::$2
(boolean~) main::$3
(void~) main::$4
(boolean~) main::$5
(boolean~) main::$6
(void~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::a
(byte) main::b
(byte[16]) main::cs
(byte) main::i
(byte) main::r
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(void()) print_cls()
(word/signed word~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(void()) printu((byte) printu::a , (byte) printu::op , (byte) printu::b , (byte) printu::res)
(void~) printu::$0
(void~) printu::$1
(void~) printu::$2
(void~) printu::$3
(void~) printu::$4
(void~) printu::$5
(label) printu::@return
(byte) printu::a
(byte) printu::b
(byte) printu::op
(byte) printu::res

Promoting word/signed word to byte* in line_cursor ← ((byte*)) 1024
Promoting word/signed word to byte* in print_cls::sc ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) line_cursor ← ((byte*)) (word/signed word) 1024
  (byte*) char_cursor ← (byte*) line_cursor
  to:@1
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_char: scope:[print_char]  from
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← ((byte*)) (word/signed word) 1024
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (word/signed word~) print_cls::$0 ← (word/signed word) 1024 + (word/signed word) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (word/signed word~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@8: scope:[]  from @7
  to:@9
main: scope:[main]  from
  (void~) main::$0 ← call print_cls 
  (byte[16]) main::cs ← { (byte/signed byte/word/signed word) 7, (byte/word/signed word) 247, (byte/signed byte/word/signed word) 23, (byte/word/signed word) 231, (byte/signed byte/word/signed word) 39, (byte/word/signed word) 215, (byte/signed byte/word/signed word) 55, (byte/word/signed word) 199, (byte/signed byte/word/signed word) 71, (byte/word/signed word) 183, (byte/signed byte/word/signed word) 87, (byte/word/signed word) 167, (byte/signed byte/word/signed word) 103, (byte/word/signed word) 151, (byte/signed byte/word/signed word) 119, (byte/word/signed word) 135 }
  (byte) main::a ← (byte/signed byte/word/signed word) 7
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte/signed byte/word/signed word~) main::$1 ← (byte/word/signed word) 238 - (byte) main::a
  (byte) main::b ← (byte/signed byte/word/signed word~) main::$1
  (byte) main::r ← (byte) '-'
  (boolean~) main::$2 ← (byte) main::a < (byte) main::b
  (boolean~) main::$3 ← ! (boolean~) main::$2
  if((boolean~) main::$3) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1 main::@6
  (void~) main::$4 ← call printu (byte) main::a (byte) '<' (byte) main::b (byte) main::r 
  (byte) main::r ← (byte) '-'
  (boolean~) main::$5 ← (byte) main::a < (byte/word/signed word) 135
  (boolean~) main::$6 ← ! (boolean~) main::$5
  if((boolean~) main::$6) goto main::@3
  to:main::@7
main::@6: scope:[main]  from main::@1
  (byte) main::r ← (byte) '+'
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@7
  (void~) main::$7 ← call printu (byte) main::a (byte) '<' (byte/word/signed word) 135 (byte) main::r 
  (byte) main::r ← (byte) '-'
  (boolean~) main::$8 ← (byte) main::a < *((byte[16]) main::cs + (byte) main::i)
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@4
  to:main::@8
main::@7: scope:[main]  from main::@2
  (byte) main::r ← (byte) '+'
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@8
  (void~) main::$10 ← call printu (byte) main::a (byte) '<' *((byte[16]) main::cs + (byte) main::i) (byte) main::r 
  (byte) main::r ← (byte) '-'
  (boolean~) main::$11 ← (byte) main::a < (byte) main::a
  (boolean~) main::$12 ← ! (boolean~) main::$11
  if((boolean~) main::$12) goto main::@5
  to:main::@9
main::@8: scope:[main]  from main::@3
  (byte) main::r ← (byte) '+'
  to:main::@4
main::@5: scope:[main]  from main::@4 main::@9
  (void~) main::$13 ← call printu (byte) main::a (byte) '<' (byte) main::a (byte) main::r 
  (void~) main::$14 ← call print_ln 
  (byte/word~) main::$15 ← (byte) main::a + (byte/signed byte/word/signed word) 16
  (byte) main::a ← (byte/word~) main::$15
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$16 ← (byte) main::i != (byte/signed byte/word/signed word) 16
  if((boolean~) main::$16) goto main::@1
  to:main::@10
main::@9: scope:[main]  from main::@4
  (byte) main::r ← (byte) '+'
  to:main::@5
main::@10: scope:[main]  from main::@5
  to:main::@return
main::@return: scope:[main]  from main::@10
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
printu: scope:[printu]  from
  (void~) printu::$0 ← call print_char (byte) ' ' 
  (void~) printu::$1 ← call print_byte (byte) printu::a 
  (void~) printu::$2 ← call print_char (byte) printu::op 
  (void~) printu::$3 ← call print_byte (byte) printu::b 
  (void~) printu::$4 ← call print_char (byte) ' ' 
  (void~) printu::$5 ← call print_char (byte) printu::res 
  to:printu::@return
printu::@return: scope:[printu]  from printu
  return 
  to:@return
@10: scope:[]  from @9
  call main 
  to:@end
@end: scope:[]  from @10

Removing unused procedure print_str
Removing unused procedure print_sword
Removing unused procedure print_sbyte
Removing unused procedure print_word
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$4
Eliminating unused variable - keeping the call (void~) main::$7
Eliminating unused variable - keeping the call (void~) main::$10
Eliminating unused variable - keeping the call (void~) main::$13
Eliminating unused variable - keeping the call (void~) main::$14
Eliminating unused variable - keeping the call (void~) printu::$0
Eliminating unused variable - keeping the call (void~) printu::$1
Eliminating unused variable - keeping the call (void~) printu::$2
Eliminating unused variable - keeping the call (void~) printu::$3
Eliminating unused variable - keeping the call (void~) printu::$4
Eliminating unused variable - keeping the call (void~) printu::$5
Creating constant string variable for inline (const string) print_byte::$4 "0123456789abcdef"
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block print_cls::@2
Removing empty block @8
Removing empty block main::@10
Removing empty block @9
PROCEDURE MODIFY VARIABLE ANALYSIS
print_ln modifies line_cursor
print_ln modifies char_cursor
print_byte modifies char_cursor
print_char modifies char_cursor
main modifies char_cursor
main modifies line_cursor
printu modifies char_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) line_cursor#0 ← ((byte*)) (word/signed word) 1024
  (byte*) char_cursor#0 ← (byte*) line_cursor#0
  to:@10
print_ln: scope:[print_ln]  from main::@15
  (byte*) char_cursor#43 ← phi( main::@15/(byte*) char_cursor#11 )
  (byte*) line_cursor#12 ← phi( main::@15/(byte*) line_cursor#13 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) char_cursor#22 ← phi( print_ln/(byte*) char_cursor#43 print_ln::@1/(byte*) char_cursor#22 )
  (byte*) line_cursor#6 ← phi( print_ln/(byte*) line_cursor#12 print_ln::@1/(byte*) line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40
  (byte*) line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor#1 < (byte*) char_cursor#22
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) line_cursor#7 ← phi( print_ln::@1/(byte*) line_cursor#1 )
  (byte*) char_cursor#1 ← (byte*) line_cursor#7
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) char_cursor#23 ← phi( print_ln::@2/(byte*) char_cursor#1 )
  (byte*) line_cursor#8 ← phi( print_ln::@2/(byte*) line_cursor#7 )
  (byte*) line_cursor#2 ← (byte*) line_cursor#8
  (byte*) char_cursor#2 ← (byte*) char_cursor#23
  return 
  to:@return
print_byte: scope:[print_byte]  from printu::@1 printu::@3
  (byte*) char_cursor#44 ← phi( printu::@1/(byte*) char_cursor#14 printu::@3/(byte*) char_cursor#16 )
  (byte) print_byte::b#2 ← phi( printu::@1/(byte) print_byte::b#0 printu::@3/(byte) print_byte::b#1 )
  (byte[]) print_byte::hextab#0 ← (const string) print_byte::$4
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4
  (byte) print_char::ch#0 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) char_cursor#24 ← phi( print_byte/(byte*) char_cursor#7 )
  (byte*) char_cursor#3 ← (byte*) char_cursor#24
  (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word) 15
  (byte) print_char::ch#1 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) char_cursor#25 ← phi( print_byte::@1/(byte*) char_cursor#7 )
  (byte*) char_cursor#4 ← (byte*) char_cursor#25
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) char_cursor#26 ← phi( print_byte::@2/(byte*) char_cursor#4 )
  (byte*) char_cursor#5 ← (byte*) char_cursor#26
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 printu printu::@2 printu::@4 printu::@5
  (byte*) char_cursor#27 ← phi( print_byte/(byte*) char_cursor#44 print_byte::@1/(byte*) char_cursor#3 printu/(byte*) char_cursor#45 printu::@2/(byte*) char_cursor#15 printu::@4/(byte*) char_cursor#17 printu::@5/(byte*) char_cursor#18 )
  (byte) print_char::ch#6 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 printu/(byte) print_char::ch#2 printu::@2/(byte) print_char::ch#3 printu::@4/(byte) print_char::ch#4 printu::@5/(byte) print_char::ch#5 )
  *((byte*) char_cursor#27) ← (byte) print_char::ch#6
  (byte*) char_cursor#6 ← ++ (byte*) char_cursor#27
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) char_cursor#28 ← phi( print_char/(byte*) char_cursor#6 )
  (byte*) char_cursor#7 ← (byte*) char_cursor#28
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_cls::sc#0 ← ((byte*)) (word/signed word) 1024
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (word/signed word~) print_cls::$0 ← (word/signed word) 1024 + (word/signed word) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (word/signed word~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  return 
  to:@return
main: scope:[main]  from @10
  (byte*) line_cursor#28 ← phi( @10/(byte*) line_cursor#14 )
  (byte*) char_cursor#57 ← phi( @10/(byte*) char_cursor#50 )
  call print_cls param-assignment
  to:main::@11
main::@11: scope:[main]  from main
  (byte*) line_cursor#27 ← phi( main/(byte*) line_cursor#28 )
  (byte*) char_cursor#56 ← phi( main/(byte*) char_cursor#57 )
  (byte[16]) main::cs#0 ← { (byte/signed byte/word/signed word) 7, (byte/word/signed word) 247, (byte/signed byte/word/signed word) 23, (byte/word/signed word) 231, (byte/signed byte/word/signed word) 39, (byte/word/signed word) 215, (byte/signed byte/word/signed word) 55, (byte/word/signed word) 199, (byte/signed byte/word/signed word) 71, (byte/word/signed word) 183, (byte/signed byte/word/signed word) 87, (byte/word/signed word) 167, (byte/signed byte/word/signed word) 103, (byte/word/signed word) 151, (byte/signed byte/word/signed word) 119, (byte/word/signed word) 135 }
  (byte) main::a#0 ← (byte/signed byte/word/signed word) 7
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@16
  (byte*) line_cursor#25 ← phi( main::@11/(byte*) line_cursor#27 main::@16/(byte*) line_cursor#3 )
  (byte) main::i#14 ← phi( main::@11/(byte) main::i#0 main::@16/(byte) main::i#1 )
  (byte*) char_cursor#51 ← phi( main::@11/(byte*) char_cursor#56 main::@16/(byte*) char_cursor#12 )
  (byte) main::a#2 ← phi( main::@11/(byte) main::a#0 main::@16/(byte) main::a#1 )
  (byte/signed byte/word/signed word~) main::$1 ← (byte/word/signed word) 238 - (byte) main::a#2
  (byte) main::b#0 ← (byte/signed byte/word/signed word~) main::$1
  (byte) main::r#0 ← (byte) '-'
  (boolean~) main::$2 ← (byte) main::a#2 < (byte) main::b#0
  (boolean~) main::$3 ← ! (boolean~) main::$2
  if((boolean~) main::$3) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1 main::@6
  (byte*) line_cursor#24 ← phi( main::@1/(byte*) line_cursor#25 main::@6/(byte*) line_cursor#26 )
  (byte) main::i#11 ← phi( main::@1/(byte) main::i#14 main::@6/(byte) main::i#15 )
  (byte*) char_cursor#46 ← phi( main::@1/(byte*) char_cursor#51 main::@6/(byte*) char_cursor#52 )
  (byte) main::r#8 ← phi( main::@1/(byte) main::r#0 main::@6/(byte) main::r#2 )
  (byte) main::b#1 ← phi( main::@1/(byte) main::b#0 main::@6/(byte) main::b#2 )
  (byte) main::a#3 ← phi( main::@1/(byte) main::a#2 main::@6/(byte) main::a#11 )
  (byte) printu::a#0 ← (byte) main::a#3
  (byte) printu::op#0 ← (byte) '<'
  (byte) printu::b#0 ← (byte) main::b#1
  (byte) printu::res#0 ← (byte) main::r#8
  call printu param-assignment
  to:main::@12
main::@12: scope:[main]  from main::@2
  (byte*) line_cursor#22 ← phi( main::@2/(byte*) line_cursor#24 )
  (byte) main::i#8 ← phi( main::@2/(byte) main::i#11 )
  (byte) main::a#4 ← phi( main::@2/(byte) main::a#3 )
  (byte*) char_cursor#29 ← phi( main::@2/(byte*) char_cursor#20 )
  (byte*) char_cursor#8 ← (byte*) char_cursor#29
  (byte) main::r#1 ← (byte) '-'
  (boolean~) main::$5 ← (byte) main::a#4 < (byte/word/signed word) 135
  (boolean~) main::$6 ← ! (boolean~) main::$5
  if((boolean~) main::$6) goto main::@3
  to:main::@7
main::@6: scope:[main]  from main::@1
  (byte*) line_cursor#26 ← phi( main::@1/(byte*) line_cursor#25 )
  (byte) main::i#15 ← phi( main::@1/(byte) main::i#14 )
  (byte*) char_cursor#52 ← phi( main::@1/(byte*) char_cursor#51 )
  (byte) main::b#2 ← phi( main::@1/(byte) main::b#0 )
  (byte) main::a#11 ← phi( main::@1/(byte) main::a#2 )
  (byte) main::r#2 ← (byte) '+'
  to:main::@2
main::@3: scope:[main]  from main::@12 main::@7
  (byte*) line_cursor#21 ← phi( main::@12/(byte*) line_cursor#22 main::@7/(byte*) line_cursor#23 )
  (byte) main::i#5 ← phi( main::@12/(byte) main::i#8 main::@7/(byte) main::i#9 )
  (byte*) char_cursor#47 ← phi( main::@12/(byte*) char_cursor#8 main::@7/(byte*) char_cursor#53 )
  (byte) main::r#9 ← phi( main::@12/(byte) main::r#1 main::@7/(byte) main::r#4 )
  (byte) main::a#5 ← phi( main::@12/(byte) main::a#4 main::@7/(byte) main::a#12 )
  (byte) printu::a#1 ← (byte) main::a#5
  (byte) printu::op#1 ← (byte) '<'
  (byte) printu::b#1 ← (byte/word/signed word) 135
  (byte) printu::res#1 ← (byte) main::r#9
  call printu param-assignment
  to:main::@13
main::@13: scope:[main]  from main::@3
  (byte*) line_cursor#19 ← phi( main::@3/(byte*) line_cursor#21 )
  (byte) main::i#2 ← phi( main::@3/(byte) main::i#5 )
  (byte) main::a#6 ← phi( main::@3/(byte) main::a#5 )
  (byte*) char_cursor#30 ← phi( main::@3/(byte*) char_cursor#20 )
  (byte*) char_cursor#9 ← (byte*) char_cursor#30
  (byte) main::r#3 ← (byte) '-'
  (boolean~) main::$8 ← (byte) main::a#6 < *((byte[16]) main::cs#0 + (byte) main::i#2)
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@4
  to:main::@8
main::@7: scope:[main]  from main::@12
  (byte*) line_cursor#23 ← phi( main::@12/(byte*) line_cursor#22 )
  (byte) main::i#9 ← phi( main::@12/(byte) main::i#8 )
  (byte*) char_cursor#53 ← phi( main::@12/(byte*) char_cursor#8 )
  (byte) main::a#12 ← phi( main::@12/(byte) main::a#4 )
  (byte) main::r#4 ← (byte) '+'
  to:main::@3
main::@4: scope:[main]  from main::@13 main::@8
  (byte*) line_cursor#18 ← phi( main::@13/(byte*) line_cursor#19 main::@8/(byte*) line_cursor#20 )
  (byte*) char_cursor#48 ← phi( main::@13/(byte*) char_cursor#9 main::@8/(byte*) char_cursor#54 )
  (byte) main::r#10 ← phi( main::@13/(byte) main::r#3 main::@8/(byte) main::r#6 )
  (byte) main::i#3 ← phi( main::@13/(byte) main::i#2 main::@8/(byte) main::i#6 )
  (byte) main::a#7 ← phi( main::@13/(byte) main::a#6 main::@8/(byte) main::a#13 )
  (byte) printu::a#2 ← (byte) main::a#7
  (byte) printu::op#2 ← (byte) '<'
  (byte) printu::b#2 ← *((byte[16]) main::cs#0 + (byte) main::i#3)
  (byte) printu::res#2 ← (byte) main::r#10
  call printu param-assignment
  to:main::@14
main::@14: scope:[main]  from main::@4
  (byte) main::i#12 ← phi( main::@4/(byte) main::i#3 )
  (byte*) line_cursor#16 ← phi( main::@4/(byte*) line_cursor#18 )
  (byte) main::a#8 ← phi( main::@4/(byte) main::a#7 )
  (byte*) char_cursor#31 ← phi( main::@4/(byte*) char_cursor#20 )
  (byte*) char_cursor#10 ← (byte*) char_cursor#31
  (byte) main::r#5 ← (byte) '-'
  (boolean~) main::$11 ← (byte) main::a#8 < (byte) main::a#8
  (boolean~) main::$12 ← ! (boolean~) main::$11
  if((boolean~) main::$12) goto main::@5
  to:main::@9
main::@8: scope:[main]  from main::@13
  (byte*) line_cursor#20 ← phi( main::@13/(byte*) line_cursor#19 )
  (byte*) char_cursor#54 ← phi( main::@13/(byte*) char_cursor#9 )
  (byte) main::i#6 ← phi( main::@13/(byte) main::i#2 )
  (byte) main::a#13 ← phi( main::@13/(byte) main::a#6 )
  (byte) main::r#6 ← (byte) '+'
  to:main::@4
main::@5: scope:[main]  from main::@14 main::@9
  (byte) main::i#10 ← phi( main::@14/(byte) main::i#12 main::@9/(byte) main::i#13 )
  (byte*) line_cursor#15 ← phi( main::@14/(byte*) line_cursor#16 main::@9/(byte*) line_cursor#17 )
  (byte*) char_cursor#49 ← phi( main::@14/(byte*) char_cursor#10 main::@9/(byte*) char_cursor#55 )
  (byte) main::r#11 ← phi( main::@14/(byte) main::r#5 main::@9/(byte) main::r#7 )
  (byte) main::a#9 ← phi( main::@14/(byte) main::a#8 main::@9/(byte) main::a#14 )
  (byte) printu::a#3 ← (byte) main::a#9
  (byte) printu::op#3 ← (byte) '<'
  (byte) printu::b#3 ← (byte) main::a#9
  (byte) printu::res#3 ← (byte) main::r#11
  call printu param-assignment
  to:main::@15
main::@15: scope:[main]  from main::@5
  (byte) main::i#7 ← phi( main::@5/(byte) main::i#10 )
  (byte) main::a#15 ← phi( main::@5/(byte) main::a#9 )
  (byte*) line_cursor#13 ← phi( main::@5/(byte*) line_cursor#15 )
  (byte*) char_cursor#32 ← phi( main::@5/(byte*) char_cursor#20 )
  (byte*) char_cursor#11 ← (byte*) char_cursor#32
  call print_ln param-assignment
  to:main::@16
main::@16: scope:[main]  from main::@15
  (byte) main::i#4 ← phi( main::@15/(byte) main::i#7 )
  (byte) main::a#10 ← phi( main::@15/(byte) main::a#15 )
  (byte*) char_cursor#33 ← phi( main::@15/(byte*) char_cursor#2 )
  (byte*) line_cursor#9 ← phi( main::@15/(byte*) line_cursor#2 )
  (byte*) line_cursor#3 ← (byte*) line_cursor#9
  (byte*) char_cursor#12 ← (byte*) char_cursor#33
  (byte/word~) main::$15 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16
  (byte) main::a#1 ← (byte/word~) main::$15
  (byte) main::i#1 ← ++ (byte) main::i#4
  (boolean~) main::$16 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 16
  if((boolean~) main::$16) goto main::@1
  to:main::@return
main::@9: scope:[main]  from main::@14
  (byte) main::i#13 ← phi( main::@14/(byte) main::i#12 )
  (byte*) line_cursor#17 ← phi( main::@14/(byte*) line_cursor#16 )
  (byte*) char_cursor#55 ← phi( main::@14/(byte*) char_cursor#10 )
  (byte) main::a#14 ← phi( main::@14/(byte) main::a#8 )
  (byte) main::r#7 ← (byte) '+'
  to:main::@5
main::@return: scope:[main]  from main::@16
  (byte*) line_cursor#10 ← phi( main::@16/(byte*) line_cursor#3 )
  (byte*) char_cursor#34 ← phi( main::@16/(byte*) char_cursor#12 )
  (byte*) char_cursor#13 ← (byte*) char_cursor#34
  (byte*) line_cursor#4 ← (byte*) line_cursor#10
  return 
  to:@return
printu: scope:[printu]  from main::@2 main::@3 main::@4 main::@5
  (byte) printu::res#9 ← phi( main::@2/(byte) printu::res#0 main::@3/(byte) printu::res#1 main::@4/(byte) printu::res#2 main::@5/(byte) printu::res#3 )
  (byte) printu::b#7 ← phi( main::@2/(byte) printu::b#0 main::@3/(byte) printu::b#1 main::@4/(byte) printu::b#2 main::@5/(byte) printu::b#3 )
  (byte) printu::op#6 ← phi( main::@2/(byte) printu::op#0 main::@3/(byte) printu::op#1 main::@4/(byte) printu::op#2 main::@5/(byte) printu::op#3 )
  (byte) printu::a#5 ← phi( main::@2/(byte) printu::a#0 main::@3/(byte) printu::a#1 main::@4/(byte) printu::a#2 main::@5/(byte) printu::a#3 )
  (byte*) char_cursor#45 ← phi( main::@2/(byte*) char_cursor#46 main::@3/(byte*) char_cursor#47 main::@4/(byte*) char_cursor#48 main::@5/(byte*) char_cursor#49 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char param-assignment
  to:printu::@1
printu::@1: scope:[printu]  from printu
  (byte) printu::res#8 ← phi( printu/(byte) printu::res#9 )
  (byte) printu::b#6 ← phi( printu/(byte) printu::b#7 )
  (byte) printu::op#5 ← phi( printu/(byte) printu::op#6 )
  (byte) printu::a#4 ← phi( printu/(byte) printu::a#5 )
  (byte*) char_cursor#35 ← phi( printu/(byte*) char_cursor#7 )
  (byte*) char_cursor#14 ← (byte*) char_cursor#35
  (byte) print_byte::b#0 ← (byte) printu::a#4
  call print_byte param-assignment
  to:printu::@2
printu::@2: scope:[printu]  from printu::@1
  (byte) printu::res#7 ← phi( printu::@1/(byte) printu::res#8 )
  (byte) printu::b#5 ← phi( printu::@1/(byte) printu::b#6 )
  (byte) printu::op#4 ← phi( printu::@1/(byte) printu::op#5 )
  (byte*) char_cursor#36 ← phi( printu::@1/(byte*) char_cursor#5 )
  (byte*) char_cursor#15 ← (byte*) char_cursor#36
  (byte) print_char::ch#3 ← (byte) printu::op#4
  call print_char param-assignment
  to:printu::@3
printu::@3: scope:[printu]  from printu::@2
  (byte) printu::res#6 ← phi( printu::@2/(byte) printu::res#7 )
  (byte) printu::b#4 ← phi( printu::@2/(byte) printu::b#5 )
  (byte*) char_cursor#37 ← phi( printu::@2/(byte*) char_cursor#7 )
  (byte*) char_cursor#16 ← (byte*) char_cursor#37
  (byte) print_byte::b#1 ← (byte) printu::b#4
  call print_byte param-assignment
  to:printu::@4
printu::@4: scope:[printu]  from printu::@3
  (byte) printu::res#5 ← phi( printu::@3/(byte) printu::res#6 )
  (byte*) char_cursor#38 ← phi( printu::@3/(byte*) char_cursor#5 )
  (byte*) char_cursor#17 ← (byte*) char_cursor#38
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char param-assignment
  to:printu::@5
printu::@5: scope:[printu]  from printu::@4
  (byte) printu::res#4 ← phi( printu::@4/(byte) printu::res#5 )
  (byte*) char_cursor#39 ← phi( printu::@4/(byte*) char_cursor#7 )
  (byte*) char_cursor#18 ← (byte*) char_cursor#39
  (byte) print_char::ch#5 ← (byte) printu::res#4
  call print_char param-assignment
  to:printu::@6
printu::@6: scope:[printu]  from printu::@5
  (byte*) char_cursor#40 ← phi( printu::@5/(byte*) char_cursor#7 )
  (byte*) char_cursor#19 ← (byte*) char_cursor#40
  to:printu::@return
printu::@return: scope:[printu]  from printu::@6
  (byte*) char_cursor#41 ← phi( printu::@6/(byte*) char_cursor#19 )
  (byte*) char_cursor#20 ← (byte*) char_cursor#41
  return 
  to:@return
@10: scope:[]  from @begin
  (byte*) line_cursor#14 ← phi( @begin/(byte*) line_cursor#0 )
  (byte*) char_cursor#50 ← phi( @begin/(byte*) char_cursor#0 )
  call main param-assignment
  to:@11
@11: scope:[]  from @10
  (byte*) line_cursor#11 ← phi( @10/(byte*) line_cursor#4 )
  (byte*) char_cursor#42 ← phi( @10/(byte*) char_cursor#13 )
  (byte*) char_cursor#21 ← (byte*) char_cursor#42
  (byte*) line_cursor#5 ← (byte*) line_cursor#11
  to:@end
@end: scope:[]  from @11

SYMBOL TABLE SSA
(label) @10
(label) @11
(label) @begin
(label) @end
(byte*) char_cursor
(byte*) char_cursor#0
(byte*) char_cursor#1
(byte*) char_cursor#10
(byte*) char_cursor#11
(byte*) char_cursor#12
(byte*) char_cursor#13
(byte*) char_cursor#14
(byte*) char_cursor#15
(byte*) char_cursor#16
(byte*) char_cursor#17
(byte*) char_cursor#18
(byte*) char_cursor#19
(byte*) char_cursor#2
(byte*) char_cursor#20
(byte*) char_cursor#21
(byte*) char_cursor#22
(byte*) char_cursor#23
(byte*) char_cursor#24
(byte*) char_cursor#25
(byte*) char_cursor#26
(byte*) char_cursor#27
(byte*) char_cursor#28
(byte*) char_cursor#29
(byte*) char_cursor#3
(byte*) char_cursor#30
(byte*) char_cursor#31
(byte*) char_cursor#32
(byte*) char_cursor#33
(byte*) char_cursor#34
(byte*) char_cursor#35
(byte*) char_cursor#36
(byte*) char_cursor#37
(byte*) char_cursor#38
(byte*) char_cursor#39
(byte*) char_cursor#4
(byte*) char_cursor#40
(byte*) char_cursor#41
(byte*) char_cursor#42
(byte*) char_cursor#43
(byte*) char_cursor#44
(byte*) char_cursor#45
(byte*) char_cursor#46
(byte*) char_cursor#47
(byte*) char_cursor#48
(byte*) char_cursor#49
(byte*) char_cursor#5
(byte*) char_cursor#50
(byte*) char_cursor#51
(byte*) char_cursor#52
(byte*) char_cursor#53
(byte*) char_cursor#54
(byte*) char_cursor#55
(byte*) char_cursor#56
(byte*) char_cursor#57
(byte*) char_cursor#6
(byte*) char_cursor#7
(byte*) char_cursor#8
(byte*) char_cursor#9
(byte*) line_cursor
(byte*) line_cursor#0
(byte*) line_cursor#1
(byte*) line_cursor#10
(byte*) line_cursor#11
(byte*) line_cursor#12
(byte*) line_cursor#13
(byte*) line_cursor#14
(byte*) line_cursor#15
(byte*) line_cursor#16
(byte*) line_cursor#17
(byte*) line_cursor#18
(byte*) line_cursor#19
(byte*) line_cursor#2
(byte*) line_cursor#20
(byte*) line_cursor#21
(byte*) line_cursor#22
(byte*) line_cursor#23
(byte*) line_cursor#24
(byte*) line_cursor#25
(byte*) line_cursor#26
(byte*) line_cursor#27
(byte*) line_cursor#28
(byte*) line_cursor#3
(byte*) line_cursor#4
(byte*) line_cursor#5
(byte*) line_cursor#6
(byte*) line_cursor#7
(byte*) line_cursor#8
(byte*) line_cursor#9
(void()) main()
(byte/signed byte/word/signed word~) main::$1
(boolean~) main::$11
(boolean~) main::$12
(byte/word~) main::$15
(boolean~) main::$16
(boolean~) main::$2
(boolean~) main::$3
(boolean~) main::$5
(boolean~) main::$6
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::a#10
(byte) main::a#11
(byte) main::a#12
(byte) main::a#13
(byte) main::a#14
(byte) main::a#15
(byte) main::a#2
(byte) main::a#3
(byte) main::a#4
(byte) main::a#5
(byte) main::a#6
(byte) main::a#7
(byte) main::a#8
(byte) main::a#9
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#2
(byte[16]) main::cs
(byte[16]) main::cs#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#12
(byte) main::i#13
(byte) main::i#14
(byte) main::i#15
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte) main::r
(byte) main::r#0
(byte) main::r#1
(byte) main::r#10
(byte) main::r#11
(byte) main::r#2
(byte) main::r#3
(byte) main::r#4
(byte) main::r#5
(byte) main::r#6
(byte) main::r#7
(byte) main::r#8
(byte) main::r#9
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(const string) print_byte::$4 = (string) "0123456789abcdef"
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte[]) print_byte::hextab
(byte[]) print_byte::hextab#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(void()) print_cls()
(word/signed word~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) printu((byte) printu::a , (byte) printu::op , (byte) printu::b , (byte) printu::res)
(label) printu::@1
(label) printu::@2
(label) printu::@3
(label) printu::@4
(label) printu::@5
(label) printu::@6
(label) printu::@return
(byte) printu::a
(byte) printu::a#0
(byte) printu::a#1
(byte) printu::a#2
(byte) printu::a#3
(byte) printu::a#4
(byte) printu::a#5
(byte) printu::b
(byte) printu::b#0
(byte) printu::b#1
(byte) printu::b#2
(byte) printu::b#3
(byte) printu::b#4
(byte) printu::b#5
(byte) printu::b#6
(byte) printu::b#7
(byte) printu::op
(byte) printu::op#0
(byte) printu::op#1
(byte) printu::op#2
(byte) printu::op#3
(byte) printu::op#4
(byte) printu::op#5
(byte) printu::op#6
(byte) printu::res
(byte) printu::res#0
(byte) printu::res#1
(byte) printu::res#2
(byte) printu::res#3
(byte) printu::res#4
(byte) printu::res#5
(byte) printu::res#6
(byte) printu::res#7
(byte) printu::res#8
(byte) printu::res#9

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (boolean~) main::$3 ← (byte) main::a#2 >= (byte) main::b#0 from (boolean~) main::$2 ← (byte) main::a#2 < (byte) main::b#0
Inversing boolean not (boolean~) main::$6 ← (byte) main::a#4 >= (byte/word/signed word) 135 from (boolean~) main::$5 ← (byte) main::a#4 < (byte/word/signed word) 135
Inversing boolean not (boolean~) main::$9 ← (byte) main::a#6 >= *((byte[16]) main::cs#0 + (byte) main::i#2) from (boolean~) main::$8 ← (byte) main::a#6 < *((byte[16]) main::cs#0 + (byte) main::i#2)
Inversing boolean not (boolean~) main::$12 ← (byte) main::a#8 >= (byte) main::a#8 from (boolean~) main::$11 ← (byte) main::a#8 < (byte) main::a#8
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#43 char_cursor#11
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#44 char_cursor#14
Not aliassing across scopes: char_cursor#24 char_cursor#7
Not aliassing across scopes: char_cursor#25 char_cursor#7
Not aliassing across scopes: print_char::ch#6 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#44
Not aliassing across scopes: char_cursor#57 char_cursor#50
Not aliassing across scopes: line_cursor#28 line_cursor#14
Not aliassing across scopes: printu::a#0 main::a#3
Not aliassing across scopes: printu::b#0 main::b#1
Not aliassing across scopes: printu::res#0 main::r#8
Not aliassing across scopes: char_cursor#29 char_cursor#20
Not aliassing across scopes: printu::a#1 main::a#5
Not aliassing across scopes: printu::res#1 main::r#9
Not aliassing across scopes: char_cursor#30 char_cursor#20
Not aliassing across scopes: printu::a#2 main::a#7
Not aliassing across scopes: printu::res#2 main::r#10
Not aliassing across scopes: char_cursor#31 char_cursor#20
Not aliassing across scopes: printu::a#3 main::a#9
Not aliassing across scopes: printu::b#3 main::a#9
Not aliassing across scopes: printu::res#3 main::r#11
Not aliassing across scopes: char_cursor#32 char_cursor#20
Not aliassing across scopes: line_cursor#9 line_cursor#2
Not aliassing across scopes: char_cursor#33 char_cursor#2
Not aliassing across scopes: char_cursor#45 char_cursor#46
Not aliassing across scopes: printu::a#5 printu::a#0
Not aliassing across scopes: printu::op#6 printu::op#0
Not aliassing across scopes: printu::b#7 printu::b#0
Not aliassing across scopes: printu::res#9 printu::res#0
Not aliassing across scopes: char_cursor#35 char_cursor#7
Not aliassing across scopes: print_byte::b#0 printu::a#4
Not aliassing across scopes: char_cursor#36 char_cursor#5
Not aliassing across scopes: print_char::ch#3 printu::op#4
Not aliassing across scopes: char_cursor#37 char_cursor#7
Not aliassing across scopes: print_byte::b#1 printu::b#4
Not aliassing across scopes: char_cursor#38 char_cursor#5
Not aliassing across scopes: char_cursor#39 char_cursor#7
Not aliassing across scopes: print_char::ch#5 printu::res#4
Not aliassing across scopes: char_cursor#40 char_cursor#7
Not aliassing across scopes: char_cursor#42 char_cursor#13
Not aliassing across scopes: line_cursor#11 line_cursor#4
Alias (byte*) char_cursor#0 = (byte*) line_cursor#0 (byte*) char_cursor#50 (byte*) line_cursor#14 
Alias (byte*) line_cursor#1 = (byte*~) print_ln::$0 (byte*) line_cursor#7 (byte*) char_cursor#1 (byte*) line_cursor#8 (byte*) char_cursor#23 (byte*) line_cursor#2 (byte*) char_cursor#2 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) char_cursor#24 = (byte*) char_cursor#3 
Alias (byte*) char_cursor#25 = (byte*) char_cursor#4 (byte*) char_cursor#26 (byte*) char_cursor#5 
Alias (byte*) char_cursor#28 = (byte*) char_cursor#6 (byte*) char_cursor#7 
Alias (byte*) char_cursor#56 = (byte*) char_cursor#57 
Alias (byte*) line_cursor#27 = (byte*) line_cursor#28 
Alias (byte) main::b#0 = (byte/signed byte/word/signed word~) main::$1 (byte) main::b#2 
Alias (byte) main::a#12 = (byte) main::a#4 (byte) main::a#3 
Alias (byte) main::i#11 = (byte) main::i#8 (byte) main::i#9 
Alias (byte*) line_cursor#22 = (byte*) line_cursor#24 (byte*) line_cursor#23 
Alias (byte*) char_cursor#29 = (byte*) char_cursor#8 (byte*) char_cursor#53 
Alias (byte) main::a#11 = (byte) main::a#2 
Alias (byte*) char_cursor#51 = (byte*) char_cursor#52 
Alias (byte) main::i#14 = (byte) main::i#15 
Alias (byte*) line_cursor#25 = (byte*) line_cursor#26 
Alias (byte) main::a#13 = (byte) main::a#6 (byte) main::a#5 
Alias (byte) main::i#2 = (byte) main::i#5 (byte) main::i#6 
Alias (byte*) line_cursor#19 = (byte*) line_cursor#21 (byte*) line_cursor#20 
Alias (byte*) char_cursor#30 = (byte*) char_cursor#9 (byte*) char_cursor#54 
Alias (byte) main::a#14 = (byte) main::a#8 (byte) main::a#7 
Alias (byte*) line_cursor#16 = (byte*) line_cursor#18 (byte*) line_cursor#17 
Alias (byte) main::i#12 = (byte) main::i#3 (byte) main::i#13 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#31 (byte*) char_cursor#55 
Alias (byte*) line_cursor#13 = (byte*) line_cursor#15 
Alias (byte) main::a#10 = (byte) main::a#15 (byte) main::a#9 
Alias (byte) main::i#10 = (byte) main::i#7 (byte) main::i#4 
Alias (byte*) char_cursor#11 = (byte*) char_cursor#32 
Alias (byte*) line_cursor#10 = (byte*) line_cursor#3 (byte*) line_cursor#9 (byte*) line_cursor#4 
Alias (byte*) char_cursor#12 = (byte*) char_cursor#33 (byte*) char_cursor#34 (byte*) char_cursor#13 
Alias (byte) main::a#1 = (byte/word~) main::$15 
Alias (byte) printu::a#4 = (byte) printu::a#5 
Alias (byte) printu::op#4 = (byte) printu::op#5 (byte) printu::op#6 
Alias (byte) printu::b#4 = (byte) printu::b#6 (byte) printu::b#7 (byte) printu::b#5 
Alias (byte) printu::res#4 = (byte) printu::res#8 (byte) printu::res#9 (byte) printu::res#7 (byte) printu::res#6 (byte) printu::res#5 
Alias (byte*) char_cursor#14 = (byte*) char_cursor#35 
Alias (byte*) char_cursor#15 = (byte*) char_cursor#36 
Alias (byte*) char_cursor#16 = (byte*) char_cursor#37 
Alias (byte*) char_cursor#17 = (byte*) char_cursor#38 
Alias (byte*) char_cursor#18 = (byte*) char_cursor#39 
Alias (byte*) char_cursor#19 = (byte*) char_cursor#40 (byte*) char_cursor#41 (byte*) char_cursor#20 
Alias (byte*) char_cursor#21 = (byte*) char_cursor#42 
Alias (byte*) line_cursor#11 = (byte*) line_cursor#5 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#43 char_cursor#11
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#44 char_cursor#14
Not aliassing across scopes: char_cursor#24 char_cursor#28
Not aliassing across scopes: char_cursor#25 char_cursor#28
Not aliassing across scopes: print_char::ch#6 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#44
Not aliassing across scopes: char_cursor#56 char_cursor#0
Not aliassing across scopes: line_cursor#27 char_cursor#0
Not aliassing across scopes: printu::a#0 main::a#12
Not aliassing across scopes: printu::b#0 main::b#1
Not aliassing across scopes: printu::res#0 main::r#8
Not aliassing across scopes: char_cursor#29 char_cursor#19
Not aliassing across scopes: printu::a#1 main::a#13
Not aliassing across scopes: printu::res#1 main::r#9
Not aliassing across scopes: char_cursor#30 char_cursor#19
Not aliassing across scopes: printu::a#2 main::a#14
Not aliassing across scopes: printu::res#2 main::r#10
Not aliassing across scopes: char_cursor#10 char_cursor#19
Not aliassing across scopes: printu::a#3 main::a#10
Not aliassing across scopes: printu::b#3 main::a#10
Not aliassing across scopes: printu::res#3 main::r#11
Not aliassing across scopes: char_cursor#11 char_cursor#19
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#12 line_cursor#1
Not aliassing across scopes: char_cursor#45 char_cursor#46
Not aliassing across scopes: printu::a#4 printu::a#0
Not aliassing across scopes: printu::op#4 printu::op#0
Not aliassing across scopes: printu::b#4 printu::b#0
Not aliassing across scopes: printu::res#4 printu::res#0
Not aliassing across scopes: char_cursor#14 char_cursor#28
Not aliassing across scopes: print_byte::b#0 printu::a#4
Not aliassing across scopes: char_cursor#15 char_cursor#25
Not aliassing across scopes: print_char::ch#3 printu::op#4
Not aliassing across scopes: char_cursor#16 char_cursor#28
Not aliassing across scopes: print_byte::b#1 printu::b#4
Not aliassing across scopes: char_cursor#17 char_cursor#25
Not aliassing across scopes: char_cursor#18 char_cursor#28
Not aliassing across scopes: print_char::ch#5 printu::res#4
Not aliassing across scopes: char_cursor#19 char_cursor#28
Not aliassing across scopes: char_cursor#21 char_cursor#12
Not aliassing across scopes: line_cursor#11 line_cursor#10
Alias (byte) main::a#10 = (byte) main::a#12 (byte) main::a#11 (byte) main::a#13 (byte) main::a#14 
Alias (byte) main::b#0 = (byte) main::b#1 
Alias (byte*) char_cursor#46 = (byte*) char_cursor#51 
Alias (byte) main::i#10 = (byte) main::i#11 (byte) main::i#14 (byte) main::i#2 (byte) main::i#12 
Alias (byte*) line_cursor#13 = (byte*) line_cursor#22 (byte*) line_cursor#25 (byte*) line_cursor#19 (byte*) line_cursor#16 
Alias (byte*) char_cursor#29 = (byte*) char_cursor#47 
Alias (byte*) char_cursor#30 = (byte*) char_cursor#48 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#49 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#43 char_cursor#11
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#44 char_cursor#14
Not aliassing across scopes: char_cursor#24 char_cursor#28
Not aliassing across scopes: char_cursor#25 char_cursor#28
Not aliassing across scopes: print_char::ch#6 print_char::ch#0
Not aliassing across scopes: char_cursor#27 char_cursor#44
Not aliassing across scopes: char_cursor#56 char_cursor#0
Not aliassing across scopes: line_cursor#27 char_cursor#0
Not aliassing across scopes: printu::a#0 main::a#10
Not aliassing across scopes: printu::b#0 main::b#0
Not aliassing across scopes: printu::res#0 main::r#8
Not aliassing across scopes: char_cursor#29 char_cursor#19
Not aliassing across scopes: printu::a#1 main::a#10
Not aliassing across scopes: printu::res#1 main::r#9
Not aliassing across scopes: char_cursor#30 char_cursor#19
Not aliassing across scopes: printu::a#2 main::a#10
Not aliassing across scopes: printu::res#2 main::r#10
Not aliassing across scopes: char_cursor#10 char_cursor#19
Not aliassing across scopes: printu::a#3 main::a#10
Not aliassing across scopes: printu::b#3 main::a#10
Not aliassing across scopes: printu::res#3 main::r#11
Not aliassing across scopes: char_cursor#11 char_cursor#19
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#12 line_cursor#1
Not aliassing across scopes: char_cursor#45 char_cursor#46
Not aliassing across scopes: printu::a#4 printu::a#0
Not aliassing across scopes: printu::op#4 printu::op#0
Not aliassing across scopes: printu::b#4 printu::b#0
Not aliassing across scopes: printu::res#4 printu::res#0
Not aliassing across scopes: char_cursor#14 char_cursor#28
Not aliassing across scopes: print_byte::b#0 printu::a#4
Not aliassing across scopes: char_cursor#15 char_cursor#25
Not aliassing across scopes: print_char::ch#3 printu::op#4
Not aliassing across scopes: char_cursor#16 char_cursor#28
Not aliassing across scopes: print_byte::b#1 printu::b#4
Not aliassing across scopes: char_cursor#17 char_cursor#25
Not aliassing across scopes: char_cursor#18 char_cursor#28
Not aliassing across scopes: print_char::ch#5 printu::res#4
Not aliassing across scopes: char_cursor#19 char_cursor#28
Not aliassing across scopes: char_cursor#21 char_cursor#12
Not aliassing across scopes: line_cursor#11 line_cursor#10
Self Phi Eliminated (byte*) char_cursor#22
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) line_cursor#12 (byte*) line_cursor#13
Redundant Phi (byte*) char_cursor#43 (byte*) char_cursor#11
Redundant Phi (byte*) char_cursor#22 (byte*) char_cursor#43
Redundant Phi (byte*) char_cursor#24 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#25 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#56 (byte*) char_cursor#0
Redundant Phi (byte*) line_cursor#27 (byte*) char_cursor#0
Redundant Phi (byte*) char_cursor#29 (byte*) char_cursor#19
Redundant Phi (byte*) char_cursor#30 (byte*) char_cursor#19
Redundant Phi (byte*) char_cursor#10 (byte*) char_cursor#19
Redundant Phi (byte*) char_cursor#11 (byte*) char_cursor#19
Redundant Phi (byte*) line_cursor#10 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#12 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#14 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#15 (byte*) char_cursor#25
Redundant Phi (byte*) char_cursor#16 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#17 (byte*) char_cursor#25
Redundant Phi (byte*) char_cursor#18 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#19 (byte*) char_cursor#28
Redundant Phi (byte*) char_cursor#21 (byte*) char_cursor#12
Redundant Phi (byte*) line_cursor#11 (byte*) line_cursor#10
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) char_cursor#44 (byte*) char_cursor#28
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_ln::$1 if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(word/signed word~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) main::$3 if((byte) main::a#10>=(byte) main::b#0) goto main::@2
Simple Condition (boolean~) main::$6 if((byte) main::a#10>=(byte/word/signed word) 135) goto main::@3
Simple Condition (boolean~) main::$9 if((byte) main::a#10>=*((byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4
Simple Condition (boolean~) main::$12 if((byte) main::a#10>=(byte) main::a#10) goto main::@5
Simple Condition (boolean~) main::$16 if((byte) main::i#1!=(byte/signed byte/word/signed word) 16) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) char_cursor#0 = ((byte*))1024
Constant (const string) print_byte::hextab#0 = print_byte::$4
Constant (const byte*) print_cls::sc#0 = ((byte*))1024
Constant (const word/signed word) print_cls::$0 = 1024+1000
Constant (const byte[16]) main::cs#0 = { 7, 247, 23, 231, 39, 215, 55, 199, 71, 183, 87, 167, 103, 151, 119, 135 }
Constant (const byte) main::a#0 = 7
Constant (const byte) main::i#0 = 0
Constant (const byte) main::r#0 = '-'
Constant (const byte) printu::op#0 = '<'
Constant (const byte) main::r#1 = '-'
Constant (const byte) main::r#2 = '+'
Constant (const byte) printu::op#1 = '<'
Constant (const byte) printu::b#1 = 135
Constant (const byte) main::r#3 = '-'
Constant (const byte) main::r#4 = '+'
Constant (const byte) printu::op#2 = '<'
Constant (const byte) main::r#5 = '-'
Constant (const byte) main::r#6 = '+'
Constant (const byte) printu::op#3 = '<'
Constant (const byte) main::r#7 = '+'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#4 = ' '
Succesful SSA optimization Pass2ConstantIdentification
Multiple usages for variable. Not optimizing sub-constant (byte) main::a#10
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) main::@11
Not culling empty block because it shares successor with its predecessor. (label) main::@6
Not culling empty block because it shares successor with its predecessor. (label) main::@7
Not culling empty block because it shares successor with its predecessor. (label) main::@8
Not culling empty block because it shares successor with its predecessor. (label) main::@9
Culled Empty Block (label) printu::@6
Culled Empty Block (label) @11
Succesful SSA optimization Pass2CullEmptyBlocks
Not culling empty block because it shares successor with its predecessor. (label) main::@6
Not culling empty block because it shares successor with its predecessor. (label) main::@7
Not culling empty block because it shares successor with its predecessor. (label) main::@8
Not culling empty block because it shares successor with its predecessor. (label) main::@9
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: print_char::ch#6 print_char::ch#0
Not aliassing across scopes: printu::a#0 main::a#10
Not aliassing across scopes: printu::b#0 main::b#0
Not aliassing across scopes: printu::res#0 main::r#8
Not aliassing across scopes: printu::a#1 main::a#10
Not aliassing across scopes: printu::res#1 main::r#9
Not aliassing across scopes: printu::a#2 main::a#10
Not aliassing across scopes: printu::res#2 main::r#10
Not aliassing across scopes: printu::a#3 main::a#10
Not aliassing across scopes: printu::b#3 main::a#10
Not aliassing across scopes: printu::res#3 main::r#11
Not aliassing across scopes: char_cursor#45 char_cursor#46
Not aliassing across scopes: printu::a#4 printu::a#0
Not aliassing across scopes: printu::b#4 printu::b#0
Not aliassing across scopes: printu::res#4 printu::res#0
Not aliassing across scopes: print_byte::b#0 printu::a#4
Not aliassing across scopes: print_char::ch#3 printu::op#4
Not aliassing across scopes: print_byte::b#1 printu::b#4
Not aliassing across scopes: print_char::ch#5 printu::res#4
Multiple usages for variable. Not optimizing sub-constant (byte) main::a#10
Not culling empty block because it shares successor with its predecessor. (label) main::@6
Not culling empty block because it shares successor with its predecessor. (label) main::@7
Not culling empty block because it shares successor with its predecessor. (label) main::@8
Not culling empty block because it shares successor with its predecessor. (label) main::@9
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: print_char::ch#6 print_char::ch#0
Not aliassing across scopes: printu::a#0 main::a#10
Not aliassing across scopes: printu::b#0 main::b#0
Not aliassing across scopes: printu::res#0 main::r#8
Not aliassing across scopes: printu::a#1 main::a#10
Not aliassing across scopes: printu::res#1 main::r#9
Not aliassing across scopes: printu::a#2 main::a#10
Not aliassing across scopes: printu::res#2 main::r#10
Not aliassing across scopes: printu::a#3 main::a#10
Not aliassing across scopes: printu::b#3 main::a#10
Not aliassing across scopes: printu::res#3 main::r#11
Not aliassing across scopes: char_cursor#45 char_cursor#46
Not aliassing across scopes: printu::a#4 printu::a#0
Not aliassing across scopes: printu::b#4 printu::b#0
Not aliassing across scopes: printu::res#4 printu::res#0
Not aliassing across scopes: print_byte::b#0 printu::a#4
Not aliassing across scopes: print_char::ch#3 printu::op#4
Not aliassing across scopes: print_byte::b#1 printu::b#4
Not aliassing across scopes: print_char::ch#5 printu::res#4
Multiple usages for variable. Not optimizing sub-constant (byte) main::a#10
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with different constant siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with different constant siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::a#0
Inlining constant with var siblings (const byte) main::a#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::r#0
Inlining constant with var siblings (const byte) main::r#0
Inlining constant with var siblings (const byte) main::r#0
Inlining constant with var siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with different constant siblings (const byte) main::r#0
Inlining constant with var siblings (const byte) main::r#1
Inlining constant with var siblings (const byte) main::r#1
Inlining constant with var siblings (const byte) main::r#1
Inlining constant with var siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with different constant siblings (const byte) main::r#1
Inlining constant with var siblings (const byte) main::r#2
Inlining constant with var siblings (const byte) main::r#2
Inlining constant with var siblings (const byte) main::r#2
Inlining constant with var siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with different constant siblings (const byte) main::r#2
Inlining constant with var siblings (const byte) main::r#3
Inlining constant with var siblings (const byte) main::r#3
Inlining constant with var siblings (const byte) main::r#3
Inlining constant with var siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with different constant siblings (const byte) main::r#3
Inlining constant with var siblings (const byte) main::r#4
Inlining constant with var siblings (const byte) main::r#4
Inlining constant with var siblings (const byte) main::r#4
Inlining constant with var siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with different constant siblings (const byte) main::r#4
Inlining constant with var siblings (const byte) main::r#5
Inlining constant with var siblings (const byte) main::r#5
Inlining constant with var siblings (const byte) main::r#5
Inlining constant with var siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with different constant siblings (const byte) main::r#5
Inlining constant with var siblings (const byte) main::r#6
Inlining constant with var siblings (const byte) main::r#6
Inlining constant with var siblings (const byte) main::r#6
Inlining constant with var siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with different constant siblings (const byte) main::r#6
Inlining constant with var siblings (const byte) main::r#7
Inlining constant with var siblings (const byte) main::r#7
Inlining constant with var siblings (const byte) main::r#7
Inlining constant with var siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with different constant siblings (const byte) main::r#7
Inlining constant with var siblings (const byte) printu::op#0
Inlining constant with different constant siblings (const byte) printu::op#0
Inlining constant with different constant siblings (const byte) printu::op#0
Inlining constant with different constant siblings (const byte) printu::op#0
Inlining constant with var siblings (const byte) printu::op#1
Inlining constant with different constant siblings (const byte) printu::op#1
Inlining constant with different constant siblings (const byte) printu::op#1
Inlining constant with different constant siblings (const byte) printu::op#1
Inlining constant with var siblings (const byte) printu::b#1
Inlining constant with var siblings (const byte) printu::b#1
Inlining constant with var siblings (const byte) printu::b#1
Inlining constant with var siblings (const byte) printu::b#1
Inlining constant with var siblings (const byte) printu::op#2
Inlining constant with different constant siblings (const byte) printu::op#2
Inlining constant with different constant siblings (const byte) printu::op#2
Inlining constant with different constant siblings (const byte) printu::op#2
Inlining constant with var siblings (const byte) printu::op#3
Inlining constant with different constant siblings (const byte) printu::op#3
Inlining constant with different constant siblings (const byte) printu::op#3
Inlining constant with different constant siblings (const byte) printu::op#3
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Constant inlined main::r#0 = (byte) '-'
Constant inlined printu::op#0 = (byte) '<'
Constant inlined main::r#1 = (byte) '-'
Constant inlined printu::op#1 = (byte) '<'
Constant inlined print_cls::$0 = (word/signed word) 1024+(word/signed word) 1000
Constant inlined main::r#6 = (byte) '+'
Constant inlined main::r#7 = (byte) '+'
Constant inlined print_cls::sc#0 = ((byte*))(word/signed word) 1024
Constant inlined main::r#4 = (byte) '+'
Constant inlined main::r#5 = (byte) '-'
Constant inlined main::r#2 = (byte) '+'
Constant inlined printu::op#2 = (byte) '<'
Constant inlined main::r#3 = (byte) '-'
Constant inlined printu::op#3 = (byte) '<'
Constant inlined main::a#0 = (byte/signed byte/word/signed word) 7
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined printu::b#1 = (byte/word/signed word) 135
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined char_cursor#0 = ((byte*))(word/signed word) 1024
Constant inlined print_byte::$4 = (const string) print_byte::hextab#0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @10 @end main main::@1 main::@6 main::@2 main::@12 main::@7 main::@3 main::@13 main::@8 main::@4 main::@14 main::@9 main::@5 main::@15 main::@16 main::@return print_ln print_ln::@1 print_ln::@return printu printu::@1 printu::@2 printu::@3 printu::@4 printu::@5 printu::@return print_char print_char::@return print_byte print_byte::@1 print_byte::@return print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting main::@17(between main::@16 and main::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @10 @end main main::@1 main::@6 main::@2 main::@12 main::@7 main::@3 main::@13 main::@8 main::@4 main::@14 main::@9 main::@5 main::@15 main::@16 main::@return main::@17 print_ln print_ln::@1 print_ln::@return print_ln::@3 printu printu::@1 printu::@2 printu::@3 printu::@4 printu::@5 printu::@return print_char print_char::@return print_byte print_byte::@1 print_byte::@return print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @10
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 printu:18 printu:27 printu:38 printu:49 print_ln:51 
Calls in [printu] to print_char:68 print_byte:71 print_char:75 print_byte:78 print_char:80 print_char:84 
Calls in [print_byte] to print_char:95 print_char:100 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 18 initial phi equivalence classes
Coalesced [14] char_cursor#59 ← char_cursor#46
Coalesced [15] printu::a#6 ← printu::a#0
Coalesced [16] printu::b#8 ← printu::b#0
Coalesced [17] printu::res#10 ← printu::res#0
Coalesced [24] char_cursor#60 ← char_cursor#28
Coalesced [25] printu::a#7 ← printu::a#1
Coalesced [26] printu::res#11 ← printu::res#1
Coalesced (already) [34] char_cursor#61 ← char_cursor#28
Coalesced [35] printu::a#8 ← printu::a#2
Coalesced [36] printu::b#9 ← printu::b#2
Coalesced [37] printu::res#12 ← printu::res#2
Coalesced (already) [45] char_cursor#62 ← char_cursor#28
Coalesced [46] printu::a#9 ← printu::a#3
Coalesced [47] printu::b#10 ← printu::b#3
Coalesced [48] printu::res#13 ← printu::res#3
Coalesced [56] main::a#16 ← main::a#1
Not coalescing [57] char_cursor#58 ← line_cursor#1
Coalesced [58] main::i#16 ← main::i#1
Coalesced [59] line_cursor#29 ← line_cursor#1
Coalesced [60] line_cursor#30 ← line_cursor#13
Coalesced (already) [65] line_cursor#31 ← line_cursor#1
Coalesced [67] char_cursor#65 ← char_cursor#45
Coalesced [70] print_byte::b#4 ← print_byte::b#0
Coalesced [73] print_char::ch#9 ← print_char::ch#3
Coalesced (already) [74] char_cursor#66 ← char_cursor#28
Coalesced [77] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [79] char_cursor#67 ← char_cursor#28
Coalesced [82] print_char::ch#10 ← print_char::ch#5
Coalesced (already) [83] char_cursor#68 ← char_cursor#28
Coalesced [93] print_char::ch#7 ← print_char::ch#0
Coalesced (already) [94] char_cursor#63 ← char_cursor#28
Coalesced [98] print_char::ch#8 ← print_char::ch#1
Coalesced (already) [99] char_cursor#64 ← char_cursor#28
Coalesced [108] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 15 phi equivalence classes
Not culling empty block because it shares successor with its predecessor. (label) main::@6
Not culling empty block because it shares successor with its predecessor. (label) main::@7
Not culling empty block because it shares successor with its predecessor. (label) main::@8
Not culling empty block because it shares successor with its predecessor. (label) main::@9
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @10 @end main main::@1 main::@6 main::@2 main::@12 main::@7 main::@3 main::@13 main::@8 main::@4 main::@14 main::@9 main::@5 main::@15 main::@16 main::@return main::@17 print_ln print_ln::@1 print_ln::@return printu printu::@1 printu::@2 printu::@3 printu::@4 printu::@5 printu::@return print_char print_char::@return print_byte print_byte::@1 print_byte::@return print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @10
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of printu::@4
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@10
@10: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @10
  [3] phi() [ ] ( )
main: scope:[main]  from @10
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@17
  [6] (byte*) line_cursor#13 ← phi( main/((byte*))(word/signed word) 1024 main::@17/(byte*) line_cursor#1 ) [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] )
  [6] (byte) main::i#10 ← phi( main/(byte/signed byte/word/signed word) 0 main::@17/(byte) main::i#1 ) [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] )
  [6] (byte*) char_cursor#46 ← phi( main/((byte*))(word/signed word) 1024 main::@17/(byte*~) char_cursor#58 ) [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] )
  [6] (byte) main::a#10 ← phi( main/(byte/signed byte/word/signed word) 7 main::@17/(byte) main::a#1 ) [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 ] )
  [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] )
  [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] )
  to:main::@6
main::@6: scope:[main]  from main::@1
  [9] phi() [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [10] (byte) main::r#8 ← phi( main::@1/(byte) '-' main::@6/(byte) '+' ) [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 ] )
  [11] (byte) printu::a#0 ← (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] )
  [12] (byte) printu::b#0 ← (byte) main::b#0 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] )
  [13] (byte) printu::res#0 ← (byte) main::r#8 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] )
  [14] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@12
main::@12: scope:[main]  from main::@2
  [15] if((byte) main::a#10>=(byte/word/signed word) 135) goto main::@3 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@7
main::@7: scope:[main]  from main::@12
  [16] phi() [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@3
main::@3: scope:[main]  from main::@12 main::@7
  [17] (byte) main::r#9 ← phi( main::@12/(byte) '-' main::@7/(byte) '+' ) [ main::a#10 main::i#10 line_cursor#13 main::r#9 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#9 char_cursor#28 ] )
  [18] (byte) printu::a#1 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] )
  [19] (byte) printu::res#1 ← (byte) main::r#9 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] )
  [20] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@13
main::@13: scope:[main]  from main::@3
  [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@8
main::@8: scope:[main]  from main::@13
  [22] phi() [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@8
  [23] (byte) main::r#10 ← phi( main::@13/(byte) '-' main::@8/(byte) '+' ) [ main::a#10 main::i#10 line_cursor#13 main::r#10 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 char_cursor#28 ] )
  [24] (byte) printu::a#2 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] )
  [25] (byte) printu::b#2 ← *((const byte[16]) main::cs#0 + (byte) main::i#10) [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] )
  [26] (byte) printu::res#2 ← (byte) main::r#10 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] )
  [27] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@14
main::@14: scope:[main]  from main::@4
  [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@9
main::@9: scope:[main]  from main::@14
  [29] phi() [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@5
main::@5: scope:[main]  from main::@14 main::@9
  [30] (byte) main::r#11 ← phi( main::@14/(byte) '-' main::@9/(byte) '+' ) [ main::a#10 main::i#10 line_cursor#13 main::r#11 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 char_cursor#28 ] )
  [31] (byte) printu::a#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] )
  [32] (byte) printu::b#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] )
  [33] (byte) printu::res#3 ← (byte) main::r#11 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] )
  [34] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:main::@15
main::@15: scope:[main]  from main::@5
  [35] phi() [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  [36] call print_ln param-assignment [ main::a#10 main::i#10 line_cursor#1 ] ( main:2 [ main::a#10 main::i#10 line_cursor#1 ] )
  to:main::@16
main::@16: scope:[main]  from main::@15
  [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] )
  [38] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] )
  [39] if((byte) main::i#1!=(byte/signed byte/word/signed word) 16) goto main::@17 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@16
  [40] return  [ ] ( main:2 [ ] )
  to:@return
main::@17: scope:[main]  from main::@16
  [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] )
  to:main::@1
print_ln: scope:[print_ln]  from main::@15
  [42] phi() [ line_cursor#13 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [43] (byte*) line_cursor#6 ← phi( print_ln/(byte*) line_cursor#13 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#6 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#6 char_cursor#28 ] )
  [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] )
  [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [46] return  [ line_cursor#1 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 ] )
  to:@return
printu: scope:[printu]  from main::@2 main::@3 main::@4 main::@5
  [47] (byte) printu::res#4 ← phi( main::@2/(byte) printu::res#0 main::@3/(byte) printu::res#1 main::@4/(byte) printu::res#2 main::@5/(byte) printu::res#3 ) [ char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  [47] (byte) printu::b#4 ← phi( main::@2/(byte) printu::b#0 main::@3/(byte/word/signed word) 135 main::@4/(byte) printu::b#2 main::@5/(byte) printu::b#3 ) [ char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  [47] (byte) printu::op#4 ← phi( main::@2/(byte) '<' main::@3/(byte) '<' main::@4/(byte) '<' main::@5/(byte) '<' ) [ char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  [47] (byte) printu::a#4 ← phi( main::@2/(byte) printu::a#0 main::@3/(byte) printu::a#1 main::@4/(byte) printu::a#2 main::@5/(byte) printu::a#3 ) [ char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  [47] (byte*) char_cursor#45 ← phi( main::@2/(byte*) char_cursor#46 main::@3/(byte*) char_cursor#28 main::@4/(byte*) char_cursor#28 main::@5/(byte*) char_cursor#28 ) [ char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#45 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  [48] call print_char param-assignment [ char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  to:printu::@1
printu::@1: scope:[printu]  from printu
  [49] (byte) print_byte::b#0 ← (byte) printu::a#4 [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] )
  [50] call print_byte param-assignment [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] )
  to:printu::@2
printu::@2: scope:[printu]  from printu::@1
  [51] (byte) print_char::ch#3 ← (byte) printu::op#4 [ char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] )
  [52] call print_char param-assignment [ char_cursor#28 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] )
  to:printu::@3
printu::@3: scope:[printu]  from printu::@2
  [53] (byte) print_byte::b#1 ← (byte) printu::b#4 [ char_cursor#28 printu::res#4 print_byte::b#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] )
  [54] call print_byte param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  to:printu::@4
printu::@4: scope:[printu]  from printu::@3
  [55] phi() [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  [56] call print_char param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  to:printu::@5
printu::@5: scope:[printu]  from printu::@4
  [57] (byte) print_char::ch#5 ← (byte) printu::res#4 [ char_cursor#28 print_char::ch#5 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] )
  [58] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:printu::@return
printu::@return: scope:[printu]  from printu::@5
  [59] return  [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 printu printu::@2 printu::@4 printu::@5
  [60] (byte*) char_cursor#27 ← phi( print_byte/(byte*) char_cursor#28 print_byte::@1/(byte*) char_cursor#28 printu/(byte*) char_cursor#45 printu::@2/(byte*) char_cursor#28 printu::@4/(byte*) char_cursor#28 printu::@5/(byte*) char_cursor#28 ) [ print_char::ch#6 char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] )
  [60] (byte) print_char::ch#6 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 printu/(byte) ' ' printu::@2/(byte) print_char::ch#3 printu::@4/(byte) ' ' printu::@5/(byte) print_char::ch#5 ) [ print_char::ch#6 char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_char::ch#6 char_cursor#27 ] )
  [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] )
  [62] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [63] return  [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  to:@return
print_byte: scope:[print_byte]  from printu::@1 printu::@3
  [64] (byte) print_byte::b#2 ← phi( printu::@1/(byte) print_byte::b#0 printu::@3/(byte) print_byte::b#1 ) [ char_cursor#28 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] )
  [65] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ char_cursor#28 print_byte::b#2 print_byte::$0 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] )
  [66] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ char_cursor#28 print_char::ch#0 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] )
  [67] call print_char param-assignment [ char_cursor#28 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] )
  [69] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] )
  [70] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [71] return  [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  to:@return
print_cls: scope:[print_cls]  from main
  [72] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [73] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word) 1024 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [75] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [77] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@10 dominated by  @10 @begin 
@end dominated by  @end @10 @begin 
main dominated by  main @10 @begin 
main::@1 dominated by  main main::@1 @10 @begin 
main::@6 dominated by  main main::@1 main::@6 @10 @begin 
main::@2 dominated by  main main::@1 main::@2 @10 @begin 
main::@12 dominated by  main main::@1 main::@2 @10 @begin main::@12 
main::@7 dominated by  main::@7 main main::@1 main::@2 @10 @begin main::@12 
main::@3 dominated by  main main::@1 main::@2 main::@3 @10 @begin main::@12 
main::@13 dominated by  main main::@1 main::@2 main::@3 @10 @begin main::@13 main::@12 
main::@8 dominated by  main::@8 main main::@1 main::@2 main::@3 @10 @begin main::@13 main::@12 
main::@4 dominated by  main main::@1 main::@2 main::@3 @10 main::@4 @begin main::@13 main::@12 
main::@14 dominated by  main main::@1 main::@2 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@14 
main::@9 dominated by  main::@9 main main::@1 main::@2 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@14 
main::@5 dominated by  main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@14 
main::@15 dominated by  main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@15 main::@14 
main::@16 dominated by  main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@16 main::@13 main::@12 main::@15 main::@14 
main::@return dominated by  main::@return main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@16 main::@13 main::@12 main::@15 main::@14 
main::@17 dominated by  main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@17 main::@16 main::@13 main::@12 main::@15 main::@14 
print_ln dominated by  main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@15 main::@14 print_ln 
print_ln::@1 dominated by  print_ln::@1 main main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@15 main::@14 print_ln 
print_ln::@return dominated by  print_ln::@1 main print_ln::@return main::@1 main::@2 main::@5 main::@3 @10 main::@4 @begin main::@13 main::@12 main::@15 main::@14 print_ln 
printu dominated by  main main::@1 main::@2 @10 @begin printu 
printu::@1 dominated by  main main::@1 main::@2 @10 @begin printu::@1 printu 
printu::@2 dominated by  main main::@1 main::@2 @10 @begin printu::@1 printu::@2 printu 
printu::@3 dominated by  main main::@1 main::@2 @10 @begin printu::@1 printu::@3 printu::@2 printu 
printu::@4 dominated by  main main::@1 main::@2 @10 @begin printu::@1 printu::@3 printu::@2 printu::@4 printu 
printu::@5 dominated by  main main::@1 main::@2 @10 @begin printu::@1 printu::@3 printu::@2 printu::@5 printu::@4 printu 
printu::@return dominated by  main main::@1 main::@2 @10 printu::@return @begin printu::@1 printu::@3 printu::@2 printu::@5 printu::@4 printu 
print_char dominated by  main print_char main::@1 main::@2 @10 @begin printu 
print_char::@return dominated by  main print_char main::@1 main::@2 @10 print_char::@return @begin printu 
print_byte dominated by  main main::@1 main::@2 @10 @begin print_byte printu::@1 printu 
print_byte::@1 dominated by  main main::@1 main::@2 print_byte::@1 @10 @begin print_byte printu::@1 printu 
print_byte::@return dominated by  main main::@1 main::@2 print_byte::@1 @10 @begin print_byte print_byte::@return printu::@1 printu 
print_cls dominated by  main @10 @begin print_cls 
print_cls::@1 dominated by  main @10 @begin print_cls::@1 print_cls 
print_cls::@return dominated by  main print_cls::@return @10 @begin print_cls::@1 print_cls 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@17 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@5 main::@14 main::@9 main::@4 main::@13 main::@8 main::@3 main::@12 main::@7 main::@2 main::@1 main::@6 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@5 main::@14 main::@9 main::@4 main::@13 main::@8 main::@3 main::@12 main::@7 main::@2 main::@1 main::@6 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@5 main::@14 main::@9 main::@4 main::@13 main::@8 main::@3 main::@12 main::@7 main::@2 main::@1 main::@6 
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 0 loops in scope [printu]
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [print_char]
Found 0 loops in scope [print_byte]
Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@5 main::@14 main::@9 main::@4 main::@13 main::@8 main::@3 main::@12 main::@7 main::@2 main::@1 main::@6  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) char_cursor
(byte*) char_cursor#27 8.0
(byte*) char_cursor#28 3.041666666666665
(byte*) char_cursor#45 46.0
(byte*) char_cursor#46 2.75
(byte*~) char_cursor#58 22.0
(byte*) line_cursor
(byte*) line_cursor#1 40.625
(byte*) line_cursor#13 0.41935483870967744
(byte*) line_cursor#6 204.0
(void()) main()
(byte) main::a
(byte) main::a#1 5.5
(byte) main::a#10 4.612903225806452
(byte) main::b
(byte) main::b#0 6.6000000000000005
(byte[16]) main::cs
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#10 1.375
(byte) main::r
(byte) main::r#10 3.6666666666666665
(byte) main::r#11 3.6666666666666665
(byte) main::r#8 3.6666666666666665
(byte) main::r#9 5.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#5 4.0
(byte) print_char::ch#6 10.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(void()) print_ln()
(void()) printu((byte) printu::a , (byte) printu::op , (byte) printu::b , (byte) printu::res)
(byte) printu::a
(byte) printu::a#0 7.333333333333333
(byte) printu::a#1 11.0
(byte) printu::a#2 7.333333333333333
(byte) printu::a#3 7.333333333333333
(byte) printu::a#4 23.0
(byte) printu::b
(byte) printu::b#0 11.0
(byte) printu::b#2 11.0
(byte) printu::b#3 11.0
(byte) printu::b#4 5.833333333333333
(byte) printu::op
(byte) printu::op#4 0.5
(byte) printu::res
(byte) printu::res#0 22.0
(byte) printu::res#1 22.0
(byte) printu::res#2 22.0
(byte) printu::res#3 22.0
(byte) printu::res#4 4.6000000000000005

Initial phi equivalence classes
[ main::a#10 main::a#1 ]
[ main::i#10 main::i#1 ]
[ main::r#8 ]
[ main::r#9 ]
[ main::r#10 ]
[ main::r#11 ]
[ line_cursor#6 line_cursor#13 line_cursor#1 ]
[ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
[ printu::op#4 ]
[ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
[ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ]
[ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ]
[ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable main::b#0 to zero page equivalence class [ main::b#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::a#10 main::a#1 ]
[ main::i#10 main::i#1 ]
[ main::r#8 ]
[ main::r#9 ]
[ main::r#10 ]
[ main::r#11 ]
[ line_cursor#6 line_cursor#13 line_cursor#1 ]
[ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
[ printu::op#4 ]
[ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
[ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ]
[ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ]
[ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ main::b#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_BYTE:2 [ main::a#10 main::a#1 ]
Allocated zp ZP_BYTE:3 [ main::i#10 main::i#1 ]
Allocated zp ZP_BYTE:4 [ main::r#8 ]
Allocated zp ZP_BYTE:5 [ main::r#9 ]
Allocated zp ZP_BYTE:6 [ main::r#10 ]
Allocated zp ZP_BYTE:7 [ main::r#11 ]
Allocated zp ZP_WORD:8 [ line_cursor#6 line_cursor#13 line_cursor#1 ]
Allocated zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
Allocated zp ZP_BYTE:11 [ printu::op#4 ]
Allocated zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
Allocated zp ZP_BYTE:13 [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ]
Allocated zp ZP_BYTE:14 [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ]
Allocated zp ZP_WORD:15 [ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ]
Allocated zp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_WORD:18 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:20 [ main::b#0 ]
Allocated zp ZP_BYTE:21 [ print_byte::$0 ]
Allocated zp ZP_BYTE:22 [ print_byte::$2 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label line_cursor = 8
  .label char_cursor = $f
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @10 [phi:@begin->@10]
b10_from_bbegin:
  jmp b10
//SEG4 @10
b10:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @10 to main [phi:@10->main]
main_from_b10:
  jsr main
//SEG7 [3] phi from @10 to @end [phi:@10->@end]
bend_from_b10:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label b = $14
    .label a = 2
    .label i = 3
    .label r = 4
    .label r_9 = 5
    .label r_10 = 6
    .label r_11 = 7
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [72] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte*) line_cursor#13 = ((byte*))(word/signed word) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG14 [6] phi (byte) main::i#10 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG15 [6] phi (byte*) char_cursor#46 = ((byte*))(word/signed word) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG16 [6] phi (byte) main::a#10 = (byte/signed byte/word/signed word) 7 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #7
    sta a
    jmp b1
  //SEG17 main::@1
  b1:
  //SEG18 [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) -- vbuz1=vbuc1_minus_vbuz2 
    lda #$ee
    sec
    sbc a
    sta b
  //SEG19 [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) -- vbuz1_ge_vbuz2_then_la1 
    lda a
    cmp b
    bcs b2_from_b1
  //SEG20 [9] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG21 main::@6
  b6:
  //SEG22 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG23 [10] phi (byte) main::r#8 = (byte) '+' [phi:main::@6->main::@2#0] -- vbuz1=vbuc1 
    lda #'+'
    sta r
    jmp b2
  //SEG24 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG25 [10] phi (byte) main::r#8 = (byte) '-' [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #'-'
    sta r
    jmp b2
  //SEG26 main::@2
  b2:
  //SEG27 [11] (byte) printu::a#0 ← (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.a
  //SEG28 [12] (byte) printu::b#0 ← (byte) main::b#0 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ) -- vbuz1=vbuz2 
    lda b
    sta printu.b
  //SEG29 [13] (byte) printu::res#0 ← (byte) main::r#8 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] ) -- vbuz1=vbuz2 
    lda r
    sta printu.res
  //SEG30 [14] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG31 [47] phi from main::@2 to printu [phi:main::@2->printu]
  printu_from_b2:
  //SEG32 [47] phi (byte) printu::res#4 = (byte) printu::res#0 [phi:main::@2->printu#0] -- register_copy 
  //SEG33 [47] phi (byte) printu::b#4 = (byte) printu::b#0 [phi:main::@2->printu#1] -- register_copy 
  //SEG34 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@2->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG35 [47] phi (byte) printu::a#4 = (byte) printu::a#0 [phi:main::@2->printu#3] -- register_copy 
  //SEG36 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#46 [phi:main::@2->printu#4] -- register_copy 
    jsr printu
    jmp b12
  //SEG37 main::@12
  b12:
  //SEG38 [15] if((byte) main::a#10>=(byte/word/signed word) 135) goto main::@3 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_vbuc1_then_la1 
    lda a
    cmp #$87
    bcs b3_from_b12
  //SEG39 [16] phi from main::@12 to main::@7 [phi:main::@12->main::@7]
  b7_from_b12:
    jmp b7
  //SEG40 main::@7
  b7:
  //SEG41 [17] phi from main::@7 to main::@3 [phi:main::@7->main::@3]
  b3_from_b7:
  //SEG42 [17] phi (byte) main::r#9 = (byte) '+' [phi:main::@7->main::@3#0] -- vbuz1=vbuc1 
    lda #'+'
    sta r_9
    jmp b3
  //SEG43 [17] phi from main::@12 to main::@3 [phi:main::@12->main::@3]
  b3_from_b12:
  //SEG44 [17] phi (byte) main::r#9 = (byte) '-' [phi:main::@12->main::@3#0] -- vbuz1=vbuc1 
    lda #'-'
    sta r_9
    jmp b3
  //SEG45 main::@3
  b3:
  //SEG46 [18] (byte) printu::a#1 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.a
  //SEG47 [19] (byte) printu::res#1 ← (byte) main::r#9 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda r_9
    sta printu.res
  //SEG48 [20] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG49 [47] phi from main::@3 to printu [phi:main::@3->printu]
  printu_from_b3:
  //SEG50 [47] phi (byte) printu::res#4 = (byte) printu::res#1 [phi:main::@3->printu#0] -- register_copy 
  //SEG51 [47] phi (byte) printu::b#4 = (byte/word/signed word) 135 [phi:main::@3->printu#1] -- vbuz1=vbuc1 
    lda #$87
    sta printu.b
  //SEG52 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@3->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG53 [47] phi (byte) printu::a#4 = (byte) printu::a#1 [phi:main::@3->printu#3] -- register_copy 
  //SEG54 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@3->printu#4] -- register_copy 
    jsr printu
    jmp b13
  //SEG55 main::@13
  b13:
  //SEG56 [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_pbuc1_derefidx_vbuz2_then_la1 
    lda a
    ldy i
    cmp cs,y
    bcs b4_from_b13
  //SEG57 [22] phi from main::@13 to main::@8 [phi:main::@13->main::@8]
  b8_from_b13:
    jmp b8
  //SEG58 main::@8
  b8:
  //SEG59 [23] phi from main::@8 to main::@4 [phi:main::@8->main::@4]
  b4_from_b8:
  //SEG60 [23] phi (byte) main::r#10 = (byte) '+' [phi:main::@8->main::@4#0] -- vbuz1=vbuc1 
    lda #'+'
    sta r_10
    jmp b4
  //SEG61 [23] phi from main::@13 to main::@4 [phi:main::@13->main::@4]
  b4_from_b13:
  //SEG62 [23] phi (byte) main::r#10 = (byte) '-' [phi:main::@13->main::@4#0] -- vbuz1=vbuc1 
    lda #'-'
    sta r_10
    jmp b4
  //SEG63 main::@4
  b4:
  //SEG64 [24] (byte) printu::a#2 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.a
  //SEG65 [25] (byte) printu::b#2 ← *((const byte[16]) main::cs#0 + (byte) main::i#10) [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda cs,y
    sta printu.b
  //SEG66 [26] (byte) printu::res#2 ← (byte) main::r#10 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda r_10
    sta printu.res
  //SEG67 [27] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG68 [47] phi from main::@4 to printu [phi:main::@4->printu]
  printu_from_b4:
  //SEG69 [47] phi (byte) printu::res#4 = (byte) printu::res#2 [phi:main::@4->printu#0] -- register_copy 
  //SEG70 [47] phi (byte) printu::b#4 = (byte) printu::b#2 [phi:main::@4->printu#1] -- register_copy 
  //SEG71 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@4->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG72 [47] phi (byte) printu::a#4 = (byte) printu::a#2 [phi:main::@4->printu#3] -- register_copy 
  //SEG73 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@4->printu#4] -- register_copy 
    jsr printu
    jmp b14
  //SEG74 main::@14
  b14:
  //SEG75 [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_vbuz1_then_la1 
    lda a
    cmp a
    bcs b5_from_b14
  //SEG76 [29] phi from main::@14 to main::@9 [phi:main::@14->main::@9]
  b9_from_b14:
    jmp b9
  //SEG77 main::@9
  b9:
  //SEG78 [30] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  b5_from_b9:
  //SEG79 [30] phi (byte) main::r#11 = (byte) '+' [phi:main::@9->main::@5#0] -- vbuz1=vbuc1 
    lda #'+'
    sta r_11
    jmp b5
  //SEG80 [30] phi from main::@14 to main::@5 [phi:main::@14->main::@5]
  b5_from_b14:
  //SEG81 [30] phi (byte) main::r#11 = (byte) '-' [phi:main::@14->main::@5#0] -- vbuz1=vbuc1 
    lda #'-'
    sta r_11
    jmp b5
  //SEG82 main::@5
  b5:
  //SEG83 [31] (byte) printu::a#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.a
  //SEG84 [32] (byte) printu::b#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.b
  //SEG85 [33] (byte) printu::res#3 ← (byte) main::r#11 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda r_11
    sta printu.res
  //SEG86 [34] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG87 [47] phi from main::@5 to printu [phi:main::@5->printu]
  printu_from_b5:
  //SEG88 [47] phi (byte) printu::res#4 = (byte) printu::res#3 [phi:main::@5->printu#0] -- register_copy 
  //SEG89 [47] phi (byte) printu::b#4 = (byte) printu::b#3 [phi:main::@5->printu#1] -- register_copy 
  //SEG90 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@5->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG91 [47] phi (byte) printu::a#4 = (byte) printu::a#3 [phi:main::@5->printu#3] -- register_copy 
  //SEG92 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@5->printu#4] -- register_copy 
    jsr printu
  //SEG93 [35] phi from main::@5 to main::@15 [phi:main::@5->main::@15]
  b15_from_b5:
    jmp b15
  //SEG94 main::@15
  b15:
  //SEG95 [36] call print_ln param-assignment [ main::a#10 main::i#10 line_cursor#1 ] ( main:2 [ main::a#10 main::i#10 line_cursor#1 ] )
  //SEG96 [42] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from_b15:
    jsr print_ln
    jmp b16
  //SEG97 main::@16
  b16:
  //SEG98 [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda a
    clc
    adc #$10
    sta a
  //SEG99 [38] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG100 [39] if((byte) main::i#1!=(byte/signed byte/word/signed word) 16) goto main::@17 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b17
    jmp breturn
  //SEG101 main::@return
  breturn:
  //SEG102 [40] return  [ ] ( main:2 [ ] )
    rts
  //SEG103 main::@17
  b17:
  //SEG104 [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG105 [6] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG106 [6] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@17->main::@1#0] -- register_copy 
  //SEG107 [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@17->main::@1#1] -- register_copy 
  //SEG108 [6] phi (byte*) char_cursor#46 = (byte*~) char_cursor#58 [phi:main::@17->main::@1#2] -- register_copy 
  //SEG109 [6] phi (byte) main::a#10 = (byte) main::a#1 [phi:main::@17->main::@1#3] -- register_copy 
    jmp b1
    cs: .byte 7, $f7, $17, $e7, $27, $d7, $37, $c7, $47, $b7, $57, $a7, $67, $97, $77, $87
}
//SEG110 print_ln
print_ln: {
  //SEG111 [43] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG112 [43] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG113 print_ln::@1
  b1:
  //SEG114 [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG115 [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG116 print_ln::@return
  breturn:
  //SEG117 [46] return  [ line_cursor#1 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 ] )
    rts
}
//SEG118 printu
printu: {
    .label a = $a
    .label b = $c
    .label res = $d
    .label op = $b
  //SEG119 [48] call print_char param-assignment [ char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  //SEG120 [60] phi from printu to print_char [phi:printu->print_char]
  print_char_from_printu:
  //SEG121 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#45 [phi:printu->print_char#0] -- register_copy 
  //SEG122 [60] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b1
  //SEG123 printu::@1
  b1:
  //SEG124 [49] (byte) print_byte::b#0 ← (byte) printu::a#4 [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ) -- vbuz1=vbuz2 
    lda a
    sta print_byte.b
  //SEG125 [50] call print_byte param-assignment [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] )
  //SEG126 [64] phi from printu::@1 to print_byte [phi:printu::@1->print_byte]
  print_byte_from_b1:
  //SEG127 [64] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:printu::@1->print_byte#0] -- register_copy 
    jsr print_byte
    jmp b2
  //SEG128 printu::@2
  b2:
  //SEG129 [51] (byte) print_char::ch#3 ← (byte) printu::op#4 [ char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ) -- vbuz1=vbuz2 
    lda op
    sta print_char.ch
  //SEG130 [52] call print_char param-assignment [ char_cursor#28 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] )
  //SEG131 [60] phi from printu::@2 to print_char [phi:printu::@2->print_char]
  print_char_from_b2:
  //SEG132 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@2->print_char#0] -- register_copy 
  //SEG133 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#3 [phi:printu::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp b3
  //SEG134 printu::@3
  b3:
  //SEG135 [53] (byte) print_byte::b#1 ← (byte) printu::b#4 [ char_cursor#28 printu::res#4 print_byte::b#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] ) -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG136 [54] call print_byte param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  //SEG137 [64] phi from printu::@3 to print_byte [phi:printu::@3->print_byte]
  print_byte_from_b3:
  //SEG138 [64] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:printu::@3->print_byte#0] -- register_copy 
    jsr print_byte
  //SEG139 [55] phi from printu::@3 to printu::@4 [phi:printu::@3->printu::@4]
  b4_from_b3:
    jmp b4
  //SEG140 printu::@4
  b4:
  //SEG141 [56] call print_char param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  //SEG142 [60] phi from printu::@4 to print_char [phi:printu::@4->print_char]
  print_char_from_b4:
  //SEG143 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@4->print_char#0] -- register_copy 
  //SEG144 [60] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu::@4->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
    jmp b5
  //SEG145 printu::@5
  b5:
  //SEG146 [57] (byte) print_char::ch#5 ← (byte) printu::res#4 [ char_cursor#28 print_char::ch#5 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_char.ch
  //SEG147 [58] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG148 [60] phi from printu::@5 to print_char [phi:printu::@5->print_char]
  print_char_from_b5:
  //SEG149 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@5->print_char#0] -- register_copy 
  //SEG150 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:printu::@5->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG151 printu::@return
  breturn:
  //SEG152 [59] return  [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
}
//SEG153 print_char
print_char: {
    .label ch = $e
  //SEG154 [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (char_cursor),y
  //SEG155 [62] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG156 print_char::@return
  breturn:
  //SEG157 [63] return  [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
    rts
}
//SEG158 print_byte
print_byte: {
    .label _0 = $15
    .label _2 = $16
    .label b = $11
  //SEG159 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ char_cursor#28 print_byte::b#2 print_byte::$0 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG160 [66] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ char_cursor#28 print_char::ch#0 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda hextab,y
    sta print_char.ch
  //SEG161 [67] call print_char param-assignment [ char_cursor#28 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] )
  //SEG162 [60] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG163 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte->print_char#0] -- register_copy 
  //SEG164 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG165 print_byte::@1
  b1:
  //SEG166 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda b
    and #$f
    sta _2
  //SEG167 [69] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda hextab,y
    sta print_char.ch
  //SEG168 [70] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  //SEG169 [60] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG170 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG171 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG172 print_byte::@return
  breturn:
  //SEG173 [71] return  [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG174 print_cls
print_cls: {
    .label sc = $12
  //SEG175 [73] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG176 [73] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG177 [73] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG178 [73] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG179 print_cls::@1
  b1:
  //SEG180 [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG181 [75] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG182 [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG183 print_cls::@return
  breturn:
  //SEG184 [77] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::a#10 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::i#10 main::i#1 ]
Potential register analysis [21] if(main::a#10>=*(main::cs#0 + main::i#10)) goto main::@4 missing fragment vbuz1_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuz1=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 )  allocation: reg byte x [ main::i#10 main::i#1 ] zp ZP_BYTE:2 [ main::a#10 main::a#1 ] 
Potential register analysis [21] if(main::a#10>=*(main::cs#0 + main::i#10)) goto main::@4 missing fragment vbuyy_ge_pbuc1_derefidx_vbuz1_then_la1(main:: vbuyy=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuz1=(byte) main::i#10 la1=(label) main::b4_from_b13 )  allocation: zp ZP_BYTE:3 [ main::i#10 main::i#1 ] reg byte y [ main::a#10 main::a#1 ] 
Potential register analysis [21] if(main::a#10>=*(main::cs#0 + main::i#10)) goto main::@4 missing fragment vbuyy_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuyy=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 )  allocation: reg byte x [ main::i#10 main::i#1 ] reg byte y [ main::a#10 main::a#1 ] 
Potential register analysis [21] if(main::a#10>=*(main::cs#0 + main::i#10)) goto main::@4 missing fragment vbuyy_ge_pbuc1_derefidx_vbuyy_then_la1(main:: vbuyy=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 la1=(label) main::b4_from_b13 )  allocation: reg byte y [ main::i#10 main::i#1 ] reg byte y [ main::a#10 main::a#1 ] 
MISSING FRAGMENTS
  vbuz1_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuz1=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 ) 
  vbuyy_ge_pbuc1_derefidx_vbuz1_then_la1(main:: vbuyy=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuz1=(byte) main::i#10 la1=(label) main::b4_from_b13 ) 
  vbuyy_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuyy=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 ) 
  vbuyy_ge_pbuc1_derefidx_vbuyy_then_la1(main:: vbuyy=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 la1=(label) main::b4_from_b13 ) 
Statement [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) always clobbers reg byte a 
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) always clobbers reg byte a 
Statement [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::a#10 main::a#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ printu::op#4 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ printu::op#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ]
Statement [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) always clobbers reg byte a 
Potential register analysis [21] if(main::a#10>=*(main::cs#0 + main::i#10)) goto main::@4 missing fragment vbuz1_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuz1=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 )  allocation: reg byte x [ main::i#10 main::i#1 ] zp ZP_BYTE:2 [ main::a#10 main::a#1 ] 
MISSING FRAGMENTS
  vbuz1_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuz1=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 ) 
Statement [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) always clobbers reg byte a reg byte y 
Statement [25] (byte) printu::b#2 ← *((const byte[16]) main::cs#0 + (byte) main::i#10) [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::r#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) always clobbers reg byte a 
Statement [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] ) always clobbers reg byte y 
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] ) always clobbers reg byte a 
Statement [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) always clobbers reg byte a 
Potential register analysis [21] if(main::a#10>=*(main::cs#0 + main::i#10)) goto main::@4 missing fragment vbuz1_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuz1=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 )  allocation: reg byte x [ main::i#10 main::i#1 ] zp ZP_BYTE:2 [ main::a#10 main::a#1 ] 
MISSING FRAGMENTS
  vbuz1_ge_pbuc1_derefidx_vbuxx_then_la1(main:: vbuz1=(byte) main::a#10 pbuc1=(const byte[16]) main::cs#0 vbuxx=(byte) main::i#10 la1=(label) main::b4_from_b13 ) 
Statement [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) always clobbers reg byte a reg byte y 
Statement [25] (byte) printu::b#2 ← *((const byte[16]) main::cs#0 + (byte) main::i#10) [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ) always clobbers reg byte a 
Statement [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) always clobbers reg byte a 
Statement [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) always clobbers reg byte a 
Statement [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] ) always clobbers reg byte y 
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] ) always clobbers reg byte a 
Statement [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::a#10 main::a#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ main::i#10 main::i#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ main::r#8 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::r#9 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::r#10 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::r#11 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:8 [ line_cursor#6 line_cursor#13 line_cursor#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ printu::op#4 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ] : zp ZP_BYTE:12 , reg byte x , 
Potential registers zp ZP_BYTE:13 [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ] : zp ZP_BYTE:13 , reg byte x , 
Potential registers zp ZP_BYTE:14 [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:15 [ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:18 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ main::b#0 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ print_byte::$0 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ print_byte::$2 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 245.04: zp ZP_WORD:8 [ line_cursor#6 line_cursor#13 line_cursor#1 ] 81.79: zp ZP_WORD:15 [ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ] 
Uplift Scope [printu] 92.6: zp ZP_BYTE:13 [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ] 56: zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ] 38.83: zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ] 0.5: zp ZP_BYTE:11 [ printu::op#4 ] 
Uplift Scope [main] 12.38: zp ZP_BYTE:3 [ main::i#10 main::i#1 ] 10.11: zp ZP_BYTE:2 [ main::a#10 main::a#1 ] 6.6: zp ZP_BYTE:20 [ main::b#0 ] 5.5: zp ZP_BYTE:5 [ main::r#9 ] 3.67: zp ZP_BYTE:4 [ main::r#8 ] 3.67: zp ZP_BYTE:6 [ main::r#10 ] 3.67: zp ZP_BYTE:7 [ main::r#11 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:18 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_char] 26: zp ZP_BYTE:14 [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:21 [ print_byte::$0 ] 4: zp ZP_BYTE:22 [ print_byte::$2 ] 
Uplift Scope [print_ln] 

Uplifting [] best 7865 combination zp ZP_WORD:8 [ line_cursor#6 line_cursor#13 line_cursor#1 ] zp ZP_WORD:15 [ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ] 
Uplifting [printu] best 7742 combination reg byte x [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ] zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ] zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ] zp ZP_BYTE:11 [ printu::op#4 ] 
Uplifting [main] best 7372 combination zp ZP_BYTE:3 [ main::i#10 main::i#1 ] zp ZP_BYTE:2 [ main::a#10 main::a#1 ] reg byte y [ main::b#0 ] reg byte x [ main::r#9 ] reg byte x [ main::r#8 ] reg byte x [ main::r#10 ] reg byte x [ main::r#11 ] 
Uplifting [print_cls] best 7372 combination zp ZP_WORD:18 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_char] best 7353 combination reg byte a [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ] 
Uplifting [print_byte] best 7345 combination zp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte y [ print_byte::$0 ] reg byte y [ print_byte::$2 ] 
Uplifting [print_ln] best 7345 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
Uplifting [printu] best 7345 combination zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
Uplifting [printu] best 7345 combination zp ZP_BYTE:12 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::i#10 main::i#1 ]
Uplifting [main] best 7345 combination zp ZP_BYTE:3 [ main::i#10 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::a#10 main::a#1 ]
Uplifting [main] best 7345 combination zp ZP_BYTE:2 [ main::a#10 main::a#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 7345 combination zp ZP_BYTE:17 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ printu::op#4 ]
Uplifting [printu] best 7345 combination zp ZP_BYTE:11 [ printu::op#4 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ main::a#10 main::a#1 ] ] with [ zp ZP_BYTE:10 [ printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ] ]
Coalescing zero page register [ zp ZP_WORD:8 [ line_cursor#6 line_cursor#13 line_cursor#1 ] ] with [ zp ZP_WORD:18 [ print_cls::sc#2 print_cls::sc#1 ] ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:4 [ line_cursor#6 line_cursor#13 line_cursor#1 print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:6 [ printu::op#4 ]
Allocated (was zp ZP_BYTE:12) zp ZP_BYTE:7 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:8 [ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ]
Allocated (was zp ZP_BYTE:17) zp ZP_BYTE:10 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label line_cursor = 4
  .label char_cursor = 8
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @10 [phi:@begin->@10]
b10_from_bbegin:
  jmp b10
//SEG4 @10
b10:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @10 to main [phi:@10->main]
main_from_b10:
  jsr main
//SEG7 [3] phi from @10 to @end [phi:@10->@end]
bend_from_b10:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label a = 2
    .label i = 3
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [72] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte*) line_cursor#13 = ((byte*))(word/signed word) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG14 [6] phi (byte) main::i#10 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG15 [6] phi (byte*) char_cursor#46 = ((byte*))(word/signed word) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG16 [6] phi (byte) main::a#10 = (byte/signed byte/word/signed word) 7 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #7
    sta a
    jmp b1
  //SEG17 main::@1
  b1:
  //SEG18 [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) -- vbuyy=vbuc1_minus_vbuz1 
    lda #$ee
    sec
    sbc a
    tay
  //SEG19 [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) -- vbuz1_ge_vbuyy_then_la1 
    lda a
    sty $ff
    cmp $ff
    bcs b2_from_b1
  //SEG20 [9] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG21 main::@6
  b6:
  //SEG22 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG23 [10] phi (byte) main::r#8 = (byte) '+' [phi:main::@6->main::@2#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b2
  //SEG24 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG25 [10] phi (byte) main::r#8 = (byte) '-' [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #'-'
    jmp b2
  //SEG26 main::@2
  b2:
  //SEG27 [11] (byte) printu::a#0 ← (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] )
    // (byte) printu::a#0 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG28 [12] (byte) printu::b#0 ← (byte) main::b#0 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ) -- vbuz1=vbuyy 
    sty printu.b
  //SEG29 [13] (byte) printu::res#0 ← (byte) main::r#8 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] )
    // (byte) printu::res#0 = (byte) main::r#8  // register copy reg byte x
  //SEG30 [14] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG31 [47] phi from main::@2 to printu [phi:main::@2->printu]
  printu_from_b2:
  //SEG32 [47] phi (byte) printu::res#4 = (byte) printu::res#0 [phi:main::@2->printu#0] -- register_copy 
  //SEG33 [47] phi (byte) printu::b#4 = (byte) printu::b#0 [phi:main::@2->printu#1] -- register_copy 
  //SEG34 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@2->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG35 [47] phi (byte) printu::a#4 = (byte) printu::a#0 [phi:main::@2->printu#3] -- register_copy 
  //SEG36 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#46 [phi:main::@2->printu#4] -- register_copy 
    jsr printu
    jmp b12
  //SEG37 main::@12
  b12:
  //SEG38 [15] if((byte) main::a#10>=(byte/word/signed word) 135) goto main::@3 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_vbuc1_then_la1 
    lda a
    cmp #$87
    bcs b3_from_b12
  //SEG39 [16] phi from main::@12 to main::@7 [phi:main::@12->main::@7]
  b7_from_b12:
    jmp b7
  //SEG40 main::@7
  b7:
  //SEG41 [17] phi from main::@7 to main::@3 [phi:main::@7->main::@3]
  b3_from_b7:
  //SEG42 [17] phi (byte) main::r#9 = (byte) '+' [phi:main::@7->main::@3#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b3
  //SEG43 [17] phi from main::@12 to main::@3 [phi:main::@12->main::@3]
  b3_from_b12:
  //SEG44 [17] phi (byte) main::r#9 = (byte) '-' [phi:main::@12->main::@3#0] -- vbuxx=vbuc1 
    ldx #'-'
    jmp b3
  //SEG45 main::@3
  b3:
  //SEG46 [18] (byte) printu::a#1 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] )
    // (byte) printu::a#1 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG47 [19] (byte) printu::res#1 ← (byte) main::r#9 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] )
    // (byte) printu::res#1 = (byte) main::r#9  // register copy reg byte x
  //SEG48 [20] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG49 [47] phi from main::@3 to printu [phi:main::@3->printu]
  printu_from_b3:
  //SEG50 [47] phi (byte) printu::res#4 = (byte) printu::res#1 [phi:main::@3->printu#0] -- register_copy 
  //SEG51 [47] phi (byte) printu::b#4 = (byte/word/signed word) 135 [phi:main::@3->printu#1] -- vbuz1=vbuc1 
    lda #$87
    sta printu.b
  //SEG52 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@3->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG53 [47] phi (byte) printu::a#4 = (byte) printu::a#1 [phi:main::@3->printu#3] -- register_copy 
  //SEG54 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@3->printu#4] -- register_copy 
    jsr printu
    jmp b13
  //SEG55 main::@13
  b13:
  //SEG56 [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_pbuc1_derefidx_vbuz2_then_la1 
    lda a
    ldy i
    cmp cs,y
    bcs b4_from_b13
  //SEG57 [22] phi from main::@13 to main::@8 [phi:main::@13->main::@8]
  b8_from_b13:
    jmp b8
  //SEG58 main::@8
  b8:
  //SEG59 [23] phi from main::@8 to main::@4 [phi:main::@8->main::@4]
  b4_from_b8:
  //SEG60 [23] phi (byte) main::r#10 = (byte) '+' [phi:main::@8->main::@4#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b4
  //SEG61 [23] phi from main::@13 to main::@4 [phi:main::@13->main::@4]
  b4_from_b13:
  //SEG62 [23] phi (byte) main::r#10 = (byte) '-' [phi:main::@13->main::@4#0] -- vbuxx=vbuc1 
    ldx #'-'
    jmp b4
  //SEG63 main::@4
  b4:
  //SEG64 [24] (byte) printu::a#2 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] )
    // (byte) printu::a#2 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG65 [25] (byte) printu::b#2 ← *((const byte[16]) main::cs#0 + (byte) main::i#10) [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda cs,y
    sta printu.b
  //SEG66 [26] (byte) printu::res#2 ← (byte) main::r#10 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] )
    // (byte) printu::res#2 = (byte) main::r#10  // register copy reg byte x
  //SEG67 [27] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG68 [47] phi from main::@4 to printu [phi:main::@4->printu]
  printu_from_b4:
  //SEG69 [47] phi (byte) printu::res#4 = (byte) printu::res#2 [phi:main::@4->printu#0] -- register_copy 
  //SEG70 [47] phi (byte) printu::b#4 = (byte) printu::b#2 [phi:main::@4->printu#1] -- register_copy 
  //SEG71 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@4->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG72 [47] phi (byte) printu::a#4 = (byte) printu::a#2 [phi:main::@4->printu#3] -- register_copy 
  //SEG73 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@4->printu#4] -- register_copy 
    jsr printu
    jmp b14
  //SEG74 main::@14
  b14:
  //SEG75 [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_vbuz1_then_la1 
    lda a
    cmp a
    bcs b5_from_b14
  //SEG76 [29] phi from main::@14 to main::@9 [phi:main::@14->main::@9]
  b9_from_b14:
    jmp b9
  //SEG77 main::@9
  b9:
  //SEG78 [30] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  b5_from_b9:
  //SEG79 [30] phi (byte) main::r#11 = (byte) '+' [phi:main::@9->main::@5#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b5
  //SEG80 [30] phi from main::@14 to main::@5 [phi:main::@14->main::@5]
  b5_from_b14:
  //SEG81 [30] phi (byte) main::r#11 = (byte) '-' [phi:main::@14->main::@5#0] -- vbuxx=vbuc1 
    ldx #'-'
    jmp b5
  //SEG82 main::@5
  b5:
  //SEG83 [31] (byte) printu::a#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] )
    // (byte) printu::a#3 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG84 [32] (byte) printu::b#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.b
  //SEG85 [33] (byte) printu::res#3 ← (byte) main::r#11 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] )
    // (byte) printu::res#3 = (byte) main::r#11  // register copy reg byte x
  //SEG86 [34] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG87 [47] phi from main::@5 to printu [phi:main::@5->printu]
  printu_from_b5:
  //SEG88 [47] phi (byte) printu::res#4 = (byte) printu::res#3 [phi:main::@5->printu#0] -- register_copy 
  //SEG89 [47] phi (byte) printu::b#4 = (byte) printu::b#3 [phi:main::@5->printu#1] -- register_copy 
  //SEG90 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@5->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG91 [47] phi (byte) printu::a#4 = (byte) printu::a#3 [phi:main::@5->printu#3] -- register_copy 
  //SEG92 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@5->printu#4] -- register_copy 
    jsr printu
  //SEG93 [35] phi from main::@5 to main::@15 [phi:main::@5->main::@15]
  b15_from_b5:
    jmp b15
  //SEG94 main::@15
  b15:
  //SEG95 [36] call print_ln param-assignment [ main::a#10 main::i#10 line_cursor#1 ] ( main:2 [ main::a#10 main::i#10 line_cursor#1 ] )
  //SEG96 [42] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from_b15:
    jsr print_ln
    jmp b16
  //SEG97 main::@16
  b16:
  //SEG98 [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda a
    clc
    adc #$10
    sta a
  //SEG99 [38] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG100 [39] if((byte) main::i#1!=(byte/signed byte/word/signed word) 16) goto main::@17 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b17
    jmp breturn
  //SEG101 main::@return
  breturn:
  //SEG102 [40] return  [ ] ( main:2 [ ] )
    rts
  //SEG103 main::@17
  b17:
  //SEG104 [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG105 [6] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG106 [6] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@17->main::@1#0] -- register_copy 
  //SEG107 [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@17->main::@1#1] -- register_copy 
  //SEG108 [6] phi (byte*) char_cursor#46 = (byte*~) char_cursor#58 [phi:main::@17->main::@1#2] -- register_copy 
  //SEG109 [6] phi (byte) main::a#10 = (byte) main::a#1 [phi:main::@17->main::@1#3] -- register_copy 
    jmp b1
    cs: .byte 7, $f7, $17, $e7, $27, $d7, $37, $c7, $47, $b7, $57, $a7, $67, $97, $77, $87
}
//SEG110 print_ln
print_ln: {
  //SEG111 [43] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG112 [43] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG113 print_ln::@1
  b1:
  //SEG114 [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG115 [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG116 print_ln::@return
  breturn:
  //SEG117 [46] return  [ line_cursor#1 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 ] )
    rts
}
//SEG118 printu
printu: {
    .label a = 2
    .label b = 7
    .label op = 6
  //SEG119 [48] call print_char param-assignment [ char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  //SEG120 [60] phi from printu to print_char [phi:printu->print_char]
  print_char_from_printu:
  //SEG121 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#45 [phi:printu->print_char#0] -- register_copy 
  //SEG122 [60] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b1
  //SEG123 printu::@1
  b1:
  //SEG124 [49] (byte) print_byte::b#0 ← (byte) printu::a#4 [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ) -- vbuz1=vbuz2 
    lda a
    sta print_byte.b
  //SEG125 [50] call print_byte param-assignment [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] )
  //SEG126 [64] phi from printu::@1 to print_byte [phi:printu::@1->print_byte]
  print_byte_from_b1:
  //SEG127 [64] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:printu::@1->print_byte#0] -- register_copy 
    jsr print_byte
    jmp b2
  //SEG128 printu::@2
  b2:
  //SEG129 [51] (byte) print_char::ch#3 ← (byte) printu::op#4 [ char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ) -- vbuaa=vbuz1 
    lda op
  //SEG130 [52] call print_char param-assignment [ char_cursor#28 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] )
  //SEG131 [60] phi from printu::@2 to print_char [phi:printu::@2->print_char]
  print_char_from_b2:
  //SEG132 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@2->print_char#0] -- register_copy 
  //SEG133 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#3 [phi:printu::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp b3
  //SEG134 printu::@3
  b3:
  //SEG135 [53] (byte) print_byte::b#1 ← (byte) printu::b#4 [ char_cursor#28 printu::res#4 print_byte::b#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] ) -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG136 [54] call print_byte param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  //SEG137 [64] phi from printu::@3 to print_byte [phi:printu::@3->print_byte]
  print_byte_from_b3:
  //SEG138 [64] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:printu::@3->print_byte#0] -- register_copy 
    jsr print_byte
  //SEG139 [55] phi from printu::@3 to printu::@4 [phi:printu::@3->printu::@4]
  b4_from_b3:
    jmp b4
  //SEG140 printu::@4
  b4:
  //SEG141 [56] call print_char param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  //SEG142 [60] phi from printu::@4 to print_char [phi:printu::@4->print_char]
  print_char_from_b4:
  //SEG143 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@4->print_char#0] -- register_copy 
  //SEG144 [60] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu::@4->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b5
  //SEG145 printu::@5
  b5:
  //SEG146 [57] (byte) print_char::ch#5 ← (byte) printu::res#4 [ char_cursor#28 print_char::ch#5 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] ) -- vbuaa=vbuxx 
    txa
  //SEG147 [58] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG148 [60] phi from printu::@5 to print_char [phi:printu::@5->print_char]
  print_char_from_b5:
  //SEG149 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@5->print_char#0] -- register_copy 
  //SEG150 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:printu::@5->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG151 printu::@return
  breturn:
  //SEG152 [59] return  [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
}
//SEG153 print_char
print_char: {
  //SEG154 [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG155 [62] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG156 print_char::@return
  breturn:
  //SEG157 [63] return  [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
    rts
}
//SEG158 print_byte
print_byte: {
    .label b = $a
  //SEG159 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ char_cursor#28 print_byte::b#2 print_byte::$0 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] ) -- vbuyy=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    tay
  //SEG160 [66] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ char_cursor#28 print_char::ch#0 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda hextab,y
  //SEG161 [67] call print_char param-assignment [ char_cursor#28 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] )
  //SEG162 [60] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG163 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte->print_char#0] -- register_copy 
  //SEG164 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG165 print_byte::@1
  b1:
  //SEG166 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] ) -- vbuyy=vbuz1_band_vbuc1 
    lda b
    and #$f
    tay
  //SEG167 [69] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda hextab,y
  //SEG168 [70] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  //SEG169 [60] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG170 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG171 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG172 print_byte::@return
  breturn:
  //SEG173 [71] return  [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG174 print_cls
print_cls: {
    .label sc = 4
  //SEG175 [73] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG176 [73] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG177 [73] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG178 [73] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG179 print_cls::@1
  b1:
  //SEG180 [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG181 [75] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG182 [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG183 print_cls::@return
  breturn:
  //SEG184 [77] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b10
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b12
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b13
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b9
Removing instruction jmp b5
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b10_from_bbegin:
Removing instruction main_from_b10:
Removing instruction bend_from_b10:
Removing instruction b6_from_b1:
Removing instruction b2_from_b6:
Removing instruction b7_from_b12:
Removing instruction b3_from_b7:
Removing instruction b8_from_b13:
Removing instruction b4_from_b8:
Removing instruction b9_from_b14:
Removing instruction b5_from_b9:
Removing instruction b15_from_b5:
Removing instruction print_ln_from_b15:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b4_from_b3:
Removing instruction print_char_from_b4:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b10:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction b6:
Removing instruction printu_from_b2:
Removing instruction b12:
Removing instruction b7:
Removing instruction printu_from_b3:
Removing instruction b13:
Removing instruction b8:
Removing instruction printu_from_b4:
Removing instruction b14:
Removing instruction b9:
Removing instruction printu_from_b5:
Removing instruction b15:
Removing instruction b16:
Removing instruction breturn:
Removing instruction b1_from_b17:
Removing instruction breturn:
Removing instruction print_char_from_printu:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction b2:
Removing instruction print_char_from_b2:
Removing instruction b3:
Removing instruction print_byte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_char_from_b5:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label b2_from_b1 to b6
Relabelling long label b3_from_b12 to b7
Relabelling long label b4_from_b13 to b8
Relabelling long label b5_from_b14 to b9
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @10
(label) @begin
(label) @end
(byte*) char_cursor
(byte*) char_cursor#27 char_cursor zp ZP_WORD:8 8.0
(byte*) char_cursor#28 char_cursor zp ZP_WORD:8 3.041666666666665
(byte*) char_cursor#45 char_cursor zp ZP_WORD:8 46.0
(byte*) char_cursor#46 char_cursor zp ZP_WORD:8 2.75
(byte*~) char_cursor#58 char_cursor zp ZP_WORD:8 22.0
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:4 40.625
(byte*) line_cursor#13 line_cursor zp ZP_WORD:4 0.41935483870967744
(byte*) line_cursor#6 line_cursor zp ZP_WORD:4 204.0
(void()) main()
(label) main::@1
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::a
(byte) main::a#1 a zp ZP_BYTE:2 5.5
(byte) main::a#10 a zp ZP_BYTE:2 4.612903225806452
(byte) main::b
(byte) main::b#0 reg byte y 6.6000000000000005
(byte[16]) main::cs
(const byte[16]) main::cs#0 cs = { (byte/signed byte/word/signed word) 7, (byte/word/signed word) 247, (byte/signed byte/word/signed word) 23, (byte/word/signed word) 231, (byte/signed byte/word/signed word) 39, (byte/word/signed word) 215, (byte/signed byte/word/signed word) 55, (byte/word/signed word) 199, (byte/signed byte/word/signed word) 71, (byte/word/signed word) 183, (byte/signed byte/word/signed word) 87, (byte/word/signed word) 167, (byte/signed byte/word/signed word) 103, (byte/word/signed word) 151, (byte/signed byte/word/signed word) 119, (byte/word/signed word) 135 }
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:3 11.0
(byte) main::i#10 i zp ZP_BYTE:3 1.375
(byte) main::r
(byte) main::r#10 reg byte x 3.6666666666666665
(byte) main::r#11 reg byte x 3.6666666666666665
(byte) main::r#8 reg byte x 3.6666666666666665
(byte) main::r#9 reg byte x 5.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte y 4.0
(byte~) print_byte::$2 reg byte y 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:10 2.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#5 reg byte a 4.0
(byte) print_char::ch#6 reg byte a 10.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:4 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:4 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) printu((byte) printu::a , (byte) printu::op , (byte) printu::b , (byte) printu::res)
(label) printu::@1
(label) printu::@2
(label) printu::@3
(label) printu::@4
(label) printu::@5
(label) printu::@return
(byte) printu::a
(byte) printu::a#0 a zp ZP_BYTE:2 7.333333333333333
(byte) printu::a#1 a zp ZP_BYTE:2 11.0
(byte) printu::a#2 a zp ZP_BYTE:2 7.333333333333333
(byte) printu::a#3 a zp ZP_BYTE:2 7.333333333333333
(byte) printu::a#4 a zp ZP_BYTE:2 23.0
(byte) printu::b
(byte) printu::b#0 b zp ZP_BYTE:7 11.0
(byte) printu::b#2 b zp ZP_BYTE:7 11.0
(byte) printu::b#3 b zp ZP_BYTE:7 11.0
(byte) printu::b#4 b zp ZP_BYTE:7 5.833333333333333
(byte) printu::op
(byte) printu::op#4 op zp ZP_BYTE:6 0.5
(byte) printu::res
(byte) printu::res#0 reg byte x 22.0
(byte) printu::res#1 reg byte x 22.0
(byte) printu::res#2 reg byte x 22.0
(byte) printu::res#3 reg byte x 22.0
(byte) printu::res#4 reg byte x 4.6000000000000005

zp ZP_BYTE:2 [ main::a#10 main::a#1 printu::a#4 printu::a#0 printu::a#1 printu::a#2 printu::a#3 ]
zp ZP_BYTE:3 [ main::i#10 main::i#1 ]
reg byte x [ main::r#8 ]
reg byte x [ main::r#9 ]
reg byte x [ main::r#10 ]
reg byte x [ main::r#11 ]
zp ZP_WORD:4 [ line_cursor#6 line_cursor#13 line_cursor#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_BYTE:6 [ printu::op#4 ]
zp ZP_BYTE:7 [ printu::b#4 printu::b#0 printu::b#2 printu::b#3 ]
reg byte x [ printu::res#4 printu::res#0 printu::res#1 printu::res#2 printu::res#3 ]
reg byte a [ print_char::ch#6 print_char::ch#0 print_char::ch#1 print_char::ch#3 print_char::ch#5 ]
zp ZP_WORD:8 [ char_cursor#27 char_cursor#45 char_cursor#46 char_cursor#58 char_cursor#28 ]
zp ZP_BYTE:10 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte y [ main::b#0 ]
reg byte y [ print_byte::$0 ]
reg byte y [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 6040

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label line_cursor = 4
  .label char_cursor = 8
//SEG2 @begin
//SEG3 [1] phi from @begin to @10 [phi:@begin->@10]
//SEG4 @10
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @10 to main [phi:@10->main]
  jsr main
//SEG7 [3] phi from @10 to @end [phi:@10->@end]
//SEG8 @end
//SEG9 main
main: {
    .label a = 2
    .label i = 3
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [72] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 [6] phi (byte*) line_cursor#13 = ((byte*))(word/signed word) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG14 [6] phi (byte) main::i#10 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG15 [6] phi (byte*) char_cursor#46 = ((byte*))(word/signed word) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG16 [6] phi (byte) main::a#10 = (byte/signed byte/word/signed word) 7 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #7
    sta a
  //SEG17 main::@1
  b1:
  //SEG18 [7] (byte) main::b#0 ← (byte/word/signed word) 238 - (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) -- vbuyy=vbuc1_minus_vbuz1 
    lda #$ee
    sec
    sbc a
    tay
  //SEG19 [8] if((byte) main::a#10>=(byte) main::b#0) goto main::@2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 ] ) -- vbuz1_ge_vbuyy_then_la1 
    lda a
    sty $ff
    cmp $ff
    bcs b6
  //SEG20 [9] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG21 main::@6
  //SEG22 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG23 [10] phi (byte) main::r#8 = (byte) '+' [phi:main::@6->main::@2#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b2
  //SEG24 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b6:
  //SEG25 [10] phi (byte) main::r#8 = (byte) '-' [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #'-'
  //SEG26 main::@2
  b2:
  //SEG27 [11] (byte) printu::a#0 ← (byte) main::a#10 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::b#0 main::r#8 printu::a#0 ] )
    // (byte) printu::a#0 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG28 [12] (byte) printu::b#0 ← (byte) main::b#0 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 main::r#8 printu::a#0 printu::b#0 ] ) -- vbuz1=vbuyy 
    sty printu.b
  //SEG29 [13] (byte) printu::res#0 ← (byte) main::r#8 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] ( main:2 [ main::a#10 char_cursor#46 main::i#10 line_cursor#13 printu::a#0 printu::b#0 printu::res#0 ] )
    // (byte) printu::res#0 = (byte) main::r#8  // register copy reg byte x
  //SEG30 [14] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG31 [47] phi from main::@2 to printu [phi:main::@2->printu]
  //SEG32 [47] phi (byte) printu::res#4 = (byte) printu::res#0 [phi:main::@2->printu#0] -- register_copy 
  //SEG33 [47] phi (byte) printu::b#4 = (byte) printu::b#0 [phi:main::@2->printu#1] -- register_copy 
  //SEG34 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@2->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG35 [47] phi (byte) printu::a#4 = (byte) printu::a#0 [phi:main::@2->printu#3] -- register_copy 
  //SEG36 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#46 [phi:main::@2->printu#4] -- register_copy 
    jsr printu
  //SEG37 main::@12
  //SEG38 [15] if((byte) main::a#10>=(byte/word/signed word) 135) goto main::@3 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_vbuc1_then_la1 
    lda a
    cmp #$87
    bcs b7
  //SEG39 [16] phi from main::@12 to main::@7 [phi:main::@12->main::@7]
  //SEG40 main::@7
  //SEG41 [17] phi from main::@7 to main::@3 [phi:main::@7->main::@3]
  //SEG42 [17] phi (byte) main::r#9 = (byte) '+' [phi:main::@7->main::@3#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b3
  //SEG43 [17] phi from main::@12 to main::@3 [phi:main::@12->main::@3]
  b7:
  //SEG44 [17] phi (byte) main::r#9 = (byte) '-' [phi:main::@12->main::@3#0] -- vbuxx=vbuc1 
    ldx #'-'
  //SEG45 main::@3
  b3:
  //SEG46 [18] (byte) printu::a#1 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#9 printu::a#1 char_cursor#28 ] )
    // (byte) printu::a#1 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG47 [19] (byte) printu::res#1 ← (byte) main::r#9 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#1 printu::res#1 char_cursor#28 ] )
    // (byte) printu::res#1 = (byte) main::r#9  // register copy reg byte x
  //SEG48 [20] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG49 [47] phi from main::@3 to printu [phi:main::@3->printu]
  //SEG50 [47] phi (byte) printu::res#4 = (byte) printu::res#1 [phi:main::@3->printu#0] -- register_copy 
  //SEG51 [47] phi (byte) printu::b#4 = (byte/word/signed word) 135 [phi:main::@3->printu#1] -- vbuz1=vbuc1 
    lda #$87
    sta printu.b
  //SEG52 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@3->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG53 [47] phi (byte) printu::a#4 = (byte) printu::a#1 [phi:main::@3->printu#3] -- register_copy 
  //SEG54 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@3->printu#4] -- register_copy 
    jsr printu
  //SEG55 main::@13
  //SEG56 [21] if((byte) main::a#10>=*((const byte[16]) main::cs#0 + (byte) main::i#10)) goto main::@4 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_pbuc1_derefidx_vbuz2_then_la1 
    lda a
    ldy i
    cmp cs,y
    bcs b8
  //SEG57 [22] phi from main::@13 to main::@8 [phi:main::@13->main::@8]
  //SEG58 main::@8
  //SEG59 [23] phi from main::@8 to main::@4 [phi:main::@8->main::@4]
  //SEG60 [23] phi (byte) main::r#10 = (byte) '+' [phi:main::@8->main::@4#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b4
  //SEG61 [23] phi from main::@13 to main::@4 [phi:main::@13->main::@4]
  b8:
  //SEG62 [23] phi (byte) main::r#10 = (byte) '-' [phi:main::@13->main::@4#0] -- vbuxx=vbuc1 
    ldx #'-'
  //SEG63 main::@4
  b4:
  //SEG64 [24] (byte) printu::a#2 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 char_cursor#28 ] )
    // (byte) printu::a#2 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG65 [25] (byte) printu::b#2 ← *((const byte[16]) main::cs#0 + (byte) main::i#10) [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#10 printu::a#2 printu::b#2 char_cursor#28 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda cs,y
    sta printu.b
  //SEG66 [26] (byte) printu::res#2 ← (byte) main::r#10 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#2 printu::b#2 printu::res#2 char_cursor#28 ] )
    // (byte) printu::res#2 = (byte) main::r#10  // register copy reg byte x
  //SEG67 [27] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG68 [47] phi from main::@4 to printu [phi:main::@4->printu]
  //SEG69 [47] phi (byte) printu::res#4 = (byte) printu::res#2 [phi:main::@4->printu#0] -- register_copy 
  //SEG70 [47] phi (byte) printu::b#4 = (byte) printu::b#2 [phi:main::@4->printu#1] -- register_copy 
  //SEG71 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@4->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG72 [47] phi (byte) printu::a#4 = (byte) printu::a#2 [phi:main::@4->printu#3] -- register_copy 
  //SEG73 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@4->printu#4] -- register_copy 
    jsr printu
  //SEG74 main::@14
  //SEG75 [28] if((byte) main::a#10>=(byte) main::a#10) goto main::@5 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ) -- vbuz1_ge_vbuz1_then_la1 
    lda a
    cmp a
    bcs b9
  //SEG76 [29] phi from main::@14 to main::@9 [phi:main::@14->main::@9]
  //SEG77 main::@9
  //SEG78 [30] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  //SEG79 [30] phi (byte) main::r#11 = (byte) '+' [phi:main::@9->main::@5#0] -- vbuxx=vbuc1 
    ldx #'+'
    jmp b5
  //SEG80 [30] phi from main::@14 to main::@5 [phi:main::@14->main::@5]
  b9:
  //SEG81 [30] phi (byte) main::r#11 = (byte) '-' [phi:main::@14->main::@5#0] -- vbuxx=vbuc1 
    ldx #'-'
  //SEG82 main::@5
  b5:
  //SEG83 [31] (byte) printu::a#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 char_cursor#28 ] )
    // (byte) printu::a#3 = (byte) main::a#10  // register copy zp ZP_BYTE:2
  //SEG84 [32] (byte) printu::b#3 ← (byte) main::a#10 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 main::r#11 printu::a#3 printu::b#3 char_cursor#28 ] ) -- vbuz1=vbuz2 
    lda a
    sta printu.b
  //SEG85 [33] (byte) printu::res#3 ← (byte) main::r#11 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 printu::a#3 printu::b#3 printu::res#3 char_cursor#28 ] )
    // (byte) printu::res#3 = (byte) main::r#11  // register copy reg byte x
  //SEG86 [34] call printu param-assignment [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] ( main:2 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG87 [47] phi from main::@5 to printu [phi:main::@5->printu]
  //SEG88 [47] phi (byte) printu::res#4 = (byte) printu::res#3 [phi:main::@5->printu#0] -- register_copy 
  //SEG89 [47] phi (byte) printu::b#4 = (byte) printu::b#3 [phi:main::@5->printu#1] -- register_copy 
  //SEG90 [47] phi (byte) printu::op#4 = (byte) '<' [phi:main::@5->printu#2] -- vbuz1=vbuc1 
    lda #'<'
    sta printu.op
  //SEG91 [47] phi (byte) printu::a#4 = (byte) printu::a#3 [phi:main::@5->printu#3] -- register_copy 
  //SEG92 [47] phi (byte*) char_cursor#45 = (byte*) char_cursor#28 [phi:main::@5->printu#4] -- register_copy 
    jsr printu
  //SEG93 [35] phi from main::@5 to main::@15 [phi:main::@5->main::@15]
  //SEG94 main::@15
  //SEG95 [36] call print_ln param-assignment [ main::a#10 main::i#10 line_cursor#1 ] ( main:2 [ main::a#10 main::i#10 line_cursor#1 ] )
  //SEG96 [42] phi from main::@15 to print_ln [phi:main::@15->print_ln]
    jsr print_ln
  //SEG97 main::@16
  //SEG98 [37] (byte) main::a#1 ← (byte) main::a#10 + (byte/signed byte/word/signed word) 16 [ main::i#10 main::a#1 line_cursor#1 ] ( main:2 [ main::i#10 main::a#1 line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda a
    clc
    adc #$10
    sta a
  //SEG99 [38] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG100 [39] if((byte) main::i#1!=(byte/signed byte/word/signed word) 16) goto main::@17 [ main::a#1 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b17
  //SEG101 main::@return
  //SEG102 [40] return  [ ] ( main:2 [ ] )
    rts
  //SEG103 main::@17
  b17:
  //SEG104 [41] (byte*~) char_cursor#58 ← (byte*) line_cursor#1 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ( main:2 [ main::a#1 char_cursor#58 main::i#1 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG105 [6] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  //SEG106 [6] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@17->main::@1#0] -- register_copy 
  //SEG107 [6] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@17->main::@1#1] -- register_copy 
  //SEG108 [6] phi (byte*) char_cursor#46 = (byte*~) char_cursor#58 [phi:main::@17->main::@1#2] -- register_copy 
  //SEG109 [6] phi (byte) main::a#10 = (byte) main::a#1 [phi:main::@17->main::@1#3] -- register_copy 
    jmp b1
    cs: .byte 7, $f7, $17, $e7, $27, $d7, $37, $c7, $47, $b7, $57, $a7, $67, $97, $77, $87
}
//SEG110 print_ln
print_ln: {
  //SEG111 [43] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG112 [43] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG113 print_ln::@1
  b1:
  //SEG114 [44] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG115 [45] if((byte*) line_cursor#1<(byte*) char_cursor#28) goto print_ln::@1 [ line_cursor#1 char_cursor#28 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 char_cursor#28 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1
  !:
  //SEG116 print_ln::@return
  //SEG117 [46] return  [ line_cursor#1 ] ( main:2::print_ln:36 [ main::a#10 main::i#10 line_cursor#1 ] )
    rts
}
//SEG118 printu
printu: {
    .label a = 2
    .label b = 7
    .label op = 6
  //SEG119 [48] call print_char param-assignment [ char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::a#4 printu::op#4 printu::b#4 printu::res#4 ] )
  //SEG120 [60] phi from printu to print_char [phi:printu->print_char]
  //SEG121 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#45 [phi:printu->print_char#0] -- register_copy 
  //SEG122 [60] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG123 printu::@1
  //SEG124 [49] (byte) print_byte::b#0 ← (byte) printu::a#4 [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 print_byte::b#0 ] ) -- vbuz1=vbuz2 
    lda a
    sta print_byte.b
  //SEG125 [50] call print_byte param-assignment [ char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::op#4 printu::b#4 printu::res#4 ] )
  //SEG126 [64] phi from printu::@1 to print_byte [phi:printu::@1->print_byte]
  //SEG127 [64] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:printu::@1->print_byte#0] -- register_copy 
    jsr print_byte
  //SEG128 printu::@2
  //SEG129 [51] (byte) print_char::ch#3 ← (byte) printu::op#4 [ char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 print_char::ch#3 ] ) -- vbuaa=vbuz1 
    lda op
  //SEG130 [52] call print_char param-assignment [ char_cursor#28 printu::b#4 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::b#4 printu::res#4 ] )
  //SEG131 [60] phi from printu::@2 to print_char [phi:printu::@2->print_char]
  //SEG132 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@2->print_char#0] -- register_copy 
  //SEG133 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#3 [phi:printu::@2->print_char#1] -- register_copy 
    jsr print_char
  //SEG134 printu::@3
  //SEG135 [53] (byte) print_byte::b#1 ← (byte) printu::b#4 [ char_cursor#28 printu::res#4 print_byte::b#1 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 print_byte::b#1 ] ) -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG136 [54] call print_byte param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  //SEG137 [64] phi from printu::@3 to print_byte [phi:printu::@3->print_byte]
  //SEG138 [64] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:printu::@3->print_byte#0] -- register_copy 
    jsr print_byte
  //SEG139 [55] phi from printu::@3 to printu::@4 [phi:printu::@3->printu::@4]
  //SEG140 printu::@4
  //SEG141 [56] call print_char param-assignment [ char_cursor#28 printu::res#4 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 printu::res#4 ] )
  //SEG142 [60] phi from printu::@4 to print_char [phi:printu::@4->print_char]
  //SEG143 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@4->print_char#0] -- register_copy 
  //SEG144 [60] phi (byte) print_char::ch#6 = (byte) ' ' [phi:printu::@4->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG145 printu::@5
  //SEG146 [57] (byte) print_char::ch#5 ← (byte) printu::res#4 [ char_cursor#28 print_char::ch#5 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 print_char::ch#5 ] ) -- vbuaa=vbuxx 
    txa
  //SEG147 [58] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
  //SEG148 [60] phi from printu::@5 to print_char [phi:printu::@5->print_char]
  //SEG149 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:printu::@5->print_char#0] -- register_copy 
  //SEG150 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#5 [phi:printu::@5->print_char#1] -- register_copy 
    jsr print_char
  //SEG151 printu::@return
  //SEG152 [59] return  [ char_cursor#28 ] ( main:2::printu:14 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] )
    rts
}
//SEG153 print_char
print_char: {
  //SEG154 [61] *((byte*) char_cursor#27) ← (byte) print_char::ch#6 [ char_cursor#27 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#27 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#27 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#27 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG155 [62] (byte*) char_cursor#28 ← ++ (byte*) char_cursor#27 [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG156 print_char::@return
  //SEG157 [63] return  [ char_cursor#28 ] ( main:2::printu:14::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:48 [ main::a#10 main::i#10 line_cursor#13 printu::a#4 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:52 [ main::a#10 main::i#10 line_cursor#13 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_char:56 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:14::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:20::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:27::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:34::print_char:58 [ main::a#10 main::i#10 line_cursor#13 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:67 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 print_byte::b#2 char_cursor#28 ] main:2::printu:14::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54::print_char:70 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
    rts
}
//SEG158 print_byte
print_byte: {
    .label b = $a
  //SEG159 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ char_cursor#28 print_byte::b#2 print_byte::$0 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 print_byte::$0 ] ) -- vbuyy=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    tay
  //SEG160 [66] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ char_cursor#28 print_char::ch#0 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#0 print_byte::b#2 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda hextab,y
  //SEG161 [67] call print_char param-assignment [ char_cursor#28 print_byte::b#2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::b#2 ] )
  //SEG162 [60] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG163 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte->print_char#0] -- register_copy 
  //SEG164 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG165 print_byte::@1
  //SEG166 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#28 print_byte::$2 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_byte::$2 ] ) -- vbuyy=vbuz1_band_vbuc1 
    lda b
    and #$f
    tay
  //SEG167 [69] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#28 print_char::ch#1 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda hextab,y
  //SEG168 [70] call print_char param-assignment [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
  //SEG169 [60] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG170 [60] phi (byte*) char_cursor#27 = (byte*) char_cursor#28 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG171 [60] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG172 print_byte::@return
  //SEG173 [71] return  [ char_cursor#28 ] ( main:2::printu:14::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:50 [ main::a#10 main::i#10 line_cursor#13 printu::op#4 printu::b#4 printu::res#4 char_cursor#28 ] main:2::printu:14::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:20::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:27::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] main:2::printu:34::print_byte:54 [ main::a#10 main::i#10 line_cursor#13 printu::res#4 char_cursor#28 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG174 print_cls
print_cls: {
    .label sc = 4
  //SEG175 [73] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG176 [73] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG177 [73] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG178 [73] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG179 print_cls::@1
  b1:
  //SEG180 [74] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG181 [75] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG182 [76] if((byte*) print_cls::sc#1!=(word/signed word) 1024+(word/signed word) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG183 print_cls::@return
  //SEG184 [77] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

