
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from printf_number_buffer::@3
  [16] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [17] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [18] conio_line_text[conio_cursor_x] = cputc::c#0
  [19] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [20] conio_cursor_x = ++ conio_cursor_x
  [21] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [22] phi()
  [23] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [24] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [25] phi()
  [26] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [27] phi()
  [28] call clrscr
  to:main::@1
main::@1: scope:[main]  from main
  [29] stackpush(char) = '%'
  [30] callexecute cputc 
  sideeffect stackpullpadding(1)
  [32] call printf_str
  to:main::@2
main::@2: scope:[main]  from main::@1
  [33] stackpush(char) = '%'
  [34] callexecute cputc 
  sideeffect stackpullpadding(1)
  [36] call printf_str
  to:main::@3
main::@3: scope:[main]  from main::@2
  [37] phi()
  [38] call printf_sint
  to:main::@4
main::@4: scope:[main]  from main::@3
  [39] phi()
  [40] call printf_str
  to:main::@5
main::@5: scope:[main]  from main::@4
  [41] phi()
  [42] call printf_sint
  to:main::@6
main::@6: scope:[main]  from main::@5
  [43] phi()
  [44] call printf_str
  to:main::@7
main::@7: scope:[main]  from main::@6
  [45] stackpush(char) = '%'
  [46] callexecute cputc 
  sideeffect stackpullpadding(1)
  [48] call printf_str
  to:main::@8
main::@8: scope:[main]  from main::@7
  [49] stackpush(char) = '%'
  [50] callexecute cputc 
  sideeffect stackpullpadding(1)
  [52] call printf_str
  to:main::@9
main::@9: scope:[main]  from main::@8
  [53] phi()
  [54] call printf_sint
  to:main::@10
main::@10: scope:[main]  from main::@9
  [55] phi()
  [56] call printf_str
  to:main::@11
main::@11: scope:[main]  from main::@10
  [57] phi()
  [58] call printf_sint
  to:main::@12
main::@12: scope:[main]  from main::@11
  [59] phi()
  [60] call printf_str
  to:main::@13
main::@13: scope:[main]  from main::@12
  [61] stackpush(char) = '%'
  [62] callexecute cputc 
  sideeffect stackpullpadding(1)
  [64] call printf_str
  to:main::@14
main::@14: scope:[main]  from main::@13
  [65] stackpush(char) = '%'
  [66] callexecute cputc 
  sideeffect stackpullpadding(1)
  [68] call printf_str
  to:main::@15
main::@15: scope:[main]  from main::@14
  [69] phi()
  [70] call printf_sint
  to:main::@16
main::@16: scope:[main]  from main::@15
  [71] phi()
  [72] call printf_str
  to:main::@17
main::@17: scope:[main]  from main::@16
  [73] phi()
  [74] call printf_sint
  to:main::@18
main::@18: scope:[main]  from main::@17
  [75] phi()
  [76] call printf_str
  to:main::@19
main::@19: scope:[main]  from main::@18
  [77] stackpush(char) = '%'
  [78] callexecute cputc 
  sideeffect stackpullpadding(1)
  [80] call printf_str
  to:main::@20
main::@20: scope:[main]  from main::@19
  [81] stackpush(char) = '%'
  [82] callexecute cputc 
  sideeffect stackpullpadding(1)
  [84] call printf_str
  to:main::@21
main::@21: scope:[main]  from main::@20
  [85] phi()
  [86] call printf_sint
  to:main::@22
main::@22: scope:[main]  from main::@21
  [87] phi()
  [88] call printf_str
  to:main::@23
main::@23: scope:[main]  from main::@22
  [89] phi()
  [90] call printf_sint
  to:main::@24
main::@24: scope:[main]  from main::@23
  [91] phi()
  [92] call printf_str
  to:main::@25
main::@25: scope:[main]  from main::@24
  [93] stackpush(char) = '%'
  [94] callexecute cputc 
  sideeffect stackpullpadding(1)
  [96] call printf_str
  to:main::@26
main::@26: scope:[main]  from main::@25
  [97] stackpush(char) = '%'
  [98] callexecute cputc 
  sideeffect stackpullpadding(1)
  [100] call printf_str
  to:main::@27
main::@27: scope:[main]  from main::@26
  [101] phi()
  [102] call printf_sint
  to:main::@28
main::@28: scope:[main]  from main::@27
  [103] phi()
  [104] call printf_str
  to:main::@29
main::@29: scope:[main]  from main::@28
  [105] phi()
  [106] call printf_sint
  to:main::@30
main::@30: scope:[main]  from main::@29
  [107] phi()
  [108] call printf_str
  to:main::@return
main::@return: scope:[main]  from main::@30
  [109] return 
  to:@return

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [110] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [111] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [112] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [113] conio_cursor_x = gotoxy::x#2
  [114] conio_cursor_y = gotoxy::y#4
  [115] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [116] gotoxy::$8 = gotoxy::$7 << 2
  [117] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [118] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [119] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [120] conio_line_text = gotoxy::$5
  [121] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [122] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [123] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [124] conio_line_text = conio_line_text + $28
  [125] conio_line_color = conio_line_color + $28
  [126] conio_cursor_x = 0
  [127] conio_cursor_y = ++ conio_cursor_y
  [128] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [129] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [130] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [131] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [131] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [131] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [132] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [133] conio_cursor_x = 0
  [134] conio_cursor_y = 0
  [135] conio_line_text = DEFAULT_SCREEN
  [136] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [137] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [138] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [139] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [140] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [141] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [142] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [143] clrscr::line_text#5[clrscr::c#2] = ' '
  [144] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [145] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@1 main::@10 main::@12 main::@13 main::@14 main::@16 main::@18 main::@19 main::@2 main::@20 main::@22 main::@24 main::@25 main::@26 main::@28 main::@30 main::@4 main::@6 main::@7 main::@8 printf_number_buffer::@2
  [146] printf_str::putc#23 = phi( main::@1/&cputc, main::@10/&cputc, main::@12/&cputc, main::@13/&cputc, main::@14/&cputc, main::@16/&cputc, main::@18/&cputc, main::@19/&cputc, main::@2/&cputc, main::@20/&cputc, main::@22/&cputc, main::@24/&cputc, main::@25/&cputc, main::@26/&cputc, main::@28/&cputc, main::@30/&cputc, main::@4/&cputc, main::@6/&cputc, main::@7/&cputc, main::@8/&cputc, printf_number_buffer::@2/printf_number_buffer::putc#0 )
  [146] printf_str::s#23 = phi( main::@1/main::s, main::@10/main::s2, main::@12/main::s3, main::@13/main::s4, main::@14/main::s9, main::@16/main::s2, main::@18/main::s3, main::@19/main::s12, main::@2/main::s1, main::@20/main::s5, main::@22/main::s2, main::@24/main::s3, main::@25/main::s12, main::@26/main::s9, main::@28/main::s2, main::@30/main::s3, main::@4/main::s2, main::@6/main::s3, main::@7/main::s4, main::@8/main::s5, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [147] printf_str::s#22 = phi( printf_str/printf_str::s#23, printf_str::@2/printf_str::s#0 )
  [148] printf_str::c#1 = *printf_str::s#22
  [149] printf_str::s#0 = ++ printf_str::s#22
  [150] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [151] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [152] stackpush(char) = printf_str::c#1
  [153] callexecute *printf_str::putc#23 
  sideeffect stackpullpadding(1)
  to:printf_str::@1

void printf_sint(void (*putc)(char) , int value , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_sint: scope:[printf_sint]  from main::@11 main::@15 main::@17 main::@21 main::@23 main::@27 main::@29 main::@3 main::@5 main::@9
  [155] printf_sint::value#11 = phi( main::@11/2, main::@15/1, main::@17/1, main::@21/2, main::@23/2, main::@27/2, main::@29/1, main::@3/1, main::@5/2, main::@9/1 )
  [156] *((char *)&printf_buffer) = 0
  [157] if(printf_sint::value#11<0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [158] printf_sint::value#0 = - printf_sint::value#11
  [159] *((char *)&printf_buffer) = '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [160] printf_sint::value#13 = phi( printf_sint::@1/printf_sint::value#0, printf_sint/printf_sint::value#11 )
  [161] utoa::value#1 = (unsigned int)printf_sint::value#13
  [162] call utoa
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [163] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [164] call printf_number_buffer
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [165] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [166] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [167] phi()
  [168] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [169] phi()
  [170] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [171] phi()
  [172] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [173] phi()
  [174] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [175] conio_line_text = conio_line_text - $28
  [176] conio_line_color = conio_line_color - $28
  [177] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [178] return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_sint::@2
  [179] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [180] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [180] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [180] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [180] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [181] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [182] utoa::$11 = (char)utoa::value#2
  [183] *utoa::buffer#11 = DIGITS[utoa::$11]
  [184] utoa::buffer#3 = ++ utoa::buffer#11
  [185] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [186] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [187] utoa::$10 = utoa::digit#2 << 1
  [188] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [189] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [190] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [191] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [191] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [191] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [192] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [193] utoa_append::buffer#0 = utoa::buffer#11
  [194] utoa_append::value#0 = utoa::value#2
  [195] utoa_append::sub#0 = utoa::digit_value#0
  [196] call utoa_append
  [197] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [198] utoa::value#0 = utoa_append::return#0
  [199] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [200] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [201] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [202] stackpush(char) = printf_number_buffer::buffer_sign#0
  [203] callexecute cputc 
  sideeffect stackpullpadding(1)
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [205] phi()
  [206] call printf_str
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [207] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [208] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [208] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [209] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [210] memcpy::src#4 = (char *)memcpy::source#2
  [211] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [212] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [212] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [213] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [214] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [215] *memcpy::dst#2 = *memcpy::src#2
  [216] memcpy::dst#1 = ++ memcpy::dst#2
  [217] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [218] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [218] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [219] memset::end#0 = (char *)memset::str#3 + $28
  [220] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [221] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [222] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [223] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [224] *memset::dst#2 = memset::c#4
  [225] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [226] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [227] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [227] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [228] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [229] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [230] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [231] utoa_append::digit#1 = ++ utoa_append::digit#2
  [232] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1
