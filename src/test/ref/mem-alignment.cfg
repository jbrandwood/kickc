@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte[$100]) bs#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [9] (byte) main::i1#2 ← phi( main::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) main::i1#1 )
  [9] (byte) main::j#2 ← phi( main::@1/(byte/word/signed word/dword/signed dword) $ff main::@2/(byte) main::j#1 )
  [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2)
  [11] (byte) main::j#1 ← -- (byte) main::j#2
  [12] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [13] if((byte) main::i1#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return 
  to:@return
