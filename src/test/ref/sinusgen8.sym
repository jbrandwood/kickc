const nomodify word PI2_u4f12 = $6488
const nomodify word PI_HALF_u4f12 = $1922
const nomodify word PI_u4f12 = $3244
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
word div16u(word div16u::dividend , word div16u::divisor)
label div16u::@1
label div16u::@return
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 return zp[2]:12 37.33333333333333
word div16u::return#2 return zp[2]:12 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
label divr16u::@1
label divr16u::@2
label divr16u::@3
label divr16u::@4
label divr16u::@5
label divr16u::@return
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:15 2500.25
word divr16u::dividend#2 dividend zp[2]:15 4286.142857142857
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:12 15001.5
word divr16u::quotient#2 quotient zp[2]:12 10001.0
word divr16u::quotient#3 quotient zp[2]:12 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:10 7500.75
word divr16u::rem#1 rem zp[2]:10 20002.0
word divr16u::rem#2 rem zp[2]:10 20002.0
word divr16u::rem#4 rem zp[2]:10 20002.0
word divr16u::rem#5 rem zp[2]:10 10001.0
word divr16u::rem#9 rem zp[2]:10 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:12 6020.8
word divr16u::return#2 return zp[2]:12 202.0
void main()
label main::@1
label main::@2
label main::@3
label main::@4
label main::@return
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 5.5
signed byte main::sb
signed byte main::sb#0 reg byte a 22.0
const byte* main::str[3]  = "  "
void* memset(void* memset::str , byte memset::c , word memset::num)
label memset::@1
label memset::@2
label memset::@return
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.0000002E7
label mul8u::@1
label mul8u::@2
label mul8u::@3
label mul8u::@4
label mul8u::@return
byte mul8u::a
byte mul8u::a#0 reg byte x 1.0000001E7
byte mul8u::a#1 reg byte x 36667.33333333333
byte mul8u::a#2 reg byte x 6683334.166666666
byte mul8u::b
byte mul8u::b#0 reg byte a 10001.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:17 200002.0
word mul8u::mb#1 mb zp[2]:17 2.0000002E7
word mul8u::mb#2 mb zp[2]:17 4300000.571428571
word mul8u::res
word mul8u::res#1 res zp[2]:15 2.0000002E7
word mul8u::res#2 res zp[2]:15 5001667.333333333
word mul8u::res#6 res zp[2]:15 1.0000001E7
word mul8u::return
word mul8u::return#2 return zp[2]:15 20002.0
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 zp[2]:15 20002.0
word~ mulu8_sel::$1 zp[2]:15 20002.0
label mulu8_sel::@1
label mulu8_sel::@return
byte mulu8_sel::return
byte mulu8_sel::return#0 reg byte a 2002.0
byte mulu8_sel::return#1 reg byte a 2002.0
byte mulu8_sel::return#10 reg byte a 2002.0
byte mulu8_sel::return#11 reg byte a 2002.0
byte mulu8_sel::return#12 reg byte a 2143.714285714286
byte mulu8_sel::return#2 reg byte a 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 select zp[1]:14 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 reg byte x 1001.0
byte mulu8_sel::v1#1 reg byte x 1001.0
byte mulu8_sel::v1#2 reg byte x 2002.0
byte mulu8_sel::v1#3 reg byte x 1001.0
byte mulu8_sel::v1#4 reg byte x 1001.0
byte mulu8_sel::v1#5 reg byte x 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 reg byte y 2002.0
byte mulu8_sel::v2#1 reg byte y 2002.0
byte mulu8_sel::v2#3 reg byte y 2002.0
byte mulu8_sel::v2#4 reg byte y 2002.0
byte mulu8_sel::v2#5 reg byte y 7002.5
void print_char(byte print_char::ch)
label print_char::@return
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#3 reg byte a 2002.0
byte print_char::ch#4 reg byte a 2002.0
byte print_char::ch#5 reg byte a 112004.0
byte* print_char_cursor
byte* print_char_cursor#10 print_char_cursor zp[2]:8 4000.535714285714
byte* print_char_cursor#29 print_char_cursor zp[2]:8 106103.5
byte* print_char_cursor#45 print_char_cursor zp[2]:8 35.5
void print_cls()
label print_cls::@return
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
void print_schar(signed byte print_schar::b)
label print_schar::@1
label print_schar::@2
label print_schar::@3
label print_schar::@4
label print_schar::@return
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 202.0
signed byte print_schar::b#1 reg byte x 52.33333333333333
signed byte print_schar::b#4 reg byte x 202.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
label print_str::@1
label print_str::@2
label print_str::@3
label print_str::@return
byte* print_str::str
byte* print_str::str#0 str zp[2]:3 20002.0
byte* print_str::str#2 str zp[2]:3 10001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
label print_uchar::@1
label print_uchar::@return
byte print_uchar::b
byte print_uchar::b#0 reg byte x 525.75
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 zp[2]:10 2002.0
label sin8s::@1
label sin8s::@10
label sin8s::@11
label sin8s::@12
label sin8s::@13
label sin8s::@14
label sin8s::@2
label sin8s::@3
label sin8s::@4
label sin8s::@5
label sin8s::@6
label sin8s::@7
label sin8s::@8
label sin8s::@9
label sin8s::@return
const nomodify byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#10 isUpper zp[1]:5 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 reg byte a 202.0
signed byte sin8s::return#1 reg byte a 701.0
signed byte sin8s::return#5 reg byte a 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 reg byte a 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 usinx zp[1]:21 166.83333333333334
byte sin8s::usinx#1 reg byte x 2002.0
byte sin8s::usinx#2 reg byte x 2002.0
byte sin8s::usinx#4 reg byte x 1001.0
word sin8s::x
word sin8s::x#0 x zp[2]:10 1552.0
word sin8s::x#1 x zp[2]:10 2002.0
word sin8s::x#2 x zp[2]:10 2002.0
word sin8s::x#4 x zp[2]:10 2502.5
word sin8s::x#6 x zp[2]:10 3003.0
byte sin8s::x1
byte sin8s::x1#0 x1 zp[1]:19 318.5
byte sin8s::x2
byte sin8s::x2#0 reg byte a 2002.0
byte sin8s::x3
byte sin8s::x3#0 x3 zp[1]:20 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 reg byte a 2002.0
byte sin8s::x4
byte sin8s::x4#0 reg byte a 2002.0
byte sin8s::x5
byte sin8s::x5#0 reg byte a 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 reg byte a 2002.0
void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
signed byte~ sin8s_gen::$2 reg byte a 202.0
label sin8s_gen::@1
label sin8s_gen::@2
label sin8s_gen::@3
label sin8s_gen::@4
label sin8s_gen::@return
word sin8s_gen::i
word sin8s_gen::i#1 i zp[2]:3 202.0
word sin8s_gen::i#2 i zp[2]:3 33.666666666666664
signed byte* sin8s_gen::sintab
signed byte* sin8s_gen::sintab#0 sintab zp[2]:8 67.33333333333333
signed byte* sin8s_gen::sintab#2 sintab zp[2]:8 43.285714285714285
word sin8s_gen::step
word sin8s_gen::step#0 step zp[2]:12 10.181818181818182
word sin8s_gen::wavelength
word sin8s_gen::x
word sin8s_gen::x#1 x zp[2]:6 101.0
word sin8s_gen::x#2 x zp[2]:6 37.875
const signed byte* sintab2[$c0]  = { fill( $c0, 0) }
const byte* sintabref[]  = { 0, 4, 8, $c, $11, $15, $19, $1d, $21, $25, $29, $2d, $31, $35, $38, $3c, $40, $43, $47, $4a, $4e, $51, $54, $57, $5a, $5d, $60, $63, $65, $68, $6a, $6c, $6e, $70, $72, $74, $76, $77, $79, $7a, $7b, $7c, $7d, $7e, $7e, $7f, $7f, $7f, $80, $7f, $7f, $7f, $7e, $7e, $7d, $7c, $7b, $7a, $79, $77, $76, $74, $72, $70, $6e, $6c, $6a, $68, $65, $63, $60, $5d, $5a, $57, $54, $51, $4e, $4a, $47, $43, $40, $3c, $38, $35, $31, $2d, $29, $25, $21, $1d, $19, $15, $11, $c, 8, 4, 0, $fc, $f8, $f4, $ef, $eb, $e7, $e3, $df, $db, $d7, $d3, $cf, $cb, $c8, $c4, $c0, $bd, $b9, $b6, $b2, $af, $ac, $a9, $a6, $a3, $a0, $9d, $9b, $98, $96, $94, $92, $90, $8e, $8c, $8a, $89, $87, $86, $85, $84, $83, $82, $82, $81, $81, $81, $81, $81, $81, $81, $82, $82, $83, $84, $85, $86, $87, $89, $8a, $8c, $8e, $90, $92, $94, $96, $98, $9b, $9d, $a0, $a3, $a6, $a9, $ac, $af, $b2, $b6, $b9, $bd, $c0, $c4, $c8, $cb, $cf, $d3, $d7, $db, $df, $e3, $e7, $eb, $ef, $f4, $f8, $fc }
const word wavelength = $c0

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:3 [ print_str::str#2 print_str::str#0 sin8s_gen::i#2 sin8s_gen::i#1 ]
zp[1]:5 [ sin8s::isUpper#10 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 sin8s_gen::x#2 sin8s_gen::x#1 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:8 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp[2]:10 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
zp[2]:12 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:14 [ mulu8_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:15 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 divr16u::dividend#2 divr16u::dividend#0 ]
zp[2]:17 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte a [ main::sb#0 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
reg byte x [ print_uchar::b#0 ]
zp[1]:19 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:20 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:21 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
