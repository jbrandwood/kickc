Fixing pointer increment (signed word*) main::pos_ptr ← ++ (signed word*) main::pos_ptr
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (signed word*) main::pos_ptr#0 ← (signed word*)(number) $400
  (byte*) main::vram_ptr#0 ← (byte*)(number) $428
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte*) main::vram_ptr#3 ← phi( main/(byte*) main::vram_ptr#0 main::@1/(byte*) main::vram_ptr#2 )
  (signed word*) main::pos_ptr#2 ← phi( main/(signed word*) main::pos_ptr#0 main::@1/(signed word*) main::pos_ptr#1 )
  *((signed word*) main::pos_ptr#2) ← (signed word)(number) $55aa
  (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word)(number) $aa55
  (byte~) main::$1 ← < (signed word~) main::$0
  *((byte*) main::vram_ptr#3) ← (byte~) main::$1
  (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3
  (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2)
  *((byte*) main::vram_ptr#1) ← (byte~) main::$2
  (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1
  (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,2)
  (bool~) main::$3 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) main()
(signed word~) main::$0
(byte~) main::$1
(byte~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(signed word*) main::pos_ptr
(signed word*) main::pos_ptr#0
(signed word*) main::pos_ptr#1
(signed word*) main::pos_ptr#2
(byte*) main::vram_ptr
(byte*) main::vram_ptr#0
(byte*) main::vram_ptr#1
(byte*) main::vram_ptr#2
(byte*) main::vram_ptr#3

Simplifying constant pointer cast (signed word*) 1024
Simplifying constant pointer cast (byte*) 1064
Simplifying constant integer cast $55aa
Simplifying constant integer cast $aa55
Successful SSA optimization PassNCastSimplification
Simple Condition (bool~) main::$3 [15] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const signed word*) main::pos_ptr#0 = (signed word*) 1024
Constant (const byte*) main::vram_ptr#0 = (byte*) 1064
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [13] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [15] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Adding number conversion cast (unumber) 3 in if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const signed word*) main::pos_ptr#0
Inlining constant with var siblings (const byte*) main::vram_ptr#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::vram_ptr#0 = (byte*) 1064
Constant inlined main::i#0 = (byte) 0
Constant inlined main::pos_ptr#0 = (signed word*) 1024
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [19] main::pos_ptr#3 ← main::pos_ptr#1
Coalesced [20] main::vram_ptr#4 ← main::vram_ptr#2
Coalesced [21] main::i#3 ← main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [5] (byte*) main::vram_ptr#3 ← phi( main/(byte*) 1064 main::@1/(byte*) main::vram_ptr#2 )
  [5] (signed word*) main::pos_ptr#2 ← phi( main/(signed word*) 1024 main::@1/(signed word*) main::pos_ptr#1 )
  [6] *((signed word*) main::pos_ptr#2) ← (signed word) $55aa
  [7] (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word) $aa55
  [8] (byte~) main::$1 ← < (signed word~) main::$0
  [9] *((byte*) main::vram_ptr#3) ← (byte~) main::$1
  [10] (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3
  [11] (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2)
  [12] *((byte*) main::vram_ptr#1) ← (byte~) main::$2
  [13] (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1
  [14] (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD
  [15] (byte) main::i#1 ← ++ (byte) main::i#2
  [16] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed word~) main::$0 202.0
(byte~) main::$1 202.0
(byte~) main::$2 202.0
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 20.2
(signed word*) main::pos_ptr
(signed word*) main::pos_ptr#1 67.33333333333333
(signed word*) main::pos_ptr#2 56.11111111111111
(byte*) main::vram_ptr
(byte*) main::vram_ptr#1 101.0
(byte*) main::vram_ptr#2 50.5
(byte*) main::vram_ptr#3 60.599999999999994

Initial phi equivalence classes
[ main::pos_ptr#2 main::pos_ptr#1 ]
[ main::vram_ptr#3 main::vram_ptr#2 ]
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::vram_ptr#1 to live range equivalence class [ main::vram_ptr#1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::pos_ptr#2 main::pos_ptr#1 ]
[ main::vram_ptr#3 main::vram_ptr#2 ]
[ main::i#2 main::i#1 ]
[ main::$0 ]
[ main::$1 ]
[ main::vram_ptr#1 ]
[ main::$2 ]
Allocated zp[2]:2 [ main::pos_ptr#2 main::pos_ptr#1 ]
Allocated zp[2]:4 [ main::vram_ptr#3 main::vram_ptr#2 ]
Allocated zp[1]:6 [ main::i#2 main::i#1 ]
Allocated zp[2]:7 [ main::$0 ]
Allocated zp[1]:9 [ main::$1 ]
Allocated zp[2]:10 [ main::vram_ptr#1 ]
Allocated zp[1]:12 [ main::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test binary ANDing pointers by Clay Cowgill
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = 7
    .label __1 = 9
    .label __2 = $c
    .label vram_ptr = $a
    .label vram_ptr_1 = 4
    .label pos_ptr = 2
    .label i = 6
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [5] phi (byte*) main::vram_ptr#3 = (byte*) 1064 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$428
    sta.z vram_ptr_1
    lda #>$428
    sta.z vram_ptr_1+1
    // [5] phi (signed word*) main::pos_ptr#2 = (signed word*) 1024 [phi:main->main::@1#2] -- pwsz1=pwsc1 
    lda #<$400
    sta.z pos_ptr
    lda #>$400
    sta.z pos_ptr+1
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [5] phi (byte*) main::vram_ptr#3 = (byte*) main::vram_ptr#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [5] phi (signed word*) main::pos_ptr#2 = (signed word*) main::pos_ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] *((signed word*) main::pos_ptr#2) ← (signed word) $55aa -- _deref_pwsz1=vwsc1 
    ldy #0
    lda #<$55aa
    sta (pos_ptr),y
    iny
    lda #>$55aa
    sta (pos_ptr),y
    // [7] (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word) $aa55 -- vwsz1=_deref_pwsz2_band_vwsc1 
    ldy #0
    lda (pos_ptr),y
    and #<$aa55
    sta.z __0
    iny
    lda (pos_ptr),y
    and #>$aa55
    sta.z __0+1
    // [8] (byte~) main::$1 ← < (signed word~) main::$0 -- vbuz1=_lo_vwsz2 
    lda.z __0
    sta.z __1
    // [9] *((byte*) main::vram_ptr#3) ← (byte~) main::$1 -- _deref_pbuz1=vbuz2 
    lda.z __1
    ldy #0
    sta (vram_ptr_1),y
    // [10] (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3 -- pbuz1=_inc_pbuz2 
    lda.z vram_ptr_1
    clc
    adc #1
    sta.z vram_ptr
    lda.z vram_ptr_1+1
    adc #0
    sta.z vram_ptr+1
    // [11] (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2) -- vbuz1=_hi__deref_pwsz2 
    ldy #1
    lda (pos_ptr),y
    sta.z __2
    // [12] *((byte*) main::vram_ptr#1) ← (byte~) main::$2 -- _deref_pbuz1=vbuz2 
    // stores 0x00
    lda.z __2
    ldy #0
    sta (vram_ptr),y
    // [13] (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1 -- pbuz1=_inc_pbuz2 
    lda.z vram_ptr
    clc
    adc #1
    sta.z vram_ptr_1
    lda.z vram_ptr+1
    adc #0
    sta.z vram_ptr_1+1
    // [14] (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z pos_ptr
    sta.z pos_ptr
    bcc !+
    inc.z pos_ptr+1
  !:
    // [15] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [16] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((signed word*) main::pos_ptr#2) ← (signed word) $55aa [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] ( main:2 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ main::i#2 main::i#1 ]
Statement [7] (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word) $aa55 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 main::$0 ] ( main:2 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 main::$0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *((byte*) main::vram_ptr#3) ← (byte~) main::$1 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] ( main:2 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] { }  ) always clobbers reg byte y 
Statement [10] (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] { }  ) always clobbers reg byte a 
Statement [11] (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2) [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 main::$2 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 main::$2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] *((byte*) main::vram_ptr#1) ← (byte~) main::$2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] { }  ) always clobbers reg byte y 
Statement [13] (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1 [ main::pos_ptr#2 main::i#2 main::vram_ptr#2 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#2 ] { }  ) always clobbers reg byte a 
Statement [14] (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD [ main::i#2 main::pos_ptr#1 main::vram_ptr#2 ] ( main:2 [ main::i#2 main::pos_ptr#1 main::vram_ptr#2 ] { }  ) always clobbers reg byte a 
Statement [6] *((signed word*) main::pos_ptr#2) ← (signed word) $55aa [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] ( main:2 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [7] (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word) $aa55 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 main::$0 ] ( main:2 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 main::$0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *((byte*) main::vram_ptr#3) ← (byte~) main::$1 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] ( main:2 [ main::pos_ptr#2 main::vram_ptr#3 main::i#2 ] { }  ) always clobbers reg byte y 
Statement [10] (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] { }  ) always clobbers reg byte a 
Statement [11] (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2) [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 main::$2 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 main::$2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] *((byte*) main::vram_ptr#1) ← (byte~) main::$2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#1 ] { }  ) always clobbers reg byte y 
Statement [13] (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1 [ main::pos_ptr#2 main::i#2 main::vram_ptr#2 ] ( main:2 [ main::pos_ptr#2 main::i#2 main::vram_ptr#2 ] { }  ) always clobbers reg byte a 
Statement [14] (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD [ main::i#2 main::pos_ptr#1 main::vram_ptr#2 ] ( main:2 [ main::i#2 main::pos_ptr#1 main::vram_ptr#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::pos_ptr#2 main::pos_ptr#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::vram_ptr#3 main::vram_ptr#2 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ main::i#2 main::i#1 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ main::$0 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ main::$1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:10 [ main::vram_ptr#1 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ main::$2 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 202: zp[2]:7 [ main::$0 ] 202: zp[1]:9 [ main::$1 ] 202: zp[1]:12 [ main::$2 ] 171.7: zp[1]:6 [ main::i#2 main::i#1 ] 123.44: zp[2]:2 [ main::pos_ptr#2 main::pos_ptr#1 ] 111.1: zp[2]:4 [ main::vram_ptr#3 main::vram_ptr#2 ] 101: zp[2]:10 [ main::vram_ptr#1 ] 
Uplift Scope [] 

Uplifting [main] best 1643 combination zp[2]:7 [ main::$0 ] reg byte a [ main::$1 ] reg byte a [ main::$2 ] reg byte x [ main::i#2 main::i#1 ] zp[2]:2 [ main::pos_ptr#2 main::pos_ptr#1 ] zp[2]:4 [ main::vram_ptr#3 main::vram_ptr#2 ] zp[2]:10 [ main::vram_ptr#1 ] 
Uplifting [] best 1643 combination 
Coalescing zero page register [ zp[2]:4 [ main::vram_ptr#3 main::vram_ptr#2 ] ] with [ zp[2]:10 [ main::vram_ptr#1 ] ] - score: 2
Allocated (was zp[2]:7) zp[2]:6 [ main::$0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test binary ANDing pointers by Clay Cowgill
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = 6
    .label vram_ptr = 4
    .label pos_ptr = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) main::vram_ptr#3 = (byte*) 1064 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$428
    sta.z vram_ptr
    lda #>$428
    sta.z vram_ptr+1
    // [5] phi (signed word*) main::pos_ptr#2 = (signed word*) 1024 [phi:main->main::@1#2] -- pwsz1=pwsc1 
    lda #<$400
    sta.z pos_ptr
    lda #>$400
    sta.z pos_ptr+1
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [5] phi (byte*) main::vram_ptr#3 = (byte*) main::vram_ptr#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [5] phi (signed word*) main::pos_ptr#2 = (signed word*) main::pos_ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] *((signed word*) main::pos_ptr#2) ← (signed word) $55aa -- _deref_pwsz1=vwsc1 
    ldy #0
    lda #<$55aa
    sta (pos_ptr),y
    iny
    lda #>$55aa
    sta (pos_ptr),y
    // [7] (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word) $aa55 -- vwsz1=_deref_pwsz2_band_vwsc1 
    ldy #0
    lda (pos_ptr),y
    and #<$aa55
    sta.z __0
    iny
    lda (pos_ptr),y
    and #>$aa55
    sta.z __0+1
    // [8] (byte~) main::$1 ← < (signed word~) main::$0 -- vbuaa=_lo_vwsz1 
    lda.z __0
    // [9] *((byte*) main::vram_ptr#3) ← (byte~) main::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (vram_ptr),y
    // [10] (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3 -- pbuz1=_inc_pbuz1 
    inc.z vram_ptr
    bne !+
    inc.z vram_ptr+1
  !:
    // [11] (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2) -- vbuaa=_hi__deref_pwsz1 
    ldy #1
    lda (pos_ptr),y
    // [12] *((byte*) main::vram_ptr#1) ← (byte~) main::$2 -- _deref_pbuz1=vbuaa 
    // stores 0x00
    ldy #0
    sta (vram_ptr),y
    // [13] (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1 -- pbuz1=_inc_pbuz1 
    inc.z vram_ptr
    bne !+
    inc.z vram_ptr+1
  !:
    // [14] (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z pos_ptr
    sta.z pos_ptr
    bcc !+
    inc.z pos_ptr+1
  !:
    // [15] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [16] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) main()
(signed word~) main::$0 zp[2]:6 202.0
(byte~) main::$1 reg byte a 202.0
(byte~) main::$2 reg byte a 202.0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 20.2
(signed word*) main::pos_ptr
(signed word*) main::pos_ptr#1 pos_ptr zp[2]:2 67.33333333333333
(signed word*) main::pos_ptr#2 pos_ptr zp[2]:2 56.11111111111111
(byte*) main::vram_ptr
(byte*) main::vram_ptr#1 vram_ptr zp[2]:4 101.0
(byte*) main::vram_ptr#2 vram_ptr zp[2]:4 50.5
(byte*) main::vram_ptr#3 vram_ptr zp[2]:4 60.599999999999994

zp[2]:2 [ main::pos_ptr#2 main::pos_ptr#1 ]
zp[2]:4 [ main::vram_ptr#3 main::vram_ptr#2 main::vram_ptr#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp[2]:6 [ main::$0 ]
reg byte a [ main::$1 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 1431

  // File Comments
// Test binary ANDing pointers by Clay Cowgill
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label __0 = 6
    .label vram_ptr = 4
    .label pos_ptr = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte*) main::vram_ptr#3 = (byte*) 1064 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$428
    sta.z vram_ptr
    lda #>$428
    sta.z vram_ptr+1
    // [5] phi (signed word*) main::pos_ptr#2 = (signed word*) 1024 [phi:main->main::@1#2] -- pwsz1=pwsc1 
    lda #<$400
    sta.z pos_ptr
    lda #>$400
    sta.z pos_ptr+1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [5] phi (byte*) main::vram_ptr#3 = (byte*) main::vram_ptr#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [5] phi (signed word*) main::pos_ptr#2 = (signed word*) main::pos_ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    // main::@1
  __b1:
    // *pos_ptr=(int)0x55AA
    // [6] *((signed word*) main::pos_ptr#2) ← (signed word) $55aa -- _deref_pwsz1=vwsc1 
    ldy #0
    lda #<$55aa
    sta (pos_ptr),y
    iny
    lda #>$55aa
    sta (pos_ptr),y
    // *pos_ptr&(int)0xAA55
    // [7] (signed word~) main::$0 ← *((signed word*) main::pos_ptr#2) & (signed word) $aa55 -- vwsz1=_deref_pwsz2_band_vwsc1 
    ldy #0
    lda (pos_ptr),y
    and #<$aa55
    sta.z __0
    iny
    lda (pos_ptr),y
    and #>$aa55
    sta.z __0+1
    // <(*pos_ptr&(int)0xAA55)
    // [8] (byte~) main::$1 ← < (signed word~) main::$0 -- vbuaa=_lo_vwsz1 
    lda.z __0
    // *vram_ptr++=<(*pos_ptr&(int)0xAA55)
    // [9] *((byte*) main::vram_ptr#3) ← (byte~) main::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (vram_ptr),y
    // *vram_ptr++=<(*pos_ptr&(int)0xAA55);
    // [10] (byte*) main::vram_ptr#1 ← ++ (byte*) main::vram_ptr#3 -- pbuz1=_inc_pbuz1 
    inc.z vram_ptr
    bne !+
    inc.z vram_ptr+1
  !:
    // >*pos_ptr
    // [11] (byte~) main::$2 ← > *((signed word*) main::pos_ptr#2) -- vbuaa=_hi__deref_pwsz1 
    ldy #1
    lda (pos_ptr),y
    // *vram_ptr++=>*pos_ptr
    // [12] *((byte*) main::vram_ptr#1) ← (byte~) main::$2 -- _deref_pbuz1=vbuaa 
    // stores 0x00
    ldy #0
    sta (vram_ptr),y
    // *vram_ptr++=>*pos_ptr;
    // [13] (byte*) main::vram_ptr#2 ← ++ (byte*) main::vram_ptr#1 -- pbuz1=_inc_pbuz1 
    inc.z vram_ptr
    bne !+
    inc.z vram_ptr+1
  !:
    // pos_ptr++;
    // [14] (signed word*) main::pos_ptr#1 ← (signed word*) main::pos_ptr#2 + (const byte) SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z pos_ptr
    sta.z pos_ptr
    bcc !+
    inc.z pos_ptr+1
  !:
    // for( char i:0..2)
    // [15] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [16] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne __b1
    // main::@return
    // }
    // [17] return 
    rts
}
  // File Data

