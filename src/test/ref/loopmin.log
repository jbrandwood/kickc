Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (number) $a
  (byte) main::s#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#3 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$0 ← (byte) main::i#2 > (number) 5
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#3 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (bool~) main::$3 ← (byte) main::i#1 > (number) 0
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::s#2 ← phi( main::@1/(byte) main::s#3 )
  (byte~) main::$2 ← (byte) main::s#2 + (byte) main::i#4
  (byte) main::s#1 ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(bool~) main::$1
(byte~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4

Adding number conversion cast (unumber) $a in (byte) main::i#0 ← (number) $a
Adding number conversion cast (unumber) 0 in (byte) main::s#0 ← (number) 0
Adding number conversion cast (unumber) 5 in (bool~) main::$0 ← (byte) main::i#2 > (number) 5
Adding number conversion cast (unumber) 0 in (bool~) main::$3 ← (byte) main::i#1 > (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::i#0 ← (unumber)(number) $a
Inlining cast (byte) main::s#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [4] (bool~) main::$1 ← (byte) main::i#2 <= (byte) 5 from [3] (bool~) main::$0 ← (byte) main::i#2 > (byte) 5
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::s#2 = (byte) main::s#3 
Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte) main::s#1 = (byte~) main::$2 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::i#2 = (byte) main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [5] if((byte) main::i#2<=(byte) 5) goto main::@2
Simple Condition (bool~) main::$3 [9] if((byte) main::i#1>(byte) 0) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = $a
Constant (const byte) main::s#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Rewriting conditional comparison [5] if((byte) main::i#2<=(byte) 5) goto main::@2
GRAPH (NEW VERSIONS for main::i#2)
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [0] (byte) main::s#2 ← phi( main/(const byte) main::s#0 main::@2/(byte) main::s#4 )
  [0] (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@2/(byte) main::i#1 )
  [1] if((byte) main::i#2<(byte) 5+(number) 1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  [2] (byte) main::i#5 ← phi( )
  [2] (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  [3] (byte) main::i#1 ← -- (byte) main::i#5
  [4] if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#6 ← phi( )
  [5] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#6
  to:main::@2
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return
@1: scope:[]  from @begin
  [7] call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

GRAPH (NEW VERSIONS for main::s#2)
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [0] (byte) main::s#2 ← phi( main/(const byte) main::s#0 main::@2/(byte) main::s#4 )
  [0] (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@2/(byte) main::i#1 )
  [1] if((byte) main::i#2<(byte) 5+(number) 1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  [2] (byte) main::i#5 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#6 )
  [2] (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 )
  [3] (byte) main::i#1 ← -- (byte) main::i#5
  [4] if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::s#5 ← phi( )
  (byte) main::i#6 ← phi( main::@1/(byte) main::i#2 )
  [5] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6
  to:main::@2
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return
@1: scope:[]  from @begin
  [7] call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Successful SSA optimization Pass2LoopHeadConstantIdentification
Adding number conversion cast (unumber) 5+1 in if((byte) main::i#2<(byte) 5+(number) 1) goto main::@2
Adding number conversion cast (unumber) 1 in if((byte) main::i#2<(unumber)(byte) 5+(number) 1) goto main::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) 5+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) main::i#1 = (byte) main::i#2 
Alias (byte) main::s#2 = (byte) main::s#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::i#7 (const byte) main::i#0
Identical Phi Values (byte) main::s#6 (const byte) main::s#0
Successful SSA optimization Pass2IdenticalPhiElimination
Removing PHI-reference to removed block (main::@1_1) in block main::@2
Removing PHI-reference to removed block (main::@1_1) in block main::@2
if() condition always false - eliminating [10] if((const byte) main::i#0<(byte) 5+(byte) 1) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Identical Phi Values (byte) main::s#2 (byte) main::s#1
Successful SSA optimization Pass2IdenticalPhiElimination
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::s#0
Constant inlined main::i#0 = (byte) $a
Constant inlined main::s#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@1 and main::@2)
Added new block during phi lifting main::@6(between main::@1 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1_1
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [9] main::i#9 ← main::i#6
Coalesced [15] main::i#10 ← main::i#1
Coalesced [16] main::s#7 ← main::s#1
Coalesced (already) [17] main::i#8 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@1_1
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@3
main::@3: scope:[main]  from main main::@1
  [5] (byte) main::s#5 ← phi( main::@1/(byte) main::s#1 main/(byte) 0 )
  [5] (byte) main::i#6 ← phi( main::@1/(byte) main::i#1 main/(byte) $a )
  [6] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [7] (byte) main::i#5 ← phi( main::@1/(byte) main::i#1 main::@3/(byte) main::i#6 )
  [8] (byte) main::i#1 ← -- (byte) main::i#5
  [9] if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return
main::@1: scope:[main]  from main::@2
  [11] if((byte) main::i#1<(byte) 5+(byte) 1) goto main::@2
  to:main::@3


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 168.33333333333331
(byte) main::i#5 213.0
(byte) main::i#6 61.5
(byte) main::s
(byte) main::s#1 22.4
(byte) main::s#5 112.0

Initial phi equivalence classes
[ main::s#5 main::s#1 ]
[ main::i#5 main::i#6 main::i#1 ]
Complete equivalence classes
[ main::s#5 main::s#1 ]
[ main::i#5 main::i#6 main::i#1 ]
Allocated zp ZP_BYTE:2 [ main::s#5 main::s#1 ]
Allocated zp ZP_BYTE:3 [ main::i#5 main::i#6 main::i#1 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label i = 3
    .label s = 2
    // [5] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    // [5] phi (byte) main::s#5 = (byte) 0 [phi:main->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta s
    // [5] phi (byte) main::i#6 = (byte) $a [phi:main->main::@3#1] -- vbuz1=vbuc1 
    lda #$a
    sta i
    jmp b3
    // main::@3
  b3:
    // [6] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6 -- vbuz1=vbuz1_plus_vbuz2 
    lda s
    clc
    adc i
    sta s
    // [7] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
    // [7] phi (byte) main::i#5 = (byte) main::i#1 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [8] (byte) main::i#1 ← -- (byte) main::i#5 -- vbuz1=_dec_vbuz1 
    dec i
    // [9] if((byte) main::i#1>(byte) 0) goto main::@1 -- vbuz1_gt_0_then_la1 
    lda i
    bne b1
    jmp breturn
    // main::@return
  breturn:
    // [10] return 
    rts
    // main::@1
  b1:
    // [11] if((byte) main::i#1<(byte) 5+(byte) 1) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda i
    cmp #5+1
    bcc b2_from_b1
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    // [5] phi (byte) main::s#5 = (byte) main::s#1 [phi:main::@1->main::@3#0] -- register_copy 
    // [5] phi (byte) main::i#6 = (byte) main::i#1 [phi:main::@1->main::@3#1] -- register_copy 
    jmp b3
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6 [ main::i#6 main::s#1 ] ( main:2 [ main::i#6 main::s#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::i#5 main::i#6 main::i#1 ]
Statement [6] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6 [ main::i#6 main::s#1 ] ( main:2 [ main::i#6 main::s#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::s#5 main::s#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::i#5 main::i#6 main::i#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 442.83: zp ZP_BYTE:3 [ main::i#5 main::i#6 main::i#1 ] 134.4: zp ZP_BYTE:2 [ main::s#5 main::s#1 ] 
Uplift Scope [] 

Uplifting [main] best 1898 combination reg byte x [ main::i#5 main::i#6 main::i#1 ] reg byte a [ main::s#5 main::s#1 ] 
Uplifting [] best 1898 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    // [5] phi (byte) main::s#5 = (byte) 0 [phi:main->main::@3#0] -- vbuaa=vbuc1 
    lda #0
    // [5] phi (byte) main::i#6 = (byte) $a [phi:main->main::@3#1] -- vbuxx=vbuc1 
    ldx #$a
    jmp b3
    // main::@3
  b3:
    // [6] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6 -- vbuaa=vbuaa_plus_vbuxx 
    stx $ff
    clc
    adc $ff
    // [7] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
    // [7] phi (byte) main::i#5 = (byte) main::i#1 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [8] (byte) main::i#1 ← -- (byte) main::i#5 -- vbuxx=_dec_vbuxx 
    dex
    // [9] if((byte) main::i#1>(byte) 0) goto main::@1 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b1
    jmp breturn
    // main::@return
  breturn:
    // [10] return 
    rts
    // main::@1
  b1:
    // [11] if((byte) main::i#1<(byte) 5+(byte) 1) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #5+1
    bcc b2_from_b1
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    // [5] phi (byte) main::s#5 = (byte) main::s#1 [phi:main::@1->main::@3#0] -- register_copy 
    // [5] phi (byte) main::i#6 = (byte) main::i#1 [phi:main::@1->main::@3#1] -- register_copy 
    jmp b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b2_from_b1 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b3_from_main:
Removing instruction breturn:
Removing instruction b3_from_b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 168.33333333333331
(byte) main::i#5 reg byte x 213.0
(byte) main::i#6 reg byte x 61.5
(byte) main::s
(byte) main::s#1 reg byte a 22.4
(byte) main::s#5 reg byte a 112.0

reg byte a [ main::s#5 main::s#1 ]
reg byte x [ main::i#5 main::i#6 main::i#1 ]


FINAL ASSEMBLER
Score: 1256

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@3 [phi:main->main::@3]
    // [5] phi (byte) main::s#5 = (byte) 0 [phi:main->main::@3#0] -- vbuaa=vbuc1 
    lda #0
    // [5] phi (byte) main::i#6 = (byte) $a [phi:main->main::@3#1] -- vbuxx=vbuc1 
    ldx #$a
    // main::@3
  b3:
    // s=s+i
    // [6] (byte) main::s#1 ← (byte) main::s#5 + (byte) main::i#6 -- vbuaa=vbuaa_plus_vbuxx 
    stx $ff
    clc
    adc $ff
    // [7] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
    // [7] phi (byte) main::i#5 = (byte) main::i#1 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // i--;
    // [8] (byte) main::i#1 ← -- (byte) main::i#5 -- vbuxx=_dec_vbuxx 
    dex
    // while (i>0)
    // [9] if((byte) main::i#1>(byte) 0) goto main::@1 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b1
    // main::@return
    // }
    // [10] return 
    rts
    // main::@1
  b1:
    // if(i>5)
    // [11] if((byte) main::i#1<(byte) 5+(byte) 1) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #5+1
    bcc b2
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [5] phi (byte) main::s#5 = (byte) main::s#1 [phi:main::@1->main::@3#0] -- register_copy 
    // [5] phi (byte) main::i#6 = (byte) main::i#1 [phi:main::@1->main::@3#1] -- register_copy 
    jmp b3
}
  // File Data

