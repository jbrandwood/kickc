Resolved forward reference fn1 to void fn1()

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#3 = phi( main/main::i#0, main::@3/main::i#4 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#2 = phi( main::@1/main::i#3 )
  main::i#1 = ++ main::i#2
  getfn::b#0 = main::i#1
  call getfn 
  getfn::return#0 = getfn::return#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::i#4 = phi( main::@2/main::i#1 )
  getfn::return#3 = phi( main::@2/getfn::return#0 )
  main::$0 = getfn::return#3
  call *main::$0 
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void()* getfn(byte getfn::b)
getfn: scope:[getfn]  from main::@2
  getfn::return#1 = &fn1
  to:getfn::@return
getfn::@return: scope:[getfn]  from getfn
  getfn::return#4 = phi( getfn/getfn::return#1 )
  getfn::return#2 = getfn::return#4
  return 
  to:@return

void fn1()
fn1: scope:[fn1]  from
  *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void fn1()
constant byte* const fn1::BORDER_COLOR = (byte*)$d020
void()* getfn(byte getfn::b)
byte getfn::b
byte getfn::b#0
void()* getfn::return
void()* getfn::return#0
void()* getfn::return#1
void()* getfn::return#2
void()* getfn::return#3
void()* getfn::return#4
void main()
void()*~ main::$0
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4

Simplifying constant pointer cast (byte*) 53280
Successful SSA optimization PassNCastSimplification
Alias main::i#2 = main::i#3 
Alias getfn::return#0 = getfn::return#3 
Alias main::i#1 = main::i#4 
Alias getfn::return#1 = getfn::return#4 getfn::return#2 
Successful SSA optimization Pass2AliasElimination
Constant main::i#0 = 0
Constant getfn::return#1 = &fn1
Successful SSA optimization Pass2ConstantIdentification
Constant getfn::return#0 = getfn::return#1
Successful SSA optimization Pass2ConstantIdentification
Constant main::$0 = getfn::return#0
Successful SSA optimization Pass2ConstantIdentification
Replacing constant pointer function [8] call fn1 
Successful SSA optimization Pass2ConstantCallPointerIdentification
if() condition always true - replacing block destination [2] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable getfn::b#0 and assignment [2] getfn::b#0 = main::i#1
Eliminating unused constant main::$0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant getfn::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant getfn::return#1
Successful SSA optimization PassNEliminateUnusedVars
Removing call to empty procedure [2] call getfn 
Removing unused procedure getfn
Removing unused procedure block getfn
Removing unused procedure block getfn::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [main] to fn1:6 

Created 1 initial phi equivalence classes
Coalesced [7] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

__stackcall void fn1()
fn1: scope:[fn1]  from main::@3
  [0] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [1] return 
  to:@return

void main()
main: scope:[main]  from
  [2] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [3] main::i#2 = phi( main/0, main::@3/main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] main::i#1 = ++ main::i#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] phi()
  [6] call fn1 
  to:main::@1

null depth in calling loop Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@2 main::@1  in scope fn1

VARIABLE REGISTER WEIGHTS
__stackcall void fn1()
void main()
byte main::i
byte main::i#1 7.333333333333333
byte main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 29.33: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [fn1] 
Uplift Scope [] 

Uplifting [main] best 235 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [fn1] best 235 combination 
Uplifting [] best 235 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-noarg-call-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // [0] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __breturn
    // fn1::@return
  __breturn:
    // [1] return 
    rts
}
  // main
main: {
    // [3] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [3] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [4] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [6] call fn1 
    jsr fn1
    // [3] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [3] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1 with __b2
Removing instruction __b1:
Removing instruction __b3_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__stackcall void fn1()
constant byte* const fn1::BORDER_COLOR = (byte*) 53280
void main()
byte main::i
byte main::i#1 reg byte x 7.333333333333333
byte main::i#2 reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 142

  // File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-noarg-call-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // (*BORDER_COLOR)++;
    // [0] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    // fn1::@return
    // }
    // [1] return 
    rts
}
  // main
main: {
    // [3] phi from main to main::@1 [phi:main->main::@1]
    // [3] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
    // main::@2
  __b2:
    // (*getfn(++i))();
    // [4] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // (*getfn(++i))()
    // [6] call fn1 
    jsr fn1
    // [3] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [3] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b2
}
  // File Data

