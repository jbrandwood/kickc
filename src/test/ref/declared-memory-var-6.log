Identified constant variable (byte) main::reg_zp_flex
Identified constant variable (byte) main::reg_zp_abs
Identified constant variable (byte) main::reg_mem_flex
Identified constant variable (byte) main::reg_mem_abs
Identified constant variable (byte) main::default_default
Identified constant variable (byte) main::reg_default
Identified constant variable (byte) main::default_zp_flex
Identified constant variable (byte) main::default_zp_abs
Identified constant variable (byte) main::default_mem_flex
Identified constant variable (byte) main::default_mem_abs
Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) i#0 ← (number) 0
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte) i#39 ← phi( @2/(byte) i#40 )
  (byte) main::notreg_zp_flex ← (byte) '.'
  (byte) main::notreg_zp_abs ← (byte) '.'
  (byte) main::notreg_mem_flex ← (byte) '.'
  (byte) main::notreg_mem_abs ← (byte) '.'
  (byte) main::notreg_default ← (byte) '.'
  (byte) out::c#0 ← (const byte) main::reg_zp_flex
  call out 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) i#20 ← phi( main/(byte) i#18 )
  (byte) i#1 ← (byte) i#20
  (byte) out::c#1 ← (const byte) main::reg_zp_abs
  call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) i#21 ← phi( main::@1/(byte) i#18 )
  (byte) i#2 ← (byte) i#21
  (byte) out::c#2 ← (const byte) main::reg_mem_flex
  call out 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) i#22 ← phi( main::@2/(byte) i#18 )
  (byte) i#3 ← (byte) i#22
  (byte) out::c#3 ← (const byte) main::reg_mem_abs
  call out 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) i#23 ← phi( main::@3/(byte) i#18 )
  (byte) i#4 ← (byte) i#23
  (byte) out::c#4 ← (byte) main::notreg_zp_flex
  call out 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) i#24 ← phi( main::@4/(byte) i#18 )
  (byte) i#5 ← (byte) i#24
  (byte) out::c#5 ← (byte) main::notreg_zp_abs
  call out 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) i#25 ← phi( main::@5/(byte) i#18 )
  (byte) i#6 ← (byte) i#25
  (byte) out::c#6 ← (byte) main::notreg_mem_flex
  call out 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) i#26 ← phi( main::@6/(byte) i#18 )
  (byte) i#7 ← (byte) i#26
  (byte) out::c#7 ← (byte) main::notreg_mem_abs
  call out 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) i#27 ← phi( main::@7/(byte) i#18 )
  (byte) i#8 ← (byte) i#27
  (byte) out::c#8 ← (const byte) main::default_default
  call out 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte) i#28 ← phi( main::@8/(byte) i#18 )
  (byte) i#9 ← (byte) i#28
  (byte) out::c#9 ← (const byte) main::reg_default
  call out 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) i#29 ← phi( main::@9/(byte) i#18 )
  (byte) i#10 ← (byte) i#29
  (byte) out::c#10 ← (byte) main::notreg_default
  call out 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) i#30 ← phi( main::@10/(byte) i#18 )
  (byte) i#11 ← (byte) i#30
  (byte) out::c#11 ← (const byte) main::default_zp_flex
  call out 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte) i#31 ← phi( main::@11/(byte) i#18 )
  (byte) i#12 ← (byte) i#31
  (byte) out::c#12 ← (const byte) main::default_zp_abs
  call out 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) i#32 ← phi( main::@12/(byte) i#18 )
  (byte) i#13 ← (byte) i#32
  (byte) out::c#13 ← (const byte) main::default_mem_flex
  call out 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (byte) i#33 ← phi( main::@13/(byte) i#18 )
  (byte) i#14 ← (byte) i#33
  (byte) out::c#14 ← (const byte) main::default_mem_abs
  call out 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte) i#34 ← phi( main::@14/(byte) i#18 )
  (byte) i#15 ← (byte) i#34
  to:main::@return
main::@return: scope:[main]  from main::@15
  (byte) i#35 ← phi( main::@15/(byte) i#15 )
  (byte) i#16 ← (byte) i#35
  return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main main::@1 main::@10 main::@11 main::@12 main::@13 main::@14 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  (byte) i#36 ← phi( main/(byte) i#39 main::@1/(byte) i#1 main::@10/(byte) i#10 main::@11/(byte) i#11 main::@12/(byte) i#12 main::@13/(byte) i#13 main::@14/(byte) i#14 main::@2/(byte) i#2 main::@3/(byte) i#3 main::@4/(byte) i#4 main::@5/(byte) i#5 main::@6/(byte) i#6 main::@7/(byte) i#7 main::@8/(byte) i#8 main::@9/(byte) i#9 )
  (byte) out::c#15 ← phi( main/(byte) out::c#0 main::@1/(byte) out::c#1 main::@10/(byte) out::c#10 main::@11/(byte) out::c#11 main::@12/(byte) out::c#12 main::@13/(byte) out::c#13 main::@14/(byte) out::c#14 main::@2/(byte) out::c#2 main::@3/(byte) out::c#3 main::@4/(byte) out::c#4 main::@5/(byte) out::c#5 main::@6/(byte) out::c#6 main::@7/(byte) out::c#7 main::@8/(byte) out::c#8 main::@9/(byte) out::c#9 )
  *((const byte*) SCREEN + (byte) i#36) ← (byte) out::c#15
  (byte) i#17 ← ++ (byte) i#36
  to:out::@return
out::@return: scope:[out]  from out
  (byte) i#37 ← phi( out/(byte) i#17 )
  (byte) i#18 ← (byte) i#37
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) i#40 ← phi( @begin/(byte) i#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  (byte) i#38 ← phi( @2/(byte) i#16 )
  (byte) i#19 ← (byte) i#38
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(byte) i
(byte) i#0
(byte) i#1
(byte) i#10
(byte) i#11
(byte) i#12
(byte) i#13
(byte) i#14
(byte) i#15
(byte) i#16
(byte) i#17
(byte) i#18
(byte) i#19
(byte) i#2
(byte) i#20
(byte) i#21
(byte) i#22
(byte) i#23
(byte) i#24
(byte) i#25
(byte) i#26
(byte) i#27
(byte) i#28
(byte) i#29
(byte) i#3
(byte) i#30
(byte) i#31
(byte) i#32
(byte) i#33
(byte) i#34
(byte) i#35
(byte) i#36
(byte) i#37
(byte) i#38
(byte) i#39
(byte) i#4
(byte) i#40
(byte) i#5
(byte) i#6
(byte) i#7
(byte) i#8
(byte) i#9
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte) main::default_default = (byte) '.'
(const byte) main::default_mem_abs !mem[-1]:4096 = (byte) '.'
(const byte) main::default_mem_flex = (byte) '.'
(const byte) main::default_zp_abs !zp[-1]:16 = (byte) '.'
(const byte) main::default_zp_flex = (byte) '.'
(byte) main::notreg_default notregister
(byte) main::notreg_mem_abs notregister !mem[-1]:4096
(byte) main::notreg_mem_flex notregister
(byte) main::notreg_zp_abs notregister !zp[-1]:16
(byte) main::notreg_zp_flex notregister
(const byte) main::reg_default = (byte) '.'
(const byte) main::reg_mem_abs !mem[-1]:4096 = (byte) '.'
(const byte) main::reg_mem_flex = (byte) '.'
(const byte) main::reg_zp_abs !zp[-1]:16 = (byte) '.'
(const byte) main::reg_zp_flex = (byte) '.'
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0
(byte) out::c#1
(byte) out::c#10
(byte) out::c#11
(byte) out::c#12
(byte) out::c#13
(byte) out::c#14
(byte) out::c#15
(byte) out::c#2
(byte) out::c#3
(byte) out::c#4
(byte) out::c#5
(byte) out::c#6
(byte) out::c#7
(byte) out::c#8
(byte) out::c#9

Adding number conversion cast (unumber) 0 in (byte) i#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) i#1 = (byte) i#20 
Alias (byte) i#2 = (byte) i#21 
Alias (byte) i#22 = (byte) i#3 
Alias (byte) i#23 = (byte) i#4 
Alias (byte) i#24 = (byte) i#5 
Alias (byte) i#25 = (byte) i#6 
Alias (byte) i#26 = (byte) i#7 
Alias (byte) i#27 = (byte) i#8 
Alias (byte) i#28 = (byte) i#9 
Alias (byte) i#10 = (byte) i#29 
Alias (byte) i#11 = (byte) i#30 
Alias (byte) i#12 = (byte) i#31 
Alias (byte) i#13 = (byte) i#32 
Alias (byte) i#14 = (byte) i#33 
Alias (byte) i#15 = (byte) i#34 (byte) i#35 (byte) i#16 
Alias (byte) i#17 = (byte) i#37 (byte) i#18 
Alias (byte) i#0 = (byte) i#40 
Alias (byte) i#19 = (byte) i#38 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) i#39 (byte) i#0
Identical Phi Values (byte) i#1 (byte) i#17
Identical Phi Values (byte) i#2 (byte) i#17
Identical Phi Values (byte) i#22 (byte) i#17
Identical Phi Values (byte) i#23 (byte) i#17
Identical Phi Values (byte) i#24 (byte) i#17
Identical Phi Values (byte) i#25 (byte) i#17
Identical Phi Values (byte) i#26 (byte) i#17
Identical Phi Values (byte) i#27 (byte) i#17
Identical Phi Values (byte) i#28 (byte) i#17
Identical Phi Values (byte) i#10 (byte) i#17
Identical Phi Values (byte) i#11 (byte) i#17
Identical Phi Values (byte) i#12 (byte) i#17
Identical Phi Values (byte) i#13 (byte) i#17
Identical Phi Values (byte) i#14 (byte) i#17
Identical Phi Values (byte) i#15 (byte) i#17
Identical Phi Values (byte) i#19 (byte) i#15
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) i#0 = 0
Constant (const byte) out::c#0 = main::reg_zp_flex
Constant (const byte) out::c#1 = main::reg_zp_abs
Constant (const byte) out::c#2 = main::reg_mem_flex
Constant (const byte) out::c#3 = main::reg_mem_abs
Constant (const byte) out::c#8 = main::default_default
Constant (const byte) out::c#9 = main::reg_default
Constant (const byte) out::c#11 = main::default_zp_flex
Constant (const byte) out::c#12 = main::default_zp_abs
Constant (const byte) out::c#13 = main::default_mem_flex
Constant (const byte) out::c#14 = main::default_mem_abs
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) out::c#0
Inlining constant with var siblings (const byte) out::c#1
Inlining constant with var siblings (const byte) out::c#2
Inlining constant with var siblings (const byte) out::c#3
Inlining constant with var siblings (const byte) out::c#8
Inlining constant with var siblings (const byte) out::c#9
Inlining constant with var siblings (const byte) out::c#11
Inlining constant with var siblings (const byte) out::c#12
Inlining constant with var siblings (const byte) out::c#13
Inlining constant with var siblings (const byte) out::c#14
Inlining constant with var siblings (const byte) i#0
Constant inlined out::c#8 = (const byte) main::default_default
Constant inlined out::c#13 = (const byte) main::default_mem_flex
Constant inlined out::c#9 = (const byte) main::reg_default
Constant inlined out::c#14 = (const byte) main::default_mem_abs
Constant inlined i#0 = (byte) 0
Constant inlined out::c#0 = (const byte) main::reg_zp_flex
Constant inlined out::c#1 = (const byte) main::reg_zp_abs
Constant inlined out::c#2 = (const byte) main::reg_mem_flex
Constant inlined out::c#11 = (const byte) main::default_zp_flex
Constant inlined out::c#3 = (const byte) main::reg_mem_abs
Constant inlined out::c#12 = (const byte) main::default_zp_abs
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@15
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to out:10 out:12 out:14 out:16 out:20 out:24 out:28 out:32 out:34 out:36 out:40 out:42 out:44 out:46 out:48 

Created 2 initial phi equivalence classes
Coalesced [11] i#41 ← i#17
Coalesced (already) [13] i#47 ← i#17
Coalesced (already) [15] i#48 ← i#17
Coalesced [18] out::c#17 ← out::c#4
Coalesced (already) [19] i#49 ← i#17
Coalesced [22] out::c#18 ← out::c#5
Coalesced (already) [23] i#50 ← i#17
Coalesced [26] out::c#19 ← out::c#6
Coalesced (already) [27] i#51 ← i#17
Coalesced [30] out::c#20 ← out::c#7
Coalesced (already) [31] i#52 ← i#17
Coalesced (already) [33] i#53 ← i#17
Coalesced (already) [35] i#54 ← i#17
Coalesced [38] out::c#16 ← out::c#10
Coalesced (already) [39] i#42 ← i#17
Coalesced (already) [41] i#43 ← i#17
Coalesced (already) [43] i#44 ← i#17
Coalesced (already) [45] i#45 ← i#17
Coalesced (already) [47] i#46 ← i#17
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@15
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (byte) main::notreg_zp_flex ← (byte) '.'
  [5] (byte) main::notreg_zp_abs ← (byte) '.'
  [6] (byte) main::notreg_mem_flex ← (byte) '.'
  [7] (byte) main::notreg_mem_abs ← (byte) '.'
  [8] (byte) main::notreg_default ← (byte) '.'
  [9] call out 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call out 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call out 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] (byte) out::c#4 ← (byte) main::notreg_zp_flex
  [17] call out 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] (byte) out::c#5 ← (byte) main::notreg_zp_abs
  [19] call out 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] (byte) out::c#6 ← (byte) main::notreg_mem_flex
  [21] call out 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] (byte) out::c#7 ← (byte) main::notreg_mem_abs
  [23] call out 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [24] phi()
  [25] call out 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [26] phi()
  [27] call out 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [28] (byte) out::c#10 ← (byte) main::notreg_default
  [29] call out 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [30] phi()
  [31] call out 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [32] phi()
  [33] call out 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [34] phi()
  [35] call out 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [36] phi()
  [37] call out 
  to:main::@return
main::@return: scope:[main]  from main::@14
  [38] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main main::@1 main::@10 main::@11 main::@12 main::@13 main::@14 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [39] (byte) i#36 ← phi( main/(byte) 0 main::@1/(byte) i#17 main::@10/(byte) i#17 main::@11/(byte) i#17 main::@12/(byte) i#17 main::@13/(byte) i#17 main::@14/(byte) i#17 main::@2/(byte) i#17 main::@3/(byte) i#17 main::@4/(byte) i#17 main::@5/(byte) i#17 main::@6/(byte) i#17 main::@7/(byte) i#17 main::@8/(byte) i#17 main::@9/(byte) i#17 )
  [39] (byte) out::c#15 ← phi( main/(const byte) main::reg_zp_flex main::@1/(const byte) main::reg_zp_abs main::@10/(byte) out::c#10 main::@11/(const byte) main::default_zp_flex main::@12/(const byte) main::default_zp_abs main::@13/(const byte) main::default_mem_flex main::@14/(const byte) main::default_mem_abs main::@2/(const byte) main::reg_mem_flex main::@3/(const byte) main::reg_mem_abs main::@4/(byte) out::c#4 main::@5/(byte) out::c#5 main::@6/(byte) out::c#6 main::@7/(byte) out::c#7 main::@8/(const byte) main::default_default main::@9/(const byte) main::reg_default )
  [40] *((const byte*) SCREEN + (byte) i#36) ← (byte) out::c#15
  [41] (byte) i#17 ← ++ (byte) i#36
  to:out::@return
out::@return: scope:[out]  from out
  [42] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) i
(byte) i#17 0.9999999999999999
(byte) i#36 16.0
(void()) main()
(byte) main::notreg_default notregister 0.2
(byte) main::notreg_mem_abs notregister !mem[-1]:4096 0.26666666666666666
(byte) main::notreg_mem_flex notregister 0.2857142857142857
(byte) main::notreg_zp_abs notregister !zp[-1]:16 0.3076923076923077
(byte) main::notreg_zp_flex notregister 0.3333333333333333
(void()) out((byte) out::c)
(byte) out::c
(byte) out::c#10 4.0
(byte) out::c#15 12.0
(byte) out::c#4 4.0
(byte) out::c#5 4.0
(byte) out::c#6 4.0
(byte) out::c#7 4.0

Initial phi equivalence classes
[ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ]
[ i#36 i#17 ]
Added variable main::notreg_zp_flex to zero page equivalence class [ main::notreg_zp_flex ]
Added variable main::notreg_zp_abs to zero page equivalence class [ main::notreg_zp_abs ]
Added variable main::notreg_mem_flex to zero page equivalence class [ main::notreg_mem_flex ]
Added variable main::notreg_mem_abs to zero page equivalence class [ main::notreg_mem_abs ]
Added variable main::notreg_default to zero page equivalence class [ main::notreg_default ]
Complete equivalence classes
[ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ]
[ i#36 i#17 ]
[ main::notreg_zp_flex ]
[ main::notreg_zp_abs ]
[ main::notreg_mem_flex ]
[ main::notreg_mem_abs ]
[ main::notreg_default ]
Allocated zp[1]:2 [ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ]
Allocated zp[1]:3 [ i#36 i#17 ]
Allocated zp[1]:4 [ main::notreg_zp_flex ]
Allocated mem[1] [ main::notreg_mem_flex ]
Allocated zp[1]:5 [ main::notreg_default ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label i = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const reg_zp_flex = '.'
    .const reg_zp_abs = '.'
    .const reg_mem_flex = '.'
    .const reg_mem_abs = '.'
    .const default_default = '.'
    .const reg_default = '.'
    .const default_zp_flex = '.'
    .const default_zp_abs = '.'
    .const default_mem_flex = '.'
    .const default_mem_abs = '.'
    .label notreg_zp_flex = 4
    .label notreg_zp_abs = $10
    .label notreg_mem_abs = $1000
    .label notreg_default = 5
    // [4] (byte) main::notreg_zp_flex ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_zp_flex
    // [5] (byte) main::notreg_zp_abs ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_zp_abs
    // [6] (byte) main::notreg_mem_flex ← (byte) '.' -- vbum1=vbuc1 
    lda #'.'
    sta notreg_mem_flex
    // [7] (byte) main::notreg_mem_abs ← (byte) '.' -- vbum1=vbuc1 
    lda #'.'
    sta notreg_mem_abs
    // [8] (byte) main::notreg_default ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_default
    // [9] call out 
    // [39] phi from main to out [phi:main->out]
  out_from_main:
    // [39] phi (byte) i#36 = (byte) 0 [phi:main->out#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [39] phi (byte) out::c#15 = (const byte) main::reg_zp_flex [phi:main->out#1] -- vbuz1=vbuc1 
    lda #reg_zp_flex
    sta.z out.c
    jsr out
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call out 
    // [39] phi from main::@1 to out [phi:main::@1->out]
  out_from___b1:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@1->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_zp_abs [phi:main::@1->out#1] -- vbuz1=vbuc1 
    lda #reg_zp_abs
    sta.z out.c
    jsr out
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call out 
    // [39] phi from main::@2 to out [phi:main::@2->out]
  out_from___b2:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@2->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_mem_flex [phi:main::@2->out#1] -- vbuz1=vbuc1 
    lda #reg_mem_flex
    sta.z out.c
    jsr out
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call out 
    // [39] phi from main::@3 to out [phi:main::@3->out]
  out_from___b3:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@3->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_mem_abs [phi:main::@3->out#1] -- vbuz1=vbuc1 
    lda #reg_mem_abs
    sta.z out.c
    jsr out
    jmp __b4
    // main::@4
  __b4:
    // [16] (byte) out::c#4 ← (byte) main::notreg_zp_flex -- vbuz1=vbuz2 
    lda.z notreg_zp_flex
    sta.z out.c
    // [17] call out 
    // [39] phi from main::@4 to out [phi:main::@4->out]
  out_from___b4:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@4->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#4 [phi:main::@4->out#1] -- register_copy 
    jsr out
    jmp __b5
    // main::@5
  __b5:
    // [18] (byte) out::c#5 ← (byte) main::notreg_zp_abs -- vbuz1=vbuz2 
    lda.z notreg_zp_abs
    sta.z out.c
    // [19] call out 
    // [39] phi from main::@5 to out [phi:main::@5->out]
  out_from___b5:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@5->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#5 [phi:main::@5->out#1] -- register_copy 
    jsr out
    jmp __b6
    // main::@6
  __b6:
    // [20] (byte) out::c#6 ← (byte) main::notreg_mem_flex -- vbuz1=vbum2 
    lda notreg_mem_flex
    sta.z out.c
    // [21] call out 
    // [39] phi from main::@6 to out [phi:main::@6->out]
  out_from___b6:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@6->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#6 [phi:main::@6->out#1] -- register_copy 
    jsr out
    jmp __b7
    // main::@7
  __b7:
    // [22] (byte) out::c#7 ← (byte) main::notreg_mem_abs -- vbuz1=vbum2 
    lda notreg_mem_abs
    sta.z out.c
    // [23] call out 
    // [39] phi from main::@7 to out [phi:main::@7->out]
  out_from___b7:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@7->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#7 [phi:main::@7->out#1] -- register_copy 
    jsr out
    // [24] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [25] call out 
    // [39] phi from main::@8 to out [phi:main::@8->out]
  out_from___b8:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@8->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_default [phi:main::@8->out#1] -- vbuz1=vbuc1 
    lda #default_default
    sta.z out.c
    jsr out
    // [26] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [27] call out 
    // [39] phi from main::@9 to out [phi:main::@9->out]
  out_from___b9:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@9->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_default [phi:main::@9->out#1] -- vbuz1=vbuc1 
    lda #reg_default
    sta.z out.c
    jsr out
    jmp __b10
    // main::@10
  __b10:
    // [28] (byte) out::c#10 ← (byte) main::notreg_default -- vbuz1=vbuz2 
    lda.z notreg_default
    sta.z out.c
    // [29] call out 
    // [39] phi from main::@10 to out [phi:main::@10->out]
  out_from___b10:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@10->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#10 [phi:main::@10->out#1] -- register_copy 
    jsr out
    // [30] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [31] call out 
    // [39] phi from main::@11 to out [phi:main::@11->out]
  out_from___b11:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@11->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_zp_flex [phi:main::@11->out#1] -- vbuz1=vbuc1 
    lda #default_zp_flex
    sta.z out.c
    jsr out
    // [32] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [33] call out 
    // [39] phi from main::@12 to out [phi:main::@12->out]
  out_from___b12:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@12->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_zp_abs [phi:main::@12->out#1] -- vbuz1=vbuc1 
    lda #default_zp_abs
    sta.z out.c
    jsr out
    // [34] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [35] call out 
    // [39] phi from main::@13 to out [phi:main::@13->out]
  out_from___b13:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@13->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_mem_flex [phi:main::@13->out#1] -- vbuz1=vbuc1 
    lda #default_mem_flex
    sta.z out.c
    jsr out
    // [36] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [37] call out 
    // [39] phi from main::@14 to out [phi:main::@14->out]
  out_from___b14:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@14->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_mem_abs [phi:main::@14->out#1] -- vbuz1=vbuc1 
    lda #default_mem_abs
    sta.z out.c
    jsr out
    jmp __breturn
    // main::@return
  __breturn:
    // [38] return 
    rts
    notreg_mem_flex: .byte 0
}
  // out
// out(byte zeropage(2) c)
out: {
    .label c = 2
    // [40] *((const byte*) SCREEN + (byte) i#36) ← (byte) out::c#15 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z i
    sta SCREEN,y
    // [41] (byte) i#17 ← ++ (byte) i#36 -- vbuz1=_inc_vbuz1 
    inc.z i
    jmp __breturn
    // out::@return
  __breturn:
    // [42] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (byte) main::notreg_zp_flex ← (byte) '.' [ main::notreg_zp_flex ] ( main:2 [ main::notreg_zp_flex ] ) always clobbers reg byte a 
Statement [5] (byte) main::notreg_zp_abs ← (byte) '.' [ main::notreg_zp_flex main::notreg_zp_abs ] ( main:2 [ main::notreg_zp_flex main::notreg_zp_abs ] ) always clobbers reg byte a 
Statement [6] (byte) main::notreg_mem_flex ← (byte) '.' [ main::notreg_zp_flex main::notreg_zp_abs main::notreg_mem_flex ] ( main:2 [ main::notreg_zp_flex main::notreg_zp_abs main::notreg_mem_flex ] ) always clobbers reg byte a 
Statement [7] (byte) main::notreg_mem_abs ← (byte) '.' [ main::notreg_zp_flex main::notreg_zp_abs main::notreg_mem_flex main::notreg_mem_abs ] ( main:2 [ main::notreg_zp_flex main::notreg_zp_abs main::notreg_mem_flex main::notreg_mem_abs ] ) always clobbers reg byte a 
Statement [8] (byte) main::notreg_default ← (byte) '.' [ main::notreg_zp_flex main::notreg_zp_abs main::notreg_mem_flex main::notreg_mem_abs main::notreg_default ] ( main:2 [ main::notreg_zp_flex main::notreg_zp_abs main::notreg_mem_flex main::notreg_mem_abs main::notreg_default ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ i#36 i#17 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::notreg_zp_flex ] : zp[1]:4 , 
Potential registers zp[1]:16 [ main::notreg_zp_abs ] : zp[1]:16 , 
Potential registers mem[1] [ main::notreg_mem_flex ] : mem[1] , 
Potential registers mem[1]:4096 [ main::notreg_mem_abs ] : mem[1]:4096 , 
Potential registers zp[1]:5 [ main::notreg_default ] : zp[1]:5 , 

REGISTER UPLIFT SCOPES
Uplift Scope [out] 32: zp[1]:2 [ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ] 
Uplift Scope [] 17: zp[1]:3 [ i#36 i#17 ] 
Uplift Scope [main] 0.33: zp[1]:4 [ main::notreg_zp_flex ] 0.31: zp[1]:16 [ main::notreg_zp_abs ] 0.29: mem[1] [ main::notreg_mem_flex ] 0.27: mem[1]:4096 [ main::notreg_mem_abs ] 0.2: zp[1]:5 [ main::notreg_default ] 

Uplifting [out] best 246 combination reg byte x [ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ] 
Uplifting [] best 237 combination reg byte y [ i#36 i#17 ] 
Uplifting [main] best 237 combination zp[1]:4 [ main::notreg_zp_flex ] zp[1]:16 [ main::notreg_zp_abs ] mem[1] [ main::notreg_mem_flex ] mem[1]:4096 [ main::notreg_mem_abs ] zp[1]:5 [ main::notreg_default ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::notreg_zp_flex ]
Uplifting [main] best 237 combination zp[1]:4 [ main::notreg_zp_flex ] 
Attempting to uplift remaining variables inzp[1]:16 [ main::notreg_zp_abs ]
Uplifting [main] best 237 combination zp[1]:16 [ main::notreg_zp_abs ] 
Attempting to uplift remaining variables inmem[1] [ main::notreg_mem_flex ]
Uplifting [main] best 237 combination mem[1] [ main::notreg_mem_flex ] 
Attempting to uplift remaining variables inmem[1]:4096 [ main::notreg_mem_abs ]
Uplifting [main] best 237 combination mem[1]:4096 [ main::notreg_mem_abs ] 
Attempting to uplift remaining variables inzp[1]:5 [ main::notreg_default ]
Uplifting [main] best 237 combination zp[1]:5 [ main::notreg_default ] 
Allocated (was zp[1]:4) zp[1]:2 [ main::notreg_zp_flex ]
Allocated (was zp[1]:5) zp[1]:3 [ main::notreg_default ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const reg_zp_flex = '.'
    .const reg_zp_abs = '.'
    .const reg_mem_flex = '.'
    .const reg_mem_abs = '.'
    .const default_default = '.'
    .const reg_default = '.'
    .const default_zp_flex = '.'
    .const default_zp_abs = '.'
    .const default_mem_flex = '.'
    .const default_mem_abs = '.'
    .label notreg_zp_flex = 2
    .label notreg_zp_abs = $10
    .label notreg_mem_abs = $1000
    .label notreg_default = 3
    // [4] (byte) main::notreg_zp_flex ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_zp_flex
    // [5] (byte) main::notreg_zp_abs ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_zp_abs
    // [6] (byte) main::notreg_mem_flex ← (byte) '.' -- vbum1=vbuc1 
    lda #'.'
    sta notreg_mem_flex
    // [7] (byte) main::notreg_mem_abs ← (byte) '.' -- vbum1=vbuc1 
    lda #'.'
    sta notreg_mem_abs
    // [8] (byte) main::notreg_default ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_default
    // [9] call out 
    // [39] phi from main to out [phi:main->out]
  out_from_main:
    // [39] phi (byte) i#36 = (byte) 0 [phi:main->out#0] -- vbuyy=vbuc1 
    ldy #0
    // [39] phi (byte) out::c#15 = (const byte) main::reg_zp_flex [phi:main->out#1] -- vbuxx=vbuc1 
    ldx #reg_zp_flex
    jsr out
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [11] call out 
    // [39] phi from main::@1 to out [phi:main::@1->out]
  out_from___b1:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@1->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_zp_abs [phi:main::@1->out#1] -- vbuxx=vbuc1 
    ldx #reg_zp_abs
    jsr out
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call out 
    // [39] phi from main::@2 to out [phi:main::@2->out]
  out_from___b2:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@2->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_mem_flex [phi:main::@2->out#1] -- vbuxx=vbuc1 
    ldx #reg_mem_flex
    jsr out
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call out 
    // [39] phi from main::@3 to out [phi:main::@3->out]
  out_from___b3:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@3->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_mem_abs [phi:main::@3->out#1] -- vbuxx=vbuc1 
    ldx #reg_mem_abs
    jsr out
    jmp __b4
    // main::@4
  __b4:
    // [16] (byte) out::c#4 ← (byte) main::notreg_zp_flex -- vbuxx=vbuz1 
    ldx.z notreg_zp_flex
    // [17] call out 
    // [39] phi from main::@4 to out [phi:main::@4->out]
  out_from___b4:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@4->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#4 [phi:main::@4->out#1] -- register_copy 
    jsr out
    jmp __b5
    // main::@5
  __b5:
    // [18] (byte) out::c#5 ← (byte) main::notreg_zp_abs -- vbuxx=vbuz1 
    ldx.z notreg_zp_abs
    // [19] call out 
    // [39] phi from main::@5 to out [phi:main::@5->out]
  out_from___b5:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@5->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#5 [phi:main::@5->out#1] -- register_copy 
    jsr out
    jmp __b6
    // main::@6
  __b6:
    // [20] (byte) out::c#6 ← (byte) main::notreg_mem_flex -- vbuxx=vbum1 
    ldx notreg_mem_flex
    // [21] call out 
    // [39] phi from main::@6 to out [phi:main::@6->out]
  out_from___b6:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@6->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#6 [phi:main::@6->out#1] -- register_copy 
    jsr out
    jmp __b7
    // main::@7
  __b7:
    // [22] (byte) out::c#7 ← (byte) main::notreg_mem_abs -- vbuxx=vbum1 
    ldx notreg_mem_abs
    // [23] call out 
    // [39] phi from main::@7 to out [phi:main::@7->out]
  out_from___b7:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@7->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#7 [phi:main::@7->out#1] -- register_copy 
    jsr out
    // [24] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [25] call out 
    // [39] phi from main::@8 to out [phi:main::@8->out]
  out_from___b8:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@8->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_default [phi:main::@8->out#1] -- vbuxx=vbuc1 
    ldx #default_default
    jsr out
    // [26] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [27] call out 
    // [39] phi from main::@9 to out [phi:main::@9->out]
  out_from___b9:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@9->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_default [phi:main::@9->out#1] -- vbuxx=vbuc1 
    ldx #reg_default
    jsr out
    jmp __b10
    // main::@10
  __b10:
    // [28] (byte) out::c#10 ← (byte) main::notreg_default -- vbuxx=vbuz1 
    ldx.z notreg_default
    // [29] call out 
    // [39] phi from main::@10 to out [phi:main::@10->out]
  out_from___b10:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@10->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#10 [phi:main::@10->out#1] -- register_copy 
    jsr out
    // [30] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  __b11_from___b10:
    jmp __b11
    // main::@11
  __b11:
    // [31] call out 
    // [39] phi from main::@11 to out [phi:main::@11->out]
  out_from___b11:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@11->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_zp_flex [phi:main::@11->out#1] -- vbuxx=vbuc1 
    ldx #default_zp_flex
    jsr out
    // [32] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [33] call out 
    // [39] phi from main::@12 to out [phi:main::@12->out]
  out_from___b12:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@12->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_zp_abs [phi:main::@12->out#1] -- vbuxx=vbuc1 
    ldx #default_zp_abs
    jsr out
    // [34] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [35] call out 
    // [39] phi from main::@13 to out [phi:main::@13->out]
  out_from___b13:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@13->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_mem_flex [phi:main::@13->out#1] -- vbuxx=vbuc1 
    ldx #default_mem_flex
    jsr out
    // [36] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [37] call out 
    // [39] phi from main::@14 to out [phi:main::@14->out]
  out_from___b14:
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@14->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_mem_abs [phi:main::@14->out#1] -- vbuxx=vbuc1 
    ldx #default_mem_abs
    jsr out
    jmp __breturn
    // main::@return
  __breturn:
    // [38] return 
    rts
    notreg_mem_flex: .byte 0
}
  // out
// out(byte register(X) c)
out: {
    // [40] *((const byte*) SCREEN + (byte) i#36) ← (byte) out::c#15 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN,y
    // [41] (byte) i#17 ← ++ (byte) i#36 -- vbuyy=_inc_vbuyy 
    iny
    jmp __breturn
    // out::@return
  __breturn:
    // [42] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'.'
Removing instruction lda #'.'
Removing instruction lda #'.'
Removing instruction lda #'.'
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction out_from___b1:
Removing instruction __b2_from___b1:
Removing instruction out_from___b2:
Removing instruction __b3_from___b2:
Removing instruction out_from___b3:
Removing instruction __b8_from___b7:
Removing instruction out_from___b8:
Removing instruction __b9_from___b8:
Removing instruction out_from___b9:
Removing instruction __b11_from___b10:
Removing instruction out_from___b11:
Removing instruction __b12_from___b11:
Removing instruction out_from___b12:
Removing instruction __b13_from___b12:
Removing instruction out_from___b13:
Removing instruction __b14_from___b13:
Removing instruction out_from___b14:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction out_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction out_from___b4:
Removing instruction __b5:
Removing instruction out_from___b5:
Removing instruction __b6:
Removing instruction out_from___b6:
Removing instruction __b7:
Removing instruction out_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction out_from___b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(byte) i
(byte) i#17 reg byte y 0.9999999999999999
(byte) i#36 reg byte y 16.0
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte) main::default_default = (byte) '.'
(const byte) main::default_mem_abs !mem[-1]:4096 = (byte) '.'
(const byte) main::default_mem_flex = (byte) '.'
(const byte) main::default_zp_abs !zp[-1]:16 = (byte) '.'
(const byte) main::default_zp_flex = (byte) '.'
(byte) main::notreg_default notregister zp[1]:3 0.2
(byte) main::notreg_mem_abs notregister !mem[-1]:4096 mem[1]:4096 0.26666666666666666
(byte) main::notreg_mem_flex notregister mem[1] 0.2857142857142857
(byte) main::notreg_zp_abs notregister !zp[-1]:16 zp[1]:16 0.3076923076923077
(byte) main::notreg_zp_flex notregister zp[1]:2 0.3333333333333333
(const byte) main::reg_default = (byte) '.'
(const byte) main::reg_mem_abs !mem[-1]:4096 = (byte) '.'
(const byte) main::reg_mem_flex = (byte) '.'
(const byte) main::reg_zp_abs !zp[-1]:16 = (byte) '.'
(const byte) main::reg_zp_flex = (byte) '.'
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#10 reg byte x 4.0
(byte) out::c#15 reg byte x 12.0
(byte) out::c#4 reg byte x 4.0
(byte) out::c#5 reg byte x 4.0
(byte) out::c#6 reg byte x 4.0
(byte) out::c#7 reg byte x 4.0

reg byte x [ out::c#15 out::c#10 out::c#4 out::c#5 out::c#6 out::c#7 ]
reg byte y [ i#36 i#17 ]
zp[1]:2 [ main::notreg_zp_flex ]
zp[1]:16 [ main::notreg_zp_abs ]
mem[1] [ main::notreg_mem_flex ]
mem[1]:4096 [ main::notreg_mem_abs ]
zp[1]:3 [ main::notreg_default ]


FINAL ASSEMBLER
Score: 169

  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const reg_zp_flex = '.'
    .const reg_zp_abs = '.'
    .const reg_mem_flex = '.'
    .const reg_mem_abs = '.'
    .const default_default = '.'
    .const reg_default = '.'
    .const default_zp_flex = '.'
    .const default_zp_abs = '.'
    .const default_mem_flex = '.'
    .const default_mem_abs = '.'
    .label notreg_zp_flex = 2
    .label notreg_zp_abs = $10
    .label notreg_mem_abs = $1000
    .label notreg_default = 3
    // notreg_zp_flex = '.'
    // [4] (byte) main::notreg_zp_flex ← (byte) '.' -- vbuz1=vbuc1 
    lda #'.'
    sta.z notreg_zp_flex
    // notreg_zp_abs = '.'
    // [5] (byte) main::notreg_zp_abs ← (byte) '.' -- vbuz1=vbuc1 
    sta.z notreg_zp_abs
    // notreg_mem_flex = '.'
    // [6] (byte) main::notreg_mem_flex ← (byte) '.' -- vbum1=vbuc1 
    sta notreg_mem_flex
    // notreg_mem_abs = '.'
    // [7] (byte) main::notreg_mem_abs ← (byte) '.' -- vbum1=vbuc1 
    sta notreg_mem_abs
    // notreg_default = '.'
    // [8] (byte) main::notreg_default ← (byte) '.' -- vbuz1=vbuc1 
    sta.z notreg_default
    // out(reg_zp_flex)
    // [9] call out 
    // [39] phi from main to out [phi:main->out]
    // [39] phi (byte) i#36 = (byte) 0 [phi:main->out#0] -- vbuyy=vbuc1 
    ldy #0
    // [39] phi (byte) out::c#15 = (const byte) main::reg_zp_flex [phi:main->out#1] -- vbuxx=vbuc1 
    ldx #reg_zp_flex
    jsr out
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // out(reg_zp_abs)
    // [11] call out 
    // [39] phi from main::@1 to out [phi:main::@1->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@1->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_zp_abs [phi:main::@1->out#1] -- vbuxx=vbuc1 
    ldx #reg_zp_abs
    jsr out
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // out(reg_mem_flex)
    // [13] call out 
    // [39] phi from main::@2 to out [phi:main::@2->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@2->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_mem_flex [phi:main::@2->out#1] -- vbuxx=vbuc1 
    ldx #reg_mem_flex
    jsr out
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // out(reg_mem_abs)
    // [15] call out 
    // [39] phi from main::@3 to out [phi:main::@3->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@3->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_mem_abs [phi:main::@3->out#1] -- vbuxx=vbuc1 
    ldx #reg_mem_abs
    jsr out
    // main::@4
    // out(notreg_zp_flex)
    // [16] (byte) out::c#4 ← (byte) main::notreg_zp_flex -- vbuxx=vbuz1 
    ldx.z notreg_zp_flex
    // [17] call out 
    // [39] phi from main::@4 to out [phi:main::@4->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@4->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#4 [phi:main::@4->out#1] -- register_copy 
    jsr out
    // main::@5
    // out(notreg_zp_abs)
    // [18] (byte) out::c#5 ← (byte) main::notreg_zp_abs -- vbuxx=vbuz1 
    ldx.z notreg_zp_abs
    // [19] call out 
    // [39] phi from main::@5 to out [phi:main::@5->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@5->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#5 [phi:main::@5->out#1] -- register_copy 
    jsr out
    // main::@6
    // out(notreg_mem_flex)
    // [20] (byte) out::c#6 ← (byte) main::notreg_mem_flex -- vbuxx=vbum1 
    ldx notreg_mem_flex
    // [21] call out 
    // [39] phi from main::@6 to out [phi:main::@6->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@6->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#6 [phi:main::@6->out#1] -- register_copy 
    jsr out
    // main::@7
    // out(notreg_mem_abs)
    // [22] (byte) out::c#7 ← (byte) main::notreg_mem_abs -- vbuxx=vbum1 
    ldx notreg_mem_abs
    // [23] call out 
    // [39] phi from main::@7 to out [phi:main::@7->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@7->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#7 [phi:main::@7->out#1] -- register_copy 
    jsr out
    // [24] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // out(default_default)
    // [25] call out 
    // [39] phi from main::@8 to out [phi:main::@8->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@8->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_default [phi:main::@8->out#1] -- vbuxx=vbuc1 
    ldx #default_default
    jsr out
    // [26] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // out(reg_default)
    // [27] call out 
    // [39] phi from main::@9 to out [phi:main::@9->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@9->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::reg_default [phi:main::@9->out#1] -- vbuxx=vbuc1 
    ldx #reg_default
    jsr out
    // main::@10
    // out(notreg_default)
    // [28] (byte) out::c#10 ← (byte) main::notreg_default -- vbuxx=vbuz1 
    ldx.z notreg_default
    // [29] call out 
    // [39] phi from main::@10 to out [phi:main::@10->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@10->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (byte) out::c#10 [phi:main::@10->out#1] -- register_copy 
    jsr out
    // [30] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // out(default_zp_flex)
    // [31] call out 
    // [39] phi from main::@11 to out [phi:main::@11->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@11->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_zp_flex [phi:main::@11->out#1] -- vbuxx=vbuc1 
    ldx #default_zp_flex
    jsr out
    // [32] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // out(default_zp_abs)
    // [33] call out 
    // [39] phi from main::@12 to out [phi:main::@12->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@12->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_zp_abs [phi:main::@12->out#1] -- vbuxx=vbuc1 
    ldx #default_zp_abs
    jsr out
    // [34] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // out(default_mem_flex)
    // [35] call out 
    // [39] phi from main::@13 to out [phi:main::@13->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@13->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_mem_flex [phi:main::@13->out#1] -- vbuxx=vbuc1 
    ldx #default_mem_flex
    jsr out
    // [36] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
    // main::@14
    // out(default_mem_abs)
    // [37] call out 
    // [39] phi from main::@14 to out [phi:main::@14->out]
    // [39] phi (byte) i#36 = (byte) i#17 [phi:main::@14->out#0] -- register_copy 
    // [39] phi (byte) out::c#15 = (const byte) main::default_mem_abs [phi:main::@14->out#1] -- vbuxx=vbuc1 
    ldx #default_mem_abs
    jsr out
    // main::@return
    // }
    // [38] return 
    rts
    notreg_mem_flex: .byte 0
}
  // out
// out(byte register(X) c)
out: {
    // SCREEN[i++] = c
    // [40] *((const byte*) SCREEN + (byte) i#36) ← (byte) out::c#15 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta SCREEN,y
    // SCREEN[i++] = c;
    // [41] (byte) i#17 ← ++ (byte) i#36 -- vbuyy=_inc_vbuyy 
    iny
    // out::@return
    // }
    // [42] return 
    rts
}
  // File Data

