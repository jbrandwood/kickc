Identified constant variable (word) main::wavelength

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@2
@2: scope:[]  from @begin
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@5
divr16u: scope:[divr16u]  from div32u16u div32u16u::@2
  (word) divr16u::divisor#6 ← phi( div32u16u/(word) divr16u::divisor#0 div32u16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::dividend#5 ← phi( div32u16u/(word) divr16u::dividend#1 div32u16u::@2/(word) divr16u::dividend#2 )
  (word) divr16u::rem#10 ← phi( div32u16u/(word) divr16u::rem#3 div32u16u::@2/(word) divr16u::rem#4 )
  (word) divr16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#4 ← phi( divr16u/(word) divr16u::divisor#6 divr16u::@3/(word) divr16u::divisor#7 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#6 )
  (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  (word~) divr16u::$0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#2 ← phi( divr16u::@1/(word) divr16u::divisor#4 divr16u::@4/(word) divr16u::divisor#5 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#4 ← phi( divr16u::@1/(word) divr16u::dividend#3 divr16u::@4/(word) divr16u::dividend#7 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#5 ← phi( divr16u::@1/(word) divr16u::divisor#4 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#7 ← phi( divr16u::@1/(word) divr16u::dividend#3 )
  (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (word/dword~) divr16u::$5 ← (word) divr16u::rem#7 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#1 ← (word/dword~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#7 ← phi( divr16u::@2/(word) divr16u::divisor#2 divr16u::@5/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#6 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#8 )
  (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#8 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#3 ← phi( divr16u::@2/(word) divr16u::divisor#2 )
  (word) divr16u::rem#8 ← phi( divr16u::@2/(word) divr16u::rem#6 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#8 - (word) divr16u::divisor#3
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#9 ← phi( divr16u::@3/(word) divr16u::rem#11 )
  (word) rem16u#1 ← (word) divr16u::rem#9
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#14 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#4
  (word) rem16u#2 ← (word) rem16u#14
  return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen sin16s_genb
  (word) rem16u#26 ← phi( sin16s_gen/(word) rem16u#27 sin16s_genb/(word) rem16u#29 )
  (word) div32u16u::divisor#2 ← phi( sin16s_gen/(word) div32u16u::divisor#0 sin16s_genb/(word) div32u16u::divisor#1 )
  (dword) div32u16u::dividend#2 ← phi( sin16s_gen/(dword) div32u16u::dividend#0 sin16s_genb/(dword) div32u16u::dividend#1 )
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend#2
  (word) divr16u::dividend#1 ← (word~) div32u16u::$0
  (word) divr16u::divisor#0 ← (word) div32u16u::divisor#2
  (word) divr16u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u
  (word) div32u16u::divisor#3 ← phi( div32u16u/(word) div32u16u::divisor#2 )
  (dword) div32u16u::dividend#3 ← phi( div32u16u/(dword) div32u16u::dividend#2 )
  (word) rem16u#15 ← phi( div32u16u/(word) rem16u#2 )
  (word) divr16u::return#5 ← phi( div32u16u/(word) divr16u::return#2 )
  (word~) div32u16u::$1 ← (word) divr16u::return#5
  (word) rem16u#3 ← (word) rem16u#15
  (word) div32u16u::quotient_hi#0 ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend#3
  (word) divr16u::dividend#2 ← (word~) div32u16u::$2
  (word) divr16u::divisor#1 ← (word) div32u16u::divisor#3
  (word) divr16u::rem#4 ← (word) rem16u#3
  call divr16u 
  (word) divr16u::return#3 ← (word) divr16u::return#1
  to:div32u16u::@3
div32u16u::@3: scope:[div32u16u]  from div32u16u::@2
  (word) div32u16u::quotient_hi#1 ← phi( div32u16u::@2/(word) div32u16u::quotient_hi#0 )
  (word) rem16u#16 ← phi( div32u16u::@2/(word) rem16u#2 )
  (word) divr16u::return#6 ← phi( div32u16u::@2/(word) divr16u::return#3 )
  (word~) div32u16u::$3 ← (word) divr16u::return#6
  (word) rem16u#4 ← (word) rem16u#16
  (word) div32u16u::quotient_lo#0 ← (word~) div32u16u::$3
  (dword) div32u16u::quotient#0 ← { (word) div32u16u::quotient_hi#1, (word) div32u16u::quotient_lo#0 }
  (dword) div32u16u::return#0 ← (dword) div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@3
  (word) rem16u#17 ← phi( div32u16u::@3/(word) rem16u#4 )
  (dword) div32u16u::return#4 ← phi( div32u16u::@3/(dword) div32u16u::return#0 )
  (dword) div32u16u::return#1 ← (dword) div32u16u::return#4
  (word) rem16u#5 ← (word) rem16u#17
  return 
  to:@return
@5: scope:[]  from @2
  (word) rem16u#46 ← phi( @2/(word) rem16u#0 )
  (signed byte) rem8s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
@6: scope:[]  from @5
  (word) rem16u#43 ← phi( @5/(word) rem16u#46 )
  (signed word) rem16s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@13
mul16u: scope:[mul16u]  from mulu16_sel
  (word) mul16u::a#5 ← phi( mulu16_sel/(word) mul16u::a#1 )
  (word) mul16u::b#1 ← phi( mulu16_sel/(word) mul16u::b#0 )
  (dword) mul16u::res#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#5 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#3 ← phi( mul16u::@1/(word) mul16u::a#2 )
  (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@7/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@7/(dword) mul16u::mb#3 )
  (word) mul16u::a#4 ← phi( mul16u::@2/(word) mul16u::a#3 mul16u::@7/(word) mul16u::a#6 )
  (word~) mul16u::$5 ← (word) mul16u::a#4 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#6 ← phi( mul16u::@2/(word) mul16u::a#3 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#3 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#3
  return 
  to:@return
@13: scope:[]  from @6
  (word) rem16u#40 ← phi( @6/(word) rem16u#43 )
  (dword) PI2_u4f28#0 ← (dword/signed dword) $6487ed51
  (dword) PI_u4f28#0 ← (dword/signed dword) $3243f6a9
  (dword) PI_HALF_u4f28#0 ← (dword/signed dword) $1921fb54
  (word) PI2_u4f12#0 ← (word/signed word/dword/signed dword) $6488
  (word) PI_u4f12#0 ← (word/signed word/dword/signed dword) $3244
  (word) PI_HALF_u4f12#0 ← (word/signed word/dword/signed dword) $1922
  to:@22
sin16s_gen: scope:[sin16s_gen]  from main
  (signed word*) sin16s_gen::sintab#5 ← phi( main/(signed word*) sin16s_gen::sintab#1 )
  (word) rem16u#27 ← phi( main/(word) rem16u#31 )
  (word) sin16s_gen::wavelength#1 ← phi( main/(word) sin16s_gen::wavelength#0 )
  (dword) div32u16u::dividend#0 ← (dword) PI2_u4f28#0
  (word) div32u16u::divisor#0 ← (word) sin16s_gen::wavelength#1
  call div32u16u 
  (dword) div32u16u::return#2 ← (dword) div32u16u::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  (word) sin16s_gen::wavelength#4 ← phi( sin16s_gen/(word) sin16s_gen::wavelength#1 )
  (signed word*) sin16s_gen::sintab#4 ← phi( sin16s_gen/(signed word*) sin16s_gen::sintab#5 )
  (word) rem16u#18 ← phi( sin16s_gen/(word) rem16u#5 )
  (dword) div32u16u::return#5 ← phi( sin16s_gen/(dword) div32u16u::return#2 )
  (dword~) sin16s_gen::$0 ← (dword) div32u16u::return#5
  (word) rem16u#6 ← (word) rem16u#18
  (dword) sin16s_gen::step#0 ← (dword~) sin16s_gen::$0
  (dword) sin16s_gen::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_gen::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  (word) rem16u#34 ← phi( sin16s_gen::@3/(word) rem16u#6 sin16s_gen::@4/(word) rem16u#28 )
  (word) sin16s_gen::wavelength#3 ← phi( sin16s_gen::@3/(word) sin16s_gen::wavelength#4 sin16s_gen::@4/(word) sin16s_gen::wavelength#2 )
  (word) sin16s_gen::i#3 ← phi( sin16s_gen::@3/(word) sin16s_gen::i#0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  (dword) sin16s_gen::step#2 ← phi( sin16s_gen::@3/(dword) sin16s_gen::step#0 sin16s_gen::@4/(dword) sin16s_gen::step#1 )
  (signed word*) sin16s_gen::sintab#3 ← phi( sin16s_gen::@3/(signed word*) sin16s_gen::sintab#4 sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(dword) sin16s_gen::x#0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  call sin16s 
  (signed word) sin16s::return#0 ← (signed word) sin16s::return#2
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@1
  (word) rem16u#28 ← phi( sin16s_gen::@1/(word) rem16u#34 )
  (word) sin16s_gen::wavelength#2 ← phi( sin16s_gen::@1/(word) sin16s_gen::wavelength#3 )
  (word) sin16s_gen::i#2 ← phi( sin16s_gen::@1/(word) sin16s_gen::i#3 )
  (dword) sin16s_gen::step#1 ← phi( sin16s_gen::@1/(dword) sin16s_gen::step#2 )
  (dword) sin16s_gen::x#3 ← phi( sin16s_gen::@1/(dword) sin16s_gen::x#2 )
  (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@1/(signed word*) sin16s_gen::sintab#3 )
  (signed word) sin16s::return#3 ← phi( sin16s_gen::@1/(signed word) sin16s::return#0 )
  (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#3
  *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1
  (signed word*~) sin16s_gen::$2 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_gen::sintab#0 ← (signed word*~) sin16s_gen::$2
  (dword~) sin16s_gen::$3 ← (dword) sin16s_gen::x#3 + (dword) sin16s_gen::step#1
  (dword) sin16s_gen::x#1 ← (dword~) sin16s_gen::$3
  (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  (bool~) sin16s_gen::$4 ← (word) sin16s_gen::i#1 < (word) sin16s_gen::wavelength#2
  if((bool~) sin16s_gen::$4) goto sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@4
  (word) rem16u#19 ← phi( sin16s_gen::@4/(word) rem16u#28 )
  (word) rem16u#7 ← (word) rem16u#19
  return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen::@1
  (dword) sin16s::x#3 ← phi( sin16s_gen::@1/(dword) sin16s::x#0 )
  (byte) sin16s::isUpper#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
  (bool~) sin16s::$1 ← ! (bool~) sin16s::$0
  if((bool~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (byte) sin16s::isUpper#8 ← phi( sin16s/(byte) sin16s::isUpper#0 sin16s::@4/(byte) sin16s::isUpper#1 )
  (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#3 sin16s::@4/(dword) sin16s::x#1 )
  (bool~) sin16s::$3 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
  (bool~) sin16s::$4 ← ! (bool~) sin16s::$3
  if((bool~) sin16s::$4) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword) sin16s::x#5 ← phi( sin16s/(dword) sin16s::x#3 )
  (dword~) sin16s::$2 ← (dword) sin16s::x#5 - (dword) PI_u4f28#0
  (dword) sin16s::x#1 ← (dword~) sin16s::$2
  (byte) sin16s::isUpper#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (byte) sin16s::isUpper#7 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 sin16s::@5/(byte) sin16s::isUpper#9 )
  (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) sin16s::$7 ← > (dword~) sin16s::$6
  (word) sin16s::x1#0 ← (word~) sin16s::$7
  (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  (byte) mulu16_sel::select#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@2
  (byte) sin16s::isUpper#6 ← phi( sin16s::@2/(byte) sin16s::isUpper#7 )
  (word) sin16s::x1#1 ← phi( sin16s::@2/(word) sin16s::x1#0 )
  (word) mulu16_sel::return#12 ← phi( sin16s::@2/(word) mulu16_sel::return#0 )
  (word~) sin16s::$8 ← (word) mulu16_sel::return#12
  (word) sin16s::x2#0 ← (word~) sin16s::$8
  (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  (word) mulu16_sel::v2#1 ← (word) sin16s::x1#1
  (byte) mulu16_sel::select#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu16_sel 
  (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  (byte) sin16s::isUpper#5 ← phi( sin16s::@8/(byte) sin16s::isUpper#6 )
  (word) sin16s::x1#4 ← phi( sin16s::@8/(word) sin16s::x1#1 )
  (word) mulu16_sel::return#13 ← phi( sin16s::@8/(word) mulu16_sel::return#1 )
  (word~) sin16s::$9 ← (word) mulu16_sel::return#13
  (word) sin16s::x3#0 ← (word~) sin16s::$9
  (word/signed word/dword/signed dword~) sin16s::$10 ← (dword/signed dword) $10000 / (byte/signed byte/word/signed word/dword/signed dword) 6
  (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  (word) mulu16_sel::v2#2 ← (word/signed word/dword/signed dword~) sin16s::$10
  (byte) mulu16_sel::select#2 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu16_sel 
  (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  (byte) sin16s::isUpper#4 ← phi( sin16s::@9/(byte) sin16s::isUpper#5 )
  (word) sin16s::x3#1 ← phi( sin16s::@9/(word) sin16s::x3#0 )
  (word) sin16s::x1#2 ← phi( sin16s::@9/(word) sin16s::x1#4 )
  (word) mulu16_sel::return#14 ← phi( sin16s::@9/(word) mulu16_sel::return#2 )
  (word~) sin16s::$11 ← (word) mulu16_sel::return#14
  (word) sin16s::x3_6#0 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x1#2 - (word) sin16s::x3_6#0
  (word) sin16s::usinx#0 ← (word~) sin16s::$12
  (word) mulu16_sel::v1#3 ← (word) sin16s::x3#1
  (word) mulu16_sel::v2#3 ← (word) sin16s::x1#2
  (byte) mulu16_sel::select#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#3 ← (word) mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  (byte) sin16s::isUpper#3 ← phi( sin16s::@10/(byte) sin16s::isUpper#4 )
  (word) sin16s::usinx#4 ← phi( sin16s::@10/(word) sin16s::usinx#0 )
  (word) sin16s::x1#3 ← phi( sin16s::@10/(word) sin16s::x1#2 )
  (word) mulu16_sel::return#15 ← phi( sin16s::@10/(word) mulu16_sel::return#3 )
  (word~) sin16s::$13 ← (word) mulu16_sel::return#15
  (word) sin16s::x4#0 ← (word~) sin16s::$13
  (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  (word) mulu16_sel::v2#4 ← (word) sin16s::x1#3
  (byte) mulu16_sel::select#4 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#4 ← (word) mulu16_sel::return#6
  to:sin16s::@12
sin16s::@12: scope:[sin16s]  from sin16s::@11
  (byte) sin16s::isUpper#2 ← phi( sin16s::@11/(byte) sin16s::isUpper#3 )
  (word) sin16s::usinx#2 ← phi( sin16s::@11/(word) sin16s::usinx#4 )
  (word) mulu16_sel::return#16 ← phi( sin16s::@11/(word) mulu16_sel::return#4 )
  (word~) sin16s::$14 ← (word) mulu16_sel::return#16
  (word) sin16s::x5#0 ← (word~) sin16s::$14
  (word~) sin16s::$15 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (word) sin16s::x5_128#0 ← (word~) sin16s::$15
  (word~) sin16s::$16 ← (word) sin16s::usinx#2 + (word) sin16s::x5_128#0
  (word) sin16s::usinx#1 ← (word~) sin16s::$16
  (signed word~) sin16s::$17 ← ((signed word)) (word) sin16s::usinx#1
  (signed word) sin16s::sinx#0 ← (signed word~) sin16s::$17
  (bool~) sin16s::$18 ← (byte) sin16s::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16s::$19 ← ! (bool~) sin16s::$18
  if((bool~) sin16s::$19) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (byte) sin16s::isUpper#9 ← phi( sin16s::@1/(byte) sin16s::isUpper#8 )
  (dword) sin16s::x#7 ← phi( sin16s::@1/(dword) sin16s::x#4 )
  (dword~) sin16s::$5 ← (dword) PI_u4f28#0 - (dword) sin16s::x#7
  (dword) sin16s::x#2 ← (dword~) sin16s::$5
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  (signed word) sin16s::sinx#2 ← phi( sin16s::@12/(signed word) sin16s::sinx#0 sin16s::@6/(signed word) sin16s::sinx#1 )
  (signed word) sin16s::return#1 ← (signed word) sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@12
  (word) sin16s::usinx#3 ← phi( sin16s::@12/(word) sin16s::usinx#1 )
  (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx#3
  (signed word~) sin16s::$21 ← - (signed word~) sin16s::$20
  (signed word) sin16s::sinx#1 ← (signed word~) sin16s::$21
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  (signed word) sin16s::return#4 ← phi( sin16s::@3/(signed word) sin16s::return#1 )
  (signed word) sin16s::return#2 ← (signed word) sin16s::return#4
  return 
  to:@return
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@11 sin16s::@2 sin16s::@8 sin16s::@9 sin16sb::@10 sin16sb::@11 sin16sb::@2 sin16sb::@8 sin16sb::@9
  (byte) mulu16_sel::select#11 ← phi( sin16s::@10/(byte) mulu16_sel::select#3 sin16s::@11/(byte) mulu16_sel::select#4 sin16s::@2/(byte) mulu16_sel::select#0 sin16s::@8/(byte) mulu16_sel::select#1 sin16s::@9/(byte) mulu16_sel::select#2 sin16sb::@10/(byte) mulu16_sel::select#8 sin16sb::@11/(byte) mulu16_sel::select#9 sin16sb::@2/(byte) mulu16_sel::select#5 sin16sb::@8/(byte) mulu16_sel::select#6 sin16sb::@9/(byte) mulu16_sel::select#7 )
  (word) mulu16_sel::v2#10 ← phi( sin16s::@10/(word) mulu16_sel::v2#3 sin16s::@11/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@8/(word) mulu16_sel::v2#1 sin16s::@9/(word) mulu16_sel::v2#2 sin16sb::@10/(word) mulu16_sel::v2#8 sin16sb::@11/(word) mulu16_sel::v2#9 sin16sb::@2/(word) mulu16_sel::v2#5 sin16sb::@8/(word) mulu16_sel::v2#6 sin16sb::@9/(word) mulu16_sel::v2#7 )
  (word) mulu16_sel::v1#10 ← phi( sin16s::@10/(word) mulu16_sel::v1#3 sin16s::@11/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@8/(word) mulu16_sel::v1#1 sin16s::@9/(word) mulu16_sel::v1#2 sin16sb::@10/(word) mulu16_sel::v1#8 sin16sb::@11/(word) mulu16_sel::v1#9 sin16sb::@2/(word) mulu16_sel::v1#5 sin16sb::@8/(word) mulu16_sel::v1#6 sin16sb::@9/(word) mulu16_sel::v1#7 )
  (word) mul16u::a#1 ← (word) mulu16_sel::v1#10
  (word) mul16u::b#0 ← (word) mulu16_sel::v2#10
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mulu16_sel::@2
mulu16_sel::@2: scope:[mulu16_sel]  from mulu16_sel
  (byte) mulu16_sel::select#10 ← phi( mulu16_sel/(byte) mulu16_sel::select#11 )
  (dword) mul16u::return#4 ← phi( mulu16_sel/(dword) mul16u::return#2 )
  (dword~) mulu16_sel::$0 ← (dword) mul16u::return#4
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return#5 ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@2
  (word) mulu16_sel::return#17 ← phi( mulu16_sel::@2/(word) mulu16_sel::return#5 )
  (word) mulu16_sel::return#6 ← (word) mulu16_sel::return#17
  return 
  to:@return
sin16s_genb: scope:[sin16s_genb]  from main::@5
  (signed word*) sin16s_genb::sintab#5 ← phi( main::@5/(signed word*) sin16s_genb::sintab#1 )
  (word) rem16u#29 ← phi( main::@5/(word) rem16u#10 )
  (word) sin16s_genb::wavelength#1 ← phi( main::@5/(word) sin16s_genb::wavelength#0 )
  (dword) div32u16u::dividend#1 ← (dword) PI2_u4f28#0
  (word) div32u16u::divisor#1 ← (word) sin16s_genb::wavelength#1
  call div32u16u 
  (dword) div32u16u::return#3 ← (dword) div32u16u::return#1
  to:sin16s_genb::@3
sin16s_genb::@3: scope:[sin16s_genb]  from sin16s_genb
  (word) sin16s_genb::wavelength#4 ← phi( sin16s_genb/(word) sin16s_genb::wavelength#1 )
  (signed word*) sin16s_genb::sintab#4 ← phi( sin16s_genb/(signed word*) sin16s_genb::sintab#5 )
  (word) rem16u#20 ← phi( sin16s_genb/(word) rem16u#5 )
  (dword) div32u16u::return#6 ← phi( sin16s_genb/(dword) div32u16u::return#3 )
  (dword~) sin16s_genb::$0 ← (dword) div32u16u::return#6
  (word) rem16u#8 ← (word) rem16u#20
  (dword) sin16s_genb::step#0 ← (dword~) sin16s_genb::$0
  (dword) sin16s_genb::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_genb::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin16s_genb::@1
sin16s_genb::@1: scope:[sin16s_genb]  from sin16s_genb::@3 sin16s_genb::@4
  (word) rem16u#35 ← phi( sin16s_genb::@3/(word) rem16u#8 sin16s_genb::@4/(word) rem16u#30 )
  (word) sin16s_genb::wavelength#3 ← phi( sin16s_genb::@3/(word) sin16s_genb::wavelength#4 sin16s_genb::@4/(word) sin16s_genb::wavelength#2 )
  (word) sin16s_genb::i#3 ← phi( sin16s_genb::@3/(word) sin16s_genb::i#0 sin16s_genb::@4/(word) sin16s_genb::i#1 )
  (dword) sin16s_genb::step#2 ← phi( sin16s_genb::@3/(dword) sin16s_genb::step#0 sin16s_genb::@4/(dword) sin16s_genb::step#1 )
  (signed word*) sin16s_genb::sintab#3 ← phi( sin16s_genb::@3/(signed word*) sin16s_genb::sintab#4 sin16s_genb::@4/(signed word*) sin16s_genb::sintab#0 )
  (dword) sin16s_genb::x#2 ← phi( sin16s_genb::@3/(dword) sin16s_genb::x#0 sin16s_genb::@4/(dword) sin16s_genb::x#1 )
  (word~) sin16s_genb::$1 ← > (dword) sin16s_genb::x#2
  (word) sin16sb::x#0 ← (word~) sin16s_genb::$1
  call sin16sb 
  (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#2
  to:sin16s_genb::@4
sin16s_genb::@4: scope:[sin16s_genb]  from sin16s_genb::@1
  (word) rem16u#30 ← phi( sin16s_genb::@1/(word) rem16u#35 )
  (word) sin16s_genb::wavelength#2 ← phi( sin16s_genb::@1/(word) sin16s_genb::wavelength#3 )
  (word) sin16s_genb::i#2 ← phi( sin16s_genb::@1/(word) sin16s_genb::i#3 )
  (dword) sin16s_genb::step#1 ← phi( sin16s_genb::@1/(dword) sin16s_genb::step#2 )
  (dword) sin16s_genb::x#3 ← phi( sin16s_genb::@1/(dword) sin16s_genb::x#2 )
  (signed word*) sin16s_genb::sintab#2 ← phi( sin16s_genb::@1/(signed word*) sin16s_genb::sintab#3 )
  (signed word) sin16sb::return#3 ← phi( sin16s_genb::@1/(signed word) sin16sb::return#0 )
  (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#3
  *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2
  (signed word*~) sin16s_genb::$3 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_genb::sintab#0 ← (signed word*~) sin16s_genb::$3
  (dword~) sin16s_genb::$4 ← (dword) sin16s_genb::x#3 + (dword) sin16s_genb::step#1
  (dword) sin16s_genb::x#1 ← (dword~) sin16s_genb::$4
  (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2
  (bool~) sin16s_genb::$5 ← (word) sin16s_genb::i#1 < (word) sin16s_genb::wavelength#2
  if((bool~) sin16s_genb::$5) goto sin16s_genb::@1
  to:sin16s_genb::@return
sin16s_genb::@return: scope:[sin16s_genb]  from sin16s_genb::@4
  (word) rem16u#21 ← phi( sin16s_genb::@4/(word) rem16u#30 )
  (word) rem16u#9 ← (word) rem16u#21
  return 
  to:@return
sin16sb: scope:[sin16sb]  from sin16s_genb::@1
  (word) sin16sb::x#3 ← phi( sin16s_genb::@1/(word) sin16sb::x#0 )
  (byte) sin16sb::isUpper#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16sb::$0 ← (word) sin16sb::x#3 >= (word) PI_u4f12#0
  (bool~) sin16sb::$1 ← ! (bool~) sin16sb::$0
  if((bool~) sin16sb::$1) goto sin16sb::@1
  to:sin16sb::@4
sin16sb::@1: scope:[sin16sb]  from sin16sb sin16sb::@4
  (byte) sin16sb::isUpper#8 ← phi( sin16sb/(byte) sin16sb::isUpper#0 sin16sb::@4/(byte) sin16sb::isUpper#1 )
  (word) sin16sb::x#4 ← phi( sin16sb/(word) sin16sb::x#3 sin16sb::@4/(word) sin16sb::x#1 )
  (bool~) sin16sb::$3 ← (word) sin16sb::x#4 >= (word) PI_HALF_u4f12#0
  (bool~) sin16sb::$4 ← ! (bool~) sin16sb::$3
  if((bool~) sin16sb::$4) goto sin16sb::@2
  to:sin16sb::@5
sin16sb::@4: scope:[sin16sb]  from sin16sb
  (word) sin16sb::x#5 ← phi( sin16sb/(word) sin16sb::x#3 )
  (word~) sin16sb::$2 ← (word) sin16sb::x#5 - (word) PI_u4f12#0
  (word) sin16sb::x#1 ← (word~) sin16sb::$2
  (byte) sin16sb::isUpper#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin16sb::@1
sin16sb::@2: scope:[sin16sb]  from sin16sb::@1 sin16sb::@5
  (byte) sin16sb::isUpper#7 ← phi( sin16sb::@1/(byte) sin16sb::isUpper#8 sin16sb::@5/(byte) sin16sb::isUpper#9 )
  (word) sin16sb::x#6 ← phi( sin16sb::@1/(word) sin16sb::x#4 sin16sb::@5/(word) sin16sb::x#2 )
  (word~) sin16sb::$6 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  (word) sin16sb::x1#0 ← (word~) sin16sb::$6
  (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0
  (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0
  (byte) mulu16_sel::select#5 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#7 ← (word) mulu16_sel::return#6
  to:sin16sb::@8
sin16sb::@8: scope:[sin16sb]  from sin16sb::@2
  (byte) sin16sb::isUpper#6 ← phi( sin16sb::@2/(byte) sin16sb::isUpper#7 )
  (word) sin16sb::x1#1 ← phi( sin16sb::@2/(word) sin16sb::x1#0 )
  (word) mulu16_sel::return#18 ← phi( sin16sb::@2/(word) mulu16_sel::return#7 )
  (word~) sin16sb::$7 ← (word) mulu16_sel::return#18
  (word) sin16sb::x2#0 ← (word~) sin16sb::$7
  (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0
  (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#1
  (byte) mulu16_sel::select#6 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu16_sel 
  (word) mulu16_sel::return#8 ← (word) mulu16_sel::return#6
  to:sin16sb::@9
sin16sb::@9: scope:[sin16sb]  from sin16sb::@8
  (byte) sin16sb::isUpper#5 ← phi( sin16sb::@8/(byte) sin16sb::isUpper#6 )
  (word) sin16sb::x1#4 ← phi( sin16sb::@8/(word) sin16sb::x1#1 )
  (word) mulu16_sel::return#19 ← phi( sin16sb::@8/(word) mulu16_sel::return#8 )
  (word~) sin16sb::$8 ← (word) mulu16_sel::return#19
  (word) sin16sb::x3#0 ← (word~) sin16sb::$8
  (word/signed word/dword/signed dword~) sin16sb::$9 ← (dword/signed dword) $10000 / (byte/signed byte/word/signed word/dword/signed dword) 6
  (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0
  (word) mulu16_sel::v2#7 ← (word/signed word/dword/signed dword~) sin16sb::$9
  (byte) mulu16_sel::select#7 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  call mulu16_sel 
  (word) mulu16_sel::return#9 ← (word) mulu16_sel::return#6
  to:sin16sb::@10
sin16sb::@10: scope:[sin16sb]  from sin16sb::@9
  (byte) sin16sb::isUpper#4 ← phi( sin16sb::@9/(byte) sin16sb::isUpper#5 )
  (word) sin16sb::x3#1 ← phi( sin16sb::@9/(word) sin16sb::x3#0 )
  (word) sin16sb::x1#2 ← phi( sin16sb::@9/(word) sin16sb::x1#4 )
  (word) mulu16_sel::return#20 ← phi( sin16sb::@9/(word) mulu16_sel::return#9 )
  (word~) sin16sb::$10 ← (word) mulu16_sel::return#20
  (word) sin16sb::x3_6#0 ← (word~) sin16sb::$10
  (word~) sin16sb::$11 ← (word) sin16sb::x1#2 - (word) sin16sb::x3_6#0
  (word) sin16sb::usinx#0 ← (word~) sin16sb::$11
  (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#1
  (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#2
  (byte) mulu16_sel::select#8 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#6
  to:sin16sb::@11
sin16sb::@11: scope:[sin16sb]  from sin16sb::@10
  (byte) sin16sb::isUpper#3 ← phi( sin16sb::@10/(byte) sin16sb::isUpper#4 )
  (word) sin16sb::usinx#4 ← phi( sin16sb::@10/(word) sin16sb::usinx#0 )
  (word) sin16sb::x1#3 ← phi( sin16sb::@10/(word) sin16sb::x1#2 )
  (word) mulu16_sel::return#21 ← phi( sin16sb::@10/(word) mulu16_sel::return#10 )
  (word~) sin16sb::$12 ← (word) mulu16_sel::return#21
  (word) sin16sb::x4#0 ← (word~) sin16sb::$12
  (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0
  (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#3
  (byte) mulu16_sel::select#9 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call mulu16_sel 
  (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#6
  to:sin16sb::@12
sin16sb::@12: scope:[sin16sb]  from sin16sb::@11
  (byte) sin16sb::isUpper#2 ← phi( sin16sb::@11/(byte) sin16sb::isUpper#3 )
  (word) sin16sb::usinx#2 ← phi( sin16sb::@11/(word) sin16sb::usinx#4 )
  (word) mulu16_sel::return#22 ← phi( sin16sb::@11/(word) mulu16_sel::return#11 )
  (word~) sin16sb::$13 ← (word) mulu16_sel::return#22
  (word) sin16sb::x5#0 ← (word~) sin16sb::$13
  (word~) sin16sb::$14 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (word) sin16sb::x5_128#0 ← (word~) sin16sb::$14
  (word~) sin16sb::$15 ← (word) sin16sb::usinx#2 + (word) sin16sb::x5_128#0
  (word) sin16sb::usinx#1 ← (word~) sin16sb::$15
  (signed word~) sin16sb::$16 ← ((signed word)) (word) sin16sb::usinx#1
  (signed word) sin16sb::sinx#0 ← (signed word~) sin16sb::$16
  (bool~) sin16sb::$17 ← (byte) sin16sb::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16sb::$18 ← ! (bool~) sin16sb::$17
  if((bool~) sin16sb::$18) goto sin16sb::@3
  to:sin16sb::@6
sin16sb::@5: scope:[sin16sb]  from sin16sb::@1
  (byte) sin16sb::isUpper#9 ← phi( sin16sb::@1/(byte) sin16sb::isUpper#8 )
  (word) sin16sb::x#7 ← phi( sin16sb::@1/(word) sin16sb::x#4 )
  (word~) sin16sb::$5 ← (word) PI_u4f12#0 - (word) sin16sb::x#7
  (word) sin16sb::x#2 ← (word~) sin16sb::$5
  to:sin16sb::@2
sin16sb::@3: scope:[sin16sb]  from sin16sb::@12 sin16sb::@6
  (signed word) sin16sb::sinx#2 ← phi( sin16sb::@12/(signed word) sin16sb::sinx#0 sin16sb::@6/(signed word) sin16sb::sinx#1 )
  (signed word) sin16sb::return#1 ← (signed word) sin16sb::sinx#2
  to:sin16sb::@return
sin16sb::@6: scope:[sin16sb]  from sin16sb::@12
  (word) sin16sb::usinx#3 ← phi( sin16sb::@12/(word) sin16sb::usinx#1 )
  (signed word~) sin16sb::$19 ← ((signed word)) (word) sin16sb::usinx#3
  (signed word~) sin16sb::$20 ← - (signed word~) sin16sb::$19
  (signed word) sin16sb::sinx#1 ← (signed word~) sin16sb::$20
  to:sin16sb::@3
sin16sb::@return: scope:[sin16sb]  from sin16sb::@3
  (signed word) sin16sb::return#4 ← phi( sin16sb::@3/(signed word) sin16sb::return#1 )
  (signed word) sin16sb::return#2 ← (signed word) sin16sb::return#4
  return 
  to:@return
@22: scope:[]  from @13
  (word) rem16u#38 ← phi( @13/(word) rem16u#40 )
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@34
print_str: scope:[print_str]  from main::@3 main::@8
  (byte*) print_char_cursor#51 ← phi( main::@3/(byte*) print_char_cursor#49 main::@8/(byte*) print_char_cursor#17 )
  (byte*) print_str::str#5 ← phi( main::@3/(byte*) print_str::str#2 main::@8/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#42 ← phi( print_str/(byte*) print_char_cursor#51 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#3) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#22 ← phi( print_str::@1/(byte*) print_char_cursor#42 )
  (byte*) print_str::str#4 ← phi( print_str::@1/(byte*) print_str::str#3 )
  *((byte*) print_char_cursor#22) ← *((byte*) print_str::str#4)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#22
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#23 ← phi( print_str::@1/(byte*) print_char_cursor#42 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#23
  return 
  to:@return
print_sword: scope:[print_sword]  from main::@2
  (byte*) print_char_cursor#52 ← phi( main::@2/(byte*) print_char_cursor#48 )
  (signed word) print_sword::w#2 ← phi( main::@2/(signed word) print_sword::w#1 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#43 ← phi( print_sword/(byte*) print_char_cursor#52 print_sword::@4/(byte*) print_char_cursor#4 )
  (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#2 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w#3
  (word) print_word::w#0 ← (word~) print_sword::$4
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#24 ← phi( print_sword::@1/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#24
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#5 ← phi( print_sword/(signed word) print_sword::w#2 )
  (byte*) print_char_cursor#44 ← phi( print_sword/(byte*) print_char_cursor#52 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#4 ← phi( print_sword::@2/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#25 ← phi( print_sword::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#25
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w#4
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#26 ← phi( print_sword::@3/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#26
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  (byte*) print_char_cursor#45 ← phi( print_sword::@1/(byte*) print_char_cursor#43 )
  (word) print_word::w#1 ← phi( print_sword::@1/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#27 ← phi( print_word/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#27
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#28 ← phi( print_word::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#28
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#29 ← phi( print_word::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#29
  return 
  to:@return
@34: scope:[]  from @22
  (byte*) print_screen#8 ← phi( @22/(byte*) print_screen#0 )
  (byte*) print_char_cursor#55 ← phi( @22/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#15 ← phi( @22/(byte*) print_line_cursor#0 )
  (word) rem16u#37 ← phi( @22/(word) rem16u#38 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@42
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#46 ← phi( print_word/(byte*) print_char_cursor#45 print_word::@1/(byte*) print_char_cursor#6 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#30 ← phi( print_byte/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#30
  (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word/dword/signed dword) $f
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#31 ← phi( print_byte::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#31
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#32 ← phi( print_byte::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#32
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sword::@2
  (byte*) print_char_cursor#33 ← phi( print_byte/(byte*) print_char_cursor#46 print_byte::@1/(byte*) print_char_cursor#9 print_sword::@2/(byte*) print_char_cursor#44 )
  (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#33
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#34 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#34
  return 
  to:@return
print_cls: scope:[print_cls]  from main::@6
  (byte*) print_screen#1 ← phi( main::@6/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#1 ← (byte*) print_screen#3
  (byte*) print_char_cursor#14 ← (byte*) print_line_cursor#1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#35 ← phi( print_cls::@2/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#6 ← phi( print_cls::@2/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#6
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#35
  return 
  to:@return
main: scope:[main]  from @42
  (byte*) print_char_cursor#56 ← phi( @42/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#16 ← phi( @42/(byte*) print_line_cursor#12 )
  (byte*) print_screen#6 ← phi( @42/(byte*) print_screen#7 )
  (word) rem16u#31 ← phi( @42/(word) rem16u#33 )
  (word) main::wavelength#0 ← (byte/signed byte/word/signed word/dword/signed dword) $78
  (signed word[$78]) main::sintab1#0 ← { fill( $78, 0) }
  (signed word[$78]) main::sintab2#0 ← { fill( $78, 0) }
  (signed word*) sin16s_gen::sintab#1 ← (signed word[$78]) main::sintab1#0
  (word) sin16s_gen::wavelength#0 ← (word) main::wavelength#0
  call sin16s_gen 
  to:main::@5
main::@5: scope:[main]  from main
  (byte*) print_char_cursor#53 ← phi( main/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#16 )
  (byte*) print_screen#5 ← phi( main/(byte*) print_screen#6 )
  (word) rem16u#22 ← phi( main/(word) rem16u#7 )
  (word) rem16u#10 ← (word) rem16u#22
  (signed word*) sin16s_genb::sintab#1 ← (signed word[$78]) main::sintab2#0
  (word) sin16s_genb::wavelength#0 ← (word) main::wavelength#0
  call sin16s_genb 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_char_cursor#47 ← phi( main::@5/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#10 ← phi( main::@5/(byte*) print_line_cursor#13 )
  (byte*) print_screen#4 ← phi( main::@5/(byte*) print_screen#5 )
  (word) rem16u#23 ← phi( main::@5/(word) rem16u#9 )
  (word) rem16u#11 ← (word) rem16u#23
  call print_cls 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (word) rem16u#44 ← phi( main::@6/(word) rem16u#11 )
  (byte*) print_char_cursor#36 ← phi( main::@6/(byte*) print_char_cursor#15 )
  (byte*) print_line_cursor#7 ← phi( main::@6/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#7
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#36
  (signed word*) main::st1#0 ← (signed word[$78]) main::sintab1#0
  (signed word*) main::st2#0 ← (signed word[$78]) main::sintab2#0
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@7 main::@9
  (byte*) print_line_cursor#18 ← phi( main::@7/(byte*) print_line_cursor#3 main::@9/(byte*) print_line_cursor#11 )
  (word) rem16u#41 ← phi( main::@7/(word) rem16u#44 main::@9/(word) rem16u#32 )
  (byte) main::i#5 ← phi( main::@7/(byte) main::i#0 main::@9/(byte) main::i#1 )
  (byte*) print_char_cursor#54 ← phi( main::@7/(byte*) print_char_cursor#16 main::@9/(byte*) print_char_cursor#18 )
  (signed word*) main::st2#2 ← phi( main::@7/(signed word*) main::st2#0 main::@9/(signed word*) main::st2#1 )
  (signed word*) main::st1#2 ← phi( main::@7/(signed word*) main::st1#0 main::@9/(signed word*) main::st1#1 )
  (signed word~) main::$3 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2)
  (signed word) main::sw#0 ← (signed word~) main::$3
  (bool~) main::$4 ← (signed word) main::sw#0 >= (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) main::$5 ← ! (bool~) main::$4
  if((bool~) main::$5) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@10
  (byte*) print_line_cursor#17 ← phi( main::@1/(byte*) print_line_cursor#18 main::@10/(byte*) print_line_cursor#19 )
  (word) rem16u#39 ← phi( main::@1/(word) rem16u#41 main::@10/(word) rem16u#42 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#5 main::@10/(byte) main::i#6 )
  (signed word*) main::st2#5 ← phi( main::@1/(signed word*) main::st2#2 main::@10/(signed word*) main::st2#6 )
  (signed word*) main::st1#5 ← phi( main::@1/(signed word*) main::st1#2 main::@10/(signed word*) main::st1#6 )
  (byte*) print_char_cursor#48 ← phi( main::@1/(byte*) print_char_cursor#54 main::@10/(byte*) print_char_cursor#19 )
  (signed word) main::sw#1 ← phi( main::@1/(signed word) main::sw#0 main::@10/(signed word) main::sw#2 )
  (signed word) print_sword::w#1 ← (signed word) main::sw#1
  call print_sword 
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte*) print_line_cursor#14 ← phi( main::@2/(byte*) print_line_cursor#17 )
  (word) rem16u#36 ← phi( main::@2/(word) rem16u#39 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#4 )
  (signed word*) main::st2#4 ← phi( main::@2/(signed word*) main::st2#5 )
  (signed word*) main::st1#4 ← phi( main::@2/(signed word*) main::st1#5 )
  (byte*) print_char_cursor#37 ← phi( main::@2/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#37
  (byte*) print_str::str#1 ← (const string) main::str
  call print_str 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte*) print_line_cursor#11 ← phi( main::@8/(byte*) print_line_cursor#14 )
  (word) rem16u#32 ← phi( main::@8/(word) rem16u#36 )
  (byte) main::i#2 ← phi( main::@8/(byte) main::i#3 )
  (signed word*) main::st2#3 ← phi( main::@8/(signed word*) main::st2#4 )
  (signed word*) main::st1#3 ← phi( main::@8/(signed word*) main::st1#4 )
  (byte*) print_char_cursor#38 ← phi( main::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#38
  (signed word*~) main::$9 ← (signed word*) main::st1#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) main::st1#1 ← (signed word*~) main::$9
  (signed word*~) main::$10 ← (signed word*) main::st2#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) main::st2#1 ← (signed word*~) main::$10
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$77)
  (bool~) main::$11 ← (byte) main::i#1 != rangelast(0,$77)
  if((bool~) main::$11) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) print_line_cursor#20 ← phi( main::@1/(byte*) print_line_cursor#18 )
  (word) rem16u#45 ← phi( main::@1/(word) rem16u#41 )
  (byte) main::i#7 ← phi( main::@1/(byte) main::i#5 )
  (signed word*) main::st2#7 ← phi( main::@1/(signed word*) main::st2#2 )
  (signed word*) main::st1#7 ← phi( main::@1/(signed word*) main::st1#2 )
  (signed word) main::sw#3 ← phi( main::@1/(signed word) main::sw#0 )
  (byte*) print_char_cursor#49 ← phi( main::@1/(byte*) print_char_cursor#54 )
  (byte*) print_str::str#2 ← (const string) main::str1
  call print_str 
  to:main::@10
main::@10: scope:[main]  from main::@3
  (byte*) print_line_cursor#19 ← phi( main::@3/(byte*) print_line_cursor#20 )
  (word) rem16u#42 ← phi( main::@3/(word) rem16u#45 )
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#7 )
  (signed word*) main::st2#6 ← phi( main::@3/(signed word*) main::st2#7 )
  (signed word*) main::st1#6 ← phi( main::@3/(signed word*) main::st1#7 )
  (signed word) main::sw#2 ← phi( main::@3/(signed word) main::sw#3 )
  (byte*) print_char_cursor#39 ← phi( main::@3/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#39
  to:main::@2
main::@return: scope:[main]  from main::@9
  (byte*) print_char_cursor#40 ← phi( main::@9/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#8 ← phi( main::@9/(byte*) print_line_cursor#11 )
  (word) rem16u#24 ← phi( main::@9/(word) rem16u#32 )
  (word) rem16u#12 ← (word) rem16u#24
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#8
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#40
  return 
  to:@return
@42: scope:[]  from @34
  (byte*) print_screen#7 ← phi( @34/(byte*) print_screen#8 )
  (byte*) print_char_cursor#50 ← phi( @34/(byte*) print_char_cursor#55 )
  (byte*) print_line_cursor#12 ← phi( @34/(byte*) print_line_cursor#15 )
  (word) rem16u#33 ← phi( @34/(word) rem16u#37 )
  call main 
  to:@43
@43: scope:[]  from @42
  (byte*) print_char_cursor#41 ← phi( @42/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#9 ← phi( @42/(byte*) print_line_cursor#4 )
  (word) rem16u#25 ← phi( @42/(word) rem16u#12 )
  (word) rem16u#13 ← (word) rem16u#25
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#41
  to:@end
@end: scope:[]  from @43

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @13
(label) @2
(label) @22
(label) @34
(label) @42
(label) @43
(label) @5
(label) @6
(label) @begin
(label) @end
(word) PI2_u4f12
(word) PI2_u4f12#0
(dword) PI2_u4f28
(dword) PI2_u4f28#0
(word) PI_HALF_u4f12
(word) PI_HALF_u4f12#0
(dword) PI_HALF_u4f28
(dword) PI_HALF_u4f28#0
(word) PI_u4f12
(word) PI_u4f12#0
(dword) PI_u4f28
(dword) PI_u4f28#0
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@2
(label) div32u16u::@3
(label) div32u16u::@return
(dword) div32u16u::dividend
(dword) div32u16u::dividend#0
(dword) div32u16u::dividend#1
(dword) div32u16u::dividend#2
(dword) div32u16u::dividend#3
(word) div32u16u::divisor
(word) div32u16u::divisor#0
(word) div32u16u::divisor#1
(word) div32u16u::divisor#2
(word) div32u16u::divisor#3
(dword) div32u16u::quotient
(dword) div32u16u::quotient#0
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0
(word) div32u16u::quotient_hi#1
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0
(dword) div32u16u::return
(dword) div32u16u::return#0
(dword) div32u16u::return#1
(dword) div32u16u::return#2
(dword) div32u16u::return#3
(dword) div32u16u::return#4
(dword) div32u16u::return#5
(dword) div32u16u::return#6
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(byte~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(word/dword~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::dividend#8
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(word) divr16u::divisor#7
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#11
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(word) divr16u::return#5
(word) divr16u::return#6
(void()) main()
(signed word*~) main::$10
(bool~) main::$11
(signed word~) main::$3
(bool~) main::$4
(bool~) main::$5
(signed word*~) main::$9
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(signed word[$78]) main::sintab1
(signed word[$78]) main::sintab1#0
(signed word[$78]) main::sintab2
(signed word[$78]) main::sintab2#0
(signed word*) main::st1
(signed word*) main::st1#0
(signed word*) main::st1#1
(signed word*) main::st1#2
(signed word*) main::st1#3
(signed word*) main::st1#4
(signed word*) main::st1#5
(signed word*) main::st1#6
(signed word*) main::st1#7
(signed word*) main::st2
(signed word*) main::st2#0
(signed word*) main::st2#1
(signed word*) main::st2#2
(signed word*) main::st2#3
(signed word*) main::st2#4
(signed word*) main::st2#5
(signed word*) main::st2#6
(signed word*) main::st2#7
(const string) main::str = (string) "   @"
(const string) main::str1 = (string) " @"
(signed word) main::sw
(signed word) main::sw#0
(signed word) main::sw#1
(signed word) main::sw#2
(signed word) main::sw#3
(word) main::wavelength
(word) main::wavelength#0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(byte/word~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0
(word) mulu16_sel::return#1
(word) mulu16_sel::return#10
(word) mulu16_sel::return#11
(word) mulu16_sel::return#12
(word) mulu16_sel::return#13
(word) mulu16_sel::return#14
(word) mulu16_sel::return#15
(word) mulu16_sel::return#16
(word) mulu16_sel::return#17
(word) mulu16_sel::return#18
(word) mulu16_sel::return#19
(word) mulu16_sel::return#2
(word) mulu16_sel::return#20
(word) mulu16_sel::return#21
(word) mulu16_sel::return#22
(word) mulu16_sel::return#3
(word) mulu16_sel::return#4
(word) mulu16_sel::return#5
(word) mulu16_sel::return#6
(word) mulu16_sel::return#7
(word) mulu16_sel::return#8
(word) mulu16_sel::return#9
(byte) mulu16_sel::select
(byte) mulu16_sel::select#0
(byte) mulu16_sel::select#1
(byte) mulu16_sel::select#10
(byte) mulu16_sel::select#11
(byte) mulu16_sel::select#2
(byte) mulu16_sel::select#3
(byte) mulu16_sel::select#4
(byte) mulu16_sel::select#5
(byte) mulu16_sel::select#6
(byte) mulu16_sel::select#7
(byte) mulu16_sel::select#8
(byte) mulu16_sel::select#9
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0
(word) mulu16_sel::v1#1
(word) mulu16_sel::v1#10
(word) mulu16_sel::v1#2
(word) mulu16_sel::v1#3
(word) mulu16_sel::v1#4
(word) mulu16_sel::v1#5
(word) mulu16_sel::v1#6
(word) mulu16_sel::v1#7
(word) mulu16_sel::v1#8
(word) mulu16_sel::v1#9
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0
(word) mulu16_sel::v2#1
(word) mulu16_sel::v2#10
(word) mulu16_sel::v2#2
(word) mulu16_sel::v2#3
(word) mulu16_sel::v2#4
(word) mulu16_sel::v2#5
(word) mulu16_sel::v2#6
(word) mulu16_sel::v2#7
(word) mulu16_sel::v2#8
(word) mulu16_sel::v2#9
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(signed word~) print_sword::$3
(word~) print_sword::$4
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(signed word) rem16s
(signed word) rem16s#0
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(byte) rem8u
(byte) rem8u#0
(signed word()) sin16s((dword) sin16s::x)
(bool~) sin16s::$0
(bool~) sin16s::$1
(word/signed word/dword/signed dword~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(word~) sin16s::$14
(word~) sin16s::$15
(word~) sin16s::$16
(signed word~) sin16s::$17
(bool~) sin16s::$18
(bool~) sin16s::$19
(dword~) sin16s::$2
(signed word~) sin16s::$20
(signed word~) sin16s::$21
(bool~) sin16s::$3
(bool~) sin16s::$4
(dword~) sin16s::$5
(dword~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#0
(byte) sin16s::isUpper#1
(byte) sin16s::isUpper#2
(byte) sin16s::isUpper#3
(byte) sin16s::isUpper#4
(byte) sin16s::isUpper#5
(byte) sin16s::isUpper#6
(byte) sin16s::isUpper#7
(byte) sin16s::isUpper#8
(byte) sin16s::isUpper#9
(signed word) sin16s::return
(signed word) sin16s::return#0
(signed word) sin16s::return#1
(signed word) sin16s::return#2
(signed word) sin16s::return#3
(signed word) sin16s::return#4
(signed word) sin16s::sinx
(signed word) sin16s::sinx#0
(signed word) sin16s::sinx#1
(signed word) sin16s::sinx#2
(word) sin16s::usinx
(word) sin16s::usinx#0
(word) sin16s::usinx#1
(word) sin16s::usinx#2
(word) sin16s::usinx#3
(word) sin16s::usinx#4
(dword) sin16s::x
(dword) sin16s::x#0
(dword) sin16s::x#1
(dword) sin16s::x#2
(dword) sin16s::x#3
(dword) sin16s::x#4
(dword) sin16s::x#5
(dword) sin16s::x#6
(dword) sin16s::x#7
(word) sin16s::x1
(word) sin16s::x1#0
(word) sin16s::x1#1
(word) sin16s::x1#2
(word) sin16s::x1#3
(word) sin16s::x1#4
(word) sin16s::x2
(word) sin16s::x2#0
(word) sin16s::x3
(word) sin16s::x3#0
(word) sin16s::x3#1
(word) sin16s::x3_6
(word) sin16s::x3_6#0
(word) sin16s::x4
(word) sin16s::x4#0
(word) sin16s::x5
(word) sin16s::x5#0
(word) sin16s::x5_128
(word) sin16s::x5_128#0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(dword~) sin16s_gen::$0
(signed word~) sin16s_gen::$1
(signed word*~) sin16s_gen::$2
(dword~) sin16s_gen::$3
(bool~) sin16s_gen::$4
(label) sin16s_gen::@1
(label) sin16s_gen::@3
(label) sin16s_gen::@4
(label) sin16s_gen::@return
(word) sin16s_gen::i
(word) sin16s_gen::i#0
(word) sin16s_gen::i#1
(word) sin16s_gen::i#2
(word) sin16s_gen::i#3
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0
(signed word*) sin16s_gen::sintab#1
(signed word*) sin16s_gen::sintab#2
(signed word*) sin16s_gen::sintab#3
(signed word*) sin16s_gen::sintab#4
(signed word*) sin16s_gen::sintab#5
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0
(dword) sin16s_gen::step#1
(dword) sin16s_gen::step#2
(word) sin16s_gen::wavelength
(word) sin16s_gen::wavelength#0
(word) sin16s_gen::wavelength#1
(word) sin16s_gen::wavelength#2
(word) sin16s_gen::wavelength#3
(word) sin16s_gen::wavelength#4
(dword) sin16s_gen::x
(dword) sin16s_gen::x#0
(dword) sin16s_gen::x#1
(dword) sin16s_gen::x#2
(dword) sin16s_gen::x#3
(void()) sin16s_genb((signed word*) sin16s_genb::sintab , (word) sin16s_genb::wavelength)
(dword~) sin16s_genb::$0
(word~) sin16s_genb::$1
(signed word~) sin16s_genb::$2
(signed word*~) sin16s_genb::$3
(dword~) sin16s_genb::$4
(bool~) sin16s_genb::$5
(label) sin16s_genb::@1
(label) sin16s_genb::@3
(label) sin16s_genb::@4
(label) sin16s_genb::@return
(word) sin16s_genb::i
(word) sin16s_genb::i#0
(word) sin16s_genb::i#1
(word) sin16s_genb::i#2
(word) sin16s_genb::i#3
(signed word*) sin16s_genb::sintab
(signed word*) sin16s_genb::sintab#0
(signed word*) sin16s_genb::sintab#1
(signed word*) sin16s_genb::sintab#2
(signed word*) sin16s_genb::sintab#3
(signed word*) sin16s_genb::sintab#4
(signed word*) sin16s_genb::sintab#5
(dword) sin16s_genb::step
(dword) sin16s_genb::step#0
(dword) sin16s_genb::step#1
(dword) sin16s_genb::step#2
(word) sin16s_genb::wavelength
(word) sin16s_genb::wavelength#0
(word) sin16s_genb::wavelength#1
(word) sin16s_genb::wavelength#2
(word) sin16s_genb::wavelength#3
(word) sin16s_genb::wavelength#4
(dword) sin16s_genb::x
(dword) sin16s_genb::x#0
(dword) sin16s_genb::x#1
(dword) sin16s_genb::x#2
(dword) sin16s_genb::x#3
(signed word()) sin16sb((word) sin16sb::x)
(bool~) sin16sb::$0
(bool~) sin16sb::$1
(word~) sin16sb::$10
(word~) sin16sb::$11
(word~) sin16sb::$12
(word~) sin16sb::$13
(word~) sin16sb::$14
(word~) sin16sb::$15
(signed word~) sin16sb::$16
(bool~) sin16sb::$17
(bool~) sin16sb::$18
(signed word~) sin16sb::$19
(word~) sin16sb::$2
(signed word~) sin16sb::$20
(bool~) sin16sb::$3
(bool~) sin16sb::$4
(word~) sin16sb::$5
(word~) sin16sb::$6
(word~) sin16sb::$7
(word~) sin16sb::$8
(word/signed word/dword/signed dword~) sin16sb::$9
(label) sin16sb::@1
(label) sin16sb::@10
(label) sin16sb::@11
(label) sin16sb::@12
(label) sin16sb::@2
(label) sin16sb::@3
(label) sin16sb::@4
(label) sin16sb::@5
(label) sin16sb::@6
(label) sin16sb::@8
(label) sin16sb::@9
(label) sin16sb::@return
(byte) sin16sb::isUpper
(byte) sin16sb::isUpper#0
(byte) sin16sb::isUpper#1
(byte) sin16sb::isUpper#2
(byte) sin16sb::isUpper#3
(byte) sin16sb::isUpper#4
(byte) sin16sb::isUpper#5
(byte) sin16sb::isUpper#6
(byte) sin16sb::isUpper#7
(byte) sin16sb::isUpper#8
(byte) sin16sb::isUpper#9
(signed word) sin16sb::return
(signed word) sin16sb::return#0
(signed word) sin16sb::return#1
(signed word) sin16sb::return#2
(signed word) sin16sb::return#3
(signed word) sin16sb::return#4
(signed word) sin16sb::sinx
(signed word) sin16sb::sinx#0
(signed word) sin16sb::sinx#1
(signed word) sin16sb::sinx#2
(word) sin16sb::usinx
(word) sin16sb::usinx#0
(word) sin16sb::usinx#1
(word) sin16sb::usinx#2
(word) sin16sb::usinx#3
(word) sin16sb::usinx#4
(word) sin16sb::x
(word) sin16sb::x#0
(word) sin16sb::x#1
(word) sin16sb::x#2
(word) sin16sb::x#3
(word) sin16sb::x#4
(word) sin16sb::x#5
(word) sin16sb::x#6
(word) sin16sb::x#7
(word) sin16sb::x1
(word) sin16sb::x1#0
(word) sin16sb::x1#1
(word) sin16sb::x1#2
(word) sin16sb::x1#3
(word) sin16sb::x1#4
(word) sin16sb::x2
(word) sin16sb::x2#0
(word) sin16sb::x3
(word) sin16sb::x3#0
(word) sin16sb::x3#1
(word) sin16sb::x3_6
(word) sin16sb::x3_6#0
(word) sin16sb::x4
(word) sin16sb::x4#0
(word) sin16sb::x5
(word) sin16sb::x5#0
(word) sin16sb::x5_128
(word) sin16sb::x5_128#0

Inversing boolean not [11] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [10] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [19] (bool~) divr16u::$9 ← (word) divr16u::rem#6 < (word) divr16u::divisor#2 from [18] (bool~) divr16u::$8 ← (word) divr16u::rem#6 >= (word) divr16u::divisor#2
Inversing boolean not [79] (bool~) mul16u::$3 ← (byte/word~) mul16u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [78] (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [132] (bool~) sin16s::$1 ← (dword) sin16s::x#3 < (dword) PI_u4f28#0 from [131] (bool~) sin16s::$0 ← (dword) sin16s::x#3 >= (dword) PI_u4f28#0
Inversing boolean not [136] (bool~) sin16s::$4 ← (dword) sin16s::x#4 < (dword) PI_HALF_u4f28#0 from [135] (bool~) sin16s::$3 ← (dword) sin16s::x#4 >= (dword) PI_HALF_u4f28#0
Inversing boolean not [196] (bool~) sin16s::$19 ← (byte) sin16s::isUpper#2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [195] (bool~) sin16s::$18 ← (byte) sin16s::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [255] (bool~) sin16sb::$1 ← (word) sin16sb::x#3 < (word) PI_u4f12#0 from [254] (bool~) sin16sb::$0 ← (word) sin16sb::x#3 >= (word) PI_u4f12#0
Inversing boolean not [259] (bool~) sin16sb::$4 ← (word) sin16sb::x#4 < (word) PI_HALF_u4f12#0 from [258] (bool~) sin16sb::$3 ← (word) sin16sb::x#4 >= (word) PI_HALF_u4f12#0
Inversing boolean not [318] (bool~) sin16sb::$18 ← (byte) sin16sb::isUpper#2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from [317] (bool~) sin16sb::$17 ← (byte) sin16sb::isUpper#2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [349] (bool~) print_sword::$1 ← (signed word) print_sword::w#2 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from [348] (bool~) print_sword::$0 ← (signed word) print_sword::w#2 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [443] (bool~) main::$5 ← (signed word) main::sw#0 < (byte/signed byte/word/signed word/dword/signed dword) 0 from [442] (bool~) main::$4 ← (signed word) main::sw#0 >= (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#7 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#8 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#4 = (word) divr16u::divisor#5 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word/dword~) divr16u::$5 
Alias (word) divr16u::rem#6 = (word) divr16u::rem#8 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#3 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#11 = (word) divr16u::rem#9 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#4 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#14 (word) rem16u#2 
Alias (word) divr16u::dividend#1 = (word~) div32u16u::$0 
Alias (word) divr16u::return#2 = (word) divr16u::return#5 
Alias (dword) div32u16u::dividend#2 = (dword) div32u16u::dividend#3 
Alias (word) div32u16u::divisor#2 = (word) div32u16u::divisor#3 
Alias (word) rem16u#15 = (word) rem16u#3 
Alias (word) div32u16u::quotient_hi#0 = (word~) div32u16u::$1 (word) div32u16u::quotient_hi#1 
Alias (word) divr16u::dividend#2 = (word~) div32u16u::$2 
Alias (word) divr16u::return#3 = (word) divr16u::return#6 
Alias (word) rem16u#16 = (word) rem16u#4 (word) rem16u#17 (word) rem16u#5 
Alias (word) div32u16u::quotient_lo#0 = (word~) div32u16u::$3 
Alias (dword) div32u16u::return#0 = (dword) div32u16u::quotient#0 (dword) div32u16u::return#4 (dword) div32u16u::return#1 
Alias (word) rem16u#0 = (word) rem16u#46 (word) rem16u#43 (word) rem16u#40 (word) rem16u#38 (word) rem16u#37 (word) rem16u#33 
Alias (word) mul16u::a#2 = (word) mul16u::a#3 (word) mul16u::a#6 
Alias (dword) mul16u::mb#3 = (dword) mul16u::mb#4 (dword) mul16u::mb#5 
Alias (dword) mul16u::res#2 = (dword) mul16u::res#5 (dword) mul16u::res#4 (dword) mul16u::return#0 (dword) mul16u::res#3 (dword) mul16u::return#3 (dword) mul16u::return#1 
Alias (word) mul16u::a#0 = (word~) mul16u::$5 
Alias (dword) mul16u::mb#1 = (dword~) mul16u::$6 
Alias (dword) mul16u::res#1 = (dword~) mul16u::$4 
Alias (dword) div32u16u::return#2 = (dword) div32u16u::return#5 
Alias (signed word*) sin16s_gen::sintab#4 = (signed word*) sin16s_gen::sintab#5 
Alias (word) sin16s_gen::wavelength#1 = (word) sin16s_gen::wavelength#4 
Alias (word) rem16u#18 = (word) rem16u#6 
Alias (dword) sin16s_gen::step#0 = (dword~) sin16s_gen::$0 
Alias (signed word) sin16s::return#0 = (signed word) sin16s::return#3 
Alias (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#3 
Alias (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#3 
Alias (dword) sin16s_gen::step#1 = (dword) sin16s_gen::step#2 
Alias (word) sin16s_gen::i#2 = (word) sin16s_gen::i#3 
Alias (word) sin16s_gen::wavelength#2 = (word) sin16s_gen::wavelength#3 
Alias (word) rem16u#19 = (word) rem16u#28 (word) rem16u#34 (word) rem16u#7 
Alias (signed word*) sin16s_gen::sintab#0 = (signed word*~) sin16s_gen::$2 
Alias (dword) sin16s_gen::x#1 = (dword~) sin16s_gen::$3 
Alias (dword) sin16s::x#3 = (dword) sin16s::x#5 
Alias (dword) sin16s::x#1 = (dword~) sin16s::$2 
Alias (word) sin16s::x1#0 = (word~) sin16s::$7 (word) sin16s::x1#1 (word) sin16s::x1#4 (word) sin16s::x1#2 (word) sin16s::x1#3 
Alias (word) mulu16_sel::return#0 = (word) mulu16_sel::return#12 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#6 (byte) sin16s::isUpper#7 (byte) sin16s::isUpper#5 (byte) sin16s::isUpper#4 (byte) sin16s::isUpper#3 
Alias (word) sin16s::x2#0 = (word~) sin16s::$8 
Alias (word) mulu16_sel::return#1 = (word) mulu16_sel::return#13 
Alias (word) sin16s::x3#0 = (word~) sin16s::$9 (word) sin16s::x3#1 
Alias (word) mulu16_sel::v2#2 = (word/signed word/dword/signed dword~) sin16s::$10 
Alias (word) mulu16_sel::return#14 = (word) mulu16_sel::return#2 
Alias (word) sin16s::x3_6#0 = (word~) sin16s::$11 
Alias (word) sin16s::usinx#0 = (word~) sin16s::$12 (word) sin16s::usinx#4 (word) sin16s::usinx#2 
Alias (word) mulu16_sel::return#15 = (word) mulu16_sel::return#3 
Alias (word) sin16s::x4#0 = (word~) sin16s::$13 
Alias (word) mulu16_sel::return#16 = (word) mulu16_sel::return#4 
Alias (word) sin16s::x5#0 = (word~) sin16s::$14 
Alias (word) sin16s::x5_128#0 = (word~) sin16s::$15 
Alias (word) sin16s::usinx#1 = (word~) sin16s::$16 (word) sin16s::usinx#3 
Alias (signed word) sin16s::sinx#0 = (signed word~) sin16s::$17 
Alias (dword) sin16s::x#4 = (dword) sin16s::x#7 
Alias (byte) sin16s::isUpper#8 = (byte) sin16s::isUpper#9 
Alias (dword) sin16s::x#2 = (dword~) sin16s::$5 
Alias (signed word) sin16s::return#1 = (signed word) sin16s::sinx#2 (signed word) sin16s::return#4 (signed word) sin16s::return#2 
Alias (signed word) sin16s::sinx#1 = (signed word~) sin16s::$21 
Alias (dword) mul16u::return#2 = (dword) mul16u::return#4 
Alias (byte) mulu16_sel::select#10 = (byte) mulu16_sel::select#11 
Alias (word) mulu16_sel::return#17 = (word) mulu16_sel::return#5 (word~) mulu16_sel::$2 (word) mulu16_sel::return#6 
Alias (dword) div32u16u::return#3 = (dword) div32u16u::return#6 
Alias (signed word*) sin16s_genb::sintab#4 = (signed word*) sin16s_genb::sintab#5 
Alias (word) sin16s_genb::wavelength#1 = (word) sin16s_genb::wavelength#4 
Alias (word) rem16u#20 = (word) rem16u#8 
Alias (dword) sin16s_genb::step#0 = (dword~) sin16s_genb::$0 
Alias (word) sin16sb::x#0 = (word~) sin16s_genb::$1 
Alias (signed word) sin16sb::return#0 = (signed word) sin16sb::return#3 
Alias (signed word*) sin16s_genb::sintab#2 = (signed word*) sin16s_genb::sintab#3 
Alias (dword) sin16s_genb::x#2 = (dword) sin16s_genb::x#3 
Alias (dword) sin16s_genb::step#1 = (dword) sin16s_genb::step#2 
Alias (word) sin16s_genb::i#2 = (word) sin16s_genb::i#3 
Alias (word) sin16s_genb::wavelength#2 = (word) sin16s_genb::wavelength#3 
Alias (word) rem16u#21 = (word) rem16u#30 (word) rem16u#35 (word) rem16u#9 
Alias (signed word*) sin16s_genb::sintab#0 = (signed word*~) sin16s_genb::$3 
Alias (dword) sin16s_genb::x#1 = (dword~) sin16s_genb::$4 
Alias (word) sin16sb::x#3 = (word) sin16sb::x#5 
Alias (word) sin16sb::x#1 = (word~) sin16sb::$2 
Alias (word) sin16sb::x1#0 = (word~) sin16sb::$6 (word) sin16sb::x1#1 (word) sin16sb::x1#4 (word) sin16sb::x1#2 (word) sin16sb::x1#3 
Alias (word) mulu16_sel::return#18 = (word) mulu16_sel::return#7 
Alias (byte) sin16sb::isUpper#2 = (byte) sin16sb::isUpper#6 (byte) sin16sb::isUpper#7 (byte) sin16sb::isUpper#5 (byte) sin16sb::isUpper#4 (byte) sin16sb::isUpper#3 
Alias (word) sin16sb::x2#0 = (word~) sin16sb::$7 
Alias (word) mulu16_sel::return#19 = (word) mulu16_sel::return#8 
Alias (word) sin16sb::x3#0 = (word~) sin16sb::$8 (word) sin16sb::x3#1 
Alias (word) mulu16_sel::v2#7 = (word/signed word/dword/signed dword~) sin16sb::$9 
Alias (word) mulu16_sel::return#20 = (word) mulu16_sel::return#9 
Alias (word) sin16sb::x3_6#0 = (word~) sin16sb::$10 
Alias (word) sin16sb::usinx#0 = (word~) sin16sb::$11 (word) sin16sb::usinx#4 (word) sin16sb::usinx#2 
Alias (word) mulu16_sel::return#10 = (word) mulu16_sel::return#21 
Alias (word) sin16sb::x4#0 = (word~) sin16sb::$12 
Alias (word) mulu16_sel::return#11 = (word) mulu16_sel::return#22 
Alias (word) sin16sb::x5#0 = (word~) sin16sb::$13 
Alias (word) sin16sb::x5_128#0 = (word~) sin16sb::$14 
Alias (word) sin16sb::usinx#1 = (word~) sin16sb::$15 (word) sin16sb::usinx#3 
Alias (signed word) sin16sb::sinx#0 = (signed word~) sin16sb::$16 
Alias (word) sin16sb::x#4 = (word) sin16sb::x#7 
Alias (byte) sin16sb::isUpper#8 = (byte) sin16sb::isUpper#9 
Alias (word) sin16sb::x#2 = (word~) sin16sb::$5 
Alias (signed word) sin16sb::return#1 = (signed word) sin16sb::sinx#2 (signed word) sin16sb::return#4 (signed word) sin16sb::return#2 
Alias (signed word) sin16sb::sinx#1 = (signed word~) sin16sb::$20 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#15 (byte*) print_char_cursor#55 (byte*) print_screen#8 (byte*) print_line_cursor#12 (byte*) print_char_cursor#50 (byte*) print_screen#7 
Alias (byte*) print_str::str#3 = (byte*) print_str::str#4 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#22 (byte*) print_char_cursor#42 (byte*) print_char_cursor#23 
Alias (word) print_word::w#0 = (word~) print_sword::$4 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#3 (byte*) print_char_cursor#26 (byte*) print_char_cursor#5 
Alias (byte*) print_char_cursor#44 = (byte*) print_char_cursor#52 
Alias (signed word) print_sword::w#2 = (signed word) print_sword::w#5 (signed word) print_sword::w#4 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#4 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$3 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#6 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#7 (byte*) print_char_cursor#29 (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#9 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#31 (byte*) print_char_cursor#32 (byte*) print_char_cursor#11 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#13 
Alias (byte*) print_line_cursor#1 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_char_cursor#14 (byte*) print_line_cursor#6 (byte*) print_char_cursor#35 (byte*) print_line_cursor#2 (byte*) print_char_cursor#15 
Alias (byte*) print_screen#4 = (byte*) print_screen#5 (byte*) print_screen#6 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#13 (byte*) print_line_cursor#16 
Alias (byte*) print_char_cursor#47 = (byte*) print_char_cursor#53 (byte*) print_char_cursor#56 
Alias (word) rem16u#10 = (word) rem16u#22 
Alias (word) rem16u#11 = (word) rem16u#23 (word) rem16u#44 
Alias (byte*) print_line_cursor#3 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#36 
Alias (signed word[$78]) main::sintab1#0 = (signed word*) main::st1#0 
Alias (signed word[$78]) main::sintab2#0 = (signed word*) main::st2#0 
Alias (signed word) main::sw#0 = (signed word~) main::$3 (signed word) main::sw#3 (signed word) main::sw#2 
Alias (signed word*) main::st1#3 = (signed word*) main::st1#4 (signed word*) main::st1#5 
Alias (signed word*) main::st2#3 = (signed word*) main::st2#4 (signed word*) main::st2#5 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Alias (word) rem16u#12 = (word) rem16u#36 (word) rem16u#39 (word) rem16u#32 (word) rem16u#24 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#14 (byte*) print_line_cursor#17 (byte*) print_line_cursor#8 (byte*) print_line_cursor#4 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#37 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#38 (byte*) print_char_cursor#40 (byte*) print_char_cursor#20 
Alias (signed word*) main::st1#1 = (signed word*~) main::$9 
Alias (signed word*) main::st2#1 = (signed word*~) main::$10 
Alias (byte*) print_char_cursor#49 = (byte*) print_char_cursor#54 
Alias (signed word*) main::st1#2 = (signed word*) main::st1#7 (signed word*) main::st1#6 
Alias (signed word*) main::st2#2 = (signed word*) main::st2#7 (signed word*) main::st2#6 
Alias (byte) main::i#5 = (byte) main::i#7 (byte) main::i#6 
Alias (word) rem16u#41 = (word) rem16u#45 (word) rem16u#42 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#20 (byte*) print_line_cursor#19 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#39 
Alias (word) rem16u#13 = (word) rem16u#25 
Alias (byte*) print_line_cursor#5 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#41 
Successful SSA optimization Pass2AliasElimination
Alias (word) divr16u::dividend#3 = (word) divr16u::dividend#4 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#2 = (word) divr16u::divisor#4 (word) divr16u::divisor#7 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#6 
Alias (word) mul16u::a#2 = (word) mul16u::a#4 
Alias (dword) mul16u::mb#2 = (dword) mul16u::mb#3 
Alias (byte) sin16s::isUpper#2 = (byte) sin16s::isUpper#8 
Alias (byte) sin16sb::isUpper#2 = (byte) sin16sb::isUpper#8 
Alias (signed word) main::sw#0 = (signed word) main::sw#1 
Alias (signed word*) main::st1#2 = (signed word*) main::st1#3 
Alias (signed word*) main::st2#2 = (signed word*) main::st2#3 
Alias (byte) main::i#2 = (byte) main::i#5 
Alias (word) rem16u#12 = (word) rem16u#41 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#18 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (word) divr16u::divisor#2
Self Phi Eliminated (dword) sin16s_gen::step#1
Self Phi Eliminated (word) sin16s_gen::wavelength#2
Self Phi Eliminated (word) rem16u#19
Self Phi Eliminated (dword) sin16s_genb::step#1
Self Phi Eliminated (word) sin16s_genb::wavelength#2
Self Phi Eliminated (word) rem16u#21
Self Phi Eliminated (byte*) print_line_cursor#1
Self Phi Eliminated (word) rem16u#12
Self Phi Eliminated (byte*) print_line_cursor#11
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (word) divr16u::divisor#2 (word) divr16u::divisor#6
Redundant Phi (word) rem16u#15 (word) rem16u#1
Redundant Phi (word) rem16u#16 (word) rem16u#1
Redundant Phi (word) mul16u::b#1 (word) mul16u::b#0
Redundant Phi (word) mul16u::a#5 (word) mul16u::a#1
Redundant Phi (word) sin16s_gen::wavelength#1 (word) sin16s_gen::wavelength#0
Redundant Phi (word) rem16u#27 (word) rem16u#31
Redundant Phi (signed word*) sin16s_gen::sintab#4 (signed word*) sin16s_gen::sintab#1
Redundant Phi (word) rem16u#18 (word) rem16u#16
Redundant Phi (dword) sin16s_gen::step#1 (dword) sin16s_gen::step#0
Redundant Phi (word) sin16s_gen::wavelength#2 (word) sin16s_gen::wavelength#1
Redundant Phi (word) rem16u#19 (word) rem16u#18
Redundant Phi (dword) sin16s::x#3 (dword) sin16s::x#0
Redundant Phi (word) sin16s_genb::wavelength#1 (word) sin16s_genb::wavelength#0
Redundant Phi (word) rem16u#29 (word) rem16u#10
Redundant Phi (signed word*) sin16s_genb::sintab#4 (signed word*) sin16s_genb::sintab#1
Redundant Phi (word) rem16u#20 (word) rem16u#16
Redundant Phi (dword) sin16s_genb::step#1 (dword) sin16s_genb::step#0
Redundant Phi (word) sin16s_genb::wavelength#2 (word) sin16s_genb::wavelength#1
Redundant Phi (word) rem16u#21 (word) rem16u#20
Redundant Phi (word) sin16sb::x#3 (word) sin16sb::x#0
Redundant Phi (signed word) print_sword::w#2 (signed word) print_sword::w#1
Redundant Phi (byte*) print_char_cursor#44 (byte*) print_char_cursor#48
Redundant Phi (byte*) print_char_cursor#24 (byte*) print_char_cursor#28
Redundant Phi (byte*) print_char_cursor#25 (byte*) print_char_cursor#12
Redundant Phi (word) print_word::w#1 (word) print_word::w#0
Redundant Phi (byte*) print_char_cursor#45 (byte*) print_char_cursor#43
Redundant Phi (byte*) print_char_cursor#27 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#28 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#30 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#4
Redundant Phi (byte*) print_line_cursor#1 (byte*) print_screen#1
Redundant Phi (word) rem16u#31 (word) rem16u#0
Redundant Phi (byte*) print_screen#4 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_char_cursor#47 (byte*) print_line_cursor#0
Redundant Phi (word) rem16u#10 (word) rem16u#19
Redundant Phi (word) rem16u#11 (word) rem16u#21
Redundant Phi (byte*) print_line_cursor#3 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#16 (byte*) print_line_cursor#1
Redundant Phi (word) rem16u#12 (word) rem16u#11
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_line_cursor#3
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_char_cursor#24
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_char_cursor#2
Redundant Phi (byte*) print_char_cursor#19 (byte*) print_char_cursor#2
Redundant Phi (word) rem16u#13 (word) rem16u#12
Redundant Phi (byte*) print_line_cursor#5 (byte*) print_line_cursor#11
Redundant Phi (byte*) print_char_cursor#21 (byte*) print_char_cursor#18
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) divr16u::$4 [12] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [20] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [27] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) mul16u::$0 [75] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [80] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
Simple Condition (bool~) sin16s_gen::$4 [125] if((word) sin16s_gen::i#1<(word) sin16s_gen::wavelength#0) goto sin16s_gen::@1
Simple Condition (bool~) sin16s::$1 [133] if((dword) sin16s::x#0<(dword) PI_u4f28#0) goto sin16s::@1
Simple Condition (bool~) sin16s::$4 [137] if((dword) sin16s::x#4<(dword) PI_HALF_u4f28#0) goto sin16s::@2
Simple Condition (bool~) sin16s::$19 [197] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@3
Simple Condition (bool~) sin16s_genb::$5 [248] if((word) sin16s_genb::i#1<(word) sin16s_genb::wavelength#0) goto sin16s_genb::@1
Simple Condition (bool~) sin16sb::$1 [256] if((word) sin16sb::x#0<(word) PI_u4f12#0) goto sin16sb::@1
Simple Condition (bool~) sin16sb::$4 [260] if((word) sin16sb::x#4<(word) PI_HALF_u4f12#0) goto sin16sb::@2
Simple Condition (bool~) sin16sb::$18 [319] if((byte) sin16sb::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16sb::@3
Simple Condition (bool~) print_str::$0 [339] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_sword::$1 [350] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
Simple Condition (bool~) print_cls::$1 [410] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$5 [444] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2
Simple Condition (bool~) main::$11 [460] if((byte) main::i#1!=rangelast(0,$77)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) rem8u#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const signed word) rem16s#0 = 0
Constant (const dword) mul16u::res#0 = 0
Constant (const dword) PI2_u4f28#0 = $6487ed51
Constant (const dword) PI_u4f28#0 = $3243f6a9
Constant (const dword) PI_HALF_u4f28#0 = $1921fb54
Constant (const word) PI2_u4f12#0 = $6488
Constant (const word) PI_u4f12#0 = $3244
Constant (const word) PI_HALF_u4f12#0 = $1922
Constant (const dword) sin16s_gen::x#0 = 0
Constant (const word) sin16s_gen::i#0 = 0
Constant (const byte) sin16s::isUpper#0 = 0
Constant (const byte) sin16s::isUpper#1 = 1
Constant (const byte) mulu16_sel::select#0 = 0
Constant (const byte) mulu16_sel::select#1 = 1
Constant (const word) mulu16_sel::v2#2 = $10000/6
Constant (const byte) mulu16_sel::select#2 = 1
Constant (const byte) mulu16_sel::select#3 = 0
Constant (const byte) mulu16_sel::select#4 = 0
Constant (const dword) sin16s_genb::x#0 = 0
Constant (const word) sin16s_genb::i#0 = 0
Constant (const byte) sin16sb::isUpper#0 = 0
Constant (const byte) sin16sb::isUpper#1 = 1
Constant (const byte) mulu16_sel::select#5 = 0
Constant (const byte) mulu16_sel::select#6 = 1
Constant (const word) mulu16_sel::v2#7 = $10000/6
Constant (const byte) mulu16_sel::select#7 = 1
Constant (const byte) mulu16_sel::select#8 = 0
Constant (const byte) mulu16_sel::select#9 = 0
Constant (const byte*) print_line_cursor#0 = ((byte*))$400
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte[]) print_hextab#0 = $0
Constant (const word) main::wavelength#0 = $78
Constant (const signed word[$78]) main::sintab1#0 = { fill( $78, 0) }
Constant (const signed word[$78]) main::sintab2#0 = { fill( $78, 0) }
Constant (const byte) main::i#0 = 0
Constant (const byte*) print_str::str#1 = main::str
Constant (const byte*) print_str::str#2 = main::str1
Successful SSA optimization Pass2ConstantIdentification
Constant (const dword) div32u16u::dividend#0 = PI2_u4f28#0
Constant (const dword) div32u16u::dividend#1 = PI2_u4f28#0
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const signed word*) sin16s_gen::sintab#1 = main::sintab1#0
Constant (const word) sin16s_gen::wavelength#0 = main::wavelength#0
Constant (const signed word*) sin16s_genb::sintab#1 = main::sintab2#0
Constant (const word) sin16s_genb::wavelength#0 = main::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) div32u16u::divisor#0 = sin16s_gen::wavelength#0
Constant (const word) div32u16u::divisor#1 = sin16s_genb::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Fixing inline constructor with div32u16u::$4 ← div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Successful SSA optimization PassNEliminateUnusedVars
Successful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (signed word) sin16s::sinx#0 ← ((signed word)) (word) sin16s::usinx#1
Eliminating Noop Cast (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx#1
Eliminating Noop Cast (signed word) sin16sb::sinx#0 ← ((signed word)) (word) sin16sb::usinx#1
Eliminating Noop Cast (signed word~) sin16sb::$19 ← ((signed word)) (word) sin16sb::usinx#1
Eliminating Noop Cast (word) print_word::w#0 ← ((word)) (signed word) print_sword::w#3
Successful SSA optimization Pass2NopCastElimination
Resolved ranged next value divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (byte/signed byte/word/signed word/dword/signed dword) $10
Resolved ranged next value main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value if(main::i#1!=rangelast(0,$77)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) $78
Culled Empty Block (label) @2
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) @13
Culled Empty Block (label) @22
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) @34
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@10
Culled Empty Block (label) @43
Successful SSA optimization Pass2CullEmptyBlocks
Alias (dword) div32u16u::return#0 = (dword~) div32u16u::$4 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const dword) div32u16u::dividend#0
Inlining constant with var siblings (const dword) div32u16u::dividend#1
Inlining constant with var siblings (const word) div32u16u::divisor#0
Inlining constant with var siblings (const word) div32u16u::divisor#1
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const dword) sin16s_gen::x#0
Inlining constant with var siblings (const word) sin16s_gen::i#0
Inlining constant with var siblings (const signed word*) sin16s_gen::sintab#1
Inlining constant with var siblings (const byte) sin16s::isUpper#0
Inlining constant with var siblings (const byte) sin16s::isUpper#1
Inlining constant with var siblings (const byte) mulu16_sel::select#0
Inlining constant with var siblings (const byte) mulu16_sel::select#1
Inlining constant with var siblings (const word) mulu16_sel::v2#2
Inlining constant with var siblings (const byte) mulu16_sel::select#2
Inlining constant with var siblings (const byte) mulu16_sel::select#3
Inlining constant with var siblings (const byte) mulu16_sel::select#4
Inlining constant with var siblings (const byte) mulu16_sel::select#5
Inlining constant with var siblings (const byte) mulu16_sel::select#6
Inlining constant with var siblings (const word) mulu16_sel::v2#7
Inlining constant with var siblings (const byte) mulu16_sel::select#7
Inlining constant with var siblings (const byte) mulu16_sel::select#8
Inlining constant with var siblings (const byte) mulu16_sel::select#9
Inlining constant with var siblings (const dword) sin16s_genb::x#0
Inlining constant with var siblings (const word) sin16s_genb::i#0
Inlining constant with var siblings (const signed word*) sin16s_genb::sintab#1
Inlining constant with var siblings (const byte) sin16sb::isUpper#0
Inlining constant with var siblings (const byte) sin16sb::isUpper#1
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined divr16u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::$0 = (const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8
Constant inlined divr16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div32u16u::dividend#1 = (const dword) PI2_u4f28#0
Constant inlined sin16s_gen::wavelength#0 = (const word) main::wavelength#0
Constant inlined div32u16u::dividend#0 = (const dword) PI2_u4f28#0
Constant inlined sin16s::isUpper#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::v2#7 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined mulu16_sel::select#4 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#5 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined divr16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#2 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulu16_sel::select#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mul16u::res#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s::isUpper#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulu16_sel::select#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined sin16s_genb::sintab#1 = (const signed word[$78]) main::sintab2#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s_genb::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16sb::isUpper#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined sin16s_genb::wavelength#0 = (const word) main::wavelength#0
Constant inlined sin16sb::isUpper#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s_gen::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sin16s_genb::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::sc#0 = (const byte*) print_line_cursor#0
Constant inlined mulu16_sel::select#8 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#9 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulu16_sel::select#6 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined sin16s_gen::sintab#1 = (const signed word[$78]) main::sintab1#0
Constant inlined mulu16_sel::select#7 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined mulu16_sel::v2#2 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined sin16s_gen::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined div32u16u::divisor#1 = (const word) main::wavelength#0
Constant inlined print_str::str#2 = (const string) main::str1
Constant inlined div32u16u::divisor#0 = (const word) main::wavelength#0
Constant inlined print_str::str#1 = (const string) main::str
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (dword) div32u16u::dividend#2 (const dword) PI2_u4f28#0
Identical Phi Values (word) div32u16u::divisor#2 (const word) main::wavelength#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const word) divr16u::dividend#1 = >PI2_u4f28#0
Constant (const word) divr16u::divisor#0 = main::wavelength#0
Constant (const word) divr16u::dividend#2 = <PI2_u4f28#0
Constant (const word) divr16u::divisor#1 = main::wavelength#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const word) divr16u::dividend#1
Inlining constant with var siblings (const word) divr16u::divisor#0
Inlining constant with var siblings (const word) divr16u::dividend#2
Inlining constant with var siblings (const word) divr16u::divisor#1
Constant inlined divr16u::divisor#1 = (const word) main::wavelength#0
Constant inlined divr16u::dividend#1 = >(const dword) PI2_u4f28#0
Constant inlined divr16u::divisor#0 = (const word) main::wavelength#0
Constant inlined divr16u::dividend#2 = <(const dword) PI2_u4f28#0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) divr16u::divisor#6 (const word) main::wavelength#0
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting main::@11(between main::@9 and main::@1)
Added new block during phi lifting main::@12(between main::@1 and main::@2)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting sin16s_genb::@5(between sin16s_genb::@4 and sin16s_genb::@1)
Added new block during phi lifting sin16sb::@13(between sin16sb and sin16sb::@1)
Fixing phi predecessor for sin16sb::isUpper#2 to new block ( sin16sb -> sin16sb::@13 ) during phi lifting.
Added new block during phi lifting sin16sb::@14(between sin16sb::@1 and sin16sb::@2)
Added new block during phi lifting sin16sb::@15(between sin16sb::@12 and sin16sb::@3)
Added new block during phi lifting mul16u::@10(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting sin16s_gen::@5(between sin16s_gen::@4 and sin16s_gen::@1)
Added new block during phi lifting sin16s::@13(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@13 ) during phi lifting.
Added new block during phi lifting sin16s::@14(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@15(between sin16s::@12 and sin16s::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @42
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of sin16s_genb
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of sin16s_gen
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to sin16s_gen:5 sin16s_genb:7 print_cls:9 print_str:14 print_sword:18 print_str:20 
Calls in [print_sword] to print_char:44 print_word:49 
Calls in [print_word] to print_byte:56 print_byte:60 
Calls in [print_byte] to print_char:67 print_char:72 
Calls in [sin16s_genb] to div32u16u:86 sin16sb:91 
Calls in [sin16sb] to mulu16_sel:116 mulu16_sel:123 mulu16_sel:128 mulu16_sel:136 mulu16_sel:143 
Calls in [mulu16_sel] to mul16u:159 
Calls in [div32u16u] to divr16u:183 divr16u:188 
Calls in [sin16s_gen] to div32u16u:224 sin16s:229 
Calls in [sin16s] to mulu16_sel:255 mulu16_sel:262 mulu16_sel:267 mulu16_sel:275 mulu16_sel:282 

Created 46 initial phi equivalence classes
Coalesced [13] print_char_cursor#60 ← print_char_cursor#49
Coalesced [15] print_char_cursor#59 ← print_char_cursor#2
Coalesced [19] print_char_cursor#61 ← print_char_cursor#12
Coalesced [26] main::st1#8 ← main::st1#1
Coalesced [27] main::st2#8 ← main::st2#1
Coalesced [28] print_char_cursor#57 ← print_char_cursor#2
Coalesced [29] main::i#8 ← main::i#1
Coalesced (already) [30] print_char_cursor#58 ← print_char_cursor#49
Coalesced [32] print_str::str#6 ← print_str::str#5
Coalesced (already) [33] print_char_cursor#62 ← print_char_cursor#51
Coalesced [40] print_str::str#7 ← print_str::str#0
Coalesced [41] print_char_cursor#63 ← print_char_cursor#1
Coalesced [43] print_char_cursor#70 ← print_char_cursor#48
Coalesced [46] print_sword::w#7 ← print_sword::w#0
Coalesced [47] print_char_cursor#65 ← print_char_cursor#12
Coalesced [51] print_sword::w#6 ← print_sword::w#1
Coalesced (already) [52] print_char_cursor#64 ← print_char_cursor#48
Coalesced [54] print_byte::b#4 ← print_byte::b#0
Coalesced [55] print_char_cursor#66 ← print_char_cursor#43
Coalesced [58] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [59] print_char_cursor#67 ← print_char_cursor#12
Coalesced [65] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [66] print_char_cursor#68 ← print_char_cursor#46
Coalesced [70] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [71] print_char_cursor#69 ← print_char_cursor#12
Coalesced [84] print_cls::sc#3 ← print_cls::sc#1
Coalesced [100] sin16s_genb::x#4 ← sin16s_genb::x#1
Coalesced [101] sin16s_genb::sintab#6 ← sin16s_genb::sintab#0
Coalesced [102] sin16s_genb::i#4 ← sin16s_genb::i#1
Coalesced [105] sin16sb::x#9 ← sin16sb::x#1
Coalesced [109] sin16sb::x#11 ← sin16sb::x#2
Coalesced [114] mulu16_sel::v1#18 ← mulu16_sel::v1#5
Coalesced [115] mulu16_sel::v2#17 ← mulu16_sel::v2#5
Coalesced [121] mulu16_sel::v1#19 ← mulu16_sel::v1#6
Coalesced [122] mulu16_sel::v2#18 ← mulu16_sel::v2#6
Coalesced [127] mulu16_sel::v1#20 ← mulu16_sel::v1#7
Coalesced [134] mulu16_sel::v1#16 ← mulu16_sel::v1#8
Coalesced [135] mulu16_sel::v2#15 ← mulu16_sel::v2#8
Coalesced [141] mulu16_sel::v1#17 ← mulu16_sel::v1#9
Coalesced [142] mulu16_sel::v2#16 ← mulu16_sel::v2#9
Coalesced [150] sin16sb::return#6 ← sin16sb::sinx#1
Coalesced [154] sin16sb::x#10 ← sin16sb::x#4
Coalesced [155] sin16sb::x#8 ← sin16sb::x#0
Coalesced [166] mul16u::a#7 ← mul16u::a#1
Coalesced [167] mul16u::mb#6 ← mul16u::mb#0
Coalesced [174] mul16u::res#9 ← mul16u::res#1
Coalesced [178] mul16u::a#8 ← mul16u::a#0
Coalesced [179] mul16u::res#7 ← mul16u::res#6
Coalesced [180] mul16u::mb#7 ← mul16u::mb#1
Coalesced (already) [181] mul16u::res#8 ← mul16u::res#2
Coalesced [187] divr16u::rem#12 ← divr16u::rem#4
Coalesced [194] divr16u::rem#13 ← divr16u::rem#10
Coalesced [195] divr16u::dividend#9 ← divr16u::dividend#5
Coalesced [202] divr16u::rem#16 ← divr16u::rem#1
Coalesced [209] divr16u::rem#18 ← divr16u::rem#2
Coalesced [210] divr16u::return#8 ← divr16u::quotient#2
Coalesced [216] divr16u::rem#14 ← divr16u::rem#11
Coalesced [217] divr16u::dividend#10 ← divr16u::dividend#0
Coalesced [218] divr16u::quotient#9 ← divr16u::return#0
Coalesced [219] divr16u::i#7 ← divr16u::i#1
Coalesced [220] divr16u::rem#17 ← divr16u::rem#6
Coalesced [221] divr16u::return#7 ← divr16u::quotient#1
Coalesced [222] divr16u::rem#15 ← divr16u::rem#0
Coalesced [238] sin16s_gen::x#4 ← sin16s_gen::x#1
Coalesced [239] sin16s_gen::sintab#6 ← sin16s_gen::sintab#0
Coalesced [240] sin16s_gen::i#4 ← sin16s_gen::i#1
Coalesced [243] sin16s::x#9 ← sin16s::x#1
Coalesced [247] sin16s::x#11 ← sin16s::x#2
Coalesced [253] mulu16_sel::v1#13 ← mulu16_sel::v1#0
Coalesced [254] mulu16_sel::v2#13 ← mulu16_sel::v2#0
Coalesced [260] mulu16_sel::v1#14 ← mulu16_sel::v1#1
Coalesced [261] mulu16_sel::v2#14 ← mulu16_sel::v2#1
Coalesced [266] mulu16_sel::v1#15 ← mulu16_sel::v1#2
Coalesced [273] mulu16_sel::v1#11 ← mulu16_sel::v1#3
Coalesced [274] mulu16_sel::v2#11 ← mulu16_sel::v2#3
Coalesced [280] mulu16_sel::v1#12 ← mulu16_sel::v1#4
Coalesced [281] mulu16_sel::v2#12 ← mulu16_sel::v2#4
Coalesced [289] sin16s::return#6 ← sin16s::sinx#1
Coalesced [293] sin16s::x#10 ← sin16s::x#4
Coalesced [294] sin16s::x#8 ← sin16s::x#0
Coalesced down to 31 phi equivalence classes
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) print_cls::@3
Culled Empty Block (label) sin16s_genb::@5
Culled Empty Block (label) sin16sb::@14
Culled Empty Block (label) sin16sb::@13
Culled Empty Block (label) mul16u::@10
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) sin16s_gen::@5
Culled Empty Block (label) sin16s::@14
Culled Empty Block (label) sin16s::@13
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @42
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of sin16s_genb
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of sin16s_gen

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@42
@42: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @42
  [3] phi()
main: scope:[main]  from @42
  [4] phi()
  [5] call sin16s_gen 
  to:main::@5
main::@5: scope:[main]  from main
  [6] phi()
  [7] call sin16s_genb 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [8] phi()
  [9] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@6 main::@9
  [10] (byte) main::i#2 ← phi( main::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@9/(byte) main::i#1 )
  [10] (byte*) print_char_cursor#49 ← phi( main::@6/(const byte*) print_line_cursor#0 main::@9/(byte*) print_char_cursor#2 )
  [10] (signed word*) main::st2#2 ← phi( main::@6/(const signed word[$78]) main::sintab2#0 main::@9/(signed word*) main::st2#1 )
  [10] (signed word*) main::st1#2 ← phi( main::@6/(const signed word[$78]) main::sintab1#0 main::@9/(signed word*) main::st1#1 )
  [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2)
  [12] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [13] phi()
  [14] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [15] (byte*) print_char_cursor#48 ← phi( main::@1/(byte*) print_char_cursor#49 main::@3/(byte*) print_char_cursor#2 )
  [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0
  [17] call print_sword 
  to:main::@8
main::@8: scope:[main]  from main::@2
  [18] phi()
  [19] call print_str 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [22] (byte) main::i#1 ← ++ (byte) main::i#2
  [23] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $78) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@9
  [24] return 
  to:@return
print_str: scope:[print_str]  from main::@3 main::@8
  [25] (byte*) print_char_cursor#51 ← phi( main::@3/(byte*) print_char_cursor#49 main::@8/(byte*) print_char_cursor#12 )
  [25] (byte*) print_str::str#5 ← phi( main::@3/(const string) main::str1 main::@8/(const string) main::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [26] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#51 print_str::@2/(byte*) print_char_cursor#1 )
  [26] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [28] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3)
  [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_sword: scope:[print_sword]  from main::@2
  [32] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [33] phi()
  [34] call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  [36] (byte*) print_char_cursor#43 ← phi( print_sword/(byte*) print_char_cursor#48 print_sword::@4/(byte*) print_char_cursor#12 )
  [36] (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#1 print_sword::@4/(signed word) print_sword::w#0 )
  [37] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [38] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  [39] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3
  [40] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [41] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3
  [42] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [43] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [44] (byte*) print_char_cursor#46 ← phi( print_word/(byte*) print_char_cursor#43 print_word::@1/(byte*) print_char_cursor#12 )
  [44] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [45] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [46] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [47] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [48] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [49] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [50] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [51] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sword::@2
  [52] (byte*) print_char_cursor#33 ← phi( print_byte/(byte*) print_char_cursor#46 print_byte::@1/(byte*) print_char_cursor#12 print_sword::@2/(byte*) print_char_cursor#48 )
  [52] (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) '-' )
  [53] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3
  [54] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#33
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [55] return 
  to:@return
print_cls: scope:[print_cls]  from main::@6
  [56] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [57] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) print_line_cursor#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [58] *((byte*) print_cls::sc#2) ← (byte) ' '
  [59] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [60] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [61] return 
  to:@return
sin16s_genb: scope:[sin16s_genb]  from main::@5
  [62] phi()
  [63] call div32u16u 
  [64] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0
  to:sin16s_genb::@3
sin16s_genb::@3: scope:[sin16s_genb]  from sin16s_genb
  [65] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3
  to:sin16s_genb::@1
sin16s_genb::@1: scope:[sin16s_genb]  from sin16s_genb::@3 sin16s_genb::@4
  [66] (word) sin16s_genb::i#2 ← phi( sin16s_genb::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_genb::@4/(word) sin16s_genb::i#1 )
  [66] (signed word*) sin16s_genb::sintab#2 ← phi( sin16s_genb::@3/(const signed word[$78]) main::sintab2#0 sin16s_genb::@4/(signed word*) sin16s_genb::sintab#0 )
  [66] (dword) sin16s_genb::x#2 ← phi( sin16s_genb::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_genb::@4/(dword) sin16s_genb::x#1 )
  [67] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2
  [68] call sin16sb 
  [69] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1
  to:sin16s_genb::@4
sin16s_genb::@4: scope:[sin16s_genb]  from sin16s_genb::@1
  [70] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0
  [71] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2
  [72] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [73] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0
  [74] (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2
  [75] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1
  to:sin16s_genb::@return
sin16s_genb::@return: scope:[sin16s_genb]  from sin16s_genb::@4
  [76] return 
  to:@return
sin16sb: scope:[sin16sb]  from sin16s_genb::@1
  [77] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1
  to:sin16sb::@4
sin16sb::@4: scope:[sin16sb]  from sin16sb
  [78] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0
  to:sin16sb::@1
sin16sb::@1: scope:[sin16sb]  from sin16sb sin16sb::@4
  [79] (byte) sin16sb::isUpper#2 ← phi( sin16sb/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16sb::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [79] (word) sin16sb::x#4 ← phi( sin16sb/(word) sin16sb::x#0 sin16sb::@4/(word) sin16sb::x#1 )
  [80] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2
  to:sin16sb::@5
sin16sb::@5: scope:[sin16sb]  from sin16sb::@1
  [81] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4
  to:sin16sb::@2
sin16sb::@2: scope:[sin16sb]  from sin16sb::@1 sin16sb::@5
  [82] (word) sin16sb::x#6 ← phi( sin16sb::@1/(word) sin16sb::x#4 sin16sb::@5/(word) sin16sb::x#2 )
  [83] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [84] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0
  [85] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0
  [86] call mulu16_sel 
  [87] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17
  to:sin16sb::@8
sin16sb::@8: scope:[sin16sb]  from sin16sb::@2
  [88] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18
  [89] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0
  [90] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0
  [91] call mulu16_sel 
  [92] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17
  to:sin16sb::@9
sin16sb::@9: scope:[sin16sb]  from sin16sb::@8
  [93] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19
  [94] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0
  [95] call mulu16_sel 
  [96] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17
  to:sin16sb::@10
sin16sb::@10: scope:[sin16sb]  from sin16sb::@9
  [97] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20
  [98] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0
  [99] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0
  [100] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0
  [101] call mulu16_sel 
  [102] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17
  to:sin16sb::@11
sin16sb::@11: scope:[sin16sb]  from sin16sb::@10
  [103] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10
  [104] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0
  [105] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0
  [106] call mulu16_sel 
  [107] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17
  to:sin16sb::@12
sin16sb::@12: scope:[sin16sb]  from sin16sb::@11
  [108] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11
  [109] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [110] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0
  [111] if((byte) sin16sb::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16sb::@15
  to:sin16sb::@6
sin16sb::@6: scope:[sin16sb]  from sin16sb::@12
  [112] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1
  to:sin16sb::@3
sin16sb::@3: scope:[sin16sb]  from sin16sb::@15 sin16sb::@6
  [113] (signed word) sin16sb::return#1 ← phi( sin16sb::@15/(signed word~) sin16sb::return#5 sin16sb::@6/(signed word) sin16sb::sinx#1 )
  to:sin16sb::@return
sin16sb::@return: scope:[sin16sb]  from sin16sb::@3
  [114] return 
  to:@return
sin16sb::@15: scope:[sin16sb]  from sin16sb::@12
  [115] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1
  to:sin16sb::@3
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@11 sin16s::@2 sin16s::@8 sin16s::@9 sin16sb::@10 sin16sb::@11 sin16sb::@2 sin16sb::@8 sin16sb::@9
  [116] (byte) mulu16_sel::select#10 ← phi( sin16s::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 sin16s::@9/(byte/signed byte/word/signed word/dword/signed dword) 1 sin16sb::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16sb::@11/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16sb::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16sb::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 sin16sb::@9/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [116] (word) mulu16_sel::v2#10 ← phi( sin16s::@10/(word) mulu16_sel::v2#3 sin16s::@11/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@8/(word) mulu16_sel::v2#1 sin16s::@9/(dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 sin16sb::@10/(word) mulu16_sel::v2#8 sin16sb::@11/(word) mulu16_sel::v2#9 sin16sb::@2/(word) mulu16_sel::v2#5 sin16sb::@8/(word) mulu16_sel::v2#6 sin16sb::@9/(dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 )
  [116] (word) mulu16_sel::v1#10 ← phi( sin16s::@10/(word) mulu16_sel::v1#3 sin16s::@11/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@8/(word) mulu16_sel::v1#1 sin16s::@9/(word) mulu16_sel::v1#2 sin16sb::@10/(word) mulu16_sel::v1#8 sin16sb::@11/(word) mulu16_sel::v1#9 sin16sb::@2/(word) mulu16_sel::v1#5 sin16sb::@8/(word) mulu16_sel::v1#6 sin16sb::@9/(word) mulu16_sel::v1#7 )
  [117] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10
  [118] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10
  [119] call mul16u 
  [120] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@2
mulu16_sel::@2: scope:[mulu16_sel]  from mulu16_sel
  [121] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [122] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10
  [123] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@2
  [124] return 
  to:@return
mul16u: scope:[mul16u]  from mulu16_sel
  [125] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  [126] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  [126] (dword) mul16u::res#2 ← phi( mul16u/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u::@4/(dword) mul16u::res#6 )
  [126] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@4/(word) mul16u::a#0 )
  [127] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [128] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [129] (byte/word~) mul16u::$1 ← (word) mul16u::a#2 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [130] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
  to:mul16u::@7
mul16u::@7: scope:[mul16u]  from mul16u::@2
  [131] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  [132] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@7/(dword) mul16u::res#1 )
  [133] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [134] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mul16u::@1
div32u16u: scope:[div32u16u]  from sin16s_gen sin16s_genb
  [135] phi()
  [136] call divr16u 
  [137] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u
  [138] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [139] (word) divr16u::rem#4 ← (word) rem16u#1
  [140] call divr16u 
  [141] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@3
div32u16u::@3: scope:[div32u16u]  from div32u16u::@2
  [142] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [143] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@3
  [144] return 
  to:@return
divr16u: scope:[divr16u]  from div32u16u div32u16u::@2
  [145] (word) divr16u::dividend#5 ← phi( div32u16u/>(const dword) PI2_u4f28#0 div32u16u::@2/<(const dword) PI2_u4f28#0 )
  [145] (word) divr16u::rem#10 ← phi( div32u16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div32u16u::@2/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [146] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 )
  [146] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 )
  [146] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [146] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [147] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [148] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [149] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  [150] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [151] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [152] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [153] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [154] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [155] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [156] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [157] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [158] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [158] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [159] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [160] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [161] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [162] return 
  to:@return
sin16s_gen: scope:[sin16s_gen]  from main
  [163] phi()
  [164] call div32u16u 
  [165] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [166] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [167] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  [167] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@3/(const signed word[$78]) main::sintab1#0 sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  [167] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  [168] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [169] call sin16s 
  [170] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@1
  [171] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  [172] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1
  [173] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [174] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [175] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  [176] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@4
  [177] return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen::@1
  [178] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [179] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [180] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [180] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [181] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [182] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [183] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [184] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [185] (word) sin16s::x1#0 ← > (dword~) sin16s::$6
  [186] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [187] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [188] call mulu16_sel 
  [189] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@2
  [190] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [191] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [192] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [193] call mulu16_sel 
  [194] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [195] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [196] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [197] call mulu16_sel 
  [198] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [199] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14
  [200] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [201] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [202] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [203] call mulu16_sel 
  [204] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [205] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15
  [206] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [207] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [208] call mulu16_sel 
  [209] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17
  to:sin16s::@12
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [210] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16
  [211] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [212] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [213] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@12
  [214] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@15 sin16s::@6
  [215] (signed word) sin16s::return#1 ← phi( sin16s::@15/(signed word~) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [216] return 
  to:@return
sin16s::@15: scope:[sin16s]  from sin16s::@12
  [217] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3


VARIABLE REGISTER WEIGHTS
(word) PI2_u4f12
(dword) PI2_u4f28
(word) PI_HALF_u4f12
(dword) PI_HALF_u4f28
(word) PI_u4f12
(dword) PI_u4f28
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 1.5
(dword) div32u16u::return#2 4.0
(dword) div32u16u::return#3 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 22.0
(byte~) divr16u::$2 22.0
(word) divr16u::dividend
(word) divr16u::dividend#0 2.75
(word) divr16u::dividend#3 5.0
(word) divr16u::dividend#5 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 16.5
(byte) divr16u::i#2 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 16.5
(word) divr16u::quotient#2 11.0
(word) divr16u::quotient#3 2.75
(word) divr16u::rem
(word) divr16u::rem#0 8.25
(word) divr16u::rem#1 22.0
(word) divr16u::rem#10 4.0
(word) divr16u::rem#11 11.666666666666666
(word) divr16u::rem#2 22.0
(word) divr16u::rem#4 4.0
(word) divr16u::rem#5 24.0
(word) divr16u::rem#6 11.0
(word) divr16u::return
(word) divr16u::return#0 5.285714285714286
(word) divr16u::return#2 4.0
(word) divr16u::return#3 4.0
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 1.8333333333333333
(signed word[$78]) main::sintab1
(signed word[$78]) main::sintab2
(signed word*) main::st1
(signed word*) main::st1#1 5.5
(signed word*) main::st1#2 3.3000000000000003
(signed word*) main::st2
(signed word*) main::st2#1 7.333333333333333
(signed word*) main::st2#2 3.0
(signed word) main::sw
(signed word) main::sw#0 6.6000000000000005
(word) main::wavelength
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte/word~) mul16u::$1 202.0
(word) mul16u::a
(word) mul16u::a#0 101.0
(word) mul16u::a#1 1.3333333333333333
(word) mul16u::a#2 67.66666666666666
(word) mul16u::b
(word) mul16u::b#0 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 4.0
(dword) mul16u::mb#1 202.0
(dword) mul16u::mb#2 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 202.0
(dword) mul16u::res#2 50.83333333333333
(dword) mul16u::res#6 101.0
(dword) mul16u::return
(dword) mul16u::return#2 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 4.0
(dword~) mulu16_sel::$1 4.0
(word) mulu16_sel::return
(word) mulu16_sel::return#0 4.0
(word) mulu16_sel::return#1 4.0
(word) mulu16_sel::return#10 4.0
(word) mulu16_sel::return#11 4.0
(word) mulu16_sel::return#14 4.0
(word) mulu16_sel::return#15 4.0
(word) mulu16_sel::return#16 4.0
(word) mulu16_sel::return#17 1.8333333333333335
(word) mulu16_sel::return#18 4.0
(word) mulu16_sel::return#19 4.0
(word) mulu16_sel::return#20 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#10 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 2.0
(word) mulu16_sel::v1#1 2.0
(word) mulu16_sel::v1#10 22.0
(word) mulu16_sel::v1#2 4.0
(word) mulu16_sel::v1#3 2.0
(word) mulu16_sel::v1#4 2.0
(word) mulu16_sel::v1#5 2.0
(word) mulu16_sel::v1#6 2.0
(word) mulu16_sel::v1#7 4.0
(word) mulu16_sel::v1#8 2.0
(word) mulu16_sel::v1#9 2.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 4.0
(word) mulu16_sel::v2#1 4.0
(word) mulu16_sel::v2#10 9.0
(word) mulu16_sel::v2#3 4.0
(word) mulu16_sel::v2#4 4.0
(word) mulu16_sel::v2#5 4.0
(word) mulu16_sel::v2#6 4.0
(word) mulu16_sel::v2#8 4.0
(word) mulu16_sel::v2#9 4.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#12 1.1176470588235294
(byte*) print_char_cursor#2 32.7
(byte*) print_char_cursor#33 5.0
(byte*) print_char_cursor#43 3.0
(byte*) print_char_cursor#46 2.0
(byte*) print_char_cursor#48 6.5
(byte*) print_char_cursor#49 8.25
(byte*) print_char_cursor#51 24.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#3 101.5
(byte*) print_str::str#5 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 4.25
(signed word) print_sword::w#3 1.3333333333333333
(void()) print_word((word) print_word::w)
(word) print_word::w
(signed word) rem16s
(word) rem16u
(word) rem16u#1 0.8
(signed byte) rem8s
(byte) rem8u
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$6 4.0
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 22.0
(signed word) sin16s::return#1 5.0
(signed word~) sin16s::return#5 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 0.3333333333333333
(word) sin16s::usinx#1 1.0
(dword) sin16s::x
(dword) sin16s::x#0 8.5
(dword) sin16s::x#1 4.0
(dword) sin16s::x#2 4.0
(dword) sin16s::x#4 5.0
(dword) sin16s::x#6 6.0
(word) sin16s::x1
(word) sin16s::x1#0 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 4.0
(word) sin16s::x3
(word) sin16s::x3#0 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 4.0
(word) sin16s::x4
(word) sin16s::x4#0 4.0
(word) sin16s::x5
(word) sin16s::x5#0 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 4.0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(signed word~) sin16s_gen::$1 22.0
(word) sin16s_gen::i
(word) sin16s_gen::i#1 16.5
(word) sin16s_gen::i#2 2.75
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0 5.5
(signed word*) sin16s_gen::sintab#2 5.5
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0 1.1818181818181819
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(dword) sin16s_gen::x#1 7.333333333333333
(dword) sin16s_gen::x#2 4.714285714285714
(void()) sin16s_genb((signed word*) sin16s_genb::sintab , (word) sin16s_genb::wavelength)
(signed word~) sin16s_genb::$2 22.0
(word) sin16s_genb::i
(word) sin16s_genb::i#1 16.5
(word) sin16s_genb::i#2 2.75
(signed word*) sin16s_genb::sintab
(signed word*) sin16s_genb::sintab#0 5.5
(signed word*) sin16s_genb::sintab#2 5.5
(dword) sin16s_genb::step
(dword) sin16s_genb::step#0 1.1818181818181819
(word) sin16s_genb::wavelength
(dword) sin16s_genb::x
(dword) sin16s_genb::x#1 7.333333333333333
(dword) sin16s_genb::x#2 4.714285714285714
(signed word()) sin16sb((word) sin16sb::x)
(byte) sin16sb::isUpper
(byte) sin16sb::isUpper#2 0.0625
(signed word) sin16sb::return
(signed word) sin16sb::return#0 22.0
(signed word) sin16sb::return#1 5.0
(signed word~) sin16sb::return#5 4.0
(signed word) sin16sb::sinx
(signed word) sin16sb::sinx#1 4.0
(word) sin16sb::usinx
(word) sin16sb::usinx#0 0.3333333333333333
(word) sin16sb::usinx#1 1.0
(word) sin16sb::x
(word) sin16sb::x#0 8.5
(word) sin16sb::x#1 4.0
(word) sin16sb::x#2 4.0
(word) sin16sb::x#4 5.0
(word) sin16sb::x#6 6.0
(word) sin16sb::x1
(word) sin16sb::x1#0 0.6363636363636365
(word) sin16sb::x2
(word) sin16sb::x2#0 4.0
(word) sin16sb::x3
(word) sin16sb::x3#0 1.0
(word) sin16sb::x3_6
(word) sin16sb::x3_6#0 4.0
(word) sin16sb::x4
(word) sin16sb::x4#0 4.0
(word) sin16sb::x5
(word) sin16sb::x5#0 4.0
(word) sin16sb::x5_128
(word) sin16sb::x5_128#0 4.0

Initial phi equivalence classes
[ main::st1#2 main::st1#1 ]
[ main::st2#2 main::st2#1 ]
[ main::i#2 main::i#1 ]
[ print_str::str#3 print_str::str#5 print_str::str#0 ]
[ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ sin16s_genb::x#2 sin16s_genb::x#1 ]
[ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ]
[ sin16s_genb::i#2 sin16s_genb::i#1 ]
[ sin16sb::isUpper#2 ]
[ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ]
[ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ]
[ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ]
[ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ]
[ mulu16_sel::select#10 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Added variable main::sw#0 to zero page equivalence class [ main::sw#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div32u16u::return#3 to zero page equivalence class [ div32u16u::return#3 ]
Added variable sin16s_genb::step#0 to zero page equivalence class [ sin16s_genb::step#0 ]
Added variable sin16sb::return#0 to zero page equivalence class [ sin16sb::return#0 ]
Added variable sin16s_genb::$2 to zero page equivalence class [ sin16s_genb::$2 ]
Added variable sin16sb::x1#0 to zero page equivalence class [ sin16sb::x1#0 ]
Added variable mulu16_sel::return#18 to zero page equivalence class [ mulu16_sel::return#18 ]
Added variable sin16sb::x2#0 to zero page equivalence class [ sin16sb::x2#0 ]
Added variable mulu16_sel::return#19 to zero page equivalence class [ mulu16_sel::return#19 ]
Added variable sin16sb::x3#0 to zero page equivalence class [ sin16sb::x3#0 ]
Added variable mulu16_sel::return#20 to zero page equivalence class [ mulu16_sel::return#20 ]
Added variable sin16sb::x3_6#0 to zero page equivalence class [ sin16sb::x3_6#0 ]
Added variable sin16sb::usinx#0 to zero page equivalence class [ sin16sb::usinx#0 ]
Added variable mulu16_sel::return#10 to zero page equivalence class [ mulu16_sel::return#10 ]
Added variable sin16sb::x4#0 to zero page equivalence class [ sin16sb::x4#0 ]
Added variable mulu16_sel::return#11 to zero page equivalence class [ mulu16_sel::return#11 ]
Added variable sin16sb::x5#0 to zero page equivalence class [ sin16sb::x5#0 ]
Added variable sin16sb::x5_128#0 to zero page equivalence class [ sin16sb::x5_128#0 ]
Added variable sin16sb::usinx#1 to zero page equivalence class [ sin16sb::usinx#1 ]
Added variable mul16u::b#0 to zero page equivalence class [ mul16u::b#0 ]
Added variable mul16u::return#2 to zero page equivalence class [ mul16u::return#2 ]
Added variable mulu16_sel::$0 to zero page equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to zero page equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#17 to zero page equivalence class [ mulu16_sel::return#17 ]
Added variable mul16u::$1 to zero page equivalence class [ mul16u::$1 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div32u16u::quotient_hi#0 to zero page equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#3 to zero page equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_lo#0 to zero page equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to zero page equivalence class [ div32u16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Added variable div32u16u::return#2 to zero page equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen::step#0 to zero page equivalence class [ sin16s_gen::step#0 ]
Added variable sin16s::return#0 to zero page equivalence class [ sin16s::return#0 ]
Added variable sin16s_gen::$1 to zero page equivalence class [ sin16s_gen::$1 ]
Added variable sin16s::$6 to zero page equivalence class [ sin16s::$6 ]
Added variable sin16s::x1#0 to zero page equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to zero page equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to zero page equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to zero page equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to zero page equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#14 to zero page equivalence class [ mulu16_sel::return#14 ]
Added variable sin16s::x3_6#0 to zero page equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to zero page equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#15 to zero page equivalence class [ mulu16_sel::return#15 ]
Added variable sin16s::x4#0 to zero page equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#16 to zero page equivalence class [ mulu16_sel::return#16 ]
Added variable sin16s::x5#0 to zero page equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to zero page equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to zero page equivalence class [ sin16s::usinx#1 ]
Complete equivalence classes
[ main::st1#2 main::st1#1 ]
[ main::st2#2 main::st2#1 ]
[ main::i#2 main::i#1 ]
[ print_str::str#3 print_str::str#5 print_str::str#0 ]
[ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
[ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ sin16s_genb::x#2 sin16s_genb::x#1 ]
[ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ]
[ sin16s_genb::i#2 sin16s_genb::i#1 ]
[ sin16sb::isUpper#2 ]
[ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ]
[ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ]
[ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ]
[ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ]
[ mulu16_sel::select#10 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ main::sw#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div32u16u::return#3 ]
[ sin16s_genb::step#0 ]
[ sin16sb::return#0 ]
[ sin16s_genb::$2 ]
[ sin16sb::x1#0 ]
[ mulu16_sel::return#18 ]
[ sin16sb::x2#0 ]
[ mulu16_sel::return#19 ]
[ sin16sb::x3#0 ]
[ mulu16_sel::return#20 ]
[ sin16sb::x3_6#0 ]
[ sin16sb::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16sb::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16sb::x5#0 ]
[ sin16sb::x5_128#0 ]
[ sin16sb::usinx#1 ]
[ mul16u::b#0 ]
[ mul16u::return#2 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#17 ]
[ mul16u::$1 ]
[ divr16u::return#2 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
[ div32u16u::return#2 ]
[ sin16s_gen::step#0 ]
[ sin16s::return#0 ]
[ sin16s_gen::$1 ]
[ sin16s::$6 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#14 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#15 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#16 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
Allocated zp ZP_WORD:2 [ main::st1#2 main::st1#1 ]
Allocated zp ZP_WORD:4 [ main::st2#2 main::st2#1 ]
Allocated zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 ]
Allocated zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ]
Allocated zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:12 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
Allocated zp ZP_WORD:13 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ]
Allocated zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_DWORD:17 [ sin16s_genb::x#2 sin16s_genb::x#1 ]
Allocated zp ZP_WORD:21 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ]
Allocated zp ZP_WORD:23 [ sin16s_genb::i#2 sin16s_genb::i#1 ]
Allocated zp ZP_BYTE:25 [ sin16sb::isUpper#2 ]
Allocated zp ZP_WORD:26 [ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ]
Allocated zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ]
Allocated zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ]
Allocated zp ZP_WORD:32 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ]
Allocated zp ZP_BYTE:34 [ mulu16_sel::select#10 ]
Allocated zp ZP_WORD:35 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp ZP_DWORD:41 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
Allocated zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_DWORD:52 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated zp ZP_WORD:56 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
Allocated zp ZP_WORD:58 [ sin16s_gen::i#2 sin16s_gen::i#1 ]
Allocated zp ZP_BYTE:60 [ sin16s::isUpper#2 ]
Allocated zp ZP_DWORD:61 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp ZP_WORD:67 [ main::sw#0 ]
Allocated zp ZP_BYTE:69 [ print_byte::$0 ]
Allocated zp ZP_BYTE:70 [ print_byte::$2 ]
Allocated zp ZP_DWORD:71 [ div32u16u::return#3 ]
Allocated zp ZP_DWORD:75 [ sin16s_genb::step#0 ]
Allocated zp ZP_WORD:79 [ sin16sb::return#0 ]
Allocated zp ZP_WORD:81 [ sin16s_genb::$2 ]
Allocated zp ZP_WORD:83 [ sin16sb::x1#0 ]
Allocated zp ZP_WORD:85 [ mulu16_sel::return#18 ]
Allocated zp ZP_WORD:87 [ sin16sb::x2#0 ]
Allocated zp ZP_WORD:89 [ mulu16_sel::return#19 ]
Allocated zp ZP_WORD:91 [ sin16sb::x3#0 ]
Allocated zp ZP_WORD:93 [ mulu16_sel::return#20 ]
Allocated zp ZP_WORD:95 [ sin16sb::x3_6#0 ]
Allocated zp ZP_WORD:97 [ sin16sb::usinx#0 ]
Allocated zp ZP_WORD:99 [ mulu16_sel::return#10 ]
Allocated zp ZP_WORD:101 [ sin16sb::x4#0 ]
Allocated zp ZP_WORD:103 [ mulu16_sel::return#11 ]
Allocated zp ZP_WORD:105 [ sin16sb::x5#0 ]
Allocated zp ZP_WORD:107 [ sin16sb::x5_128#0 ]
Allocated zp ZP_WORD:109 [ sin16sb::usinx#1 ]
Allocated zp ZP_WORD:111 [ mul16u::b#0 ]
Allocated zp ZP_DWORD:113 [ mul16u::return#2 ]
Allocated zp ZP_DWORD:117 [ mulu16_sel::$0 ]
Allocated zp ZP_DWORD:121 [ mulu16_sel::$1 ]
Allocated zp ZP_WORD:125 [ mulu16_sel::return#17 ]
Allocated zp ZP_BYTE:127 [ mul16u::$1 ]
Allocated zp ZP_WORD:128 [ divr16u::return#2 ]
Allocated zp ZP_WORD:130 [ div32u16u::quotient_hi#0 ]
Allocated zp ZP_WORD:132 [ divr16u::return#3 ]
Allocated zp ZP_WORD:134 [ div32u16u::quotient_lo#0 ]
Allocated zp ZP_DWORD:136 [ div32u16u::return#0 ]
Allocated zp ZP_BYTE:140 [ divr16u::$1 ]
Allocated zp ZP_BYTE:141 [ divr16u::$2 ]
Allocated zp ZP_WORD:142 [ rem16u#1 ]
Allocated zp ZP_DWORD:144 [ div32u16u::return#2 ]
Allocated zp ZP_DWORD:148 [ sin16s_gen::step#0 ]
Allocated zp ZP_WORD:152 [ sin16s::return#0 ]
Allocated zp ZP_WORD:154 [ sin16s_gen::$1 ]
Allocated zp ZP_DWORD:156 [ sin16s::$6 ]
Allocated zp ZP_WORD:160 [ sin16s::x1#0 ]
Allocated zp ZP_WORD:162 [ mulu16_sel::return#0 ]
Allocated zp ZP_WORD:164 [ sin16s::x2#0 ]
Allocated zp ZP_WORD:166 [ mulu16_sel::return#1 ]
Allocated zp ZP_WORD:168 [ sin16s::x3#0 ]
Allocated zp ZP_WORD:170 [ mulu16_sel::return#14 ]
Allocated zp ZP_WORD:172 [ sin16s::x3_6#0 ]
Allocated zp ZP_WORD:174 [ sin16s::usinx#0 ]
Allocated zp ZP_WORD:176 [ mulu16_sel::return#15 ]
Allocated zp ZP_WORD:178 [ sin16s::x4#0 ]
Allocated zp ZP_WORD:180 [ mulu16_sel::return#16 ]
Allocated zp ZP_WORD:182 [ sin16s::x5#0 ]
Allocated zp ZP_WORD:184 [ sin16s::x5_128#0 ]
Allocated zp ZP_WORD:186 [ sin16s::usinx#1 ]

INITIAL ASM
//SEG0 File Comments
// Generates a 16-bit signed sinus
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label rem16u = $8e
  .label print_char_cursor = $d
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @42 [phi:@begin->@42]
b42_from_bbegin:
  jmp b42
//SEG5 @42
b42:
//SEG6 [2] call main 
//SEG7 [4] phi from @42 to main [phi:@42->main]
main_from_b42:
  jsr main
//SEG8 [3] phi from @42 to @end [phi:@42->@end]
bend_from_b42:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label wavelength = $78
    .label sw = $43
    .label st1 = 2
    .label st2 = 4
    .label i = 6
  //SEG11 [5] call sin16s_gen 
  //SEG12 [163] phi from main to sin16s_gen [phi:main->sin16s_gen]
  sin16s_gen_from_main:
    jsr sin16s_gen
  //SEG13 [6] phi from main to main::@5 [phi:main->main::@5]
  b5_from_main:
    jmp b5
  //SEG14 main::@5
  b5:
  //SEG15 [7] call sin16s_genb 
  //SEG16 [62] phi from main::@5 to sin16s_genb [phi:main::@5->sin16s_genb]
  sin16s_genb_from_b5:
    jsr sin16s_genb
  //SEG17 [8] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
  //SEG18 main::@6
  b6:
  //SEG19 [9] call print_cls 
  //SEG20 [56] phi from main::@6 to print_cls [phi:main::@6->print_cls]
  print_cls_from_b6:
    jsr print_cls
  //SEG21 [10] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG22 [10] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG23 [10] phi (byte*) print_char_cursor#49 = (const byte*) print_line_cursor#0 [phi:main::@6->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG24 [10] phi (signed word*) main::st2#2 = (const signed word[$78]) main::sintab2#0 [phi:main::@6->main::@1#2] -- pwsz1=pwsc1 
    lda #<sintab2
    sta st2
    lda #>sintab2
    sta st2+1
  //SEG25 [10] phi (signed word*) main::st1#2 = (const signed word[$78]) main::sintab1#0 [phi:main::@6->main::@1#3] -- pwsz1=pwsc1 
    lda #<sintab1
    sta st1
    lda #>sintab1
    sta st1+1
    jmp b1
  //SEG26 [10] phi from main::@9 to main::@1 [phi:main::@9->main::@1]
  b1_from_b9:
  //SEG27 [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@9->main::@1#0] -- register_copy 
  //SEG28 [10] phi (byte*) print_char_cursor#49 = (byte*) print_char_cursor#2 [phi:main::@9->main::@1#1] -- register_copy 
  //SEG29 [10] phi (signed word*) main::st2#2 = (signed word*) main::st2#1 [phi:main::@9->main::@1#2] -- register_copy 
  //SEG30 [10] phi (signed word*) main::st1#2 = (signed word*) main::st1#1 [phi:main::@9->main::@1#3] -- register_copy 
    jmp b1
  //SEG31 main::@1
  b1:
  //SEG32 [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2) -- vwsz1=_deref_pwsz2_minus__deref_pwsz3 
    ldy #0
    sec
    lda (st1),y
    sbc (st2),y
    sta sw
    iny
    lda (st1),y
    sbc (st2),y
    sta sw+1
  //SEG33 [12] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2 -- vwsz1_lt_0_then_la1 
    lda sw+1
    bmi b2_from_b1
  //SEG34 [13] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
  //SEG35 main::@3
  b3:
  //SEG36 [14] call print_str 
  //SEG37 [25] phi from main::@3 to print_str [phi:main::@3->print_str]
  print_str_from_b3:
  //SEG38 [25] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#49 [phi:main::@3->print_str#0] -- register_copy 
  //SEG39 [25] phi (byte*) print_str::str#5 = (const string) main::str1 [phi:main::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG40 [15] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG41 [15] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#49 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
  //SEG42 main::@2
  b2:
  //SEG43 [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0 -- vwsz1=vwsz2 
    lda sw
    sta print_sword.w
    lda sw+1
    sta print_sword.w+1
  //SEG44 [17] call print_sword 
    jsr print_sword
  //SEG45 [18] phi from main::@2 to main::@8 [phi:main::@2->main::@8]
  b8_from_b2:
    jmp b8
  //SEG46 main::@8
  b8:
  //SEG47 [19] call print_str 
  //SEG48 [25] phi from main::@8 to print_str [phi:main::@8->print_str]
  print_str_from_b8:
  //SEG49 [25] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#12 [phi:main::@8->print_str#0] -- register_copy 
  //SEG50 [25] phi (byte*) print_str::str#5 = (const string) main::str [phi:main::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG51 main::@9
  b9:
  //SEG52 [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda st1
    clc
    adc #2
    sta st1
    bcc !+
    inc st1+1
  !:
  //SEG53 [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda st2
    clc
    adc #2
    sta st2
    bcc !+
    inc st2+1
  !:
  //SEG54 [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG55 [23] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $78) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$78
    cmp i
    bne b1_from_b9
    jmp breturn
  //SEG56 main::@return
  breturn:
  //SEG57 [24] return 
    rts
    str: .text "   @"
    str1: .text " @"
    sintab1: .fill 2*$78, 0
    sintab2: .fill 2*$78, 0
}
//SEG58 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG59 [26] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG60 [26] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#51 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG61 [26] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG62 print_str::@1
  b1:
  //SEG63 [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG64 print_str::@return
  breturn:
  //SEG65 [28] return 
    rts
  //SEG66 print_str::@2
  b2:
  //SEG67 [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG68 [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG69 [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG70 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(9) w)
print_sword: {
    .label w = 9
  //SEG71 [32] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG72 [33] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG73 print_sword::@2
  b2:
  //SEG74 [34] call print_char 
  //SEG75 [52] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG76 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#48 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG77 [52] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG78 print_sword::@4
  b4:
  //SEG79 [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG80 [36] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG81 [36] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#48 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG82 [36] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG83 print_sword::@1
  b1:
  //SEG84 [37] call print_word 
    jsr print_word
    jmp breturn
  //SEG85 print_sword::@return
  breturn:
  //SEG86 [38] return 
    rts
}
//SEG87 print_word
// Print a word as HEX
print_word: {
  //SEG88 [39] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG89 [40] call print_byte 
  //SEG90 [44] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG91 [44] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#43 [phi:print_word->print_byte#0] -- register_copy 
  //SEG92 [44] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG93 print_word::@1
  b1:
  //SEG94 [41] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG95 [42] call print_byte 
  //SEG96 [44] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG97 [44] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG98 [44] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG99 print_word::@return
  breturn:
  //SEG100 [43] return 
    rts
}
//SEG101 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($b) b)
print_byte: {
    .label _0 = $45
    .label _2 = $46
    .label b = $b
  //SEG102 [45] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG103 [46] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG104 [47] call print_char 
  //SEG105 [52] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG106 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#46 [phi:print_byte->print_char#0] -- register_copy 
  //SEG107 [52] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG108 print_byte::@1
  b1:
  //SEG109 [48] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG110 [49] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG111 [50] call print_char 
  //SEG112 [52] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG113 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG114 [52] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG115 print_byte::@return
  breturn:
  //SEG116 [51] return 
    rts
}
//SEG117 print_char
// Print a single char
// print_char(byte zeropage($c) ch)
print_char: {
    .label ch = $c
  //SEG118 [53] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG119 [54] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#33 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG120 print_char::@return
  breturn:
  //SEG121 [55] return 
    rts
}
//SEG122 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $f
  //SEG123 [57] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG124 [57] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG125 [57] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG126 [57] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG127 print_cls::@1
  b1:
  //SEG128 [58] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG129 [59] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG130 [60] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG131 print_cls::@return
  breturn:
  //SEG132 [61] return 
    rts
}
//SEG133 sin16s_genb
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_genb(signed word* zeropage($15) sintab)
sin16s_genb: {
    .label _2 = $51
    .label step = $4b
    .label sintab = $15
    .label x = $11
    .label i = $17
  //SEG134 [63] call div32u16u 
  //SEG135 [135] phi from sin16s_genb to div32u16u [phi:sin16s_genb->div32u16u]
  div32u16u_from_sin16s_genb:
    jsr div32u16u
  //SEG136 [64] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0 -- vduz1=vduz2 
    lda div32u16u.return
    sta div32u16u.return_3
    lda div32u16u.return+1
    sta div32u16u.return_3+1
    lda div32u16u.return+2
    sta div32u16u.return_3+2
    lda div32u16u.return+3
    sta div32u16u.return_3+3
    jmp b3
  //SEG137 sin16s_genb::@3
  b3:
  //SEG138 [65] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3 -- vduz1=vduz2 
    lda div32u16u.return_3
    sta step
    lda div32u16u.return_3+1
    sta step+1
    lda div32u16u.return_3+2
    sta step+2
    lda div32u16u.return_3+3
    sta step+3
  //SEG139 [66] phi from sin16s_genb::@3 to sin16s_genb::@1 [phi:sin16s_genb::@3->sin16s_genb::@1]
  b1_from_b3:
  //SEG140 [66] phi (word) sin16s_genb::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_genb::@3->sin16s_genb::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG141 [66] phi (signed word*) sin16s_genb::sintab#2 = (const signed word[$78]) main::sintab2#0 [phi:sin16s_genb::@3->sin16s_genb::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintab2
    sta sintab
    lda #>main.sintab2
    sta sintab+1
  //SEG142 [66] phi (dword) sin16s_genb::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_genb::@3->sin16s_genb::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG143 [66] phi from sin16s_genb::@4 to sin16s_genb::@1 [phi:sin16s_genb::@4->sin16s_genb::@1]
  b1_from_b4:
  //SEG144 [66] phi (word) sin16s_genb::i#2 = (word) sin16s_genb::i#1 [phi:sin16s_genb::@4->sin16s_genb::@1#0] -- register_copy 
  //SEG145 [66] phi (signed word*) sin16s_genb::sintab#2 = (signed word*) sin16s_genb::sintab#0 [phi:sin16s_genb::@4->sin16s_genb::@1#1] -- register_copy 
  //SEG146 [66] phi (dword) sin16s_genb::x#2 = (dword) sin16s_genb::x#1 [phi:sin16s_genb::@4->sin16s_genb::@1#2] -- register_copy 
    jmp b1
  //SEG147 sin16s_genb::@1
  b1:
  //SEG148 [67] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2 -- vwuz1=_hi_vduz2 
    lda x+2
    sta sin16sb.x
    lda x+3
    sta sin16sb.x+1
  //SEG149 [68] call sin16sb 
    jsr sin16sb
  //SEG150 [69] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1 -- vwsz1=vwsz2 
    lda sin16sb.return_1
    sta sin16sb.return
    lda sin16sb.return_1+1
    sta sin16sb.return+1
    jmp b4
  //SEG151 sin16s_genb::@4
  b4:
  //SEG152 [70] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0 -- vwsz1=vwsz2 
    lda sin16sb.return
    sta _2
    lda sin16sb.return+1
    sta _2+1
  //SEG153 [71] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _2
    sta (sintab),y
    iny
    lda _2+1
    sta (sintab),y
  //SEG154 [72] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG155 [73] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG156 [74] (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG157 [75] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b4
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b4
  !:
    jmp breturn
  //SEG158 sin16s_genb::@return
  breturn:
  //SEG159 [76] return 
    rts
}
//SEG160 sin16sb
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16sb(word zeropage($1a) x)
sin16sb: {
    .label x = $1a
    .label return = $4f
    .label x1 = $53
    .label x2 = $57
    .label x3 = $5b
    .label x3_6 = $5f
    .label usinx = $61
    .label x4 = $65
    .label x5 = $69
    .label x5_128 = $6b
    .label usinx_1 = $6d
    .label return_1 = $1c
    .label sinx = $1c
    .label isUpper = $19
    .label return_5 = $1c
  //SEG161 [77] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin16sb
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin16sb
  !:
    jmp b4
  //SEG162 sin16sb::@4
  b4:
  //SEG163 [78] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG164 [79] phi from sin16sb::@4 to sin16sb::@1 [phi:sin16sb::@4->sin16sb::@1]
  b1_from_b4:
  //SEG165 [79] phi (byte) sin16sb::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@4->sin16sb::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG166 [79] phi (word) sin16sb::x#4 = (word) sin16sb::x#1 [phi:sin16sb::@4->sin16sb::@1#1] -- register_copy 
    jmp b1
  //SEG167 [79] phi from sin16sb to sin16sb::@1 [phi:sin16sb->sin16sb::@1]
  b1_from_sin16sb:
  //SEG168 [79] phi (byte) sin16sb::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb->sin16sb::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG169 [79] phi (word) sin16sb::x#4 = (word) sin16sb::x#0 [phi:sin16sb->sin16sb::@1#1] -- register_copy 
    jmp b1
  //SEG170 sin16sb::@1
  b1:
  //SEG171 [80] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b5
  //SEG172 sin16sb::@5
  b5:
  //SEG173 [81] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG174 [82] phi from sin16sb::@1 sin16sb::@5 to sin16sb::@2 [phi:sin16sb::@1/sin16sb::@5->sin16sb::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG175 [82] phi (word) sin16sb::x#6 = (word) sin16sb::x#4 [phi:sin16sb::@1/sin16sb::@5->sin16sb::@2#0] -- register_copy 
    jmp b2
  //SEG176 sin16sb::@2
  b2:
  //SEG177 [83] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz2_rol_3 
    lda x
    asl
    sta x1
    lda x+1
    rol
    sta x1+1
    asl x1
    rol x1+1
    asl x1
    rol x1+1
  //SEG178 [84] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG179 [85] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG180 [86] call mulu16_sel 
  //SEG181 [116] phi from sin16sb::@2 to mulu16_sel [phi:sin16sb::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG182 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@2->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG183 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#5 [phi:sin16sb::@2->mulu16_sel#1] -- register_copy 
  //SEG184 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#5 [phi:sin16sb::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG185 [87] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_18
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_18+1
    jmp b8
  //SEG186 sin16sb::@8
  b8:
  //SEG187 [88] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18 -- vwuz1=vwuz2 
    lda mulu16_sel.return_18
    sta x2
    lda mulu16_sel.return_18+1
    sta x2+1
  //SEG188 [89] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0 -- vwuz1=vwuz2 
    lda x2
    sta mulu16_sel.v1
    lda x2+1
    sta mulu16_sel.v1+1
  //SEG189 [90] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG190 [91] call mulu16_sel 
  //SEG191 [116] phi from sin16sb::@8 to mulu16_sel [phi:sin16sb::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG192 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@8->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG193 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#6 [phi:sin16sb::@8->mulu16_sel#1] -- register_copy 
  //SEG194 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#6 [phi:sin16sb::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG195 [92] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_19
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_19+1
    jmp b9
  //SEG196 sin16sb::@9
  b9:
  //SEG197 [93] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19 -- vwuz1=vwuz2 
    lda mulu16_sel.return_19
    sta x3
    lda mulu16_sel.return_19+1
    sta x3+1
  //SEG198 [94] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG199 [95] call mulu16_sel 
  //SEG200 [116] phi from sin16sb::@9 to mulu16_sel [phi:sin16sb::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG201 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@9->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG202 [116] phi (word) mulu16_sel::v2#10 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16sb::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG203 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#7 [phi:sin16sb::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG204 [96] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_20
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_20+1
    jmp b10
  //SEG205 sin16sb::@10
  b10:
  //SEG206 [97] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20 -- vwuz1=vwuz2 
    lda mulu16_sel.return_20
    sta x3_6
    lda mulu16_sel.return_20+1
    sta x3_6+1
  //SEG207 [98] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG208 [99] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG209 [100] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG210 [101] call mulu16_sel 
  //SEG211 [116] phi from sin16sb::@10 to mulu16_sel [phi:sin16sb::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG212 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@10->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG213 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#8 [phi:sin16sb::@10->mulu16_sel#1] -- register_copy 
  //SEG214 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#8 [phi:sin16sb::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG215 [102] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_10
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_10+1
    jmp b11
  //SEG216 sin16sb::@11
  b11:
  //SEG217 [103] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10 -- vwuz1=vwuz2 
    lda mulu16_sel.return_10
    sta x4
    lda mulu16_sel.return_10+1
    sta x4+1
  //SEG218 [104] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0 -- vwuz1=vwuz2 
    lda x4
    sta mulu16_sel.v1
    lda x4+1
    sta mulu16_sel.v1+1
  //SEG219 [105] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG220 [106] call mulu16_sel 
  //SEG221 [116] phi from sin16sb::@11 to mulu16_sel [phi:sin16sb::@11->mulu16_sel]
  mulu16_sel_from_b11:
  //SEG222 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@11->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG223 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#9 [phi:sin16sb::@11->mulu16_sel#1] -- register_copy 
  //SEG224 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#9 [phi:sin16sb::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG225 [107] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_11
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_11+1
    jmp b12
  //SEG226 sin16sb::@12
  b12:
  //SEG227 [108] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11 -- vwuz1=vwuz2 
    lda mulu16_sel.return_11
    sta x5
    lda mulu16_sel.return_11+1
    sta x5+1
  //SEG228 [109] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz2_ror_4 
    lda x5+1
    sta x5_128+1
    lda x5
    sta x5_128
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG229 [110] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
    lda usinx+1
    adc x5_128+1
    sta usinx_1+1
  //SEG230 [111] if((byte) sin16sb::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16sb::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b15
    jmp b6
  //SEG231 sin16sb::@6
  b6:
  //SEG232 [112] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1 -- vwsz1=_neg_vwsz2 
    sec
    lda usinx_1
    eor #$ff
    adc #0
    sta sinx
    lda usinx_1+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG233 [113] phi from sin16sb::@15 sin16sb::@6 to sin16sb::@3 [phi:sin16sb::@15/sin16sb::@6->sin16sb::@3]
  b3_from_b15:
  b3_from_b6:
  //SEG234 [113] phi (signed word) sin16sb::return#1 = (signed word~) sin16sb::return#5 [phi:sin16sb::@15/sin16sb::@6->sin16sb::@3#0] -- register_copy 
    jmp b3
  //SEG235 sin16sb::@3
  b3:
    jmp breturn
  //SEG236 sin16sb::@return
  breturn:
  //SEG237 [114] return 
    rts
  //SEG238 sin16sb::@15
  b15:
  //SEG239 [115] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1 -- vwsz1=vwsz2 
    lda usinx_1
    sta return_5
    lda usinx_1+1
    sta return_5+1
    jmp b3_from_b15
}
//SEG240 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($1e) v1, word zeropage($20) v2, byte zeropage($22) select)
mulu16_sel: {
    .label _0 = $75
    .label _1 = $79
    .label v1 = $1e
    .label v2 = $20
    .label return = $a2
    .label return_1 = $a6
    .label return_10 = $63
    .label return_11 = $67
    .label return_14 = $aa
    .label return_15 = $b0
    .label return_16 = $b4
    .label select = $22
    .label return_17 = $7d
    .label return_18 = $55
    .label return_19 = $59
    .label return_20 = $5d
  //SEG241 [117] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG242 [118] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10 -- vwuz1=vwuz2 
    lda v2
    sta mul16u.b
    lda v2+1
    sta mul16u.b+1
  //SEG243 [119] call mul16u 
    jsr mul16u
  //SEG244 [120] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda mul16u.res
    sta mul16u.return
    lda mul16u.res+1
    sta mul16u.return+1
    lda mul16u.res+2
    sta mul16u.return+2
    lda mul16u.res+3
    sta mul16u.return+3
    jmp b2
  //SEG245 mulu16_sel::@2
  b2:
  //SEG246 [121] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda mul16u.return
    sta _0
    lda mul16u.return+1
    sta _0+1
    lda mul16u.return+2
    sta _0+2
    lda mul16u.return+3
    sta _0+3
  //SEG247 [122] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10 -- vduz1=vduz2_rol_vbuz3 
    lda _0
    sta _1
    lda _0+1
    sta _1+1
    lda _0+2
    sta _1+2
    lda _0+3
    sta _1+3
    ldx select
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG248 [123] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return_17
    lda _1+3
    sta return_17+1
    jmp breturn
  //SEG249 mulu16_sel::@return
  breturn:
  //SEG250 [124] return 
    rts
}
//SEG251 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($23) a, word zeropage($6f) b)
mul16u: {
    .label _1 = $7f
    .label mb = $29
    .label a = $23
    .label res = $25
    .label b = $6f
    .label return = $71
  //SEG252 [125] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG253 [126] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG254 [126] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG255 [126] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG256 [126] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG257 mul16u::@1
  b1:
  //SEG258 [127] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG259 mul16u::@return
  breturn:
  //SEG260 [128] return 
    rts
  //SEG261 mul16u::@2
  b2:
  //SEG262 [129] (byte/word~) mul16u::$1 ← (word) mul16u::a#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda a
    and #1
    sta _1
  //SEG263 [130] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuz1_eq_0_then_la1 
    lda _1
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG264 mul16u::@7
  b7:
  //SEG265 [131] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG266 [132] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG267 [132] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
    jmp b4
  //SEG268 mul16u::@4
  b4:
  //SEG269 [133] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG270 [134] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG271 [126] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  b1_from_b4:
  //SEG272 [126] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG273 [126] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG274 [126] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG275 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $82
    .label quotient_lo = $86
    .label return = $88
    .label return_2 = $90
    .label return_3 = $47
  //SEG276 [136] call divr16u 
  //SEG277 [145] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
  //SEG278 [145] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG279 [145] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG280 [137] (word) divr16u::return#2 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b2
  //SEG281 div32u16u::@2
  b2:
  //SEG282 [138] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta quotient_hi
    lda divr16u.return_2+1
    sta quotient_hi+1
  //SEG283 [139] (word) divr16u::rem#4 ← (word) rem16u#1 -- vwuz1=vwuz2 
    lda rem16u
    sta divr16u.rem
    lda rem16u+1
    sta divr16u.rem+1
  //SEG284 [140] call divr16u 
  //SEG285 [145] phi from div32u16u::@2 to divr16u [phi:div32u16u::@2->divr16u]
  divr16u_from_b2:
  //SEG286 [145] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@2->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG287 [145] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@2->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG288 [141] (word) divr16u::return#3 ← (word) divr16u::return#0 -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_3
    lda divr16u.return+1
    sta divr16u.return_3+1
    jmp b3
  //SEG289 div32u16u::@3
  b3:
  //SEG290 [142] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 -- vwuz1=vwuz2 
    lda divr16u.return_3
    sta quotient_lo
    lda divr16u.return_3+1
    sta quotient_lo+1
  //SEG291 [143] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
  //SEG292 div32u16u::@return
  breturn:
  //SEG293 [144] return 
    rts
}
//SEG294 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage($2f) dividend, word zeropage($2d) rem)
divr16u: {
    .label _1 = $8c
    .label _2 = $8d
    .label rem = $2d
    .label dividend = $2f
    .label quotient = $31
    .label i = $33
    .label return = $31
    .label return_2 = $80
    .label return_3 = $84
  //SEG295 [146] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG296 [146] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG297 [146] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG298 [146] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG299 [146] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG300 [146] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG301 [146] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG302 [146] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG303 [146] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG304 [146] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG305 divr16u::@1
  b1:
  //SEG306 [147] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG307 [148] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG308 [149] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG309 [150] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda _2
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG310 divr16u::@4
  b4:
  //SEG311 [151] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG312 [152] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG313 [152] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG314 divr16u::@2
  b2:
  //SEG315 [153] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG316 [154] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG317 [155] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.wavelength
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.wavelength
    bcc b3_from_b2
  !:
    jmp b5
  //SEG318 divr16u::@5
  b5:
  //SEG319 [156] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG320 [157] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.wavelength
    sta rem
    lda rem+1
    sbc #>main.wavelength
    sta rem+1
  //SEG321 [158] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG322 [158] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG323 [158] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG324 divr16u::@3
  b3:
  //SEG325 [159] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG326 [160] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp i
    bne b1_from_b3
    jmp b6
  //SEG327 divr16u::@6
  b6:
  //SEG328 [161] (word) rem16u#1 ← (word) divr16u::rem#11 -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
  //SEG329 divr16u::@return
  breturn:
  //SEG330 [162] return 
    rts
}
//SEG331 sin16s_gen
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zeropage($38) sintab)
sin16s_gen: {
    .label _1 = $9a
    .label step = $94
    .label sintab = $38
    .label x = $34
    .label i = $3a
  //SEG332 [164] call div32u16u 
  //SEG333 [135] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
  //SEG334 [165] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 -- vduz1=vduz2 
    lda div32u16u.return
    sta div32u16u.return_2
    lda div32u16u.return+1
    sta div32u16u.return_2+1
    lda div32u16u.return+2
    sta div32u16u.return_2+2
    lda div32u16u.return+3
    sta div32u16u.return_2+3
    jmp b3
  //SEG335 sin16s_gen::@3
  b3:
  //SEG336 [166] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 -- vduz1=vduz2 
    lda div32u16u.return_2
    sta step
    lda div32u16u.return_2+1
    sta step+1
    lda div32u16u.return_2+2
    sta step+2
    lda div32u16u.return_2+3
    sta step+3
  //SEG337 [167] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  b1_from_b3:
  //SEG338 [167] phi (word) sin16s_gen::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG339 [167] phi (signed word*) sin16s_gen::sintab#2 = (const signed word[$78]) main::sintab1#0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintab1
    sta sintab
    lda #>main.sintab1
    sta sintab+1
  //SEG340 [167] phi (dword) sin16s_gen::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG341 [167] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
  b1_from_b4:
  //SEG342 [167] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
  //SEG343 [167] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
  //SEG344 [167] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp b1
  //SEG345 sin16s_gen::@1
  b1:
  //SEG346 [168] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG347 [169] call sin16s 
    jsr sin16s
  //SEG348 [170] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 -- vwsz1=vwsz2 
    lda sin16s.return_1
    sta sin16s.return
    lda sin16s.return_1+1
    sta sin16s.return+1
    jmp b4
  //SEG349 sin16s_gen::@4
  b4:
  //SEG350 [171] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0 -- vwsz1=vwsz2 
    lda sin16s.return
    sta _1
    lda sin16s.return+1
    sta _1+1
  //SEG351 [172] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _1
    sta (sintab),y
    iny
    lda _1+1
    sta (sintab),y
  //SEG352 [173] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG353 [174] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG354 [175] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG355 [176] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b4
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b4
  !:
    jmp breturn
  //SEG356 sin16s_gen::@return
  breturn:
  //SEG357 [177] return 
    rts
}
//SEG358 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($3d) x)
sin16s: {
    .label _6 = $9c
    .label x = $3d
    .label return = $98
    .label x1 = $a0
    .label x2 = $a4
    .label x3 = $a8
    .label x3_6 = $ac
    .label usinx = $ae
    .label x4 = $b2
    .label x5 = $b6
    .label x5_128 = $b8
    .label usinx_1 = $ba
    .label return_1 = $41
    .label sinx = $41
    .label isUpper = $3c
    .label return_5 = $41
  //SEG359 [178] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
  //SEG360 sin16s::@4
  b4:
  //SEG361 [179] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG362 [180] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
  //SEG363 [180] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG364 [180] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG365 [180] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
  //SEG366 [180] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG367 [180] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG368 sin16s::@1
  b1:
  //SEG369 [181] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
  //SEG370 sin16s::@5
  b5:
  //SEG371 [182] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG372 [183] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG373 [183] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
  //SEG374 sin16s::@2
  b2:
  //SEG375 [184] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vduz1=vduz2_rol_3 
    lda x
    sta _6
    lda x+1
    sta _6+1
    lda x+2
    sta _6+2
    lda x+3
    sta _6+3
    ldy #3
  !:
    asl _6
    rol _6+1
    rol _6+2
    rol _6+3
    dey
    bne !-
  //SEG376 [185] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 -- vwuz1=_hi_vduz2 
    lda _6+2
    sta x1
    lda _6+3
    sta x1+1
  //SEG377 [186] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG378 [187] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG379 [188] call mulu16_sel 
  //SEG380 [116] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG381 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG382 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG383 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG384 [189] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
    jmp b8
  //SEG385 sin16s::@8
  b8:
  //SEG386 [190] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda mulu16_sel.return
    sta x2
    lda mulu16_sel.return+1
    sta x2+1
  //SEG387 [191] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 -- vwuz1=vwuz2 
    lda x2
    sta mulu16_sel.v1
    lda x2+1
    sta mulu16_sel.v1+1
  //SEG388 [192] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG389 [193] call mulu16_sel 
  //SEG390 [116] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG391 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG392 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#1 [phi:sin16s::@8->mulu16_sel#1] -- register_copy 
  //SEG393 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#1 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG394 [194] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_1
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_1+1
    jmp b9
  //SEG395 sin16s::@9
  b9:
  //SEG396 [195] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 -- vwuz1=vwuz2 
    lda mulu16_sel.return_1
    sta x3
    lda mulu16_sel.return_1+1
    sta x3+1
  //SEG397 [196] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG398 [197] call mulu16_sel 
  //SEG399 [116] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG400 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@9->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta mulu16_sel.select
  //SEG401 [116] phi (word) mulu16_sel::v2#10 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16s::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG402 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#2 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG403 [198] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_14
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_14+1
    jmp b10
  //SEG404 sin16s::@10
  b10:
  //SEG405 [199] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14 -- vwuz1=vwuz2 
    lda mulu16_sel.return_14
    sta x3_6
    lda mulu16_sel.return_14+1
    sta x3_6+1
  //SEG406 [200] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG407 [201] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 -- vwuz1=vwuz2 
    lda x3
    sta mulu16_sel.v1
    lda x3+1
    sta mulu16_sel.v1+1
  //SEG408 [202] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG409 [203] call mulu16_sel 
  //SEG410 [116] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG411 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG412 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#3 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG413 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#3 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG414 [204] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_15
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_15+1
    jmp b11
  //SEG415 sin16s::@11
  b11:
  //SEG416 [205] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15 -- vwuz1=vwuz2 
    lda mulu16_sel.return_15
    sta x4
    lda mulu16_sel.return_15+1
    sta x4+1
  //SEG417 [206] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 -- vwuz1=vwuz2 
    lda x4
    sta mulu16_sel.v1
    lda x4+1
    sta mulu16_sel.v1+1
  //SEG418 [207] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG419 [208] call mulu16_sel 
  //SEG420 [116] phi from sin16s::@11 to mulu16_sel [phi:sin16s::@11->mulu16_sel]
  mulu16_sel_from_b11:
  //SEG421 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@11->mulu16_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta mulu16_sel.select
  //SEG422 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#4 [phi:sin16s::@11->mulu16_sel#1] -- register_copy 
  //SEG423 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#4 [phi:sin16s::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG424 [209] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return_16
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return_16+1
    jmp b12
  //SEG425 sin16s::@12
  b12:
  //SEG426 [210] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16 -- vwuz1=vwuz2 
    lda mulu16_sel.return_16
    sta x5
    lda mulu16_sel.return_16+1
    sta x5+1
  //SEG427 [211] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz2_ror_4 
    lda x5+1
    sta x5_128+1
    lda x5
    sta x5_128
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG428 [212] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda usinx
    clc
    adc x5_128
    sta usinx_1
    lda usinx+1
    adc x5_128+1
    sta usinx_1+1
  //SEG429 [213] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b15
    jmp b6
  //SEG430 sin16s::@6
  b6:
  //SEG431 [214] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz2 
    sec
    lda usinx_1
    eor #$ff
    adc #0
    sta sinx
    lda usinx_1+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG432 [215] phi from sin16s::@15 sin16s::@6 to sin16s::@3 [phi:sin16s::@15/sin16s::@6->sin16s::@3]
  b3_from_b15:
  b3_from_b6:
  //SEG433 [215] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@15/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
  //SEG434 sin16s::@3
  b3:
    jmp breturn
  //SEG435 sin16s::@return
  breturn:
  //SEG436 [216] return 
    rts
  //SEG437 sin16s::@15
  b15:
  //SEG438 [217] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 -- vwsz1=vwsz2 
    lda usinx_1
    sta return_5
    lda usinx_1+1
    sta return_5+1
    jmp b3_from_b15
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2) [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ( main:2 [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Statement [12] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2 [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ( main:2 [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ) always clobbers reg byte a 
Statement [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#48 print_sword::w#1 ] ( main:2 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#48 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::st2#2 main::i#2 main::st1#1 print_char_cursor#2 ] ( main:2 [ main::st2#2 main::i#2 main::st1#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#2 main::st1#1 main::st2#1 print_char_cursor#2 ] ( main:2 [ main::i#2 main::st1#1 main::st2#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:14 [ main::st1#2 main::st2#2 main::i#2 main::sw#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:19 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:14 [ main::st1#2 main::st2#2 main::i#2 main::sw#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:19 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [32] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_char_cursor#48 print_sword::w#1 ] ( main:2::print_sword:17 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#48 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:17 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [39] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 [ print_sword::w#3 print_char_cursor#43 print_byte::b#0 ] ( main:2::print_sword:17::print_word:37 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_char_cursor#43 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [41] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_sword:17::print_word:37 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [45] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#2 print_char_cursor#46 print_byte::$0 ] ( main:2::print_sword:17::print_word:37::print_byte:40 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_byte::b#2 print_char_cursor#46 print_byte::$0 ] main:2::print_sword:17::print_word:37::print_byte:42 [ main::st1#2 main::st2#2 main::i#2 print_byte::b#2 print_char_cursor#46 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [48] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_sword:17::print_word:37::print_byte:40 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:17::print_word:37::print_byte:42 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [53] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3 [ print_char_cursor#33 ] ( main:2::print_sword:17::print_char:34 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#1 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:40::print_char:47 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_byte::b#2 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:42::print_char:47 [ main::st1#2 main::st2#2 main::i#2 print_byte::b#2 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:40::print_char:50 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:42::print_char:50 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#33 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [58] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:9 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [60] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:9 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [64] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0 [ div32u16u::return#3 ] ( main:2::sin16s_genb:7 [ div32u16u::return#3 ] ) always clobbers reg byte a 
Statement [65] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3 [ sin16s_genb::step#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 ] ) always clobbers reg byte a 
Statement [67] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#0 ] ) always clobbers reg byte a 
Statement [69] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::return#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::return#0 ] ) always clobbers reg byte a 
Statement [70] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16s_genb::$2 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16s_genb::$2 ] ) always clobbers reg byte a 
Statement [71] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [72] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::i#2 sin16s_genb::sintab#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::i#2 sin16s_genb::sintab#0 ] ) always clobbers reg byte a 
Statement [73] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0 [ sin16s_genb::step#0 sin16s_genb::i#2 sin16s_genb::x#1 sin16s_genb::sintab#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::i#2 sin16s_genb::x#1 sin16s_genb::sintab#0 ] ) always clobbers reg byte a 
Statement [75] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1 [ sin16s_genb::step#0 sin16s_genb::x#1 sin16s_genb::sintab#0 sin16s_genb::i#1 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#1 sin16s_genb::sintab#0 sin16s_genb::i#1 ] ) always clobbers reg byte a 
Statement [77] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1 [ sin16sb::x#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#0 ] ) always clobbers reg byte a 
Statement [78] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0 [ sin16sb::x#1 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#1 ] ) always clobbers reg byte a 
Statement [80] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2 [ sin16sb::x#4 sin16sb::isUpper#2 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#4 sin16sb::isUpper#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ sin16sb::isUpper#2 ]
Statement [81] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4 [ sin16sb::isUpper#2 sin16sb::x#2 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x#2 ] ) always clobbers reg byte a 
Statement [83] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin16sb::isUpper#2 sin16sb::x1#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 ] ) always clobbers reg byte a 
Statement [84] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 ] ) always clobbers reg byte a 
Statement [85] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 mulu16_sel::v2#5 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 mulu16_sel::v2#5 ] ) always clobbers reg byte a 
Statement [87] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#18 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#18 ] ) always clobbers reg byte a 
Statement [88] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x2#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x2#0 ] ) always clobbers reg byte a 
Statement [89] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 ] ) always clobbers reg byte a 
Statement [90] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 mulu16_sel::v2#6 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 mulu16_sel::v2#6 ] ) always clobbers reg byte a 
Statement [92] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#19 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#19 ] ) always clobbers reg byte a 
Statement [93] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 ] ) always clobbers reg byte a 
Statement [94] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::v1#7 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::v1#7 ] ) always clobbers reg byte a 
Statement [96] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::return#20 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::return#20 ] ) always clobbers reg byte a 
Statement [97] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::x3_6#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::x3_6#0 ] ) always clobbers reg byte a 
Statement [98] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::usinx#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::usinx#0 ] ) always clobbers reg byte a 
Statement [99] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 ] ) always clobbers reg byte a 
Statement [100] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 mulu16_sel::v2#8 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 mulu16_sel::v2#8 ] ) always clobbers reg byte a 
Statement [102] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::return#10 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [103] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 sin16sb::x4#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 sin16sb::x4#0 ] ) always clobbers reg byte a 
Statement [104] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#9 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#9 ] ) always clobbers reg byte a 
Statement [105] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::v1#9 mulu16_sel::v2#9 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::v1#9 mulu16_sel::v2#9 ] ) always clobbers reg byte a 
Statement [107] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::return#11 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [108] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11 [ sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5#0 ] ) always clobbers reg byte a 
Statement [109] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5_128#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:25 [ sin16sb::isUpper#2 ]
Statement [110] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0 [ sin16sb::isUpper#2 sin16sb::usinx#1 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#1 ] ) always clobbers reg byte a 
Statement [112] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1 [ sin16sb::sinx#1 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::sinx#1 ] ) always clobbers reg byte a 
Statement [115] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1 [ sin16sb::return#5 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::return#5 ] ) always clobbers reg byte a 
Statement [117] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10 [ mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ mulu16_sel::select#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:60 [ sin16s::isUpper#2 ]
Statement [118] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10 [ mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] ) always clobbers reg byte a 
Statement [120] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mulu16_sel::select#10 mul16u::return#2 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [121] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 [ mulu16_sel::select#10 mulu16_sel::$0 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [122] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10 [ mulu16_sel::$1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [123] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#17 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#17 ] ) always clobbers reg byte a 
Statement [125] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] ) always clobbers reg byte a 
Statement [127] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [129] (byte/word~) mul16u::$1 ← (word) mul16u::a#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [131] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [137] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 rem16u#1 ] ( main:2::sin16s_genb:7::div32u16u:63 [ divr16u::return#2 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164 [ divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [138] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [139] (word) divr16u::rem#4 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [141] (word) divr16u::return#3 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 divr16u::return#3 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [142] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [143] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::return#0 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [148] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ]
Statement [151] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [155] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [157] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [161] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::return#0 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::return#0 rem16u#1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [165] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:2::sin16s_gen:5 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [166] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen::step#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 ] ) always clobbers reg byte a 
Statement [168] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [170] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [171] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ) always clobbers reg byte a 
Statement [172] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [173] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [174] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [176] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ) always clobbers reg byte a 
Statement [178] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [179] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [181] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [182] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [184] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin16s::isUpper#2 sin16s::$6 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::$6 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:60 [ sin16s::isUpper#2 ]
Statement [185] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [186] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ mulu16_sel::v1#0 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#0 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [187] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ mulu16_sel::v1#0 mulu16_sel::v2#0 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#0 mulu16_sel::v2#0 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [189] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [190] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [191] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ mulu16_sel::v1#1 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#1 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [192] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ mulu16_sel::v1#1 mulu16_sel::v2#1 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#1 mulu16_sel::v2#1 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [194] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [195] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [196] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ mulu16_sel::v1#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [198] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#14 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#14 ] ) always clobbers reg byte a 
Statement [199] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [200] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [201] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ mulu16_sel::v1#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [202] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ mulu16_sel::v1#3 mulu16_sel::v2#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#3 mulu16_sel::v2#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [204] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#15 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#15 ] ) always clobbers reg byte a 
Statement [205] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [206] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ mulu16_sel::v1#4 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#4 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [207] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ mulu16_sel::v1#4 mulu16_sel::v2#4 sin16s::isUpper#2 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#4 mulu16_sel::v2#4 sin16s::isUpper#2 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [209] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#16 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#16 ] ) always clobbers reg byte a 
Statement [210] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [211] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [212] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [214] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [217] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Statement [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2) [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ( main:2 [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ) always clobbers reg byte a reg byte y 
Statement [12] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2 [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ( main:2 [ main::st1#2 main::st2#2 print_char_cursor#49 main::i#2 main::sw#0 ] ) always clobbers reg byte a 
Statement [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#48 print_sword::w#1 ] ( main:2 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#48 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::st2#2 main::i#2 main::st1#1 print_char_cursor#2 ] ( main:2 [ main::st2#2 main::i#2 main::st1#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ main::i#2 main::st1#1 main::st2#1 print_char_cursor#2 ] ( main:2 [ main::i#2 main::st1#1 main::st2#1 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:14 [ main::st1#2 main::st2#2 main::i#2 main::sw#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:19 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) [ print_char_cursor#2 print_str::str#3 ] ( main:2::print_str:14 [ main::st1#2 main::st2#2 main::i#2 main::sw#0 print_char_cursor#2 print_str::str#3 ] main:2::print_str:19 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#2 print_str::str#3 ] ) always clobbers reg byte a reg byte y 
Statement [32] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_char_cursor#48 print_sword::w#1 ] ( main:2::print_sword:17 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#48 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 [ print_char_cursor#12 print_sword::w#0 ] ( main:2::print_sword:17 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#12 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [39] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 [ print_sword::w#3 print_char_cursor#43 print_byte::b#0 ] ( main:2::print_sword:17::print_word:37 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_char_cursor#43 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [41] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 [ print_char_cursor#12 print_byte::b#1 ] ( main:2::print_sword:17::print_word:37 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#12 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [45] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#2 print_char_cursor#46 print_byte::$0 ] ( main:2::print_sword:17::print_word:37::print_byte:40 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_byte::b#2 print_char_cursor#46 print_byte::$0 ] main:2::print_sword:17::print_word:37::print_byte:42 [ main::st1#2 main::st2#2 main::i#2 print_byte::b#2 print_char_cursor#46 print_byte::$0 ] ) always clobbers reg byte a 
Statement [48] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f [ print_char_cursor#12 print_byte::$2 ] ( main:2::print_sword:17::print_word:37::print_byte:40 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_char_cursor#12 print_byte::$2 ] main:2::print_sword:17::print_word:37::print_byte:42 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#12 print_byte::$2 ] ) always clobbers reg byte a 
Statement [53] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3 [ print_char_cursor#33 ] ( main:2::print_sword:17::print_char:34 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#1 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:40::print_char:47 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_byte::b#2 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:42::print_char:47 [ main::st1#2 main::st2#2 main::i#2 print_byte::b#2 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:40::print_char:50 [ main::st1#2 main::st2#2 main::i#2 print_sword::w#3 print_char_cursor#33 ] main:2::print_sword:17::print_word:37::print_byte:42::print_char:50 [ main::st1#2 main::st2#2 main::i#2 print_char_cursor#33 ] ) always clobbers reg byte y 
Statement [58] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:9 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [60] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:9 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [64] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0 [ div32u16u::return#3 ] ( main:2::sin16s_genb:7 [ div32u16u::return#3 ] ) always clobbers reg byte a 
Statement [65] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3 [ sin16s_genb::step#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 ] ) always clobbers reg byte a 
Statement [67] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#0 ] ) always clobbers reg byte a 
Statement [69] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::return#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::return#0 ] ) always clobbers reg byte a 
Statement [70] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16s_genb::$2 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16s_genb::$2 ] ) always clobbers reg byte a 
Statement [71] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [72] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::i#2 sin16s_genb::sintab#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::i#2 sin16s_genb::sintab#0 ] ) always clobbers reg byte a 
Statement [73] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0 [ sin16s_genb::step#0 sin16s_genb::i#2 sin16s_genb::x#1 sin16s_genb::sintab#0 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::i#2 sin16s_genb::x#1 sin16s_genb::sintab#0 ] ) always clobbers reg byte a 
Statement [75] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1 [ sin16s_genb::step#0 sin16s_genb::x#1 sin16s_genb::sintab#0 sin16s_genb::i#1 ] ( main:2::sin16s_genb:7 [ sin16s_genb::step#0 sin16s_genb::x#1 sin16s_genb::sintab#0 sin16s_genb::i#1 ] ) always clobbers reg byte a 
Statement [77] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1 [ sin16sb::x#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#0 ] ) always clobbers reg byte a 
Statement [78] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0 [ sin16sb::x#1 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#1 ] ) always clobbers reg byte a 
Statement [80] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2 [ sin16sb::x#4 sin16sb::isUpper#2 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::x#4 sin16sb::isUpper#2 ] ) always clobbers reg byte a 
Statement [81] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4 [ sin16sb::isUpper#2 sin16sb::x#2 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x#2 ] ) always clobbers reg byte a 
Statement [83] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin16sb::isUpper#2 sin16sb::x1#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 ] ) always clobbers reg byte a 
Statement [84] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 ] ) always clobbers reg byte a 
Statement [85] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 mulu16_sel::v2#5 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#5 mulu16_sel::v2#5 ] ) always clobbers reg byte a 
Statement [87] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#18 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#18 ] ) always clobbers reg byte a 
Statement [88] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x2#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x2#0 ] ) always clobbers reg byte a 
Statement [89] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 ] ) always clobbers reg byte a 
Statement [90] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 mulu16_sel::v2#6 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v1#6 mulu16_sel::v2#6 ] ) always clobbers reg byte a 
Statement [92] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#19 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#19 ] ) always clobbers reg byte a 
Statement [93] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 ] ) always clobbers reg byte a 
Statement [94] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::v1#7 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::v1#7 ] ) always clobbers reg byte a 
Statement [96] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::return#20 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::return#20 ] ) always clobbers reg byte a 
Statement [97] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::x3_6#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::x3_6#0 ] ) always clobbers reg byte a 
Statement [98] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::usinx#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 sin16sb::usinx#0 ] ) always clobbers reg byte a 
Statement [99] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 ] ) always clobbers reg byte a 
Statement [100] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 mulu16_sel::v2#8 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#8 mulu16_sel::v2#8 ] ) always clobbers reg byte a 
Statement [102] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::return#10 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::return#10 ] ) always clobbers reg byte a 
Statement [103] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 sin16sb::x4#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 sin16sb::x4#0 ] ) always clobbers reg byte a 
Statement [104] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0 [ sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#9 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v1#9 ] ) always clobbers reg byte a 
Statement [105] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0 [ sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::v1#9 mulu16_sel::v2#9 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::v1#9 mulu16_sel::v2#9 ] ) always clobbers reg byte a 
Statement [107] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17 [ sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::return#11 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::return#11 ] ) always clobbers reg byte a 
Statement [108] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11 [ sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5#0 ] ) always clobbers reg byte a 
Statement [109] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5_128#0 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 sin16sb::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [110] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0 [ sin16sb::isUpper#2 sin16sb::usinx#1 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#1 ] ) always clobbers reg byte a 
Statement [112] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1 [ sin16sb::sinx#1 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::sinx#1 ] ) always clobbers reg byte a 
Statement [115] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1 [ sin16sb::return#5 ] ( main:2::sin16s_genb:7::sin16sb:68 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::return#5 ] ) always clobbers reg byte a 
Statement [117] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10 [ mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#10 mulu16_sel::select#10 mul16u::a#1 ] ) always clobbers reg byte a 
Statement [118] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10 [ mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::b#0 ] ) always clobbers reg byte a 
Statement [120] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mulu16_sel::select#10 mul16u::return#2 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::return#2 ] ) always clobbers reg byte a 
Statement [121] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2 [ mulu16_sel::select#10 mulu16_sel::$0 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mulu16_sel::$0 ] ) always clobbers reg byte a 
Statement [122] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10 [ mulu16_sel::$1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] ) always clobbers reg byte a 
Statement [123] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1 [ mulu16_sel::return#17 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::return#17 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#17 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#17 ] ) always clobbers reg byte a 
Statement [125] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#1 mul16u::mb#0 ] ) always clobbers reg byte a 
Statement [127] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ) always clobbers reg byte a 
Statement [129] (byte/word~) mul16u::$1 ← (word) mul16u::a#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ) always clobbers reg byte a 
Statement [131] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:86::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:91::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:95::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::x3#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:101::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::x1#0 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_genb:7::sin16sb:68::mulu16_sel:106::mul16u:119 [ sin16s_genb::step#0 sin16s_genb::x#2 sin16s_genb::sintab#2 sin16s_genb::i#2 sin16sb::isUpper#2 sin16sb::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:188::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:193::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:197::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:203::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] main:2::sin16s_gen:5::sin16s:169::mulu16_sel:208::mul16u:119 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#10 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ) always clobbers reg byte a 
Statement [137] (word) divr16u::return#2 ← (word) divr16u::return#0 [ divr16u::return#2 rem16u#1 ] ( main:2::sin16s_genb:7::div32u16u:63 [ divr16u::return#2 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164 [ divr16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [138] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 [ div32u16u::quotient_hi#0 rem16u#1 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [139] (word) divr16u::rem#4 ← (word) rem16u#1 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 divr16u::rem#4 ] ) always clobbers reg byte a 
Statement [141] (word) divr16u::return#3 ← (word) divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 divr16u::return#3 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ) always clobbers reg byte a 
Statement [142] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ) always clobbers reg byte a 
Statement [143] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( main:2::sin16s_genb:7::div32u16u:63 [ div32u16u::return#0 ] main:2::sin16s_gen:5::div32u16u:164 [ div32u16u::return#0 ] ) always clobbers reg byte a 
Statement [148] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [151] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [155] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [157] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [161] (word) rem16u#1 ← (word) divr16u::rem#11 [ divr16u::return#0 rem16u#1 ] ( main:2::sin16s_genb:7::div32u16u:63::divr16u:136 [ divr16u::return#0 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:136 [ divr16u::return#0 rem16u#1 ] main:2::sin16s_genb:7::div32u16u:63::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] main:2::sin16s_gen:5::div32u16u:164::divr16u:140 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [165] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0 [ div32u16u::return#2 ] ( main:2::sin16s_gen:5 [ div32u16u::return#2 ] ) always clobbers reg byte a 
Statement [166] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2 [ sin16s_gen::step#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 ] ) always clobbers reg byte a 
Statement [168] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [170] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#0 ] ) always clobbers reg byte a 
Statement [171] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s_gen::$1 ] ) always clobbers reg byte a 
Statement [172] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [173] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::i#2 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [174] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ) always clobbers reg byte a 
Statement [176] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ( main:2::sin16s_gen:5 [ sin16s_gen::step#0 sin16s_gen::x#1 sin16s_gen::sintab#0 sin16s_gen::i#1 ] ) always clobbers reg byte a 
Statement [178] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 [ sin16s::x#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#0 ] ) always clobbers reg byte a 
Statement [179] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 [ sin16s::x#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#1 ] ) always clobbers reg byte a 
Statement [181] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::x#4 sin16s::isUpper#2 ] ) always clobbers reg byte a 
Statement [182] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x#2 ] ) always clobbers reg byte a 
Statement [184] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 [ sin16s::isUpper#2 sin16s::$6 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::$6 ] ) always clobbers reg byte a reg byte y 
Statement [185] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 [ sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [186] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 [ mulu16_sel::v1#0 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#0 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [187] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 [ mulu16_sel::v1#0 mulu16_sel::v2#0 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#0 mulu16_sel::v2#0 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [189] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ) always clobbers reg byte a 
Statement [190] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ) always clobbers reg byte a 
Statement [191] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0 [ mulu16_sel::v1#1 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#1 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [192] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 [ mulu16_sel::v1#1 mulu16_sel::v2#1 sin16s::isUpper#2 sin16s::x1#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#1 mulu16_sel::v2#1 sin16s::isUpper#2 sin16s::x1#0 ] ) always clobbers reg byte a 
Statement [194] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ) always clobbers reg byte a 
Statement [195] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [196] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0 [ mulu16_sel::v1#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ) always clobbers reg byte a 
Statement [198] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#14 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#14 ] ) always clobbers reg byte a 
Statement [199] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ) always clobbers reg byte a 
Statement [200] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [201] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0 [ mulu16_sel::v1#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [202] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 [ mulu16_sel::v1#3 mulu16_sel::v2#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#3 mulu16_sel::v2#3 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [204] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#15 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#15 ] ) always clobbers reg byte a 
Statement [205] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ) always clobbers reg byte a 
Statement [206] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0 [ mulu16_sel::v1#4 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#4 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [207] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 [ mulu16_sel::v1#4 mulu16_sel::v2#4 sin16s::isUpper#2 sin16s::usinx#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 mulu16_sel::v1#4 mulu16_sel::v2#4 sin16s::isUpper#2 sin16s::usinx#0 ] ) always clobbers reg byte a 
Statement [209] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#16 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#16 ] ) always clobbers reg byte a 
Statement [210] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ) always clobbers reg byte a 
Statement [211] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ) always clobbers reg byte a reg byte y 
Statement [212] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::isUpper#2 sin16s::usinx#1 ] ) always clobbers reg byte a 
Statement [214] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 [ sin16s::sinx#1 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::sinx#1 ] ) always clobbers reg byte a 
Statement [217] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1 [ sin16s::return#5 ] ( main:2::sin16s_gen:5::sin16s:169 [ sin16s_gen::step#0 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::i#2 sin16s::return#5 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::st1#2 main::st1#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ main::st2#2 main::st2#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ main::i#2 main::i#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:13 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_DWORD:17 [ sin16s_genb::x#2 sin16s_genb::x#1 ] : zp ZP_DWORD:17 , 
Potential registers zp ZP_WORD:21 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ sin16s_genb::i#2 sin16s_genb::i#1 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_BYTE:25 [ sin16sb::isUpper#2 ] : zp ZP_BYTE:25 , reg byte x , 
Potential registers zp ZP_WORD:26 [ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_WORD:32 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_BYTE:34 [ mulu16_sel::select#10 ] : zp ZP_BYTE:34 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:35 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] : zp ZP_WORD:35 , 
Potential registers zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp ZP_DWORD:37 , 
Potential registers zp ZP_DWORD:41 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp ZP_DWORD:41 , 
Potential registers zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:49 , 
Potential registers zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:51 , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:52 [ sin16s_gen::x#2 sin16s_gen::x#1 ] : zp ZP_DWORD:52 , 
Potential registers zp ZP_WORD:56 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] : zp ZP_WORD:56 , 
Potential registers zp ZP_WORD:58 [ sin16s_gen::i#2 sin16s_gen::i#1 ] : zp ZP_WORD:58 , 
Potential registers zp ZP_BYTE:60 [ sin16s::isUpper#2 ] : zp ZP_BYTE:60 , reg byte x , 
Potential registers zp ZP_DWORD:61 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp ZP_DWORD:61 , 
Potential registers zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ main::sw#0 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_BYTE:69 [ print_byte::$0 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ print_byte::$2 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:71 [ div32u16u::return#3 ] : zp ZP_DWORD:71 , 
Potential registers zp ZP_DWORD:75 [ sin16s_genb::step#0 ] : zp ZP_DWORD:75 , 
Potential registers zp ZP_WORD:79 [ sin16sb::return#0 ] : zp ZP_WORD:79 , 
Potential registers zp ZP_WORD:81 [ sin16s_genb::$2 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_WORD:83 [ sin16sb::x1#0 ] : zp ZP_WORD:83 , 
Potential registers zp ZP_WORD:85 [ mulu16_sel::return#18 ] : zp ZP_WORD:85 , 
Potential registers zp ZP_WORD:87 [ sin16sb::x2#0 ] : zp ZP_WORD:87 , 
Potential registers zp ZP_WORD:89 [ mulu16_sel::return#19 ] : zp ZP_WORD:89 , 
Potential registers zp ZP_WORD:91 [ sin16sb::x3#0 ] : zp ZP_WORD:91 , 
Potential registers zp ZP_WORD:93 [ mulu16_sel::return#20 ] : zp ZP_WORD:93 , 
Potential registers zp ZP_WORD:95 [ sin16sb::x3_6#0 ] : zp ZP_WORD:95 , 
Potential registers zp ZP_WORD:97 [ sin16sb::usinx#0 ] : zp ZP_WORD:97 , 
Potential registers zp ZP_WORD:99 [ mulu16_sel::return#10 ] : zp ZP_WORD:99 , 
Potential registers zp ZP_WORD:101 [ sin16sb::x4#0 ] : zp ZP_WORD:101 , 
Potential registers zp ZP_WORD:103 [ mulu16_sel::return#11 ] : zp ZP_WORD:103 , 
Potential registers zp ZP_WORD:105 [ sin16sb::x5#0 ] : zp ZP_WORD:105 , 
Potential registers zp ZP_WORD:107 [ sin16sb::x5_128#0 ] : zp ZP_WORD:107 , 
Potential registers zp ZP_WORD:109 [ sin16sb::usinx#1 ] : zp ZP_WORD:109 , 
Potential registers zp ZP_WORD:111 [ mul16u::b#0 ] : zp ZP_WORD:111 , 
Potential registers zp ZP_DWORD:113 [ mul16u::return#2 ] : zp ZP_DWORD:113 , 
Potential registers zp ZP_DWORD:117 [ mulu16_sel::$0 ] : zp ZP_DWORD:117 , 
Potential registers zp ZP_DWORD:121 [ mulu16_sel::$1 ] : zp ZP_DWORD:121 , 
Potential registers zp ZP_WORD:125 [ mulu16_sel::return#17 ] : zp ZP_WORD:125 , 
Potential registers zp ZP_BYTE:127 [ mul16u::$1 ] : zp ZP_BYTE:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:128 [ divr16u::return#2 ] : zp ZP_WORD:128 , 
Potential registers zp ZP_WORD:130 [ div32u16u::quotient_hi#0 ] : zp ZP_WORD:130 , 
Potential registers zp ZP_WORD:132 [ divr16u::return#3 ] : zp ZP_WORD:132 , 
Potential registers zp ZP_WORD:134 [ div32u16u::quotient_lo#0 ] : zp ZP_WORD:134 , 
Potential registers zp ZP_DWORD:136 [ div32u16u::return#0 ] : zp ZP_DWORD:136 , 
Potential registers zp ZP_BYTE:140 [ divr16u::$1 ] : zp ZP_BYTE:140 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:141 [ divr16u::$2 ] : zp ZP_BYTE:141 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:142 [ rem16u#1 ] : zp ZP_WORD:142 , 
Potential registers zp ZP_DWORD:144 [ div32u16u::return#2 ] : zp ZP_DWORD:144 , 
Potential registers zp ZP_DWORD:148 [ sin16s_gen::step#0 ] : zp ZP_DWORD:148 , 
Potential registers zp ZP_WORD:152 [ sin16s::return#0 ] : zp ZP_WORD:152 , 
Potential registers zp ZP_WORD:154 [ sin16s_gen::$1 ] : zp ZP_WORD:154 , 
Potential registers zp ZP_DWORD:156 [ sin16s::$6 ] : zp ZP_DWORD:156 , 
Potential registers zp ZP_WORD:160 [ sin16s::x1#0 ] : zp ZP_WORD:160 , 
Potential registers zp ZP_WORD:162 [ mulu16_sel::return#0 ] : zp ZP_WORD:162 , 
Potential registers zp ZP_WORD:164 [ sin16s::x2#0 ] : zp ZP_WORD:164 , 
Potential registers zp ZP_WORD:166 [ mulu16_sel::return#1 ] : zp ZP_WORD:166 , 
Potential registers zp ZP_WORD:168 [ sin16s::x3#0 ] : zp ZP_WORD:168 , 
Potential registers zp ZP_WORD:170 [ mulu16_sel::return#14 ] : zp ZP_WORD:170 , 
Potential registers zp ZP_WORD:172 [ sin16s::x3_6#0 ] : zp ZP_WORD:172 , 
Potential registers zp ZP_WORD:174 [ sin16s::usinx#0 ] : zp ZP_WORD:174 , 
Potential registers zp ZP_WORD:176 [ mulu16_sel::return#15 ] : zp ZP_WORD:176 , 
Potential registers zp ZP_WORD:178 [ sin16s::x4#0 ] : zp ZP_WORD:178 , 
Potential registers zp ZP_WORD:180 [ mulu16_sel::return#16 ] : zp ZP_WORD:180 , 
Potential registers zp ZP_WORD:182 [ sin16s::x5#0 ] : zp ZP_WORD:182 , 
Potential registers zp ZP_WORD:184 [ sin16s::x5_128#0 ] : zp ZP_WORD:184 , 
Potential registers zp ZP_WORD:186 [ sin16s::usinx#1 ] : zp ZP_WORD:186 , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul16u] 353.83: zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 249.57: zp ZP_DWORD:41 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 202: zp ZP_BYTE:127 [ mul16u::$1 ] 170: zp ZP_WORD:35 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] 4: zp ZP_WORD:111 [ mul16u::b#0 ] 4: zp ZP_DWORD:113 [ mul16u::return#2 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 ] 
Uplift Scope [divr16u] 106.92: zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 35.54: zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 22: zp ZP_BYTE:140 [ divr16u::$1 ] 22: zp ZP_BYTE:141 [ divr16u::$2 ] 18.19: zp ZP_BYTE:51 [ divr16u::i#2 divr16u::i#1 ] 9.75: zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] 4: zp ZP_WORD:128 [ divr16u::return#2 ] 4: zp ZP_WORD:132 [ divr16u::return#3 ] 
Uplift Scope [] 183.57: zp ZP_WORD:13 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ] 0.8: zp ZP_WORD:142 [ rem16u#1 ] 
Uplift Scope [mulu16_sel] 46: zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ] 41: zp ZP_WORD:32 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ] 4: zp ZP_WORD:85 [ mulu16_sel::return#18 ] 4: zp ZP_WORD:89 [ mulu16_sel::return#19 ] 4: zp ZP_WORD:93 [ mulu16_sel::return#20 ] 4: zp ZP_WORD:99 [ mulu16_sel::return#10 ] 4: zp ZP_WORD:103 [ mulu16_sel::return#11 ] 4: zp ZP_DWORD:117 [ mulu16_sel::$0 ] 4: zp ZP_DWORD:121 [ mulu16_sel::$1 ] 4: zp ZP_WORD:162 [ mulu16_sel::return#0 ] 4: zp ZP_WORD:166 [ mulu16_sel::return#1 ] 4: zp ZP_WORD:170 [ mulu16_sel::return#14 ] 4: zp ZP_WORD:176 [ mulu16_sel::return#15 ] 4: zp ZP_WORD:180 [ mulu16_sel::return#16 ] 1.83: zp ZP_WORD:125 [ mulu16_sel::return#17 ] 0.33: zp ZP_BYTE:34 [ mulu16_sel::select#10 ] 
Uplift Scope [sin16s] 27.5: zp ZP_DWORD:61 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 22: zp ZP_WORD:152 [ sin16s::return#0 ] 13: zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 4: zp ZP_DWORD:156 [ sin16s::$6 ] 4: zp ZP_WORD:164 [ sin16s::x2#0 ] 4: zp ZP_WORD:172 [ sin16s::x3_6#0 ] 4: zp ZP_WORD:178 [ sin16s::x4#0 ] 4: zp ZP_WORD:182 [ sin16s::x5#0 ] 4: zp ZP_WORD:184 [ sin16s::x5_128#0 ] 1: zp ZP_WORD:168 [ sin16s::x3#0 ] 1: zp ZP_WORD:186 [ sin16s::usinx#1 ] 0.64: zp ZP_WORD:160 [ sin16s::x1#0 ] 0.33: zp ZP_WORD:174 [ sin16s::usinx#0 ] 0.06: zp ZP_BYTE:60 [ sin16s::isUpper#2 ] 
Uplift Scope [sin16sb] 27.5: zp ZP_WORD:26 [ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ] 22: zp ZP_WORD:79 [ sin16sb::return#0 ] 13: zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ] 4: zp ZP_WORD:87 [ sin16sb::x2#0 ] 4: zp ZP_WORD:95 [ sin16sb::x3_6#0 ] 4: zp ZP_WORD:101 [ sin16sb::x4#0 ] 4: zp ZP_WORD:105 [ sin16sb::x5#0 ] 4: zp ZP_WORD:107 [ sin16sb::x5_128#0 ] 1: zp ZP_WORD:91 [ sin16sb::x3#0 ] 1: zp ZP_WORD:109 [ sin16sb::usinx#1 ] 0.64: zp ZP_WORD:83 [ sin16sb::x1#0 ] 0.33: zp ZP_WORD:97 [ sin16sb::usinx#0 ] 0.06: zp ZP_BYTE:25 [ sin16sb::isUpper#2 ] 
Uplift Scope [sin16s_gen] 22: zp ZP_WORD:154 [ sin16s_gen::$1 ] 19.25: zp ZP_WORD:58 [ sin16s_gen::i#2 sin16s_gen::i#1 ] 12.05: zp ZP_DWORD:52 [ sin16s_gen::x#2 sin16s_gen::x#1 ] 11: zp ZP_WORD:56 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] 1.18: zp ZP_DWORD:148 [ sin16s_gen::step#0 ] 
Uplift Scope [sin16s_genb] 22: zp ZP_WORD:81 [ sin16s_genb::$2 ] 19.25: zp ZP_WORD:23 [ sin16s_genb::i#2 sin16s_genb::i#1 ] 12.05: zp ZP_DWORD:17 [ sin16s_genb::x#2 sin16s_genb::x#1 ] 11: zp ZP_WORD:21 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ] 1.18: zp ZP_DWORD:75 [ sin16s_genb::step#0 ] 
Uplift Scope [main] 18.33: zp ZP_BYTE:6 [ main::i#2 main::i#1 ] 10.33: zp ZP_WORD:4 [ main::st2#2 main::st2#1 ] 8.8: zp ZP_WORD:2 [ main::st1#2 main::st1#1 ] 6.6: zp ZP_WORD:67 [ main::sw#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:69 [ print_byte::$0 ] 4: zp ZP_BYTE:70 [ print_byte::$2 ] 
Uplift Scope [div32u16u] 4: zp ZP_DWORD:71 [ div32u16u::return#3 ] 4: zp ZP_WORD:134 [ div32u16u::quotient_lo#0 ] 4: zp ZP_DWORD:144 [ div32u16u::return#2 ] 1.5: zp ZP_DWORD:136 [ div32u16u::return#0 ] 0.8: zp ZP_WORD:130 [ div32u16u::quotient_hi#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:12 [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_sword] 9.58: zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] 
Uplift Scope [print_word] 

Uplifting [mul16u] best 28114 combination zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp ZP_DWORD:41 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp ZP_WORD:35 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] zp ZP_WORD:111 [ mul16u::b#0 ] zp ZP_DWORD:113 [ mul16u::return#2 ] 
Uplifting [print_str] best 28114 combination zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 ] 
Uplifting [divr16u] best 27904 combination zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] zp ZP_WORD:128 [ divr16u::return#2 ] zp ZP_WORD:132 [ divr16u::return#3 ] 
Uplifting [] best 27904 combination zp ZP_WORD:13 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ] zp ZP_WORD:142 [ rem16u#1 ] 
Uplifting [mulu16_sel] best 27873 combination zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ] zp ZP_WORD:32 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ] zp ZP_WORD:85 [ mulu16_sel::return#18 ] zp ZP_WORD:89 [ mulu16_sel::return#19 ] zp ZP_WORD:93 [ mulu16_sel::return#20 ] zp ZP_WORD:99 [ mulu16_sel::return#10 ] zp ZP_WORD:103 [ mulu16_sel::return#11 ] zp ZP_DWORD:117 [ mulu16_sel::$0 ] zp ZP_DWORD:121 [ mulu16_sel::$1 ] zp ZP_WORD:162 [ mulu16_sel::return#0 ] zp ZP_WORD:166 [ mulu16_sel::return#1 ] zp ZP_WORD:170 [ mulu16_sel::return#14 ] zp ZP_WORD:176 [ mulu16_sel::return#15 ] zp ZP_WORD:180 [ mulu16_sel::return#16 ] zp ZP_WORD:125 [ mulu16_sel::return#17 ] reg byte x [ mulu16_sel::select#10 ] 
Uplifting [sin16s] best 27873 combination zp ZP_DWORD:61 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp ZP_WORD:152 [ sin16s::return#0 ] zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp ZP_DWORD:156 [ sin16s::$6 ] zp ZP_WORD:164 [ sin16s::x2#0 ] zp ZP_WORD:172 [ sin16s::x3_6#0 ] zp ZP_WORD:178 [ sin16s::x4#0 ] zp ZP_WORD:182 [ sin16s::x5#0 ] zp ZP_WORD:184 [ sin16s::x5_128#0 ] zp ZP_WORD:168 [ sin16s::x3#0 ] zp ZP_WORD:186 [ sin16s::usinx#1 ] zp ZP_WORD:160 [ sin16s::x1#0 ] zp ZP_WORD:174 [ sin16s::usinx#0 ] zp ZP_BYTE:60 [ sin16s::isUpper#2 ] 
Uplifting [sin16sb] best 27873 combination zp ZP_WORD:26 [ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ] zp ZP_WORD:79 [ sin16sb::return#0 ] zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ] zp ZP_WORD:87 [ sin16sb::x2#0 ] zp ZP_WORD:95 [ sin16sb::x3_6#0 ] zp ZP_WORD:101 [ sin16sb::x4#0 ] zp ZP_WORD:105 [ sin16sb::x5#0 ] zp ZP_WORD:107 [ sin16sb::x5_128#0 ] zp ZP_WORD:91 [ sin16sb::x3#0 ] zp ZP_WORD:109 [ sin16sb::usinx#1 ] zp ZP_WORD:83 [ sin16sb::x1#0 ] zp ZP_WORD:97 [ sin16sb::usinx#0 ] zp ZP_BYTE:25 [ sin16sb::isUpper#2 ] 
Uplifting [sin16s_gen] best 27873 combination zp ZP_WORD:154 [ sin16s_gen::$1 ] zp ZP_WORD:58 [ sin16s_gen::i#2 sin16s_gen::i#1 ] zp ZP_DWORD:52 [ sin16s_gen::x#2 sin16s_gen::x#1 ] zp ZP_WORD:56 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] zp ZP_DWORD:148 [ sin16s_gen::step#0 ] 
Uplifting [sin16s_genb] best 27873 combination zp ZP_WORD:81 [ sin16s_genb::$2 ] zp ZP_WORD:23 [ sin16s_genb::i#2 sin16s_genb::i#1 ] zp ZP_DWORD:17 [ sin16s_genb::x#2 sin16s_genb::x#1 ] zp ZP_WORD:21 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ] zp ZP_DWORD:75 [ sin16s_genb::step#0 ] 
Uplifting [main] best 27783 combination reg byte x [ main::i#2 main::i#1 ] zp ZP_WORD:4 [ main::st2#2 main::st2#1 ] zp ZP_WORD:2 [ main::st1#2 main::st1#1 ] zp ZP_WORD:67 [ main::sw#0 ] 
Uplifting [print_cls] best 27783 combination zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_byte] best 27775 combination zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [div32u16u] best 27775 combination zp ZP_DWORD:71 [ div32u16u::return#3 ] zp ZP_WORD:134 [ div32u16u::quotient_lo#0 ] zp ZP_DWORD:144 [ div32u16u::return#2 ] zp ZP_DWORD:136 [ div32u16u::return#0 ] zp ZP_WORD:130 [ div32u16u::quotient_hi#0 ] 
Uplifting [print_char] best 27763 combination reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_sword] best 27763 combination zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] 
Uplifting [print_word] best 27763 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 27763 combination zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ sin16sb::isUpper#2 ]
Uplifting [sin16sb] best 27763 combination zp ZP_BYTE:25 [ sin16sb::isUpper#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:60 [ sin16s::isUpper#2 ]
Uplifting [sin16s] best 27763 combination zp ZP_BYTE:60 [ sin16s::isUpper#2 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 ] ] with [ zp ZP_WORD:109 [ sin16sb::usinx#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 ] ] with [ zp ZP_WORD:91 [ sin16sb::x3#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 ] ] with [ zp ZP_WORD:168 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp ZP_WORD:142 [ rem16u#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp ZP_WORD:186 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 ] ] with [ zp ZP_WORD:67 [ main::sw#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:26 [ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 ] ] with [ zp ZP_WORD:83 [ sin16sb::x1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 ] ] with [ zp ZP_WORD:79 [ sin16sb::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 ] ] with [ zp ZP_WORD:87 [ sin16sb::x2#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 ] ] with [ zp ZP_WORD:101 [ sin16sb::x4#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 ] ] with [ zp ZP_WORD:164 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 ] ] with [ zp ZP_WORD:178 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:32 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 ] ] with [ zp ZP_WORD:111 [ mul16u::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp ZP_DWORD:113 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:128 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:132 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:61 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] ] with [ zp ZP_DWORD:156 [ sin16s::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp ZP_WORD:152 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:71 [ div32u16u::return#3 ] ] with [ zp ZP_DWORD:75 [ sin16s_genb::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:71 [ div32u16u::return#3 sin16s_genb::step#0 ] ] with [ zp ZP_DWORD:136 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 ] ] with [ zp ZP_WORD:125 [ mulu16_sel::return#17 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:93 [ mulu16_sel::return#20 ] ] with [ zp ZP_WORD:95 [ sin16sb::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:103 [ mulu16_sel::return#11 ] ] with [ zp ZP_WORD:105 [ sin16sb::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:117 [ mulu16_sel::$0 ] ] with [ zp ZP_DWORD:121 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:144 [ div32u16u::return#2 ] ] with [ zp ZP_DWORD:148 [ sin16s_gen::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:170 [ mulu16_sel::return#14 ] ] with [ zp ZP_WORD:172 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:180 [ mulu16_sel::return#16 ] ] with [ zp ZP_WORD:182 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 ] ] with [ zp ZP_WORD:81 [ sin16s_genb::$2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$2 ] ] with [ zp ZP_WORD:97 [ sin16sb::usinx#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp ZP_WORD:89 [ mulu16_sel::return#19 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 ] ] with [ zp ZP_WORD:99 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 mulu16_sel::return#10 ] ] with [ zp ZP_WORD:162 [ mulu16_sel::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 mulu16_sel::return#10 mulu16_sel::return#0 ] ] with [ zp ZP_WORD:166 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 mulu16_sel::return#10 mulu16_sel::return#0 mulu16_sel::return#1 ] ] with [ zp ZP_WORD:176 [ mulu16_sel::return#15 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 ] ] with [ zp ZP_DWORD:117 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp ZP_WORD:134 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp ZP_WORD:154 [ sin16s_gen::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 ] ] with [ zp ZP_WORD:174 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:71 [ div32u16u::return#3 sin16s_genb::step#0 div32u16u::return#0 ] ] with [ zp ZP_DWORD:144 [ div32u16u::return#2 sin16s_gen::step#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 ] ] with [ zp ZP_WORD:93 [ mulu16_sel::return#20 sin16sb::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 ] ] with [ zp ZP_WORD:103 [ mulu16_sel::return#11 sin16sb::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 ] ] with [ zp ZP_WORD:170 [ mulu16_sel::return#14 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 mulu16_sel::return#14 sin16s::x3_6#0 ] ] with [ zp ZP_WORD:180 [ mulu16_sel::return#16 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 ] ] with [ zp ZP_WORD:107 [ sin16sb::x5_128#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 sin16sb::x5_128#0 ] ] with [ zp ZP_WORD:184 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:2 [ main::st1#2 main::st1#1 ] ] with [ zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ main::st1#2 main::st1#1 print_cls::sc#2 print_cls::sc#1 ] ] with [ zp ZP_WORD:21 [ sin16s_genb::sintab#2 sin16s_genb::sintab#0 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ main::st1#2 main::st1#1 print_cls::sc#2 print_cls::sc#1 sin16s_genb::sintab#2 sin16s_genb::sintab#0 ] ] with [ zp ZP_WORD:45 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ] ]
Coalescing zero page register [ zp ZP_WORD:2 [ main::st1#2 main::st1#1 print_cls::sc#2 print_cls::sc#1 sin16s_genb::sintab#2 sin16s_genb::sintab#0 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 ] ] with [ zp ZP_WORD:56 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ main::st2#2 main::st2#1 ] ] with [ zp ZP_WORD:23 [ sin16s_genb::i#2 sin16s_genb::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ main::st2#2 main::st2#1 sin16s_genb::i#2 sin16s_genb::i#1 ] ] with [ zp ZP_WORD:47 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ main::st2#2 main::st2#1 sin16s_genb::i#2 sin16s_genb::i#1 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ] ] with [ zp ZP_WORD:58 [ sin16s_gen::i#2 sin16s_gen::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 ] ] with [ zp ZP_WORD:26 [ sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 ] ] with [ zp ZP_WORD:49 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_str::str#3 print_str::str#5 print_str::str#0 sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ] with [ zp ZP_WORD:65 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 sin16s::usinx#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 main::sw#0 ] ] with [ zp ZP_WORD:28 [ sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$2 sin16sb::usinx#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 main::sw#0 sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$2 sin16sb::usinx#0 ] ] with [ zp ZP_WORD:130 [ div32u16u::quotient_hi#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 main::sw#0 sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$2 sin16sb::usinx#0 div32u16u::quotient_hi#0 ] ] with [ zp ZP_WORD:160 [ sin16s::x1#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] ] with [ zp ZP_BYTE:25 [ sin16sb::isUpper#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 sin16sb::isUpper#2 ] ] with [ zp ZP_BYTE:60 [ sin16s::isUpper#2 ] ]
Coalescing zero page register [ zp ZP_WORD:13 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 ] ] with [ zp ZP_WORD:30 [ mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 mulu16_sel::return#10 mulu16_sel::return#0 mulu16_sel::return#1 mulu16_sel::return#15 ] ]
Coalescing zero page register [ zp ZP_DWORD:17 [ sin16s_genb::x#2 sin16s_genb::x#1 ] ] with [ zp ZP_DWORD:52 [ sin16s_gen::x#2 sin16s_gen::x#1 ] ]
Coalescing zero page register [ zp ZP_WORD:32 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 mul16u::b#0 ] ] with [ zp ZP_WORD:85 [ mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 sin16sb::x5_128#0 sin16s::x5_128#0 ] ]
Coalescing zero page register [ zp ZP_DWORD:37 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ] ] with [ zp ZP_DWORD:61 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$6 ] ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:6 [ print_str::str#3 print_str::str#5 print_str::str#0 sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 sin16s::usinx#0 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:8 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 main::sw#0 sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$2 sin16sb::usinx#0 div32u16u::quotient_hi#0 sin16s::x1#0 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:10 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 sin16sb::isUpper#2 sin16s::isUpper#2 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:11 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 mulu16_sel::return#10 mulu16_sel::return#0 mulu16_sel::return#1 mulu16_sel::return#15 ]
Allocated (was zp ZP_DWORD:17) zp ZP_DWORD:13 [ sin16s_genb::x#2 sin16s_genb::x#1 sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated (was zp ZP_WORD:32) zp ZP_WORD:17 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 mul16u::b#0 mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 sin16sb::x5_128#0 sin16s::x5_128#0 ]
Allocated (was zp ZP_WORD:35) zp ZP_WORD:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated (was zp ZP_DWORD:37) zp ZP_DWORD:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$6 ]
Allocated (was zp ZP_DWORD:41) zp ZP_DWORD:25 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp ZP_DWORD:71) zp ZP_DWORD:29 [ div32u16u::return#3 sin16s_genb::step#0 div32u16u::return#0 div32u16u::return#2 sin16s_gen::step#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Generates a 16-bit signed sinus
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label rem16u = 2
  .label print_char_cursor = $b
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @42 [phi:@begin->@42]
b42_from_bbegin:
  jmp b42
//SEG5 @42
b42:
//SEG6 [2] call main 
//SEG7 [4] phi from @42 to main [phi:@42->main]
main_from_b42:
  jsr main
//SEG8 [3] phi from @42 to @end [phi:@42->@end]
bend_from_b42:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label wavelength = $78
    .label sw = 8
    .label st1 = 2
    .label st2 = 4
  //SEG11 [5] call sin16s_gen 
  //SEG12 [163] phi from main to sin16s_gen [phi:main->sin16s_gen]
  sin16s_gen_from_main:
    jsr sin16s_gen
  //SEG13 [6] phi from main to main::@5 [phi:main->main::@5]
  b5_from_main:
    jmp b5
  //SEG14 main::@5
  b5:
  //SEG15 [7] call sin16s_genb 
  //SEG16 [62] phi from main::@5 to sin16s_genb [phi:main::@5->sin16s_genb]
  sin16s_genb_from_b5:
    jsr sin16s_genb
  //SEG17 [8] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
  //SEG18 main::@6
  b6:
  //SEG19 [9] call print_cls 
  //SEG20 [56] phi from main::@6 to print_cls [phi:main::@6->print_cls]
  print_cls_from_b6:
    jsr print_cls
  //SEG21 [10] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG22 [10] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG23 [10] phi (byte*) print_char_cursor#49 = (const byte*) print_line_cursor#0 [phi:main::@6->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG24 [10] phi (signed word*) main::st2#2 = (const signed word[$78]) main::sintab2#0 [phi:main::@6->main::@1#2] -- pwsz1=pwsc1 
    lda #<sintab2
    sta st2
    lda #>sintab2
    sta st2+1
  //SEG25 [10] phi (signed word*) main::st1#2 = (const signed word[$78]) main::sintab1#0 [phi:main::@6->main::@1#3] -- pwsz1=pwsc1 
    lda #<sintab1
    sta st1
    lda #>sintab1
    sta st1+1
    jmp b1
  //SEG26 [10] phi from main::@9 to main::@1 [phi:main::@9->main::@1]
  b1_from_b9:
  //SEG27 [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@9->main::@1#0] -- register_copy 
  //SEG28 [10] phi (byte*) print_char_cursor#49 = (byte*) print_char_cursor#2 [phi:main::@9->main::@1#1] -- register_copy 
  //SEG29 [10] phi (signed word*) main::st2#2 = (signed word*) main::st2#1 [phi:main::@9->main::@1#2] -- register_copy 
  //SEG30 [10] phi (signed word*) main::st1#2 = (signed word*) main::st1#1 [phi:main::@9->main::@1#3] -- register_copy 
    jmp b1
  //SEG31 main::@1
  b1:
  //SEG32 [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2) -- vwsz1=_deref_pwsz2_minus__deref_pwsz3 
    ldy #0
    sec
    lda (st1),y
    sbc (st2),y
    sta sw
    iny
    lda (st1),y
    sbc (st2),y
    sta sw+1
  //SEG33 [12] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2 -- vwsz1_lt_0_then_la1 
    lda sw+1
    bmi b2_from_b1
  //SEG34 [13] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
  //SEG35 main::@3
  b3:
  //SEG36 [14] call print_str 
  //SEG37 [25] phi from main::@3 to print_str [phi:main::@3->print_str]
  print_str_from_b3:
  //SEG38 [25] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#49 [phi:main::@3->print_str#0] -- register_copy 
  //SEG39 [25] phi (byte*) print_str::str#5 = (const string) main::str1 [phi:main::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG40 [15] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG41 [15] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#49 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
  //SEG42 main::@2
  b2:
  //SEG43 [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0
  //SEG44 [17] call print_sword 
    jsr print_sword
  //SEG45 [18] phi from main::@2 to main::@8 [phi:main::@2->main::@8]
  b8_from_b2:
    jmp b8
  //SEG46 main::@8
  b8:
  //SEG47 [19] call print_str 
  //SEG48 [25] phi from main::@8 to print_str [phi:main::@8->print_str]
  print_str_from_b8:
  //SEG49 [25] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#12 [phi:main::@8->print_str#0] -- register_copy 
  //SEG50 [25] phi (byte*) print_str::str#5 = (const string) main::str [phi:main::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG51 main::@9
  b9:
  //SEG52 [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda st1
    clc
    adc #2
    sta st1
    bcc !+
    inc st1+1
  !:
  //SEG53 [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda st2
    clc
    adc #2
    sta st2
    bcc !+
    inc st2+1
  !:
  //SEG54 [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG55 [23] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $78) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$78
    bne b1_from_b9
    jmp breturn
  //SEG56 main::@return
  breturn:
  //SEG57 [24] return 
    rts
    str: .text "   @"
    str1: .text " @"
    sintab1: .fill 2*$78, 0
    sintab2: .fill 2*$78, 0
}
//SEG58 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(6) str)
print_str: {
    .label str = 6
  //SEG59 [26] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG60 [26] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#51 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG61 [26] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG62 print_str::@1
  b1:
  //SEG63 [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG64 print_str::@return
  breturn:
  //SEG65 [28] return 
    rts
  //SEG66 print_str::@2
  b2:
  //SEG67 [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG68 [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG69 [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG70 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(8) w)
print_sword: {
    .label w = 8
  //SEG71 [32] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG72 [33] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG73 print_sword::@2
  b2:
  //SEG74 [34] call print_char 
  //SEG75 [52] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG76 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#48 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG77 [52] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG78 print_sword::@4
  b4:
  //SEG79 [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG80 [36] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG81 [36] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#48 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG82 [36] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG83 print_sword::@1
  b1:
  //SEG84 [37] call print_word 
    jsr print_word
    jmp breturn
  //SEG85 print_sword::@return
  breturn:
  //SEG86 [38] return 
    rts
}
//SEG87 print_word
// Print a word as HEX
print_word: {
  //SEG88 [39] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG89 [40] call print_byte 
  //SEG90 [44] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG91 [44] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#43 [phi:print_word->print_byte#0] -- register_copy 
  //SEG92 [44] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG93 print_word::@1
  b1:
  //SEG94 [41] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG95 [42] call print_byte 
  //SEG96 [44] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG97 [44] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG98 [44] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG99 print_word::@return
  breturn:
  //SEG100 [43] return 
    rts
}
//SEG101 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label b = $a
  //SEG102 [45] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG103 [46] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG104 [47] call print_char 
  //SEG105 [52] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG106 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#46 [phi:print_byte->print_char#0] -- register_copy 
  //SEG107 [52] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG108 print_byte::@1
  b1:
  //SEG109 [48] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG110 [49] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG111 [50] call print_char 
  //SEG112 [52] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG113 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG114 [52] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG115 print_byte::@return
  breturn:
  //SEG116 [51] return 
    rts
}
//SEG117 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG118 [53] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG119 [54] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#33 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG120 print_char::@return
  breturn:
  //SEG121 [55] return 
    rts
}
//SEG122 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG123 [57] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG124 [57] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
    jmp b1
  //SEG125 [57] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG126 [57] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG127 print_cls::@1
  b1:
  //SEG128 [58] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG129 [59] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG130 [60] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1_from_b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG131 print_cls::@return
  breturn:
  //SEG132 [61] return 
    rts
}
//SEG133 sin16s_genb
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_genb(signed word* zeropage(2) sintab)
sin16s_genb: {
    .label _2 = 8
    .label step = $1d
    .label sintab = 2
    .label x = $d
    .label i = 4
  //SEG134 [63] call div32u16u 
  //SEG135 [135] phi from sin16s_genb to div32u16u [phi:sin16s_genb->div32u16u]
  div32u16u_from_sin16s_genb:
    jsr div32u16u
  //SEG136 [64] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0
    jmp b3
  //SEG137 sin16s_genb::@3
  b3:
  //SEG138 [65] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3
  //SEG139 [66] phi from sin16s_genb::@3 to sin16s_genb::@1 [phi:sin16s_genb::@3->sin16s_genb::@1]
  b1_from_b3:
  //SEG140 [66] phi (word) sin16s_genb::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_genb::@3->sin16s_genb::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG141 [66] phi (signed word*) sin16s_genb::sintab#2 = (const signed word[$78]) main::sintab2#0 [phi:sin16s_genb::@3->sin16s_genb::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintab2
    sta sintab
    lda #>main.sintab2
    sta sintab+1
  //SEG142 [66] phi (dword) sin16s_genb::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_genb::@3->sin16s_genb::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG143 [66] phi from sin16s_genb::@4 to sin16s_genb::@1 [phi:sin16s_genb::@4->sin16s_genb::@1]
  b1_from_b4:
  //SEG144 [66] phi (word) sin16s_genb::i#2 = (word) sin16s_genb::i#1 [phi:sin16s_genb::@4->sin16s_genb::@1#0] -- register_copy 
  //SEG145 [66] phi (signed word*) sin16s_genb::sintab#2 = (signed word*) sin16s_genb::sintab#0 [phi:sin16s_genb::@4->sin16s_genb::@1#1] -- register_copy 
  //SEG146 [66] phi (dword) sin16s_genb::x#2 = (dword) sin16s_genb::x#1 [phi:sin16s_genb::@4->sin16s_genb::@1#2] -- register_copy 
    jmp b1
  //SEG147 sin16s_genb::@1
  b1:
  //SEG148 [67] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2 -- vwuz1=_hi_vduz2 
    lda x+2
    sta sin16sb.x
    lda x+3
    sta sin16sb.x+1
  //SEG149 [68] call sin16sb 
    jsr sin16sb
  //SEG150 [69] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1
    jmp b4
  //SEG151 sin16s_genb::@4
  b4:
  //SEG152 [70] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0
  //SEG153 [71] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _2
    sta (sintab),y
    iny
    lda _2+1
    sta (sintab),y
  //SEG154 [72] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG155 [73] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG156 [74] (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG157 [75] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b4
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b4
  !:
    jmp breturn
  //SEG158 sin16s_genb::@return
  breturn:
  //SEG159 [76] return 
    rts
}
//SEG160 sin16sb
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16sb(word zeropage(6) x)
sin16sb: {
    .label x = 6
    .label return = 8
    .label x1 = 6
    .label x2 = $b
    .label x3 = $b
    .label x3_6 = $11
    .label usinx = 8
    .label x4 = $b
    .label x5 = $11
    .label x5_128 = $11
    .label sinx = 8
    .label isUpper = $a
  //SEG161 [77] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b1_from_sin16sb
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b1_from_sin16sb
  !:
    jmp b4
  //SEG162 sin16sb::@4
  b4:
  //SEG163 [78] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG164 [79] phi from sin16sb::@4 to sin16sb::@1 [phi:sin16sb::@4->sin16sb::@1]
  b1_from_b4:
  //SEG165 [79] phi (byte) sin16sb::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@4->sin16sb::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG166 [79] phi (word) sin16sb::x#4 = (word) sin16sb::x#1 [phi:sin16sb::@4->sin16sb::@1#1] -- register_copy 
    jmp b1
  //SEG167 [79] phi from sin16sb to sin16sb::@1 [phi:sin16sb->sin16sb::@1]
  b1_from_sin16sb:
  //SEG168 [79] phi (byte) sin16sb::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb->sin16sb::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG169 [79] phi (word) sin16sb::x#4 = (word) sin16sb::x#0 [phi:sin16sb->sin16sb::@1#1] -- register_copy 
    jmp b1
  //SEG170 sin16sb::@1
  b1:
  //SEG171 [80] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2_from_b1
  !:
    jmp b5
  //SEG172 sin16sb::@5
  b5:
  //SEG173 [81] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG174 [82] phi from sin16sb::@1 sin16sb::@5 to sin16sb::@2 [phi:sin16sb::@1/sin16sb::@5->sin16sb::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG175 [82] phi (word) sin16sb::x#6 = (word) sin16sb::x#4 [phi:sin16sb::@1/sin16sb::@5->sin16sb::@2#0] -- register_copy 
    jmp b2
  //SEG176 sin16sb::@2
  b2:
  //SEG177 [83] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz1_rol_3 
    asl x1
    rol x1+1
    asl x1
    rol x1+1
    asl x1
    rol x1+1
  //SEG178 [84] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG179 [85] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG180 [86] call mulu16_sel 
  //SEG181 [116] phi from sin16sb::@2 to mulu16_sel [phi:sin16sb::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG182 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG183 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#5 [phi:sin16sb::@2->mulu16_sel#1] -- register_copy 
  //SEG184 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#5 [phi:sin16sb::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG185 [87] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17
    jmp b8
  //SEG186 sin16sb::@8
  b8:
  //SEG187 [88] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18 -- vwuz1=vwuz2 
    lda mulu16_sel.return_18
    sta x2
    lda mulu16_sel.return_18+1
    sta x2+1
  //SEG188 [89] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0
  //SEG189 [90] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG190 [91] call mulu16_sel 
  //SEG191 [116] phi from sin16sb::@8 to mulu16_sel [phi:sin16sb::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG192 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG193 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#6 [phi:sin16sb::@8->mulu16_sel#1] -- register_copy 
  //SEG194 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#6 [phi:sin16sb::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG195 [92] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
    jmp b9
  //SEG196 sin16sb::@9
  b9:
  //SEG197 [93] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19
  //SEG198 [94] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0
  //SEG199 [95] call mulu16_sel 
  //SEG200 [116] phi from sin16sb::@9 to mulu16_sel [phi:sin16sb::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG201 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG202 [116] phi (word) mulu16_sel::v2#10 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16sb::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG203 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#7 [phi:sin16sb::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG204 [96] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17
    jmp b10
  //SEG205 sin16sb::@10
  b10:
  //SEG206 [97] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20
  //SEG207 [98] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG208 [99] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0
  //SEG209 [100] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG210 [101] call mulu16_sel 
  //SEG211 [116] phi from sin16sb::@10 to mulu16_sel [phi:sin16sb::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG212 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG213 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#8 [phi:sin16sb::@10->mulu16_sel#1] -- register_copy 
  //SEG214 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#8 [phi:sin16sb::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG215 [102] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
    jmp b11
  //SEG216 sin16sb::@11
  b11:
  //SEG217 [103] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10
  //SEG218 [104] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0
  //SEG219 [105] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG220 [106] call mulu16_sel 
  //SEG221 [116] phi from sin16sb::@11 to mulu16_sel [phi:sin16sb::@11->mulu16_sel]
  mulu16_sel_from_b11:
  //SEG222 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@11->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG223 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#9 [phi:sin16sb::@11->mulu16_sel#1] -- register_copy 
  //SEG224 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#9 [phi:sin16sb::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG225 [107] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17
    jmp b12
  //SEG226 sin16sb::@12
  b12:
  //SEG227 [108] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11
  //SEG228 [109] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz1_ror_4 
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG229 [110] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG230 [111] if((byte) sin16sb::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16sb::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b15
    jmp b6
  //SEG231 sin16sb::@6
  b6:
  //SEG232 [112] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG233 [113] phi from sin16sb::@15 sin16sb::@6 to sin16sb::@3 [phi:sin16sb::@15/sin16sb::@6->sin16sb::@3]
  b3_from_b15:
  b3_from_b6:
  //SEG234 [113] phi (signed word) sin16sb::return#1 = (signed word~) sin16sb::return#5 [phi:sin16sb::@15/sin16sb::@6->sin16sb::@3#0] -- register_copy 
    jmp b3
  //SEG235 sin16sb::@3
  b3:
    jmp breturn
  //SEG236 sin16sb::@return
  breturn:
  //SEG237 [114] return 
    rts
  //SEG238 sin16sb::@15
  b15:
  //SEG239 [115] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1
    jmp b3_from_b15
}
//SEG240 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($b) v1, word zeropage($11) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $15
    .label _1 = $15
    .label v1 = $b
    .label v2 = $11
    .label return = $b
    .label return_11 = $11
    .label return_14 = $11
    .label return_16 = $11
    .label return_17 = $11
    .label return_18 = $11
    .label return_20 = $11
  //SEG241 [117] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG242 [118] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10
  //SEG243 [119] call mul16u 
    jsr mul16u
  //SEG244 [120] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp b2
  //SEG245 mulu16_sel::@2
  b2:
  //SEG246 [121] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  //SEG247 [122] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG248 [123] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return_17
    lda _1+3
    sta return_17+1
    jmp breturn
  //SEG249 mulu16_sel::@return
  breturn:
  //SEG250 [124] return 
    rts
}
//SEG251 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($13) a, word zeropage($11) b)
mul16u: {
    .label mb = $19
    .label a = $13
    .label res = $15
    .label b = $11
    .label return = $15
  //SEG252 [125] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG253 [126] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  b1_from_mul16u:
  //SEG254 [126] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG255 [126] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    lda #0
    sta res
    lda #0
    sta res+1
    sta res+2
    sta res+3
  //SEG256 [126] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp b1
  //SEG257 mul16u::@1
  b1:
  //SEG258 [127] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
    jmp breturn
  //SEG259 mul16u::@return
  breturn:
  //SEG260 [128] return 
    rts
  //SEG261 mul16u::@2
  b2:
  //SEG262 [129] (byte/word~) mul16u::$1 ← (word) mul16u::a#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG263 [130] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b2
    jmp b7
  //SEG264 mul16u::@7
  b7:
  //SEG265 [131] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG266 [132] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  b4_from_b2:
  b4_from_b7:
  //SEG267 [132] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
    jmp b4
  //SEG268 mul16u::@4
  b4:
  //SEG269 [133] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG270 [134] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG271 [126] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  b1_from_b4:
  //SEG272 [126] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG273 [126] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG274 [126] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG275 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = 8
    .label quotient_lo = 6
    .label return = $1d
  //SEG276 [136] call divr16u 
  //SEG277 [145] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
  //SEG278 [145] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG279 [145] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    lda #0
    sta divr16u.rem+1
    jsr divr16u
  //SEG280 [137] (word) divr16u::return#2 ← (word) divr16u::return#0
    jmp b2
  //SEG281 div32u16u::@2
  b2:
  //SEG282 [138] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
  //SEG283 [139] (word) divr16u::rem#4 ← (word) rem16u#1
  //SEG284 [140] call divr16u 
  //SEG285 [145] phi from div32u16u::@2 to divr16u [phi:div32u16u::@2->divr16u]
  divr16u_from_b2:
  //SEG286 [145] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@2->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG287 [145] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@2->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG288 [141] (word) divr16u::return#3 ← (word) divr16u::return#0
    jmp b3
  //SEG289 div32u16u::@3
  b3:
  //SEG290 [142] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  //SEG291 [143] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
    jmp breturn
  //SEG292 div32u16u::@return
  breturn:
  //SEG293 [144] return 
    rts
}
//SEG294 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage(4) dividend, word zeropage(2) rem)
divr16u: {
    .label rem = 2
    .label dividend = 4
    .label quotient = 6
    .label return = 6
  //SEG295 [146] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG296 [146] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG297 [146] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #0
    sta quotient
    lda #0
    sta quotient+1
  //SEG298 [146] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG299 [146] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG300 [146] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG301 [146] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG302 [146] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG303 [146] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG304 [146] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG305 divr16u::@1
  b1:
  //SEG306 [147] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG307 [148] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG308 [149] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG309 [150] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG310 divr16u::@4
  b4:
  //SEG311 [151] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG312 [152] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG313 [152] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG314 divr16u::@2
  b2:
  //SEG315 [153] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG316 [154] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG317 [155] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.wavelength
    bcc b3_from_b2
    bne !+
    lda rem
    cmp #<main.wavelength
    bcc b3_from_b2
  !:
    jmp b5
  //SEG318 divr16u::@5
  b5:
  //SEG319 [156] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG320 [157] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.wavelength
    sta rem
    lda rem+1
    sbc #>main.wavelength
    sta rem+1
  //SEG321 [158] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG322 [158] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG323 [158] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG324 divr16u::@3
  b3:
  //SEG325 [159] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG326 [160] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
  //SEG327 divr16u::@6
  b6:
  //SEG328 [161] (word) rem16u#1 ← (word) divr16u::rem#11
    jmp breturn
  //SEG329 divr16u::@return
  breturn:
  //SEG330 [162] return 
    rts
}
//SEG331 sin16s_gen
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zeropage(2) sintab)
sin16s_gen: {
    .label _1 = 6
    .label step = $1d
    .label sintab = 2
    .label x = $d
    .label i = 4
  //SEG332 [164] call div32u16u 
  //SEG333 [135] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
  //SEG334 [165] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
    jmp b3
  //SEG335 sin16s_gen::@3
  b3:
  //SEG336 [166] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  //SEG337 [167] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  b1_from_b3:
  //SEG338 [167] phi (word) sin16s_gen::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    lda #0
    sta i+1
  //SEG339 [167] phi (signed word*) sin16s_gen::sintab#2 = (const signed word[$78]) main::sintab1#0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintab1
    sta sintab
    lda #>main.sintab1
    sta sintab+1
  //SEG340 [167] phi (dword) sin16s_gen::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    lda #0
    sta x+1
    sta x+2
    sta x+3
    jmp b1
  // u[4.28]
  //SEG341 [167] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
  b1_from_b4:
  //SEG342 [167] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
  //SEG343 [167] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
  //SEG344 [167] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp b1
  //SEG345 sin16s_gen::@1
  b1:
  //SEG346 [168] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG347 [169] call sin16s 
    jsr sin16s
  //SEG348 [170] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
    jmp b4
  //SEG349 sin16s_gen::@4
  b4:
  //SEG350 [171] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  //SEG351 [172] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _1
    sta (sintab),y
    iny
    lda _1+1
    sta (sintab),y
  //SEG352 [173] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG353 [174] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG354 [175] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG355 [176] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1_from_b4
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1_from_b4
  !:
    jmp breturn
  //SEG356 sin16s_gen::@return
  breturn:
  //SEG357 [177] return 
    rts
}
//SEG358 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($15) x)
sin16s: {
    .label _6 = $15
    .label x = $15
    .label return = 6
    .label x1 = 8
    .label x2 = $b
    .label x3 = $b
    .label x3_6 = $11
    .label usinx = 6
    .label x4 = $b
    .label x5 = $11
    .label x5_128 = $11
    .label sinx = 6
    .label isUpper = $a
  //SEG359 [178] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b1_from_sin16s
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b1_from_sin16s
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b1_from_sin16s
  !:
    jmp b4
  //SEG360 sin16s::@4
  b4:
  //SEG361 [179] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG362 [180] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  b1_from_b4:
  //SEG363 [180] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG364 [180] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG365 [180] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b1_from_sin16s:
  //SEG366 [180] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG367 [180] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG368 sin16s::@1
  b1:
  //SEG369 [181] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2_from_b1
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2_from_b1
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2_from_b1
  !:
    jmp b5
  //SEG370 sin16s::@5
  b5:
  //SEG371 [182] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG372 [183] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG373 [183] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp b2
  //SEG374 sin16s::@2
  b2:
  //SEG375 [184] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _6
    rol _6+1
    rol _6+2
    rol _6+3
    dey
    bne !-
  //SEG376 [185] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 -- vwuz1=_hi_vduz2 
    lda _6+2
    sta x1
    lda _6+3
    sta x1+1
  //SEG377 [186] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG378 [187] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG379 [188] call mulu16_sel 
  //SEG380 [116] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from_b2:
  //SEG381 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG382 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG383 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG384 [189] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
    jmp b8
  //SEG385 sin16s::@8
  b8:
  //SEG386 [190] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  //SEG387 [191] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  //SEG388 [192] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG389 [193] call mulu16_sel 
  //SEG390 [116] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from_b8:
  //SEG391 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG392 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#1 [phi:sin16s::@8->mulu16_sel#1] -- register_copy 
  //SEG393 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#1 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG394 [194] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
    jmp b9
  //SEG395 sin16s::@9
  b9:
  //SEG396 [195] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  //SEG397 [196] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  //SEG398 [197] call mulu16_sel 
  //SEG399 [116] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from_b9:
  //SEG400 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG401 [116] phi (word) mulu16_sel::v2#10 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16s::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG402 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#2 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG403 [198] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17
    jmp b10
  //SEG404 sin16s::@10
  b10:
  //SEG405 [199] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14
  //SEG406 [200] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG407 [201] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  //SEG408 [202] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG409 [203] call mulu16_sel 
  //SEG410 [116] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from_b10:
  //SEG411 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG412 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#3 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG413 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#3 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG414 [204] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
    jmp b11
  //SEG415 sin16s::@11
  b11:
  //SEG416 [205] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15
  //SEG417 [206] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  //SEG418 [207] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG419 [208] call mulu16_sel 
  //SEG420 [116] phi from sin16s::@11 to mulu16_sel [phi:sin16s::@11->mulu16_sel]
  mulu16_sel_from_b11:
  //SEG421 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@11->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG422 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#4 [phi:sin16s::@11->mulu16_sel#1] -- register_copy 
  //SEG423 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#4 [phi:sin16s::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG424 [209] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17
    jmp b12
  //SEG425 sin16s::@12
  b12:
  //SEG426 [210] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16
  //SEG427 [211] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz1_ror_4 
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG428 [212] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG429 [213] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b15
    jmp b6
  //SEG430 sin16s::@6
  b6:
  //SEG431 [214] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG432 [215] phi from sin16s::@15 sin16s::@6 to sin16s::@3 [phi:sin16s::@15/sin16s::@6->sin16s::@3]
  b3_from_b15:
  b3_from_b6:
  //SEG433 [215] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@15/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp b3
  //SEG434 sin16s::@3
  b3:
    jmp breturn
  //SEG435 sin16s::@return
  breturn:
  //SEG436 [216] return 
    rts
  //SEG437 sin16s::@15
  b15:
  //SEG438 [217] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
    jmp b3_from_b15
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b42
Removing instruction jmp bend
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b6
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda sw+1
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b2_from_b1 with b2
Replacing label b1_from_b9 with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b4 with b1
Replacing label b1_from_b4 with b1
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b15 with b3
Replacing label b4_from_b2 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b4 with b1
Replacing label b1_from_b4 with b1
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b3_from_b15 with b3
Removing instruction b42_from_bbegin:
Removing instruction b42:
Removing instruction main_from_b42:
Removing instruction bend_from_b42:
Removing instruction b5_from_main:
Removing instruction sin16s_genb_from_b5:
Removing instruction b6_from_b5:
Removing instruction print_cls_from_b6:
Removing instruction b1_from_b9:
Removing instruction b3_from_b1:
Removing instruction print_str_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b8_from_b2:
Removing instruction print_str_from_b8:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b4:
Removing instruction b1_from_b1:
Removing instruction b1_from_b3:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction mulu16_sel_from_b9:
Removing instruction b3_from_b15:
Removing instruction b3_from_b6:
Removing instruction breturn:
Removing instruction b4_from_b2:
Removing instruction b4_from_b7:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction breturn:
Removing instruction b1_from_b3:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction mulu16_sel_from_b9:
Removing instruction b3_from_b15:
Removing instruction b3_from_b6:
Removing instruction breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction sin16s_gen_from_main:
Removing instruction b5:
Removing instruction b6:
Removing instruction b1_from_b6:
Removing instruction b3:
Removing instruction b8:
Removing instruction b9:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction div32u16u_from_sin16s_genb:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction mulu16_sel_from_b2:
Removing instruction b8:
Removing instruction mulu16_sel_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction mulu16_sel_from_b10:
Removing instruction b11:
Removing instruction mulu16_sel_from_b11:
Removing instruction b12:
Removing instruction b6:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_mul16u:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b1_from_b4:
Removing instruction divr16u_from_div32u16u:
Removing instruction b2:
Removing instruction divr16u_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction div32u16u_from_sin16s_gen:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b5:
Removing instruction mulu16_sel_from_b2:
Removing instruction b8:
Removing instruction mulu16_sel_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction mulu16_sel_from_b10:
Removing instruction b11:
Removing instruction mulu16_sel_from_b11:
Removing instruction b12:
Removing instruction b6:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b3 in beq b15
Skipping double jump to b3 in beq b15
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b1_from_sin16sb to b4
Relabelling long label b1_from_sin16s to b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Removing instruction b15:
Removing instruction b15:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b3
Removing unreachable instruction jmp b3
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @42
(label) @begin
(label) @end
(word) PI2_u4f12
(dword) PI2_u4f28
(const dword) PI2_u4f28#0 PI2_u4f28 = (dword/signed dword) $6487ed51
(word) PI_HALF_u4f12
(const word) PI_HALF_u4f12#0 PI_HALF_u4f12 = (word/signed word/dword/signed dword) $1922
(dword) PI_HALF_u4f28
(const dword) PI_HALF_u4f28#0 PI_HALF_u4f28 = (dword/signed dword) $1921fb54
(word) PI_u4f12
(const word) PI_u4f12#0 PI_u4f12 = (word/signed word/dword/signed dword) $3244
(dword) PI_u4f28
(const dword) PI_u4f28#0 PI_u4f28 = (dword/signed dword) $3243f6a9
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(label) div32u16u::@2
(label) div32u16u::@3
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_hi#0 quotient_hi zp ZP_WORD:8 0.8
(word) div32u16u::quotient_lo
(word) div32u16u::quotient_lo#0 quotient_lo zp ZP_WORD:6 4.0
(dword) div32u16u::return
(dword) div32u16u::return#0 return zp ZP_DWORD:29 1.5
(dword) div32u16u::return#2 return zp ZP_DWORD:29 4.0
(dword) div32u16u::return#3 return zp ZP_DWORD:29 4.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 22.0
(byte~) divr16u::$2 reg byte a 22.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:4 2.75
(word) divr16u::dividend#3 dividend zp ZP_WORD:4 5.0
(word) divr16u::dividend#5 dividend zp ZP_WORD:4 2.0
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 16.5
(byte) divr16u::i#2 reg byte x 1.6923076923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:6 16.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:6 11.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:6 2.75
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:2 8.25
(word) divr16u::rem#1 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#10 rem zp ZP_WORD:2 4.0
(word) divr16u::rem#11 rem zp ZP_WORD:2 11.666666666666666
(word) divr16u::rem#2 rem zp ZP_WORD:2 22.0
(word) divr16u::rem#4 rem zp ZP_WORD:2 4.0
(word) divr16u::rem#5 rem zp ZP_WORD:2 24.0
(word) divr16u::rem#6 rem zp ZP_WORD:2 11.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:6 5.285714285714286
(word) divr16u::return#2 return zp ZP_WORD:6 4.0
(word) divr16u::return#3 return zp ZP_WORD:6 4.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 1.8333333333333333
(signed word[$78]) main::sintab1
(const signed word[$78]) main::sintab1#0 sintab1 = { fill( $78, 0) }
(signed word[$78]) main::sintab2
(const signed word[$78]) main::sintab2#0 sintab2 = { fill( $78, 0) }
(signed word*) main::st1
(signed word*) main::st1#1 st1 zp ZP_WORD:2 5.5
(signed word*) main::st1#2 st1 zp ZP_WORD:2 3.3000000000000003
(signed word*) main::st2
(signed word*) main::st2#1 st2 zp ZP_WORD:4 7.333333333333333
(signed word*) main::st2#2 st2 zp ZP_WORD:4 3.0
(const string) main::str str = (string) "   @"
(const string) main::str1 str1 = (string) " @"
(signed word) main::sw
(signed word) main::sw#0 sw zp ZP_WORD:8 6.6000000000000005
(word) main::wavelength
(const word) main::wavelength#0 wavelength = (byte/signed byte/word/signed word/dword/signed dword) $78
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte/word~) mul16u::$1 reg byte a 202.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@4
(label) mul16u::@7
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp ZP_WORD:19 101.0
(word) mul16u::a#1 a zp ZP_WORD:19 1.3333333333333333
(word) mul16u::a#2 a zp ZP_WORD:19 67.66666666666666
(word) mul16u::b
(word) mul16u::b#0 b zp ZP_WORD:17 4.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp ZP_DWORD:25 4.0
(dword) mul16u::mb#1 mb zp ZP_DWORD:25 202.0
(dword) mul16u::mb#2 mb zp ZP_DWORD:25 43.57142857142858
(dword) mul16u::res
(dword) mul16u::res#1 res zp ZP_DWORD:21 202.0
(dword) mul16u::res#2 res zp ZP_DWORD:21 50.83333333333333
(dword) mul16u::res#6 res zp ZP_DWORD:21 101.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp ZP_DWORD:21 4.0
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0 $0 zp ZP_DWORD:21 4.0
(dword~) mulu16_sel::$1 $1 zp ZP_DWORD:21 4.0
(label) mulu16_sel::@2
(label) mulu16_sel::@return
(word) mulu16_sel::return
(word) mulu16_sel::return#0 return zp ZP_WORD:11 4.0
(word) mulu16_sel::return#1 return zp ZP_WORD:11 4.0
(word) mulu16_sel::return#10 return zp ZP_WORD:11 4.0
(word) mulu16_sel::return#11 return#11 zp ZP_WORD:17 4.0
(word) mulu16_sel::return#14 return#14 zp ZP_WORD:17 4.0
(word) mulu16_sel::return#15 return zp ZP_WORD:11 4.0
(word) mulu16_sel::return#16 return#16 zp ZP_WORD:17 4.0
(word) mulu16_sel::return#17 return#17 zp ZP_WORD:17 1.8333333333333335
(word) mulu16_sel::return#18 return#18 zp ZP_WORD:17 4.0
(word) mulu16_sel::return#19 return zp ZP_WORD:11 4.0
(word) mulu16_sel::return#20 return#20 zp ZP_WORD:17 4.0
(byte) mulu16_sel::select
(byte) mulu16_sel::select#10 reg byte x 0.3333333333333333
(word) mulu16_sel::v1
(word) mulu16_sel::v1#0 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#1 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#10 v1 zp ZP_WORD:11 22.0
(word) mulu16_sel::v1#2 v1 zp ZP_WORD:11 4.0
(word) mulu16_sel::v1#3 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#4 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#5 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#6 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#7 v1 zp ZP_WORD:11 4.0
(word) mulu16_sel::v1#8 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v1#9 v1 zp ZP_WORD:11 2.0
(word) mulu16_sel::v2
(word) mulu16_sel::v2#0 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#1 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#10 v2 zp ZP_WORD:17 9.0
(word) mulu16_sel::v2#3 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#4 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#5 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#6 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#8 v2 zp ZP_WORD:17 4.0
(word) mulu16_sel::v2#9 v2 zp ZP_WORD:17 4.0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:10 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:10 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:11 101.0
(byte*) print_char_cursor#12 print_char_cursor zp ZP_WORD:11 1.1176470588235294
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:11 32.7
(byte*) print_char_cursor#33 print_char_cursor zp ZP_WORD:11 5.0
(byte*) print_char_cursor#43 print_char_cursor zp ZP_WORD:11 3.0
(byte*) print_char_cursor#46 print_char_cursor zp ZP_WORD:11 2.0
(byte*) print_char_cursor#48 print_char_cursor zp ZP_WORD:11 6.5
(byte*) print_char_cursor#49 print_char_cursor zp ZP_WORD:11 8.25
(byte*) print_char_cursor#51 print_char_cursor zp ZP_WORD:11 24.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(const byte*) print_line_cursor#0 print_line_cursor = ((byte*))(word/signed word/dword/signed dword) $400
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:6 202.0
(byte*) print_str::str#3 str zp ZP_WORD:6 101.5
(byte*) print_str::str#5 str zp ZP_WORD:6 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:8 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:8 4.25
(signed word) print_sword::w#3 w zp ZP_WORD:8 1.3333333333333333
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(signed word) rem16s
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:2 0.8
(signed byte) rem8s
(byte) rem8u
(signed word()) sin16s((dword) sin16s::x)
(dword~) sin16s::$6 $6 zp ZP_DWORD:21 4.0
(label) sin16s::@1
(label) sin16s::@10
(label) sin16s::@11
(label) sin16s::@12
(label) sin16s::@15
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@8
(label) sin16s::@9
(label) sin16s::@return
(byte) sin16s::isUpper
(byte) sin16s::isUpper#2 isUpper zp ZP_BYTE:10 0.06060606060606061
(signed word) sin16s::return
(signed word) sin16s::return#0 return zp ZP_WORD:6 22.0
(signed word) sin16s::return#1 return zp ZP_WORD:6 5.0
(signed word~) sin16s::return#5 return zp ZP_WORD:6 4.0
(signed word) sin16s::sinx
(signed word) sin16s::sinx#1 sinx zp ZP_WORD:6 4.0
(word) sin16s::usinx
(word) sin16s::usinx#0 usinx zp ZP_WORD:6 0.3333333333333333
(word) sin16s::usinx#1 usinx zp ZP_WORD:6 1.0
(dword) sin16s::x
(dword) sin16s::x#0 x zp ZP_DWORD:21 8.5
(dword) sin16s::x#1 x zp ZP_DWORD:21 4.0
(dword) sin16s::x#2 x zp ZP_DWORD:21 4.0
(dword) sin16s::x#4 x zp ZP_DWORD:21 5.0
(dword) sin16s::x#6 x zp ZP_DWORD:21 6.0
(word) sin16s::x1
(word) sin16s::x1#0 x1 zp ZP_WORD:8 0.6363636363636365
(word) sin16s::x2
(word) sin16s::x2#0 x2 zp ZP_WORD:11 4.0
(word) sin16s::x3
(word) sin16s::x3#0 x3 zp ZP_WORD:11 1.0
(word) sin16s::x3_6
(word) sin16s::x3_6#0 x3_6 zp ZP_WORD:17 4.0
(word) sin16s::x4
(word) sin16s::x4#0 x4 zp ZP_WORD:11 4.0
(word) sin16s::x5
(word) sin16s::x5#0 x5 zp ZP_WORD:17 4.0
(word) sin16s::x5_128
(word) sin16s::x5_128#0 x5_128 zp ZP_WORD:17 4.0
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(signed word~) sin16s_gen::$1 $1 zp ZP_WORD:6 22.0
(label) sin16s_gen::@1
(label) sin16s_gen::@3
(label) sin16s_gen::@4
(label) sin16s_gen::@return
(word) sin16s_gen::i
(word) sin16s_gen::i#1 i zp ZP_WORD:4 16.5
(word) sin16s_gen::i#2 i zp ZP_WORD:4 2.75
(signed word*) sin16s_gen::sintab
(signed word*) sin16s_gen::sintab#0 sintab zp ZP_WORD:2 5.5
(signed word*) sin16s_gen::sintab#2 sintab zp ZP_WORD:2 5.5
(dword) sin16s_gen::step
(dword) sin16s_gen::step#0 step zp ZP_DWORD:29 1.1818181818181819
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(dword) sin16s_gen::x#1 x zp ZP_DWORD:13 7.333333333333333
(dword) sin16s_gen::x#2 x zp ZP_DWORD:13 4.714285714285714
(void()) sin16s_genb((signed word*) sin16s_genb::sintab , (word) sin16s_genb::wavelength)
(signed word~) sin16s_genb::$2 $2 zp ZP_WORD:8 22.0
(label) sin16s_genb::@1
(label) sin16s_genb::@3
(label) sin16s_genb::@4
(label) sin16s_genb::@return
(word) sin16s_genb::i
(word) sin16s_genb::i#1 i zp ZP_WORD:4 16.5
(word) sin16s_genb::i#2 i zp ZP_WORD:4 2.75
(signed word*) sin16s_genb::sintab
(signed word*) sin16s_genb::sintab#0 sintab zp ZP_WORD:2 5.5
(signed word*) sin16s_genb::sintab#2 sintab zp ZP_WORD:2 5.5
(dword) sin16s_genb::step
(dword) sin16s_genb::step#0 step zp ZP_DWORD:29 1.1818181818181819
(word) sin16s_genb::wavelength
(dword) sin16s_genb::x
(dword) sin16s_genb::x#1 x zp ZP_DWORD:13 7.333333333333333
(dword) sin16s_genb::x#2 x zp ZP_DWORD:13 4.714285714285714
(signed word()) sin16sb((word) sin16sb::x)
(label) sin16sb::@1
(label) sin16sb::@10
(label) sin16sb::@11
(label) sin16sb::@12
(label) sin16sb::@15
(label) sin16sb::@2
(label) sin16sb::@3
(label) sin16sb::@4
(label) sin16sb::@5
(label) sin16sb::@6
(label) sin16sb::@8
(label) sin16sb::@9
(label) sin16sb::@return
(byte) sin16sb::isUpper
(byte) sin16sb::isUpper#2 isUpper zp ZP_BYTE:10 0.0625
(signed word) sin16sb::return
(signed word) sin16sb::return#0 return zp ZP_WORD:8 22.0
(signed word) sin16sb::return#1 return zp ZP_WORD:8 5.0
(signed word~) sin16sb::return#5 return zp ZP_WORD:8 4.0
(signed word) sin16sb::sinx
(signed word) sin16sb::sinx#1 sinx zp ZP_WORD:8 4.0
(word) sin16sb::usinx
(word) sin16sb::usinx#0 usinx zp ZP_WORD:8 0.3333333333333333
(word) sin16sb::usinx#1 usinx zp ZP_WORD:8 1.0
(word) sin16sb::x
(word) sin16sb::x#0 x zp ZP_WORD:6 8.5
(word) sin16sb::x#1 x zp ZP_WORD:6 4.0
(word) sin16sb::x#2 x zp ZP_WORD:6 4.0
(word) sin16sb::x#4 x zp ZP_WORD:6 5.0
(word) sin16sb::x#6 x zp ZP_WORD:6 6.0
(word) sin16sb::x1
(word) sin16sb::x1#0 x1 zp ZP_WORD:6 0.6363636363636365
(word) sin16sb::x2
(word) sin16sb::x2#0 x2 zp ZP_WORD:11 4.0
(word) sin16sb::x3
(word) sin16sb::x3#0 x3 zp ZP_WORD:11 1.0
(word) sin16sb::x3_6
(word) sin16sb::x3_6#0 x3_6 zp ZP_WORD:17 4.0
(word) sin16sb::x4
(word) sin16sb::x4#0 x4 zp ZP_WORD:11 4.0
(word) sin16sb::x5
(word) sin16sb::x5#0 x5 zp ZP_WORD:17 4.0
(word) sin16sb::x5_128
(word) sin16sb::x5_128#0 x5_128 zp ZP_WORD:17 4.0

zp ZP_WORD:2 [ main::st1#2 main::st1#1 print_cls::sc#2 print_cls::sc#1 sin16s_genb::sintab#2 sin16s_genb::sintab#0 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#1 sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
zp ZP_WORD:4 [ main::st2#2 main::st2#1 sin16s_genb::i#2 sin16s_genb::i#1 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 sin16s_gen::i#2 sin16s_gen::i#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:6 [ print_str::str#3 print_str::str#5 print_str::str#0 sin16sb::x#6 sin16sb::x#4 sin16sb::x#0 sin16sb::x#1 sin16sb::x#2 sin16sb::x1#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$1 sin16s::usinx#0 ]
zp ZP_WORD:8 [ print_sword::w#3 print_sword::w#1 print_sword::w#0 main::sw#0 sin16sb::return#1 sin16sb::return#5 sin16sb::sinx#1 sin16sb::usinx#1 sin16sb::return#0 sin16s_genb::$2 sin16sb::usinx#0 div32u16u::quotient_hi#0 sin16s::x1#0 ]
zp ZP_BYTE:10 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 sin16sb::isUpper#2 sin16s::isUpper#2 ]
reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:11 [ print_char_cursor#33 print_char_cursor#46 print_char_cursor#43 print_char_cursor#51 print_char_cursor#48 print_char_cursor#49 print_char_cursor#2 print_char_cursor#12 print_char_cursor#1 mulu16_sel::v1#10 mulu16_sel::v1#3 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#8 mulu16_sel::v1#9 mulu16_sel::v1#5 mulu16_sel::v1#6 mulu16_sel::v1#7 sin16sb::x3#0 sin16s::x3#0 sin16sb::x2#0 sin16sb::x4#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#19 mulu16_sel::return#10 mulu16_sel::return#0 mulu16_sel::return#1 mulu16_sel::return#15 ]
zp ZP_DWORD:13 [ sin16s_genb::x#2 sin16s_genb::x#1 sin16s_gen::x#2 sin16s_gen::x#1 ]
zp ZP_WORD:17 [ mulu16_sel::v2#10 mulu16_sel::v2#3 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#8 mulu16_sel::v2#9 mulu16_sel::v2#5 mulu16_sel::v2#6 mul16u::b#0 mulu16_sel::return#18 mulu16_sel::return#17 mulu16_sel::return#20 sin16sb::x3_6#0 mulu16_sel::return#11 sin16sb::x5#0 mulu16_sel::return#14 sin16s::x3_6#0 mulu16_sel::return#16 sin16s::x5#0 sin16sb::x5_128#0 sin16s::x5_128#0 ]
reg byte x [ mulu16_sel::select#10 ]
zp ZP_WORD:19 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
zp ZP_DWORD:21 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 sin16s::$6 ]
zp ZP_DWORD:25 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
zp ZP_DWORD:29 [ div32u16u::return#3 sin16s_genb::step#0 div32u16u::return#0 div32u16u::return#2 sin16s_gen::step#0 ]
reg byte a [ mul16u::$1 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]


FINAL ASSEMBLER
Score: 23125

//SEG0 File Comments
// Generates a 16-bit signed sinus
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .label print_line_cursor = $400
  .label rem16u = 2
  .label print_char_cursor = $b
//SEG3 @begin
//SEG4 [1] phi from @begin to @42 [phi:@begin->@42]
//SEG5 @42
//SEG6 [2] call main 
//SEG7 [4] phi from @42 to main [phi:@42->main]
//SEG8 [3] phi from @42 to @end [phi:@42->@end]
//SEG9 @end
//SEG10 main
main: {
    .label wavelength = $78
    .label sw = 8
    .label st1 = 2
    .label st2 = 4
  //SEG11 [5] call sin16s_gen 
  //SEG12 [163] phi from main to sin16s_gen [phi:main->sin16s_gen]
    jsr sin16s_gen
  //SEG13 [6] phi from main to main::@5 [phi:main->main::@5]
  //SEG14 main::@5
  //SEG15 [7] call sin16s_genb 
  //SEG16 [62] phi from main::@5 to sin16s_genb [phi:main::@5->sin16s_genb]
    jsr sin16s_genb
  //SEG17 [8] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  //SEG18 main::@6
  //SEG19 [9] call print_cls 
  //SEG20 [56] phi from main::@6 to print_cls [phi:main::@6->print_cls]
    jsr print_cls
  //SEG21 [10] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  //SEG22 [10] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG23 [10] phi (byte*) print_char_cursor#49 = (const byte*) print_line_cursor#0 [phi:main::@6->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta print_char_cursor
    lda #>print_line_cursor
    sta print_char_cursor+1
  //SEG24 [10] phi (signed word*) main::st2#2 = (const signed word[$78]) main::sintab2#0 [phi:main::@6->main::@1#2] -- pwsz1=pwsc1 
    lda #<sintab2
    sta st2
    lda #>sintab2
    sta st2+1
  //SEG25 [10] phi (signed word*) main::st1#2 = (const signed word[$78]) main::sintab1#0 [phi:main::@6->main::@1#3] -- pwsz1=pwsc1 
    lda #<sintab1
    sta st1
    lda #>sintab1
    sta st1+1
  //SEG26 [10] phi from main::@9 to main::@1 [phi:main::@9->main::@1]
  //SEG27 [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@9->main::@1#0] -- register_copy 
  //SEG28 [10] phi (byte*) print_char_cursor#49 = (byte*) print_char_cursor#2 [phi:main::@9->main::@1#1] -- register_copy 
  //SEG29 [10] phi (signed word*) main::st2#2 = (signed word*) main::st2#1 [phi:main::@9->main::@1#2] -- register_copy 
  //SEG30 [10] phi (signed word*) main::st1#2 = (signed word*) main::st1#1 [phi:main::@9->main::@1#3] -- register_copy 
  //SEG31 main::@1
  b1:
  //SEG32 [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2) -- vwsz1=_deref_pwsz2_minus__deref_pwsz3 
    ldy #0
    sec
    lda (st1),y
    sbc (st2),y
    sta sw
    iny
    lda (st1),y
    sbc (st2),y
    sta sw+1
  //SEG33 [12] if((signed word) main::sw#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@2 -- vwsz1_lt_0_then_la1 
    bmi b2
  //SEG34 [13] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  //SEG35 main::@3
  //SEG36 [14] call print_str 
  //SEG37 [25] phi from main::@3 to print_str [phi:main::@3->print_str]
  //SEG38 [25] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#49 [phi:main::@3->print_str#0] -- register_copy 
  //SEG39 [25] phi (byte*) print_str::str#5 = (const string) main::str1 [phi:main::@3->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG40 [15] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG41 [15] phi (byte*) print_char_cursor#48 = (byte*) print_char_cursor#49 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG42 main::@2
  b2:
  //SEG43 [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0
  //SEG44 [17] call print_sword 
    jsr print_sword
  //SEG45 [18] phi from main::@2 to main::@8 [phi:main::@2->main::@8]
  //SEG46 main::@8
  //SEG47 [19] call print_str 
  //SEG48 [25] phi from main::@8 to print_str [phi:main::@8->print_str]
  //SEG49 [25] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#12 [phi:main::@8->print_str#0] -- register_copy 
  //SEG50 [25] phi (byte*) print_str::str#5 = (const string) main::str [phi:main::@8->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG51 main::@9
  //SEG52 [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda st1
    clc
    adc #2
    sta st1
    bcc !+
    inc st1+1
  !:
  //SEG53 [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda st2
    clc
    adc #2
    sta st2
    bcc !+
    inc st2+1
  !:
  //SEG54 [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG55 [23] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $78) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$78
    bne b1
  //SEG56 main::@return
  //SEG57 [24] return 
    rts
    str: .text "   @"
    str1: .text " @"
    sintab1: .fill 2*$78, 0
    sintab2: .fill 2*$78, 0
}
//SEG58 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(6) str)
print_str: {
    .label str = 6
  //SEG59 [26] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG60 [26] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#51 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG61 [26] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG62 print_str::@1
  b1:
  //SEG63 [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG64 print_str::@return
  //SEG65 [28] return 
    rts
  //SEG66 print_str::@2
  b2:
  //SEG67 [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG68 [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG69 [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG70 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage(8) w)
print_sword: {
    .label w = 8
  //SEG71 [32] if((signed word) print_sword::w#1>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG72 [33] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG73 print_sword::@2
  //SEG74 [34] call print_char 
  //SEG75 [52] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG76 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#48 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG77 [52] phi (byte) print_char::ch#3 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG78 print_sword::@4
  //SEG79 [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG80 [36] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  //SEG81 [36] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#48 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG82 [36] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
  //SEG83 print_sword::@1
  b1:
  //SEG84 [37] call print_word 
    jsr print_word
  //SEG85 print_sword::@return
  //SEG86 [38] return 
    rts
}
//SEG87 print_word
// Print a word as HEX
print_word: {
  //SEG88 [39] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#3 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG89 [40] call print_byte 
  //SEG90 [44] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG91 [44] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#43 [phi:print_word->print_byte#0] -- register_copy 
  //SEG92 [44] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG93 print_word::@1
  //SEG94 [41] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#3 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG95 [42] call print_byte 
  //SEG96 [44] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG97 [44] phi (byte*) print_char_cursor#46 = (byte*) print_char_cursor#12 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG98 [44] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG99 print_word::@return
  //SEG100 [43] return 
    rts
}
//SEG101 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($a) b)
print_byte: {
    .label b = $a
  //SEG102 [45] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG103 [46] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG104 [47] call print_char 
  //SEG105 [52] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG106 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#46 [phi:print_byte->print_char#0] -- register_copy 
  //SEG107 [52] phi (byte) print_char::ch#3 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG108 print_byte::@1
  //SEG109 [48] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG110 [49] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG111 [50] call print_char 
  //SEG112 [52] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG113 [52] phi (byte*) print_char_cursor#33 = (byte*) print_char_cursor#12 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG114 [52] phi (byte) print_char::ch#3 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG115 print_byte::@return
  //SEG116 [51] return 
    rts
}
//SEG117 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG118 [53] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG119 [54] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#33 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG120 print_char::@return
  //SEG121 [55] return 
    rts
}
//SEG122 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 2
  //SEG123 [57] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG124 [57] phi (byte*) print_cls::sc#2 = (const byte*) print_line_cursor#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<print_line_cursor
    sta sc
    lda #>print_line_cursor
    sta sc+1
  //SEG125 [57] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG126 [57] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG127 print_cls::@1
  b1:
  //SEG128 [58] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG129 [59] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG130 [60] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>print_line_cursor+$3e8
    bne b1
    lda sc
    cmp #<print_line_cursor+$3e8
    bne b1
  //SEG131 print_cls::@return
  //SEG132 [61] return 
    rts
}
//SEG133 sin16s_genb
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_genb(signed word* zeropage(2) sintab)
sin16s_genb: {
    .label _2 = 8
    .label step = $1d
    .label sintab = 2
    .label x = $d
    .label i = 4
  //SEG134 [63] call div32u16u 
  //SEG135 [135] phi from sin16s_genb to div32u16u [phi:sin16s_genb->div32u16u]
    jsr div32u16u
  //SEG136 [64] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0
  //SEG137 sin16s_genb::@3
  //SEG138 [65] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3
  //SEG139 [66] phi from sin16s_genb::@3 to sin16s_genb::@1 [phi:sin16s_genb::@3->sin16s_genb::@1]
  //SEG140 [66] phi (word) sin16s_genb::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_genb::@3->sin16s_genb::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    sta i+1
  //SEG141 [66] phi (signed word*) sin16s_genb::sintab#2 = (const signed word[$78]) main::sintab2#0 [phi:sin16s_genb::@3->sin16s_genb::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintab2
    sta sintab
    lda #>main.sintab2
    sta sintab+1
  //SEG142 [66] phi (dword) sin16s_genb::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_genb::@3->sin16s_genb::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    sta x+1
    sta x+2
    sta x+3
  // u[4.28]
  //SEG143 [66] phi from sin16s_genb::@4 to sin16s_genb::@1 [phi:sin16s_genb::@4->sin16s_genb::@1]
  //SEG144 [66] phi (word) sin16s_genb::i#2 = (word) sin16s_genb::i#1 [phi:sin16s_genb::@4->sin16s_genb::@1#0] -- register_copy 
  //SEG145 [66] phi (signed word*) sin16s_genb::sintab#2 = (signed word*) sin16s_genb::sintab#0 [phi:sin16s_genb::@4->sin16s_genb::@1#1] -- register_copy 
  //SEG146 [66] phi (dword) sin16s_genb::x#2 = (dword) sin16s_genb::x#1 [phi:sin16s_genb::@4->sin16s_genb::@1#2] -- register_copy 
  //SEG147 sin16s_genb::@1
  b1:
  //SEG148 [67] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2 -- vwuz1=_hi_vduz2 
    lda x+2
    sta sin16sb.x
    lda x+3
    sta sin16sb.x+1
  //SEG149 [68] call sin16sb 
    jsr sin16sb
  //SEG150 [69] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1
  //SEG151 sin16s_genb::@4
  //SEG152 [70] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0
  //SEG153 [71] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _2
    sta (sintab),y
    iny
    lda _2+1
    sta (sintab),y
  //SEG154 [72] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG155 [73] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG156 [74] (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG157 [75] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1
  !:
  //SEG158 sin16s_genb::@return
  //SEG159 [76] return 
    rts
}
//SEG160 sin16sb
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16sb(word zeropage(6) x)
sin16sb: {
    .label x = 6
    .label return = 8
    .label x1 = 6
    .label x2 = $b
    .label x3 = $b
    .label x3_6 = $11
    .label usinx = 8
    .label x4 = $b
    .label x5 = $11
    .label x5_128 = $11
    .label sinx = 8
    .label isUpper = $a
  //SEG161 [77] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_u4f12
    bcc b4
    bne !+
    lda x
    cmp #<PI_u4f12
    bcc b4
  !:
  //SEG162 sin16sb::@4
  //SEG163 [78] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda x
    sec
    sbc #<PI_u4f12
    sta x
    lda x+1
    sbc #>PI_u4f12
    sta x+1
  //SEG164 [79] phi from sin16sb::@4 to sin16sb::@1 [phi:sin16sb::@4->sin16sb::@1]
  //SEG165 [79] phi (byte) sin16sb::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@4->sin16sb::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG166 [79] phi (word) sin16sb::x#4 = (word) sin16sb::x#1 [phi:sin16sb::@4->sin16sb::@1#1] -- register_copy 
    jmp b1
  //SEG167 [79] phi from sin16sb to sin16sb::@1 [phi:sin16sb->sin16sb::@1]
  b4:
  //SEG168 [79] phi (byte) sin16sb::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb->sin16sb::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG169 [79] phi (word) sin16sb::x#4 = (word) sin16sb::x#0 [phi:sin16sb->sin16sb::@1#1] -- register_copy 
  //SEG170 sin16sb::@1
  b1:
  //SEG171 [80] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda x+1
    cmp #>PI_HALF_u4f12
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f12
    bcc b2
  !:
  //SEG172 sin16sb::@5
  //SEG173 [81] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc x
    sta x
    lda #>PI_u4f12
    sbc x+1
    sta x+1
  //SEG174 [82] phi from sin16sb::@1 sin16sb::@5 to sin16sb::@2 [phi:sin16sb::@1/sin16sb::@5->sin16sb::@2]
  //SEG175 [82] phi (word) sin16sb::x#6 = (word) sin16sb::x#4 [phi:sin16sb::@1/sin16sb::@5->sin16sb::@2#0] -- register_copy 
  //SEG176 sin16sb::@2
  b2:
  //SEG177 [83] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vwuz1=vwuz1_rol_3 
    asl x1
    rol x1+1
    asl x1
    rol x1+1
    asl x1
    rol x1+1
  //SEG178 [84] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG179 [85] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG180 [86] call mulu16_sel 
  //SEG181 [116] phi from sin16sb::@2 to mulu16_sel [phi:sin16sb::@2->mulu16_sel]
  //SEG182 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG183 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#5 [phi:sin16sb::@2->mulu16_sel#1] -- register_copy 
  //SEG184 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#5 [phi:sin16sb::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG185 [87] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17
  //SEG186 sin16sb::@8
  //SEG187 [88] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18 -- vwuz1=vwuz2 
    lda mulu16_sel.return_18
    sta x2
    lda mulu16_sel.return_18+1
    sta x2+1
  //SEG188 [89] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0
  //SEG189 [90] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG190 [91] call mulu16_sel 
  //SEG191 [116] phi from sin16sb::@8 to mulu16_sel [phi:sin16sb::@8->mulu16_sel]
  //SEG192 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG193 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#6 [phi:sin16sb::@8->mulu16_sel#1] -- register_copy 
  //SEG194 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#6 [phi:sin16sb::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG195 [92] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
  //SEG196 sin16sb::@9
  //SEG197 [93] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19
  //SEG198 [94] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0
  //SEG199 [95] call mulu16_sel 
  //SEG200 [116] phi from sin16sb::@9 to mulu16_sel [phi:sin16sb::@9->mulu16_sel]
  //SEG201 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16sb::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG202 [116] phi (word) mulu16_sel::v2#10 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16sb::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG203 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#7 [phi:sin16sb::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG204 [96] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17
  //SEG205 sin16sb::@10
  //SEG206 [97] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20
  //SEG207 [98] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG208 [99] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0
  //SEG209 [100] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG210 [101] call mulu16_sel 
  //SEG211 [116] phi from sin16sb::@10 to mulu16_sel [phi:sin16sb::@10->mulu16_sel]
  //SEG212 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG213 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#8 [phi:sin16sb::@10->mulu16_sel#1] -- register_copy 
  //SEG214 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#8 [phi:sin16sb::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG215 [102] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
  //SEG216 sin16sb::@11
  //SEG217 [103] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10
  //SEG218 [104] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0
  //SEG219 [105] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG220 [106] call mulu16_sel 
  //SEG221 [116] phi from sin16sb::@11 to mulu16_sel [phi:sin16sb::@11->mulu16_sel]
  //SEG222 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16sb::@11->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG223 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#9 [phi:sin16sb::@11->mulu16_sel#1] -- register_copy 
  //SEG224 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#9 [phi:sin16sb::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG225 [107] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17
  //SEG226 sin16sb::@12
  //SEG227 [108] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11
  //SEG228 [109] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz1_ror_4 
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG229 [110] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG230 [111] if((byte) sin16sb::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16sb::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b3
  //SEG231 sin16sb::@6
  //SEG232 [112] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG233 [113] phi from sin16sb::@15 sin16sb::@6 to sin16sb::@3 [phi:sin16sb::@15/sin16sb::@6->sin16sb::@3]
  //SEG234 [113] phi (signed word) sin16sb::return#1 = (signed word~) sin16sb::return#5 [phi:sin16sb::@15/sin16sb::@6->sin16sb::@3#0] -- register_copy 
  //SEG235 sin16sb::@3
  b3:
  //SEG236 sin16sb::@return
  //SEG237 [114] return 
    rts
  //SEG238 sin16sb::@15
  //SEG239 [115] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1
}
//SEG240 mulu16_sel
// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zeropage($b) v1, word zeropage($11) v2, byte register(X) select)
mulu16_sel: {
    .label _0 = $15
    .label _1 = $15
    .label v1 = $b
    .label v2 = $11
    .label return = $b
    .label return_11 = $11
    .label return_14 = $11
    .label return_16 = $11
    .label return_17 = $11
    .label return_18 = $11
    .label return_20 = $11
  //SEG241 [117] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10 -- vwuz1=vwuz2 
    lda v1
    sta mul16u.a
    lda v1+1
    sta mul16u.a+1
  //SEG242 [118] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10
  //SEG243 [119] call mul16u 
    jsr mul16u
  //SEG244 [120] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  //SEG245 mulu16_sel::@2
  //SEG246 [121] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  //SEG247 [122] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl _1
    rol _1+1
    rol _1+2
    rol _1+3
    dex
    bne !-
  !e:
  //SEG248 [123] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda _1+2
    sta return_17
    lda _1+3
    sta return_17+1
  //SEG249 mulu16_sel::@return
  //SEG250 [124] return 
    rts
}
//SEG251 mul16u
// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
// mul16u(word zeropage($13) a, word zeropage($11) b)
mul16u: {
    .label mb = $19
    .label a = $13
    .label res = $15
    .label b = $11
    .label return = $15
  //SEG252 [125] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda b
    sta mb
    lda b+1
    sta mb+1
    lda #0
    sta mb+2
    sta mb+3
  //SEG253 [126] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  //SEG254 [126] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
  //SEG255 [126] phi (dword) mul16u::res#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vbuc1 
    sta res
    sta res+1
    sta res+2
    sta res+3
  //SEG256 [126] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
  //SEG257 mul16u::@1
  b1:
  //SEG258 [127] if((word) mul16u::a#2!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda a
    bne b2
    lda a+1
    bne b2
  //SEG259 mul16u::@return
  //SEG260 [128] return 
    rts
  //SEG261 mul16u::@2
  b2:
  //SEG262 [129] (byte/word~) mul16u::$1 ← (word) mul16u::a#2 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda a
    and #1
  //SEG263 [130] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4
  //SEG264 mul16u::@7
  //SEG265 [131] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda res
    clc
    adc mb
    sta res
    lda res+1
    adc mb+1
    sta res+1
    lda res+2
    adc mb+2
    sta res+2
    lda res+3
    adc mb+3
    sta res+3
  //SEG266 [132] phi from mul16u::@2 mul16u::@7 to mul16u::@4 [phi:mul16u::@2/mul16u::@7->mul16u::@4]
  //SEG267 [132] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@7->mul16u::@4#0] -- register_copy 
  //SEG268 mul16u::@4
  b4:
  //SEG269 [133] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_ror_1 
    clc
    ror a+1
    ror a
  //SEG270 [134] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vduz1=vduz1_rol_1 
    asl mb
    rol mb+1
    rol mb+2
    rol mb+3
  //SEG271 [126] phi from mul16u::@4 to mul16u::@1 [phi:mul16u::@4->mul16u::@1]
  //SEG272 [126] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@4->mul16u::@1#0] -- register_copy 
  //SEG273 [126] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@4->mul16u::@1#1] -- register_copy 
  //SEG274 [126] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@4->mul16u::@1#2] -- register_copy 
    jmp b1
}
//SEG275 div32u16u
// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = 8
    .label quotient_lo = 6
    .label return = $1d
  //SEG276 [136] call divr16u 
  //SEG277 [145] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  //SEG278 [145] phi (word) divr16u::dividend#5 = >(const dword) PI2_u4f28#0 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta divr16u.dividend+1
  //SEG279 [145] phi (word) divr16u::rem#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #0
    sta divr16u.rem
    sta divr16u.rem+1
    jsr divr16u
  //SEG280 [137] (word) divr16u::return#2 ← (word) divr16u::return#0
  //SEG281 div32u16u::@2
  //SEG282 [138] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2 -- vwuz1=vwuz2 
    lda divr16u.return
    sta quotient_hi
    lda divr16u.return+1
    sta quotient_hi+1
  //SEG283 [139] (word) divr16u::rem#4 ← (word) rem16u#1
  //SEG284 [140] call divr16u 
  //SEG285 [145] phi from div32u16u::@2 to divr16u [phi:div32u16u::@2->divr16u]
  //SEG286 [145] phi (word) divr16u::dividend#5 = <(const dword) PI2_u4f28#0 [phi:div32u16u::@2->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta divr16u.dividend+1
  //SEG287 [145] phi (word) divr16u::rem#10 = (word) divr16u::rem#4 [phi:div32u16u::@2->divr16u#1] -- register_copy 
    jsr divr16u
  //SEG288 [141] (word) divr16u::return#3 ← (word) divr16u::return#0
  //SEG289 div32u16u::@3
  //SEG290 [142] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  //SEG291 [143] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda quotient_hi
    sta return+2
    lda quotient_hi+1
    sta return+3
    lda quotient_lo
    sta return
    lda quotient_lo+1
    sta return+1
  //SEG292 div32u16u::@return
  //SEG293 [144] return 
    rts
}
//SEG294 divr16u
// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zeropage(4) dividend, word zeropage(2) rem)
divr16u: {
    .label rem = 2
    .label dividend = 4
    .label quotient = 6
    .label return = 6
  //SEG295 [146] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG296 [146] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG297 [146] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG298 [146] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG299 [146] phi (word) divr16u::rem#5 = (word) divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
  //SEG300 [146] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG301 [146] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG302 [146] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG303 [146] phi (word) divr16u::dividend#3 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG304 [146] phi (word) divr16u::rem#5 = (word) divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG305 divr16u::@1
  b1:
  //SEG306 [147] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG307 [148] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3 -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG308 [149] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG309 [150] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG310 divr16u::@4
  //SEG311 [151] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG312 [152] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG313 [152] phi (word) divr16u::rem#6 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG314 divr16u::@2
  b2:
  //SEG315 [153] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG316 [154] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG317 [155] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda rem+1
    cmp #>main.wavelength
    bcc b3
    bne !+
    lda rem
    cmp #<main.wavelength
    bcc b3
  !:
  //SEG318 divr16u::@5
  //SEG319 [156] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG320 [157] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda rem
    sec
    sbc #<main.wavelength
    sta rem
    lda rem+1
    sbc #>main.wavelength
    sta rem+1
  //SEG321 [158] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG322 [158] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG323 [158] phi (word) divr16u::rem#11 = (word) divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG324 divr16u::@3
  b3:
  //SEG325 [159] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG326 [160] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG327 divr16u::@6
  //SEG328 [161] (word) rem16u#1 ← (word) divr16u::rem#11
  //SEG329 divr16u::@return
  //SEG330 [162] return 
    rts
}
//SEG331 sin16s_gen
// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
// sin16s_gen(signed word* zeropage(2) sintab)
sin16s_gen: {
    .label _1 = 6
    .label step = $1d
    .label sintab = 2
    .label x = $d
    .label i = 4
  //SEG332 [164] call div32u16u 
  //SEG333 [135] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
    jsr div32u16u
  //SEG334 [165] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  //SEG335 sin16s_gen::@3
  //SEG336 [166] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  //SEG337 [167] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  //SEG338 [167] phi (word) sin16s_gen::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- vwuz1=vbuc1 
    lda #0
    sta i
    sta i+1
  //SEG339 [167] phi (signed word*) sin16s_gen::sintab#2 = (const signed word[$78]) main::sintab1#0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- pwsz1=pwsc1 
    lda #<main.sintab1
    sta sintab
    lda #>main.sintab1
    sta sintab+1
  //SEG340 [167] phi (dword) sin16s_gen::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vduz1=vbuc1 
    lda #0
    sta x
    sta x+1
    sta x+2
    sta x+3
  // u[4.28]
  //SEG341 [167] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
  //SEG342 [167] phi (word) sin16s_gen::i#2 = (word) sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
  //SEG343 [167] phi (signed word*) sin16s_gen::sintab#2 = (signed word*) sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
  //SEG344 [167] phi (dword) sin16s_gen::x#2 = (dword) sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
  //SEG345 sin16s_gen::@1
  b1:
  //SEG346 [168] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2 -- vduz1=vduz2 
    lda x
    sta sin16s.x
    lda x+1
    sta sin16s.x+1
    lda x+2
    sta sin16s.x+2
    lda x+3
    sta sin16s.x+3
  //SEG347 [169] call sin16s 
    jsr sin16s
  //SEG348 [170] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  //SEG349 sin16s_gen::@4
  //SEG350 [171] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  //SEG351 [172] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda _1
    sta (sintab),y
    iny
    lda _1+1
    sta (sintab),y
  //SEG352 [173] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- pwsz1=pwsz1_plus_2 
    lda sintab
    clc
    adc #2
    sta sintab
    bcc !+
    inc sintab+1
  !:
  //SEG353 [174] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda x
    clc
    adc step
    sta x
    lda x+1
    adc step+1
    sta x+1
    lda x+2
    adc step+2
    sta x+2
    lda x+3
    adc step+3
    sta x+3
  //SEG354 [175] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc i
    bne !+
    inc i+1
  !:
  //SEG355 [176] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda i+1
    cmp #>main.wavelength
    bcc b1
    bne !+
    lda i
    cmp #<main.wavelength
    bcc b1
  !:
  //SEG356 sin16s_gen::@return
  //SEG357 [177] return 
    rts
}
//SEG358 sin16s
// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zeropage($15) x)
sin16s: {
    .label _6 = $15
    .label x = $15
    .label return = 6
    .label x1 = 8
    .label x2 = $b
    .label x3 = $b
    .label x3_6 = $11
    .label usinx = 6
    .label x4 = $b
    .label x5 = $11
    .label x5_128 = $11
    .label sinx = 6
    .label isUpper = $a
  //SEG359 [178] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+2
    cmp #<PI_u4f28>>$10
    bcc b4
    bne !+
    lda x+1
    cmp #>PI_u4f28
    bcc b4
    bne !+
    lda x
    cmp #<PI_u4f28
    bcc b4
  !:
  //SEG360 sin16s::@4
  //SEG361 [179] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0 -- vduz1=vduz1_minus_vduc1 
    lda x
    sec
    sbc #<PI_u4f28
    sta x
    lda x+1
    sbc #>PI_u4f28
    sta x+1
    lda x+2
    sbc #<PI_u4f28>>$10
    sta x+2
    lda x+3
    sbc #>PI_u4f28>>$10
    sta x+3
  //SEG362 [180] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  //SEG363 [180] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta isUpper
  //SEG364 [180] phi (dword) sin16s::x#4 = (dword) sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp b1
  //SEG365 [180] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  b4:
  //SEG366 [180] phi (byte) sin16s::isUpper#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s->sin16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta isUpper
  //SEG367 [180] phi (dword) sin16s::x#4 = (dword) sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
  //SEG368 sin16s::@1
  b1:
  //SEG369 [181] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc b2
    bne !+
    lda x+1
    cmp #>PI_HALF_u4f28
    bcc b2
    bne !+
    lda x
    cmp #<PI_HALF_u4f28
    bcc b2
  !:
  //SEG370 sin16s::@5
  //SEG371 [182] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc x
    sta x
    lda #>PI_u4f28
    sbc x+1
    sta x+1
    lda #<PI_u4f28>>$10
    sbc x+2
    sta x+2
    lda #>PI_u4f28>>$10
    sbc x+3
    sta x+3
  //SEG372 [183] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  //SEG373 [183] phi (dword) sin16s::x#6 = (dword) sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
  //SEG374 sin16s::@2
  b2:
  //SEG375 [184] (dword~) sin16s::$6 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3 -- vduz1=vduz1_rol_3 
    ldy #3
  !:
    asl _6
    rol _6+1
    rol _6+2
    rol _6+3
    dey
    bne !-
  //SEG376 [185] (word) sin16s::x1#0 ← > (dword~) sin16s::$6 -- vwuz1=_hi_vduz2 
    lda _6+2
    sta x1
    lda _6+3
    sta x1+1
  //SEG377 [186] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v1
    lda x1+1
    sta mulu16_sel.v1+1
  //SEG378 [187] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG379 [188] call mulu16_sel 
  //SEG380 [116] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  //SEG381 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG382 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
  //SEG383 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG384 [189] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
  //SEG385 sin16s::@8
  //SEG386 [190] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  //SEG387 [191] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  //SEG388 [192] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG389 [193] call mulu16_sel 
  //SEG390 [116] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  //SEG391 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG392 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#1 [phi:sin16s::@8->mulu16_sel#1] -- register_copy 
  //SEG393 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#1 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG394 [194] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
  //SEG395 sin16s::@9
  //SEG396 [195] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  //SEG397 [196] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  //SEG398 [197] call mulu16_sel 
  //SEG399 [116] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  //SEG400 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
  //SEG401 [116] phi (word) mulu16_sel::v2#10 = (dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 [phi:sin16s::@9->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta mulu16_sel.v2
    lda #>$10000/6
    sta mulu16_sel.v2+1
  //SEG402 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#2 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG403 [198] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17
  //SEG404 sin16s::@10
  //SEG405 [199] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14
  //SEG406 [200] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda x1
    sec
    sbc x3_6
    sta usinx
    lda x1+1
    sbc x3_6+1
    sta usinx+1
  //SEG407 [201] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  //SEG408 [202] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG409 [203] call mulu16_sel 
  //SEG410 [116] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  //SEG411 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG412 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#3 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
  //SEG413 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#3 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG414 [204] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17 -- vwuz1=vwuz2 
    lda mulu16_sel.return_17
    sta mulu16_sel.return
    lda mulu16_sel.return_17+1
    sta mulu16_sel.return+1
  //SEG415 sin16s::@11
  //SEG416 [205] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15
  //SEG417 [206] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  //SEG418 [207] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0 -- vwuz1=vwuz2 
    lda x1
    sta mulu16_sel.v2
    lda x1+1
    sta mulu16_sel.v2+1
  //SEG419 [208] call mulu16_sel 
  //SEG420 [116] phi from sin16s::@11 to mulu16_sel [phi:sin16s::@11->mulu16_sel]
  //SEG421 [116] phi (byte) mulu16_sel::select#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sin16s::@11->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG422 [116] phi (word) mulu16_sel::v2#10 = (word) mulu16_sel::v2#4 [phi:sin16s::@11->mulu16_sel#1] -- register_copy 
  //SEG423 [116] phi (word) mulu16_sel::v1#10 = (word) mulu16_sel::v1#4 [phi:sin16s::@11->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
  //SEG424 [209] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17
  //SEG425 sin16s::@12
  //SEG426 [210] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16
  //SEG427 [211] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4 -- vwuz1=vwuz1_ror_4 
    ldy #4
  !:
    lsr x5_128+1
    ror x5_128
    dey
    bne !-
  //SEG428 [212] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda usinx
    clc
    adc x5_128
    sta usinx
    lda usinx+1
    adc x5_128+1
    sta usinx+1
  //SEG429 [213] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@15 -- vbuz1_eq_0_then_la1 
    lda isUpper
    cmp #0
    beq b3
  //SEG430 sin16s::@6
  //SEG431 [214] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda sinx
    eor #$ff
    adc #0
    sta sinx
    lda sinx+1
    eor #$ff
    adc #0
    sta sinx+1
  //SEG432 [215] phi from sin16s::@15 sin16s::@6 to sin16s::@3 [phi:sin16s::@15/sin16s::@6->sin16s::@3]
  //SEG433 [215] phi (signed word) sin16s::return#1 = (signed word~) sin16s::return#5 [phi:sin16s::@15/sin16s::@6->sin16s::@3#0] -- register_copy 
  //SEG434 sin16s::@3
  b3:
  //SEG435 sin16s::@return
  //SEG436 [216] return 
    rts
  //SEG437 sin16s::@15
  //SEG438 [217] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
}
  print_hextab: .text "0123456789abcdef"

