@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print 
  to:main::@2
main::@2: scope:[main]  from main
  [6] phi()
  [7] call print 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  [8] (byte) main::i#2 ← phi( main::@2/(byte) 2 main::@3/(byte) main::i#1 )
  [9] (byte~) main::$7 ← (byte) main::i#2 << (byte) 1
  [10] (signed word*) print::p#2 ← (const signed word[]) VALS#0 + (byte~) main::$7
  [11] call print 
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [14] return 
  to:@return
print: scope:[print]  from main main::@1 main::@2
  [15] (signed word*) print::p#3 ← phi( main/(const signed word[]) VALS#0 main::@1/(signed word*) print::p#2 main::@2/(const signed word[]) VALS#0+(byte) 1*(const byte) SIZEOF_SIGNED_WORD )
  [15] (byte) idx#12 ← phi( main/(byte) 0 main::@1/(byte) idx#13 main::@2/(byte) idx#13 )
  [16] (byte~) print::$0 ← (byte) idx#12 << (byte) 1
  [17] *((const signed word*) SCREEN#0 + (byte~) print::$0) ← *((signed word*) print::p#3)
  [18] (byte) idx#13 ← ++ (byte) idx#12
  to:print::@return
print::@return: scope:[print]  from print
  [19] return 
  to:@return
