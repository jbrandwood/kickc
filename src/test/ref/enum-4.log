
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  *((const nomodify byte*) main::SCREEN) ← (const byte) main::state
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(const byte) main::ON = (byte) 1
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(const byte) main::state = (const byte) main::ON

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::state = (const byte) main::ON
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::ON
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test of simple enum - inline enum definitions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const ON = 1
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::ON -- _deref_pbuc1=vbuc2 
    lda #ON
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::ON [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test of simple enum - inline enum definitions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const ON = 1
    .label SCREEN = $400
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::ON -- _deref_pbuc1=vbuc2 
    lda #ON
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const byte) main::ON = (byte) 1
(const nomodify byte*) main::SCREEN = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Test of simple enum - inline enum definitions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const ON = 1
    .label SCREEN = $400
    // *SCREEN = state
    // [0] *((const nomodify byte*) main::SCREEN) ← (const byte) main::ON -- _deref_pbuc1=vbuc2 
    lda #ON
    sta SCREEN
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

