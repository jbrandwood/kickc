
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$0 ← (number) 0 != *((const byte*) msg1 + (byte) main::i#2)
  if((bool~) main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  *((const nomodify byte*) SCREEN + (byte) main::i#3) ← *((const byte*) msg1 + (byte) main::i#3)
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  (byte) main::i1#0 ← (byte) 0
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  (byte) main::i1#2 ← phi( main::@3/(byte) main::i1#0 main::@5/(byte) main::i1#1 )
  (bool~) main::$1 ← (number) 0 != *((const byte*) msg2 + (byte) main::i1#2)
  if((bool~) main::$1) goto main::@5
  to:main::@return
main::@5: scope:[main]  from main::@4
  (byte) main::i1#3 ← phi( main::@4/(byte) main::i1#2 )
  *((const nomodify byte*) SCREEN+(number) $28 + (byte) main::i1#3) ← *((const byte*) msg2 + (byte) main::i1#3)
  (byte) main::i1#1 ← ++ (byte) main::i1#3
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) main()
(bool~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(byte) main::i1#3
(const byte*) msg1[(number) $10]  = (byte*) "camelot"
(const byte*) msg2[(number) $10]  = { (byte) 'c', (byte) 'm', (byte) 'l' }

Adding number conversion cast (unumber) 0 in (bool~) main::$0 ← (number) 0 != *((const byte*) msg1 + (byte) main::i#2)
Adding number conversion cast (unumber) 0 in (bool~) main::$1 ← (number) 0 != *((const byte*) msg2 + (byte) main::i1#2)
Adding number conversion cast (unumber) $28 in *((const nomodify byte*) SCREEN+(number) $28 + (byte) main::i1#3) ← *((const byte*) msg2 + (byte) main::i1#3)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Alias main::i1#2 = main::i1#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [3] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2
Simple Condition (bool~) main::$1 [9] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte) main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [14] main::i1#4 ← main::i1#1
Coalesced [17] main::i#4 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [7] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@4/(byte) main::i1#1 )
  [8] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return 
  to:@return
main::@4: scope:[main]  from main::@3
  [10] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i1#2) ← *((const byte*) msg2 + (byte) main::i1#2)
  [11] (byte) main::i1#1 ← ++ (byte) main::i1#2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [12] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) msg1 + (byte) main::i#2)
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 202.0
(byte) main::i#2 168.33333333333331
(byte) main::i1
(byte) main::i1#1 202.0
(byte) main::i1#2 168.33333333333331

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test a short array initializer - the rest should be zero-filled
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    .label i1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i
    cmp msg1,y
    bne __b2
    // [7] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [7] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b3
    // main::@3
  __b3:
    // [8] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@4 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i1
    cmp msg2,y
    bne __b4
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
    // main::@4
  __b4:
    // [10] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i1#2) ← *((const byte*) msg2 + (byte) main::i1#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i1
    lda msg2,y
    sta SCREEN+$28,y
    // [11] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [7] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [7] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // [12] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) msg1 + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda msg1,y
    sta SCREEN,y
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg1: .text "camelot"
  .byte 0
  .fill 8, 0
  msg2: .byte 'c', 'm', 'l'
  .fill $d, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [8] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@4 [ main::i1#2 ] ( main:2 [ main::i1#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Statement [10] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i1#2) ← *((const byte*) msg2 + (byte) main::i1#2) [ main::i1#2 ] ( main:2 [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [12] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) msg1 + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@4 [ main::i1#2 ] ( main:2 [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i1#2) ← *((const byte*) msg2 + (byte) main::i1#2) [ main::i1#2 ] ( main:2 [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [12] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) msg1 + (byte) main::i#2) [ main::i#2 ] ( main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 370.33: zp[1]:2 [ main::i#2 main::i#1 ] 370.33: zp[1]:3 [ main::i1#2 main::i1#1 ] 
Uplift Scope [] 

Uplifting [main] best 618 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::i1#2 main::i1#1 ] 
Uplifting [] best 618 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a short array initializer - the rest should be zero-filled
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg1,x
    cmp #0
    bne __b2
    // [7] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [7] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // main::@3
  __b3:
    // [8] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@4 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg2,x
    cmp #0
    bne __b4
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
    // main::@4
  __b4:
    // [10] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i1#2) ← *((const byte*) msg2 + (byte) main::i1#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg2,x
    sta SCREEN+$28,x
    // [11] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [7] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // [12] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) msg1 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg1,x
    sta SCREEN,x
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg1: .text "camelot"
  .byte 0
  .fill 8, 0
  msg2: .byte 'c', 'm', 'l'
  .fill $d, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 202.0
(byte) main::i#2 reg byte x 168.33333333333331
(byte) main::i1
(byte) main::i1#1 reg byte x 202.0
(byte) main::i1#2 reg byte x 168.33333333333331
(const byte*) msg1[(number) $10]  = (byte*) "camelot"
(const byte*) msg2[(number) $10]  = { (byte) 'c', (byte) 'm', (byte) 'l' }

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::i1#2 main::i1#1 ]


FINAL ASSEMBLER
Score: 516

  // File Comments
// Test a short array initializer - the rest should be zero-filled
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for(char i=0;msg1[i];i++)
    // [6] if((byte) 0!=*((const byte*) msg1 + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg1,x
    cmp #0
    bne __b2
    // [7] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [7] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@3
  __b3:
    // for(char i=0;msg2[i];i++)
    // [8] if((byte) 0!=*((const byte*) msg2 + (byte) main::i1#2)) goto main::@4 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg2,x
    cmp #0
    bne __b4
    // main::@return
    // }
    // [9] return 
    rts
    // main::@4
  __b4:
    // (SCREEN+40)[i] = msg2[i]
    // [10] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i1#2) ← *((const byte*) msg2 + (byte) main::i1#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg2,x
    sta SCREEN+$28,x
    // for(char i=0;msg2[i];i++)
    // [11] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [7] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // SCREEN[i] = msg1[i]
    // [12] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← *((const byte*) msg1 + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg1,x
    sta SCREEN,x
    // for(char i=0;msg1[i];i++)
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg1: .text "camelot"
  .byte 0
  .fill 8, 0
  msg2: .byte 'c', 'm', 'l'
  .fill $d, 0

