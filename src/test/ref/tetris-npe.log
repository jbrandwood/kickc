Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) ypos#12 ← phi( _start::@1/(byte) ypos#11 )
  (byte) counter#13 ← phi( _start::@1/(byte) counter#12 )
  to:main::@1
main::@1: scope:[main]  from main main::@3 main::@4
  (byte) ypos#10 ← phi( main/(byte) ypos#12 main::@3/(byte) ypos#9 main::@4/(byte) ypos#0 )
  (byte) counter#11 ← phi( main/(byte) counter#13 main::@3/(byte) counter#0 main::@4/(byte) counter#1 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1 main::@2
  (byte) ypos#13 ← phi( main::@1/(byte) ypos#10 main::@2/(byte) ypos#13 )
  (byte) counter#10 ← phi( main::@1/(byte) counter#11 main::@2/(byte) counter#10 )
  (bool~) main::$0 ← *((const byte*) RASTER) != (number) $ff
  if((bool~) main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) ypos#9 ← phi( main::@2/(byte) ypos#13 )
  (byte) counter#6 ← phi( main::@2/(byte) counter#10 )
  (byte) counter#0 ← -- (byte) counter#6
  (bool~) main::$1 ← (byte) counter#0 == (number) 0
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) ypos#5 ← phi( main::@3/(byte) ypos#9 )
  (byte) counter#1 ← (const byte) RATE
  (byte) ypos#0 ← ++ (byte) ypos#5
  *((const byte*) SCREEN) ← (byte) ypos#0
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) ypos#6 ← phi( main::@1/(byte) ypos#10 )
  (byte) counter#7 ← phi( main::@1/(byte) counter#11 )
  (byte) counter#2 ← (byte) counter#7
  (byte) ypos#1 ← (byte) ypos#6
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) ypos#2 ← (byte) 0
  (byte) counter#3 ← (const byte) RATE
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) ypos#11 ← phi( _start::_init1/(byte) ypos#2 )
  (byte) counter#12 ← phi( _start::_init1/(byte) counter#3 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) ypos#7 ← phi( _start::@1/(byte) ypos#1 )
  (byte) counter#8 ← phi( _start::@1/(byte) counter#2 )
  (byte) counter#4 ← (byte) counter#8
  (byte) ypos#3 ← (byte) ypos#7
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) counter#9 ← phi( _start::@2/(byte) counter#4 )
  (byte) ypos#8 ← phi( _start::@2/(byte) ypos#3 )
  (byte) ypos#4 ← (byte) ypos#8
  (byte) counter#5 ← (byte) counter#9
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) RASTER = (byte*)(number) $d012
(const byte) RATE = (byte) $32
(const byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) counter
(byte) counter#0
(byte) counter#1
(byte) counter#10
(byte) counter#11
(byte) counter#12
(byte) counter#13
(byte) counter#2
(byte) counter#3
(byte) counter#4
(byte) counter#5
(byte) counter#6
(byte) counter#7
(byte) counter#8
(byte) counter#9
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) ypos
(byte) ypos#0
(byte) ypos#1
(byte) ypos#10
(byte) ypos#11
(byte) ypos#12
(byte) ypos#13
(byte) ypos#2
(byte) ypos#3
(byte) ypos#4
(byte) ypos#5
(byte) ypos#6
(byte) ypos#7
(byte) ypos#8
(byte) ypos#9

Adding number conversion cast (unumber) $ff in (bool~) main::$0 ← *((const byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) 0 in (bool~) main::$1 ← (byte) counter#0 == (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [9] (bool~) main::$2 ← (byte) counter#0 != (byte) 0 from [8] (bool~) main::$1 ← (byte) counter#0 == (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias counter#10 = counter#6 
Alias ypos#13 = ypos#9 ypos#5 
Alias counter#11 = counter#7 counter#2 
Alias ypos#1 = ypos#6 ypos#10 
Alias counter#12 = counter#3 
Alias ypos#11 = ypos#2 
Alias counter#4 = counter#8 counter#9 counter#5 
Alias ypos#3 = ypos#7 ypos#8 ypos#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) counter#13 (byte) counter#12
Identical Phi Values (byte) ypos#12 (byte) ypos#11
Identical Phi Values (byte) counter#10 (byte) counter#11
Identical Phi Values (byte) ypos#13 (byte) ypos#1
Identical Phi Values (byte) counter#4 (byte) counter#11
Identical Phi Values (byte) ypos#3 (byte) ypos#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [5] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2
Simple Condition (bool~) main::$2 [8] if((byte) counter#0!=(byte) 0) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) counter#1 = RATE
Constant (const byte) ypos#11 = 0
Constant (const byte) counter#12 = RATE
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [2] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) counter#1
Inlining constant with var siblings (const byte) ypos#11
Inlining constant with var siblings (const byte) counter#12
Constant inlined ypos#11 = (byte) 0
Constant inlined counter#1 = (const byte) RATE
Constant inlined counter#12 = (const byte) RATE
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [7] ypos#15 ← ypos#0
Coalesced [8] counter#14 ← counter#0
Coalesced (already) [9] ypos#14 ← ypos#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3 main::@4
  [1] (byte) ypos#1 ← phi( main/(byte) 0 main::@3/(byte) ypos#1 main::@4/(byte) ypos#0 )
  [1] (byte) counter#11 ← phi( main/(const byte) RATE main::@3/(byte) counter#0 main::@4/(const byte) RATE )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [2] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [3] (byte) counter#0 ← -- (byte) counter#11
  [4] if((byte) counter#0!=(byte) 0) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3
  [5] (byte) ypos#0 ← ++ (byte) ypos#1
  [6] *((const byte*) SCREEN) ← (byte) ypos#0
  to:main::@1


VARIABLE REGISTER WEIGHTS
(byte) counter
(byte) counter#0 151.5
(byte) counter#11 101.0
(void()) main()
(byte) ypos
(byte) ypos#0 16.5
(byte) ypos#1 56.0

Initial phi equivalence classes
[ counter#11 counter#0 ]
[ ypos#1 ypos#0 ]
Complete equivalence classes
[ counter#11 counter#0 ]
[ ypos#1 ypos#0 ]
Allocated zp[1]:2 [ counter#11 counter#0 ]
Allocated zp[1]:3 [ ypos#1 ypos#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// NullPointerException using current_movedown_rate in the main loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const RATE = $32
  .label RASTER = $d012
  .label SCREEN = $400
  .label counter = 2
  .label ypos = 3
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) ypos#1 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ypos
    // [1] phi (byte) counter#11 = (const byte) RATE [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #RATE
    sta.z counter
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi (byte) ypos#1 = (byte) ypos#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi (byte) counter#11 = (byte) counter#0 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [2] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] (byte) counter#0 ← -- (byte) counter#11 -- vbuz1=_dec_vbuz1 
    dec.z counter
    // [4] if((byte) counter#0!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z counter
    cmp #0
    bne __b1_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [5] (byte) ypos#0 ← ++ (byte) ypos#1 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // [6] *((const byte*) SCREEN) ← (byte) ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SCREEN
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi (byte) ypos#1 = (byte) ypos#0 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi (byte) counter#11 = (const byte) RATE [phi:main::@4->main::@1#1] -- vbuz1=vbuc1 
    lda #RATE
    sta.z counter
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2 [ counter#11 ypos#1 ] (  [ counter#11 ypos#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ counter#11 counter#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ ypos#1 ypos#0 ]
Statement [2] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2 [ counter#11 ypos#1 ] (  [ counter#11 ypos#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ counter#11 counter#0 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ ypos#1 ypos#0 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 252.5: zp[1]:2 [ counter#11 counter#0 ] 72.5: zp[1]:3 [ ypos#1 ypos#0 ] 
Uplift Scope [main] 

Uplifting [] best 14040 combination reg byte y [ counter#11 counter#0 ] reg byte x [ ypos#1 ypos#0 ] 
Uplifting [main] best 14040 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// NullPointerException using current_movedown_rate in the main loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const RATE = $32
  .label RASTER = $d012
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) ypos#1 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi (byte) counter#11 = (const byte) RATE [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #RATE
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi (byte) ypos#1 = (byte) ypos#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi (byte) counter#11 = (byte) counter#0 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [2] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] (byte) counter#0 ← -- (byte) counter#11 -- vbuyy=_dec_vbuyy 
    dey
    // [4] if((byte) counter#0!=(byte) 0) goto main::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [5] (byte) ypos#0 ← ++ (byte) ypos#1 -- vbuxx=_inc_vbuxx 
    inx
    // [6] *((const byte*) SCREEN) ← (byte) ypos#0 -- _deref_pbuc1=vbuxx 
    stx SCREEN
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi (byte) ypos#1 = (byte) ypos#0 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi (byte) counter#11 = (const byte) RATE [phi:main::@4->main::@1#1] -- vbuyy=vbuc1 
    ldy #RATE
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1 with __b2
Replacing label __b1_from___b3 with __b2
Replacing label __b1 with __b2
Removing instruction __b1_from___b3:
Removing instruction __b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte*) RASTER = (byte*) 53266
(const byte) RATE = (byte) $32
(const byte*) SCREEN = (byte*) 1024
(byte) counter
(byte) counter#0 reg byte y 151.5
(byte) counter#11 reg byte y 101.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(byte) ypos
(byte) ypos#0 reg byte x 16.5
(byte) ypos#1 reg byte x 56.0

reg byte y [ counter#11 counter#0 ]
reg byte x [ ypos#1 ypos#0 ]


FINAL ASSEMBLER
Score: 10110

  // File Comments
// NullPointerException using current_movedown_rate in the main loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const RATE = $32
  .label RASTER = $d012
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) ypos#1 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi (byte) counter#11 = (const byte) RATE [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #RATE
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi (byte) ypos#1 = (byte) ypos#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi (byte) counter#11 = (byte) counter#0 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
    // main::@2
  __b2:
    // while(*RASTER!=$ff)
    // [2] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // main::@3
    // if(--counter==0)
    // [3] (byte) counter#0 ← -- (byte) counter#11 -- vbuyy=_dec_vbuyy 
    dey
    // [4] if((byte) counter#0!=(byte) 0) goto main::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // main::@4
    // ypos++;
    // [5] (byte) ypos#0 ← ++ (byte) ypos#1 -- vbuxx=_inc_vbuxx 
    inx
    // *SCREEN = ypos
    // [6] *((const byte*) SCREEN) ← (byte) ypos#0 -- _deref_pbuc1=vbuxx 
    stx SCREEN
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [1] phi (byte) ypos#1 = (byte) ypos#0 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi (byte) counter#11 = (const byte) RATE [phi:main::@4->main::@1#1] -- vbuyy=vbuc1 
    ldy #RATE
    jmp __b2
}
  // File Data

