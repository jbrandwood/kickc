Setting inferred __stackcall on procedure affected by address-of __stackcall char fn1() caused by statement main::$0 = call set_border(&fn1)
Setting inferred __stackcall on procedure affected by address-of __stackcall char fn2() caused by statement main::$1 = call set_border(&fn2)
Calling convention STACK_CALL adding prepare/execute/finalize for set_border::$0 = call *set_border::fn 
Calling convention STACK_CALL adding stack return stackidx(char,fn1::OFFSET_STACK_RETURN_0) = fn1::return
Calling convention STACK_CALL adding stack return stackidx(char,fn2::OFFSET_STACK_RETURN_0) = fn2::return
Calling convention STACK_CALL adding stack pull set_border::$0 = stackpull(char)

CONTROL FLOW GRAPH SSA

__stackcall char fn1()
fn1: scope:[fn1]  from
  fn1::return#0 = *RASTER
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  fn1::return#2 = phi( fn1/fn1::return#0 )
  fn1::return#1 = fn1::return#2
  stackidx(char,fn1::OFFSET_STACK_RETURN_0) = fn1::return#1
  return 
  to:@return

__stackcall char fn2()
fn2: scope:[fn2]  from
  fn2::return#0 = 0
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  fn2::return#2 = phi( fn2/fn2::return#0 )
  fn2::return#1 = fn2::return#2
  stackidx(char,fn2::OFFSET_STACK_RETURN_0) = fn2::return#1
  return 
  to:@return

void set_border(char (*fn)())
set_border: scope:[set_border]  from main::@1 main::@2
  set_border::fn#2 = phi( main::@1/set_border::fn#0, main::@2/set_border::fn#1 )
  sideeffect stackpushbytes(1)
  callexecute *set_border::fn#2 
  set_border::$0 = stackpull(char)
  to:set_border::@1
set_border::@1: scope:[set_border]  from set_border
  *BORDER = set_border::$0
  to:set_border::@return
set_border::@return: scope:[set_border]  from set_border::@1
  return 
  to:@return

void main()
main: scope:[main]  from __start
  to:main::@1
main::@1: scope:[main]  from main main::@3
  set_border::fn#0 = &fn1
  call set_border
  to:main::@2
main::@2: scope:[main]  from main::@1
  set_border::fn#1 = &fn2
  call set_border
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@1
main::@return: scope:[main]  from
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const BORDER = (char *)$d020
__constant char * const RASTER = (char *)$d012
__constant unsigned int STACK_BASE = $103
void __start()
__stackcall char fn1()
__constant char fn1::OFFSET_STACK_RETURN_0 = 0
char fn1::return
char fn1::return#0
char fn1::return#1
char fn1::return#2
__stackcall char fn2()
__constant char fn2::OFFSET_STACK_RETURN_0 = 0
char fn2::return
char fn2::return#0
char fn2::return#1
char fn2::return#2
void main()
void set_border(char (*fn)())
char set_border::$0
char (*set_border::fn)()
char (*set_border::fn#0)()
char (*set_border::fn#1)()
char (*set_border::fn#2)()

Adding number conversion cast (unumber) 0 in fn2::return#0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast fn2::return#0 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 53266
Simplifying constant pointer cast (char *) 53280
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias fn1::return#0 = fn1::return#2 fn1::return#1 
Alias fn2::return#0 = fn2::return#2 fn2::return#1 
Successful SSA optimization Pass2AliasElimination
Constant fn2::return#0 = 0
Constant set_border::fn#0 = &fn1
Constant set_border::fn#1 = &fn2
Successful SSA optimization Pass2ConstantIdentification
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings set_border::fn#0
Inlining constant with var siblings set_border::fn#1
Constant inlined set_border::fn#0 = &fn1
Constant inlined set_border::fn#1 = &fn2
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of fn2
CALL GRAPH
Calls in [main] to set_border:2 set_border:4 
Calls in [set_border] to null:14 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of fn2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] phi()
  [2] call set_border
  to:main::@2
main::@2: scope:[main]  from main::@1
  [3] phi()
  [4] call set_border
  to:main::@1

__stackcall char fn2()
fn2: scope:[fn2]  from
  [5] phi()
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [6] stackidx(char,fn2::OFFSET_STACK_RETURN_0) = fn2::return#0
  [7] return 
  to:@return

__stackcall char fn1()
fn1: scope:[fn1]  from
  [8] fn1::return#0 = *RASTER
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [9] stackidx(char,fn1::OFFSET_STACK_RETURN_0) = fn1::return#0
  [10] return 
  to:@return

void set_border(char (*fn)())
set_border: scope:[set_border]  from main::@1 main::@2
  [11] set_border::fn#2 = phi( main::@1/&fn1, main::@2/&fn2 )
  sideeffect stackpushbytes(1)
  [13] callexecute *set_border::fn#2 
  [14] set_border::$0 = stackpull(char)
  to:set_border::@1
set_border::@1: scope:[set_border]  from set_border
  [15] *BORDER = set_border::$0
  to:set_border::@return
set_border::@return: scope:[set_border]  from set_border::@1
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
__stackcall char fn1()
char fn1::return
char fn1::return#0 // 4.0
__stackcall char fn2()
char fn2::return
void main()
void set_border(char (*fn)())
char set_border::$0 // 202.0
char (*set_border::fn)()
char (*set_border::fn#2)()

Initial phi equivalence classes
[ set_border::fn#2 ]
Added variable fn1::return#0 to live range equivalence class [ fn1::return#0 ]
Added variable set_border::$0 to live range equivalence class [ set_border::$0 ]
Complete equivalence classes
[ set_border::fn#2 ]
[ fn1::return#0 ]
[ set_border::$0 ]
Allocated zp[1]:2 [ set_border::$0 ]
Allocated zp[1]:3 [ fn1::return#0 ]
Allocated zp[2]:4 [ set_border::fn#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] stackidx(char,fn2::OFFSET_STACK_RETURN_0) = fn2::return#0 [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x 
Statement [9] stackidx(char,fn1::OFFSET_STACK_RETURN_0) = fn1::return#0 [ ] (  [ ] { }  ) always clobbers reg byte x 
Statement [13] callexecute *set_border::fn#2  [ ] ( set_border:2 [ ] { }  set_border:4 [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [14] set_border::$0 = stackpull(char) [ set_border::$0 ] ( set_border:2 [ set_border::$0 ] { }  set_border:4 [ set_border::$0 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:4 [ set_border::fn#2 ] : zp[2]:4 , 
Potential registers zp[1]:3 [ fn1::return#0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ set_border::$0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [set_border] 202: zp[1]:2 [ set_border::$0 ] 0: zp[2]:4 [ set_border::fn#2 ] 
Uplift Scope [fn1] 4: zp[1]:3 [ fn1::return#0 ] 
Uplift Scope [fn2] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [set_border] best 245 combination reg byte a [ set_border::$0 ] zp[2]:4 [ set_border::fn#2 ] 
Uplifting [fn1] best 239 combination reg byte a [ fn1::return#0 ] 
Uplifting [fn2] best 239 combination 
Uplifting [main] best 239 combination 
Uplifting [] best 239 combination 
Allocated (was zp[2]:4) zp[2]:2 [ set_border::fn#2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Calling a function pointer with return value
// Reference the function without &, Call it without *
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-return-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const STACK_BASE = $103
  .label RASTER = $d012
  .label BORDER = $d020
.segment Code
  // main
main: {
    // [1] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  __b1_from_main:
  __b1_from___b2:
    jmp __b1
    // main::@1
  __b1:
    // [2] call set_border
  // Create pointer to function without &
    // [11] phi from main::@1 to set_border [phi:main::@1->set_border]
  set_border_from___b1:
    // [11] phi set_border::fn#2 = &fn1 [phi:main::@1->set_border#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z set_border.fn
    lda #>fn1
    sta.z set_border.fn+1
    jsr set_border
    // [3] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [4] call set_border
    // [11] phi from main::@2 to set_border [phi:main::@2->set_border]
  set_border_from___b2:
    // [11] phi set_border::fn#2 = &fn2 [phi:main::@2->set_border#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z set_border.fn
    lda #>fn2
    sta.z set_border.fn+1
    jsr set_border
    jmp __b1_from___b2
}
  // fn2
fn2: {
    .const OFFSET_STACK_RETURN_0 = 0
    .const return = 0
    jmp __breturn
    // fn2::@return
  __breturn:
    // [6] stackidx(char,fn2::OFFSET_STACK_RETURN_0) = fn2::return#0 -- _stackidxbyte_vbuc1=vbuc2 
    lda #return
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    // [7] return 
    rts
}
  // fn1
fn1: {
    .const OFFSET_STACK_RETURN_0 = 0
    // [8] fn1::return#0 = *RASTER -- vbuaa=_deref_pbuc1 
    lda RASTER
    jmp __breturn
    // fn1::@return
  __breturn:
    // [9] stackidx(char,fn1::OFFSET_STACK_RETURN_0) = fn1::return#0 -- _stackidxbyte_vbuc1=vbuaa 
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    // [10] return 
    rts
}
  // set_border
// void set_border(__zp(2) char (*fn)())
set_border: {
    .label fn = 2
    // sideeffect stackpushbytes(1) -- _stackpushbyte_1 
    pha
    // [13] callexecute *set_border::fn#2  -- call__deref_pprz1 
    jsr icall1
    // [14] set_border::$0 = stackpull(char) -- vbuaa=_stackpullbyte_ 
    pla
    jmp __b1
    // set_border::@1
  __b1:
    // [15] *BORDER = set_border::$0 -- _deref_pbuc1=vbuaa 
    // Call pointer to a function without *
    sta BORDER
    jmp __breturn
    // set_border::@return
  __breturn:
    // [16] return 
    rts
    // Outside Flow
  icall1:
    jmp (fn)
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction set_border_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction set_border_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const BORDER = (char *) 53280
__constant char * const RASTER = (char *) 53266
__constant unsigned int STACK_BASE = $103
__stackcall char fn1()
__constant char fn1::OFFSET_STACK_RETURN_0 = 0
char fn1::return
char fn1::return#0 // reg byte a 4.0
__stackcall char fn2()
__constant char fn2::OFFSET_STACK_RETURN_0 = 0
char fn2::return
__constant char fn2::return#0 = 0 // return
void main()
void set_border(char (*fn)())
char set_border::$0 // reg byte a 202.0
char (*set_border::fn)()
char (*set_border::fn#2)() // fn zp[2]:2

zp[2]:2 [ set_border::fn#2 ]
reg byte a [ fn1::return#0 ]
reg byte a [ set_border::$0 ]


FINAL ASSEMBLER
Score: 140

  // File Comments
// Calling a function pointer with return value
// Reference the function without &, Call it without *
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-return-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const STACK_BASE = $103
  .label RASTER = $d012
  .label BORDER = $d020
.segment Code
  // main
main: {
    // [1] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
    // main::@1
  __b1:
    // set_border(fn1)
    // [2] call set_border
  // Create pointer to function without &
    // [11] phi from main::@1 to set_border [phi:main::@1->set_border]
    // [11] phi set_border::fn#2 = &fn1 [phi:main::@1->set_border#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z set_border.fn
    lda #>fn1
    sta.z set_border.fn+1
    jsr set_border
    // [3] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // set_border(fn2)
    // [4] call set_border
    // [11] phi from main::@2 to set_border [phi:main::@2->set_border]
    // [11] phi set_border::fn#2 = &fn2 [phi:main::@2->set_border#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z set_border.fn
    lda #>fn2
    sta.z set_border.fn+1
    jsr set_border
    jmp __b1
}
  // fn2
fn2: {
    .const OFFSET_STACK_RETURN_0 = 0
    .const return = 0
    // fn2::@return
    // }
    // [6] stackidx(char,fn2::OFFSET_STACK_RETURN_0) = fn2::return#0 -- _stackidxbyte_vbuc1=vbuc2 
    lda #return
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    // [7] return 
    rts
}
  // fn1
fn1: {
    .const OFFSET_STACK_RETURN_0 = 0
    // return *RASTER;
    // [8] fn1::return#0 = *RASTER -- vbuaa=_deref_pbuc1 
    lda RASTER
    // fn1::@return
    // }
    // [9] stackidx(char,fn1::OFFSET_STACK_RETURN_0) = fn1::return#0 -- _stackidxbyte_vbuc1=vbuaa 
    tsx
    sta STACK_BASE+OFFSET_STACK_RETURN_0,x
    // [10] return 
    rts
}
  // set_border
// void set_border(__zp(2) char (*fn)())
set_border: {
    .label fn = 2
    // fn()
    // sideeffect stackpushbytes(1) -- _stackpushbyte_1 
    pha
    // [13] callexecute *set_border::fn#2  -- call__deref_pprz1 
    jsr icall1
    // [14] set_border::$0 = stackpull(char) -- vbuaa=_stackpullbyte_ 
    pla
    // set_border::@1
    // *BORDER = fn()
    // [15] *BORDER = set_border::$0 -- _deref_pbuc1=vbuaa 
    // Call pointer to a function without *
    sta BORDER
    // set_border::@return
    // }
    // [16] return 
    rts
    // Outside Flow
  icall1:
    jmp (fn)
}
  // File Data

