
(void()) main()
main: scope:[main]  from
  [0] *((const word*) PRIMES+(byte) 1*(const byte) SIZEOF_WORD) ← (byte) 2
  [1] *((const word*) PRIMES+(byte) 2*(const byte) SIZEOF_WORD) ← (byte) 3
  to:main::@1
main::@1: scope:[main]  from main main::@11
  [2] (byte*) print_char_cursor#34 ← phi( main/(const byte*) print_screen#0 main::@11/(byte*) print_char_cursor#17 )
  [2] (word) prime_idx#17 ← phi( main/(byte) 2 main::@11/(word) prime_idx#1 )
  [2] (word) potential#15 ← phi( main/(byte) 3 main::@11/(word) potential#11 )
  [2] (byte) test_last#13 ← phi( main/(byte) 2 main::@11/(byte) test_last#19 )
  [3] (byte~) main::$12 ← (byte) test_last#13 << (byte) 1
  [4] (byte) main::p#0 ← (byte)*((const word*) PRIMES + (byte~) main::$12)
  [5] (byte) mul8u::a#1 ← (byte) main::p#0
  [6] (byte) mul8u::b#0 ← (byte) main::p#0
  [7] call mul8u 
  [8] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:main::@8
main::@8: scope:[main]  from main::@1
  [9] (word~) main::$0 ← (word) mul8u::return#2
  [10] if((word) potential#15<=(word~) main::$0) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@8
  [11] (byte) test_last#1 ← ++ (byte) test_last#13
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [12] (byte) test_last#19 ← phi( main::@7/(byte) test_last#1 main::@8/(byte) test_last#13 )
  [13] (word) potential#1 ← (word) potential#15 + (byte) 2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [14] (word) potential#10 ← phi( main::@2/(word) potential#1 main::@4/(word) potential#11 )
  [14] (byte) test_idx#7 ← phi( main::@2/(byte) 2 main::@4/(byte) test_idx#10 )
  [15] (byte~) main::$13 ← (byte) test_idx#7 << (byte) 1
  [16] (word) div16u8u::dividend#0 ← (word) potential#10
  [17] (byte) div16u8u::divisor#0 ← (byte)*((const word*) PRIMES + (byte~) main::$13)
  [18] call div16u8u 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [19] (byte) test_idx#1 ← ++ (byte) test_idx#7
  [20] if((byte) rem8u#0!=(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [21] (word) potential#2 ← (word) potential#10 + (byte) 2
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@9
  [22] (word) potential#11 ← phi( main::@5/(word) potential#2 main::@9/(word) potential#10 )
  [22] (byte) test_idx#10 ← phi( main::@5/(byte) 2 main::@9/(byte) test_idx#1 )
  [23] if((byte) test_idx#10<=(byte) test_last#19) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [24] (word) prime_idx#1 ← ++ (word) prime_idx#17
  [25] (word~) main::$14 ← (word) prime_idx#1 << (byte) 1
  [26] (word*~) main::$15 ← (const word*) PRIMES + (word~) main::$14
  [27] *((word*~) main::$15) ← (word) potential#11
  [28] (word) print_uint_decimal::w#0 ← (word) potential#11
  [29] call print_uint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  [30] phi()
  [31] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [32] if((word) prime_idx#1<(word) $3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  [33] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from main::@1
  [34] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [35] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [35] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [35] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [36] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [37] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [38] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [39] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [40] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [41] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [42] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [43] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(word()) div16u8u((word) div16u8u::dividend , (byte) div16u8u::divisor)
div16u8u: scope:[div16u8u]  from main::@3
  [44] (byte) divr8u::dividend#1 ← > (word) div16u8u::dividend#0
  [45] (byte) divr8u::divisor#0 ← (byte) div16u8u::divisor#0
  [46] call divr8u 
  to:div16u8u::@1
div16u8u::@1: scope:[div16u8u]  from div16u8u
  [47] (byte) divr8u::dividend#2 ← < (word) div16u8u::dividend#0
  [48] (byte) divr8u::divisor#1 ← (byte) div16u8u::divisor#0
  [49] (byte) divr8u::rem#4 ← (byte) rem8u#0
  [50] call divr8u 
  to:div16u8u::@return
div16u8u::@return: scope:[div16u8u]  from div16u8u::@1
  [51] return 
  to:@return

(void()) print_uint_decimal((word) print_uint_decimal::w)
print_uint_decimal: scope:[print_uint_decimal]  from main::@6
  [52] (word) utoa::value#1 ← (word) print_uint_decimal::w#0
  [53] call utoa 
  to:print_uint_decimal::@1
print_uint_decimal::@1: scope:[print_uint_decimal]  from print_uint_decimal
  [54] phi()
  [55] call print_str 
  to:print_uint_decimal::@return
print_uint_decimal::@return: scope:[print_uint_decimal]  from print_uint_decimal::@1
  [56] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 print_str::@2
  [57] (byte) print_char::ch#2 ← phi( main::@10/(byte) ' ' print_str::@2/(byte) print_char::ch#0 )
  [58] *((byte*) print_char_cursor#1) ← (byte) print_char::ch#2
  [59] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [60] return 
  to:@return

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div16u8u div16u8u::@1
  [61] (byte) divr8u::divisor#6 ← phi( div16u8u/(byte) divr8u::divisor#0 div16u8u::@1/(byte) divr8u::divisor#1 )
  [61] (byte) divr8u::dividend#5 ← phi( div16u8u/(byte) divr8u::dividend#1 div16u8u::@1/(byte) divr8u::dividend#2 )
  [61] (byte) divr8u::rem#10 ← phi( div16u8u/(byte) 0 div16u8u::@1/(byte) divr8u::rem#4 )
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [62] (byte) divr8u::i#2 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::i#1 )
  [62] (byte) divr8u::quotient#3 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::return#0 )
  [62] (byte) divr8u::dividend#3 ← phi( divr8u/(byte) divr8u::dividend#5 divr8u::@3/(byte) divr8u::dividend#0 )
  [62] (byte) divr8u::rem#5 ← phi( divr8u/(byte) divr8u::rem#10 divr8u::@3/(byte) divr8u::rem#11 )
  [63] (byte) divr8u::rem#0 ← (byte) divr8u::rem#5 << (byte) 1
  [64] (byte~) divr8u::$1 ← (byte) divr8u::dividend#3 & (byte) $80
  [65] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [66] (byte) divr8u::rem#1 ← (byte) divr8u::rem#0 | (byte) 1
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [67] (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#0 divr8u::@4/(byte) divr8u::rem#1 )
  [68] (byte) divr8u::dividend#0 ← (byte) divr8u::dividend#3 << (byte) 1
  [69] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1
  [70] if((byte) divr8u::rem#6<(byte) divr8u::divisor#6) goto divr8u::@3
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [71] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1
  [72] (byte) divr8u::rem#2 ← (byte) divr8u::rem#6 - (byte) divr8u::divisor#6
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [73] (byte) divr8u::return#0 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  [73] (byte) divr8u::rem#11 ← phi( divr8u::@2/(byte) divr8u::rem#6 divr8u::@5/(byte) divr8u::rem#2 )
  [74] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  [75] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [76] (byte) rem8u#0 ← (byte) divr8u::rem#11
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [77] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_uint_decimal
  [78] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [79] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(const byte*) decimal_digits )
  [79] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [79] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [79] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [80] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [81] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [82] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [83] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [84] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [85] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [86] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [87] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [88] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [89] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [90] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [90] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [90] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [91] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [92] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [93] (word) utoa_append::value#0 ← (word) utoa::value#2
  [94] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [95] call utoa_append 
  [96] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [97] (word) utoa::value#0 ← (word) utoa_append::return#0
  [98] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_uint_decimal::@1
  [99] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [100] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#34 print_str::@3/(byte*) print_char_cursor#17 )
  [100] (byte*) print_str::str#2 ← phi( print_str/(const byte*) decimal_digits print_str::@3/(byte*) print_str::str#0 )
  [101] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [102] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [103] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [104] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [105] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [106] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [107] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [107] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [108] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [109] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [110] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [111] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [112] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1
