__constant struct MOS6526_CIA * const CIA2 = (struct MOS6526_CIA *) 56576
__constant unsigned long * const CIA2_TIMER_AB = (unsigned long *) 56580
__constant const char CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
__constant const char CIA_TIMER_CONTROL_START = 1
__constant const unsigned int CLOCKS_PER_FRAME = $4cc8
__constant const unsigned long CLOCKS_PER_INIT = $12
__constant const unsigned long CLOCKS_PER_SEC = (unsigned long)CLOCKS_PER_FRAME*FRAMES_PER_SEC
__constant const unsigned int COUNT = $4000
__constant char * const D018 = (char *) 53272
__constant char DIGITS[] = "0123456789abcdef"z
__constant const char FRAMES_PER_SEC = $3c
__constant char OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
__constant char OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant unsigned long RADIX_DECIMAL_VALUES_LONG[] = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
__constant char * const SCREEN = (char *) 1024
__constant const char SQRT_COUNT = $80
unsigned long clock()
unsigned long clock::return
unsigned long clock::return#0 // return zp[4]:6 3.25
unsigned long clock::return#2 // return zp[4]:6 4.0
unsigned long clock::ticks
void clock_start()
__constant char decimal_digits[6] = { fill( 6, 0) }
__constant char decimal_digits_long[$b] = { fill( $b, 0) }
unsigned long div32u16u(unsigned long dividend , unsigned int divisor)
unsigned long div32u16u::dividend
unsigned long div32u16u::dividend#0 // dividend zp[4]:6 4.800000000000001
unsigned int div32u16u::divisor
__constant unsigned int div32u16u::divisor#0 = (unsigned int)CLOCKS_PER_SEC/$64 // divisor
unsigned long div32u16u::quotient
unsigned int div32u16u::quotient_hi
unsigned int div32u16u::quotient_hi#0 // quotient_hi zp[2]:4 3.6666666666666665
unsigned int div32u16u::quotient_lo
unsigned int div32u16u::quotient_lo#0 // quotient_lo zp[2]:21 22.0
unsigned long div32u16u::return
unsigned long div32u16u::return#0 // return zp[4]:31 4.333333333333333
unsigned long div32u16u::return#2 // return zp[4]:31 4.0
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 2002.0
char divr16u::$2 // reg byte a 2002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:2 250.25
unsigned int divr16u::dividend#1 // dividend zp[2]:2 22.0
unsigned int divr16u::dividend#2 // dividend zp[2]:2 11.0
unsigned int divr16u::dividend#3 // dividend zp[2]:2 443.42857142857144
unsigned int divr16u::dividend#5 // dividend zp[2]:2 123.0
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 1501.5
char divr16u::i#2 // reg byte x 154.0
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:21 1501.5
unsigned int divr16u::quotient#2 // quotient zp[2]:21 1001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:21 250.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:10 750.75
unsigned int divr16u::rem#1 // rem zp[2]:10 2002.0
unsigned int divr16u::rem#10 // rem zp[2]:10 112.0
unsigned int divr16u::rem#11 // rem zp[2]:10 1034.6666666666667
unsigned int divr16u::rem#2 // rem zp[2]:10 2002.0
unsigned int divr16u::rem#4 // rem zp[2]:10 22.0
unsigned int divr16u::rem#5 // rem zp[2]:10 2103.0
unsigned int divr16u::rem#6 // rem zp[2]:10 1001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:21 432.1428571428571
unsigned int divr16u::return#2 // return zp[2]:21 22.0
unsigned int divr16u::return#3 // return zp[2]:21 22.0
void main()
unsigned long main::$10 // zp[4]:6 4.0
unsigned long main::$12 // zp[4]:31 2.0
char *main::$33 // zp[2]:21 22.0
unsigned long main::cyclecount
unsigned long main::cyclecount#0 // cyclecount zp[4]:6 0.5
unsigned int main::i
unsigned int main::i#10 // i_1 zp[2]:27 5.5
unsigned int main::i#12 // i zp[2]:16 24.6
unsigned int main::i#2 // i zp[2]:16 11.0
unsigned int main::i#3 // i_1 zp[2]:27 22.0
unsigned int main::j
unsigned int main::j#0 // j zp[2]:23 16.5
unsigned int main::j#1 // j zp[2]:23 202.0
unsigned int main::j#2 // j zp[2]:23 78.5
char *main::s
char *main::s#0 // s zp[2]:25 22.0
char *main::s#1 // s zp[2]:25 101.0
char *main::s#2 // s zp[2]:25 104.66666666666666
unsigned int main::sec100s
unsigned int main::sec100s#0 // sec100s zp[2]:27 1.3333333333333333
char *main::sieve_i
char *main::sieve_i#1 // sieve_i zp[2]:29 22.0
char *main::sieve_i#2 // sieve_i zp[2]:29 3.0
__constant char main::str[$25] = "Sieve benchmark - calculating primes"
__constant char main::str1[$f] = "between 2 and "
__constant char main::str2[$16] = "100ths seconds used: "
__constant char main::str3[$a] = " cycles: "
__constant char main::str4[4] = "..."
char *main::toD0181_gfx
__constant char *main::toD0181_gfx#0 = (char *) 6144 // toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)SCREEN&$3fff*4|byte1 (unsigned int)main::toD0181_gfx#0/4&$f // toD0181_return
char *main::toD0181_screen
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 125.125
char *memset::dst
char *memset::dst#1 // dst zp[2]:2 2002.0
char *memset::dst#2 // dst zp[2]:2 1368.3333333333335
char *memset::dst#4 // dst zp[2]:2 202.0
char *memset::end
char *memset::end#0 // end zp[2]:10 183.66666666666669
unsigned int memset::num
unsigned int memset::num#2 // num zp[2]:10 101.0
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:2
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 200002.0
char print_char::ch#2 // reg byte a 1100002.0
char *print_char_cursor
char *print_char_cursor#1 // print_char_cursor zp[2]:16 63670.36363636364
char *print_char_cursor#39 // print_char_cursor_1 zp[2]:19 220002.6
char *print_char_cursor#61 // print_char_cursor zp[2]:16 29.0
char *print_char_cursor#65 // print_char_cursor_1 zp[2]:19 7.4
char *print_char_cursor#69 // print_char_cursor zp[2]:16 1121.0
char *print_char_cursor#79 // print_char_cursor_1 zp[2]:19 16.5
char *print_char_cursor#89 // print_char_cursor zp[2]:16 4.0
char *print_char_cursor#90 // print_char_cursor zp[2]:16 4.0
char *print_char_cursor#91 // print_char_cursor zp[2]:16 4.0
char *print_char_cursor#96 // print_char_cursor zp[2]:16 200002.0
char *print_char_cursor#97 // print_char_cursor zp[2]:16 22.0
void print_cls()
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:19 6.804347826086957
char *print_line_cursor#12 // print_line_cursor zp[2]:19 213.0
char *print_line_cursor#23 // print_line_cursor zp[2]:19 15.0
void print_ln()
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:10 100001.0
char *print_str::str#10 // str zp[2]:10 100251.25
char *print_str::str#11 // str zp[2]:10 1001.0
void print_uint_decimal(unsigned int w)
unsigned int print_uint_decimal::w
unsigned int print_uint_decimal::w#1 // w zp[2]:27 4.0
unsigned int print_uint_decimal::w#2 // w zp[2]:27 11.0
unsigned int print_uint_decimal::w#3 // w zp[2]:27 114.0
void print_ulong_decimal(unsigned long w)
unsigned long print_ulong_decimal::w
unsigned long print_ulong_decimal::w#0 // w zp[4]:6 13.0
unsigned int rem16u
unsigned int rem16u#0 // rem16u zp[2]:10 18.666666666666664
__constant char *sieve = (char *) 4096
void ultoa(unsigned long value , char *buffer , char radix)
char ultoa::$10 // reg byte a 2002.0
char ultoa::$11 // reg byte a 202.0
char *ultoa::buffer
char *ultoa::buffer#11 // buffer zp[2]:2 300.42857142857144
char *ultoa::buffer#14 // buffer zp[2]:2 1501.5
char *ultoa::buffer#4 // buffer zp[2]:2 202.0
char *ultoa::buffer#5 // buffer zp[2]:2 2002.0
char ultoa::digit
char ultoa::digit#1 // digit zp[1]:18 2002.0
char ultoa::digit#2 // digit zp[1]:18 286.0
unsigned long ultoa::digit_value
unsigned long ultoa::digit_value#0 // digit_value zp[4]:12 600.5999999999999
unsigned long *ultoa::digit_values
char ultoa::max_digits
__constant char ultoa::max_digits#1 = $a // max_digits
char ultoa::radix
char ultoa::started
char ultoa::started#2 // reg byte x 500.5
char ultoa::started#4 // reg byte x 1001.0
unsigned long ultoa::value
unsigned long ultoa::value#0 // value zp[4]:6 56.0
unsigned long ultoa::value#1 // value zp[4]:6 1001.0
unsigned long ultoa::value#2 // value zp[4]:6 586.4285714285714
unsigned long ultoa::value#6 // value zp[4]:6 1501.5
unsigned long ultoa_append(char *buffer , unsigned long value , unsigned long sub)
char *ultoa_append::buffer
char *ultoa_append::buffer#0 // buffer zp[2]:2 1375.25
char ultoa_append::digit
char ultoa_append::digit#1 // reg byte x 1000001.0
char ultoa_append::digit#2 // reg byte x 1005001.5
unsigned long ultoa_append::return
unsigned long ultoa_append::return#0 // return zp[4]:6 2002.0
unsigned long ultoa_append::sub
unsigned long ultoa_append::sub#0 // sub zp[4]:12 333500.5
unsigned long ultoa_append::value
unsigned long ultoa_append::value#0 // value zp[4]:6 3667.333333333333
unsigned long ultoa_append::value#1 // value zp[4]:6 2000002.0
unsigned long ultoa_append::value#2 // value zp[4]:6 501834.16666666674
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 200002.0
char utoa::$11 // reg byte x 2002.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:10 28714.714285714286
char *utoa::buffer#14 // buffer zp[2]:10 150001.5
char *utoa::buffer#4 // buffer zp[2]:10 2002.0
char *utoa::buffer#5 // buffer zp[2]:10 200002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:18 200002.0
char utoa::digit#2 // digit zp[1]:18 28571.714285714286
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:4 60000.600000000006
unsigned int *utoa::digit_values
char utoa::max_digits
__constant char utoa::max_digits#1 = 5 // max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte x 50000.5
char utoa::started#4 // reg byte x 100001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:2 551.0
unsigned int utoa::value#1 // value zp[2]:2 100001.0
unsigned int utoa::value#2 // value zp[2]:2 57286.42857142857
unsigned int utoa::value#6 // value zp[2]:2 150001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:10 137500.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1.000000001E9
char utoa_append::digit#2 // reg byte x 1.0005000015E9
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:2 200002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:4 3.333500005E8
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:2 366667.3333333334
unsigned int utoa_append::value#1 // value zp[2]:2 2.000000002E9
unsigned int utoa_append::value#2 // value zp[2]:2 5.0018333416666675E8

zp[2]:29 [ main::sieve_i#2 main::sieve_i#1 ]
zp[2]:27 [ main::i#10 main::i#3 print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 main::sec100s#0 ]
zp[2]:23 [ main::j#2 main::j#1 main::j#0 ]
zp[2]:25 [ main::s#2 main::s#1 main::s#0 ]
zp[2]:16 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 main::i#12 main::i#2 ]
zp[2]:19 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
reg byte x [ memset::c#4 ]
reg byte a [ print_char::ch#2 print_char::ch#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:10 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 memset::num#2 memset::end#0 print_str::str#10 print_str::str#11 print_str::str#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[1]:18 [ ultoa::digit#2 ultoa::digit#1 utoa::digit#2 utoa::digit#1 ]
zp[4]:6 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 main::cyclecount#0 div32u16u::dividend#0 clock::return#2 main::$10 clock::return#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
zp[2]:2 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ultoa_append::buffer#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
zp[4]:31 [ div32u16u::return#2 main::$12 div32u16u::return#0 ]
zp[2]:21 [ main::$33 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:4 [ utoa::digit_value#0 utoa_append::sub#0 div32u16u::quotient_hi#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:12 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
