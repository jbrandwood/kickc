Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_sint (signed word~) main::$1 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_sint (signed word~) main::$3 (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Created struct value member variable (byte) printf_slong::format_min_length
Created struct value member variable (byte) printf_slong::format_justify_left
Created struct value member variable (byte) printf_slong::format_sign_always
Created struct value member variable (byte) printf_slong::format_zero_padding
Created struct value member variable (byte) printf_slong::format_upper_case
Created struct value member variable (byte) printf_slong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_slong::format
Created struct value member variable (byte) printf_ulong::format_min_length
Created struct value member variable (byte) printf_ulong::format_justify_left
Created struct value member variable (byte) printf_ulong::format_sign_always
Created struct value member variable (byte) printf_ulong::format_zero_padding
Created struct value member variable (byte) printf_ulong::format_upper_case
Created struct value member variable (byte) printf_ulong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_ulong::format
Created struct value member variable (byte) printf_sint::format_min_length
Created struct value member variable (byte) printf_sint::format_justify_left
Created struct value member variable (byte) printf_sint::format_sign_always
Created struct value member variable (byte) printf_sint::format_zero_padding
Created struct value member variable (byte) printf_sint::format_upper_case
Created struct value member variable (byte) printf_sint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_sint::format
Created struct value member variable (byte) printf_uint::format_min_length
Created struct value member variable (byte) printf_uint::format_justify_left
Created struct value member variable (byte) printf_uint::format_sign_always
Created struct value member variable (byte) printf_uint::format_zero_padding
Created struct value member variable (byte) printf_uint::format_upper_case
Created struct value member variable (byte) printf_uint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uint::format
Created struct value member variable (byte) printf_schar::format_min_length
Created struct value member variable (byte) printf_schar::format_justify_left
Created struct value member variable (byte) printf_schar::format_sign_always
Created struct value member variable (byte) printf_schar::format_zero_padding
Created struct value member variable (byte) printf_schar::format_upper_case
Created struct value member variable (byte) printf_schar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_schar::format
Created struct value member variable (byte) printf_uchar::format_min_length
Created struct value member variable (byte) printf_uchar::format_justify_left
Created struct value member variable (byte) printf_uchar::format_sign_always
Created struct value member variable (byte) printf_uchar::format_zero_padding
Created struct value member variable (byte) printf_uchar::format_upper_case
Created struct value member variable (byte) printf_uchar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uchar::format
Created struct value member variable (byte) printf_number_buffer::buffer_sign
Created struct value member variable (byte*) printf_number_buffer::buffer_digits
Converted struct value to member variables (struct printf_buffer_number) printf_number_buffer::buffer
Created struct value member variable (byte) printf_number_buffer::format_min_length
Created struct value member variable (byte) printf_number_buffer::format_justify_left
Created struct value member variable (byte) printf_number_buffer::format_sign_always
Created struct value member variable (byte) printf_number_buffer::format_zero_padding
Created struct value member variable (byte) printf_number_buffer::format_upper_case
Created struct value member variable (byte) printf_number_buffer::format_radix
Converted struct value to member variables (struct printf_format_number) printf_number_buffer::format
Created struct value member variable (byte) printf_string::format_min_length
Created struct value member variable (byte) printf_string::format_justify_left
Converted struct value to member variables (struct printf_format_string) printf_string::format
Converted procedure struct value parameter to member unwinding (void()) printf_slong((signed dword) printf_slong::value , (byte) printf_slong::format_min_length , (byte) printf_slong::format_justify_left , (byte) printf_slong::format_sign_always , (byte) printf_slong::format_zero_padding , (byte) printf_slong::format_upper_case , (byte) printf_slong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
Converted call struct value parameter to member unwinding (void~) printf_slong::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_slong::format_min_length (byte) printf_slong::format_justify_left (byte) printf_slong::format_sign_always (byte) printf_slong::format_zero_padding (byte) printf_slong::format_upper_case (byte) printf_slong::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_ulong::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_ulong::format_min_length (byte) printf_ulong::format_justify_left (byte) printf_ulong::format_sign_always (byte) printf_ulong::format_zero_padding (byte) printf_ulong::format_upper_case (byte) printf_ulong::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_sint::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_sint::format_min_length (byte) printf_sint::format_justify_left (byte) printf_sint::format_sign_always (byte) printf_sint::format_zero_padding (byte) printf_sint::format_upper_case (byte) printf_sint::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_uint::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uint::format_min_length (byte) printf_uint::format_justify_left (byte) printf_uint::format_sign_always (byte) printf_uint::format_zero_padding (byte) printf_uint::format_upper_case (byte) printf_uint::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_schar::$2 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_schar::format_min_length (byte) printf_schar::format_justify_left (byte) printf_schar::format_sign_always (byte) printf_schar::format_zero_padding (byte) printf_schar::format_upper_case (byte) printf_schar::format_radix 
Converted call struct value parameter to member unwinding (void~) printf_uchar::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uchar::format_min_length (byte) printf_uchar::format_justify_left (byte) printf_uchar::format_sign_always (byte) printf_uchar::format_zero_padding (byte) printf_uchar::format_upper_case (byte) printf_uchar::format_radix 
Converted call struct value parameter to member unwinding call printf_sint (signed word~) main::$1 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (const byte) DECIMAL 
Converted call struct value parameter to member unwinding call printf_sint (signed word~) main::$3 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (byte) 0 (const byte) DECIMAL 
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_slong::format.sign_always with member unwinding reference (byte) printf_slong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_slong::format.radix with member unwinding reference (byte) printf_slong::format_radix
Replacing struct member reference (struct printf_format_number) printf_ulong::format.sign_always with member unwinding reference (byte) printf_ulong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_ulong::format.radix with member unwinding reference (byte) printf_ulong::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_sint::format.sign_always with member unwinding reference (byte) printf_sint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_sint::format.radix with member unwinding reference (byte) printf_sint::format_radix
Replacing struct member reference (struct printf_format_number) printf_uint::format.sign_always with member unwinding reference (byte) printf_uint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uint::format.radix with member unwinding reference (byte) printf_uint::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_schar::format.sign_always with member unwinding reference (byte) printf_schar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_schar::format.radix with member unwinding reference (byte) printf_schar::format_radix
Replacing struct member reference (struct printf_format_number) printf_uchar::format.sign_always with member unwinding reference (byte) printf_uchar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uchar::format.radix with member unwinding reference (byte) printf_uchar::format_radix
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.upper_case with member unwinding reference (byte) printf_number_buffer::format_upper_case
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Eliminating unused variable with no statement (void~) main::$2
Eliminating unused variable with no statement (void~) main::$4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_char::@2
  (word) memcpy::num#1 ← phi( printf_char::@2/(word) memcpy::num#0 )
  (void*) memcpy::destination#1 ← phi( printf_char::@2/(void*) memcpy::destination#0 )
  (void*) memcpy::source#1 ← phi( printf_char::@2/(void*) memcpy::source#0 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#1
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#1
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#1
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#1
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#3 ← phi( memcpy/(void*) memcpy::destination#1 memcpy::@2/(void*) memcpy::destination#4 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#4 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#2 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#3 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#3
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_char::@3 printf_cls
  (byte) memset::c#5 ← phi( printf_char::@3/(byte) memset::c#1 printf_cls/(byte) memset::c#0 )
  (void*) memset::str#4 ← phi( printf_char::@3/(void*) memset::str#1 printf_cls/(void*) memset::str#0 )
  (word) memset::num#2 ← phi( printf_char::@3/(word) memset::num#1 printf_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  (byte*) strlen::str#4 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  (byte*) utoa::buffer#21 ← phi( printf_sint::@2/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( printf_sint::@2/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( printf_sint::@2/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(signed word()) atoi((to_nomodify byte*) atoi::str)
atoi: scope:[atoi]  from main::@1 main::@4
  (to_nomodify byte*) atoi::str#2 ← phi( main::@1/(to_nomodify byte*) atoi::str#0 main::@4/(to_nomodify byte*) atoi::str#1 )
  (signed word) atoi::res#0 ← (signed word) 0
  (byte) atoi::negative#0 ← (byte) 0
  (byte) atoi::i#0 ← (byte) 0
  (bool~) atoi::$0 ← *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#0) == (byte) '-'
  (bool~) atoi::$1 ← ! (bool~) atoi::$0
  if((bool~) atoi::$1) goto atoi::@3
  to:atoi::@2
atoi::@2: scope:[atoi]  from atoi
  (signed word) atoi::res#7 ← phi( atoi/(signed word) atoi::res#0 )
  (to_nomodify byte*) atoi::str#5 ← phi( atoi/(to_nomodify byte*) atoi::str#2 )
  (byte) atoi::i#3 ← phi( atoi/(byte) atoi::i#0 )
  (byte) atoi::negative#1 ← (number) 1
  (byte) atoi::i#1 ← ++ (byte) atoi::i#3
  to:atoi::@3
atoi::@3: scope:[atoi]  from atoi atoi::@2 atoi::@4
  (byte) atoi::negative#3 ← phi( atoi/(byte) atoi::negative#0 atoi::@2/(byte) atoi::negative#1 atoi::@4/(byte) atoi::negative#4 )
  (signed word) atoi::res#5 ← phi( atoi/(signed word) atoi::res#0 atoi::@2/(signed word) atoi::res#7 atoi::@4/(signed word) atoi::res#1 )
  (byte) atoi::i#4 ← phi( atoi/(byte) atoi::i#0 atoi::@2/(byte) atoi::i#1 atoi::@4/(byte) atoi::i#2 )
  (to_nomodify byte*) atoi::str#3 ← phi( atoi/(to_nomodify byte*) atoi::str#2 atoi::@2/(to_nomodify byte*) atoi::str#5 atoi::@4/(to_nomodify byte*) atoi::str#4 )
  (bool~) atoi::$6 ← (number) 0 != *((to_nomodify byte*) atoi::str#3 + (byte) atoi::i#4)
  if((bool~) atoi::$6) goto atoi::@4
  to:atoi::@5
atoi::@4: scope:[atoi]  from atoi::@3
  (byte) atoi::negative#4 ← phi( atoi::@3/(byte) atoi::negative#3 )
  (byte) atoi::i#5 ← phi( atoi::@3/(byte) atoi::i#4 )
  (to_nomodify byte*) atoi::str#4 ← phi( atoi::@3/(to_nomodify byte*) atoi::str#3 )
  (signed word) atoi::res#2 ← phi( atoi::@3/(signed word) atoi::res#5 )
  (number~) atoi::$3 ← (signed word) atoi::res#2 * (number) $a
  (number~) atoi::$4 ← (number~) atoi::$3 + *((to_nomodify byte*) atoi::str#4 + (byte) atoi::i#5)
  (number~) atoi::$5 ← (number~) atoi::$4 - (byte) '0'
  (signed word) atoi::res#1 ← (number~) atoi::$5
  (byte) atoi::i#2 ← ++ (byte) atoi::i#5
  to:atoi::@3
atoi::@5: scope:[atoi]  from atoi::@3
  (signed word) atoi::res#6 ← phi( atoi::@3/(signed word) atoi::res#5 )
  (byte) atoi::negative#2 ← phi( atoi::@3/(byte) atoi::negative#3 )
  (bool~) atoi::$7 ← (number) 0 != (byte) atoi::negative#2
  if((bool~) atoi::$7) goto atoi::@1
  to:atoi::@6
atoi::@1: scope:[atoi]  from atoi::@5
  (signed word) atoi::res#3 ← phi( atoi::@5/(signed word) atoi::res#6 )
  (signed word~) atoi::$2 ← - (signed word) atoi::res#3
  (signed word) atoi::return#0 ← (signed word~) atoi::$2
  to:atoi::@return
atoi::@6: scope:[atoi]  from atoi::@5
  (signed word) atoi::res#4 ← phi( atoi::@5/(signed word) atoi::res#6 )
  (signed word) atoi::return#1 ← (signed word) atoi::res#4
  to:atoi::@return
atoi::@return: scope:[atoi]  from atoi::@1 atoi::@6
  (signed word) atoi::return#5 ← phi( atoi::@1/(signed word) atoi::return#0 atoi::@6/(signed word) atoi::return#1 )
  (signed word) atoi::return#2 ← (signed word) atoi::return#5
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) printf_cursor_x ← (byte) 0
  (byte) printf_cursor_y ← (byte) 0
  (byte*) printf_cursor_ptr ← (byte*)(number) $400
  to:@2

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  (void*) memset::str#0 ← (void*)(number) $400
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  (byte*) printf_cursor_ptr ← ((byte*)) (number) $400
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← (number) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  return 
  to:@return

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  (bool~) printf_char::$0 ← (byte) printf_cursor_x == (number) $28
  (bool~) printf_char::$1 ← ! (bool~) printf_char::$0
  if((bool~) printf_char::$1) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  (bool~) printf_char::$2 ← (byte) printf_cursor_y == (number) $19
  (bool~) printf_char::$3 ← ! (bool~) printf_char::$2
  if((bool~) printf_char::$3) goto printf_char::@return
  to:printf_char::@2
printf_char::@2: scope:[printf_char]  from printf_char::@1
  (void*) memcpy::destination#0 ← (void*)(number) $400
  (void*) memcpy::source#0 ← (void*)(number) $400+(number) $28
  (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:printf_char::@3
printf_char::@3: scope:[printf_char]  from printf_char::@2
  (void*) memset::str#1 ← (void*)(number) $400+(number) $28*(number) $19-(number) $28
  (byte) memset::c#1 ← (byte) ' '
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:printf_char::@4
printf_char::@4: scope:[printf_char]  from printf_char::@3
  (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (number) $28
  (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6
  (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1 printf_char::@4
  return 
  to:@return

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (number) $28
  (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  (byte) printf_cursor_x ← (number) 0
  (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 )
  (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#4 ← phi( printf_padding/(byte) printf_padding::pad#5 printf_padding::@3/(byte) printf_padding::pad#6 )
  (byte) printf_padding::length#3 ← phi( printf_padding/(byte) printf_padding::length#4 printf_padding::@3/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#3
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#6 ← phi( printf_padding::@1/(byte) printf_padding::length#3 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#3 ← phi( printf_padding::@1/(byte) printf_padding::pad#4 )
  (byte) printf_char::ch#0 ← (byte) printf_padding::pad#3
  call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#6 ← phi( printf_padding::@2/(byte) printf_padding::pad#3 )
  (byte) printf_padding::length#5 ← phi( printf_padding::@2/(byte) printf_padding::length#6 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@3 main::@6 printf_number_buffer::@5
  (byte*) printf_str::str#6 ← phi( main::@3/(byte*) printf_str::str#2 main::@6/(byte*) printf_str::str#3 printf_number_buffer::@5/(byte*) printf_str::str#1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@6 printf_str::@7
  (byte*) printf_str::str#5 ← phi( printf_str/(byte*) printf_str::str#6 printf_str::@6/(byte*) printf_str::str#7 printf_str::@7/(byte*) printf_str::str#8 )
  if(true) goto printf_str::@2
  to:printf_str::@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  (byte*) printf_str::str#4 ← phi( printf_str::@1/(byte*) printf_str::str#5 )
  (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4)
  (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4
  (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (number) 0
  (bool~) printf_str::$1 ← ! (bool~) printf_str::$0
  if((bool~) printf_str::$1) goto printf_str::@3
  to:printf_str::@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  (byte*) printf_str::str#11 ← phi( printf_str::@2/(byte*) printf_str::str#0 )
  (byte) printf_str::ch#1 ← phi( printf_str::@2/(byte) printf_str::ch#0 )
  (bool~) printf_str::$2 ← (byte) printf_str::ch#1 == (byte) '
'
  if((bool~) printf_str::$2) goto printf_str::@4
  to:printf_str::@5
printf_str::@4: scope:[printf_str]  from printf_str::@3
  (byte*) printf_str::str#9 ← phi( printf_str::@3/(byte*) printf_str::str#11 )
  call printf_ln 
  to:printf_str::@6
printf_str::@6: scope:[printf_str]  from printf_str::@4
  (byte*) printf_str::str#7 ← phi( printf_str::@4/(byte*) printf_str::str#9 )
  to:printf_str::@1
printf_str::@5: scope:[printf_str]  from printf_str::@3
  (byte*) printf_str::str#10 ← phi( printf_str::@3/(byte*) printf_str::str#11 )
  (byte) printf_str::ch#2 ← phi( printf_str::@3/(byte) printf_str::ch#1 )
  (byte) printf_char::ch#1 ← (byte) printf_str::ch#2
  call printf_char 
  to:printf_str::@7
printf_str::@7: scope:[printf_str]  from printf_str::@5
  (byte*) printf_str::str#8 ← phi( printf_str::@5/(byte*) printf_str::str#10 )
  to:printf_str::@1
printf_str::@return: scope:[printf_str]  from printf_str::@1 printf_str::@2
  return 
  to:@return

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@2 main::@5
  (byte) printf_sint::format_upper_case#7 ← phi( main::@2/(byte) printf_sint::format_upper_case#0 main::@5/(byte) printf_sint::format_upper_case#1 )
  (byte) printf_sint::format_zero_padding#7 ← phi( main::@2/(byte) printf_sint::format_zero_padding#0 main::@5/(byte) printf_sint::format_zero_padding#1 )
  (byte) printf_sint::format_justify_left#7 ← phi( main::@2/(byte) printf_sint::format_justify_left#0 main::@5/(byte) printf_sint::format_justify_left#1 )
  (byte) printf_sint::format_min_length#7 ← phi( main::@2/(byte) printf_sint::format_min_length#0 main::@5/(byte) printf_sint::format_min_length#1 )
  (byte) printf_sint::format_radix#7 ← phi( main::@2/(byte) printf_sint::format_radix#0 main::@5/(byte) printf_sint::format_radix#1 )
  (byte) printf_sint::format_sign_always#4 ← phi( main::@2/(byte) printf_sint::format_sign_always#0 main::@5/(byte) printf_sint::format_sign_always#1 )
  (signed word) printf_sint::value#3 ← phi( main::@2/(signed word) printf_sint::value#1 main::@5/(signed word) printf_sint::value#2 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number) 0
  (bool~) printf_sint::$0 ← (signed word) printf_sint::value#3 < (number) 0
  if((bool~) printf_sint::$0) goto printf_sint::@1
  to:printf_sint::@3
printf_sint::@1: scope:[printf_sint]  from printf_sint
  (byte) printf_sint::format_upper_case#4 ← phi( printf_sint/(byte) printf_sint::format_upper_case#7 )
  (byte) printf_sint::format_zero_padding#4 ← phi( printf_sint/(byte) printf_sint::format_zero_padding#7 )
  (byte) printf_sint::format_sign_always#6 ← phi( printf_sint/(byte) printf_sint::format_sign_always#4 )
  (byte) printf_sint::format_justify_left#4 ← phi( printf_sint/(byte) printf_sint::format_justify_left#7 )
  (byte) printf_sint::format_min_length#4 ← phi( printf_sint/(byte) printf_sint::format_min_length#7 )
  (byte) printf_sint::format_radix#4 ← phi( printf_sint/(byte) printf_sint::format_radix#7 )
  (signed word) printf_sint::value#4 ← phi( printf_sint/(signed word) printf_sint::value#3 )
  (signed word~) printf_sint::$4 ← - (signed word) printf_sint::value#4
  (signed word) printf_sint::value#0 ← (signed word~) printf_sint::$4
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@3: scope:[printf_sint]  from printf_sint
  (byte) printf_sint::format_upper_case#5 ← phi( printf_sint/(byte) printf_sint::format_upper_case#7 )
  (byte) printf_sint::format_zero_padding#5 ← phi( printf_sint/(byte) printf_sint::format_zero_padding#7 )
  (byte) printf_sint::format_justify_left#5 ← phi( printf_sint/(byte) printf_sint::format_justify_left#7 )
  (byte) printf_sint::format_min_length#5 ← phi( printf_sint/(byte) printf_sint::format_min_length#7 )
  (byte) printf_sint::format_radix#5 ← phi( printf_sint/(byte) printf_sint::format_radix#7 )
  (signed word) printf_sint::value#6 ← phi( printf_sint/(signed word) printf_sint::value#3 )
  (byte) printf_sint::format_sign_always#2 ← phi( printf_sint/(byte) printf_sint::format_sign_always#4 )
  (bool~) printf_sint::$5 ← (number) 0 != (byte) printf_sint::format_sign_always#2
  (bool~) printf_sint::$3 ← ! (bool~) printf_sint::$5
  if((bool~) printf_sint::$3) goto printf_sint::@2
  to:printf_sint::@4
printf_sint::@4: scope:[printf_sint]  from printf_sint::@3
  (byte) printf_sint::format_upper_case#6 ← phi( printf_sint::@3/(byte) printf_sint::format_upper_case#5 )
  (byte) printf_sint::format_zero_padding#6 ← phi( printf_sint::@3/(byte) printf_sint::format_zero_padding#5 )
  (byte) printf_sint::format_sign_always#7 ← phi( printf_sint::@3/(byte) printf_sint::format_sign_always#2 )
  (byte) printf_sint::format_justify_left#6 ← phi( printf_sint::@3/(byte) printf_sint::format_justify_left#5 )
  (byte) printf_sint::format_min_length#6 ← phi( printf_sint::@3/(byte) printf_sint::format_min_length#5 )
  (byte) printf_sint::format_radix#6 ← phi( printf_sint::@3/(byte) printf_sint::format_radix#5 )
  (signed word) printf_sint::value#7 ← phi( printf_sint::@3/(signed word) printf_sint::value#6 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '+'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint::@1 printf_sint::@3 printf_sint::@4
  (byte) printf_sint::format_upper_case#3 ← phi( printf_sint::@1/(byte) printf_sint::format_upper_case#4 printf_sint::@3/(byte) printf_sint::format_upper_case#5 printf_sint::@4/(byte) printf_sint::format_upper_case#6 )
  (byte) printf_sint::format_zero_padding#3 ← phi( printf_sint::@1/(byte) printf_sint::format_zero_padding#4 printf_sint::@3/(byte) printf_sint::format_zero_padding#5 printf_sint::@4/(byte) printf_sint::format_zero_padding#6 )
  (byte) printf_sint::format_sign_always#5 ← phi( printf_sint::@1/(byte) printf_sint::format_sign_always#6 printf_sint::@3/(byte) printf_sint::format_sign_always#2 printf_sint::@4/(byte) printf_sint::format_sign_always#7 )
  (byte) printf_sint::format_justify_left#3 ← phi( printf_sint::@1/(byte) printf_sint::format_justify_left#4 printf_sint::@3/(byte) printf_sint::format_justify_left#5 printf_sint::@4/(byte) printf_sint::format_justify_left#6 )
  (byte) printf_sint::format_min_length#3 ← phi( printf_sint::@1/(byte) printf_sint::format_min_length#4 printf_sint::@3/(byte) printf_sint::format_min_length#5 printf_sint::@4/(byte) printf_sint::format_min_length#6 )
  (byte) printf_sint::format_radix#2 ← phi( printf_sint::@1/(byte) printf_sint::format_radix#4 printf_sint::@3/(byte) printf_sint::format_radix#5 printf_sint::@4/(byte) printf_sint::format_radix#6 )
  (signed word) printf_sint::value#5 ← phi( printf_sint::@1/(signed word) printf_sint::value#0 printf_sint::@3/(signed word) printf_sint::value#6 printf_sint::@4/(signed word) printf_sint::value#7 )
  (word) printf_sint::uvalue#0 ← (word)(signed word) printf_sint::value#5
  (word) utoa::value#1 ← (word) printf_sint::uvalue#0
  (byte*) utoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) utoa::radix#0 ← (byte) printf_sint::format_radix#2
  call utoa 
  to:printf_sint::@5
printf_sint::@5: scope:[printf_sint]  from printf_sint::@2
  (byte) printf_sint::format_radix#3 ← phi( printf_sint::@2/(byte) printf_sint::format_radix#2 )
  (byte) printf_sint::format_upper_case#2 ← phi( printf_sint::@2/(byte) printf_sint::format_upper_case#3 )
  (byte) printf_sint::format_zero_padding#2 ← phi( printf_sint::@2/(byte) printf_sint::format_zero_padding#3 )
  (byte) printf_sint::format_sign_always#3 ← phi( printf_sint::@2/(byte) printf_sint::format_sign_always#5 )
  (byte) printf_sint::format_justify_left#2 ← phi( printf_sint::@2/(byte) printf_sint::format_justify_left#3 )
  (byte) printf_sint::format_min_length#2 ← phi( printf_sint::@2/(byte) printf_sint::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_sint::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_sint::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_sint::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_sint::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_sint::format_upper_case#2
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_sint::format_radix#3
  call printf_number_buffer 
  to:printf_sint::@6
printf_sint::@6: scope:[printf_sint]  from printf_sint::@5
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@6
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@5
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_sint::@5/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_sint::@5/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_sint::@5/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_sint::@5/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_sint::@5/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#1 ← phi( printf_sint::@5/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#1
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#4 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#15 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#10 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#11 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#7 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#8 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#9 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#1 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#4 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#5 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#1 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#3 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#4 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#5 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#1
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#1
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#10 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#3 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#1 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#7 )
  (byte*) printf_number_buffer::buffer_digits#1 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#4 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#1
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#1 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#5 )
  (byte) printf_number_buffer::buffer_sign#1 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#4 )
  (word) strlen::return#4 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#4
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#1
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#18 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#14 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#15 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#1 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#11 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#10 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#11 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#7 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#8 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#2 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#3 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#4 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#2
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#14 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#1 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#10 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#7 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#3 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#11 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#8 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#5 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#4 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#1 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#12 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#7 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#8 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#1 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::buffer_sign#2 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#5 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#6 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#1 )
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#7 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#1 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#5 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#13 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#10 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#15 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#16 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#9 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#4 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#2 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#7 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#8 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#2 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#16 )
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#8 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#2 )
  (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#3
  call printf_char 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#19 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#9 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#13 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#12 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#18 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#7 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte) printf_number_buffer::format_upper_case#1 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#2 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#3 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#1
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#3 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#17 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#20 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#2 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#6 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#9 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#10 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#14 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#15 )
  (byte*) printf_number_buffer::buffer_digits#2 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#5 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) printf_str::str#1 ← (byte*) printf_number_buffer::buffer_digits#2
  call printf_str 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#2 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#6 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#9 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#2 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#10 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#15 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#3
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#19 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#3 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (to_nomodify byte*) atoi::str#0 ← (const byte*) main::str
  call atoi 
  (signed word) atoi::return#3 ← (signed word) atoi::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word) atoi::return#6 ← phi( main::@1/(signed word) atoi::return#3 )
  (signed word~) main::$1 ← (signed word) atoi::return#6
  (signed word) printf_sint::value#1 ← (signed word~) main::$1
  (byte) printf_sint::format_min_length#0 ← (byte) 0
  (byte) printf_sint::format_justify_left#0 ← (byte) 0
  (byte) printf_sint::format_sign_always#0 ← (byte) 0
  (byte) printf_sint::format_zero_padding#0 ← (byte) 0
  (byte) printf_sint::format_upper_case#0 ← (byte) 0
  (byte) printf_sint::format_radix#0 ← (const byte) DECIMAL
  call printf_sint 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) printf_str::str#2 ← (const byte*) main::str1
  call printf_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (to_nomodify byte*) atoi::str#1 ← (const byte*) main::str2
  call atoi 
  (signed word) atoi::return#4 ← (signed word) atoi::return#2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed word) atoi::return#7 ← phi( main::@4/(signed word) atoi::return#4 )
  (signed word~) main::$3 ← (signed word) atoi::return#7
  (signed word) printf_sint::value#2 ← (signed word~) main::$3
  (byte) printf_sint::format_min_length#1 ← (byte) 0
  (byte) printf_sint::format_justify_left#1 ← (byte) 0
  (byte) printf_sint::format_sign_always#1 ← (byte) 0
  (byte) printf_sint::format_zero_padding#1 ← (byte) 0
  (byte) printf_sint::format_upper_case#1 ← (byte) 0
  (byte) printf_sint::format_radix#1 ← (const byte) DECIMAL
  call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) printf_str::str#3 ← (const byte*) main::str3
  call printf_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte) SIZEOF_WORD = (byte) 2
(signed word()) atoi((to_nomodify byte*) atoi::str)
(bool~) atoi::$0
(bool~) atoi::$1
(signed word~) atoi::$2
(number~) atoi::$3
(number~) atoi::$4
(number~) atoi::$5
(bool~) atoi::$6
(bool~) atoi::$7
(label) atoi::@1
(label) atoi::@2
(label) atoi::@3
(label) atoi::@4
(label) atoi::@5
(label) atoi::@6
(label) atoi::@return
(byte) atoi::i
(byte) atoi::i#0
(byte) atoi::i#1
(byte) atoi::i#2
(byte) atoi::i#3
(byte) atoi::i#4
(byte) atoi::i#5
(byte) atoi::negative
(byte) atoi::negative#0
(byte) atoi::negative#1
(byte) atoi::negative#2
(byte) atoi::negative#3
(byte) atoi::negative#4
(signed word) atoi::res
(signed word) atoi::res#0
(signed word) atoi::res#1
(signed word) atoi::res#2
(signed word) atoi::res#3
(signed word) atoi::res#4
(signed word) atoi::res#5
(signed word) atoi::res#6
(signed word) atoi::res#7
(signed word) atoi::return
(signed word) atoi::return#0
(signed word) atoi::return#1
(signed word) atoi::return#2
(signed word) atoi::return#3
(signed word) atoi::return#4
(signed word) atoi::return#5
(signed word) atoi::return#6
(signed word) atoi::return#7
(to_nomodify byte*) atoi::str
(to_nomodify byte*) atoi::str#0
(to_nomodify byte*) atoi::str#1
(to_nomodify byte*) atoi::str#2
(to_nomodify byte*) atoi::str#3
(to_nomodify byte*) atoi::str#4
(to_nomodify byte*) atoi::str#5
(void()) main()
(signed word~) main::$1
(signed word~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(const byte*) main::str[(byte) 5]  = (byte*) "1234"
(const byte*) main::str1[(byte) 2]  = (byte*) "
"
(const byte*) main::str2[(byte) 6]  = (byte*) "-5678"
(const byte*) main::str3[(byte) 2]  = (byte*) "
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(bool~) printf_char::$0
(bool~) printf_char::$1
(bool~) printf_char::$2
(bool~) printf_char::$3
(byte*~) printf_char::$6
(label) printf_char::@1
(label) printf_char::@2
(label) printf_char::@3
(label) printf_char::@4
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0
(byte) printf_char::ch#1
(byte) printf_char::ch#2
(byte) printf_char::ch#3
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore
(byte) printf_cursor_x loadstore
(byte) printf_cursor_y loadstore
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0
(byte*~) printf_ln::$1
(label) printf_ln::@return
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
(bool~) printf_sint::$0
(bool~) printf_sint::$3
(signed word~) printf_sint::$4
(bool~) printf_sint::$5
(label) printf_sint::@1
(label) printf_sint::@2
(label) printf_sint::@3
(label) printf_sint::@4
(label) printf_sint::@5
(label) printf_sint::@6
(label) printf_sint::@return
(struct printf_format_number) printf_sint::format
(byte) printf_sint::format_justify_left
(byte) printf_sint::format_justify_left#0
(byte) printf_sint::format_justify_left#1
(byte) printf_sint::format_justify_left#2
(byte) printf_sint::format_justify_left#3
(byte) printf_sint::format_justify_left#4
(byte) printf_sint::format_justify_left#5
(byte) printf_sint::format_justify_left#6
(byte) printf_sint::format_justify_left#7
(byte) printf_sint::format_min_length
(byte) printf_sint::format_min_length#0
(byte) printf_sint::format_min_length#1
(byte) printf_sint::format_min_length#2
(byte) printf_sint::format_min_length#3
(byte) printf_sint::format_min_length#4
(byte) printf_sint::format_min_length#5
(byte) printf_sint::format_min_length#6
(byte) printf_sint::format_min_length#7
(byte) printf_sint::format_radix
(byte) printf_sint::format_radix#0
(byte) printf_sint::format_radix#1
(byte) printf_sint::format_radix#2
(byte) printf_sint::format_radix#3
(byte) printf_sint::format_radix#4
(byte) printf_sint::format_radix#5
(byte) printf_sint::format_radix#6
(byte) printf_sint::format_radix#7
(byte) printf_sint::format_sign_always
(byte) printf_sint::format_sign_always#0
(byte) printf_sint::format_sign_always#1
(byte) printf_sint::format_sign_always#2
(byte) printf_sint::format_sign_always#3
(byte) printf_sint::format_sign_always#4
(byte) printf_sint::format_sign_always#5
(byte) printf_sint::format_sign_always#6
(byte) printf_sint::format_sign_always#7
(byte) printf_sint::format_upper_case
(byte) printf_sint::format_upper_case#0
(byte) printf_sint::format_upper_case#1
(byte) printf_sint::format_upper_case#2
(byte) printf_sint::format_upper_case#3
(byte) printf_sint::format_upper_case#4
(byte) printf_sint::format_upper_case#5
(byte) printf_sint::format_upper_case#6
(byte) printf_sint::format_upper_case#7
(byte) printf_sint::format_zero_padding
(byte) printf_sint::format_zero_padding#0
(byte) printf_sint::format_zero_padding#1
(byte) printf_sint::format_zero_padding#2
(byte) printf_sint::format_zero_padding#3
(byte) printf_sint::format_zero_padding#4
(byte) printf_sint::format_zero_padding#5
(byte) printf_sint::format_zero_padding#6
(byte) printf_sint::format_zero_padding#7
(word) printf_sint::uvalue
(word) printf_sint::uvalue#0
(signed word) printf_sint::value
(signed word) printf_sint::value#0
(signed word) printf_sint::value#1
(signed word) printf_sint::value#2
(signed word) printf_sint::value#3
(signed word) printf_sint::value#4
(signed word) printf_sint::value#5
(signed word) printf_sint::value#6
(signed word) printf_sint::value#7
(void()) printf_str((byte*) printf_str::str)
(bool~) printf_str::$0
(bool~) printf_str::$1
(bool~) printf_str::$2
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@6
(label) printf_str::@7
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0
(byte) printf_str::ch#1
(byte) printf_str::ch#2
(byte*) printf_str::str
(byte*) printf_str::str#0
(byte*) printf_str::str#1
(byte*) printf_str::str#10
(byte*) printf_str::str#11
(byte*) printf_str::str#2
(byte*) printf_str::str#3
(byte*) printf_str::str#4
(byte*) printf_str::str#5
(byte*) printf_str::str#6
(byte*) printf_str::str#7
(byte*) printf_str::str#8
(byte*) printf_str::str#9
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 1 in (byte) atoi::negative#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (bool~) atoi::$6 ← (number) 0 != *((to_nomodify byte*) atoi::str#3 + (byte) atoi::i#4)
Adding number conversion cast (snumber) $a in (number~) atoi::$3 ← (signed word) atoi::res#2 * (number) $a
Adding number conversion cast (snumber) atoi::$3 in (number~) atoi::$3 ← (signed word) atoi::res#2 * (snumber)(number) $a
Adding number conversion cast (snumber) atoi::$4 in (number~) atoi::$4 ← (snumber~) atoi::$3 + *((to_nomodify byte*) atoi::str#4 + (byte) atoi::i#5)
Adding number conversion cast (snumber) atoi::$5 in (number~) atoi::$5 ← (snumber~) atoi::$4 - (byte) '0'
Adding number conversion cast (unumber) 0 in (bool~) atoi::$7 ← (number) 0 != (byte) atoi::negative#2
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#0 ← (number) $28*(number) $19
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) printf_char::$0 ← (byte) printf_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) printf_char::$2 ← (byte) printf_cursor_y == (number) $19
Adding number conversion cast (unumber) $28*$19-$28 in (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) printf_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) printf_sint::$0 ← (signed word) printf_sint::value#3 < (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_sint::$5 ← (number) 0 != (byte) printf_sint::format_sign_always#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#1
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#1
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#1
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) atoi::negative#1 ← (unumber)(number) 1
Inlining cast (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Inlining cast (byte*) printf_cursor_ptr ← (byte*)(number) $400
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_y ← (unumber)(number) 0
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) printf_cursor_x ← (unumber)(number) 0
Inlining cast *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (void*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant pointer cast (void*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to signed word in (snumber~) atoi::$3 ← (signed word) atoi::res#2 * (signed byte) $a
Inferred type updated to signed word in (snumber~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#4 + (byte) atoi::i#5)
Inferred type updated to signed word in (snumber~) atoi::$5 ← (signed word~) atoi::$4 - (byte) '0'
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [168] (bool~) atoi::$1 ← *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#0) != (byte) '-' from [167] (bool~) atoi::$0 ← *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#0) == (byte) '-'
Inversing boolean not [210] (bool~) printf_char::$1 ← (byte) printf_cursor_x != (byte) $28 from [209] (bool~) printf_char::$0 ← (byte) printf_cursor_x == (byte) $28
Inversing boolean not [215] (bool~) printf_char::$3 ← (byte) printf_cursor_y != (byte) $19 from [214] (bool~) printf_char::$2 ← (byte) printf_cursor_y == (byte) $19
Inversing boolean not [255] (bool~) printf_str::$1 ← (byte) printf_str::ch#0 != (byte) 0 from [254] (bool~) printf_str::$0 ← (byte) printf_str::ch#0 == (byte) 0
Inversing boolean not [278] (bool~) printf_sint::$3 ← (byte) 0 == (byte) printf_sint::format_sign_always#2 from [277] (bool~) printf_sint::$5 ← (byte) 0 != (byte) printf_sint::format_sign_always#2
Inversing boolean not [302] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#1 from [301] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#1
Inversing boolean not [306] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#1 from [305] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#1
Inversing boolean not [308] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#1 from [307] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#1
Inversing boolean not [321] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#1 from [320] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#1
Inversing boolean not [328] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [327] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [336] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#2 from [335] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#2
Inversing boolean not [353] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#1 from [352] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#1
Inversing boolean not [365] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#3 from [364] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#3
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#2 = memcpy::destination#4 memcpy::destination#3 memcpy::return#0 memcpy::return#3 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias atoi::i#0 = atoi::i#3 
Alias atoi::str#2 = atoi::str#5 
Alias atoi::res#0 = atoi::res#7 
Alias atoi::res#2 = atoi::res#5 atoi::res#6 atoi::res#3 atoi::res#4 atoi::return#1 
Alias atoi::str#3 = atoi::str#4 
Alias atoi::i#4 = atoi::i#5 
Alias atoi::negative#2 = atoi::negative#4 atoi::negative#3 
Alias atoi::res#1 = atoi::$5 
Alias atoi::return#0 = atoi::$2 
Alias atoi::return#2 = atoi::return#5 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_str::str#4 = printf_str::str#5 
Alias printf_str::ch#0 = printf_str::ch#1 printf_str::ch#2 
Alias printf_str::str#0 = printf_str::str#11 printf_str::str#9 printf_str::str#7 printf_str::str#10 printf_str::str#8 
Alias printf_sint::value#3 = printf_sint::value#4 printf_sint::value#6 printf_sint::value#7 
Alias printf_sint::format_radix#4 = printf_sint::format_radix#7 printf_sint::format_radix#5 printf_sint::format_radix#6 
Alias printf_sint::format_min_length#4 = printf_sint::format_min_length#7 printf_sint::format_min_length#5 printf_sint::format_min_length#6 
Alias printf_sint::format_justify_left#4 = printf_sint::format_justify_left#7 printf_sint::format_justify_left#5 printf_sint::format_justify_left#6 
Alias printf_sint::format_sign_always#2 = printf_sint::format_sign_always#6 printf_sint::format_sign_always#4 printf_sint::format_sign_always#7 
Alias printf_sint::format_zero_padding#4 = printf_sint::format_zero_padding#7 printf_sint::format_zero_padding#5 printf_sint::format_zero_padding#6 
Alias printf_sint::format_upper_case#4 = printf_sint::format_upper_case#7 printf_sint::format_upper_case#5 printf_sint::format_upper_case#6 
Alias printf_sint::value#0 = printf_sint::$4 
Alias printf_sint::format_min_length#2 = printf_sint::format_min_length#3 
Alias printf_sint::format_justify_left#2 = printf_sint::format_justify_left#3 
Alias printf_sint::format_sign_always#3 = printf_sint::format_sign_always#5 
Alias printf_sint::format_zero_padding#2 = printf_sint::format_zero_padding#3 
Alias printf_sint::format_upper_case#2 = printf_sint::format_upper_case#3 
Alias printf_sint::format_radix#2 = printf_sint::format_radix#3 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#4 printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#3 printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#3 printf_number_buffer::format_justify_left#7 printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#4 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#15 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#5 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#8 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#15 = printf_number_buffer::buffer_digits#16 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#6 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#8 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#17 printf_number_buffer::buffer_digits#13 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::buffer_sign#2 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#8 printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#9 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_justify_left#15 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#16 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#2 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#18 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#13 
Alias printf_number_buffer::format_zero_padding#3 = printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::format_justify_left#2 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#3 = printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#5 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias atoi::return#3 = atoi::return#6 
Alias printf_sint::value#1 = main::$1 
Alias atoi::return#4 = atoi::return#7 
Alias printf_sint::value#2 = main::$3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias printf_sint::format_radix#2 = printf_sint::format_radix#4 
Alias printf_sint::format_min_length#2 = printf_sint::format_min_length#4 
Alias printf_sint::format_justify_left#2 = printf_sint::format_justify_left#4 
Alias printf_sint::format_sign_always#2 = printf_sint::format_sign_always#3 
Alias printf_sint::format_zero_padding#2 = printf_sint::format_zero_padding#4 
Alias printf_sint::format_upper_case#2 = printf_sint::format_upper_case#4 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#2 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#13 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#2 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#12 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#10 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (void*) memcpy::source#1 (void*) memcpy::source#0
Identical Phi Values (void*) memcpy::destination#1 (void*) memcpy::destination#0
Identical Phi Values (word) memcpy::num#1 (word) memcpy::num#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#2 (void*) memcpy::destination#1
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (to_nomodify byte*) atoi::str#3 (to_nomodify byte*) atoi::str#2
Identical Phi Values (byte) printf_padding::length#3 (byte) printf_padding::length#4
Identical Phi Values (byte) printf_padding::pad#3 (byte) printf_padding::pad#5
Identical Phi Values (byte) printf_number_buffer::format_min_length#1 (byte) printf_number_buffer::format_min_length#0
Identical Phi Values (byte) printf_number_buffer::format_justify_left#1 (byte) printf_number_buffer::format_justify_left#0
Identical Phi Values (byte) printf_number_buffer::format_zero_padding#1 (byte) printf_number_buffer::format_zero_padding#0
Identical Phi Values (byte*) printf_number_buffer::buffer_digits#1 (byte*) printf_number_buffer::buffer_digits#0
Identical Phi Values (byte) printf_number_buffer::buffer_sign#1 (byte) printf_number_buffer::buffer_sign#0
Identical Phi Values (byte) printf_number_buffer::format_upper_case#1 (byte) printf_number_buffer::format_upper_case#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) utoa::$0 [56] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [60] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [64] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [68] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [85] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [110] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) atoi::$1 [120] if(*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#0)!=(byte) '-') goto atoi::@3
Simple Condition (bool~) atoi::$6 [125] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4
Simple Condition (bool~) atoi::$7 [131] if((byte) 0!=(byte) atoi::negative#2) goto atoi::@1
Simple Condition (bool~) printf_char::$1 [152] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
Simple Condition (bool~) printf_char::$3 [156] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return
Simple Condition (bool~) printf_padding::$0 [181] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
Simple Condition (bool~) printf_str::$1 [192] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
Simple Condition (bool~) printf_str::$2 [194] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
Simple Condition (bool~) printf_sint::$0 [202] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1
Simple Condition (bool~) printf_sint::$3 [206] if((byte) 0==(byte) printf_sint::format_sign_always#2) goto printf_sint::@2
Simple Condition (bool~) printf_number_buffer::$0 [227] if((byte) 0==(byte) printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [241] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [246] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [250] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [260] if((byte) 0==(byte) printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [90] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [89] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting ! if()-condition to reversed if() [233] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [232] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [231] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [255] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [254] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#0 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [269] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [268] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [267] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#0 && (bool~) printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#0
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Constant right-side identified [140] (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Constant right-side identified [159] (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const signed word) atoi::res#0 = 0
Constant (const byte) atoi::negative#0 = 0
Constant (const byte) atoi::i#0 = 0
Constant (const byte) atoi::negative#1 = 1
Constant (const void*) memset::str#0 = (void*) 1024
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = (unumber)$28*$19
Constant (const void*) memcpy::destination#0 = (void*) 1024
Constant (const void*) memcpy::source#0 = (void*)$400+$28
Constant (const word) memcpy::num#0 = (unumber)$28*$19-$28
Constant (const void*) memset::str#1 = (void*)$400+$28*$19-$28
Constant (const byte) memset::c#1 = ' '
Constant (const word) memset::num#1 = $28
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte*) utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const to_nomodify byte*) atoi::str#0 = main::str
Constant (const byte) printf_sint::format_min_length#0 = 0
Constant (const byte) printf_sint::format_justify_left#0 = 0
Constant (const byte) printf_sint::format_sign_always#0 = 0
Constant (const byte) printf_sint::format_zero_padding#0 = 0
Constant (const byte) printf_sint::format_upper_case#0 = 0
Constant (const byte) printf_sint::format_radix#0 = DECIMAL
Constant (const byte*) printf_str::str#2 = main::str1
Constant (const to_nomodify byte*) atoi::str#1 = main::str2
Constant (const byte) printf_sint::format_min_length#1 = 0
Constant (const byte) printf_sint::format_justify_left#1 = 0
Constant (const byte) printf_sint::format_sign_always#1 = 0
Constant (const byte) printf_sint::format_zero_padding#1 = 0
Constant (const byte) printf_sint::format_upper_case#1 = 0
Constant (const byte) printf_sint::format_radix#1 = DECIMAL
Constant (const byte*) printf_str::str#3 = main::str3
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memcpy::src#0 = (byte*)memcpy::source#0
Constant (const byte*) memcpy::dst#0 = (byte*)memcpy::destination#0
Constant (const byte*) memcpy::$2 = (byte*)memcpy::source#0
Constant (const void*) memcpy::return#2 = memcpy::destination#0
Constant (const byte*) strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant (const byte*) printf_str::str#1 = printf_number_buffer::buffer_digits#0
Constant (const byte*) strupr::str#0 = printf_number_buffer::buffer_digits#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) strupr::return#2 = strupr::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [188] if(true) goto printf_str::@2
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into (const byte*) main::str1
Successful SSA optimization Pass2ConstantStringConsolidation
Simplifying expression containing zero atoi::str#2 in [120] if(*((to_nomodify byte*) atoi::str#2 + (const byte) atoi::i#0)!=(byte) '-') goto atoi::@3
Simplifying expression containing zero (byte*)&printf_buffer in [200] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) 0
Simplifying expression containing zero (byte*)&printf_buffer in [204] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '-'
Simplifying expression containing zero (byte*)&printf_buffer in [207] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte) '+'
Simplifying expression containing zero (byte*)&printf_buffer in [214] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [94] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [109] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#0 and assignment [152] (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_sint::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#0 and assignment [155] (byte) printf_number_buffer::format_radix#0 ← (byte) printf_sint::format_radix#2
Eliminating unused constant (const void*) memcpy::return#2
Eliminating unused constant (const byte*) strupr::return#2
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#0
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) utoa::$12 [57] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [158] if((byte) 0==(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [173] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [182] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@26
Simple Condition (bool~) toupper::$1 [200] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) utoa::$6 [201] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [203] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [204] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [206] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [208] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [209] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [158] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
Negating conditional jump and destination [173] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
Negating conditional jump and destination [182] if((byte) 0==(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
Negating conditional jump and destination [204] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
Negating conditional jump and destination [209] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [6] (byte*) memcpy::src_end#0 ← (const byte*) memcpy::$2 + (const word) memcpy::num#0
Constant right-side identified [42] (byte*) utoa::buffer#0 ← ++ (const byte*) utoa::buffer#5
Constant right-side identified [79] (byte) atoi::i#1 ← ++ (const byte) atoi::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memcpy::src_end#0 = memcpy::$2+memcpy::num#0
Constant (const byte*) utoa::buffer#0 = ++utoa::buffer#5
Constant (const byte) atoi::i#1 = ++atoi::i#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Constant right-side identified [40] (byte*) utoa::buffer#1 ← ++ (const byte*) utoa::buffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) utoa::buffer#1 = ++utoa::buffer#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Constant right-side identified [41] (byte*) utoa::buffer#2 ← ++ (const byte*) utoa::buffer#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) utoa::buffer#2 = ++utoa::buffer#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Inlining Noop Cast [12] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [14] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [134] (word) printf_sint::uvalue#0 ← (word)(signed word) printf_sint::value#5 keeping printf_sint::value#5
Inlining Noop Cast [154] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#0 keeping printf_number_buffer::format_min_length#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [47] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift and addition[73] (signed word~) atoi::$3 ← (signed word) atoi::res#2 * (signed byte) $a
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memcpy::src#0
Inlining constant with var siblings (const byte*) memcpy::dst#0
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte*) strlen::str#1
Inlining constant with var siblings (const byte) utoa::max_digits#1
Inlining constant with var siblings (const word*) utoa::digit_values#1
Inlining constant with var siblings (const byte) utoa::max_digits#2
Inlining constant with var siblings (const word*) utoa::digit_values#2
Inlining constant with var siblings (const byte) utoa::max_digits#3
Inlining constant with var siblings (const word*) utoa::digit_values#3
Inlining constant with var siblings (const byte) utoa::max_digits#4
Inlining constant with var siblings (const word*) utoa::digit_values#4
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const byte*) utoa::buffer#0
Inlining constant with var siblings (const byte*) utoa::buffer#1
Inlining constant with var siblings (const byte*) utoa::buffer#2
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const signed word) atoi::res#0
Inlining constant with var siblings (const byte) atoi::negative#0
Inlining constant with var siblings (const byte) atoi::i#0
Inlining constant with var siblings (const byte) atoi::negative#1
Inlining constant with var siblings (const to_nomodify byte*) atoi::str#0
Inlining constant with var siblings (const to_nomodify byte*) atoi::str#1
Inlining constant with var siblings (const byte) atoi::i#1
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const byte*) printf_str::str#2
Inlining constant with var siblings (const byte*) printf_str::str#3
Inlining constant with var siblings (const byte*) printf_str::str#1
Inlining constant with var siblings (const byte) printf_sint::format_min_length#0
Inlining constant with var siblings (const byte) printf_sint::format_justify_left#0
Inlining constant with var siblings (const byte) printf_sint::format_sign_always#0
Inlining constant with var siblings (const byte) printf_sint::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_sint::format_upper_case#0
Inlining constant with var siblings (const byte) printf_sint::format_radix#0
Inlining constant with var siblings (const byte) printf_sint::format_min_length#1
Inlining constant with var siblings (const byte) printf_sint::format_justify_left#1
Inlining constant with var siblings (const byte) printf_sint::format_sign_always#1
Inlining constant with var siblings (const byte) printf_sint::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_sint::format_upper_case#1
Inlining constant with var siblings (const byte) printf_sint::format_radix#1
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined utoa::digit_values#4 = (const word*) RADIX_BINARY_VALUES
Constant inlined utoa::digit_values#2 = (const word*) RADIX_HEXADECIMAL_VALUES
Constant inlined utoa::digit_values#3 = (const word*) RADIX_OCTAL_VALUES
Constant inlined main::str3 = (const byte*) main::str1
Constant inlined utoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined utoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memset::num#1 = (byte) $28
Constant inlined memset::num#0 = (word)(number) $28*(number) $19
Constant inlined strlen::len#0 = (word) 0
Constant inlined atoi::negative#1 = (byte) 1
Constant inlined atoi::negative#0 = (byte) 0
Constant inlined memcpy::$2 = (byte*)(const void*) memcpy::source#0
Constant inlined atoi::str#0 = (const byte*) main::str
Constant inlined atoi::str#1 = (const byte*) main::str2
Constant inlined printf_sint::format_radix#1 = (const byte) DECIMAL
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined printf_sint::format_radix#0 = (const byte) DECIMAL
Constant inlined printf_sint::format_justify_left#1 = (byte) 0
Constant inlined printf_sint::format_justify_left#0 = (byte) 0
Constant inlined printf_sint::format_sign_always#1 = (byte) 0
Constant inlined utoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_sint::format_sign_always#0 = (byte) 0
Constant inlined utoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined utoa::max_digits#1 = (byte) 5
Constant inlined utoa::max_digits#2 = (byte) 4
Constant inlined utoa::max_digits#3 = (byte) 6
Constant inlined printf_sint::format_min_length#0 = (byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined utoa::max_digits#4 = (byte) $10
Constant inlined printf_sint::format_min_length#1 = (byte) 0
Constant inlined memset::c#1 = (byte) ' '
Constant inlined printf_sint::format_upper_case#1 = (byte) 0
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined printf_sint::format_upper_case#0 = (byte) 0
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined memcpy::dst#0 = (byte*)(const void*) memcpy::destination#0
Constant inlined strlen::str#1 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined memcpy::src#0 = (byte*)(const void*) memcpy::source#0
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined printf_sint::format_zero_padding#0 = (byte) 0
Constant inlined printf_sint::format_zero_padding#1 = (byte) 0
Constant inlined strupr::str#0 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined memset::str#1 = (void*)(number) $400+(number) $28*(number) $19-(number) $28
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined memset::str#0 = (void*) 1024
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined utoa::started#1 = (byte) 1
Constant inlined utoa::started#0 = (byte) 0
Constant inlined atoi::i#0 = (byte) 0
Constant inlined atoi::i#1 = ++(byte) 0
Constant inlined atoi::res#0 = (signed word) 0
Constant inlined printf_str::str#2 = (const byte*) main::str1
Constant inlined printf_str::str#1 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined printf_str::str#3 = (const byte*) main::str1
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [39] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [40] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [41] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Alias atoi::$3 = atoi::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Identical Phi Values (byte) printf_sint::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_sint::format_radix#2 (const byte) DECIMAL
Identical Phi Values (byte) printf_sint::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_sint::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_sint::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_sint::format_upper_case#2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) utoa::radix#0 = DECIMAL
Constant (const byte) printf_number_buffer::format_min_length#0 = 0
Constant (const byte) printf_number_buffer::format_justify_left#0 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = 0
Constant (const byte) printf_number_buffer::format_upper_case#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (signed byte)printf_number_buffer::format_min_length#0 in [153] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(const byte) printf_number_buffer::format_min_length#0 - (signed byte) printf_number_buffer::len#2
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [32] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [33] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [34] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [35] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
if() condition always true - replacing block destination [131] if((byte) 0==(byte) 0) goto printf_sint::@2
if() condition always true - replacing block destination [144] if((byte) 0==(const byte) printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
if() condition always false - eliminating [146] if((byte) 0!=(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
if() condition always true - replacing block destination [159] if((byte) 0==(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
if() condition always true - replacing block destination [162] if((byte) 0==(const byte) printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
if() condition always true - replacing block destination [166] if((byte) 0==(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
if() condition always false - eliminating [187] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
if() condition always false - eliminating [190] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (signed byte)(const byte) printf_number_buffer::format_min_length#0 in [153] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(const byte) printf_number_buffer::format_min_length#0 - (signed byte) printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero printf_number_buffer::len#2 in [153] (signed byte) printf_number_buffer::padding#1 ← (signed byte) 0 - (signed byte) printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) HEXADECIMAL
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const byte) printf_number_buffer::format_min_length#0
Eliminating unused constant (const byte) printf_number_buffer::format_justify_left#0
Eliminating unused constant (const byte) printf_number_buffer::format_zero_padding#0
Eliminating unused constant (const byte) printf_number_buffer::format_upper_case#0
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) toupper::return#0 from unused block toupper::@1
Eliminating variable (byte) toupper::return#2 from unused block toupper::@return
Eliminating variable (byte*) strupr::src#2 from unused block strupr::@1
Eliminating variable (byte) toupper::ch#0 from unused block strupr::@2
Eliminating variable (byte) toupper::return#3 from unused block strupr::@2
Eliminating variable (byte~) strupr::$0 from unused block strupr::@4
Eliminating variable (byte*) strupr::src#1 from unused block strupr::@4
Eliminating variable (byte*) strlen::str#2 from unused block strlen::@1
Eliminating variable (word) strlen::len#2 from unused block strlen::@1
Eliminating variable (word) strlen::len#1 from unused block strlen::@2
Eliminating variable (byte*) strlen::str#0 from unused block strlen::@2
Eliminating variable (word) strlen::return#2 from unused block printf_number_buffer::@6
Eliminating variable (word~) printf_number_buffer::$19 from unused block printf_number_buffer::@15
Eliminating variable (signed byte) printf_number_buffer::len#0 from unused block printf_number_buffer::@15
Eliminating variable (signed byte) printf_number_buffer::len#2 from unused block printf_number_buffer::@13
Eliminating variable (signed byte) printf_number_buffer::padding#1 from unused block printf_number_buffer::@13
Eliminating variable (signed byte) printf_number_buffer::len#1 from unused block printf_number_buffer::@7
Eliminating variable (byte) printf_padding::length#1 from unused block printf_number_buffer::@10
Eliminating variable (byte) printf_padding::length#2 from unused block printf_number_buffer::@12
Removing unused procedure toupper
Removing unused procedure block toupper
Removing unused procedure block toupper::@1
Removing PHI-reference to removed block (toupper::@1) in block toupper::@return
Removing unused procedure block toupper::@2
Removing PHI-reference to removed block (toupper::@2) in block toupper::@return
Removing unused procedure block toupper::@return
Removing unused procedure block toupper::@3
Removing unused procedure strupr
Removing unused procedure block strupr
Removing PHI-reference to removed block (strupr) in block strupr::@1
Removing unused procedure block strupr::@1
Removing unused procedure block strupr::@2
Removing unused procedure block strupr::@4
Removing unused procedure block strupr::@3
Removing unused procedure block strupr::@return
Removing unused procedure strlen
Removing unused procedure block strlen
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing unused procedure block strlen::@1
Removing unused procedure block strlen::@2
Removing unused procedure block strlen::@3
Removing unused procedure block strlen::@return
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (printf_sint::@4) in block printf_sint::@2
Removing unused block printf_sint::@4
Removing unused block printf_number_buffer::@6
Removing PHI-reference to removed block (printf_number_buffer::@15) in block printf_number_buffer::@13
Removing unused block printf_number_buffer::@15
Removing PHI-reference to removed block (printf_number_buffer::@13) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@13
Removing unused block printf_number_buffer::@7
Removing PHI-reference to removed block (printf_number_buffer::@14) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@14
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing unused block printf_number_buffer::@10
Removing unused block printf_number_buffer::@18
Removing unused block printf_number_buffer::@11
Removing unused block printf_number_buffer::@20
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing unused block printf_number_buffer::@12
Removing unused block printf_number_buffer::@21
Removing unused block printf_number_buffer::@24
Removing unused block printf_number_buffer::@25
Removing unused block printf_number_buffer::@26
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Identical Phi Values (byte) utoa::max_digits#7 (byte) 5
Identical Phi Values (word*) utoa::digit_values#8 (const word*) RADIX_DECIMAL_VALUES
Identical Phi Values (byte) printf_padding::length#4 (byte) printf_padding::length#0
Identical Phi Values (byte) printf_padding::pad#5 (byte) ' '
Identical Phi Values (signed byte) printf_number_buffer::padding#10 (signed byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [17] (byte~) utoa::$4 ← (byte) 5 - (byte) 1
Constant right-side identified [113] (byte) printf_padding::length#0 ← (byte)(signed byte) 0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) utoa::$4 = 5-1
Constant (const byte) printf_char::ch#0 = ' '
Constant (const byte) printf_padding::length#0 = (byte)0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [85] if((byte) printf_padding::i#2<(const byte) printf_padding::length#0) goto printf_padding::@2
if() condition always false - eliminating [133] if((signed byte) 0!=(signed byte) 0) goto printf_number_buffer::@8
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)(signed byte) 0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Eliminating unused constant (const byte) printf_padding::length#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) printf_padding::i#2 from unused block printf_padding::@1
Eliminating variable (byte) printf_padding::i#1 from unused block printf_padding::@3
Removing unused procedure printf_padding
Removing unused procedure block printf_padding
Removing PHI-reference to removed block (printf_padding) in block printf_padding::@1
Removing unused procedure block printf_padding::@1
Removing unused procedure block printf_padding::@2
Removing PHI-reference to removed block (printf_padding::@2) in block printf_char
Removing unused procedure block printf_padding::@3
Removing unused procedure block printf_padding::@return
Removing unused block printf_number_buffer::@8
Removing unused block printf_number_buffer::@16
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte) printf_char::ch#0
Constant inlined utoa::$4 = (byte) 5-(byte) 1
Constant inlined printf_char::ch#0 = (byte) ' '
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Alias candidate removed (volatile)printf_cursor_ptr = printf_char::$6 printf_ln::$1 
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of printf_str::@4
Adding NOP phi() at start of printf_char::@2
Adding NOP phi() at start of printf_char::@3
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of printf_sint::@6
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@1
Adding NOP phi() at start of printf_number_buffer::@23
Adding NOP phi() at start of printf_number_buffer::@22
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@3
Adding NOP phi() at start of printf_number_buffer::@4
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@19
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of atoi::@2
Adding NOP phi() at start of printf_cls
CALL GRAPH
Calls in [] to main:5 
Calls in [main] to printf_cls:9 atoi:11 printf_sint:15 printf_str:17 atoi:19 printf_sint:23 printf_str:25 
Calls in [printf_str] to printf_char:38 printf_ln:41 
Calls in [printf_char] to memcpy:58 memset:60 
Calls in [printf_sint] to utoa:92 printf_number_buffer:94 
Calls in [printf_number_buffer] to printf_char:107 printf_str:112 
Calls in [utoa] to utoa_append:141 
Calls in [printf_cls] to memset:177 

Created 25 initial phi equivalence classes
Coalesced [14] printf_sint::value#8 ← printf_sint::value#1
Coalesced [22] printf_sint::value#9 ← printf_sint::value#2
Coalesced [29] printf_str::str#12 ← printf_str::str#6
Coalesced [37] printf_char::ch#5 ← printf_char::ch#1
Coalesced [39] printf_str::str#14 ← printf_str::str#0
Coalesced (already) [42] printf_str::str#13 ← printf_str::str#0
Coalesced [75] memset::dst#5 ← memset::dst#1
Coalesced [84] memcpy::src#4 ← memcpy::src#1
Coalesced [85] memcpy::dst#4 ← memcpy::dst#1
Coalesced [89] printf_sint::value#11 ← printf_sint::value#3
Coalesced [99] printf_sint::value#10 ← printf_sint::value#0
Coalesced [106] printf_char::ch#4 ← printf_char::ch#2
Coalesced [117] utoa::value#17 ← utoa::value#1
Coalesced [129] utoa::value#18 ← utoa::value#2
Coalesced [130] utoa::started#6 ← utoa::started#2
Coalesced [131] utoa::buffer#23 ← utoa::buffer#11
Coalesced [134] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [135] utoa::value#16 ← utoa::value#6
Coalesced (already) [136] utoa::started#5 ← utoa::started#4
Coalesced (already) [137] utoa::buffer#22 ← utoa::buffer#14
Coalesced [145] utoa::value#19 ← utoa::value#0
Coalesced [146] utoa::buffer#24 ← utoa::buffer#4
Coalesced [147] utoa_append::value#6 ← utoa_append::value#0
Coalesced [154] utoa_append::value#7 ← utoa_append::value#1
Coalesced [155] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [162] atoi::return#9 ← atoi::res#2
Coalesced [166] atoi::return#8 ← atoi::return#0
Coalesced [173] atoi::i#6 ← atoi::i#2
Coalesced [174] atoi::res#8 ← atoi::res#1
Coalesced (already) [175] atoi::negative#5 ← atoi::negative#2
Coalesced down to 19 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@7
Culled Empty Block (label) printf_str::@7
Culled Empty Block (label) printf_str::@6
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) printf_sint::@3
Culled Empty Block (label) printf_sint::@6
Culled Empty Block (label) printf_number_buffer::@1
Culled Empty Block (label) printf_number_buffer::@23
Culled Empty Block (label) printf_number_buffer::@22
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@3
Culled Empty Block (label) printf_number_buffer::@4
Culled Empty Block (label) printf_number_buffer::@19
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) atoi::@6
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block printf_sint::@5 to printf_sint::@3
Renumbering block printf_number_buffer::@2 to printf_number_buffer::@1
Renumbering block printf_number_buffer::@5 to printf_number_buffer::@2
Renumbering block printf_number_buffer::@9 to printf_number_buffer::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of printf_str::@4
Adding NOP phi() at start of printf_char::@2
Adding NOP phi() at start of printf_char::@3
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@2
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of atoi::@2
Adding NOP phi() at start of printf_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] phi()
  [5] call main 
  to:@end
@end: scope:[]  from @2
  [6] phi()

(void()) main()
main: scope:[main]  from @2
  [7] phi()
  [8] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [9] phi()
  [10] call atoi 
  [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3
  [13] call printf_sint 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call atoi 
  [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4
  [20] call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] phi()
  [22] call printf_str 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [23] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@3 main::@6 printf_number_buffer::@2
  [24] (byte*) printf_str::str#6 ← phi( main::@3/(const byte*) main::str1 main::@6/(const byte*) main::str1 printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [25] (byte*) printf_str::str#4 ← phi( printf_str/(byte*) printf_str::str#6 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4)
  [27] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4
  [28] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [29] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [30] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [31] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [32] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [33] phi()
  [34] call printf_ln 
  to:printf_str::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [38] (byte) printf_cursor_x ← (byte) 0
  [39] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [40] return 
  to:@return

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@3 printf_str::@5
  [41] (byte) printf_char::ch#3 ← phi( printf_number_buffer::@3/(byte) printf_char::ch#2 printf_str::@5/(byte) printf_char::ch#1 )
  [42] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  [43] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [44] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [45] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [46] (byte) printf_cursor_x ← (byte) 0
  [47] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [48] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return
  to:printf_char::@2
printf_char::@2: scope:[printf_char]  from printf_char::@1
  [49] phi()
  [50] call memcpy 
  to:printf_char::@3
printf_char::@3: scope:[printf_char]  from printf_char::@2
  [51] phi()
  [52] call memset 
  to:printf_char::@4
printf_char::@4: scope:[printf_char]  from printf_char::@3
  [53] (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (byte) $28
  [54] (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6
  [55] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1 printf_char::@4
  [56] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_char::@3 printf_cls
  [57] (byte) memset::c#4 ← phi( printf_char::@3/(byte) ' ' printf_cls/(byte) ' ' )
  [57] (void*) memset::str#3 ← phi( printf_char::@3/(void*)(number) $400+(number) $28*(number) $19-(number) $28 printf_cls/(void*) 1024 )
  [57] (word) memset::num#2 ← phi( printf_char::@3/(byte) $28 printf_cls/(word)(number) $28*(number) $19 )
  [58] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [59] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [60] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [61] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [62] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [63] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [64] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [65] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_char::@2
  [66] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [67] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [67] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [68] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [69] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [70] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [71] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [72] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@2 main::@5
  [73] (signed word) printf_sint::value#3 ← phi( main::@2/(signed word) printf_sint::value#1 main::@5/(signed word) printf_sint::value#2 )
  [74] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [75] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [76] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3
  [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [78] (signed word) printf_sint::value#5 ← phi( printf_sint::@1/(signed word) printf_sint::value#0 printf_sint/(signed word) printf_sint::value#3 )
  [79] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5
  [80] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [81] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [82] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [83] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [84] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [85] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [86] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#0
  [87] call printf_char 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [88] phi()
  [89] call printf_str 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [90] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [91] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [92] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [92] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [92] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [92] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [93] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [94] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [95] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [96] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [97] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [98] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [99] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [100] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [101] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [102] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [103] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [103] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [103] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [104] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [105] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [106] (word) utoa_append::value#0 ← (word) utoa::value#2
  [107] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [108] call utoa_append 
  [109] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [110] (word) utoa::value#0 ← (word) utoa_append::return#0
  [111] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [112] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [113] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [113] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [114] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [115] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [116] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [117] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [118] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(signed word()) atoi((to_nomodify byte*) atoi::str)
atoi: scope:[atoi]  from main::@1 main::@4
  [119] (to_nomodify byte*) atoi::str#2 ← phi( main::@1/(const byte*) main::str main::@4/(const byte*) main::str2 )
  [120] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3
  to:atoi::@2
atoi::@2: scope:[atoi]  from atoi
  [121] phi()
  to:atoi::@3
atoi::@3: scope:[atoi]  from atoi atoi::@2 atoi::@4
  [122] (byte) atoi::negative#2 ← phi( atoi/(byte) 0 atoi::@2/(byte) 1 atoi::@4/(byte) atoi::negative#2 )
  [122] (signed word) atoi::res#2 ← phi( atoi/(signed word) 0 atoi::@2/(signed word) 0 atoi::@4/(signed word) atoi::res#1 )
  [122] (byte) atoi::i#4 ← phi( atoi/(byte) 0 atoi::@2/(byte) 1 atoi::@4/(byte) atoi::i#2 )
  [123] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4
  to:atoi::@5
atoi::@5: scope:[atoi]  from atoi::@3
  [124] if((byte) 0!=(byte) atoi::negative#2) goto atoi::@1
  to:atoi::@return
atoi::@1: scope:[atoi]  from atoi::@5
  [125] (signed word) atoi::return#0 ← - (signed word) atoi::res#2
  to:atoi::@return
atoi::@return: scope:[atoi]  from atoi::@1 atoi::@5
  [126] (signed word) atoi::return#2 ← phi( atoi::@1/(signed word) atoi::return#0 atoi::@5/(signed word) atoi::res#2 )
  [127] return 
  to:@return
atoi::@4: scope:[atoi]  from atoi::@3
  [128] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2
  [129] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2
  [130] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1
  [131] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)
  [132] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0'
  [133] (byte) atoi::i#2 ← ++ (byte) atoi::i#4
  to:atoi::@3

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [134] phi()
  [135] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [136] (byte*) printf_cursor_ptr ← (byte*) 1024
  [137] (byte) printf_cursor_x ← (byte) 0
  [138] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [139] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(signed word()) atoi((to_nomodify byte*) atoi::str)
(signed word~) atoi::$3 2002.0
(signed word~) atoi::$4 2002.0
(signed word~) atoi::$8 2002.0
(signed word~) atoi::$9 2002.0
(byte) atoi::i
(byte) atoi::i#2 2002.0
(byte) atoi::i#4 572.0
(byte) atoi::negative
(byte) atoi::negative#2 262.875
(signed word) atoi::res
(signed word) atoi::res#1 1001.0
(signed word) atoi::res#2 801.25
(signed word) atoi::return
(signed word) atoi::return#0 202.0
(signed word) atoi::return#2 56.0
(signed word) atoi::return#3 22.0
(signed word) atoi::return#4 22.0
(to_nomodify byte*) atoi::str
(to_nomodify byte*) atoi::str#2 191.1818181818182
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.000000001E9
(byte*) memcpy::dst#2 1.000000001E9
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(byte*) memcpy::src
(byte*) memcpy::src#1 2.000000002E9
(byte*) memcpy::src#2 1.000000001E9
(byte*) memcpy::src_end
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.25000000125E8
(byte*) memset::dst
(byte*) memset::dst#1 2.000000002E9
(byte*) memset::dst#2 1.3366666683333335E9
(byte*) memset::dst#4 2.0000002E7
(byte*) memset::end
(byte*) memset::end#0 1.683333336666667E8
(word) memset::num
(word) memset::num#2 1.0000001E7
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte*~) printf_char::$6 2000002.0
(byte) printf_char::ch
(byte) printf_char::ch#1 200002.0
(byte) printf_char::ch#2 2002.0
(byte) printf_char::ch#3 1101003.0
(void()) printf_cls()
(byte*) printf_cursor_ptr loadstore 106062.27272727274
(byte) printf_cursor_x loadstore 92309.36923076924
(byte) printf_cursor_y loadstore 104479.25373134328
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 2000002.0
(byte*~) printf_ln::$1 2000002.0
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 701.0
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_zero_padding
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::padding
(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
(struct printf_format_number) printf_sint::format
(byte) printf_sint::format_justify_left
(byte) printf_sint::format_min_length
(byte) printf_sint::format_radix
(byte) printf_sint::format_sign_always
(byte) printf_sint::format_upper_case
(byte) printf_sint::format_zero_padding
(word) printf_sint::uvalue
(signed word) printf_sint::value
(signed word) printf_sint::value#0 101.0
(signed word) printf_sint::value#1 22.0
(signed word) printf_sint::value#2 22.0
(signed word) printf_sint::value#3 108.33333333333331
(signed word) printf_sint::value#5 202.0
(void()) printf_str((byte*) printf_str::str)
(byte) printf_str::ch
(byte) printf_str::ch#0 100001.0
(byte*) printf_str::str
(byte*) printf_str::str#0 42857.57142857143
(byte*) printf_str::str#4 205002.5
(byte*) printf_str::str#6 10001.0
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 20002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 3000.4285714285716
(byte*) utoa::buffer#14 15001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 20002.0
(byte) utoa::digit#2 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 5000.5
(byte) utoa::started#4 10001.0
(word) utoa::value
(word) utoa::value#0 10001.0
(word) utoa::value#1 551.0
(word) utoa::value#2 5857.857142857143
(word) utoa::value#6 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.0000001E7
(byte) utoa_append::digit#2 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 36667.33333333333
(word) utoa_append::value#1 2.0000002E7
(word) utoa_append::value#2 5018334.166666666

Initial phi equivalence classes
[ printf_str::str#4 printf_str::str#6 printf_str::str#0 ]
[ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ atoi::str#2 ]
[ atoi::i#4 atoi::i#2 ]
[ atoi::negative#2 ]
[ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ]
Added variable printf_cursor_x to live range equivalence class [ printf_cursor_x ]
Added variable printf_cursor_y to live range equivalence class [ printf_cursor_y ]
Added variable printf_cursor_ptr to live range equivalence class [ printf_cursor_ptr ]
Added variable atoi::return#3 to live range equivalence class [ atoi::return#3 ]
Added variable atoi::return#4 to live range equivalence class [ atoi::return#4 ]
Added variable printf_str::ch#0 to live range equivalence class [ printf_str::ch#0 ]
Added variable printf_ln::$0 to live range equivalence class [ printf_ln::$0 ]
Added variable printf_ln::$1 to live range equivalence class [ printf_ln::$1 ]
Added variable printf_char::$6 to live range equivalence class [ printf_char::$6 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable printf_number_buffer::buffer_sign#0 to live range equivalence class [ printf_number_buffer::buffer_sign#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable atoi::$8 to live range equivalence class [ atoi::$8 ]
Added variable atoi::$9 to live range equivalence class [ atoi::$9 ]
Added variable atoi::$3 to live range equivalence class [ atoi::$3 ]
Added variable atoi::$4 to live range equivalence class [ atoi::$4 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ printf_str::str#4 printf_str::str#6 printf_str::str#0 ]
[ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ atoi::str#2 ]
[ atoi::i#4 atoi::i#2 ]
[ atoi::negative#2 ]
[ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ]
[ printf_cursor_x ]
[ printf_cursor_y ]
[ printf_cursor_ptr ]
[ atoi::return#3 ]
[ atoi::return#4 ]
[ printf_str::ch#0 ]
[ printf_ln::$0 ]
[ printf_ln::$1 ]
[ printf_char::$6 ]
[ memset::end#0 ]
[ printf_number_buffer::buffer_sign#0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ atoi::$8 ]
[ atoi::$9 ]
[ atoi::$3 ]
[ atoi::$4 ]
[ printf_buffer ]
Allocated zp[2]:2 [ printf_str::str#4 printf_str::str#6 printf_str::str#0 ]
Allocated zp[1]:4 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ]
Allocated zp[2]:5 [ memset::num#2 ]
Allocated zp[2]:7 [ memset::str#3 ]
Allocated zp[1]:9 [ memset::c#4 ]
Allocated zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:12 [ memcpy::src#2 memcpy::src#1 ]
Allocated zp[2]:14 [ memcpy::dst#2 memcpy::dst#1 ]
Allocated zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ]
Allocated zp[1]:18 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:19 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:21 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:24 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:26 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:27 [ atoi::str#2 ]
Allocated zp[1]:29 [ atoi::i#4 atoi::i#2 ]
Allocated zp[1]:30 [ atoi::negative#2 ]
Allocated zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ]
Allocated zp[1]:33 [ printf_cursor_x ]
Allocated zp[1]:34 [ printf_cursor_y ]
Allocated zp[2]:35 [ printf_cursor_ptr ]
Allocated zp[2]:37 [ atoi::return#3 ]
Allocated zp[2]:39 [ atoi::return#4 ]
Allocated zp[1]:41 [ printf_str::ch#0 ]
Allocated zp[2]:42 [ printf_ln::$0 ]
Allocated zp[2]:44 [ printf_ln::$1 ]
Allocated zp[2]:46 [ printf_char::$6 ]
Allocated zp[2]:48 [ memset::end#0 ]
Allocated zp[1]:50 [ printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:51 [ utoa::$11 ]
Allocated zp[2]:52 [ utoa::buffer#3 ]
Allocated zp[1]:54 [ utoa::$10 ]
Allocated zp[2]:55 [ utoa::digit_value#0 ]
Allocated zp[2]:57 [ utoa_append::buffer#0 ]
Allocated zp[2]:59 [ utoa_append::sub#0 ]
Allocated zp[2]:61 [ utoa_append::return#0 ]
Allocated zp[2]:63 [ atoi::$8 ]
Allocated zp[2]:65 [ atoi::$9 ]
Allocated zp[2]:67 [ atoi::$3 ]
Allocated zp[2]:69 [ atoi::$4 ]
Allocated mem[12] [ printf_buffer ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test atoi()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .label printf_cursor_x = $21
  .label printf_cursor_y = $22
  .label printf_cursor_ptr = $23
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  lda #0
  sta.z printf_cursor_y
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // [4] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [5] call main 
  // [7] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [6] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [8] call printf_cls 
    // [134] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [9] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [10] call atoi 
    // [119] phi from main::@1 to atoi [phi:main::@1->atoi]
  atoi_from___b1:
    // [119] phi (to_nomodify byte*) atoi::str#2 = (const byte*) main::str [phi:main::@1->atoi#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z atoi.str
    lda #>str
    sta.z atoi.str+1
    jsr atoi
    // [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2 -- vwsz1=vwsz2 
    lda.z atoi.return
    sta.z atoi.return_1
    lda.z atoi.return+1
    sta.z atoi.return_1+1
    jmp __b2
    // main::@2
  __b2:
    // [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3 -- vwsz1=vwsz2 
    lda.z atoi.return_1
    sta.z printf_sint.value
    lda.z atoi.return_1+1
    sta.z printf_sint.value+1
    // [13] call printf_sint 
    // [73] phi from main::@2 to printf_sint [phi:main::@2->printf_sint]
  printf_sint_from___b2:
    // [73] phi (signed word) printf_sint::value#3 = (signed word) printf_sint::value#1 [phi:main::@2->printf_sint#0] -- register_copy 
    jsr printf_sint
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_str 
    // [24] phi from main::@3 to printf_str [phi:main::@3->printf_str]
  printf_str_from___b3:
    // [24] phi (byte*) printf_str::str#6 = (const byte*) main::str1 [phi:main::@3->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [16] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [17] call atoi 
    // [119] phi from main::@4 to atoi [phi:main::@4->atoi]
  atoi_from___b4:
    // [119] phi (to_nomodify byte*) atoi::str#2 = (const byte*) main::str2 [phi:main::@4->atoi#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z atoi.str
    lda #>str2
    sta.z atoi.str+1
    jsr atoi
    // [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2 -- vwsz1=vwsz2 
    lda.z atoi.return
    sta.z atoi.return_2
    lda.z atoi.return+1
    sta.z atoi.return_2+1
    jmp __b5
    // main::@5
  __b5:
    // [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4 -- vwsz1=vwsz2 
    lda.z atoi.return_2
    sta.z printf_sint.value
    lda.z atoi.return_2+1
    sta.z printf_sint.value+1
    // [20] call printf_sint 
    // [73] phi from main::@5 to printf_sint [phi:main::@5->printf_sint]
  printf_sint_from___b5:
    // [73] phi (signed word) printf_sint::value#3 = (signed word) printf_sint::value#2 [phi:main::@5->printf_sint#0] -- register_copy 
    jsr printf_sint
    // [21] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [22] call printf_str 
    // [24] phi from main::@6 to printf_str [phi:main::@6->printf_str]
  printf_str_from___b6:
    // [24] phi (byte*) printf_str::str#6 = (const byte*) main::str1 [phi:main::@6->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    jmp __breturn
    // main::@return
  __breturn:
    // [23] return 
    rts
    str: .text "1234"
    .byte 0
    str1: .text @"\n"
    .byte 0
    str2: .text "-5678"
    .byte 0
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp(2) str)
printf_str: {
    .label ch = $29
    .label str = 2
    // [25] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b4:
  __b1_from___b5:
    // [25] phi (byte*) printf_str::str#4 = (byte*) printf_str::str#6 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    jmp __b2
    // printf_str::@2
  __b2:
    // [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [27] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [28] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b3
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [29] return 
    rts
    // printf_str::@3
  __b3:
    // [30] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z ch
    beq __b4_from___b3
    jmp __b5
    // printf_str::@5
  __b5:
    // [31] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0 -- vbuz1=vbuz2 
    lda.z ch
    sta.z printf_char.ch
    // [32] call printf_char 
    // [41] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
  printf_char_from___b5:
    // [41] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b1_from___b5
    // [33] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
  __b4_from___b3:
    jmp __b4
    // printf_str::@4
  __b4:
    // [34] call printf_ln 
    jsr printf_ln
    jmp __b1_from___b4
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = $2a
    .label __1 = $2c
    // [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z printf_cursor_ptr
    sbc.z printf_cursor_x
    sta.z __0
    lda.z printf_cursor_ptr+1
    sbc #0
    sta.z __0+1
    // [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __0
    sta.z __1
    lda #0
    adc.z __0+1
    sta.z __1+1
    // [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z printf_cursor_ptr
    lda.z __1+1
    sta.z printf_cursor_ptr+1
    // [38] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [39] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [40] return 
    rts
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte zp(4) ch)
printf_char: {
    .label __6 = $2e
    .label ch = 4
    // [42] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (printf_cursor_ptr),y
    // [43] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // [44] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [45] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    jmp __b1
    // printf_char::@1
  __b1:
    // [46] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [47] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [48] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [49] phi from printf_char::@1 to printf_char::@2 [phi:printf_char::@1->printf_char::@2]
  __b2_from___b1:
    jmp __b2
    // printf_char::@2
  __b2:
    // [50] call memcpy 
    // [66] phi from printf_char::@2 to memcpy [phi:printf_char::@2->memcpy]
  memcpy_from___b2:
    jsr memcpy
    // [51] phi from printf_char::@2 to printf_char::@3 [phi:printf_char::@2->printf_char::@3]
  __b3_from___b2:
    jmp __b3
    // printf_char::@3
  __b3:
    // [52] call memset 
    // [57] phi from printf_char::@3 to memset [phi:printf_char::@3->memset]
  memset_from___b3:
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_char::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [57] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_char::@3->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [57] phi (word) memset::num#2 = (byte) $28 [phi:printf_char::@3->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b4
    // printf_char::@4
  __b4:
    // [53] (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z printf_cursor_ptr
    sec
    sbc #<$28
    sta.z __6
    lda.z printf_cursor_ptr+1
    sbc #>$28
    sta.z __6+1
    // [54] (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z printf_cursor_ptr
    lda.z __6+1
    sta.z printf_cursor_ptr+1
    // [55] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(7) str, byte zp(9) c, word zp(5) num)
memset: {
    .label end = $30
    .label dst = $a
    .label num = 5
    .label str = 7
    .label c = 9
    // [58] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [59] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [60] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [61] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [61] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [62] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [63] return 
    rts
    // memset::@3
  __b3:
    // [64] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [65] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = $e
    .label src = $c
    // [67] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [67] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [67] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [68] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [69] return 
    rts
    // memcpy::@2
  __b2:
    // [70] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [71] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [72] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [67] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [67] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [67] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_sint
// Print a signed integer using a specific format
// printf_sint(signed word zp($10) value)
printf_sint: {
    .label value = $10
    // [74] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [75] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z value+1
    bmi __b1
    // [78] phi from printf_sint printf_sint::@1 to printf_sint::@2 [phi:printf_sint/printf_sint::@1->printf_sint::@2]
  __b2_from_printf_sint:
  __b2_from___b1:
    // [78] phi (signed word) printf_sint::value#5 = (signed word) printf_sint::value#3 [phi:printf_sint/printf_sint::@1->printf_sint::@2#0] -- register_copy 
    jmp __b2
    // printf_sint::@1
  __b1:
    // [76] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z value
    sta.z value
    lda #0
    sbc.z value+1
    sta.z value+1
    // [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' -- _deref_pbuc1=vbuc2 
    lda #'-'
    sta printf_buffer
    jmp __b2_from___b1
    // printf_sint::@2
  __b2:
    // [79] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa.value
    lda.z value+1
    sta.z utoa.value+1
    // [80] call utoa 
    // [91] phi from printf_sint::@2 to utoa [phi:printf_sint::@2->utoa]
  utoa_from___b2:
    jsr utoa
    jmp __b3
    // printf_sint::@3
  __b3:
    // [81] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [82] call printf_number_buffer 
  // Print using format
    // [84] phi from printf_sint::@3 to printf_number_buffer [phi:printf_sint::@3->printf_number_buffer]
  printf_number_buffer_from___b3:
    jsr printf_number_buffer
    jmp __breturn
    // printf_sint::@return
  __breturn:
    // [83] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($32) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label buffer_sign = $32
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [85] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [86] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#0 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z printf_char.ch
    // [87] call printf_char 
    // [41] phi from printf_number_buffer::@3 to printf_char [phi:printf_number_buffer::@3->printf_char]
  printf_char_from___b3:
    // [41] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@3->printf_char#0] -- register_copy 
    jsr printf_char
    // [88] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [89] call printf_str 
    // [24] phi from printf_number_buffer::@2 to printf_str [phi:printf_number_buffer::@2->printf_str]
  printf_str_from___b2:
    // [24] phi (byte*) printf_str::str#6 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->printf_str#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z printf_str.str
    lda #>buffer_digits
    sta.z printf_str.str+1
    jsr printf_str
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [90] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($13) value, byte* zp($34) buffer)
utoa: {
    .label __10 = $36
    .label __11 = $33
    .label digit_value = $37
    .label buffer = $34
    .label digit = $12
    .label value = $13
    .label buffer_1 = $16
    .label started = $15
    // [92] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [92] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [92] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [92] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [92] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [93] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #5-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [94] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [95] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [96] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [97] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [98] return 
    rts
    // utoa::@2
  __b2:
    // [99] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [100] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [101] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [102] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [103] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [103] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [103] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [103] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [104] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [92] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [92] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [92] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [92] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [92] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [105] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [106] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [107] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [108] call utoa_append 
    // [112] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [109] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [110] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [111] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [103] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [103] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [103] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [103] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($39) buffer, word zp($18) value, word zp($3b) sub)
utoa_append: {
    .label buffer = $39
    .label value = $18
    .label sub = $3b
    .label return = $3d
    .label digit = $1a
    // [113] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [113] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [113] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [114] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [115] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [116] return 
    rts
    // utoa_append::@2
  __b2:
    // [117] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [118] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [113] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [113] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [113] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // atoi
// Converts the string argument str to an integer.
// atoi(byte* zp($1b) str)
atoi: {
    .label __3 = $43
    .label __4 = $45
    .label res = $1f
    // Initialize sign as positive
    .label i = $1d
    .label return = $1f
    .label return_1 = $25
    .label return_2 = $27
    .label str = $1b
    // Initialize result
    .label negative = $1e
    .label __8 = $3f
    .label __9 = $41
    // [120] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'-'
    bne __b3_from_atoi
    // [121] phi from atoi to atoi::@2 [phi:atoi->atoi::@2]
  __b2_from_atoi:
    jmp __b2
    // atoi::@2
  __b2:
    // [122] phi from atoi::@2 to atoi::@3 [phi:atoi::@2->atoi::@3]
  __b3_from___b2:
    // [122] phi (byte) atoi::negative#2 = (byte) 1 [phi:atoi::@2->atoi::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta.z negative
    // [122] phi (signed word) atoi::res#2 = (signed word) 0 [phi:atoi::@2->atoi::@3#1] -- vwsz1=vwsc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [122] phi (byte) atoi::i#4 = (byte) 1 [phi:atoi::@2->atoi::@3#2] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b3
  // Iterate through all digits and update the result
    // [122] phi from atoi to atoi::@3 [phi:atoi->atoi::@3]
  __b3_from_atoi:
    // [122] phi (byte) atoi::negative#2 = (byte) 0 [phi:atoi->atoi::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z negative
    // [122] phi (signed word) atoi::res#2 = (signed word) 0 [phi:atoi->atoi::@3#1] -- vwsz1=vwsc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [122] phi (byte) atoi::i#4 = (byte) 0 [phi:atoi->atoi::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // atoi::@3
  __b3:
    // [123] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4 -- vbuc1_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (str),y
    cmp #0
    bne __b4
    jmp __b5
    // atoi::@5
  __b5:
    // [124] if((byte) 0!=(byte) atoi::negative#2) goto atoi::@1 -- vbuc1_neq_vbuz1_then_la1 
    // Return result with sign
    lda #0
    cmp.z negative
    bne __b1
    // [126] phi from atoi::@1 atoi::@5 to atoi::@return [phi:atoi::@1/atoi::@5->atoi::@return]
  __breturn_from___b1:
  __breturn_from___b5:
    // [126] phi (signed word) atoi::return#2 = (signed word) atoi::return#0 [phi:atoi::@1/atoi::@5->atoi::@return#0] -- register_copy 
    jmp __breturn
    // atoi::@1
  __b1:
    // [125] (signed word) atoi::return#0 ← - (signed word) atoi::res#2 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    jmp __breturn_from___b1
    // atoi::@return
  __breturn:
    // [127] return 
    rts
    // atoi::@4
  __b4:
    // [128] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2 -- vwsz1=vwsz2_rol_2 
    lda.z res
    asl
    sta.z __8
    lda.z res+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [129] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2 -- vwsz1=vwsz2_plus_vwsz3 
    lda.z __8
    clc
    adc.z res
    sta.z __9
    lda.z __8+1
    adc.z res+1
    sta.z __9+1
    // [130] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __9
    asl
    sta.z __3
    lda.z __9+1
    rol
    sta.z __3+1
    // [131] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4) -- vwsz1=vwsz2_plus_pbuz3_derefidx_vbuz4 
    ldy.z i
    clc
    lda.z __3
    adc (str),y
    sta.z __4
    bcc !+
    inc.z __3+1
  !:
    // [132] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0' -- vwsz1=vwsz2_minus_vbuc1 
    sec
    lda.z __4
    sbc #'0'
    sta.z res
    lda.z __4+1
    sbc #0
    sta.z res+1
    // [133] (byte) atoi::i#2 ← ++ (byte) atoi::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [122] phi from atoi::@4 to atoi::@3 [phi:atoi::@4->atoi::@3]
  __b3_from___b4:
    // [122] phi (byte) atoi::negative#2 = (byte) atoi::negative#2 [phi:atoi::@4->atoi::@3#0] -- register_copy 
    // [122] phi (signed word) atoi::res#2 = (signed word) atoi::res#1 [phi:atoi::@4->atoi::@3#1] -- register_copy 
    // [122] phi (byte) atoi::i#4 = (byte) atoi::i#2 [phi:atoi::@4->atoi::@3#2] -- register_copy 
    jmp __b3
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [135] call memset 
    // [57] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [57] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [57] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [136] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // [137] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [138] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_y
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [139] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#3 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#3 printf_buffer ] { { atoi::return#2 = atoi::return#3 } }  ) always clobbers reg byte a 
Statement [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#1 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#1 printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  ) always clobbers reg byte a 
Statement [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#4 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#4 printf_buffer ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#2 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#2 printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] ( main:5::printf_str:15 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { }  main:5::printf_str:22 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [38] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [42] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [45] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [46] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [48] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [53] (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_x printf_cursor_y printf_char::$6 ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [54] (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [58] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ memset::c#4 ]
Statement [59] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [60] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [62] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [64] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:9 [ memset::c#4 ]
Statement [68] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_str:15::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memcpy:50 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [70] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_str:15::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memcpy:50 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [74] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [75] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [76] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [79] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::value#1 ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::value#1 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::value#1 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [94] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [95] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [96] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [97] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [99] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ utoa::started#2 utoa::started#4 ]
Statement [100] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [102] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [105] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [106] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [107] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [109] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [110] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [114] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:5::printf_sint:13::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [115] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:5::printf_sint:13::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:18 [ utoa::digit#2 utoa::digit#1 ]
Statement [118] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:5::printf_sint:13::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [120] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3 [ atoi::str#2 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [123] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4 [ atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ atoi::i#4 atoi::i#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:30 [ atoi::negative#2 ]
Statement [125] (signed word) atoi::return#0 ← - (signed word) atoi::res#2 [ atoi::return#0 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::return#0 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::return#0 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [128] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2 [ atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 atoi::$8 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 atoi::$8 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 atoi::$8 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [129] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2 [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$9 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$9 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$9 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [130] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1 [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$3 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$3 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$3 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [131] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4) [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$4 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$4 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$4 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [132] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0' [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::res#1 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::res#1 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::res#1 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [136] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [137] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [138] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [1] (byte) printf_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) printf_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#3 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#3 printf_buffer ] { { atoi::return#2 = atoi::return#3 } }  ) always clobbers reg byte a 
Statement [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#1 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#1 printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  ) always clobbers reg byte a 
Statement [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#4 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr atoi::return#4 printf_buffer ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#2 printf_buffer ] ( main:5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#2 printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4) [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] ( main:5::printf_str:15 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { }  main:5::printf_str:22 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr printf_str::str#4 printf_str::ch#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x [ printf_cursor_y printf_ln::$0 ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_y printf_ln::$0 ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 [ printf_cursor_y printf_ln::$1 ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_y printf_ln::$1 ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_ln::$1 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1 [ printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [38] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_str:22::printf_ln:34 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_ln:34 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [42] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [45] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [46] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [48] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [53] (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (byte) $28 [ printf_cursor_x printf_cursor_y printf_char::$6 ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_char::$6 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [54] (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_str:15::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [58] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::num#2 memset::str#3 memset::c#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [59] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::str#3 memset::c#4 memset::end#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [60] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#4 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [62] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [64] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:5::printf_str:15::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memset:52 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memset:52 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memset:52 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memset::c#4 memset::end#0 memset::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_cls:8::memset:135 [ printf_buffer memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [68] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_str:15::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memcpy:50 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [70] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:5::printf_str:15::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_str:22::printf_char:32::memcpy:50 [ printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_str:89::printf_char:32::memcpy:50 [ printf_buffer printf_str::str#0 printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#1 = printf_char::ch#3 printf_str::ch#0 } }  main:5::printf_sint:13::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  main:5::printf_sint:20::printf_number_buffer:82::printf_char:87::memcpy:50 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr memcpy::src#2 memcpy::dst#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { printf_char::ch#2 = printf_char::ch#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [74] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [75] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_sint::value#3 printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [76] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer printf_sint::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [79] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::value#1 ] ( main:5::printf_sint:13 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::value#1 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::value#1 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [94] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [95] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ printf_buffer utoa::buffer#11 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#11 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [96] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::buffer#3 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [97] *((byte*) utoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [99] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [100] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [102] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [105] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [106] (word) utoa_append::value#0 ← (word) utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [107] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [109] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [110] (word) utoa::value#0 ← (word) utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:5::printf_sint:13::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } }  main:5::printf_sint:20::utoa:80 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } }  ) always clobbers reg byte a 
Statement [114] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:5::printf_sint:13::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [115] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( main:5::printf_sint:13::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [118] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:5::printf_sint:13::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_sint::value#1 = printf_sint::value#3 atoi::return#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  main:5::printf_sint:20::utoa:80::utoa_append:108 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_sint::value#2 = printf_sint::value#3 atoi::return#4 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [120] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3 [ atoi::str#2 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a reg byte y 
Statement [123] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4 [ atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [125] (signed word) atoi::return#0 ← - (signed word) atoi::res#2 [ atoi::return#0 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::return#0 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::return#0 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [128] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2 [ atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 atoi::$8 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 atoi::$8 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::res#2 atoi::negative#2 atoi::$8 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [129] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2 [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$9 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$9 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$9 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [130] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1 [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$3 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$3 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$3 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [131] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4) [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$4 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$4 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::$4 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [132] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0' [ atoi::str#2 atoi::i#4 atoi::negative#2 atoi::res#1 ] ( main:5::atoi:10 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::res#1 ] { { atoi::return#2 = atoi::return#3 } }  main:5::atoi:17 [ printf_cursor_x printf_cursor_y printf_cursor_ptr printf_buffer atoi::str#2 atoi::i#4 atoi::negative#2 atoi::res#1 ] { { atoi::return#2 = atoi::return#4 } }  ) always clobbers reg byte a 
Statement [136] (byte*) printf_cursor_ptr ← (byte*) 1024 [ printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [137] (byte) printf_cursor_x ← (byte) 0 [ printf_cursor_x printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Statement [138] (byte) printf_cursor_y ← (byte) 0 [ printf_cursor_x printf_cursor_y printf_cursor_ptr ] ( main:5::printf_cls:8 [ printf_buffer printf_cursor_x printf_cursor_y printf_cursor_ptr ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ printf_str::str#4 printf_str::str#6 printf_str::str#0 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ memset::num#2 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ memset::str#3 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ memset::c#4 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ memcpy::src#2 memcpy::src#1 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ memcpy::dst#2 memcpy::dst#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:18 , reg byte x , 
Potential registers zp[2]:19 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ utoa::started#2 utoa::started#4 ] : zp[1]:21 , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:24 , 
Potential registers zp[1]:26 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[2]:27 [ atoi::str#2 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ atoi::i#4 atoi::i#2 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ atoi::negative#2 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ printf_cursor_x ] : zp[1]:33 , 
Potential registers zp[1]:34 [ printf_cursor_y ] : zp[1]:34 , 
Potential registers zp[2]:35 [ printf_cursor_ptr ] : zp[2]:35 , 
Potential registers zp[2]:37 [ atoi::return#3 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ atoi::return#4 ] : zp[2]:39 , 
Potential registers zp[1]:41 [ printf_str::ch#0 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:42 [ printf_ln::$0 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ printf_ln::$1 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ printf_char::$6 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ memset::end#0 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ printf_number_buffer::buffer_sign#0 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ utoa::$11 ] : zp[1]:51 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:52 [ utoa::buffer#3 ] : zp[2]:52 , 
Potential registers zp[1]:54 [ utoa::$10 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:55 [ utoa::digit_value#0 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ utoa_append::buffer#0 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ utoa_append::sub#0 ] : zp[2]:59 , 
Potential registers zp[2]:61 [ utoa_append::return#0 ] : zp[2]:61 , 
Potential registers zp[2]:63 [ atoi::$8 ] : zp[2]:63 , 
Potential registers zp[2]:65 [ atoi::$9 ] : zp[2]:65 , 
Potential registers zp[2]:67 [ atoi::$3 ] : zp[2]:67 , 
Potential registers zp[2]:69 [ atoi::$4 ] : zp[2]:69 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 3,000,000,003: zp[2]:12 [ memcpy::src#2 memcpy::src#1 ] 2,000,000,002: zp[2]:14 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplift Scope [memset] 3,356,666,672.33: zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 168,333,333.67: zp[2]:48 [ memset::end#0 ] 125,000,000.12: zp[1]:9 [ memset::c#4 ] 10,000,001: zp[2]:5 [ memset::num#2 ] 0: zp[2]:7 [ memset::str#3 ] 
Uplift Scope [utoa_append] 25,055,003.5: zp[2]:24 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,050,002.5: zp[1]:26 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,335,000.5: zp[2]:59 [ utoa_append::sub#0 ] 20,002: zp[2]:61 [ utoa_append::return#0 ] 13,750.25: zp[2]:57 [ utoa_append::buffer#0 ] 
Uplift Scope [printf_ln] 2,000,002: zp[2]:42 [ printf_ln::$0 ] 2,000,002: zp[2]:44 [ printf_ln::$1 ] 
Uplift Scope [printf_char] 2,000,002: zp[2]:46 [ printf_char::$6 ] 1,303,007: zp[1]:4 [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ] 
Uplift Scope [printf_str] 257,861.07: zp[2]:2 [ printf_str::str#4 printf_str::str#6 printf_str::str#0 ] 100,001: zp[1]:41 [ printf_str::ch#0 ] 
Uplift Scope [] 106,062.27: zp[2]:35 [ printf_cursor_ptr ] 104,479.25: zp[1]:34 [ printf_cursor_y ] 92,309.37: zp[1]:33 [ printf_cursor_x ] 0: mem[12] [ printf_buffer ] 
Uplift Scope [utoa] 38,003.93: zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 31,411.36: zp[2]:19 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 22,859.43: zp[1]:18 [ utoa::digit#2 utoa::digit#1 ] 20,002: zp[1]:54 [ utoa::$10 ] 15,001.5: zp[1]:21 [ utoa::started#2 utoa::started#4 ] 6,000.6: zp[2]:55 [ utoa::digit_value#0 ] 2,002: zp[1]:51 [ utoa::$11 ] 2,002: zp[2]:52 [ utoa::buffer#3 ] 
Uplift Scope [atoi] 2,574: zp[1]:29 [ atoi::i#4 atoi::i#2 ] 2,060.25: zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ] 2,002: zp[2]:63 [ atoi::$8 ] 2,002: zp[2]:65 [ atoi::$9 ] 2,002: zp[2]:67 [ atoi::$3 ] 2,002: zp[2]:69 [ atoi::$4 ] 262.88: zp[1]:30 [ atoi::negative#2 ] 191.18: zp[2]:27 [ atoi::str#2 ] 22: zp[2]:37 [ atoi::return#3 ] 22: zp[2]:39 [ atoi::return#4 ] 
Uplift Scope [printf_number_buffer] 701: zp[1]:50 [ printf_number_buffer::buffer_sign#0 ] 
Uplift Scope [printf_sint] 455.33: zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_cls] 
Uplift Scope [main] 

Uplifting [memcpy] best 24382 combination zp[2]:12 [ memcpy::src#2 memcpy::src#1 ] zp[2]:14 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplifting [memset] best 24276 combination zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:48 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:5 [ memset::num#2 ] zp[2]:7 [ memset::str#3 ] 
Uplifting [utoa_append] best 23673 combination zp[2]:24 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:59 [ utoa_append::sub#0 ] zp[2]:61 [ utoa_append::return#0 ] zp[2]:57 [ utoa_append::buffer#0 ] 
Uplifting [printf_ln] best 23673 combination zp[2]:42 [ printf_ln::$0 ] zp[2]:44 [ printf_ln::$1 ] 
Uplifting [printf_char] best 23637 combination zp[2]:46 [ printf_char::$6 ] reg byte a [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ] 
Uplifting [printf_str] best 23517 combination zp[2]:2 [ printf_str::str#4 printf_str::str#6 printf_str::str#0 ] reg byte a [ printf_str::ch#0 ] 
Uplifting [] best 23517 combination zp[2]:35 [ printf_cursor_ptr ] zp[1]:34 [ printf_cursor_y ] zp[1]:33 [ printf_cursor_x ] mem[12] [ printf_buffer ] 
Uplifting [utoa] best 23383 combination zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:19 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:18 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:55 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:52 [ utoa::buffer#3 ] 
Uplifting [atoi] best 23170 combination reg byte y [ atoi::i#4 atoi::i#2 ] zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ] zp[2]:63 [ atoi::$8 ] zp[2]:65 [ atoi::$9 ] zp[2]:67 [ atoi::$3 ] zp[2]:69 [ atoi::$4 ] reg byte x [ atoi::negative#2 ] zp[2]:27 [ atoi::str#2 ] zp[2]:37 [ atoi::return#3 ] zp[2]:39 [ atoi::return#4 ] 
Uplifting [printf_number_buffer] best 23161 combination reg byte a [ printf_number_buffer::buffer_sign#0 ] 
Uplifting [printf_sint] best 23161 combination zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ] 
Uplifting [RADIX] best 23161 combination 
Uplifting [printf_format_number] best 23161 combination 
Uplifting [printf_buffer_number] best 23161 combination 
Uplifting [printf_format_string] best 23161 combination 
Uplifting [printf_cls] best 23161 combination 
Uplifting [main] best 23161 combination 
Attempting to uplift remaining variables inzp[1]:34 [ printf_cursor_y ]
Uplifting [] best 23161 combination zp[1]:34 [ printf_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:33 [ printf_cursor_x ]
Uplifting [] best 23161 combination zp[1]:33 [ printf_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:18 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 23161 combination zp[1]:18 [ utoa::digit#2 utoa::digit#1 ] 
Coalescing zero page register [ zp[2]:35 [ printf_cursor_ptr ] ] with [ zp[2]:46 [ printf_char::$6 ] ] - score: 2
Coalescing zero page register [ zp[2]:5 [ memset::num#2 ] ] with [ zp[2]:48 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:7 [ memset::str#3 ] ] with [ zp[2]:10 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 ] ] with [ zp[2]:19 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:37 [ atoi::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 ] ] with [ zp[2]:39 [ atoi::return#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:52 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:57 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:61 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 ] ] with [ zp[2]:65 [ atoi::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 atoi::$9 ] ] with [ zp[2]:69 [ atoi::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:35 [ printf_cursor_ptr printf_char::$6 ] ] with [ zp[2]:42 [ printf_ln::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:35 [ printf_cursor_ptr printf_char::$6 printf_ln::$0 ] ] with [ zp[2]:44 [ printf_ln::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:55 [ utoa::digit_value#0 ] ] with [ zp[2]:59 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 atoi::return#4 ] ] with [ zp[2]:24 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 atoi::return#4 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:31 [ atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 atoi::$9 atoi::$4 ] ] - score: 2
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 atoi::return#4 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 atoi::$9 atoi::$4 ] ] with [ zp[2]:67 [ atoi::$3 ] ] - score: 2
Coalescing zero page register [ zp[2]:12 [ memcpy::src#2 memcpy::src#1 ] ] with [ zp[2]:5 [ memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:14 [ memcpy::dst#2 memcpy::dst#1 ] ] with [ zp[2]:7 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:16 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 atoi::return#4 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 atoi::$9 atoi::$4 atoi::$3 ] ] with [ zp[2]:2 [ printf_str::str#4 printf_str::str#6 printf_str::str#0 ] ]
Coalescing zero page register [ zp[2]:27 [ atoi::str#2 ] ] with [ zp[2]:22 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[2]:63 [ atoi::$8 ] ] with [ zp[2]:55 [ utoa::digit_value#0 utoa_append::sub#0 ] ]
Coalescing zero page register [ zp[2]:27 [ atoi::str#2 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:12 [ memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:63 [ atoi::$8 utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:14 [ memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[2]:16) zp[2]:2 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 atoi::return#4 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 atoi::$9 atoi::$4 atoi::$3 printf_str::str#4 printf_str::str#6 printf_str::str#0 ]
Allocated (was zp[1]:18) zp[1]:4 [ utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[2]:27) zp[2]:5 [ atoi::str#2 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
Allocated (was zp[1]:33) zp[1]:7 [ printf_cursor_x ]
Allocated (was zp[1]:34) zp[1]:8 [ printf_cursor_y ]
Allocated (was zp[2]:35) zp[2]:9 [ printf_cursor_ptr printf_char::$6 printf_ln::$0 printf_ln::$1 ]
Allocated (was zp[2]:63) zp[2]:11 [ atoi::$8 utoa::digit_value#0 utoa_append::sub#0 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test atoi()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  .label printf_cursor_x = 7
  .label printf_cursor_y = 8
  .label printf_cursor_ptr = 9
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  lda #0
  sta.z printf_cursor_y
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // [4] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [5] call main 
  // [7] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [6] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [8] call printf_cls 
    // [134] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [9] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [10] call atoi 
    // [119] phi from main::@1 to atoi [phi:main::@1->atoi]
  atoi_from___b1:
    // [119] phi (to_nomodify byte*) atoi::str#2 = (const byte*) main::str [phi:main::@1->atoi#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z atoi.str
    lda #>str
    sta.z atoi.str+1
    jsr atoi
    // [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2
    jmp __b2
    // main::@2
  __b2:
    // [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3
    // [13] call printf_sint 
    // [73] phi from main::@2 to printf_sint [phi:main::@2->printf_sint]
  printf_sint_from___b2:
    // [73] phi (signed word) printf_sint::value#3 = (signed word) printf_sint::value#1 [phi:main::@2->printf_sint#0] -- register_copy 
    jsr printf_sint
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [15] call printf_str 
    // [24] phi from main::@3 to printf_str [phi:main::@3->printf_str]
  printf_str_from___b3:
    // [24] phi (byte*) printf_str::str#6 = (const byte*) main::str1 [phi:main::@3->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [16] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [17] call atoi 
    // [119] phi from main::@4 to atoi [phi:main::@4->atoi]
  atoi_from___b4:
    // [119] phi (to_nomodify byte*) atoi::str#2 = (const byte*) main::str2 [phi:main::@4->atoi#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z atoi.str
    lda #>str2
    sta.z atoi.str+1
    jsr atoi
    // [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2
    jmp __b5
    // main::@5
  __b5:
    // [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4
    // [20] call printf_sint 
    // [73] phi from main::@5 to printf_sint [phi:main::@5->printf_sint]
  printf_sint_from___b5:
    // [73] phi (signed word) printf_sint::value#3 = (signed word) printf_sint::value#2 [phi:main::@5->printf_sint#0] -- register_copy 
    jsr printf_sint
    // [21] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [22] call printf_str 
    // [24] phi from main::@6 to printf_str [phi:main::@6->printf_str]
  printf_str_from___b6:
    // [24] phi (byte*) printf_str::str#6 = (const byte*) main::str1 [phi:main::@6->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    jmp __breturn
    // main::@return
  __breturn:
    // [23] return 
    rts
    str: .text "1234"
    .byte 0
    str1: .text @"\n"
    .byte 0
    str2: .text "-5678"
    .byte 0
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp(2) str)
printf_str: {
    .label str = 2
    // [25] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b4:
  __b1_from___b5:
    // [25] phi (byte*) printf_str::str#4 = (byte*) printf_str::str#6 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    jmp __b2
    // printf_str::@2
  __b2:
    // [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [27] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [28] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [29] return 
    rts
    // printf_str::@3
  __b3:
    // [30] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b4_from___b3
    jmp __b5
    // printf_str::@5
  __b5:
    // [31] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
    // [32] call printf_char 
    // [41] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
  printf_char_from___b5:
    // [41] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b1_from___b5
    // [33] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
  __b4_from___b3:
    jmp __b4
    // printf_str::@4
  __b4:
    // [34] call printf_ln 
    jsr printf_ln
    jmp __b1_from___b4
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = 9
    .label __1 = 9
    // [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z printf_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
    // [38] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [39] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [40] return 
    rts
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte register(A) ch)
printf_char: {
    .label __6 = 9
    // [42] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (printf_cursor_ptr),y
    // [43] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // [44] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [45] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    jmp __b1
    // printf_char::@1
  __b1:
    // [46] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [47] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // [48] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [49] phi from printf_char::@1 to printf_char::@2 [phi:printf_char::@1->printf_char::@2]
  __b2_from___b1:
    jmp __b2
    // printf_char::@2
  __b2:
    // [50] call memcpy 
    // [66] phi from printf_char::@2 to memcpy [phi:printf_char::@2->memcpy]
  memcpy_from___b2:
    jsr memcpy
    // [51] phi from printf_char::@2 to printf_char::@3 [phi:printf_char::@2->printf_char::@3]
  __b3_from___b2:
    jmp __b3
    // printf_char::@3
  __b3:
    // [52] call memset 
    // [57] phi from printf_char::@3 to memset [phi:printf_char::@3->memset]
  memset_from___b3:
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_char::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [57] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_char::@3->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [57] phi (word) memset::num#2 = (byte) $28 [phi:printf_char::@3->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b4
    // printf_char::@4
  __b4:
    // [53] (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __6
    sec
    sbc #<$28
    sta.z __6
    lda.z __6+1
    sbc #>$28
    sta.z __6+1
    // [54] (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6
    // [55] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($b) str, byte register(X) c, word zp(5) num)
memset: {
    .label end = 5
    .label dst = $b
    .label num = 5
    .label str = $b
    // [58] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [59] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [60] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [61] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [61] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [62] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [63] return 
    rts
    // memset::@3
  __b3:
    // [64] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [65] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = $b
    .label src = 5
    // [67] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [67] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [67] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [68] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [69] return 
    rts
    // memcpy::@2
  __b2:
    // [70] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [71] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [72] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [67] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [67] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [67] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_sint
// Print a signed integer using a specific format
// printf_sint(signed word zp(2) value)
printf_sint: {
    .label value = 2
    // [74] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [75] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z value+1
    bmi __b1
    // [78] phi from printf_sint printf_sint::@1 to printf_sint::@2 [phi:printf_sint/printf_sint::@1->printf_sint::@2]
  __b2_from_printf_sint:
  __b2_from___b1:
    // [78] phi (signed word) printf_sint::value#5 = (signed word) printf_sint::value#3 [phi:printf_sint/printf_sint::@1->printf_sint::@2#0] -- register_copy 
    jmp __b2
    // printf_sint::@1
  __b1:
    // [76] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z value
    sta.z value
    lda #0
    sbc.z value+1
    sta.z value+1
    // [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' -- _deref_pbuc1=vbuc2 
    lda #'-'
    sta printf_buffer
    jmp __b2_from___b1
    // printf_sint::@2
  __b2:
    // [79] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5
    // [80] call utoa 
    // [91] phi from printf_sint::@2 to utoa [phi:printf_sint::@2->utoa]
  utoa_from___b2:
    jsr utoa
    jmp __b3
    // printf_sint::@3
  __b3:
    // [81] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [82] call printf_number_buffer 
  // Print using format
    // [84] phi from printf_sint::@3 to printf_number_buffer [phi:printf_sint::@3->printf_number_buffer]
  printf_number_buffer_from___b3:
    jsr printf_number_buffer
    jmp __breturn
    // printf_sint::@return
  __breturn:
    // [83] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [85] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [86] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#0
    // [87] call printf_char 
    // [41] phi from printf_number_buffer::@3 to printf_char [phi:printf_number_buffer::@3->printf_char]
  printf_char_from___b3:
    // [41] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@3->printf_char#0] -- register_copy 
    jsr printf_char
    // [88] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [89] call printf_str 
    // [24] phi from printf_number_buffer::@2 to printf_str [phi:printf_number_buffer::@2->printf_str]
  printf_str_from___b2:
    // [24] phi (byte*) printf_str::str#6 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->printf_str#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z printf_str.str
    lda #>buffer_digits
    sta.z printf_str.str+1
    jsr printf_str
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [90] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(2) value, byte* zp(5) buffer)
utoa: {
    .label digit_value = $b
    .label buffer = 5
    .label digit = 4
    .label value = 2
    // [92] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [92] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [92] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [92] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [93] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #5-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [94] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [95] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [96] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [97] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [98] return 
    rts
    // utoa::@2
  __b2:
    // [99] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [100] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [101] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [102] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [103] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [103] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [103] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [103] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [104] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [92] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [92] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [92] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [92] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [92] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [105] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [106] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [107] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [108] call utoa_append 
    // [112] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [109] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [110] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [111] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [103] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [103] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [103] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [103] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(5) buffer, word zp(2) value, word zp($b) sub)
utoa_append: {
    .label buffer = 5
    .label value = 2
    .label sub = $b
    .label return = 2
    // [113] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [113] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [114] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [115] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [116] return 
    rts
    // utoa_append::@2
  __b2:
    // [117] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [118] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [113] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [113] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [113] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // atoi
// Converts the string argument str to an integer.
// atoi(byte* zp(5) str)
atoi: {
    .label __3 = 2
    .label __4 = 2
    .label res = 2
    .label return = 2
    .label str = 5
    .label __8 = $b
    .label __9 = 2
    // [120] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'-'
    bne __b3_from_atoi
    // [121] phi from atoi to atoi::@2 [phi:atoi->atoi::@2]
  __b2_from_atoi:
    jmp __b2
    // atoi::@2
  __b2:
    // [122] phi from atoi::@2 to atoi::@3 [phi:atoi::@2->atoi::@3]
  __b3_from___b2:
    // [122] phi (byte) atoi::negative#2 = (byte) 1 [phi:atoi::@2->atoi::@3#0] -- vbuxx=vbuc1 
    ldx #1
    // [122] phi (signed word) atoi::res#2 = (signed word) 0 [phi:atoi::@2->atoi::@3#1] -- vwsz1=vwsc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [122] phi (byte) atoi::i#4 = (byte) 1 [phi:atoi::@2->atoi::@3#2] -- vbuyy=vbuc1 
    ldy #1
    jmp __b3
  // Iterate through all digits and update the result
    // [122] phi from atoi to atoi::@3 [phi:atoi->atoi::@3]
  __b3_from_atoi:
    // [122] phi (byte) atoi::negative#2 = (byte) 0 [phi:atoi->atoi::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [122] phi (signed word) atoi::res#2 = (signed word) 0 [phi:atoi->atoi::@3#1] -- vwsz1=vwsc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [122] phi (byte) atoi::i#4 = (byte) 0 [phi:atoi->atoi::@3#2] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // atoi::@3
  __b3:
    // [123] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (str),y
    cmp #0
    bne __b4
    jmp __b5
    // atoi::@5
  __b5:
    // [124] if((byte) 0!=(byte) atoi::negative#2) goto atoi::@1 -- vbuc1_neq_vbuxx_then_la1 
    // Return result with sign
    cpx #0
    bne __b1
    // [126] phi from atoi::@1 atoi::@5 to atoi::@return [phi:atoi::@1/atoi::@5->atoi::@return]
  __breturn_from___b1:
  __breturn_from___b5:
    // [126] phi (signed word) atoi::return#2 = (signed word) atoi::return#0 [phi:atoi::@1/atoi::@5->atoi::@return#0] -- register_copy 
    jmp __breturn
    // atoi::@1
  __b1:
    // [125] (signed word) atoi::return#0 ← - (signed word) atoi::res#2 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    jmp __breturn_from___b1
    // atoi::@return
  __breturn:
    // [127] return 
    rts
    // atoi::@4
  __b4:
    // [128] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2 -- vwsz1=vwsz2_rol_2 
    lda.z res
    asl
    sta.z __8
    lda.z res+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [129] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2 -- vwsz1=vwsz2_plus_vwsz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [130] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __3
    rol.z __3+1
    // [131] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4) -- vwsz1=vwsz1_plus_pbuz2_derefidx_vbuyy 
    clc
    lda.z __4
    adc (str),y
    sta.z __4
    bcc !+
    inc.z __4+1
  !:
    // [132] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0' -- vwsz1=vwsz1_minus_vbuc1 
    sec
    lda.z res
    sbc #'0'
    sta.z res
    bcs !+
    dec.z res+1
  !:
    // [133] (byte) atoi::i#2 ← ++ (byte) atoi::i#4 -- vbuyy=_inc_vbuyy 
    iny
    // [122] phi from atoi::@4 to atoi::@3 [phi:atoi::@4->atoi::@3]
  __b3_from___b4:
    // [122] phi (byte) atoi::negative#2 = (byte) atoi::negative#2 [phi:atoi::@4->atoi::@3#0] -- register_copy 
    // [122] phi (signed word) atoi::res#2 = (signed word) atoi::res#1 [phi:atoi::@4->atoi::@3#1] -- register_copy 
    // [122] phi (byte) atoi::i#4 = (byte) atoi::i#2 [phi:atoi::@4->atoi::@3#2] -- register_copy 
    jmp __b3
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [135] call memset 
    // [57] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [57] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [57] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [136] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // [137] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // [138] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_y
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [139] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy #0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b3 with __b4
Replacing label __b1_from___b5 with __b2
Replacing label __b1_from___b4 with __b2
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __breturn_from___b1 with __breturn_from___b5
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction atoi_from___b1:
Removing instruction printf_sint_from___b2:
Removing instruction __b3_from___b2:
Removing instruction printf_str_from___b3:
Removing instruction __b4_from___b3:
Removing instruction atoi_from___b4:
Removing instruction printf_sint_from___b5:
Removing instruction __b6_from___b5:
Removing instruction printf_str_from___b6:
Removing instruction __b1_from_printf_str:
Removing instruction __b1_from___b4:
Removing instruction __b1_from___b5:
Removing instruction __b1:
Removing instruction printf_char_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b2_from_printf_sint:
Removing instruction utoa_from___b2:
Removing instruction printf_char_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction printf_str_from___b2:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b2_from_atoi:
Removing instruction __b3_from___b2:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction printf_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b1:
Removing instruction __b1_from_memcpy:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b3:
Removing instruction printf_number_buffer_from___b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction __b5:
Removing instruction __b3_from___b4:
Removing instruction memset_from_printf_cls:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b2 in jmp __b2_from___b1
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b5
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b2_from___b1 to __b3
Relabelling long label __b3_from_atoi to __b2
Relabelling long label __breturn_from___b5 to __b5
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Replacing instruction lda #<0 with TYA
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b3:
Removing instruction __b5:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(signed word()) atoi((to_nomodify byte*) atoi::str)
(signed word~) atoi::$3 zp[2]:2 2002.0
(signed word~) atoi::$4 zp[2]:2 2002.0
(signed word~) atoi::$8 zp[2]:11 2002.0
(signed word~) atoi::$9 zp[2]:2 2002.0
(label) atoi::@1
(label) atoi::@2
(label) atoi::@3
(label) atoi::@4
(label) atoi::@5
(label) atoi::@return
(byte) atoi::i
(byte) atoi::i#2 reg byte y 2002.0
(byte) atoi::i#4 reg byte y 572.0
(byte) atoi::negative
(byte) atoi::negative#2 reg byte x 262.875
(signed word) atoi::res
(signed word) atoi::res#1 res zp[2]:2 1001.0
(signed word) atoi::res#2 res zp[2]:2 801.25
(signed word) atoi::return
(signed word) atoi::return#0 return zp[2]:2 202.0
(signed word) atoi::return#2 return zp[2]:2 56.0
(signed word) atoi::return#3 return zp[2]:2 22.0
(signed word) atoi::return#4 return zp[2]:2 22.0
(to_nomodify byte*) atoi::str
(to_nomodify byte*) atoi::str#2 str zp[2]:5 191.1818181818182
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(const byte*) main::str[(byte) 5]  = (byte*) "1234"
(const byte*) main::str1[(byte) 2]  = (byte*) "
"
(const byte*) main::str2[(byte) 6]  = (byte*) "-5678"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(const void*) memcpy::destination#0 destination = (void*) 1024
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:11 1.000000001E9
(byte*) memcpy::dst#2 dst zp[2]:11 1.000000001E9
(word) memcpy::num
(const word) memcpy::num#0 num = (word)(number) $28*(number) $19-(number) $28
(void*) memcpy::return
(void*) memcpy::source
(const void*) memcpy::source#0 source = (void*)(number) $400+(number) $28
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:5 2.000000002E9
(byte*) memcpy::src#2 src zp[2]:5 1.000000001E9
(byte*) memcpy::src_end
(const byte*) memcpy::src_end#0 src_end = (byte*)(const void*) memcpy::source#0+(const word) memcpy::num#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.25000000125E8
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:11 2.000000002E9
(byte*) memset::dst#2 dst zp[2]:11 1.3366666683333335E9
(byte*) memset::dst#4 dst zp[2]:11 2.0000002E7
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:5 1.683333336666667E8
(word) memset::num
(word) memset::num#2 num zp[2]:5 1.0000001E7
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:11
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte*~) printf_char::$6 zp[2]:9 2000002.0
(label) printf_char::@1
(label) printf_char::@2
(label) printf_char::@3
(label) printf_char::@4
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#1 reg byte a 200002.0
(byte) printf_char::ch#2 reg byte a 2002.0
(byte) printf_char::ch#3 reg byte a 1101003.0
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte*) printf_cursor_ptr loadstore zp[2]:9 106062.27272727274
(byte) printf_cursor_x loadstore zp[1]:7 92309.36923076924
(byte) printf_cursor_y loadstore zp[1]:8 104479.25373134328
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_ln()
(byte*~) printf_ln::$0 zp[2]:9 2000002.0
(byte*~) printf_ln::$1 zp[2]:9 2000002.0
(label) printf_ln::@return
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(label) printf_number_buffer::@1
(label) printf_number_buffer::@2
(label) printf_number_buffer::@3
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(const byte*) printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 reg byte a 701.0
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_zero_padding
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::padding
(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
(label) printf_sint::@1
(label) printf_sint::@2
(label) printf_sint::@3
(label) printf_sint::@return
(struct printf_format_number) printf_sint::format
(byte) printf_sint::format_justify_left
(byte) printf_sint::format_min_length
(byte) printf_sint::format_radix
(byte) printf_sint::format_sign_always
(byte) printf_sint::format_upper_case
(byte) printf_sint::format_zero_padding
(word) printf_sint::uvalue
(signed word) printf_sint::value
(signed word) printf_sint::value#0 value zp[2]:2 101.0
(signed word) printf_sint::value#1 value zp[2]:2 22.0
(signed word) printf_sint::value#2 value zp[2]:2 22.0
(signed word) printf_sint::value#3 value zp[2]:2 108.33333333333331
(signed word) printf_sint::value#5 value zp[2]:2 202.0
(void()) printf_str((byte*) printf_str::str)
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@4
(label) printf_str::@5
(label) printf_str::@return
(byte) printf_str::ch
(byte) printf_str::ch#0 reg byte a 100001.0
(byte*) printf_str::str
(byte*) printf_str::str#0 str zp[2]:2 42857.57142857143
(byte*) printf_str::str#4 str zp[2]:2 205002.5
(byte*) printf_str::str#6 str zp[2]:2 10001.0
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 20002.0
(byte~) utoa::$11 reg byte a 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:5 3000.4285714285716
(byte*) utoa::buffer#14 buffer zp[2]:5 15001.5
(byte*) utoa::buffer#3 buffer zp[2]:5 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:5 20002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:4 20002.0
(byte) utoa::digit#2 digit zp[1]:4 2857.4285714285716
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:11 6000.6
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 5000.5
(byte) utoa::started#4 reg byte x 10001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:2 10001.0
(word) utoa::value#1 value zp[2]:2 551.0
(word) utoa::value#2 value zp[2]:2 5857.857142857143
(word) utoa::value#6 value zp[2]:2 15001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:5 13750.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.0000001E7
(byte) utoa_append::digit#2 reg byte x 1.00500015E7
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:2 20002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:11 3335000.5
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:2 36667.33333333333
(word) utoa_append::value#1 value zp[2]:2 2.0000002E7
(word) utoa_append::value#2 value zp[2]:2 5018334.166666666

reg byte a [ printf_char::ch#3 printf_char::ch#2 printf_char::ch#1 ]
reg byte x [ memset::c#4 ]
zp[2]:2 [ printf_sint::value#5 printf_sint::value#0 printf_sint::value#3 printf_sint::value#1 printf_sint::value#2 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 atoi::return#3 atoi::return#4 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 atoi::return#2 atoi::return#0 atoi::res#2 atoi::res#1 atoi::$9 atoi::$4 atoi::$3 printf_str::str#4 printf_str::str#6 printf_str::str#0 ]
zp[1]:4 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:5 [ atoi::str#2 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
reg byte y [ atoi::i#4 atoi::i#2 ]
reg byte x [ atoi::negative#2 ]
zp[1]:7 [ printf_cursor_x ]
zp[1]:8 [ printf_cursor_y ]
zp[2]:9 [ printf_cursor_ptr printf_char::$6 printf_ln::$0 printf_ln::$1 ]
reg byte a [ printf_str::ch#0 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:11 [ atoi::$8 utoa::digit_value#0 utoa_append::sub#0 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 19823

  // File Comments
// Test atoi()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  .label printf_cursor_x = 7
  .label printf_cursor_y = 8
  .label printf_cursor_ptr = 9
  // @begin
__bbegin:
  // @1
  // printf_cursor_x = 0
  // [1] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // X-position of cursor
  lda #0
  sta.z printf_cursor_x
  // printf_cursor_y = 0
  // [2] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // Y-position of cursor
  sta.z printf_cursor_y
  // printf_cursor_ptr = PRINTF_SCREEN_ADDRESS
  // [3] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
  // Pointer to cursor address
  lda #<$400
  sta.z printf_cursor_ptr
  lda #>$400
  sta.z printf_cursor_ptr+1
  // [4] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [5] call main 
  // [7] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [6] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // printf_cls()
    // [8] call printf_cls 
    // [134] phi from main to printf_cls [phi:main->printf_cls]
    jsr printf_cls
    // [9] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // atoi("1234")
    // [10] call atoi 
    // [119] phi from main::@1 to atoi [phi:main::@1->atoi]
    // [119] phi (to_nomodify byte*) atoi::str#2 = (const byte*) main::str [phi:main::@1->atoi#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z atoi.str
    lda #>str
    sta.z atoi.str+1
    jsr atoi
    // atoi("1234")
    // [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2
    // main::@2
    // printf("%d\n", atoi("1234"))
    // [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3
    // [13] call printf_sint 
    // [73] phi from main::@2 to printf_sint [phi:main::@2->printf_sint]
    // [73] phi (signed word) printf_sint::value#3 = (signed word) printf_sint::value#1 [phi:main::@2->printf_sint#0] -- register_copy 
    jsr printf_sint
    // [14] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf("%d\n", atoi("1234"))
    // [15] call printf_str 
    // [24] phi from main::@3 to printf_str [phi:main::@3->printf_str]
    // [24] phi (byte*) printf_str::str#6 = (const byte*) main::str1 [phi:main::@3->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // [16] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // atoi("-5678")
    // [17] call atoi 
    // [119] phi from main::@4 to atoi [phi:main::@4->atoi]
    // [119] phi (to_nomodify byte*) atoi::str#2 = (const byte*) main::str2 [phi:main::@4->atoi#0] -- pbuz1=pbuc1 
    lda #<str2
    sta.z atoi.str
    lda #>str2
    sta.z atoi.str+1
    jsr atoi
    // atoi("-5678")
    // [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2
    // main::@5
    // printf("%d\n", atoi("-5678"))
    // [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4
    // [20] call printf_sint 
    // [73] phi from main::@5 to printf_sint [phi:main::@5->printf_sint]
    // [73] phi (signed word) printf_sint::value#3 = (signed word) printf_sint::value#2 [phi:main::@5->printf_sint#0] -- register_copy 
    jsr printf_sint
    // [21] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // printf("%d\n", atoi("-5678"))
    // [22] call printf_str 
    // [24] phi from main::@6 to printf_str [phi:main::@6->printf_str]
    // [24] phi (byte*) printf_str::str#6 = (const byte*) main::str1 [phi:main::@6->printf_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // main::@return
    // }
    // [23] return 
    rts
    str: .text "1234"
    .byte 0
    str1: .text @"\n"
    .byte 0
    str2: .text "-5678"
    .byte 0
}
  // printf_str
// Print a zero-terminated string
// Handles escape codes such as newline
// printf_str(byte* zp(2) str)
printf_str: {
    .label str = 2
    // [25] phi from printf_str printf_str::@4 printf_str::@5 to printf_str::@1 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1]
    // [25] phi (byte*) printf_str::str#4 = (byte*) printf_str::str#6 [phi:printf_str/printf_str::@4/printf_str::@5->printf_str::@1#0] -- register_copy 
    // printf_str::@1
    // printf_str::@2
  __b2:
    // ch = *str++
    // [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [27] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch==0)
    // [28] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    // printf_str::@return
    // }
    // [29] return 
    rts
    // printf_str::@3
  __b3:
    // if(ch=='\n')
    // [30] if((byte) printf_str::ch#0==(byte) ' ') goto printf_str::@4 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b4
    // printf_str::@5
    // printf_char(ch)
    // [31] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
    // [32] call printf_char 
    // [41] phi from printf_str::@5 to printf_char [phi:printf_str::@5->printf_char]
    // [41] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#1 [phi:printf_str::@5->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b2
    // [33] phi from printf_str::@3 to printf_str::@4 [phi:printf_str::@3->printf_str::@4]
    // printf_str::@4
  __b4:
    // printf_ln()
    // [34] call printf_ln 
    jsr printf_ln
    jmp __b2
}
  // printf_ln
// Print a newline
printf_ln: {
    .label __0 = 9
    .label __1 = 9
    // printf_cursor_ptr - printf_cursor_x
    // [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z printf_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // printf_cursor_ptr - printf_cursor_x + PRINTF_SCREEN_WIDTH
    // [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // printf_cursor_ptr =  printf_cursor_ptr - printf_cursor_x + PRINTF_SCREEN_WIDTH
    // [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
    // printf_cursor_x = 0
    // [38] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // printf_cursor_y++;
    // [39] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // printf_ln::@return
    // }
    // [40] return 
    rts
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte register(A) ch)
printf_char: {
    .label __6 = 9
    // *(printf_cursor_ptr++) = ch
    // [42] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (printf_cursor_ptr),y
    // *(printf_cursor_ptr++) = ch;
    // [43] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr -- pbuz1=_inc_pbuz1 
    inc.z printf_cursor_ptr
    bne !+
    inc.z printf_cursor_ptr+1
  !:
    // if(++printf_cursor_x==PRINTF_SCREEN_WIDTH)
    // [44] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_x
    // [45] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z printf_cursor_x
    bne __breturn
    // printf_char::@1
    // printf_cursor_x = 0
    // [46] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // ++printf_cursor_y;
    // [47] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z printf_cursor_y
    // if(printf_cursor_y==PRINTF_SCREEN_HEIGHT)
    // [48] if((byte) printf_cursor_y!=(byte) $19) goto printf_char::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z printf_cursor_y
    bne __breturn
    // [49] phi from printf_char::@1 to printf_char::@2 [phi:printf_char::@1->printf_char::@2]
    // printf_char::@2
    // memcpy(PRINTF_SCREEN_ADDRESS, PRINTF_SCREEN_ADDRESS+PRINTF_SCREEN_WIDTH, PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH)
    // [50] call memcpy 
    // [66] phi from printf_char::@2 to memcpy [phi:printf_char::@2->memcpy]
    jsr memcpy
    // [51] phi from printf_char::@2 to printf_char::@3 [phi:printf_char::@2->printf_char::@3]
    // printf_char::@3
    // memset(PRINTF_SCREEN_ADDRESS+PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH, ' ', PRINTF_SCREEN_WIDTH)
    // [52] call memset 
    // [57] phi from printf_char::@3 to memset [phi:printf_char::@3->memset]
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_char::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [57] phi (void*) memset::str#3 = (void*)(number) $400+(number) $28*(number) $19-(number) $28 [phi:printf_char::@3->memset#1] -- pvoz1=pvoc1 
    lda #<$400+$28*$19-$28
    sta.z memset.str
    lda #>$400+$28*$19-$28
    sta.z memset.str+1
    // [57] phi (word) memset::num#2 = (byte) $28 [phi:printf_char::@3->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // printf_char::@4
    // printf_cursor_ptr-PRINTF_SCREEN_WIDTH
    // [53] (byte*~) printf_char::$6 ← (byte*) printf_cursor_ptr - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __6
    sec
    sbc #<$28
    sta.z __6
    lda.z __6+1
    sbc #>$28
    sta.z __6+1
    // printf_cursor_ptr = printf_cursor_ptr-PRINTF_SCREEN_WIDTH
    // [54] (byte*) printf_cursor_ptr ← (byte*~) printf_char::$6
    // printf_cursor_y--;
    // [55] (byte) printf_cursor_y ← -- (byte) printf_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z printf_cursor_y
    // printf_char::@return
  __breturn:
    // }
    // [56] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($b) str, byte register(X) c, word zp(5) num)
memset: {
    .label end = 5
    .label dst = $b
    .label num = 5
    .label str = $b
    // if(num>0)
    // [58] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [59] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [60] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [61] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [61] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [62] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [63] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [64] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [65] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = $400
    .label source = $400+$28
    .const num = $28*$19-$28
    .label src_end = source+num
    .label dst = $b
    .label src = 5
    // [67] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
    // [67] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [67] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [68] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    // memcpy::@return
    // }
    // [69] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [70] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [71] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [72] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [67] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
    // [67] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [67] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_sint
// Print a signed integer using a specific format
// printf_sint(signed word zp(2) value)
printf_sint: {
    .label value = 2
    // printf_buffer.sign = 0
    // [74] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // if(value<0)
    // [75] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z value+1
    bmi __b1
    // [78] phi from printf_sint printf_sint::@1 to printf_sint::@2 [phi:printf_sint/printf_sint::@1->printf_sint::@2]
    // [78] phi (signed word) printf_sint::value#5 = (signed word) printf_sint::value#3 [phi:printf_sint/printf_sint::@1->printf_sint::@2#0] -- register_copy 
    jmp __b2
    // printf_sint::@1
  __b1:
    // value = -value
    // [76] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z value
    sta.z value
    lda #0
    sbc.z value+1
    sta.z value+1
    // printf_buffer.sign = '-'
    // [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-' -- _deref_pbuc1=vbuc2 
    lda #'-'
    sta printf_buffer
    // printf_sint::@2
  __b2:
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [79] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5
    // [80] call utoa 
    // [91] phi from printf_sint::@2 to utoa [phi:printf_sint::@2->utoa]
    jsr utoa
    // printf_sint::@3
    // printf_number_buffer(printf_buffer, format)
    // [81] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [82] call printf_number_buffer 
  // Print using format
    // [84] phi from printf_sint::@3 to printf_number_buffer [phi:printf_sint::@3->printf_number_buffer]
    jsr printf_number_buffer
    // printf_sint::@return
    // }
    // [83] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // printf_number_buffer::@1
    // if(buffer.sign)
    // [85] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // printf_number_buffer::@3
    // printf_char(buffer.sign)
    // [86] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#0
    // [87] call printf_char 
    // [41] phi from printf_number_buffer::@3 to printf_char [phi:printf_number_buffer::@3->printf_char]
    // [41] phi (byte) printf_char::ch#3 = (byte) printf_char::ch#2 [phi:printf_number_buffer::@3->printf_char#0] -- register_copy 
    jsr printf_char
    // [88] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
    // printf_number_buffer::@2
  __b2:
    // printf_str(buffer.digits)
    // [89] call printf_str 
    // [24] phi from printf_number_buffer::@2 to printf_str [phi:printf_number_buffer::@2->printf_str]
    // [24] phi (byte*) printf_str::str#6 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->printf_str#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z printf_str.str
    lda #>buffer_digits
    sta.z printf_str.str+1
    jsr printf_str
    // printf_number_buffer::@return
    // }
    // [90] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(2) value, byte* zp(5) buffer)
utoa: {
    .label digit_value = $b
    .label buffer = 5
    .label digit = 4
    .label value = 2
    // [92] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [92] phi (byte*) utoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [92] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [92] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [93] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #5-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [94] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [95] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [96] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [97] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [98] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [99] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [100] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [101] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [102] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [103] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [103] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [103] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [103] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [104] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [92] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [92] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [92] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [92] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [92] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [105] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [106] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [107] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [108] call utoa_append 
    // [112] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [109] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [110] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [111] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [103] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [103] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [103] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [103] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp(5) buffer, word zp(2) value, word zp($b) sub)
utoa_append: {
    .label buffer = 5
    .label value = 2
    .label sub = $b
    .label return = 2
    // [113] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [113] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [114] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [115] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [116] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [117] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [118] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [113] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [113] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [113] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // atoi
// Converts the string argument str to an integer.
// atoi(byte* zp(5) str)
atoi: {
    .label __3 = 2
    .label __4 = 2
    .label res = 2
    .label return = 2
    .label str = 5
    .label __8 = $b
    .label __9 = 2
    // if (str[i] == '-')
    // [120] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'-'
    bne __b2
    // [121] phi from atoi to atoi::@2 [phi:atoi->atoi::@2]
    // atoi::@2
    // [122] phi from atoi::@2 to atoi::@3 [phi:atoi::@2->atoi::@3]
    // [122] phi (byte) atoi::negative#2 = (byte) 1 [phi:atoi::@2->atoi::@3#0] -- vbuxx=vbuc1 
    ldx #1
    // [122] phi (signed word) atoi::res#2 = (signed word) 0 [phi:atoi::@2->atoi::@3#1] -- vwsz1=vwsc1 
    tya
    sta.z res
    sta.z res+1
    // [122] phi (byte) atoi::i#4 = (byte) 1 [phi:atoi::@2->atoi::@3#2] -- vbuyy=vbuc1 
    ldy #1
    jmp __b3
  // Iterate through all digits and update the result
    // [122] phi from atoi to atoi::@3 [phi:atoi->atoi::@3]
  __b2:
    // [122] phi (byte) atoi::negative#2 = (byte) 0 [phi:atoi->atoi::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [122] phi (signed word) atoi::res#2 = (signed word) 0 [phi:atoi->atoi::@3#1] -- vwsz1=vwsc1 
    txa
    sta.z res
    sta.z res+1
    // [122] phi (byte) atoi::i#4 = (byte) 0 [phi:atoi->atoi::@3#2] -- vbuyy=vbuc1 
    tay
    // atoi::@3
  __b3:
    // for (; str[i]; ++i)
    // [123] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (str),y
    cmp #0
    bne __b4
    // atoi::@5
    // if(negative)
    // [124] if((byte) 0!=(byte) atoi::negative#2) goto atoi::@1 -- vbuc1_neq_vbuxx_then_la1 
    // Return result with sign
    cpx #0
    bne __b1
    // [126] phi from atoi::@1 atoi::@5 to atoi::@return [phi:atoi::@1/atoi::@5->atoi::@return]
    // [126] phi (signed word) atoi::return#2 = (signed word) atoi::return#0 [phi:atoi::@1/atoi::@5->atoi::@return#0] -- register_copy 
    rts
    // atoi::@1
  __b1:
    // return -res;
    // [125] (signed word) atoi::return#0 ← - (signed word) atoi::res#2 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    // atoi::@return
    // }
    // [127] return 
    rts
    // atoi::@4
  __b4:
    // res * 10
    // [128] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2 -- vwsz1=vwsz2_rol_2 
    lda.z res
    asl
    sta.z __8
    lda.z res+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [129] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2 -- vwsz1=vwsz2_plus_vwsz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [130] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __3
    rol.z __3+1
    // res * 10 + str[i]
    // [131] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4) -- vwsz1=vwsz1_plus_pbuz2_derefidx_vbuyy 
    clc
    lda.z __4
    adc (str),y
    sta.z __4
    bcc !+
    inc.z __4+1
  !:
    // res = res * 10 + str[i] - '0'
    // [132] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0' -- vwsz1=vwsz1_minus_vbuc1 
    sec
    lda.z res
    sbc #'0'
    sta.z res
    bcs !+
    dec.z res+1
  !:
    // for (; str[i]; ++i)
    // [133] (byte) atoi::i#2 ← ++ (byte) atoi::i#4 -- vbuyy=_inc_vbuyy 
    iny
    // [122] phi from atoi::@4 to atoi::@3 [phi:atoi::@4->atoi::@3]
    // [122] phi (byte) atoi::negative#2 = (byte) atoi::negative#2 [phi:atoi::@4->atoi::@3#0] -- register_copy 
    // [122] phi (signed word) atoi::res#2 = (signed word) atoi::res#1 [phi:atoi::@4->atoi::@3#1] -- register_copy 
    // [122] phi (byte) atoi::i#4 = (byte) atoi::i#2 [phi:atoi::@4->atoi::@3#2] -- register_copy 
    jmp __b3
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // memset(PRINTF_SCREEN_ADDRESS, ' ', PRINTF_SCREEN_BYTES)
    // [135] call memset 
    // [57] phi from printf_cls to memset [phi:printf_cls->memset]
    // [57] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [57] phi (void*) memset::str#3 = (void*) 1024 [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<$400
    sta.z memset.str
    lda #>$400
    sta.z memset.str+1
    // [57] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // printf_cls::@1
    // printf_cursor_ptr = PRINTF_SCREEN_ADDRESS
    // [136] (byte*) printf_cursor_ptr ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z printf_cursor_ptr
    lda #>$400
    sta.z printf_cursor_ptr+1
    // printf_cursor_x = 0
    // [137] (byte) printf_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z printf_cursor_x
    // printf_cursor_y = 0
    // [138] (byte) printf_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z printf_cursor_y
    // printf_cls::@return
    // }
    // [139] return 
    rts
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

