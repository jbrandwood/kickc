
CONTROL FLOW GRAPH SSA

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from main::@2
  mul8u::a#5 = phi( main::@2/mul8u::a#1 )
  mul8u::b#1 = phi( main::@2/mul8u::b#0 )
  mul8u::res#0 = 0
  mul8u::mb#0 = (word)mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  mul8u::mb#5 = phi( mul8u/mul8u::mb#0, mul8u::@4/mul8u::mb#1 )
  mul8u::res#4 = phi( mul8u/mul8u::res#0, mul8u::@4/mul8u::res#6 )
  mul8u::a#2 = phi( mul8u/mul8u::a#5, mul8u::@4/mul8u::a#0 )
  mul8u::$0 = mul8u::a#2 != 0
  if(mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  mul8u::res#5 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::mb#4 = phi( mul8u::@1/mul8u::mb#5 )
  mul8u::a#3 = phi( mul8u::@1/mul8u::a#2 )
  mul8u::$1 = mul8u::a#3 & 1
  mul8u::$2 = mul8u::$1 != 0
  mul8u::$3 = ! mul8u::$2
  if(mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  mul8u::res#2 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::return#0 = mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  mul8u::res#6 = phi( mul8u::@2/mul8u::res#5, mul8u::@5/mul8u::res#1 )
  mul8u::mb#2 = phi( mul8u::@2/mul8u::mb#4, mul8u::@5/mul8u::mb#3 )
  mul8u::a#4 = phi( mul8u::@2/mul8u::a#3, mul8u::@5/mul8u::a#6 )
  mul8u::$5 = mul8u::a#4 >> 1
  mul8u::a#0 = mul8u::$5
  mul8u::$6 = mul8u::mb#2 << 1
  mul8u::mb#1 = mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  mul8u::a#6 = phi( mul8u::@2/mul8u::a#3 )
  mul8u::mb#3 = phi( mul8u::@2/mul8u::mb#4 )
  mul8u::res#3 = phi( mul8u::@2/mul8u::res#5 )
  mul8u::$4 = mul8u::res#3 + mul8u::mb#3
  mul8u::res#1 = mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  mul8u::return#3 = phi( mul8u::@3/mul8u::return#0 )
  mul8u::return#1 = mul8u::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  main::a#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#4 = phi( main/main::i#0, main::@3/main::i#5 )
  main::a#4 = phi( main/main::a#0, main::@3/main::a#1 )
  main::b#0 = 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  main::i#3 = phi( main::@1/main::i#4, main::@4/main::i#1 )
  main::b#2 = phi( main::@1/main::b#0, main::@4/main::b#1 )
  main::a#2 = phi( main::@1/main::a#4, main::@4/main::a#5 )
  mul8u::a#1 = main::a#2
  mul8u::b#0 = main::b#2
  call mul8u 
  mul8u::return#2 = mul8u::return#1
  to:main::@4
main::@4: scope:[main]  from main::@2
  main::a#5 = phi( main::@2/main::a#2 )
  main::b#3 = phi( main::@2/main::b#2 )
  main::i#2 = phi( main::@2/main::i#3 )
  mul8u::return#4 = phi( main::@2/mul8u::return#2 )
  main::$0 = mul8u::return#4
  main::$3 = main::i#2 * SIZEOF_WORD
  main::screen[main::$3] = main::$0
  main::i#1 = ++ main::i#2
  main::b#1 = main::b#3 + rangenext(0,5)
  main::$1 = main::b#1 != rangelast(0,5)
  if(main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@4
  main::i#5 = phi( main::@4/main::i#1 )
  main::a#3 = phi( main::@4/main::a#5 )
  main::a#1 = main::a#3 + rangenext(0,5)
  main::$2 = main::a#1 != rangelast(0,5)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte SIZEOF_WORD = 2
void __start()
void main()
word~ main::$0
bool~ main::$1
bool~ main::$2
byte~ main::$3
byte main::a
byte main::a#0
byte main::a#1
byte main::a#2
byte main::a#3
byte main::a#4
byte main::a#5
byte main::b
byte main::b#0
byte main::b#1
byte main::b#2
byte main::b#3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
constant word* const main::screen = (word*)$400
word mul8u(byte mul8u::a , byte mul8u::b)
bool~ mul8u::$0
number~ mul8u::$1
bool~ mul8u::$2
bool~ mul8u::$3
word~ mul8u::$4
byte~ mul8u::$5
word~ mul8u::$6
byte mul8u::a
byte mul8u::a#0
byte mul8u::a#1
byte mul8u::a#2
byte mul8u::a#3
byte mul8u::a#4
byte mul8u::a#5
byte mul8u::a#6
byte mul8u::b
byte mul8u::b#0
byte mul8u::b#1
word mul8u::mb
word mul8u::mb#0
word mul8u::mb#1
word mul8u::mb#2
word mul8u::mb#3
word mul8u::mb#4
word mul8u::mb#5
word mul8u::res
word mul8u::res#0
word mul8u::res#1
word mul8u::res#2
word mul8u::res#3
word mul8u::res#4
word mul8u::res#5
word mul8u::res#6
word mul8u::return
word mul8u::return#0
word mul8u::return#1
word mul8u::return#2
word mul8u::return#3
word mul8u::return#4

Adding number conversion cast (unumber) 0 in mul8u::$0 = mul8u::a#2 != 0
Adding number conversion cast (unumber) 1 in mul8u::$1 = mul8u::a#3 & 1
Adding number conversion cast (unumber) mul8u::$1 in mul8u::$1 = mul8u::a#3 & (unumber)1
Adding number conversion cast (unumber) 0 in mul8u::$2 = mul8u::$1 != 0
Adding number conversion cast (unumber) 1 in mul8u::$5 = mul8u::a#4 >> 1
Adding number conversion cast (unumber) 1 in mul8u::$6 = mul8u::mb#2 << 1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in mul8u::$1 = mul8u::a#3 & 1
Inversing boolean not [9] mul8u::$3 = mul8u::$1 == 0 from [8] mul8u::$2 = mul8u::$1 != 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias mul8u::a#2 = mul8u::a#3 mul8u::a#6 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#3 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul8u::return#2 = mul8u::return#4 
Alias main::i#2 = main::i#3 
Alias main::b#2 = main::b#3 
Alias main::a#2 = main::a#5 main::a#3 
Alias main::i#1 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Alias mul8u::a#2 = mul8u::a#4 
Alias mul8u::mb#2 = mul8u::mb#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values mul8u::b#1 mul8u::b#0
Identical Phi Values mul8u::a#5 mul8u::a#1
Identical Phi Values main::a#2 main::a#4
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition mul8u::$0 [5] if(mul8u::a#2!=0) goto mul8u::@2
Simple Condition mul8u::$3 [8] if(mul8u::$1==0) goto mul8u::@4
Simple Condition main::$1 [29] if(main::b#1!=rangelast(0,5)) goto main::@2
Simple Condition main::$2 [32] if(main::a#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant mul8u::res#0 = 0
Constant main::i#0 = 0
Constant main::a#0 = 0
Constant main::b#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [27] main::b#1 = ++ main::b#2 to ++
Resolved ranged comparison value [29] if(main::b#1!=rangelast(0,5)) goto main::@2 to 6
Resolved ranged next value [30] main::a#1 = ++ main::a#4 to ++
Resolved ranged comparison value [32] if(main::a#1!=rangelast(0,5)) goto main::@1 to 6
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [21] if(main::b#1!=6) goto main::@2
Adding number conversion cast (unumber) 6 in [23] if(main::a#1!=6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [17] main::$3 = main::i#2 * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings mul8u::res#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::a#0
Inlining constant with var siblings main::b#0
Constant inlined main::a#0 = 0
Constant inlined main::i#0 = 0
Constant inlined mul8u::res#0 = 0
Constant inlined main::b#0 = 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting main::@5(between main::@3 and main::@1)
Added new block during phi lifting main::@6(between main::@4 and main::@2)
Adding NOP phi() at start of main
Adding NOP phi() at start of mul8u::@3
CALL GRAPH
Calls in [main] to mul8u:6 

Created 8 initial phi equivalence classes
Coalesced [2] main::i#7 = main::i#4
Coalesced [17] main::a#6 = main::a#1
Coalesced [18] main::i#6 = main::i#1
Coalesced [19] main::b#4 = main::b#1
Coalesced (already) [20] main::i#8 = main::i#1
Coalesced [22] mul8u::a#7 = mul8u::a#1
Coalesced [23] mul8u::mb#6 = mul8u::mb#0
Coalesced [31] mul8u::res#9 = mul8u::res#1
Coalesced [35] mul8u::a#8 = mul8u::a#0
Coalesced [36] mul8u::res#7 = mul8u::res#6
Coalesced [37] mul8u::mb#7 = mul8u::mb#1
Coalesced (already) [38] mul8u::res#8 = mul8u::res#2
Coalesced down to 6 phi equivalence classes
Culled Empty Block label main::@5
Culled Empty Block label main::@6
Culled Empty Block label mul8u::@3
Culled Empty Block label mul8u::@6
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::i#4 = phi( main/0, main::@3/main::i#1 )
  [1] main::a#4 = phi( main/0, main::@3/main::a#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [2] main::i#2 = phi( main::@1/main::i#4, main::@4/main::i#1 )
  [2] main::b#2 = phi( main::@1/0, main::@4/main::b#1 )
  [3] mul8u::a#1 = main::a#4
  [4] mul8u::b#0 = main::b#2
  [5] call mul8u 
  [6] mul8u::return#2 = mul8u::res#2
  to:main::@4
main::@4: scope:[main]  from main::@2
  [7] main::$0 = mul8u::return#2
  [8] main::$3 = main::i#2 << 1
  [9] main::screen[main::$3] = main::$0
  [10] main::i#1 = ++ main::i#2
  [11] main::b#1 = ++ main::b#2
  [12] if(main::b#1!=6) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@4
  [13] main::a#1 = ++ main::a#4
  [14] if(main::a#1!=6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [15] return 
  to:@return

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from main::@2
  [16] mul8u::mb#0 = (word)mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [17] mul8u::mb#2 = phi( mul8u/mul8u::mb#0, mul8u::@3/mul8u::mb#1 )
  [17] mul8u::res#2 = phi( mul8u/0, mul8u::@3/mul8u::res#6 )
  [17] mul8u::a#2 = phi( mul8u/mul8u::a#1, mul8u::@3/mul8u::a#0 )
  [18] if(mul8u::a#2!=0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [19] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [20] mul8u::$1 = mul8u::a#2 & 1
  [21] if(mul8u::$1==0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [23] mul8u::res#6 = phi( mul8u::@2/mul8u::res#2, mul8u::@4/mul8u::res#1 )
  [24] mul8u::a#0 = mul8u::a#2 >> 1
  [25] mul8u::mb#1 = mul8u::mb#2 << 1
  to:mul8u::@1


VARIABLE REGISTER WEIGHTS
void main()
word~ main::$0 101.0
byte~ main::$3 202.0
byte main::a
byte main::a#1 16.5
byte main::a#4 10.249999999999998
byte main::b
byte main::b#1 151.5
byte main::b#2 33.666666666666664
byte main::i
byte main::i#1 42.599999999999994
byte main::i#2 39.25
byte main::i#4 22.0
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 2000002.0
byte mul8u::a
byte mul8u::a#0 1000001.0
byte mul8u::a#1 367.33333333333337
byte mul8u::a#2 666834.1666666667
byte mul8u::b
byte mul8u::b#0 101.0
word mul8u::mb
word mul8u::mb#0 2002.0
word mul8u::mb#1 2000002.0
word mul8u::mb#2 428714.85714285716
word mul8u::res
word mul8u::res#1 2000002.0
word mul8u::res#2 500017.3333333334
word mul8u::res#6 1000001.0
word mul8u::return
word mul8u::return#2 202.0

Initial phi equivalence classes
[ main::a#4 main::a#1 ]
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#4 main::i#1 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Added variable mul8u::b#0 to live range equivalence class [ mul8u::b#0 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Complete equivalence classes
[ main::a#4 main::a#1 ]
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#4 main::i#1 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ mul8u::b#0 ]
[ mul8u::return#2 ]
[ main::$0 ]
[ main::$3 ]
[ mul8u::$1 ]
Allocated zp[1]:2 [ main::a#4 main::a#1 ]
Allocated zp[1]:3 [ main::b#2 main::b#1 ]
Allocated zp[1]:4 [ main::i#2 main::i#4 main::i#1 ]
Allocated zp[1]:5 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp[2]:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:8 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[1]:10 [ mul8u::b#0 ]
Allocated zp[2]:11 [ mul8u::return#2 ]
Allocated zp[2]:13 [ main::$0 ]
Allocated zp[1]:15 [ main::$3 ]
Allocated zp[1]:16 [ mul8u::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] mul8u::return#2 = mul8u::res#2 [ main::a#4 main::b#2 main::i#2 mul8u::return#2 ] (  [ main::a#4 main::b#2 main::i#2 mul8u::return#2 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::a#4 main::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::b#2 main::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i#2 main::i#4 main::i#1 ]
Statement [7] main::$0 = mul8u::return#2 [ main::a#4 main::b#2 main::i#2 main::$0 ] (  [ main::a#4 main::b#2 main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [8] main::$3 = main::i#2 << 1 [ main::a#4 main::b#2 main::i#2 main::$0 main::$3 ] (  [ main::a#4 main::b#2 main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [9] main::screen[main::$3] = main::$0 [ main::a#4 main::b#2 main::i#2 ] (  [ main::a#4 main::b#2 main::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] mul8u::mb#0 = (word)mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( mul8u:5 [ main::a#4 main::b#2 main::i#2 mul8u::a#1 mul8u::mb#0 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [20] mul8u::$1 = mul8u::a#2 & 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( mul8u:5 [ main::a#4 main::b#2 main::i#2 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( mul8u:5 [ main::a#4 main::b#2 main::i#2 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [6] mul8u::return#2 = mul8u::res#2 [ main::a#4 main::b#2 main::i#2 mul8u::return#2 ] (  [ main::a#4 main::b#2 main::i#2 mul8u::return#2 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [7] main::$0 = mul8u::return#2 [ main::a#4 main::b#2 main::i#2 main::$0 ] (  [ main::a#4 main::b#2 main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [8] main::$3 = main::i#2 << 1 [ main::a#4 main::b#2 main::i#2 main::$0 main::$3 ] (  [ main::a#4 main::b#2 main::i#2 main::$0 main::$3 ] { }  ) always clobbers reg byte a 
Statement [9] main::screen[main::$3] = main::$0 [ main::a#4 main::b#2 main::i#2 ] (  [ main::a#4 main::b#2 main::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] mul8u::mb#0 = (word)mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( mul8u:5 [ main::a#4 main::b#2 main::i#2 mul8u::a#1 mul8u::mb#0 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [20] mul8u::$1 = mul8u::a#2 & 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( mul8u:5 [ main::a#4 main::b#2 main::i#2 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( mul8u:5 [ main::a#4 main::b#2 main::i#2 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = main::a#4 } { mul8u::b#0 = main::b#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::a#4 main::a#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::b#2 main::b#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::i#2 main::i#4 main::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ mul8u::b#0 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:11 [ mul8u::return#2 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ main::$0 ] : zp[2]:13 , 
Potential registers zp[1]:15 [ main::$3 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ mul8u::$1 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 3,500,020.33: zp[2]:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 2,430,718.86: zp[2]:8 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 2,000,002: zp[1]:16 [ mul8u::$1 ] 1,667,202.5: zp[1]:5 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 202: zp[2]:11 [ mul8u::return#2 ] 101: zp[1]:10 [ mul8u::b#0 ] 
Uplift Scope [main] 202: zp[1]:15 [ main::$3 ] 185.17: zp[1]:3 [ main::b#2 main::b#1 ] 103.85: zp[1]:4 [ main::i#2 main::i#4 main::i#1 ] 101: zp[2]:13 [ main::$0 ] 26.75: zp[1]:2 [ main::a#4 main::a#1 ] 
Uplift Scope [] 

Uplifting [mul8u] best 84085 combination zp[2]:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:8 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp[2]:11 [ mul8u::return#2 ] reg byte a [ mul8u::b#0 ] 
Uplifting [main] best 82685 combination reg byte x [ main::$3 ] reg byte y [ main::b#2 main::b#1 ] zp[1]:4 [ main::i#2 main::i#4 main::i#1 ] zp[2]:13 [ main::$0 ] zp[1]:2 [ main::a#4 main::a#1 ] 
Limited combination testing to 100 combinations of 108 possible.
Uplifting [] best 82685 combination 
Attempting to uplift remaining variables inzp[1]:4 [ main::i#2 main::i#4 main::i#1 ]
Uplifting [main] best 82685 combination zp[1]:4 [ main::i#2 main::i#4 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::a#4 main::a#1 ]
Uplifting [main] best 82685 combination zp[1]:2 [ main::a#4 main::a#1 ] 
Coalescing zero page register [ zp[2]:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:11 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp[2]:13 [ main::$0 ] ] - score: 1
Allocated (was zp[1]:4) zp[1]:3 [ main::i#2 main::i#4 main::i#1 ]
Allocated (was zp[2]:6) zp[2]:4 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 main::$0 ]
Allocated (was zp[2]:8) zp[2]:6 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal test of mul8u
  // Upstart
  // Commodore 64 PRG executable file
.file [name="mul8u-min.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    .label __0 = 4
    .label i = 3
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi main::a#4 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::i#4 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::a#4 = main::a#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [2] phi main::i#2 = main::i#4 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi main::b#2 = 0 [phi:main::@1->main::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [2] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [2] phi main::i#2 = main::i#1 [phi:main::@4->main::@2#0] -- register_copy 
    // [2] phi main::b#2 = main::b#1 [phi:main::@4->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [3] mul8u::a#1 = main::a#4 -- vbuxx=vbuz1 
    ldx.z a
    // [4] mul8u::b#0 = main::b#2 -- vbuaa=vbuyy 
    tya
    // [5] call mul8u 
    jsr mul8u
    // [6] mul8u::return#2 = mul8u::res#2
    jmp __b4
    // main::@4
  __b4:
    // [7] main::$0 = mul8u::return#2
    // [8] main::$3 = main::i#2 << 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [9] main::screen[main::$3] = main::$0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda.z __0
    sta screen,x
    lda.z __0+1
    sta screen+1,x
    // [10] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [11] main::b#1 = ++ main::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [12] if(main::b#1!=6) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b2_from___b4
    jmp __b3
    // main::@3
  __b3:
    // [13] main::a#1 = ++ main::a#4 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [14] if(main::a#1!=6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z a
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = 6
    .label res = 4
    .label return = 4
    // [16] mul8u::mb#0 = (word)mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [17] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [17] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [17] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [17] phi mul8u::a#2 = mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [18] if(mul8u::a#2!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [19] return 
    rts
    // mul8u::@2
  __b2:
    // [20] mul8u::$1 = mul8u::a#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [21] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [23] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [23] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [24] mul8u::a#0 = mul8u::a#2 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [25] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [17] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [17] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [17] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [17] phi mul8u::a#2 = mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
void main()
word~ main::$0 zp[2]:4 101.0
byte~ main::$3 reg byte x 202.0
byte main::a
byte main::a#1 a zp[1]:2 16.5
byte main::a#4 a zp[1]:2 10.249999999999998
byte main::b
byte main::b#1 reg byte y 151.5
byte main::b#2 reg byte y 33.666666666666664
byte main::i
byte main::i#1 i zp[1]:3 42.599999999999994
byte main::i#2 i zp[1]:3 39.25
byte main::i#4 i zp[1]:3 22.0
constant word* const main::screen = (word*) 1024
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2000002.0
byte mul8u::a
byte mul8u::a#0 reg byte x 1000001.0
byte mul8u::a#1 reg byte x 367.33333333333337
byte mul8u::a#2 reg byte x 666834.1666666667
byte mul8u::b
byte mul8u::b#0 reg byte a 101.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:6 2002.0
word mul8u::mb#1 mb zp[2]:6 2000002.0
word mul8u::mb#2 mb zp[2]:6 428714.85714285716
word mul8u::res
word mul8u::res#1 res zp[2]:4 2000002.0
word mul8u::res#2 res zp[2]:4 500017.3333333334
word mul8u::res#6 res zp[2]:4 1000001.0
word mul8u::return
word mul8u::return#2 return zp[2]:4 202.0

zp[1]:2 [ main::a#4 main::a#1 ]
reg byte y [ main::b#2 main::b#1 ]
zp[1]:3 [ main::i#2 main::i#4 main::i#1 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:4 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 main::$0 ]
zp[2]:6 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
reg byte a [ mul8u::b#0 ]
reg byte x [ main::$3 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 62975

  // File Comments
// Minimal test of mul8u
  // Upstart
  // Commodore 64 PRG executable file
.file [name="mul8u-min.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    .label __0 = 4
    .label i = 3
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#4 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi main::a#4 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    sta.z a
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::i#4 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::a#4 = main::a#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // [2] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [2] phi main::i#2 = main::i#4 [phi:main::@1->main::@2#0] -- register_copy 
    // [2] phi main::b#2 = 0 [phi:main::@1->main::@2#1] -- vbuyy=vbuc1 
    ldy #0
    // [2] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [2] phi main::i#2 = main::i#1 [phi:main::@4->main::@2#0] -- register_copy 
    // [2] phi main::b#2 = main::b#1 [phi:main::@4->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // mul8u(a,b)
    // [3] mul8u::a#1 = main::a#4 -- vbuxx=vbuz1 
    ldx.z a
    // [4] mul8u::b#0 = main::b#2 -- vbuaa=vbuyy 
    tya
    // [5] call mul8u 
    jsr mul8u
    // [6] mul8u::return#2 = mul8u::res#2
    // main::@4
    // [7] main::$0 = mul8u::return#2
    // screen[i++] = mul8u(a,b)
    // [8] main::$3 = main::i#2 << 1 -- vbuxx=vbuz1_rol_1 
    lda.z i
    asl
    tax
    // [9] main::screen[main::$3] = main::$0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda.z __0
    sta screen,x
    lda.z __0+1
    sta screen+1,x
    // screen[i++] = mul8u(a,b);
    // [10] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // for (byte b: 0..5)
    // [11] main::b#1 = ++ main::b#2 -- vbuyy=_inc_vbuyy 
    iny
    // [12] if(main::b#1!=6) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b2
    // main::@3
    // for(byte a: 0..5)
    // [13] main::a#1 = ++ main::a#4 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [14] if(main::a#1!=6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z a
    bne __b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = 6
    .label res = 4
    .label return = 4
    // mb = b
    // [16] mul8u::mb#0 = (word)mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [17] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [17] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [17] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [17] phi mul8u::a#2 = mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [18] if(mul8u::a#2!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [19] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [20] mul8u::$1 = mul8u::a#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [21] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [23] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [23] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [24] mul8u::a#0 = mul8u::a#2 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [25] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [17] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [17] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [17] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [17] phi mul8u::a#2 = mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

