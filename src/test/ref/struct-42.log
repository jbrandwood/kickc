Constantified RValue points[main::$1] = { x: 2, y: 3 }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$1 = main::i#2 * SIZEOF_STRUCT_POINT
  points[main::$1] = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  main::i#1 = main::i#2 + rangenext(0,2)
  main::$0 = main::i#1 != rangelast(0,2)
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::$2 = 2 * SIZEOF_STRUCT_POINT
  main::$4 = (byte*)points + main::$2
  SCREEN[0] = main::$4[OFFSET_STRUCT_POINT_X]
  main::$3 = 2 * SIZEOF_STRUCT_POINT
  main::$5 = (byte*)points + main::$3
  SCREEN[1] = main::$5[OFFSET_STRUCT_POINT_Y]
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const struct Point $0 = { x: 2, y: 3 }
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
byte Point::x
byte Point::y
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_STRUCT_POINT = 2
void __start()
label __start::@1
label __start::@return
void main()
bool~ main::$0
byte~ main::$1
number~ main::$2
number~ main::$3
byte*~ main::$4
byte*~ main::$5
label main::@1
label main::@2
label main::@return
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
const struct Point* points[3]  = { fill( 3, 0) }

Adding number conversion cast (unumber) 2 in main::$2 = 2 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$2 in main::$2 = (unumber)2 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$4[OFFSET_STRUCT_POINT_X]
Adding number conversion cast (unumber) 2 in main::$3 = 2 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$3 in main::$3 = (unumber)2 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 1 in SCREEN[1] = main::$5[OFFSET_STRUCT_POINT_Y]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 2
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$2 = 2 * SIZEOF_STRUCT_POINT
Inferred type updated to byte in main::$3 = 2 * SIZEOF_STRUCT_POINT
Simple Condition main::$0 [6] if(main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [7] main::$2 = 2 * SIZEOF_STRUCT_POINT
Constant right-side identified [10] main::$3 = 2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$2 = 2*SIZEOF_STRUCT_POINT
Constant main::$3 = 2*SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [6] if(main::i#1!=rangelast(0,2)) goto main::@1 to 3
Simplifying expression containing zero main::$4 in [9] SCREEN[0] = main::$4[OFFSET_STRUCT_POINT_X]
Simplifying expression containing zero SCREEN in [9] SCREEN[0] = *main::$4
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [4] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [5] main::$4 = (byte*)points + main::$2
Constant right-side identified [7] main::$5 = (byte*)points + main::$3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$4 = (byte*)points+main::$2
Constant main::$5 = (byte*)points+main::$3
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [1] main::$1 = main::i#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Constant inlined main::$5 = (byte*)points+2*SIZEOF_STRUCT_POINT
Constant inlined main::i#0 = 0
Constant inlined main::$3 = 2*SIZEOF_STRUCT_POINT
Constant inlined main::$4 = (byte*)points+2*SIZEOF_STRUCT_POINT
Constant inlined main::$2 = 2*SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [9] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$1 = main::i#2 << 1
  [3] points[main::$1] = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] *SCREEN = *((byte*)points+2*SIZEOF_STRUCT_POINT)
  [7] *(SCREEN+1) = *((byte*)points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte Point::x
byte Point::y
void main()
byte~ main::$1 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$1 = main::i#2 << 1 [ main::i#2 main::$1 ] (  [ main::i#2 main::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] points[main::$1] = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [5] if(main::i#1!=3) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Statement [6] *SCREEN = *((byte*)points+2*SIZEOF_STRUCT_POINT) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *(SCREEN+1) = *((byte*)points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::$1 = main::i#2 << 1 [ main::i#2 main::$1 ] (  [ main::i#2 main::$1 ] { }  ) always clobbers reg byte a 
Statement [3] points[main::$1] = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [5] if(main::i#1!=3) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Statement [6] *SCREEN = *((byte*)points+2*SIZEOF_STRUCT_POINT) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *(SCREEN+1) = *((byte*)points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::$1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:3 [ main::$1 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 560 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [Point] best 560 combination 
Uplifting [] best 560 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 560 combination zp[1]:2 [ main::i#2 main::i#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - copying into a struct array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$1 = main::i#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [3] points[main::$1] = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- pssc1_derefidx_vbuaa=_deref_pssc2_memcpy_vbuc3 
    tax
    ldy #0
  !:
    lda __0,y
    sta points,x
    inx
    iny
    cpy #SIZEOF_STRUCT_POINT
    bne !-
    // [4] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] if(main::i#1!=3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1_from___b1
    jmp __b2
    // main::@2
  __b2:
    // [6] *SCREEN = *((byte*)points+2*SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda points+2*SIZEOF_STRUCT_POINT
    sta SCREEN
    // [7] *(SCREEN+1) = *((byte*)points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data
  points: .fill 2*3, 0
  __0: .byte 2, 3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const struct Point $0 = { x: 2, y: 3 }
const byte OFFSET_STRUCT_POINT_Y = 1
byte Point::x
byte Point::y
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_STRUCT_POINT = 2
void main()
byte~ main::$1 reg byte a 22.0
label main::@1
label main::@2
label main::@return
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 11.0
const struct Point* points[3]  = { fill( 3, 0) }

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 467

  // File Comments
// Minimal struct with C-Standard behavior - copying into a struct array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // points[i] = { 2, 3 }
    // [2] main::$1 = main::i#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [3] points[main::$1] = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- pssc1_derefidx_vbuaa=_deref_pssc2_memcpy_vbuc3 
    tax
    ldy #0
  !:
    lda __0,y
    sta points,x
    inx
    iny
    cpy #SIZEOF_STRUCT_POINT
    bne !-
    // for( char i: 0..2)
    // [4] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] if(main::i#1!=3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne __b1
    // main::@2
    // SCREEN[0] = points[2].x
    // [6] *SCREEN = *((byte*)points+2*SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda points+2*SIZEOF_STRUCT_POINT
    sta SCREEN
    // SCREEN[1] = points[2].y
    // [7] *(SCREEN+1) = *((byte*)points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+2*SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data
  points: .fill 2*3, 0
  __0: .byte 2, 3

