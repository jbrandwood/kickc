Loading link script "ataritempest.ld"

CONTROL FLOW GRAPH SSA

void entryPoint()
entryPoint: scope:[entryPoint]  from
  entryPoint::i#0 = 0
  to:entryPoint::@1
entryPoint::@1: scope:[entryPoint]  from entryPoint entryPoint::@1
  entryPoint::i#2 = phi( entryPoint/entryPoint::i#0, entryPoint::@1/entryPoint::i#1 )
  SCREEN[entryPoint::i#2] = MESSAGE[entryPoint::i#2]
  entryPoint::i#1 = entryPoint::i#2 + rangenext(0,$31)
  entryPoint::$0 = entryPoint::i#1 != rangelast(0,$31)
  if(entryPoint::$0) goto entryPoint::@1
  to:entryPoint::@return
entryPoint::@return: scope:[entryPoint]  from entryPoint::@1
  return 
  to:@return

__interrupt(hardware_clobber) void nmiHandler()
nmiHandler: scope:[nmiHandler]  from
  *BG_COLOR = ++ *BG_COLOR
  to:nmiHandler::@return
nmiHandler::@return: scope:[nmiHandler]  from nmiHandler
  return 
  to:@return

void main()
main: scope:[main]  from __start
  *BG_COLOR = ++ *BG_COLOR
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte* const BG_COLOR = (byte*)$c01a
constant byte* MESSAGE[]  = "hello world"
constant byte* SCREEN[$32]  = { fill( $32, 0) }
constant void()* const* VECTORS[]  = { &nmiHandler, &entryPoint }
void __start()
void entryPoint()
bool~ entryPoint::$0
byte entryPoint::i
byte entryPoint::i#0
byte entryPoint::i#1
byte entryPoint::i#2
void main()
__interrupt(hardware_clobber) void nmiHandler()

Simplifying constant pointer cast (byte*) 49178
Successful SSA optimization PassNCastSimplification
Simple Condition entryPoint::$0 [5] if(entryPoint::i#1!=rangelast(0,$31)) goto entryPoint::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant entryPoint::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [3] entryPoint::i#1 = ++ entryPoint::i#2 to ++
Resolved ranged comparison value [5] if(entryPoint::i#1!=rangelast(0,$31)) goto entryPoint::@1 to $32
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $32 in [3] if(entryPoint::i#1!=$32) goto entryPoint::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $32
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $32
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings entryPoint::i#0
Constant inlined entryPoint::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) $32
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting entryPoint::@2(between entryPoint::@1 and entryPoint::@1)
Adding NOP phi() at start of entryPoint
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [10] entryPoint::i#3 = entryPoint::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label entryPoint::@2
Adding NOP phi() at start of entryPoint

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *BG_COLOR = ++ *BG_COLOR
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return

__interrupt(hardware_clobber) void nmiHandler()
nmiHandler: scope:[nmiHandler]  from
  [2] *BG_COLOR = ++ *BG_COLOR
  to:nmiHandler::@return
nmiHandler::@return: scope:[nmiHandler]  from nmiHandler
  [3] return 
  to:@return

void entryPoint()
entryPoint: scope:[entryPoint]  from
  [4] phi()
  to:entryPoint::@1
entryPoint::@1: scope:[entryPoint]  from entryPoint entryPoint::@1
  [5] entryPoint::i#2 = phi( entryPoint/0, entryPoint::@1/entryPoint::i#1 )
  [6] SCREEN[entryPoint::i#2] = MESSAGE[entryPoint::i#2]
  [7] entryPoint::i#1 = ++ entryPoint::i#2
  [8] if(entryPoint::i#1!=$32) goto entryPoint::@1
  to:entryPoint::@return
entryPoint::@return: scope:[entryPoint]  from entryPoint::@1
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void entryPoint()
byte entryPoint::i
byte entryPoint::i#1 16.5
byte entryPoint::i#2 22.0
void main()
__interrupt(hardware_clobber) void nmiHandler()

Initial phi equivalence classes
[ entryPoint::i#2 entryPoint::i#1 ]
Complete equivalence classes
[ entryPoint::i#2 entryPoint::i#1 ]
Allocated zp[1]:2 [ entryPoint::i#2 entryPoint::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [6] SCREEN[entryPoint::i#2] = MESSAGE[entryPoint::i#2] [ entryPoint::i#2 ] (  [ entryPoint::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ entryPoint::i#2 entryPoint::i#1 ]
Statement [3] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [6] SCREEN[entryPoint::i#2] = MESSAGE[entryPoint::i#2] [ entryPoint::i#2 ] (  [ entryPoint::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ entryPoint::i#2 entryPoint::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [entryPoint] 38.5: zp[1]:2 [ entryPoint::i#2 entryPoint::i#1 ] 
Uplift Scope [nmiHandler] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [entryPoint] best 650 combination reg byte x [ entryPoint::i#2 entryPoint::i#1 ] 
Uplifting [nmiHandler] best 650 combination 
Uplifting [main] best 650 combination 
Uplifting [] best 650 combination 
Interrupt procedure nmiHandler clobbers nzP

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Atari Tempest ROM Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP
  // Upstart
.cpu _6502
  .file [name="ataritempest.bin", type="bin", segments="AtariTempest"]
.segmentdef AtariTempest [segments="Code, RomData, Vectors"]
.segmentdef Code [start=$9000, min=$9000, max=$Fff9]
.segmentdef RomData [startAfter="Code", min=$9000, max=$Fff9]
.segmentdef RamData [start=$200, min=$200, max=$7ff]
.segmentdef Vectors [start=$FFFA, min=$FFFA, max=$FFFF, fill]
.segment Code
init:
  // Global Constants & labels
  .label BG_COLOR = $c01a
.segment Code
  // main
main: {
    // [0] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // nmiHandler
nmiHandler: {
    // interrupt(isr_hardware_clobber_entry) -- isr_hardware_all_entry 
    // [2] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // nmiHandler::@return
  __breturn:
    // [3] return 
    // interrupt(isr_hardware_clobber_exit) -- isr_hardware_all_exit 
    rti
}
  // entryPoint
entryPoint: {
    // [5] phi from entryPoint to entryPoint::@1 [phi:entryPoint->entryPoint::@1]
  __b1_from_entryPoint:
    // [5] phi entryPoint::i#2 = 0 [phi:entryPoint->entryPoint::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [5] phi from entryPoint::@1 to entryPoint::@1 [phi:entryPoint::@1->entryPoint::@1]
  __b1_from___b1:
    // [5] phi entryPoint::i#2 = entryPoint::i#1 [phi:entryPoint::@1->entryPoint::@1#0] -- register_copy 
    jmp __b1
    // entryPoint::@1
  __b1:
    // [6] SCREEN[entryPoint::i#2] = MESSAGE[entryPoint::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SCREEN,x
    // [7] entryPoint::i#1 = ++ entryPoint::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(entryPoint::i#1!=$32) goto entryPoint::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$32
    bne __b1_from___b1
    jmp __breturn
    // entryPoint::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
.segment RomData
  MESSAGE: .text "hello world"
  .byte 0
.segment RamData
  SCREEN: .fill $32, 0
.segment Vectors
  VECTORS: .word nmiHandler, entryPoint

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_entryPoint:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant byte* const BG_COLOR = (byte*) 49178
constant byte* MESSAGE[]  = "hello world"
constant byte* SCREEN[$32]  = { fill( $32, 0) }
constant void()* const* VECTORS[]  = { &nmiHandler, &entryPoint }
void entryPoint()
byte entryPoint::i
byte entryPoint::i#1 reg byte x 16.5
byte entryPoint::i#2 reg byte x 22.0
void main()
__interrupt(hardware_clobber) void nmiHandler()

reg byte x [ entryPoint::i#2 entryPoint::i#1 ]


FINAL ASSEMBLER
Score: 264

  // File Comments
// Atari Tempest ROM Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP
  // Upstart
.cpu _6502
  .file [name="ataritempest.bin", type="bin", segments="AtariTempest"]
.segmentdef AtariTempest [segments="Code, RomData, Vectors"]
.segmentdef Code [start=$9000, min=$9000, max=$Fff9]
.segmentdef RomData [startAfter="Code", min=$9000, max=$Fff9]
.segmentdef RamData [start=$200, min=$200, max=$7ff]
.segmentdef Vectors [start=$FFFA, min=$FFFA, max=$FFFF, fill]
.segment Code
init:
  // Global Constants & labels
  .label BG_COLOR = $c01a
.segment Code
  // main
main: {
    // (*BG_COLOR)++;
    // [0] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // main::@return
    // }
    // [1] return 
    rts
}
  // nmiHandler
nmiHandler: {
    // interrupt(isr_hardware_clobber_entry) -- isr_hardware_all_entry 
    // (*BG_COLOR)++;
    // [2] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // nmiHandler::@return
    // }
    // [3] return 
    // interrupt(isr_hardware_clobber_exit) -- isr_hardware_all_exit 
    rti
}
  // entryPoint
entryPoint: {
    // [5] phi from entryPoint to entryPoint::@1 [phi:entryPoint->entryPoint::@1]
    // [5] phi entryPoint::i#2 = 0 [phi:entryPoint->entryPoint::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from entryPoint::@1 to entryPoint::@1 [phi:entryPoint::@1->entryPoint::@1]
    // [5] phi entryPoint::i#2 = entryPoint::i#1 [phi:entryPoint::@1->entryPoint::@1#0] -- register_copy 
    // entryPoint::@1
  __b1:
    // SCREEN[i] = MESSAGE[i]
    // [6] SCREEN[entryPoint::i#2] = MESSAGE[entryPoint::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SCREEN,x
    // for( char i:0..49)
    // [7] entryPoint::i#1 = ++ entryPoint::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(entryPoint::i#1!=$32) goto entryPoint::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$32
    bne __b1
    // entryPoint::@return
    // }
    // [9] return 
    rts
}
  // File Data
.segment RomData
  MESSAGE: .text "hello world"
  .byte 0
.segment RamData
  SCREEN: .fill $32, 0
.segment Vectors
  VECTORS: .word nmiHandler, entryPoint

