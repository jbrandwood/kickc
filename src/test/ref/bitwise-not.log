
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *main::SCREEN = ~1
  main::c#0 = 1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::c#2 = phi( main/main::c#0, main::@1/main::c#1 )
  main::$0 = ~ main::c#2
  main::SCREEN[main::c#2] = main::$0
  main::c#1 = main::c#2 + rangenext(1,$1a)
  main::$1 = main::c#1 != rangelast(1,$1a)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
char main::$0
bool main::$1
__constant char *main::SCREEN = (char *)$400
char main::c
char main::c#0
char main::c#1
char main::c#2

Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$1 [7] if(main::c#1!=rangelast(1,$1a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::c#0 = 1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::c#1 = ++ main::c#2 to ++
Resolved ranged comparison value [7] if(main::c#1!=rangelast(1,$1a)) goto main::@1 to $1b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $1b in [5] if(main::c#1!=$1b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $1b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $1b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::c#0
Constant inlined main::c#0 = 1
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::c#3 = main::c#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = ~1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::c#2 = phi( main/1, main::@1/main::c#1 )
  [2] main::$0 = ~ main::c#2
  [3] main::SCREEN[main::c#2] = main::$0
  [4] main::c#1 = ++ main::c#2
  [5] if(main::c#1!=$1b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$0 // 22.0
char main::c
char main::c#1 // 16.5
char main::c#2 // 14.666666666666666

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = ~1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::$0 = ~ main::c#2 [ main::c#2 main::$0 ] (  [ main::c#2 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Statement [0] *main::SCREEN = ~1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] main::$0 = ~ main::c#2 [ main::c#2 main::$0 ] (  [ main::c#2 main::$0 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp[1]:2 [ main::c#2 main::c#1 ] 22: zp[1]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 277 combination reg byte x [ main::c#2 main::c#1 ] reg byte a [ main::$0 ] 
Uplifting [] best 277 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bitwise-not.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [0] *main::SCREEN = ~1 -- _deref_pbuc1=vbuc2 
    lda #1^$ff
    sta SCREEN
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::c#2 = 1 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::c#2 = main::c#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = ~ main::c#2 -- vbuaa=_bnot_vbuxx 
    txa
    eor #$ff
    // [3] main::SCREEN[main::c#2] = main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [4] main::c#1 = ++ main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::c#1!=$1b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$1b
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
char main::$0 // reg byte a 22.0
__constant char *main::SCREEN = (char *) 1024
char main::c
char main::c#1 // reg byte x 16.5
char main::c#2 // reg byte x 14.666666666666666

reg byte x [ main::c#2 main::c#1 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 187

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bitwise-not.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // *SCREEN = ~1ub
    // [0] *main::SCREEN = ~1 -- _deref_pbuc1=vbuc2 
    lda #1^$ff
    sta SCREEN
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::c#2 = 1 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::c#2 = main::c#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // ~c
    // [2] main::$0 = ~ main::c#2 -- vbuaa=_bnot_vbuxx 
    txa
    eor #$ff
    // SCREEN[c] = ~c
    // [3] main::SCREEN[main::c#2] = main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // for(byte c : 1..26)
    // [4] main::c#1 = ++ main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if(main::c#1!=$1b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$1b
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

