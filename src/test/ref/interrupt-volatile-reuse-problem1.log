Resolved forward reference irq to __interrupt(rom_min_c64) void irq()
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  *KERNEL_IRQ = &irq
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

__interrupt(rom_min_c64) void irq()
irq: scope:[irq]  from
  SCREEN[$28] = col1
  col1 = ++ col1
  SCREEN[$29] = col2
  col2 = ++ col2
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  col1 = 0
  col2 = 8
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
constant void()** const KERNEL_IRQ = (void()**)$314
constant byte* const SCREEN = (byte*)$400
void __start()
volatile byte col1 loadstore
volatile byte col2 loadstore
__interrupt(rom_min_c64) void irq()
void main()

Adding number conversion cast (unumber) $28 in SCREEN[$28] = col1
Adding number conversion cast (unumber) $29 in SCREEN[$29] = col2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $29
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Consolidated array index constant in *(SCREEN+$28)
Consolidated array index constant in *(SCREEN+$29)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
CALL GRAPH
Calls in [__start] to main:4 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label __start::@2
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] col1 = 0
  [2] col2 = 8
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

__interrupt(rom_min_c64) void irq()
irq: scope:[irq]  from
  [6] *(SCREEN+$28) = col1
  [7] col1 = ++ col1
  [8] *(SCREEN+$29) = col2
  [9] col2 = ++ col2
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [10] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [11] *KERNEL_IRQ = &irq
  to:main::@return
main::@return: scope:[main]  from main
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
volatile byte col1 loadstore 8.0
volatile byte col2 loadstore 2.6666666666666665
__interrupt(rom_min_c64) void irq()
void main()

Initial phi equivalence classes
Added variable col1 to live range equivalence class [ col1 ]
Added variable col2 to live range equivalence class [ col2 ]
Complete equivalence classes
[ col1 ]
[ col2 ]
Allocated zp[1]:2 [ col1 ]
Allocated zp[1]:3 [ col2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] col1 = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] col2 = 8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *(SCREEN+$28) = col1 [ col1 col2 ] (  [ col1 col2 ] { }  ) always clobbers reg byte a 
Statement [8] *(SCREEN+$29) = col2 [ col2 ] (  [ col2 ] { }  ) always clobbers reg byte a 
Statement [11] *KERNEL_IRQ = &irq [ ] ( main:4 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ col1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ col2 ] : zp[1]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 8: zp[1]:2 [ col1 ] 2.67: zp[1]:3 [ col2 ] 
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [__start] 

Uplifting [] best 136 combination zp[1]:2 [ col1 ] zp[1]:3 [ col2 ] 
Uplifting [main] best 136 combination 
Uplifting [irq] best 136 combination 
Uplifting [__start] best 136 combination 
Attempting to uplift remaining variables inzp[1]:2 [ col1 ]
Uplifting [] best 136 combination zp[1]:2 [ col1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ col2 ]
Uplifting [] best 136 combination zp[1]:3 [ col2 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates problem where volatiles reuse the same ZP addresses for multiple overlapping volatiles
  // Upstart
  // Commodore 64 PRG executable file
.file [name="interrupt-volatile-reuse-problem1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label col1 = 2
  .label col2 = 3
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] col1 = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col1
    // [2] col2 = 8 -- vbuz1=vbuc1 
    lda #8
    sta.z col2
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [4] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [5] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_rom_min_c64_entry) -- isr_rom_min_c64_entry 
    // [6] *(SCREEN+$28) = col1 -- _deref_pbuc1=vbuz1 
    lda.z col1
    sta SCREEN+$28
    // [7] col1 = ++ col1 -- vbuz1=_inc_vbuz1 
    inc.z col1
    // [8] *(SCREEN+$29) = col2 -- _deref_pbuc1=vbuz1 
    lda.z col2
    sta SCREEN+$29
    // [9] col2 = ++ col2 -- vbuz1=_inc_vbuz1 
    inc.z col2
    jmp __breturn
    // irq::@return
  __breturn:
    // [10] return 
    // interrupt(isr_rom_min_c64_exit) -- isr_rom_min_c64_exit 
    jmp $ea81
}
  // main
main: {
    // [11] *KERNEL_IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant void()** const KERNEL_IRQ = (void()**) 788
constant byte* const SCREEN = (byte*) 1024
void __start()
volatile byte col1 loadstore zp[1]:2 8.0
volatile byte col2 loadstore zp[1]:3 2.6666666666666665
__interrupt(rom_min_c64) void irq()
void main()

zp[1]:2 [ col1 ]
zp[1]:3 [ col2 ]


FINAL ASSEMBLER
Score: 94

  // File Comments
// Illustrates problem where volatiles reuse the same ZP addresses for multiple overlapping volatiles
  // Upstart
  // Commodore 64 PRG executable file
.file [name="interrupt-volatile-reuse-problem1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label SCREEN = $400
  .label col1 = 2
  .label col2 = 3
.segment Code
  // __start
__start: {
    // __start::__init1
    // col1 = 0
    // [1] col1 = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col1
    // col2 = 8
    // [2] col2 = 8 -- vbuz1=vbuc1 
    lda #8
    sta.z col2
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [4] call main 
    jsr main
    // __start::@return
    // [5] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_rom_min_c64_entry) -- isr_rom_min_c64_entry 
    // SCREEN[40] = col1++
    // [6] *(SCREEN+$28) = col1 -- _deref_pbuc1=vbuz1 
    lda.z col1
    sta SCREEN+$28
    // SCREEN[40] = col1++;
    // [7] col1 = ++ col1 -- vbuz1=_inc_vbuz1 
    inc.z col1
    // SCREEN[41] = col2++
    // [8] *(SCREEN+$29) = col2 -- _deref_pbuc1=vbuz1 
    lda.z col2
    sta SCREEN+$29
    // SCREEN[41] = col2++;
    // [9] col2 = ++ col2 -- vbuz1=_inc_vbuz1 
    inc.z col2
    // irq::@return
    // }
    // [10] return 
    // interrupt(isr_rom_min_c64_exit) -- isr_rom_min_c64_exit 
    jmp $ea81
}
  // main
main: {
    // *KERNEL_IRQ = &irq
    // [11] *KERNEL_IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // main::@return
    // }
    // [12] return 
    rts
}
  // File Data

