Identified constant variable (byte) main::BLACK
Identified constant variable (byte*) main::screen
Identified constant variable (byte*) main::cols
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::BLACK ← (number) 0
  (byte*) main::screen ← ((byte*)) (number) $400
  (byte*) main::cols ← ((byte*)) (number) $d800
  (byte) main::x#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@1/(byte) main::x#1 )
  (number~) main::$0 ← (byte) main::x#2 + (number) $c
  (byte) main::y#0 ← (number~) main::$0
  *((byte*) main::screen + (byte) main::y#0) ← (byte) 'a'
  *((byte*) main::cols + (byte) main::y#0) ← (byte) main::BLACK
  (byte) main::x#1 ← (byte) main::x#2 + rangenext(0,$a)
  (bool~) main::$1 ← (byte) main::x#1 != rangelast(0,$a)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(number~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@return
(byte) main::BLACK
(byte*) main::cols
(byte*) main::screen
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::y
(byte) main::y#0

Adding number conversion cast (unumber) 0 in (byte) main::BLACK ← (number) 0
Adding number conversion cast (unumber) $c in (number~) main::$0 ← (byte) main::x#2 + (number) $c
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::x#2 + (unumber)(number) $c
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::BLACK ← (unumber)(number) 0
Inlining cast (byte*) main::screen ← (byte*)(number) $400
Inlining cast (byte*) main::cols ← (byte*)(number) $d800
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::x#2 + (byte) $c
Alias (byte) main::y#0 = (byte~) main::$0 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [11] if((byte) main::x#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::BLACK = 0
Constant (const byte*) main::screen = (byte*) 1024
Constant (const byte*) main::cols = (byte*) 55296
Constant (const byte) main::x#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::x#1 ← ++ main::x#2 to ++
Resolved ranged comparison value [11] if(main::x#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Adding number conversion cast (unumber) $b in if((byte) main::x#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::x#0
Constant inlined main::x#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [13] main::x#3 ← main::x#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::x#2 ← phi( main/(byte) 0 main::@1/(byte) main::x#1 )
  [6] (byte) main::y#0 ← (byte) main::x#2 + (byte) $c
  [7] *((const byte*) main::screen + (byte) main::y#0) ← (byte) 'a'
  [8] *((const byte*) main::cols + (byte) main::y#0) ← (const byte) main::BLACK
  [9] (byte) main::x#1 ← ++ (byte) main::x#2
  [10] if((byte) main::x#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::x
(byte) main::x#1 16.5
(byte) main::x#2 8.25
(byte) main::y
(byte) main::y#0 16.5

Initial phi equivalence classes
[ main::x#2 main::x#1 ]
Added variable main::y#0 to zero page equivalence class [ main::y#0 ]
Complete equivalence classes
[ main::x#2 main::x#1 ]
[ main::y#0 ]
Allocated zp ZP_BYTE:2 [ main::x#2 main::x#1 ]
Allocated zp ZP_BYTE:3 [ main::y#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .const BLACK = 0
    .label screen = $400
    .label cols = $d800
    .label y = 3
    .label x = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte) main::y#0 ← (byte) main::x#2 + (byte) $c -- vbuz1=vbuz2_plus_vbuc1 
    lax.z x
    axs #-[$c]
    stx.z y
    // [7] *((const byte*) main::screen + (byte) main::y#0) ← (byte) 'a' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #'a'
    ldy.z y
    sta screen,y
    // [8] *((const byte*) main::cols + (byte) main::y#0) ← (const byte) main::BLACK -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #BLACK
    ldy.z y
    sta cols,y
    // [9] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [10] if((byte) main::x#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z x
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [11] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] *((const byte*) main::screen + (byte) main::y#0) ← (byte) 'a' [ main::x#2 main::y#0 ] ( main:2 [ main::x#2 main::y#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::y#0 ]
Statement [8] *((const byte*) main::cols + (byte) main::y#0) ← (const byte) main::BLACK [ main::x#2 ] ( main:2 [ main::x#2 ] ) always clobbers reg byte a 
Statement [6] (byte) main::y#0 ← (byte) main::x#2 + (byte) $c [ main::x#2 main::y#0 ] ( main:2 [ main::x#2 main::y#0 ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::screen + (byte) main::y#0) ← (byte) 'a' [ main::x#2 main::y#0 ] ( main:2 [ main::x#2 main::y#0 ] ) always clobbers reg byte a 
Statement [8] *((const byte*) main::cols + (byte) main::y#0) ← (const byte) main::BLACK [ main::x#2 ] ( main:2 [ main::x#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::x#2 main::x#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::y#0 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 24.75: zp ZP_BYTE:2 [ main::x#2 main::x#1 ] 16.5: zp ZP_BYTE:3 [ main::y#0 ] 
Uplift Scope [] 

Uplifting [main] best 393 combination reg byte y [ main::x#2 main::x#1 ] reg byte x [ main::y#0 ] 
Uplifting [] best 393 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .const BLACK = 0
    .label screen = $400
    .label cols = $d800
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte) main::y#0 ← (byte) main::x#2 + (byte) $c -- vbuxx=vbuyy_plus_vbuc1 
    tya
    tax
    axs #-[$c]
    // [7] *((const byte*) main::screen + (byte) main::y#0) ← (byte) 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'a'
    sta screen,x
    // [8] *((const byte*) main::cols + (byte) main::y#0) ← (const byte) main::BLACK -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta cols,x
    // [9] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] if((byte) main::x#1!=(byte) $b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(const byte) main::BLACK BLACK = (byte) 0
(const byte*) main::cols cols = (byte*) 55296
(const byte*) main::screen screen = (byte*) 1024
(byte) main::x
(byte) main::x#1 reg byte y 16.5
(byte) main::x#2 reg byte y 8.25
(byte) main::y
(byte) main::y#0 reg byte x 16.5

reg byte y [ main::x#2 main::x#1 ]
reg byte x [ main::y#0 ]


FINAL ASSEMBLER
Score: 291

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const BLACK = 0
    .label screen = $400
    .label cols = $d800
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // y=x+12
    // [6] (byte) main::y#0 ← (byte) main::x#2 + (byte) $c -- vbuxx=vbuyy_plus_vbuc1 
    tya
    tax
    axs #-[$c]
    // screen[y] = 'a'
    // [7] *((const byte*) main::screen + (byte) main::y#0) ← (byte) 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'a'
    sta screen,x
    // cols[y] = BLACK
    // [8] *((const byte*) main::cols + (byte) main::y#0) ← (const byte) main::BLACK -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta cols,x
    // for(byte x:0..10)
    // [9] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] if((byte) main::x#1!=(byte) $b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data

