__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void main()
struct fileentry *main::file
__constant struct fileentry *main::file#1 = (struct fileentry *) 16384 // file
unsigned int *main::ptrw
unsigned int main::uSize
unsigned int main::uSize#1 // uSize zp[2]:4 4.0
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 202.0
char print_char::ch#1 // reg byte a 202.0
char print_char::ch#2 // reg byte a 1203.0
char *print_char_cursor
char *print_char_cursor#19 // print_char_cursor zp[2]:2 1102.0
char *print_char_cursor#20 // print_char_cursor zp[2]:2 123.66666666666667
char *print_char_cursor#26 // print_char_cursor zp[2]:2 37.33333333333333
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_uchar(char b)
char print_uchar::$0 // reg byte a 202.0
char print_uchar::$2 // reg byte x 202.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 22.0
char print_uchar::b#1 // reg byte x 22.0
char print_uchar::b#2 // reg byte x 56.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:4 8.0

reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:2 [ print_char_cursor#19 print_char_cursor#26 print_char_cursor#20 ]
zp[2]:4 [ main::uSize#1 print_uint::w#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
