
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::bu = 7
  main::bs = 7
  main::wu = $4e20
  main::ws = -$b1
  main::du = $1e8480
  main::ds = -$39a4f1
  main::ptr = (char *)0
  main::i#0 = 0
  main::$7 = main::i#0 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$7] = word0 $11
  main::i#1 = ++ main::i#0
  main::$8 = main::i#1 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$8] = word0 $179
  main::i#2 = ++ main::i#1
  main::$0 = word0  main::bu
  main::$9 = main::i#2 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$9] = main::$0
  main::i#3 = ++ main::i#2
  main::$1 = word0  main::bs
  main::$10 = main::i#3 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$10] = main::$1
  main::i#4 = ++ main::i#3
  main::$2 = word0  main::wu
  main::$11 = main::i#4 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$11] = main::$2
  main::i#5 = ++ main::i#4
  main::$3 = word0  main::ws
  main::$12 = main::i#5 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$12] = main::$3
  main::i#6 = ++ main::i#5
  main::$4 = word0  main::du
  main::$13 = main::i#6 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$13] = main::$4
  main::i#7 = ++ main::i#6
  main::$5 = word0  main::ds
  main::$14 = main::i#7 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$14] = main::$5
  main::i#8 = ++ main::i#7
  main::$6 = word0  main::ptr
  main::$15 = main::i#8 * SIZEOF_UNSIGNED_INT
  main::SCREEN[main::$15] = main::$6
  main::i#9 = ++ main::i#8
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char SIZEOF_UNSIGNED_INT = 2
void __start()
void main()
unsigned int main::$0
unsigned int main::$1
char main::$10
char main::$11
char main::$12
char main::$13
char main::$14
char main::$15
unsigned int main::$2
unsigned int main::$3
unsigned int main::$4
unsigned int main::$5
unsigned int main::$6
char main::$7
char main::$8
char main::$9
__constant unsigned int * const main::SCREEN = (char *)$400
__loadstore volatile signed char main::bs
__loadstore volatile char main::bu
__loadstore volatile long main::ds
__loadstore volatile unsigned long main::du
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::i#6
char main::i#7
char main::i#8
char main::i#9
__loadstore char * volatile main::ptr
__loadstore volatile int main::ws
__loadstore volatile unsigned int main::wu

Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 0
Successful SSA optimization PassNCastSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused variable main::i#9 and assignment [40] main::i#9 = ++ main::i#8
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [7] main::$7 = main::i#0 * SIZEOF_UNSIGNED_INT
Constant right-side identified [9] main::i#1 = ++ main::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$7 = main::i#0*SIZEOF_UNSIGNED_INT
Constant main::i#1 = ++main::i#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::i#0*SIZEOF_UNSIGNED_INT in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [8] main::SCREEN[main::$7] = word0 $11
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$7
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [8] main::$8 = main::i#1 * SIZEOF_UNSIGNED_INT
Constant right-side identified [10] main::i#2 = ++ main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$8 = main::i#1*SIZEOF_UNSIGNED_INT
Constant main::i#2 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [10] main::$9 = main::i#2 * SIZEOF_UNSIGNED_INT
Constant right-side identified [12] main::i#3 = ++ main::i#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$9 = main::i#2*SIZEOF_UNSIGNED_INT
Constant main::i#3 = ++main::i#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] main::$10 = main::i#3 * SIZEOF_UNSIGNED_INT
Constant right-side identified [14] main::i#4 = ++ main::i#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$10 = main::i#3*SIZEOF_UNSIGNED_INT
Constant main::i#4 = ++main::i#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] main::$11 = main::i#4 * SIZEOF_UNSIGNED_INT
Constant right-side identified [16] main::i#5 = ++ main::i#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$11 = main::i#4*SIZEOF_UNSIGNED_INT
Constant main::i#5 = ++main::i#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] main::$12 = main::i#5 * SIZEOF_UNSIGNED_INT
Constant right-side identified [18] main::i#6 = ++ main::i#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$12 = main::i#5*SIZEOF_UNSIGNED_INT
Constant main::i#6 = ++main::i#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [18] main::$13 = main::i#6 * SIZEOF_UNSIGNED_INT
Constant right-side identified [20] main::i#7 = ++ main::i#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$13 = main::i#6*SIZEOF_UNSIGNED_INT
Constant main::i#7 = ++main::i#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] main::$14 = main::i#7 * SIZEOF_UNSIGNED_INT
Constant right-side identified [22] main::i#8 = ++ main::i#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$14 = main::i#7*SIZEOF_UNSIGNED_INT
Constant main::i#8 = ++main::i#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [22] main::$15 = main::i#8 * SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$15 = main::i#8*SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::i#0
Inlining constant with different constant siblings main::i#1
Inlining constant with different constant siblings main::i#2
Inlining constant with different constant siblings main::i#3
Inlining constant with different constant siblings main::i#4
Inlining constant with different constant siblings main::i#5
Inlining constant with different constant siblings main::i#6
Inlining constant with different constant siblings main::i#7
Inlining constant with different constant siblings main::i#8
Constant inlined main::i#8 = ++++++++++++++++0
Constant inlined main::i#7 = ++++++++++++++0
Constant inlined main::i#4 = ++++++++0
Constant inlined main::i#3 = ++++++0
Constant inlined main::i#6 = ++++++++++++0
Constant inlined main::i#5 = ++++++++++0
Constant inlined main::$12 = ++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$13 = ++++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$14 = ++++++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$15 = ++++++++++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$10 = ++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$11 = ++++++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::i#0 = 0
Constant inlined main::i#2 = ++++0
Constant inlined main::i#1 = ++0
Constant inlined main::$9 = ++++0*SIZEOF_UNSIGNED_INT
Constant inlined main::$8 = ++0*SIZEOF_UNSIGNED_INT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++++++0*SIZEOF_UNSIGNED_INT)
Consolidated array index constant in *(main::SCREEN+++++++++++++++++0*SIZEOF_UNSIGNED_INT)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Successful SSA optimization Pass2ConstantSimplification
Finalized unsigned number type (char) $11
Finalized unsigned number type (unsigned int) $179
Successful SSA optimization PassNFinalizeNumberTypeConversions
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::bu = 7
  [1] main::bs = 7
  [2] main::wu = $4e20
  [3] main::ws = -$b1
  [4] main::du = $1e8480
  [5] main::ds = -$39a4f1
  [6] main::ptr = (char *) 0
  [7] *main::SCREEN = word0 $11
  [8] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = word0 $179
  [9] main::$0 = word0  main::bu
  [10] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = main::$0
  [11] main::$1 = word0  main::bs
  [12] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = main::$1
  [13] main::$2 = word0  main::wu
  [14] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = main::$2
  [15] main::$3 = word0  main::ws
  [16] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = main::$3
  [17] main::$4 = word0  main::du
  [18] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4
  [19] main::$5 = word0  main::ds
  [20] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5
  [21] main::$6 = word0  main::ptr
  [22] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = main::$6
  to:main::@return
main::@return: scope:[main]  from main
  [23] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
unsigned int main::$0 // 4.0
unsigned int main::$1 // 4.0
unsigned int main::$2 // 4.0
unsigned int main::$3 // 4.0
unsigned int main::$4 // 4.0
unsigned int main::$5 // 4.0
unsigned int main::$6 // 4.0
__loadstore volatile signed char main::bs // 0.4
__loadstore volatile char main::bu // 0.4444444444444444
__loadstore volatile long main::ds // 0.2857142857142857
__loadstore volatile unsigned long main::du // 0.3076923076923077
char main::i
__loadstore char * volatile main::ptr // 0.26666666666666666
__loadstore volatile int main::ws // 0.3333333333333333
__loadstore volatile unsigned int main::wu // 0.36363636363636365

Initial phi equivalence classes
Added variable main::bu to live range equivalence class [ main::bu ]
Added variable main::bs to live range equivalence class [ main::bs ]
Added variable main::wu to live range equivalence class [ main::wu ]
Added variable main::ws to live range equivalence class [ main::ws ]
Added variable main::du to live range equivalence class [ main::du ]
Added variable main::ds to live range equivalence class [ main::ds ]
Added variable main::ptr to live range equivalence class [ main::ptr ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Complete equivalence classes
[ main::bu ]
[ main::bs ]
[ main::wu ]
[ main::ws ]
[ main::du ]
[ main::ds ]
[ main::ptr ]
[ main::$0 ]
[ main::$1 ]
[ main::$2 ]
[ main::$3 ]
[ main::$4 ]
[ main::$5 ]
[ main::$6 ]
Allocated zp[1]:2 [ main::bu ]
Allocated zp[1]:3 [ main::bs ]
Allocated zp[2]:4 [ main::wu ]
Allocated zp[2]:6 [ main::ws ]
Allocated zp[4]:8 [ main::du ]
Allocated zp[4]:12 [ main::ds ]
Allocated zp[2]:16 [ main::ptr ]
Allocated zp[2]:18 [ main::$0 ]
Allocated zp[2]:20 [ main::$1 ]
Allocated zp[2]:22 [ main::$2 ]
Allocated zp[2]:24 [ main::$3 ]
Allocated zp[2]:26 [ main::$4 ]
Allocated zp[2]:28 [ main::$5 ]
Allocated zp[2]:30 [ main::$6 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::bu = 7 [ main::bu ] (  [ main::bu ] { }  ) always clobbers reg byte a 
Statement [1] main::bs = 7 [ main::bu main::bs ] (  [ main::bu main::bs ] { }  ) always clobbers reg byte a 
Statement [2] main::wu = $4e20 [ main::bu main::bs main::wu ] (  [ main::bu main::bs main::wu ] { }  ) always clobbers reg byte a 
Statement [3] main::ws = -$b1 [ main::bu main::bs main::wu main::ws ] (  [ main::bu main::bs main::wu main::ws ] { }  ) always clobbers reg byte a 
Statement [4] main::du = $1e8480 [ main::bu main::bs main::wu main::ws main::du ] (  [ main::bu main::bs main::wu main::ws main::du ] { }  ) always clobbers reg byte a 
Statement [5] main::ds = -$39a4f1 [ main::bu main::bs main::wu main::ws main::du main::ds ] (  [ main::bu main::bs main::wu main::ws main::du main::ds ] { }  ) always clobbers reg byte a 
Statement [6] main::ptr = (char *) 0 [ main::bu main::bs main::wu main::ws main::du main::ds main::ptr ] (  [ main::bu main::bs main::wu main::ws main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [7] *main::SCREEN = word0 $11 [ main::bu main::bs main::wu main::ws main::du main::ds main::ptr ] (  [ main::bu main::bs main::wu main::ws main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [8] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = word0 $179 [ main::bu main::bs main::wu main::ws main::du main::ds main::ptr ] (  [ main::bu main::bs main::wu main::ws main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [9] main::$0 = word0  main::bu [ main::bs main::wu main::ws main::du main::ds main::ptr main::$0 ] (  [ main::bs main::wu main::ws main::du main::ds main::ptr main::$0 ] { }  ) always clobbers reg byte a 
Statement [10] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = main::$0 [ main::bs main::wu main::ws main::du main::ds main::ptr ] (  [ main::bs main::wu main::ws main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [11] main::$1 = word0  main::bs [ main::wu main::ws main::du main::ds main::ptr main::$1 ] (  [ main::wu main::ws main::du main::ds main::ptr main::$1 ] { }  ) always clobbers reg byte a 
Statement [12] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = main::$1 [ main::wu main::ws main::du main::ds main::ptr ] (  [ main::wu main::ws main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [13] main::$2 = word0  main::wu [ main::ws main::du main::ds main::ptr main::$2 ] (  [ main::ws main::du main::ds main::ptr main::$2 ] { }  ) always clobbers reg byte a 
Statement [14] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = main::$2 [ main::ws main::du main::ds main::ptr ] (  [ main::ws main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [15] main::$3 = word0  main::ws [ main::du main::ds main::ptr main::$3 ] (  [ main::du main::ds main::ptr main::$3 ] { }  ) always clobbers reg byte a 
Statement [16] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = main::$3 [ main::du main::ds main::ptr ] (  [ main::du main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [17] main::$4 = word0  main::du [ main::ds main::ptr main::$4 ] (  [ main::ds main::ptr main::$4 ] { }  ) always clobbers reg byte a 
Statement [18] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4 [ main::ds main::ptr ] (  [ main::ds main::ptr ] { }  ) always clobbers reg byte a 
Statement [19] main::$5 = word0  main::ds [ main::ptr main::$5 ] (  [ main::ptr main::$5 ] { }  ) always clobbers reg byte a 
Statement [20] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5 [ main::ptr ] (  [ main::ptr ] { }  ) always clobbers reg byte a 
Statement [21] main::$6 = word0  main::ptr [ main::$6 ] (  [ main::$6 ] { }  ) always clobbers reg byte a 
Statement [22] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = main::$6 [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::bu ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::bs ] : zp[1]:3 , 
Potential registers zp[2]:4 [ main::wu ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::ws ] : zp[2]:6 , 
Potential registers zp[4]:8 [ main::du ] : zp[4]:8 , 
Potential registers zp[4]:12 [ main::ds ] : zp[4]:12 , 
Potential registers zp[2]:16 [ main::ptr ] : zp[2]:16 , 
Potential registers zp[2]:18 [ main::$0 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ main::$1 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ main::$2 ] : zp[2]:22 , 
Potential registers zp[2]:24 [ main::$3 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ main::$4 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ main::$5 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ main::$6 ] : zp[2]:30 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4: zp[2]:18 [ main::$0 ] 4: zp[2]:20 [ main::$1 ] 4: zp[2]:22 [ main::$2 ] 4: zp[2]:24 [ main::$3 ] 4: zp[2]:26 [ main::$4 ] 4: zp[2]:28 [ main::$5 ] 4: zp[2]:30 [ main::$6 ] 0.44: zp[1]:2 [ main::bu ] 0.4: zp[1]:3 [ main::bs ] 0.36: zp[2]:4 [ main::wu ] 0.33: zp[2]:6 [ main::ws ] 0.31: zp[4]:8 [ main::du ] 0.29: zp[4]:12 [ main::ds ] 0.27: zp[2]:16 [ main::ptr ] 
Uplift Scope [] 

Uplifting [main] best 297 combination zp[2]:18 [ main::$0 ] zp[2]:20 [ main::$1 ] zp[2]:22 [ main::$2 ] zp[2]:24 [ main::$3 ] zp[2]:26 [ main::$4 ] zp[2]:28 [ main::$5 ] zp[2]:30 [ main::$6 ] zp[1]:2 [ main::bu ] zp[1]:3 [ main::bs ] zp[2]:4 [ main::wu ] zp[2]:6 [ main::ws ] zp[4]:8 [ main::du ] zp[4]:12 [ main::ds ] zp[2]:16 [ main::ptr ] 
Uplifting [] best 297 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::bu ]
Uplifting [main] best 297 combination zp[1]:2 [ main::bu ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::bs ]
Uplifting [main] best 297 combination zp[1]:3 [ main::bs ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test operator WORD0()
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-word0.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label bu = 2
    .label bs = 3
    .label wu = 4
    .label ws = 6
    .label du = 8
    .label ds = $c
    .label ptr = $10
    .label __0 = $12
    .label __1 = $14
    .label __2 = $16
    .label __3 = $18
    .label __4 = $1a
    .label __5 = $1c
    .label __6 = $1e
    // [0] main::bu = 7 -- vbuz1=vbuc1 
    lda #7
    sta.z bu
    // [1] main::bs = 7 -- vbsz1=vbsc1 
    lda #7
    sta.z bs
    // [2] main::wu = $4e20 -- vwuz1=vwuc1 
    lda #<$4e20
    sta.z wu
    lda #>$4e20
    sta.z wu+1
    // [3] main::ws = -$b1 -- vwsz1=vwsc1 
    lda #<-$b1
    sta.z ws
    lda #>-$b1
    sta.z ws+1
    // [4] main::du = $1e8480 -- vduz1=vduc1 
    lda #<$1e8480
    sta.z du
    lda #>$1e8480
    sta.z du+1
    lda #<$1e8480>>$10
    sta.z du+2
    lda #>$1e8480>>$10
    sta.z du+3
    // [5] main::ds = -$39a4f1 -- vdsz1=vdsc1 
    lda #<-$39a4f1
    sta.z ds
    lda #>-$39a4f1
    sta.z ds+1
    lda #<-$39a4f1>>$10
    sta.z ds+2
    lda #>-$39a4f1>>$10
    sta.z ds+3
    // [6] main::ptr = (char *) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z ptr
    lda #>0
    sta.z ptr+1
    // [7] *main::SCREEN = word0 $11 -- _deref_pwuc1=vwuc2 
    lda #<$11&$ffff
    sta SCREEN
    lda #>$11&$ffff
    sta SCREEN+1
    // [8] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = word0 $179 -- _deref_pwuc1=vwuc2 
    lda #<$179&$ffff
    sta SCREEN+1*SIZEOF_UNSIGNED_INT
    lda #>$179&$ffff
    sta SCREEN+1*SIZEOF_UNSIGNED_INT+1
    // [9] main::$0 = word0  main::bu -- vwuz1=_word0_vbuz2 
    lda.z bu
    sta.z __0
    lda #0
    sta.z __0+1
    // [10] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = main::$0 -- _deref_pwuc1=vwuz1 
    lda.z __0
    sta SCREEN+2*SIZEOF_UNSIGNED_INT
    lda.z __0+1
    sta SCREEN+2*SIZEOF_UNSIGNED_INT+1
    // [11] main::$1 = word0  main::bs -- vwuz1=_word0_vbsz2 
    lda.z bs
    sta.z __1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __1+1
    // [12] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = main::$1 -- _deref_pwuc1=vwuz1 
    lda.z __1
    sta SCREEN+3*SIZEOF_UNSIGNED_INT
    lda.z __1+1
    sta SCREEN+3*SIZEOF_UNSIGNED_INT+1
    // [13] main::$2 = word0  main::wu -- vwuz1=_word0_vwuz2 
    lda.z wu
    sta.z __2
    lda.z wu+1
    sta.z __2+1
    // [14] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = main::$2 -- _deref_pwuc1=vwuz1 
    lda.z __2
    sta SCREEN+4*SIZEOF_UNSIGNED_INT
    lda.z __2+1
    sta SCREEN+4*SIZEOF_UNSIGNED_INT+1
    // [15] main::$3 = word0  main::ws -- vwuz1=_word0_vwsz2 
    lda.z ws
    sta.z __3
    lda.z ws+1
    sta.z __3+1
    // [16] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = main::$3 -- _deref_pwuc1=vwuz1 
    lda.z __3
    sta SCREEN+5*SIZEOF_UNSIGNED_INT
    lda.z __3+1
    sta SCREEN+5*SIZEOF_UNSIGNED_INT+1
    // [17] main::$4 = word0  main::du -- vwuz1=_word0_vduz2 
    lda.z du
    sta.z __4
    lda.z du+1
    sta.z __4+1
    // [18] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4 -- _deref_pwuc1=vwuz1 
    lda.z __4
    sta SCREEN+6*SIZEOF_UNSIGNED_INT
    lda.z __4+1
    sta SCREEN+6*SIZEOF_UNSIGNED_INT+1
    // [19] main::$5 = word0  main::ds -- vwuz1=_word0_vdsz2 
    lda.z ds
    sta.z __5
    lda.z ds+1
    sta.z __5+1
    // [20] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5 -- _deref_pwuc1=vwuz1 
    lda.z __5
    sta SCREEN+7*SIZEOF_UNSIGNED_INT
    lda.z __5+1
    sta SCREEN+7*SIZEOF_UNSIGNED_INT+1
    // [21] main::$6 = word0  main::ptr -- vwuz1=_word0_pbuz2 
    lda.z ptr
    sta.z __6
    lda.z ptr+1
    sta.z __6+1
    // [22] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = main::$6 -- _deref_pwuc1=vwuz1 
    lda.z __6
    sta SCREEN+8*SIZEOF_UNSIGNED_INT
    lda.z __6+1
    sta SCREEN+8*SIZEOF_UNSIGNED_INT+1
    jmp __breturn
    // main::@return
  __breturn:
    // [23] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #7
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char SIZEOF_UNSIGNED_INT = 2
void main()
unsigned int main::$0 // zp[2]:18 4.0
unsigned int main::$1 // zp[2]:20 4.0
unsigned int main::$2 // zp[2]:22 4.0
unsigned int main::$3 // zp[2]:24 4.0
unsigned int main::$4 // zp[2]:26 4.0
unsigned int main::$5 // zp[2]:28 4.0
unsigned int main::$6 // zp[2]:30 4.0
__constant unsigned int * const main::SCREEN = (char *) 1024
__loadstore volatile signed char main::bs // zp[1]:3 0.4
__loadstore volatile char main::bu // zp[1]:2 0.4444444444444444
__loadstore volatile long main::ds // zp[4]:12 0.2857142857142857
__loadstore volatile unsigned long main::du // zp[4]:8 0.3076923076923077
char main::i
__loadstore char * volatile main::ptr // zp[2]:16 0.26666666666666666
__loadstore volatile int main::ws // zp[2]:6 0.3333333333333333
__loadstore volatile unsigned int main::wu // zp[2]:4 0.36363636363636365

zp[1]:2 [ main::bu ]
zp[1]:3 [ main::bs ]
zp[2]:4 [ main::wu ]
zp[2]:6 [ main::ws ]
zp[4]:8 [ main::du ]
zp[4]:12 [ main::ds ]
zp[2]:16 [ main::ptr ]
zp[2]:18 [ main::$0 ]
zp[2]:20 [ main::$1 ]
zp[2]:22 [ main::$2 ]
zp[2]:24 [ main::$3 ]
zp[2]:26 [ main::$4 ]
zp[2]:28 [ main::$5 ]
zp[2]:30 [ main::$6 ]


FINAL ASSEMBLER
Score: 290

  // File Comments
// Test operator WORD0()
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-word0.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label bu = 2
    .label bs = 3
    .label wu = 4
    .label ws = 6
    .label du = 8
    .label ds = $c
    .label ptr = $10
    .label __0 = $12
    .label __1 = $14
    .label __2 = $16
    .label __3 = $18
    .label __4 = $1a
    .label __5 = $1c
    .label __6 = $1e
    // volatile unsigned char bu = 7
    // [0] main::bu = 7 -- vbuz1=vbuc1 
    lda #7
    sta.z bu
    // volatile signed char bs = 7
    // [1] main::bs = 7 -- vbsz1=vbsc1 
    sta.z bs
    // volatile unsigned int wu = 20000
    // [2] main::wu = $4e20 -- vwuz1=vwuc1 
    lda #<$4e20
    sta.z wu
    lda #>$4e20
    sta.z wu+1
    // volatile signed int ws = -177
    // [3] main::ws = -$b1 -- vwsz1=vwsc1 
    lda #<-$b1
    sta.z ws
    lda #>-$b1
    sta.z ws+1
    // volatile unsigned long du = 2000000
    // [4] main::du = $1e8480 -- vduz1=vduc1 
    lda #<$1e8480
    sta.z du
    lda #>$1e8480
    sta.z du+1
    lda #<$1e8480>>$10
    sta.z du+2
    lda #>$1e8480>>$10
    sta.z du+3
    // volatile signed long ds = -3777777
    // [5] main::ds = -$39a4f1 -- vdsz1=vdsc1 
    lda #<-$39a4f1
    sta.z ds
    lda #>-$39a4f1
    sta.z ds+1
    lda #<-$39a4f1>>$10
    sta.z ds+2
    lda #>-$39a4f1>>$10
    sta.z ds+3
    // char * volatile ptr = (char*)0x0000
    // [6] main::ptr = (char *) 0 -- pbuz1=pbuc1 
    lda #<0
    sta.z ptr
    sta.z ptr+1
    // SCREEN[i++] = WORD0(17)
    // [7] *main::SCREEN = word0 $11 -- _deref_pwuc1=vwuc2 
    lda #<$11&$ffff
    sta SCREEN
    lda #>$11&$ffff
    sta SCREEN+1
    // SCREEN[i++] = WORD0(377)
    // [8] *(main::SCREEN+1*SIZEOF_UNSIGNED_INT) = word0 $179 -- _deref_pwuc1=vwuc2 
    lda #<$179&$ffff
    sta SCREEN+1*SIZEOF_UNSIGNED_INT
    lda #>$179&$ffff
    sta SCREEN+1*SIZEOF_UNSIGNED_INT+1
    // WORD0(bu)
    // [9] main::$0 = word0  main::bu -- vwuz1=_word0_vbuz2 
    lda.z bu
    sta.z __0
    lda #0
    sta.z __0+1
    // SCREEN[i++] = WORD0(bu)
    // [10] *(main::SCREEN+2*SIZEOF_UNSIGNED_INT) = main::$0 -- _deref_pwuc1=vwuz1 
    lda.z __0
    sta SCREEN+2*SIZEOF_UNSIGNED_INT
    lda.z __0+1
    sta SCREEN+2*SIZEOF_UNSIGNED_INT+1
    // WORD0(bs)
    // [11] main::$1 = word0  main::bs -- vwuz1=_word0_vbsz2 
    lda.z bs
    sta.z __1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __1+1
    // SCREEN[i++] = WORD0(bs)
    // [12] *(main::SCREEN+3*SIZEOF_UNSIGNED_INT) = main::$1 -- _deref_pwuc1=vwuz1 
    lda.z __1
    sta SCREEN+3*SIZEOF_UNSIGNED_INT
    lda.z __1+1
    sta SCREEN+3*SIZEOF_UNSIGNED_INT+1
    // WORD0(wu)
    // [13] main::$2 = word0  main::wu -- vwuz1=_word0_vwuz2 
    lda.z wu
    sta.z __2
    lda.z wu+1
    sta.z __2+1
    // SCREEN[i++] = WORD0(wu)
    // [14] *(main::SCREEN+4*SIZEOF_UNSIGNED_INT) = main::$2 -- _deref_pwuc1=vwuz1 
    lda.z __2
    sta SCREEN+4*SIZEOF_UNSIGNED_INT
    lda.z __2+1
    sta SCREEN+4*SIZEOF_UNSIGNED_INT+1
    // WORD0(ws)
    // [15] main::$3 = word0  main::ws -- vwuz1=_word0_vwsz2 
    lda.z ws
    sta.z __3
    lda.z ws+1
    sta.z __3+1
    // SCREEN[i++] = WORD0(ws)
    // [16] *(main::SCREEN+5*SIZEOF_UNSIGNED_INT) = main::$3 -- _deref_pwuc1=vwuz1 
    lda.z __3
    sta SCREEN+5*SIZEOF_UNSIGNED_INT
    lda.z __3+1
    sta SCREEN+5*SIZEOF_UNSIGNED_INT+1
    // WORD0(du)
    // [17] main::$4 = word0  main::du -- vwuz1=_word0_vduz2 
    lda.z du
    sta.z __4
    lda.z du+1
    sta.z __4+1
    // SCREEN[i++] = WORD0(du)
    // [18] *(main::SCREEN+6*SIZEOF_UNSIGNED_INT) = main::$4 -- _deref_pwuc1=vwuz1 
    lda.z __4
    sta SCREEN+6*SIZEOF_UNSIGNED_INT
    lda.z __4+1
    sta SCREEN+6*SIZEOF_UNSIGNED_INT+1
    // WORD0(ds)
    // [19] main::$5 = word0  main::ds -- vwuz1=_word0_vdsz2 
    lda.z ds
    sta.z __5
    lda.z ds+1
    sta.z __5+1
    // SCREEN[i++] = WORD0(ds)
    // [20] *(main::SCREEN+7*SIZEOF_UNSIGNED_INT) = main::$5 -- _deref_pwuc1=vwuz1 
    lda.z __5
    sta SCREEN+7*SIZEOF_UNSIGNED_INT
    lda.z __5+1
    sta SCREEN+7*SIZEOF_UNSIGNED_INT+1
    // WORD0(ptr)
    // [21] main::$6 = word0  main::ptr -- vwuz1=_word0_pbuz2 
    lda.z ptr
    sta.z __6
    lda.z ptr+1
    sta.z __6+1
    // SCREEN[i++] = WORD0(ptr)
    // [22] *(main::SCREEN+8*SIZEOF_UNSIGNED_INT) = main::$6 -- _deref_pwuc1=vwuz1 
    lda.z __6
    sta SCREEN+8*SIZEOF_UNSIGNED_INT
    lda.z __6+1
    sta SCREEN+8*SIZEOF_UNSIGNED_INT+1
    // main::@return
    // }
    // [23] return 
    rts
}
  // File Data

