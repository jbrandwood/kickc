Setting inferred volatile on symbol affected by address-of main::ptr = &val
Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::idx#0 = 0
  main::SCREEN1[main::idx#0] = val
  main::SCREEN2[main::idx#0] = '.'
  main::idx#1 = ++ main::idx#0
  val = 1
  main::SCREEN1[main::idx#1] = val
  main::SCREEN2[main::idx#1] = '.'
  main::idx#2 = ++ main::idx#1
  val = 2
  main::SCREEN1[main::idx#2] = val
  main::SCREEN2[main::idx#2] = *main::ptr
  main::idx#3 = ++ main::idx#2
  *main::ptr = 3
  main::SCREEN1[main::idx#3] = val
  main::SCREEN2[main::idx#3] = *main::ptr
  main::idx#4 = ++ main::idx#3
  setv::v#0 = 4
  call setv
  to:main::@1
main::@1: scope:[main]  from main
  main::idx#7 = phi( main/main::idx#4 )
  main::SCREEN1[main::idx#7] = val
  main::SCREEN2[main::idx#7] = *main::ptr
  main::idx#5 = ++ main::idx#7
  setp::p#0 = main::ptr
  setp::v#0 = 5
  call setp
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::idx#8 = phi( main::@1/main::idx#5 )
  main::SCREEN1[main::idx#8] = val
  main::SCREEN2[main::idx#8] = *main::ptr
  main::idx#6 = ++ main::idx#8
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void setv(char v)
setv: scope:[setv]  from main
  setv::v#1 = phi( main/setv::v#0 )
  val = setv::v#1
  to:setv::@return
setv::@return: scope:[setv]  from setv
  return 
  to:@return

void setp(char *p , char v)
setp: scope:[setp]  from main::@1
  setp::p#1 = phi( main::@1/setp::p#0 )
  setp::v#1 = phi( main::@1/setp::v#0 )
  *setp::p#1 = setp::v#1
  to:setp::@return
setp::@return: scope:[setp]  from setp
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  val = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
__constant char * const main::SCREEN1 = (char *)$400
__constant char * const main::SCREEN2 = main::SCREEN1+$28
char main::idx
char main::idx#0
char main::idx#1
char main::idx#2
char main::idx#3
char main::idx#4
char main::idx#5
char main::idx#6
char main::idx#7
char main::idx#8
__constant char *main::ptr = &val
void setp(char *p , char v)
char *setp::p
char *setp::p#0
char *setp::p#1
char setp::v
char setp::v#0
char setp::v#1
void setv(char v)
char setv::v
char setv::v#0
char setv::v#1
__loadstore volatile char val

Adding number conversion cast (unumber) $28 in 
Adding number conversion cast (unumber) 1 in val = 1
Adding number conversion cast (unumber) 2 in val = 2
Adding number conversion cast (unumber) 3 in *main::ptr = 3
Adding number conversion cast (unumber) 4 in setv::v#0 = 4
Adding number conversion cast (unumber) 5 in setp::v#0 = 5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast val = (unumber)1
Inlining cast val = (unumber)2
Inlining cast *main::ptr = (unumber)3
Inlining cast setv::v#0 = (unumber)4
Inlining cast setp::v#0 = (unumber)5
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::idx#4 = main::idx#7 
Alias main::idx#5 = main::idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values setv::v#1 setv::v#0
Identical Phi Values setp::v#1 setp::v#0
Identical Phi Values setp::p#1 setp::p#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant main::idx#0 = 0
Constant setv::v#0 = 4
Constant setp::p#0 = main::ptr
Constant setp::v#0 = 5
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN1 in [1] main::SCREEN1[main::idx#0] = val
Simplifying expression containing zero main::SCREEN2 in [2] main::SCREEN2[main::idx#0] = '.'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::idx#6 and assignment [22] main::idx#6 = ++ main::idx#5
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [2] main::idx#1 = ++ main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] main::idx#2 = ++ main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [8] main::idx#3 = ++ main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] main::idx#4 = ++ main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] main::idx#5 = ++ main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings main::idx#0
Inlining constant with different constant siblings main::idx#1
Inlining constant with different constant siblings main::idx#2
Inlining constant with different constant siblings main::idx#3
Inlining constant with different constant siblings main::idx#4
Inlining constant with different constant siblings main::idx#5
Constant inlined main::idx#0 = 0
Constant inlined main::idx#1 = ++0
Constant inlined main::idx#2 = ++++0
Constant inlined main::idx#3 = ++++++0
Constant inlined main::idx#4 = ++++++++0
Constant inlined main::idx#5 = ++++++++++0
Constant inlined setp::p#0 = main::ptr
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN1+++0)
Consolidated array index constant in *(main::SCREEN2+++0)
Consolidated array index constant in *(main::SCREEN1+++++0)
Consolidated array index constant in *(main::SCREEN2+++++0)
Consolidated array index constant in *(main::SCREEN1+++++++0)
Consolidated array index constant in *(main::SCREEN2+++++++0)
Consolidated array index constant in *(main::SCREEN1+++++++++0)
Consolidated array index constant in *(main::SCREEN2+++++++++0)
Consolidated array index constant in *(main::SCREEN1+++++++++++0)
Consolidated array index constant in *(main::SCREEN2+++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to setv:17 setp:20 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label __start::@2
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] val = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [5] *main::SCREEN1 = val
  [6] *main::SCREEN2 = '.'
  [7] val = 1
  [8] *(main::SCREEN1+1) = val
  [9] *(main::SCREEN2+1) = '.'
  [10] val = 2
  [11] *(main::SCREEN1+2) = val
  [12] *(main::SCREEN2+2) = *main::ptr
  [13] *main::ptr = 3
  [14] *(main::SCREEN1+3) = val
  [15] *(main::SCREEN2+3) = *main::ptr
  [16] call setv
  to:main::@1
main::@1: scope:[main]  from main
  [17] *(main::SCREEN1+4) = val
  [18] *(main::SCREEN2+4) = *main::ptr
  [19] call setp
  to:main::@2
main::@2: scope:[main]  from main::@1
  [20] *(main::SCREEN1+5) = val
  [21] *(main::SCREEN2+5) = *main::ptr
  to:main::@return
main::@return: scope:[main]  from main::@2
  [22] return 
  to:@return

void setv(char v)
setv: scope:[setv]  from main
  [23] val = setv::v#0
  to:setv::@return
setv::@return: scope:[setv]  from setv
  [24] return 
  to:@return

void setp(char *p , char v)
setp: scope:[setp]  from main::@1
  [25] *main::ptr = setp::v#0
  to:setp::@return
setp::@return: scope:[setp]  from setp
  [26] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
void main()
char main::idx
void setp(char *p , char v)
char *setp::p
char setp::v
void setv(char v)
char setv::v
__loadstore volatile char val // 14.692307692307692

Initial phi equivalence classes
Added variable val to live range equivalence class [ val ]
Complete equivalence classes
[ val ]
Allocated zp[1]:2 [ val ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] val = 0 [ val ] (  [ val ] { }  ) always clobbers reg byte a 
Statement [5] *main::SCREEN1 = val [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [6] *main::SCREEN2 = '.' [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [7] val = 1 [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [8] *(main::SCREEN1+1) = val [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [9] *(main::SCREEN2+1) = '.' [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [10] val = 2 [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [11] *(main::SCREEN1+2) = val [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [12] *(main::SCREEN2+2) = *main::ptr [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [13] *main::ptr = 3 [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [14] *(main::SCREEN1+3) = val [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [15] *(main::SCREEN2+3) = *main::ptr [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [17] *(main::SCREEN1+4) = val [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [18] *(main::SCREEN2+4) = *main::ptr [ val ] ( main:3 [ val ] { }  ) always clobbers reg byte a 
Statement [20] *(main::SCREEN1+5) = val [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [21] *(main::SCREEN2+5) = *main::ptr [ ] ( main:3 [ ] { }  ) always clobbers reg byte a 
Statement [23] val = setv::v#0 [ val ] ( main:3::setv:16 [ val ] { }  ) always clobbers reg byte a 
Statement [25] *main::ptr = setp::v#0 [ ] ( main:3::setp:19 [ val ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ val ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 14.69: zp[1]:2 [ val ] 
Uplift Scope [main] 
Uplift Scope [setv] 
Uplift Scope [setp] 
Uplift Scope [__start] 

Uplifting [] best 205 combination zp[1]:2 [ val ] 
Uplifting [main] best 205 combination 
Uplifting [setv] best 205 combination 
Uplifting [setp] best 205 combination 
Uplifting [__start] best 205 combination 
Attempting to uplift remaining variables inzp[1]:2 [ val ]
Uplifting [] best 205 combination zp[1]:2 [ val ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test address-of by assigning the affected variable in multiple ways
  // Upstart
  // Commodore 64 PRG executable file
.file [name="address-of-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label val = 2
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] val = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z val
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    .label SCREEN1 = $400
    .label SCREEN2 = SCREEN1+$28
    // Use address-of - hereafter all versions of val must be in the same memory
    .label ptr = val
    // [5] *main::SCREEN1 = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1
    // [6] *main::SCREEN2 = '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2
    // [7] val = 1 -- vbuz1=vbuc1 
    // Here we have not yet used address-of - so val can be versioned freely
    lda #1
    sta.z val
    // [8] *(main::SCREEN1+1) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+1
    // [9] *(main::SCREEN2+1) = '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2+1
    // [10] val = 2 -- vbuz1=vbuc1 
    // Set value directly
    lda #2
    sta.z val
    // [11] *(main::SCREEN1+2) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+2
    // [12] *(main::SCREEN2+2) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+2
    // [13] *main::ptr = 3 -- _deref_pbuc1=vbuc2 
    // Set value through pointer
    lda #3
    sta.z ptr
    // [14] *(main::SCREEN1+3) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+3
    // [15] *(main::SCREEN2+3) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+3
    // [16] call setv
    // Set value directly in a call
    jsr setv
    jmp __b1
    // main::@1
  __b1:
    // [17] *(main::SCREEN1+4) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+4
    // [18] *(main::SCREEN2+4) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+4
    // [19] call setp
    // Set value through pointer in a call
    jsr setp
    jmp __b2
    // main::@2
  __b2:
    // [20] *(main::SCREEN1+5) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+5
    // [21] *(main::SCREEN2+5) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+5
    jmp __breturn
    // main::@return
  __breturn:
    // [22] return 
    rts
}
  // setv
// void setv(char v)
setv: {
    .const v = 4
    // [23] val = setv::v#0 -- vbuz1=vbuc1 
    lda #v
    sta.z val
    jmp __breturn
    // setv::@return
  __breturn:
    // [24] return 
    rts
}
  // setp
// void setp(char *p, char v)
setp: {
    .const v = 5
    // [25] *main::ptr = setp::v#0 -- _deref_pbuc1=vbuc2 
    lda #v
    sta.z main.ptr
    jmp __breturn
    // setp::@return
  __breturn:
    // [26] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z val
Removing instruction lda.z val
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void __start()
void main()
__constant char * const main::SCREEN1 = (char *) 1024
__constant char * const main::SCREEN2 = main::SCREEN1+$28
char main::idx
__constant char *main::ptr = &val
void setp(char *p , char v)
char *setp::p
char setp::v
__constant char setp::v#0 = 5 // v
void setv(char v)
char setv::v
__constant char setv::v#0 = 4 // v
__loadstore volatile char val // zp[1]:2 14.692307692307692

zp[1]:2 [ val ]


FINAL ASSEMBLER
Score: 148

  // File Comments
// Test address-of by assigning the affected variable in multiple ways
  // Upstart
  // Commodore 64 PRG executable file
.file [name="address-of-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label val = 2
.segment Code
  // __start
__start: {
    // __start::__init1
    // byte val = 0
    // [1] val = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z val
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    .label SCREEN1 = $400
    .label SCREEN2 = SCREEN1+$28
    // Use address-of - hereafter all versions of val must be in the same memory
    .label ptr = val
    // SCREEN1[idx] = val
    // [5] *main::SCREEN1 = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1
    // SCREEN2[idx++] = '.'
    // [6] *main::SCREEN2 = '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2
    // val = 1
    // [7] val = 1 -- vbuz1=vbuc1 
    // Here we have not yet used address-of - so val can be versioned freely
    lda #1
    sta.z val
    // SCREEN1[idx] = val
    // [8] *(main::SCREEN1+1) = val -- _deref_pbuc1=vbuz1 
    sta SCREEN1+1
    // SCREEN2[idx++] = '.'
    // [9] *(main::SCREEN2+1) = '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN2+1
    // val = 2
    // [10] val = 2 -- vbuz1=vbuc1 
    // Set value directly
    lda #2
    sta.z val
    // SCREEN1[idx] = val
    // [11] *(main::SCREEN1+2) = val -- _deref_pbuc1=vbuz1 
    sta SCREEN1+2
    // SCREEN2[idx++] = *ptr
    // [12] *(main::SCREEN2+2) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+2
    // *ptr = 3
    // [13] *main::ptr = 3 -- _deref_pbuc1=vbuc2 
    // Set value through pointer
    lda #3
    sta.z ptr
    // SCREEN1[idx] = val
    // [14] *(main::SCREEN1+3) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+3
    // SCREEN2[idx++] = *ptr
    // [15] *(main::SCREEN2+3) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+3
    // setv(4)
    // [16] call setv
    // Set value directly in a call
    jsr setv
    // main::@1
    // SCREEN1[idx] = val
    // [17] *(main::SCREEN1+4) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+4
    // SCREEN2[idx++] = *ptr
    // [18] *(main::SCREEN2+4) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+4
    // setp(ptr, 5)
    // [19] call setp
    // Set value through pointer in a call
    jsr setp
    // main::@2
    // SCREEN1[idx] = val
    // [20] *(main::SCREEN1+5) = val -- _deref_pbuc1=vbuz1 
    lda.z val
    sta SCREEN1+5
    // SCREEN2[idx++] = *ptr
    // [21] *(main::SCREEN2+5) = *main::ptr -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN2+5
    // main::@return
    // }
    // [22] return 
    rts
}
  // setv
// void setv(char v)
setv: {
    .const v = 4
    // val = v
    // [23] val = setv::v#0 -- vbuz1=vbuc1 
    lda #v
    sta.z val
    // setv::@return
    // }
    // [24] return 
    rts
}
  // setp
// void setp(char *p, char v)
setp: {
    .const v = 5
    // *p = v
    // [25] *main::ptr = setp::v#0 -- _deref_pbuc1=vbuc2 
    lda #v
    sta.z main.ptr
    // setp::@return
    // }
    // [26] return 
    rts
}
  // File Data

