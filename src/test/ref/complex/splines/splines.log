Created struct value member variable (signed word) main::p0_x
Created struct value member variable (signed word) main::p0_y
Converted struct value to member variables (struct SplineVector16) main::p0
Created struct value member variable (signed word) main::p1a_x
Created struct value member variable (signed word) main::p1a_y
Converted struct value to member variables (struct SplineVector16) main::p1a
Created struct value member variable (signed word) main::p1b_x
Created struct value member variable (signed word) main::p1b_y
Converted struct value to member variables (struct SplineVector16) main::p1b
Created struct value member variable (signed word) main::p2_x
Created struct value member variable (signed word) main::p2_y
Converted struct value to member variables (struct SplineVector16) main::p2
Created struct value member variable (signed word) main::p3a_x
Created struct value member variable (signed word) main::p3a_y
Converted struct value to member variables (struct SplineVector16) main::p3a
Created struct value member variable (signed word) main::p3b_x
Created struct value member variable (signed word) main::p3b_y
Converted struct value to member variables (struct SplineVector16) main::p3b
Created struct value member variable (signed word) main::p4_x
Created struct value member variable (signed word) main::p4_y
Converted struct value to member variables (struct SplineVector16) main::p4
Created struct value member variable (signed word) splinePlot::p0_x
Created struct value member variable (signed word) splinePlot::p0_y
Converted struct value to member variables (struct SplineVector16) splinePlot::p0
Created struct value member variable (signed word) splinePlot::p1_x
Created struct value member variable (signed word) splinePlot::p1_y
Converted struct value to member variables (struct SplineVector16) splinePlot::p1
Created struct value member variable (signed word) splinePlot::p2_x
Created struct value member variable (signed word) splinePlot::p2_y
Converted struct value to member variables (struct SplineVector16) splinePlot::p2
Created struct value member variable (signed word) splinePlot::a_x
Created struct value member variable (signed word) splinePlot::a_y
Converted struct value to member variables (struct SplineVector16) splinePlot::a
Created struct value member variable (signed word) splinePlot::b_x
Created struct value member variable (signed word) splinePlot::b_y
Converted struct value to member variables (struct SplineVector16) splinePlot::b
Created struct value member variable (signed dword) splinePlot::i_x
Created struct value member variable (signed dword) splinePlot::i_y
Converted struct value to member variables (struct SplineVector32) splinePlot::i
Created struct value member variable (signed dword) splinePlot::j_x
Created struct value member variable (signed dword) splinePlot::j_y
Converted struct value to member variables (struct SplineVector32) splinePlot::j
Created struct value member variable (signed dword) splinePlot::p_x
Created struct value member variable (signed dword) splinePlot::p_y
Converted struct value to member variables (struct SplineVector32) splinePlot::p
Created struct value member variable (signed word) print_spline16::p_x
Created struct value member variable (signed word) print_spline16::p_y
Converted struct value to member variables (struct SplineVector16) print_spline16::p
Created struct value member variable (signed dword) print_spline32::p_x
Created struct value member variable (signed dword) print_spline32::p_y
Converted struct value to member variables (struct SplineVector32) print_spline32::p
Converted procedure struct value parameter to member variables (void()) splinePlot((signed word) splinePlot::p0_x , (signed word) splinePlot::p0_y , (signed word) splinePlot::p1_x , (signed word) splinePlot::p1_y , (signed word) splinePlot::p2_x , (signed word) splinePlot::p2_y)
Converted procedure struct value parameter to member variables (void()) print_spline16((signed word) print_spline16::p_x , (signed word) print_spline16::p_y)
Converted procedure struct value parameter to member variables (void()) print_spline32((signed dword) print_spline32::p_x , (signed dword) print_spline32::p_y)
Adding struct value list initializer (signed word) main::p0_x ← (number) $32
Adding struct value list initializer (signed word) main::p0_y ← (number) $32
Adding struct value list initializer (signed word) main::p1a_x ← (number) $64
Adding struct value list initializer (signed word) main::p1a_y ← (number) $32
Adding struct value list initializer (signed word) main::p1b_x ← (number) $32
Adding struct value list initializer (signed word) main::p1b_y ← (number) $64
Adding struct value list initializer (signed word) main::p2_x ← (number) $64
Adding struct value list initializer (signed word) main::p2_y ← (number) $64
Adding struct value list initializer (signed word) main::p3a_x ← (number) $96
Adding struct value list initializer (signed word) main::p3a_y ← (number) $64
Adding struct value list initializer (signed word) main::p3b_x ← (number) $64
Adding struct value list initializer (signed word) main::p3b_y ← (number) $96
Adding struct value list initializer (signed word) main::p4_x ← (number) $96
Adding struct value list initializer (signed word) main::p4_y ← (number) $96
Converted procedure struct value parameter to member variables in call (void~) main::$8 ← call splinePlot (signed word) main::p0_x (signed word) main::p0_y (signed word) main::p1a_x (signed word) main::p1a_y (signed word) main::p2_x (signed word) main::p2_y 
Converted procedure struct value parameter to member variables in call (void~) main::$9 ← call splinePlot (signed word) main::p2_x (signed word) main::p2_y (signed word) main::p3a_x (signed word) main::p3a_y (signed word) main::p4_x (signed word) main::p4_y 
Converted procedure struct value parameter to member variables in call (void~) main::$10 ← call splinePlot (signed word) main::p2_x (signed word) main::p2_y (signed word) main::p1b_x (signed word) main::p1b_y (signed word) main::p0_x (signed word) main::p0_y 
Converted procedure struct value parameter to member variables in call (void~) main::$11 ← call splinePlot (signed word) main::p4_x (signed word) main::p4_y (signed word) main::p3b_x (signed word) main::p3b_y (signed word) main::p2_x (signed word) main::p2_y 
Adding struct value list initializer (signed word) splinePlot::a_x ← (number~) splinePlot::$2
Adding struct value list initializer (signed word) splinePlot::a_y ← (number~) splinePlot::$5
Adding struct value list initializer (signed word) splinePlot::b_x ← (number~) splinePlot::$8
Adding struct value list initializer (signed word) splinePlot::b_y ← (number~) splinePlot::$11
Adding struct value list initializer (signed dword) splinePlot::i_x ← (number~) splinePlot::$17
Adding struct value list initializer (signed dword) splinePlot::i_y ← (number~) splinePlot::$23
Adding struct value list initializer (signed dword) splinePlot::j_x ← (number~) splinePlot::$26
Adding struct value list initializer (signed dword) splinePlot::j_y ← (number~) splinePlot::$29
Adding struct value list initializer (signed dword) splinePlot::p_x ← (number~) splinePlot::$31
Adding struct value list initializer (signed dword) splinePlot::p_y ← (number~) splinePlot::$33
Adding struct value list initializer (signed dword) splinePlot::p_x ← (signed dword~) splinePlot::$38
Adding struct value list initializer (signed dword) splinePlot::p_y ← (signed dword~) splinePlot::$39
Adding struct value list initializer (signed dword) splinePlot::i_x ← (signed dword~) splinePlot::$40
Adding struct value list initializer (signed dword) splinePlot::i_y ← (signed dword~) splinePlot::$41
Replacing struct member reference (struct SplineVector16) splinePlot::p1.x with member variable reference (signed word) splinePlot::p1_x
Replacing struct member reference (struct SplineVector16) splinePlot::p2.x with member variable reference (signed word) splinePlot::p2_x
Replacing struct member reference (struct SplineVector16) splinePlot::p0.x with member variable reference (signed word) splinePlot::p0_x
Replacing struct member reference (struct SplineVector16) splinePlot::p1.y with member variable reference (signed word) splinePlot::p1_y
Replacing struct member reference (struct SplineVector16) splinePlot::p2.y with member variable reference (signed word) splinePlot::p2_y
Replacing struct member reference (struct SplineVector16) splinePlot::p0.y with member variable reference (signed word) splinePlot::p0_y
Replacing struct member reference (struct SplineVector16) splinePlot::p1.x with member variable reference (signed word) splinePlot::p1_x
Replacing struct member reference (struct SplineVector16) splinePlot::p0.x with member variable reference (signed word) splinePlot::p0_x
Replacing struct member reference (struct SplineVector16) splinePlot::p1.y with member variable reference (signed word) splinePlot::p1_y
Replacing struct member reference (struct SplineVector16) splinePlot::p0.y with member variable reference (signed word) splinePlot::p0_y
Replacing struct member reference (struct SplineVector16) splinePlot::a.x with member variable reference (signed word) splinePlot::a_x
Replacing struct member reference (struct SplineVector16) splinePlot::b.x with member variable reference (signed word) splinePlot::b_x
Replacing struct member reference (struct SplineVector16) splinePlot::a.y with member variable reference (signed word) splinePlot::a_y
Replacing struct member reference (struct SplineVector16) splinePlot::b.y with member variable reference (signed word) splinePlot::b_y
Replacing struct member reference (struct SplineVector16) splinePlot::a.x with member variable reference (signed word) splinePlot::a_x
Replacing struct member reference (struct SplineVector16) splinePlot::a.y with member variable reference (signed word) splinePlot::a_y
Replacing struct member reference (struct SplineVector16) splinePlot::p0.x with member variable reference (signed word) splinePlot::p0_x
Replacing struct member reference (struct SplineVector16) splinePlot::p0.y with member variable reference (signed word) splinePlot::p0_y
Replacing struct member reference (struct SplineVector32) splinePlot::p.x with member variable reference (signed dword) splinePlot::p_x
Replacing struct member reference (struct SplineVector32) splinePlot::p.y with member variable reference (signed dword) splinePlot::p_y
Replacing struct member reference (struct SplineVector32) splinePlot::p.x with member variable reference (signed dword) splinePlot::p_x
Replacing struct member reference (struct SplineVector32) splinePlot::i.x with member variable reference (signed dword) splinePlot::i_x
Replacing struct member reference (struct SplineVector32) splinePlot::p.y with member variable reference (signed dword) splinePlot::p_y
Replacing struct member reference (struct SplineVector32) splinePlot::i.y with member variable reference (signed dword) splinePlot::i_y
Replacing struct member reference (struct SplineVector32) splinePlot::i.x with member variable reference (signed dword) splinePlot::i_x
Replacing struct member reference (struct SplineVector32) splinePlot::j.x with member variable reference (signed dword) splinePlot::j_x
Replacing struct member reference (struct SplineVector32) splinePlot::i.y with member variable reference (signed dword) splinePlot::i_y
Replacing struct member reference (struct SplineVector32) splinePlot::j.y with member variable reference (signed dword) splinePlot::j_y
Replacing struct member reference (struct SplineVector16) print_spline16::p.x with member variable reference (signed word) print_spline16::p_x
Replacing struct member reference (struct SplineVector16) print_spline16::p.y with member variable reference (signed word) print_spline16::p_y
Replacing struct member reference (struct SplineVector32) print_spline32::p.x with member variable reference (signed dword) print_spline32::p_x
Replacing struct member reference (struct SplineVector32) print_spline32::p.y with member variable reference (signed dword) print_spline32::p_y
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition (number~) abs_u16::$1
Warning! Adding boolean cast to non-boolean condition (number~) sgn_u16::$1
Identified constant variable (signed word) main::p0_x
Identified constant variable (signed word) main::p0_y
Identified constant variable (signed word) main::p1a_x
Identified constant variable (signed word) main::p1a_y
Identified constant variable (signed word) main::p1b_x
Identified constant variable (signed word) main::p1b_y
Identified constant variable (signed word) main::p2_x
Identified constant variable (signed word) main::p2_y
Identified constant variable (signed word) main::p3a_x
Identified constant variable (signed word) main::p3a_y
Identified constant variable (signed word) main::p3b_x
Identified constant variable (signed word) main::p3b_y
Identified constant variable (signed word) main::p4_x
Identified constant variable (signed word) main::p4_y
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (byte*) BITMAP_SCREEN 
Inlined call (byte~) main::$3 ← call toD018 (byte*) BITMAP_SCREEN (byte*) BITMAP_GRAPHICS 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) clock::@1
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) memset::@5
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @30
Culled Empty Block (label) bitmap_init::@8
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) main::vicSelectGfxBank1_toDd001_@1
Culled Empty Block (label) main::vicSelectGfxBank1_@return
Culled Empty Block (label) main::toD0181_@1
Culled Empty Block (label) @38
Culled Empty Block (label) splinePlot::@2
Culled Empty Block (label) @39
Culled Empty Block (label) @40

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) D011#0 ← ((byte*)) (number) $d011
  (byte) VIC_BMM#0 ← (number) $20
  (byte) VIC_DEN#0 ← (number) $10
  (byte) VIC_RSEL#0 ← (number) 8
  (byte*) D018#0 ← ((byte*)) (number) $d018
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (number) $dd00
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (number) $dd02
  (dword*) CIA2_TIMER_AB#0 ← ((dword*)) (number) $dd04
  (byte*) CIA2_TIMER_A_CONTROL#0 ← ((byte*)) (number) $dd0e
  (byte*) CIA2_TIMER_B_CONTROL#0 ← ((byte*)) (number) $dd0f
  (byte) CIA_TIMER_CONTROL_STOP#0 ← (number) 0
  (byte) CIA_TIMER_CONTROL_START#0 ← (number) 1
  (byte) CIA_TIMER_CONTROL_CONTINUOUS#0 ← (number) 0
  (byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0 ← (number) 0
  (byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 ← (number) $40
  (byte) BLACK#0 ← (number) 0
  (byte) WHITE#0 ← (number) 1
  to:@4
@4: scope:[]  from @begin
  (dword) CLOCKS_PER_INIT#0 ← (number) $12
  to:@20
clock: scope:[clock]  from main::@9
  (number~) clock::$0 ← (number) $ffffffff - *((dword*) CIA2_TIMER_AB#0)
  (dword) clock::return#0 ← (number~) clock::$0
  to:clock::@return
clock::@return: scope:[clock]  from clock
  (dword) clock::return#3 ← phi( clock/(dword) clock::return#0 )
  (dword) clock::return#1 ← (dword) clock::return#3
  return 
  to:@return
clock_start: scope:[clock_start]  from main::@2
  (byte~) clock_start::$0 ← (byte) CIA_TIMER_CONTROL_STOP#0 | (byte) CIA_TIMER_CONTROL_CONTINUOUS#0
  (byte~) clock_start::$1 ← (byte~) clock_start::$0 | (byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0
  *((byte*) CIA2_TIMER_A_CONTROL#0) ← (byte~) clock_start::$1
  (byte~) clock_start::$2 ← (byte) CIA_TIMER_CONTROL_STOP#0 | (byte) CIA_TIMER_CONTROL_CONTINUOUS#0
  (byte~) clock_start::$3 ← (byte~) clock_start::$2 | (byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
  *((byte*) CIA2_TIMER_B_CONTROL#0) ← (byte~) clock_start::$3
  *((dword*) CIA2_TIMER_AB#0) ← (number) $ffffffff
  (byte~) clock_start::$4 ← (byte) CIA_TIMER_CONTROL_START#0 | (byte) CIA_TIMER_CONTROL_CONTINUOUS#0
  (byte~) clock_start::$5 ← (byte~) clock_start::$4 | (byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
  *((byte*) CIA2_TIMER_B_CONTROL#0) ← (byte~) clock_start::$5
  (byte~) clock_start::$6 ← (byte) CIA_TIMER_CONTROL_START#0 | (byte) CIA_TIMER_CONTROL_CONTINUOUS#0
  (byte~) clock_start::$7 ← (byte~) clock_start::$6 | (byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0
  *((byte*) CIA2_TIMER_A_CONTROL#0) ← (byte~) clock_start::$7
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  return 
  to:@return
print_word_at: scope:[print_word_at]  from print_dword_at print_dword_at::@1
  (byte*) print_word_at::at#2 ← phi( print_dword_at/(byte*) print_word_at::at#0 print_dword_at::@1/(byte*) print_word_at::at#1 )
  (word) print_word_at::w#2 ← phi( print_dword_at/(word) print_word_at::w#0 print_dword_at::@1/(word) print_word_at::w#1 )
  (byte~) print_word_at::$0 ← > (word) print_word_at::w#2
  (byte) print_byte_at::b#0 ← (byte~) print_word_at::$0
  (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2
  call print_byte_at 
  to:print_word_at::@1
print_word_at::@1: scope:[print_word_at]  from print_word_at
  (byte*) print_word_at::at#3 ← phi( print_word_at/(byte*) print_word_at::at#2 )
  (word) print_word_at::w#3 ← phi( print_word_at/(word) print_word_at::w#2 )
  (byte~) print_word_at::$2 ← < (word) print_word_at::w#3
  (byte*~) print_word_at::$3 ← (byte*) print_word_at::at#3 + (number) 2
  (byte) print_byte_at::b#1 ← (byte~) print_word_at::$2
  (byte*) print_byte_at::at#1 ← (byte*~) print_word_at::$3
  call print_byte_at 
  to:print_word_at::@2
print_word_at::@2: scope:[print_word_at]  from print_word_at::@1
  to:print_word_at::@return
print_word_at::@return: scope:[print_word_at]  from print_word_at::@2
  return 
  to:@return
print_dword_at: scope:[print_dword_at]  from main::@10
  (byte*) print_dword_at::at#1 ← phi( main::@10/(byte*) print_dword_at::at#0 )
  (dword) print_dword_at::dw#1 ← phi( main::@10/(dword) print_dword_at::dw#0 )
  (word~) print_dword_at::$0 ← > (dword) print_dword_at::dw#1
  (word) print_word_at::w#0 ← (word~) print_dword_at::$0
  (byte*) print_word_at::at#0 ← (byte*) print_dword_at::at#1
  call print_word_at 
  to:print_dword_at::@1
print_dword_at::@1: scope:[print_dword_at]  from print_dword_at
  (byte*) print_dword_at::at#2 ← phi( print_dword_at/(byte*) print_dword_at::at#1 )
  (dword) print_dword_at::dw#2 ← phi( print_dword_at/(dword) print_dword_at::dw#1 )
  (word~) print_dword_at::$2 ← < (dword) print_dword_at::dw#2
  (byte*~) print_dword_at::$3 ← (byte*) print_dword_at::at#2 + (number) 4
  (word) print_word_at::w#1 ← (word~) print_dword_at::$2
  (byte*) print_word_at::at#1 ← (byte*~) print_dword_at::$3
  call print_word_at 
  to:print_dword_at::@2
print_dword_at::@2: scope:[print_dword_at]  from print_dword_at::@1
  to:print_dword_at::@return
print_dword_at::@return: scope:[print_dword_at]  from print_dword_at::@2
  return 
  to:@return
@20: scope:[]  from @4
  (byte[]) print_hextab#0 ← (const string) $0
  to:@31
print_byte_at: scope:[print_byte_at]  from print_word_at print_word_at::@1
  (byte*) print_byte_at::at#2 ← phi( print_word_at/(byte*) print_byte_at::at#0 print_word_at::@1/(byte*) print_byte_at::at#1 )
  (byte) print_byte_at::b#2 ← phi( print_word_at/(byte) print_byte_at::b#0 print_word_at::@1/(byte) print_byte_at::b#1 )
  (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (number) 4
  (byte) print_char_at::ch#0 ← *((byte[]) print_hextab#0 + (byte~) print_byte_at::$0)
  (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2
  call print_char_at 
  to:print_byte_at::@1
print_byte_at::@1: scope:[print_byte_at]  from print_byte_at
  (byte*) print_byte_at::at#3 ← phi( print_byte_at/(byte*) print_byte_at::at#2 )
  (byte) print_byte_at::b#3 ← phi( print_byte_at/(byte) print_byte_at::b#2 )
  (number~) print_byte_at::$2 ← (byte) print_byte_at::b#3 & (number) $f
  (byte*~) print_byte_at::$3 ← (byte*) print_byte_at::at#3 + (number) 1
  (byte) print_char_at::ch#1 ← *((byte[]) print_hextab#0 + (number~) print_byte_at::$2)
  (byte*) print_char_at::at#1 ← (byte*~) print_byte_at::$3
  call print_char_at 
  to:print_byte_at::@2
print_byte_at::@2: scope:[print_byte_at]  from print_byte_at::@1
  to:print_byte_at::@return
print_byte_at::@return: scope:[print_byte_at]  from print_byte_at::@2
  return 
  to:@return
print_char_at: scope:[print_char_at]  from print_byte_at print_byte_at::@1
  (byte*) print_char_at::at#2 ← phi( print_byte_at/(byte*) print_char_at::at#0 print_byte_at::@1/(byte*) print_char_at::at#1 )
  (byte) print_char_at::ch#2 ← phi( print_byte_at/(byte) print_char_at::ch#0 print_byte_at::@1/(byte) print_char_at::ch#1 )
  *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  return 
  to:@return
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  (byte) memset::c#4 ← phi( bitmap_clear/(byte) memset::c#0 bitmap_clear::@1/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( bitmap_clear/(void*) memset::str#0 bitmap_clear::@1/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( bitmap_clear/(word) memset::num#0 bitmap_clear::@1/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@4/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#3
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@4
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#2) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  (bool~) memset::$4 ← (byte*) memset::dst#1 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@4
  to:memset::@1
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return
@31: scope:[]  from @20
  (byte*) bitmap_screen#0 ← (byte*) 0
  (byte*) bitmap_gfx#0 ← (byte*) 0
  (byte[$100]) bitmap_plot_ylo#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_yhi#0 ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_bit#0 ← { fill( $100, 0) }
  to:@37
bitmap_init: scope:[bitmap_init]  from main
  (byte*) bitmap_init::screen#1 ← phi( main/(byte*) bitmap_init::screen#0 )
  (byte*) bitmap_init::gfx#1 ← phi( main/(byte*) bitmap_init::gfx#0 )
  (byte*) bitmap_gfx#1 ← (byte*) bitmap_init::gfx#1
  (byte*) bitmap_screen#1 ← (byte*) bitmap_init::screen#1
  (byte) bitmap_init::bits#0 ← (number) $80
  (byte) bitmap_init::x#0 ← (byte) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte*) bitmap_screen#23 ← phi( bitmap_init/(byte*) bitmap_screen#1 bitmap_init::@2/(byte*) bitmap_screen#21 )
  (byte*) bitmap_gfx#24 ← phi( bitmap_init/(byte*) bitmap_gfx#1 bitmap_init::@2/(byte*) bitmap_gfx#22 )
  (byte*) bitmap_init::gfx#4 ← phi( bitmap_init/(byte*) bitmap_init::gfx#1 bitmap_init::@2/(byte*) bitmap_init::gfx#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  *((byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (number) 1
  (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (number) 0
  (bool~) bitmap_init::$1 ← ! (bool~) bitmap_init::$0
  if((bool~) bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  (byte*) bitmap_screen#21 ← phi( bitmap_init::@1/(byte*) bitmap_screen#23 bitmap_init::@3/(byte*) bitmap_screen#24 )
  (byte*) bitmap_gfx#22 ← phi( bitmap_init::@1/(byte*) bitmap_gfx#24 bitmap_init::@3/(byte*) bitmap_gfx#25 )
  (byte*) bitmap_init::gfx#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::gfx#4 bitmap_init::@3/(byte*) bitmap_init::gfx#5 )
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@3/(byte) bitmap_init::bits#2 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@3/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$2 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_screen#24 ← phi( bitmap_init::@1/(byte*) bitmap_screen#23 )
  (byte*) bitmap_gfx#25 ← phi( bitmap_init::@1/(byte*) bitmap_gfx#24 )
  (byte*) bitmap_init::gfx#5 ← phi( bitmap_init::@1/(byte*) bitmap_init::gfx#4 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (number) $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_screen#19 ← phi( bitmap_init::@2/(byte*) bitmap_screen#21 )
  (byte*) bitmap_gfx#20 ← phi( bitmap_init::@2/(byte*) bitmap_gfx#22 )
  (byte*) bitmap_init::gfx#2 ← phi( bitmap_init::@2/(byte*) bitmap_init::gfx#3 )
  (byte*) bitmap_init::yoffs#0 ← (byte*) bitmap_init::gfx#2
  (byte) bitmap_init::y#0 ← (byte) 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_screen#15 ← phi( bitmap_init::@4/(byte*) bitmap_screen#19 bitmap_init::@6/(byte*) bitmap_screen#11 )
  (byte*) bitmap_gfx#16 ← phi( bitmap_init::@4/(byte*) bitmap_gfx#20 bitmap_init::@6/(byte*) bitmap_gfx#11 )
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#0 bitmap_init::@6/(byte*) bitmap_init::yoffs#4 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#0 bitmap_init::@6/(byte) bitmap_init::y#1 )
  (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (number) 7
  (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  (number~) bitmap_init::$5 ← (number~) bitmap_init::$3 | (byte~) bitmap_init::$4
  *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (number~) bitmap_init::$5
  (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (number) 7
  (bool~) bitmap_init::$8 ← (number~) bitmap_init::$7 == (number) 7
  (bool~) bitmap_init::$9 ← ! (bool~) bitmap_init::$8
  if((bool~) bitmap_init::$9) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  (byte*) bitmap_screen#11 ← phi( bitmap_init::@5/(byte*) bitmap_screen#15 bitmap_init::@7/(byte*) bitmap_screen#16 )
  (byte*) bitmap_gfx#11 ← phi( bitmap_init::@5/(byte*) bitmap_gfx#16 bitmap_init::@7/(byte*) bitmap_gfx#17 )
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$11 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$11) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  (byte*) bitmap_screen#16 ← phi( bitmap_init::@5/(byte*) bitmap_screen#15 )
  (byte*) bitmap_gfx#17 ← phi( bitmap_init::@5/(byte*) bitmap_gfx#16 )
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 )
  (byte*~) bitmap_init::$10 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$10
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  (byte*) bitmap_screen#6 ← phi( bitmap_init::@6/(byte*) bitmap_screen#11 )
  (byte*) bitmap_gfx#6 ← phi( bitmap_init::@6/(byte*) bitmap_gfx#11 )
  (byte*) bitmap_gfx#2 ← (byte*) bitmap_gfx#6
  (byte*) bitmap_screen#2 ← (byte*) bitmap_screen#6
  return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@3
  (byte*) bitmap_gfx#12 ← phi( main::@3/(byte*) bitmap_gfx#3 )
  (byte*) bitmap_screen#7 ← phi( main::@3/(byte*) bitmap_screen#3 )
  (byte) bitmap_clear::bgcol#1 ← phi( main::@3/(byte) bitmap_clear::bgcol#0 )
  (byte) bitmap_clear::fgcol#1 ← phi( main::@3/(byte) bitmap_clear::fgcol#0 )
  (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (number) $10
  (number~) bitmap_clear::$1 ← (number~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#1
  (byte) bitmap_clear::col#0 ← (number~) bitmap_clear::$1
  (void*) memset::str#0 ← (void*)(byte*) bitmap_screen#7
  (byte) memset::c#0 ← (byte) bitmap_clear::col#0
  (word) memset::num#0 ← (word) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  (byte*) bitmap_gfx#7 ← phi( bitmap_clear/(byte*) bitmap_gfx#12 )
  (void*) memset::str#1 ← (void*)(byte*) bitmap_gfx#7
  (byte) memset::c#1 ← (number) 0
  (word) memset::num#1 ← (word) $1f40
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@2
  return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from splinePlot::@1
  (word) bitmap_plot::x#1 ← phi( splinePlot::@1/(word) bitmap_plot::x#0 )
  (byte) bitmap_plot::y#1 ← phi( splinePlot::@1/(byte) bitmap_plot::y#0 )
  (byte*~) bitmap_plot::$0 ← ((byte*)) { *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#1), *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#1) }
  (byte*) bitmap_plot::plotter#0 ← (byte*~) bitmap_plot::$0
  (number~) bitmap_plot::$1 ← (word) bitmap_plot::x#1 & (number) $fff8
  (byte*) bitmap_plot::plotter#1 ← (byte*) bitmap_plot::plotter#0 + (number~) bitmap_plot::$1
  (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#1
  *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return
@37: scope:[]  from @31
  (byte*) bitmap_screen#18 ← phi( @31/(byte*) bitmap_screen#0 )
  (byte*) bitmap_gfx#19 ← phi( @31/(byte*) bitmap_gfx#0 )
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (byte*) BITMAP_SCREEN#0 ← ((byte*)) (number) $5c00
  (byte*) BITMAP_GRAPHICS#0 ← ((byte*)) (number) $6000
  to:@41
main: scope:[main]  from @41
  (byte*) bitmap_screen#12 ← phi( @41/(byte*) bitmap_screen#14 )
  (byte*) bitmap_gfx#13 ← phi( @41/(byte*) bitmap_gfx#15 )
  (byte*) bitmap_init::gfx#0 ← (byte*) BITMAP_GRAPHICS#0
  (byte*) bitmap_init::screen#0 ← (byte*) BITMAP_SCREEN#0
  call bitmap_init 
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) bitmap_screen#8 ← phi( main/(byte*) bitmap_screen#2 )
  (byte*) bitmap_gfx#8 ← phi( main/(byte*) bitmap_gfx#2 )
  (byte*) bitmap_gfx#3 ← (byte*) bitmap_gfx#8
  (byte*) bitmap_screen#3 ← (byte*) bitmap_screen#8
  (byte) bitmap_clear::bgcol#0 ← (byte) BLACK#0
  (byte) bitmap_clear::fgcol#0 ← (byte) WHITE#0
  call bitmap_clear 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) bitmap_screen#36 ← phi( main::@3/(byte*) bitmap_screen#3 )
  (byte*) bitmap_gfx#37 ← phi( main::@3/(byte*) bitmap_gfx#3 )
  (byte*) main::vicSelectGfxBank1_gfx#0 ← (byte*) BITMAP_SCREEN#0
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@4
  (byte*) bitmap_screen#35 ← phi( main::@4/(byte*) bitmap_screen#36 )
  (byte*) bitmap_gfx#36 ← phi( main::@4/(byte*) bitmap_gfx#37 )
  (byte*) main::vicSelectGfxBank1_gfx#1 ← phi( main::@4/(byte*) main::vicSelectGfxBank1_gfx#0 )
  *((byte*) CIA2_PORT_A_DDR#0) ← (number) 3
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  (byte*) bitmap_screen#34 ← phi( main::vicSelectGfxBank1/(byte*) bitmap_screen#35 )
  (byte*) bitmap_gfx#35 ← phi( main::vicSelectGfxBank1/(byte*) bitmap_gfx#36 )
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 ← phi( main::vicSelectGfxBank1/(byte*) main::vicSelectGfxBank1_toDd001_gfx#0 )
  (word~) main::vicSelectGfxBank1_toDd001_$0#0 ← ((word)) (byte*) main::vicSelectGfxBank1_toDd001_gfx#1
  (byte~) main::vicSelectGfxBank1_toDd001_$1#0 ← > (word~) main::vicSelectGfxBank1_toDd001_$0#0
  (number~) main::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) main::vicSelectGfxBank1_toDd001_$1#0 / (number) $40
  (number~) main::vicSelectGfxBank1_toDd001_$3#0 ← (number) 3 ^ (number~) main::vicSelectGfxBank1_toDd001_$2#0
  (byte) main::vicSelectGfxBank1_toDd001_return#0 ← (number~) main::vicSelectGfxBank1_toDd001_$3#0
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  (byte*) bitmap_screen#33 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) bitmap_screen#34 )
  (byte*) bitmap_gfx#34 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) bitmap_gfx#35 )
  (byte) main::vicSelectGfxBank1_toDd001_return#2 ← phi( main::vicSelectGfxBank1_toDd001/(byte) main::vicSelectGfxBank1_toDd001_return#0 )
  (byte) main::vicSelectGfxBank1_toDd001_return#1 ← (byte) main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  (byte*) bitmap_screen#32 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) bitmap_screen#33 )
  (byte*) bitmap_gfx#33 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) bitmap_gfx#34 )
  (byte) main::vicSelectGfxBank1_toDd001_return#3 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte) main::vicSelectGfxBank1_toDd001_return#1 )
  (byte~) main::vicSelectGfxBank1_$0#0 ← (byte) main::vicSelectGfxBank1_toDd001_return#3
  *((byte*) CIA2_PORT_A#0) ← (byte~) main::vicSelectGfxBank1_$0#0
  to:main::@1
main::@1: scope:[main]  from main::vicSelectGfxBank1_@1
  (byte*) bitmap_screen#31 ← phi( main::vicSelectGfxBank1_@1/(byte*) bitmap_screen#32 )
  (byte*) bitmap_gfx#32 ← phi( main::vicSelectGfxBank1_@1/(byte*) bitmap_gfx#33 )
  (byte*) main::toD0181_screen#0 ← (byte*) BITMAP_SCREEN#0
  (byte*) main::toD0181_gfx#0 ← (byte*) BITMAP_GRAPHICS#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::@1
  (byte*) bitmap_screen#30 ← phi( main::@1/(byte*) bitmap_screen#31 )
  (byte*) bitmap_gfx#31 ← phi( main::@1/(byte*) bitmap_gfx#32 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@1/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@1/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$0#0 ← ((word)) (byte*) main::toD0181_screen#1
  (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (number) $3fff
  (number~) main::toD0181_$2#0 ← (number~) main::toD0181_$1#0 * (number) 4
  (number~) main::toD0181_$3#0 ← > (number~) main::toD0181_$2#0
  (word~) main::toD0181_$4#0 ← ((word)) (byte*) main::toD0181_gfx#1
  (byte~) main::toD0181_$5#0 ← > (word~) main::toD0181_$4#0
  (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (number) 4
  (number~) main::toD0181_$7#0 ← (number~) main::toD0181_$6#0 & (number) $f
  (number~) main::toD0181_$8#0 ← (number~) main::toD0181_$3#0 | (number~) main::toD0181_$7#0
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$8#0
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte*) bitmap_screen#29 ← phi( main::toD0181/(byte*) bitmap_screen#30 )
  (byte*) bitmap_gfx#30 ← phi( main::toD0181/(byte*) bitmap_gfx#31 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@2
main::@2: scope:[main]  from main::toD0181_@return
  (byte*) bitmap_screen#28 ← phi( main::toD0181_@return/(byte*) bitmap_screen#29 )
  (byte*) bitmap_gfx#29 ← phi( main::toD0181_@return/(byte*) bitmap_gfx#30 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$3 ← (byte) main::toD0181_return#3
  *((byte*) D018#0) ← (byte~) main::$3
  (byte~) main::$4 ← (byte) VIC_BMM#0 | (byte) VIC_DEN#0
  (byte~) main::$5 ← (byte~) main::$4 | (byte) VIC_RSEL#0
  (number~) main::$6 ← (byte~) main::$5 | (number) 3
  *((byte*) D011#0) ← (number~) main::$6
  (signed word) main::p0_x#0 ← (number) $32
  (signed word) main::p0_y#0 ← (number) $32
  (signed word) main::p1a_x#0 ← (number) $64
  (signed word) main::p1a_y#0 ← (number) $32
  (signed word) main::p1b_x#0 ← (number) $32
  (signed word) main::p1b_y#0 ← (number) $64
  (signed word) main::p2_x#0 ← (number) $64
  (signed word) main::p2_y#0 ← (number) $64
  (signed word) main::p3a_x#0 ← (number) $96
  (signed word) main::p3a_y#0 ← (number) $64
  (signed word) main::p3b_x#0 ← (number) $64
  (signed word) main::p3b_y#0 ← (number) $96
  (signed word) main::p4_x#0 ← (number) $96
  (signed word) main::p4_y#0 ← (number) $96
  call clock_start 
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) bitmap_screen#27 ← phi( main::@2/(byte*) bitmap_screen#28 )
  (byte*) bitmap_gfx#28 ← phi( main::@2/(byte*) bitmap_gfx#29 )
  (signed word) splinePlot::p0_x#0 ← (signed word) main::p0_x#0
  (signed word) splinePlot::p0_y#0 ← (signed word) main::p0_y#0
  (signed word) splinePlot::p1_x#0 ← (signed word) main::p1a_x#0
  (signed word) splinePlot::p1_y#0 ← (signed word) main::p1a_y#0
  (signed word) splinePlot::p2_x#0 ← (signed word) main::p2_x#0
  (signed word) splinePlot::p2_y#0 ← (signed word) main::p2_y#0
  call splinePlot 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) bitmap_screen#26 ← phi( main::@5/(byte*) bitmap_screen#27 )
  (byte*) bitmap_gfx#27 ← phi( main::@5/(byte*) bitmap_gfx#28 )
  (signed word) splinePlot::p0_x#1 ← (signed word) main::p2_x#0
  (signed word) splinePlot::p0_y#1 ← (signed word) main::p2_y#0
  (signed word) splinePlot::p1_x#1 ← (signed word) main::p3a_x#0
  (signed word) splinePlot::p1_y#1 ← (signed word) main::p3a_y#0
  (signed word) splinePlot::p2_x#1 ← (signed word) main::p4_x#0
  (signed word) splinePlot::p2_y#1 ← (signed word) main::p4_y#0
  call splinePlot 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) bitmap_screen#25 ← phi( main::@6/(byte*) bitmap_screen#26 )
  (byte*) bitmap_gfx#26 ← phi( main::@6/(byte*) bitmap_gfx#27 )
  (signed word) splinePlot::p0_x#2 ← (signed word) main::p2_x#0
  (signed word) splinePlot::p0_y#2 ← (signed word) main::p2_y#0
  (signed word) splinePlot::p1_x#2 ← (signed word) main::p1b_x#0
  (signed word) splinePlot::p1_y#2 ← (signed word) main::p1b_y#0
  (signed word) splinePlot::p2_x#2 ← (signed word) main::p0_x#0
  (signed word) splinePlot::p2_y#2 ← (signed word) main::p0_y#0
  call splinePlot 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte*) bitmap_screen#22 ← phi( main::@7/(byte*) bitmap_screen#25 )
  (byte*) bitmap_gfx#23 ← phi( main::@7/(byte*) bitmap_gfx#26 )
  (signed word) splinePlot::p0_x#3 ← (signed word) main::p4_x#0
  (signed word) splinePlot::p0_y#3 ← (signed word) main::p4_y#0
  (signed word) splinePlot::p1_x#3 ← (signed word) main::p3b_x#0
  (signed word) splinePlot::p1_y#3 ← (signed word) main::p3b_y#0
  (signed word) splinePlot::p2_x#3 ← (signed word) main::p2_x#0
  (signed word) splinePlot::p2_y#3 ← (signed word) main::p2_y#0
  call splinePlot 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte*) bitmap_screen#20 ← phi( main::@8/(byte*) bitmap_screen#22 )
  (byte*) bitmap_gfx#21 ← phi( main::@8/(byte*) bitmap_gfx#23 )
  call clock 
  (dword) clock::return#2 ← (dword) clock::return#1
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte*) bitmap_screen#17 ← phi( main::@9/(byte*) bitmap_screen#20 )
  (byte*) bitmap_gfx#18 ← phi( main::@9/(byte*) bitmap_gfx#21 )
  (dword) clock::return#4 ← phi( main::@9/(dword) clock::return#2 )
  (dword~) main::$12 ← (dword) clock::return#4
  (dword~) main::$13 ← (dword~) main::$12 - (dword) CLOCKS_PER_INIT#0
  (dword) main::cyclecount#0 ← (dword~) main::$13
  (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0
  (byte*) print_dword_at::at#0 ← (byte*) SCREEN#0
  call print_dword_at 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte*) bitmap_screen#13 ← phi( main::@10/(byte*) bitmap_screen#17 )
  (byte*) bitmap_gfx#14 ← phi( main::@10/(byte*) bitmap_gfx#18 )
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte*) bitmap_screen#9 ← phi( main::@11/(byte*) bitmap_screen#13 )
  (byte*) bitmap_gfx#9 ← phi( main::@11/(byte*) bitmap_gfx#14 )
  (byte*) bitmap_gfx#4 ← (byte*) bitmap_gfx#9
  (byte*) bitmap_screen#4 ← (byte*) bitmap_screen#9
  return 
  to:@return
splinePlot: scope:[splinePlot]  from main::@5 main::@6 main::@7 main::@8
  (signed word) splinePlot::p0_y#4 ← phi( main::@5/(signed word) splinePlot::p0_y#0 main::@6/(signed word) splinePlot::p0_y#1 main::@7/(signed word) splinePlot::p0_y#2 main::@8/(signed word) splinePlot::p0_y#3 )
  (signed word) splinePlot::p2_y#4 ← phi( main::@5/(signed word) splinePlot::p2_y#0 main::@6/(signed word) splinePlot::p2_y#1 main::@7/(signed word) splinePlot::p2_y#2 main::@8/(signed word) splinePlot::p2_y#3 )
  (signed word) splinePlot::p1_y#4 ← phi( main::@5/(signed word) splinePlot::p1_y#0 main::@6/(signed word) splinePlot::p1_y#1 main::@7/(signed word) splinePlot::p1_y#2 main::@8/(signed word) splinePlot::p1_y#3 )
  (signed word) splinePlot::p0_x#4 ← phi( main::@5/(signed word) splinePlot::p0_x#0 main::@6/(signed word) splinePlot::p0_x#1 main::@7/(signed word) splinePlot::p0_x#2 main::@8/(signed word) splinePlot::p0_x#3 )
  (signed word) splinePlot::p2_x#4 ← phi( main::@5/(signed word) splinePlot::p2_x#0 main::@6/(signed word) splinePlot::p2_x#1 main::@7/(signed word) splinePlot::p2_x#2 main::@8/(signed word) splinePlot::p2_x#3 )
  (signed word) splinePlot::p1_x#4 ← phi( main::@5/(signed word) splinePlot::p1_x#0 main::@6/(signed word) splinePlot::p1_x#1 main::@7/(signed word) splinePlot::p1_x#2 main::@8/(signed word) splinePlot::p1_x#3 )
  (number~) splinePlot::$0 ← (signed word) splinePlot::p1_x#4 * (number) 2
  (number~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (number~) splinePlot::$0
  (number~) splinePlot::$2 ← (number~) splinePlot::$1 + (signed word) splinePlot::p0_x#4
  (number~) splinePlot::$3 ← (signed word) splinePlot::p1_y#4 * (number) 2
  (number~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (number~) splinePlot::$3
  (number~) splinePlot::$5 ← (number~) splinePlot::$4 + (signed word) splinePlot::p0_y#4
  (signed word) splinePlot::a_x#0 ← (number~) splinePlot::$2
  (signed word) splinePlot::a_y#0 ← (number~) splinePlot::$5
  (number~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 * (number) 2
  (number~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 * (number) 2
  (number~) splinePlot::$8 ← (number~) splinePlot::$6 - (number~) splinePlot::$7
  (number~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 * (number) 2
  (number~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 * (number) 2
  (number~) splinePlot::$11 ← (number~) splinePlot::$9 - (number~) splinePlot::$10
  (signed word) splinePlot::b_x#0 ← (number~) splinePlot::$8
  (signed word) splinePlot::b_y#0 ← (number~) splinePlot::$11
  (signed dword~) splinePlot::$12 ← ((signed dword)) (signed word) splinePlot::a_x#0
  (number~) splinePlot::$13 ← (signed dword~) splinePlot::$12 * (number) $100
  (signed dword~) splinePlot::$14 ← ((signed dword)) (signed word) splinePlot::b_x#0
  (number~) splinePlot::$15 ← (signed dword~) splinePlot::$14 * (number) $100
  (number~) splinePlot::$16 ← (number~) splinePlot::$15 * (number) $10
  (number~) splinePlot::$17 ← (number~) splinePlot::$13 + (number~) splinePlot::$16
  (signed dword~) splinePlot::$18 ← ((signed dword)) (signed word) splinePlot::a_y#0
  (number~) splinePlot::$19 ← (signed dword~) splinePlot::$18 * (number) $100
  (signed dword~) splinePlot::$20 ← ((signed dword)) (signed word) splinePlot::b_y#0
  (number~) splinePlot::$21 ← (signed dword~) splinePlot::$20 * (number) $100
  (number~) splinePlot::$22 ← (number~) splinePlot::$21 * (number) $10
  (number~) splinePlot::$23 ← (number~) splinePlot::$19 + (number~) splinePlot::$22
  (signed dword) splinePlot::i_x#0 ← (number~) splinePlot::$17
  (signed dword) splinePlot::i_y#0 ← (number~) splinePlot::$23
  (signed dword~) splinePlot::$24 ← ((signed dword)) (signed word) splinePlot::a_x#0
  (number~) splinePlot::$25 ← (signed dword~) splinePlot::$24 * (number) $100
  (number~) splinePlot::$26 ← (number~) splinePlot::$25 * (number) 2
  (signed dword~) splinePlot::$27 ← ((signed dword)) (signed word) splinePlot::a_y#0
  (number~) splinePlot::$28 ← (signed dword~) splinePlot::$27 * (number) $100
  (number~) splinePlot::$29 ← (number~) splinePlot::$28 * (number) 2
  (signed dword) splinePlot::j_x#0 ← (number~) splinePlot::$26
  (signed dword) splinePlot::j_y#0 ← (number~) splinePlot::$29
  (signed dword~) splinePlot::$30 ← ((signed dword)) (signed word) splinePlot::p0_x#4
  (number~) splinePlot::$31 ← (signed dword~) splinePlot::$30 * (number) $10000
  (signed dword~) splinePlot::$32 ← ((signed dword)) (signed word) splinePlot::p0_y#4
  (number~) splinePlot::$33 ← (signed dword~) splinePlot::$32 * (number) $10000
  (signed dword) splinePlot::p_x#0 ← (number~) splinePlot::$31
  (signed dword) splinePlot::p_y#0 ← (number~) splinePlot::$33
  (byte) splinePlot::n#0 ← (byte) 0
  to:splinePlot::@1
splinePlot::@1: scope:[splinePlot]  from splinePlot splinePlot::@3
  (byte) splinePlot::n#3 ← phi( splinePlot/(byte) splinePlot::n#0 splinePlot::@3/(byte) splinePlot::n#1 )
  (signed dword) splinePlot::j_y#2 ← phi( splinePlot/(signed dword) splinePlot::j_y#0 splinePlot::@3/(signed dword) splinePlot::j_y#1 )
  (signed dword) splinePlot::j_x#2 ← phi( splinePlot/(signed dword) splinePlot::j_x#0 splinePlot::@3/(signed dword) splinePlot::j_x#1 )
  (signed dword) splinePlot::i_y#3 ← phi( splinePlot/(signed dword) splinePlot::i_y#0 splinePlot::@3/(signed dword) splinePlot::i_y#1 )
  (signed dword) splinePlot::i_x#3 ← phi( splinePlot/(signed dword) splinePlot::i_x#0 splinePlot::@3/(signed dword) splinePlot::i_x#1 )
  (signed dword) splinePlot::p_y#2 ← phi( splinePlot/(signed dword) splinePlot::p_y#0 splinePlot::@3/(signed dword) splinePlot::p_y#1 )
  (signed dword) splinePlot::p_x#2 ← phi( splinePlot/(signed dword) splinePlot::p_x#0 splinePlot::@3/(signed dword) splinePlot::p_x#1 )
  (word~) splinePlot::$34 ← > (signed dword) splinePlot::p_x#2
  (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2
  (byte~) splinePlot::$36 ← < (word~) splinePlot::$35
  (word) bitmap_plot::x#0 ← (word~) splinePlot::$34
  (byte) bitmap_plot::y#0 ← (byte~) splinePlot::$36
  call bitmap_plot 
  to:splinePlot::@3
splinePlot::@3: scope:[splinePlot]  from splinePlot::@1
  (byte) splinePlot::n#2 ← phi( splinePlot::@1/(byte) splinePlot::n#3 )
  (signed dword) splinePlot::j_y#1 ← phi( splinePlot::@1/(signed dword) splinePlot::j_y#2 )
  (signed dword) splinePlot::j_x#1 ← phi( splinePlot::@1/(signed dword) splinePlot::j_x#2 )
  (signed dword) splinePlot::i_y#2 ← phi( splinePlot::@1/(signed dword) splinePlot::i_y#3 )
  (signed dword) splinePlot::p_y#3 ← phi( splinePlot::@1/(signed dword) splinePlot::p_y#2 )
  (signed dword) splinePlot::i_x#2 ← phi( splinePlot::@1/(signed dword) splinePlot::i_x#3 )
  (signed dword) splinePlot::p_x#3 ← phi( splinePlot::@1/(signed dword) splinePlot::p_x#2 )
  (signed dword~) splinePlot::$38 ← (signed dword) splinePlot::p_x#3 + (signed dword) splinePlot::i_x#2
  (signed dword~) splinePlot::$39 ← (signed dword) splinePlot::p_y#3 + (signed dword) splinePlot::i_y#2
  (signed dword) splinePlot::p_x#1 ← (signed dword~) splinePlot::$38
  (signed dword) splinePlot::p_y#1 ← (signed dword~) splinePlot::$39
  (signed dword~) splinePlot::$40 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#1
  (signed dword~) splinePlot::$41 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#1
  (signed dword) splinePlot::i_x#1 ← (signed dword~) splinePlot::$40
  (signed dword) splinePlot::i_y#1 ← (signed dword~) splinePlot::$41
  (byte) splinePlot::n#1 ← (byte) splinePlot::n#2 + rangenext(0,$10)
  (bool~) splinePlot::$42 ← (byte) splinePlot::n#1 != rangelast(0,$10)
  if((bool~) splinePlot::$42) goto splinePlot::@1
  to:splinePlot::@return
splinePlot::@return: scope:[splinePlot]  from splinePlot::@3
  return 
  to:@return
@41: scope:[]  from @37
  (byte*) bitmap_screen#14 ← phi( @37/(byte*) bitmap_screen#18 )
  (byte*) bitmap_gfx#15 ← phi( @37/(byte*) bitmap_gfx#19 )
  call main 
  to:@42
@42: scope:[]  from @41
  (byte*) bitmap_screen#10 ← phi( @41/(byte*) bitmap_screen#4 )
  (byte*) bitmap_gfx#10 ← phi( @41/(byte*) bitmap_gfx#4 )
  (byte*) bitmap_gfx#5 ← (byte*) bitmap_gfx#10
  (byte*) bitmap_screen#5 ← (byte*) bitmap_screen#10
  to:@end
@end: scope:[]  from @42

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @20
(label) @31
(label) @37
(label) @4
(label) @41
(label) @42
(label) @begin
(label) @end
(byte*) BITMAP_GRAPHICS
(byte*) BITMAP_GRAPHICS#0
(byte*) BITMAP_SCREEN
(byte*) BITMAP_SCREEN#0
(byte) BLACK
(byte) BLACK#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(dword*) CIA2_TIMER_AB
(dword*) CIA2_TIMER_AB#0
(byte*) CIA2_TIMER_A_CONTROL
(byte*) CIA2_TIMER_A_CONTROL#0
(byte*) CIA2_TIMER_B_CONTROL
(byte*) CIA2_TIMER_B_CONTROL#0
(byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
(byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0
(byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
(byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
(byte) CIA_TIMER_CONTROL_CONTINUOUS
(byte) CIA_TIMER_CONTROL_CONTINUOUS#0
(byte) CIA_TIMER_CONTROL_START
(byte) CIA_TIMER_CONTROL_START#0
(byte) CIA_TIMER_CONTROL_STOP
(byte) CIA_TIMER_CONTROL_STOP#0
(dword) CLOCKS_PER_INIT
(dword) CLOCKS_PER_INIT#0
(byte*) D011
(byte*) D011#0
(byte*) D018
(byte*) D018#0
(byte*) SCREEN
(byte*) SCREEN#0
(signed word) SplineVector16::x
(signed word) SplineVector16::y
(signed dword) SplineVector32::x
(signed dword) SplineVector32::y
(byte) VIC_BMM
(byte) VIC_BMM#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) WHITE
(byte) WHITE#0
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(number~) bitmap_clear::$0
(number~) bitmap_clear::$1
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::bgcol#0
(byte) bitmap_clear::bgcol#1
(byte) bitmap_clear::col
(byte) bitmap_clear::col#0
(byte) bitmap_clear::fgcol
(byte) bitmap_clear::fgcol#0
(byte) bitmap_clear::fgcol#1
(byte*) bitmap_gfx
(byte*) bitmap_gfx#0
(byte*) bitmap_gfx#1
(byte*) bitmap_gfx#10
(byte*) bitmap_gfx#11
(byte*) bitmap_gfx#12
(byte*) bitmap_gfx#13
(byte*) bitmap_gfx#14
(byte*) bitmap_gfx#15
(byte*) bitmap_gfx#16
(byte*) bitmap_gfx#17
(byte*) bitmap_gfx#18
(byte*) bitmap_gfx#19
(byte*) bitmap_gfx#2
(byte*) bitmap_gfx#20
(byte*) bitmap_gfx#21
(byte*) bitmap_gfx#22
(byte*) bitmap_gfx#23
(byte*) bitmap_gfx#24
(byte*) bitmap_gfx#25
(byte*) bitmap_gfx#26
(byte*) bitmap_gfx#27
(byte*) bitmap_gfx#28
(byte*) bitmap_gfx#29
(byte*) bitmap_gfx#3
(byte*) bitmap_gfx#30
(byte*) bitmap_gfx#31
(byte*) bitmap_gfx#32
(byte*) bitmap_gfx#33
(byte*) bitmap_gfx#34
(byte*) bitmap_gfx#35
(byte*) bitmap_gfx#36
(byte*) bitmap_gfx#37
(byte*) bitmap_gfx#4
(byte*) bitmap_gfx#5
(byte*) bitmap_gfx#6
(byte*) bitmap_gfx#7
(byte*) bitmap_gfx#8
(byte*) bitmap_gfx#9
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(bool~) bitmap_init::$0
(bool~) bitmap_init::$1
(byte*~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$2
(number~) bitmap_init::$3
(byte~) bitmap_init::$4
(number~) bitmap_init::$5
(byte~) bitmap_init::$6
(number~) bitmap_init::$7
(bool~) bitmap_init::$8
(bool~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte*) bitmap_init::gfx
(byte*) bitmap_init::gfx#0
(byte*) bitmap_init::gfx#1
(byte*) bitmap_init::gfx#2
(byte*) bitmap_init::gfx#3
(byte*) bitmap_init::gfx#4
(byte*) bitmap_init::gfx#5
(byte*) bitmap_init::screen
(byte*) bitmap_init::screen#0
(byte*) bitmap_init::screen#1
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(byte*~) bitmap_plot::$0
(number~) bitmap_plot::$1
(byte~) bitmap_plot::$2
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(byte*) bitmap_plot::plotter#1
(word) bitmap_plot::x
(word) bitmap_plot::x#0
(word) bitmap_plot::x#1
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_bit#0
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_yhi#0
(byte[$100]) bitmap_plot_ylo
(byte[$100]) bitmap_plot_ylo#0
(byte*) bitmap_screen
(byte*) bitmap_screen#0
(byte*) bitmap_screen#1
(byte*) bitmap_screen#10
(byte*) bitmap_screen#11
(byte*) bitmap_screen#12
(byte*) bitmap_screen#13
(byte*) bitmap_screen#14
(byte*) bitmap_screen#15
(byte*) bitmap_screen#16
(byte*) bitmap_screen#17
(byte*) bitmap_screen#18
(byte*) bitmap_screen#19
(byte*) bitmap_screen#2
(byte*) bitmap_screen#20
(byte*) bitmap_screen#21
(byte*) bitmap_screen#22
(byte*) bitmap_screen#23
(byte*) bitmap_screen#24
(byte*) bitmap_screen#25
(byte*) bitmap_screen#26
(byte*) bitmap_screen#27
(byte*) bitmap_screen#28
(byte*) bitmap_screen#29
(byte*) bitmap_screen#3
(byte*) bitmap_screen#30
(byte*) bitmap_screen#31
(byte*) bitmap_screen#32
(byte*) bitmap_screen#33
(byte*) bitmap_screen#34
(byte*) bitmap_screen#35
(byte*) bitmap_screen#36
(byte*) bitmap_screen#4
(byte*) bitmap_screen#5
(byte*) bitmap_screen#6
(byte*) bitmap_screen#7
(byte*) bitmap_screen#8
(byte*) bitmap_screen#9
(dword()) clock()
(number~) clock::$0
(label) clock::@return
(dword) clock::return
(dword) clock::return#0
(dword) clock::return#1
(dword) clock::return#2
(dword) clock::return#3
(dword) clock::return#4
(void()) clock_start()
(byte~) clock_start::$0
(byte~) clock_start::$1
(byte~) clock_start::$2
(byte~) clock_start::$3
(byte~) clock_start::$4
(byte~) clock_start::$5
(byte~) clock_start::$6
(byte~) clock_start::$7
(label) clock_start::@return
(void()) main()
(dword~) main::$12
(dword~) main::$13
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(number~) main::$6
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(dword) main::cyclecount
(dword) main::cyclecount#0
(signed word) main::p0_x
(signed word) main::p0_x#0
(signed word) main::p0_y
(signed word) main::p0_y#0
(signed word) main::p1a_x
(signed word) main::p1a_x#0
(signed word) main::p1a_y
(signed word) main::p1a_y#0
(signed word) main::p1b_x
(signed word) main::p1b_x#0
(signed word) main::p1b_y
(signed word) main::p1b_y#0
(signed word) main::p2_x
(signed word) main::p2_x#0
(signed word) main::p2_y
(signed word) main::p2_y#0
(signed word) main::p3a_x
(signed word) main::p3a_x#0
(signed word) main::p3a_y
(signed word) main::p3a_y#0
(signed word) main::p3b_x
(signed word) main::p3b_x#0
(signed word) main::p3b_y
(signed word) main::p3b_y#0
(signed word) main::p4_x
(signed word) main::p4_x#0
(signed word) main::p4_y
(signed word) main::p4_y#0
(label) main::toD0181
(word~) main::toD0181_$0
(word~) main::toD0181_$0#0
(number~) main::toD0181_$1
(number~) main::toD0181_$1#0
(number~) main::toD0181_$2
(number~) main::toD0181_$2#0
(number~) main::toD0181_$3
(number~) main::toD0181_$3#0
(word~) main::toD0181_$4
(word~) main::toD0181_$4#0
(byte~) main::toD0181_$5
(byte~) main::toD0181_$5#0
(number~) main::toD0181_$6
(number~) main::toD0181_$6#0
(number~) main::toD0181_$7
(number~) main::toD0181_$7#0
(number~) main::toD0181_$8
(number~) main::toD0181_$8#0
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(byte~) main::vicSelectGfxBank1_$0#0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(byte*) main::vicSelectGfxBank1_gfx#0
(byte*) main::vicSelectGfxBank1_gfx#1
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(word~) main::vicSelectGfxBank1_toDd001_$0#0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(byte~) main::vicSelectGfxBank1_toDd001_$1#0
(number~) main::vicSelectGfxBank1_toDd001_$2
(number~) main::vicSelectGfxBank1_toDd001_$2#0
(number~) main::vicSelectGfxBank1_toDd001_$3
(number~) main::vicSelectGfxBank1_toDd001_$3#0
(label) main::vicSelectGfxBank1_toDd001_@return
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte*) main::vicSelectGfxBank1_toDd001_gfx#0
(byte*) main::vicSelectGfxBank1_toDd001_gfx#1
(byte) main::vicSelectGfxBank1_toDd001_return
(byte) main::vicSelectGfxBank1_toDd001_return#0
(byte) main::vicSelectGfxBank1_toDd001_return#1
(byte) main::vicSelectGfxBank1_toDd001_return#2
(byte) main::vicSelectGfxBank1_toDd001_return#3
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0
(number~) print_byte_at::$2
(byte*~) print_byte_at::$3
(label) print_byte_at::@1
(label) print_byte_at::@2
(label) print_byte_at::@return
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0
(byte*) print_byte_at::at#1
(byte*) print_byte_at::at#2
(byte*) print_byte_at::at#3
(byte) print_byte_at::b
(byte) print_byte_at::b#0
(byte) print_byte_at::b#1
(byte) print_byte_at::b#2
(byte) print_byte_at::b#3
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0
(byte*) print_char_at::at#1
(byte*) print_char_at::at#2
(byte) print_char_at::ch
(byte) print_char_at::ch#0
(byte) print_char_at::ch#1
(byte) print_char_at::ch#2
(void()) print_dword_at((dword) print_dword_at::dw , (byte*) print_dword_at::at)
(word~) print_dword_at::$0
(word~) print_dword_at::$2
(byte*~) print_dword_at::$3
(label) print_dword_at::@1
(label) print_dword_at::@2
(label) print_dword_at::@return
(byte*) print_dword_at::at
(byte*) print_dword_at::at#0
(byte*) print_dword_at::at#1
(byte*) print_dword_at::at#2
(dword) print_dword_at::dw
(dword) print_dword_at::dw#0
(dword) print_dword_at::dw#1
(dword) print_dword_at::dw#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(void()) print_word_at((word) print_word_at::w , (byte*) print_word_at::at)
(byte~) print_word_at::$0
(byte~) print_word_at::$2
(byte*~) print_word_at::$3
(label) print_word_at::@1
(label) print_word_at::@2
(label) print_word_at::@return
(byte*) print_word_at::at
(byte*) print_word_at::at#0
(byte*) print_word_at::at#1
(byte*) print_word_at::at#2
(byte*) print_word_at::at#3
(word) print_word_at::w
(word) print_word_at::w#0
(word) print_word_at::w#1
(word) print_word_at::w#2
(word) print_word_at::w#3
(void()) splinePlot((signed word) splinePlot::p0_x , (signed word) splinePlot::p0_y , (signed word) splinePlot::p1_x , (signed word) splinePlot::p1_y , (signed word) splinePlot::p2_x , (signed word) splinePlot::p2_y)
(number~) splinePlot::$0
(number~) splinePlot::$1
(number~) splinePlot::$10
(number~) splinePlot::$11
(signed dword~) splinePlot::$12
(number~) splinePlot::$13
(signed dword~) splinePlot::$14
(number~) splinePlot::$15
(number~) splinePlot::$16
(number~) splinePlot::$17
(signed dword~) splinePlot::$18
(number~) splinePlot::$19
(number~) splinePlot::$2
(signed dword~) splinePlot::$20
(number~) splinePlot::$21
(number~) splinePlot::$22
(number~) splinePlot::$23
(signed dword~) splinePlot::$24
(number~) splinePlot::$25
(number~) splinePlot::$26
(signed dword~) splinePlot::$27
(number~) splinePlot::$28
(number~) splinePlot::$29
(number~) splinePlot::$3
(signed dword~) splinePlot::$30
(number~) splinePlot::$31
(signed dword~) splinePlot::$32
(number~) splinePlot::$33
(word~) splinePlot::$34
(word~) splinePlot::$35
(byte~) splinePlot::$36
(signed dword~) splinePlot::$38
(signed dword~) splinePlot::$39
(number~) splinePlot::$4
(signed dword~) splinePlot::$40
(signed dword~) splinePlot::$41
(bool~) splinePlot::$42
(number~) splinePlot::$5
(number~) splinePlot::$6
(number~) splinePlot::$7
(number~) splinePlot::$8
(number~) splinePlot::$9
(label) splinePlot::@1
(label) splinePlot::@3
(label) splinePlot::@return
(signed word) splinePlot::a_x
(signed word) splinePlot::a_x#0
(signed word) splinePlot::a_y
(signed word) splinePlot::a_y#0
(signed word) splinePlot::b_x
(signed word) splinePlot::b_x#0
(signed word) splinePlot::b_y
(signed word) splinePlot::b_y#0
(signed dword) splinePlot::i_x
(signed dword) splinePlot::i_x#0
(signed dword) splinePlot::i_x#1
(signed dword) splinePlot::i_x#2
(signed dword) splinePlot::i_x#3
(signed dword) splinePlot::i_y
(signed dword) splinePlot::i_y#0
(signed dword) splinePlot::i_y#1
(signed dword) splinePlot::i_y#2
(signed dword) splinePlot::i_y#3
(signed dword) splinePlot::j_x
(signed dword) splinePlot::j_x#0
(signed dword) splinePlot::j_x#1
(signed dword) splinePlot::j_x#2
(signed dword) splinePlot::j_y
(signed dword) splinePlot::j_y#0
(signed dword) splinePlot::j_y#1
(signed dword) splinePlot::j_y#2
(byte) splinePlot::n
(byte) splinePlot::n#0
(byte) splinePlot::n#1
(byte) splinePlot::n#2
(byte) splinePlot::n#3
(struct SplineVector16) splinePlot::p0
(signed word) splinePlot::p0_x
(signed word) splinePlot::p0_x#0
(signed word) splinePlot::p0_x#1
(signed word) splinePlot::p0_x#2
(signed word) splinePlot::p0_x#3
(signed word) splinePlot::p0_x#4
(signed word) splinePlot::p0_y
(signed word) splinePlot::p0_y#0
(signed word) splinePlot::p0_y#1
(signed word) splinePlot::p0_y#2
(signed word) splinePlot::p0_y#3
(signed word) splinePlot::p0_y#4
(struct SplineVector16) splinePlot::p1
(signed word) splinePlot::p1_x
(signed word) splinePlot::p1_x#0
(signed word) splinePlot::p1_x#1
(signed word) splinePlot::p1_x#2
(signed word) splinePlot::p1_x#3
(signed word) splinePlot::p1_x#4
(signed word) splinePlot::p1_y
(signed word) splinePlot::p1_y#0
(signed word) splinePlot::p1_y#1
(signed word) splinePlot::p1_y#2
(signed word) splinePlot::p1_y#3
(signed word) splinePlot::p1_y#4
(struct SplineVector16) splinePlot::p2
(signed word) splinePlot::p2_x
(signed word) splinePlot::p2_x#0
(signed word) splinePlot::p2_x#1
(signed word) splinePlot::p2_x#2
(signed word) splinePlot::p2_x#3
(signed word) splinePlot::p2_x#4
(signed word) splinePlot::p2_y
(signed word) splinePlot::p2_y#0
(signed word) splinePlot::p2_y#1
(signed word) splinePlot::p2_y#2
(signed word) splinePlot::p2_y#3
(signed word) splinePlot::p2_y#4
(signed dword) splinePlot::p_x
(signed dword) splinePlot::p_x#0
(signed dword) splinePlot::p_x#1
(signed dword) splinePlot::p_x#2
(signed dword) splinePlot::p_x#3
(signed dword) splinePlot::p_y
(signed dword) splinePlot::p_y#0
(signed dword) splinePlot::p_y#1
(signed dword) splinePlot::p_y#2
(signed dword) splinePlot::p_y#3

Fixing inline constructor with bitmap_plot::$3 ← (byte)*(bitmap_plot_yhi#0 + bitmap_plot::y#1) w= (byte)*(bitmap_plot_ylo#0 + bitmap_plot::y#1)
Successful SSA optimization Pass2FixInlineConstructorsNew
Adding number conversion cast (unumber) $20 in (byte) VIC_BMM#0 ← (number) $20
Adding number conversion cast (unumber) $10 in (byte) VIC_DEN#0 ← (number) $10
Adding number conversion cast (unumber) 8 in (byte) VIC_RSEL#0 ← (number) 8
Adding number conversion cast (unumber) 0 in (byte) CIA_TIMER_CONTROL_STOP#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) CIA_TIMER_CONTROL_START#0 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) CIA_TIMER_CONTROL_CONTINUOUS#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0 ← (number) 0
Adding number conversion cast (unumber) $40 in (byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 ← (number) $40
Adding number conversion cast (unumber) 0 in (byte) BLACK#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) WHITE#0 ← (number) 1
Adding number conversion cast (unumber) $12 in (dword) CLOCKS_PER_INIT#0 ← (number) $12
Adding number conversion cast (unumber) $ffffffff in (number~) clock::$0 ← (number) $ffffffff - *((dword*) CIA2_TIMER_AB#0)
Adding number conversion cast (unumber) clock::$0 in (number~) clock::$0 ← (unumber)(number) $ffffffff - *((dword*) CIA2_TIMER_AB#0)
Adding number conversion cast (unumber) $ffffffff in *((dword*) CIA2_TIMER_AB#0) ← (number) $ffffffff
Adding number conversion cast (unumber) 2 in (byte*~) print_word_at::$3 ← (byte*) print_word_at::at#3 + (number) 2
Adding number conversion cast (unumber) 4 in (byte*~) print_dword_at::$3 ← (byte*) print_dword_at::at#2 + (number) 4
Adding number conversion cast (unumber) 4 in (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte_at::$2 ← (byte) print_byte_at::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte_at::$2 in (number~) print_byte_at::$2 ← (byte) print_byte_at::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) 1 in (byte*~) print_byte_at::$3 ← (byte*) print_byte_at::at#3 + (number) 1
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#0 ← (number) $80
Adding number conversion cast (unumber) 1 in (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (number) 1
Adding number conversion cast (unumber) 0 in (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (number) 0
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#2 ← (number) $80
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$3 in (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) bitmap_init::$5 in (number~) bitmap_init::$5 ← (unumber~) bitmap_init::$3 | (byte~) bitmap_init::$4
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$7 in (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) 7 in (bool~) bitmap_init::$8 ← (unumber~) bitmap_init::$7 == (number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) bitmap_init::$10 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
Adding number conversion cast (unumber) $10 in (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (number) $10
Adding number conversion cast (unumber) bitmap_clear::$0 in (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (unumber)(number) $10
Adding number conversion cast (unumber) bitmap_clear::$1 in (number~) bitmap_clear::$1 ← (unumber~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#1
Adding number conversion cast (unumber) 0 in (byte) memset::c#1 ← (number) 0
Adding number conversion cast (unumber) $fff8 in (number~) bitmap_plot::$1 ← (word) bitmap_plot::x#1 & (number) $fff8
Adding number conversion cast (unumber) bitmap_plot::$1 in (number~) bitmap_plot::$1 ← (word) bitmap_plot::x#1 & (unumber)(number) $fff8
Adding number conversion cast (unumber) 3 in *((byte*) CIA2_PORT_A_DDR#0) ← (number) 3
Adding number conversion cast (unumber) $40 in (number~) main::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) main::vicSelectGfxBank1_toDd001_$1#0 / (number) $40
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$2#0 in (number~) main::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) main::vicSelectGfxBank1_toDd001_$1#0 / (unumber)(number) $40
Adding number conversion cast (unumber) 3 in (number~) main::vicSelectGfxBank1_toDd001_$3#0 ← (number) 3 ^ (unumber~) main::vicSelectGfxBank1_toDd001_$2#0
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$3#0 in (number~) main::vicSelectGfxBank1_toDd001_$3#0 ← (unumber)(number) 3 ^ (unumber~) main::vicSelectGfxBank1_toDd001_$2#0
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$1#0 in (number~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$2#0 ← (unumber~) main::toD0181_$1#0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$2#0 in (number~) main::toD0181_$2#0 ← (unumber~) main::toD0181_$1#0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$3#0 in (number~) main::toD0181_$3#0 ← > (unumber~) main::toD0181_$2#0
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$6#0 in (number~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$7#0 ← (unumber~) main::toD0181_$6#0 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$7#0 in (number~) main::toD0181_$7#0 ← (unumber~) main::toD0181_$6#0 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$8#0 in (number~) main::toD0181_$8#0 ← (unumber~) main::toD0181_$3#0 | (unumber~) main::toD0181_$7#0
Adding number conversion cast (unumber) 3 in (number~) main::$6 ← (byte~) main::$5 | (number) 3
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (byte~) main::$5 | (unumber)(number) 3
Adding number conversion cast (snumber) $32 in (signed word) main::p0_x#0 ← (number) $32
Adding number conversion cast (snumber) $32 in (signed word) main::p0_y#0 ← (number) $32
Adding number conversion cast (snumber) $64 in (signed word) main::p1a_x#0 ← (number) $64
Adding number conversion cast (snumber) $32 in (signed word) main::p1a_y#0 ← (number) $32
Adding number conversion cast (snumber) $32 in (signed word) main::p1b_x#0 ← (number) $32
Adding number conversion cast (snumber) $64 in (signed word) main::p1b_y#0 ← (number) $64
Adding number conversion cast (snumber) $64 in (signed word) main::p2_x#0 ← (number) $64
Adding number conversion cast (snumber) $64 in (signed word) main::p2_y#0 ← (number) $64
Adding number conversion cast (snumber) $96 in (signed word) main::p3a_x#0 ← (number) $96
Adding number conversion cast (snumber) $64 in (signed word) main::p3a_y#0 ← (number) $64
Adding number conversion cast (snumber) $64 in (signed word) main::p3b_x#0 ← (number) $64
Adding number conversion cast (snumber) $96 in (signed word) main::p3b_y#0 ← (number) $96
Adding number conversion cast (snumber) $96 in (signed word) main::p4_x#0 ← (number) $96
Adding number conversion cast (snumber) $96 in (signed word) main::p4_y#0 ← (number) $96
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$0 ← (signed word) splinePlot::p1_x#4 * (number) 2
Adding number conversion cast (snumber) splinePlot::$0 in (number~) splinePlot::$0 ← (signed word) splinePlot::p1_x#4 * (snumber)(number) 2
Adding number conversion cast (snumber) splinePlot::$1 in (number~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (snumber~) splinePlot::$0
Adding number conversion cast (snumber) splinePlot::$2 in (number~) splinePlot::$2 ← (snumber~) splinePlot::$1 + (signed word) splinePlot::p0_x#4
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$3 ← (signed word) splinePlot::p1_y#4 * (number) 2
Adding number conversion cast (snumber) splinePlot::$3 in (number~) splinePlot::$3 ← (signed word) splinePlot::p1_y#4 * (snumber)(number) 2
Adding number conversion cast (snumber) splinePlot::$4 in (number~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (snumber~) splinePlot::$3
Adding number conversion cast (snumber) splinePlot::$5 in (number~) splinePlot::$5 ← (snumber~) splinePlot::$4 + (signed word) splinePlot::p0_y#4
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 * (number) 2
Adding number conversion cast (snumber) splinePlot::$6 in (number~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 * (number) 2
Adding number conversion cast (snumber) splinePlot::$7 in (number~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 * (snumber)(number) 2
Adding number conversion cast (snumber) splinePlot::$8 in (number~) splinePlot::$8 ← (snumber~) splinePlot::$6 - (snumber~) splinePlot::$7
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 * (number) 2
Adding number conversion cast (snumber) splinePlot::$9 in (number~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 * (number) 2
Adding number conversion cast (snumber) splinePlot::$10 in (number~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 * (snumber)(number) 2
Adding number conversion cast (snumber) splinePlot::$11 in (number~) splinePlot::$11 ← (snumber~) splinePlot::$9 - (snumber~) splinePlot::$10
Adding number conversion cast (snumber) $100 in (number~) splinePlot::$13 ← (signed dword~) splinePlot::$12 * (number) $100
Adding number conversion cast (snumber) splinePlot::$13 in (number~) splinePlot::$13 ← (signed dword~) splinePlot::$12 * (snumber)(number) $100
Adding number conversion cast (snumber) $100 in (number~) splinePlot::$15 ← (signed dword~) splinePlot::$14 * (number) $100
Adding number conversion cast (snumber) splinePlot::$15 in (number~) splinePlot::$15 ← (signed dword~) splinePlot::$14 * (snumber)(number) $100
Adding number conversion cast (snumber) $10 in (number~) splinePlot::$16 ← (snumber~) splinePlot::$15 * (number) $10
Adding number conversion cast (snumber) splinePlot::$16 in (number~) splinePlot::$16 ← (snumber~) splinePlot::$15 * (snumber)(number) $10
Adding number conversion cast (snumber) splinePlot::$17 in (number~) splinePlot::$17 ← (snumber~) splinePlot::$13 + (snumber~) splinePlot::$16
Adding number conversion cast (snumber) $100 in (number~) splinePlot::$19 ← (signed dword~) splinePlot::$18 * (number) $100
Adding number conversion cast (snumber) splinePlot::$19 in (number~) splinePlot::$19 ← (signed dword~) splinePlot::$18 * (snumber)(number) $100
Adding number conversion cast (snumber) $100 in (number~) splinePlot::$21 ← (signed dword~) splinePlot::$20 * (number) $100
Adding number conversion cast (snumber) splinePlot::$21 in (number~) splinePlot::$21 ← (signed dword~) splinePlot::$20 * (snumber)(number) $100
Adding number conversion cast (snumber) $10 in (number~) splinePlot::$22 ← (snumber~) splinePlot::$21 * (number) $10
Adding number conversion cast (snumber) splinePlot::$22 in (number~) splinePlot::$22 ← (snumber~) splinePlot::$21 * (snumber)(number) $10
Adding number conversion cast (snumber) splinePlot::$23 in (number~) splinePlot::$23 ← (snumber~) splinePlot::$19 + (snumber~) splinePlot::$22
Adding number conversion cast (snumber) $100 in (number~) splinePlot::$25 ← (signed dword~) splinePlot::$24 * (number) $100
Adding number conversion cast (snumber) splinePlot::$25 in (number~) splinePlot::$25 ← (signed dword~) splinePlot::$24 * (snumber)(number) $100
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$26 ← (snumber~) splinePlot::$25 * (number) 2
Adding number conversion cast (snumber) splinePlot::$26 in (number~) splinePlot::$26 ← (snumber~) splinePlot::$25 * (snumber)(number) 2
Adding number conversion cast (snumber) $100 in (number~) splinePlot::$28 ← (signed dword~) splinePlot::$27 * (number) $100
Adding number conversion cast (snumber) splinePlot::$28 in (number~) splinePlot::$28 ← (signed dword~) splinePlot::$27 * (snumber)(number) $100
Adding number conversion cast (snumber) 2 in (number~) splinePlot::$29 ← (snumber~) splinePlot::$28 * (number) 2
Adding number conversion cast (snumber) splinePlot::$29 in (number~) splinePlot::$29 ← (snumber~) splinePlot::$28 * (snumber)(number) 2
Adding number conversion cast (snumber) $10000 in (number~) splinePlot::$31 ← (signed dword~) splinePlot::$30 * (number) $10000
Adding number conversion cast (snumber) splinePlot::$31 in (number~) splinePlot::$31 ← (signed dword~) splinePlot::$30 * (snumber)(number) $10000
Adding number conversion cast (snumber) $10000 in (number~) splinePlot::$33 ← (signed dword~) splinePlot::$32 * (number) $10000
Adding number conversion cast (snumber) splinePlot::$33 in (number~) splinePlot::$33 ← (signed dword~) splinePlot::$32 * (snumber)(number) $10000
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) D011#0 ← (byte*)(number) $d011
Inlining cast (byte) VIC_BMM#0 ← (unumber)(number) $20
Inlining cast (byte) VIC_DEN#0 ← (unumber)(number) $10
Inlining cast (byte) VIC_RSEL#0 ← (unumber)(number) 8
Inlining cast (byte*) D018#0 ← (byte*)(number) $d018
Inlining cast (byte*) CIA2_PORT_A#0 ← (byte*)(number) $dd00
Inlining cast (byte*) CIA2_PORT_A_DDR#0 ← (byte*)(number) $dd02
Inlining cast (dword*) CIA2_TIMER_AB#0 ← (dword*)(number) $dd04
Inlining cast (byte*) CIA2_TIMER_A_CONTROL#0 ← (byte*)(number) $dd0e
Inlining cast (byte*) CIA2_TIMER_B_CONTROL#0 ← (byte*)(number) $dd0f
Inlining cast (byte) CIA_TIMER_CONTROL_STOP#0 ← (unumber)(number) 0
Inlining cast (byte) CIA_TIMER_CONTROL_START#0 ← (unumber)(number) 1
Inlining cast (byte) CIA_TIMER_CONTROL_CONTINUOUS#0 ← (unumber)(number) 0
Inlining cast (byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0 ← (unumber)(number) 0
Inlining cast (byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 ← (unumber)(number) $40
Inlining cast (byte) BLACK#0 ← (unumber)(number) 0
Inlining cast (byte) WHITE#0 ← (unumber)(number) 1
Inlining cast (dword) CLOCKS_PER_INIT#0 ← (unumber)(number) $12
Inlining cast *((dword*) CIA2_TIMER_AB#0) ← (unumber)(number) $ffffffff
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#3
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) bitmap_init::bits#0 ← (unumber)(number) $80
Inlining cast (byte) bitmap_init::bits#2 ← (unumber)(number) $80
Inlining cast (byte) memset::c#1 ← (unumber)(number) 0
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte*) BITMAP_SCREEN#0 ← (byte*)(number) $5c00
Inlining cast (byte*) BITMAP_GRAPHICS#0 ← (byte*)(number) $6000
Inlining cast *((byte*) CIA2_PORT_A_DDR#0) ← (unumber)(number) 3
Inlining cast (word~) main::vicSelectGfxBank1_toDd001_$0#0 ← (word)(byte*) main::vicSelectGfxBank1_toDd001_gfx#1
Inlining cast (word~) main::toD0181_$0#0 ← (word)(byte*) main::toD0181_screen#1
Inlining cast (word~) main::toD0181_$4#0 ← (word)(byte*) main::toD0181_gfx#1
Inlining cast (signed word) main::p0_x#0 ← (snumber)(number) $32
Inlining cast (signed word) main::p0_y#0 ← (snumber)(number) $32
Inlining cast (signed word) main::p1a_x#0 ← (snumber)(number) $64
Inlining cast (signed word) main::p1a_y#0 ← (snumber)(number) $32
Inlining cast (signed word) main::p1b_x#0 ← (snumber)(number) $32
Inlining cast (signed word) main::p1b_y#0 ← (snumber)(number) $64
Inlining cast (signed word) main::p2_x#0 ← (snumber)(number) $64
Inlining cast (signed word) main::p2_y#0 ← (snumber)(number) $64
Inlining cast (signed word) main::p3a_x#0 ← (snumber)(number) $96
Inlining cast (signed word) main::p3a_y#0 ← (snumber)(number) $64
Inlining cast (signed word) main::p3b_x#0 ← (snumber)(number) $64
Inlining cast (signed word) main::p3b_y#0 ← (snumber)(number) $96
Inlining cast (signed word) main::p4_x#0 ← (snumber)(number) $96
Inlining cast (signed word) main::p4_y#0 ← (snumber)(number) $96
Inlining cast (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0
Inlining cast (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0
Inlining cast (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0
Inlining cast (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0
Inlining cast (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0
Inlining cast (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0
Inlining cast (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4
Inlining cast (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53265
Simplifying constant integer cast $20
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 56576
Simplifying constant pointer cast (byte*) 56578
Simplifying constant pointer cast (dword*) 56580
Simplifying constant pointer cast (byte*) 56590
Simplifying constant pointer cast (byte*) 56591
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $12
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast *((byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#1)
Simplifying constant integer cast *((byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#1)
Simplifying constant integer cast $fff8
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 23552
Simplifying constant pointer cast (byte*) 24576
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 3
Simplifying constant integer cast $32
Simplifying constant integer cast $32
Simplifying constant integer cast $64
Simplifying constant integer cast $32
Simplifying constant integer cast $32
Simplifying constant integer cast $64
Simplifying constant integer cast $64
Simplifying constant integer cast $64
Simplifying constant integer cast $96
Simplifying constant integer cast $64
Simplifying constant integer cast $64
Simplifying constant integer cast $96
Simplifying constant integer cast $96
Simplifying constant integer cast $96
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $100
Simplifying constant integer cast $100
Simplifying constant integer cast $10
Simplifying constant integer cast $100
Simplifying constant integer cast $100
Simplifying constant integer cast $10
Simplifying constant integer cast $100
Simplifying constant integer cast 2
Simplifying constant integer cast $100
Simplifying constant integer cast 2
Simplifying constant integer cast $10000
Simplifying constant integer cast $10000
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $12
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $fff8
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 3
Finalized signed number type (signed byte) $32
Finalized signed number type (signed byte) $32
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $32
Finalized signed number type (signed byte) $32
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $64
Finalized signed number type (signed word) $96
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $64
Finalized signed number type (signed word) $96
Finalized signed number type (signed word) $96
Finalized signed number type (signed word) $96
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed word) $100
Finalized signed number type (signed word) $100
Finalized signed number type (signed byte) $10
Finalized signed number type (signed word) $100
Finalized signed number type (signed word) $100
Finalized signed number type (signed byte) $10
Finalized signed number type (signed word) $100
Finalized signed number type (signed byte) 2
Finalized signed number type (signed word) $100
Finalized signed number type (signed byte) 2
Finalized signed number type (signed dword) $10000
Finalized signed number type (signed dword) $10000
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to dword in (unumber~) clock::$0 ← (dword) $ffffffff - *((dword*) CIA2_TIMER_AB#0)
Inferred type updated to byte in (unumber~) print_byte_at::$2 ← (byte) print_byte_at::b#3 & (byte) $f
Inferred type updated to byte in (unumber~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
Inferred type updated to byte in (unumber~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#1 * (byte) $10
Inferred type updated to byte in (unumber~) bitmap_clear::$1 ← (byte~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#1
Inferred type updated to word in (unumber~) bitmap_plot::$1 ← (word) bitmap_plot::x#1 & (word) $fff8
Inferred type updated to byte in (unumber~) main::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) main::vicSelectGfxBank1_toDd001_$1#0 / (byte) $40
Inferred type updated to byte in (unumber~) main::vicSelectGfxBank1_toDd001_$3#0 ← (byte) 3 ^ (byte~) main::vicSelectGfxBank1_toDd001_$2#0
Inferred type updated to word in (unumber~) main::toD0181_$1#0 ← (word~) main::toD0181_$0#0 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$2#0 ← (word~) main::toD0181_$1#0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$3#0 ← > (word~) main::toD0181_$2#0
Inferred type updated to byte in (unumber~) main::toD0181_$6#0 ← (byte~) main::toD0181_$5#0 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$7#0 ← (byte~) main::toD0181_$6#0 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$8#0 ← (byte~) main::toD0181_$3#0 | (byte~) main::toD0181_$7#0
Inferred type updated to byte in (unumber~) main::$6 ← (byte~) main::$5 | (byte) 3
Inferred type updated to signed word in (snumber~) splinePlot::$0 ← (signed word) splinePlot::p1_x#4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$0
Inferred type updated to signed word in (snumber~) splinePlot::$2 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4
Inferred type updated to signed word in (snumber~) splinePlot::$3 ← (signed word) splinePlot::p1_y#4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$3
Inferred type updated to signed word in (snumber~) splinePlot::$5 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4
Inferred type updated to signed word in (snumber~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) splinePlot::$8 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7
Inferred type updated to signed word in (snumber~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 * (signed byte) 2
Inferred type updated to signed word in (snumber~) splinePlot::$11 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10
Inferred type updated to signed dword in (snumber~) splinePlot::$13 ← (signed dword~) splinePlot::$12 * (signed word) $100
Inferred type updated to signed dword in (snumber~) splinePlot::$15 ← (signed dword~) splinePlot::$14 * (signed word) $100
Inferred type updated to signed dword in (snumber~) splinePlot::$16 ← (signed dword~) splinePlot::$15 * (signed byte) $10
Inferred type updated to signed dword in (snumber~) splinePlot::$17 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16
Inferred type updated to signed dword in (snumber~) splinePlot::$19 ← (signed dword~) splinePlot::$18 * (signed word) $100
Inferred type updated to signed dword in (snumber~) splinePlot::$21 ← (signed dword~) splinePlot::$20 * (signed word) $100
Inferred type updated to signed dword in (snumber~) splinePlot::$22 ← (signed dword~) splinePlot::$21 * (signed byte) $10
Inferred type updated to signed dword in (snumber~) splinePlot::$23 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22
Inferred type updated to signed dword in (snumber~) splinePlot::$25 ← (signed dword~) splinePlot::$24 * (signed word) $100
Inferred type updated to signed dword in (snumber~) splinePlot::$26 ← (signed dword~) splinePlot::$25 * (signed byte) 2
Inferred type updated to signed dword in (snumber~) splinePlot::$28 ← (signed dword~) splinePlot::$27 * (signed word) $100
Inferred type updated to signed dword in (snumber~) splinePlot::$29 ← (signed dword~) splinePlot::$28 * (signed byte) 2
Inferred type updated to signed dword in (snumber~) splinePlot::$31 ← (signed dword~) splinePlot::$30 * (signed dword) $10000
Inferred type updated to signed dword in (snumber~) splinePlot::$33 ← (signed dword~) splinePlot::$32 * (signed dword) $10000
Adding pointer type conversion cast (byte*) bitmap_plot::$0 in (byte*~) bitmap_plot::$0 ← (word~) bitmap_plot::$3
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [79] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [78] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [110] (bool~) bitmap_init::$1 ← (byte) bitmap_init::bits#1 != (byte) 0 from [109] (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte) 0
Inversing boolean not [130] (bool~) bitmap_init::$9 ← (byte~) bitmap_init::$7 != (byte) 7 from [129] (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte) 7
Successful SSA optimization Pass2UnaryNotSimplification
Alias (dword) clock::return#0 = (dword~) clock::$0 (dword) clock::return#3 (dword) clock::return#1 
Alias (byte) print_byte_at::b#0 = (byte~) print_word_at::$0 
Alias (word) print_word_at::w#2 = (word) print_word_at::w#3 
Alias (byte*) print_word_at::at#2 = (byte*) print_word_at::at#3 
Alias (byte) print_byte_at::b#1 = (byte~) print_word_at::$2 
Alias (byte*) print_byte_at::at#1 = (byte*~) print_word_at::$3 
Alias (word) print_word_at::w#0 = (word~) print_dword_at::$0 
Alias (dword) print_dword_at::dw#1 = (dword) print_dword_at::dw#2 
Alias (byte*) print_dword_at::at#1 = (byte*) print_dword_at::at#2 
Alias (word) print_word_at::w#1 = (word~) print_dword_at::$2 
Alias (byte*) print_word_at::at#1 = (byte*~) print_dword_at::$3 
Alias (byte) print_byte_at::b#2 = (byte) print_byte_at::b#3 
Alias (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#3 
Alias (byte*) print_char_at::at#1 = (byte*~) print_byte_at::$3 
Alias (void*) memset::return#0 = (void*) memset::str#2 (void*) memset::return#4 (void*) memset::return#1 
Alias (void*) memset::str#3 = (void*) memset::str#4 
Alias (word) memset::num#2 = (word) memset::num#3 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#4 
Alias (byte*) bitmap_init::gfx#4 = (byte*) bitmap_init::gfx#5 
Alias (byte*) bitmap_gfx#24 = (byte*) bitmap_gfx#25 
Alias (byte*) bitmap_screen#23 = (byte*) bitmap_screen#24 
Alias (byte*) bitmap_init::gfx#2 = (byte*) bitmap_init::gfx#3 (byte*) bitmap_init::yoffs#0 
Alias (byte*) bitmap_gfx#20 = (byte*) bitmap_gfx#22 
Alias (byte*) bitmap_screen#19 = (byte*) bitmap_screen#21 
Alias (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#4 
Alias (byte*) bitmap_gfx#16 = (byte*) bitmap_gfx#17 
Alias (byte*) bitmap_screen#15 = (byte*) bitmap_screen#16 
Alias (byte*) bitmap_init::yoffs#1 = (byte*~) bitmap_init::$10 
Alias (byte*) bitmap_gfx#11 = (byte*) bitmap_gfx#6 (byte*) bitmap_gfx#2 
Alias (byte*) bitmap_screen#11 = (byte*) bitmap_screen#6 (byte*) bitmap_screen#2 
Alias (byte) bitmap_clear::col#0 = (byte~) bitmap_clear::$1 
Alias (byte*) bitmap_gfx#12 = (byte*) bitmap_gfx#7 
Alias (byte*) bitmap_plot::plotter#0 = (byte*~) bitmap_plot::$0 
Alias (byte*) bitmap_gfx#0 = (byte*) bitmap_gfx#19 (byte*) bitmap_gfx#15 
Alias (byte*) bitmap_screen#0 = (byte*) bitmap_screen#18 (byte*) bitmap_screen#14 
Alias (byte*) bitmap_gfx#14 = (byte*) bitmap_gfx#3 (byte*) bitmap_gfx#8 (byte*) bitmap_gfx#37 (byte*) bitmap_gfx#36 (byte*) bitmap_gfx#35 (byte*) bitmap_gfx#34 (byte*) bitmap_gfx#33 (byte*) bitmap_gfx#32 (byte*) bitmap_gfx#31 (byte*) bitmap_gfx#30 (byte*) bitmap_gfx#29 (byte*) bitmap_gfx#28 (byte*) bitmap_gfx#27 (byte*) bitmap_gfx#26 (byte*) bitmap_gfx#23 (byte*) bitmap_gfx#21 (byte*) bitmap_gfx#18 (byte*) bitmap_gfx#9 (byte*) bitmap_gfx#4 
Alias (byte*) bitmap_screen#13 = (byte*) bitmap_screen#3 (byte*) bitmap_screen#8 (byte*) bitmap_screen#36 (byte*) bitmap_screen#35 (byte*) bitmap_screen#34 (byte*) bitmap_screen#33 (byte*) bitmap_screen#32 (byte*) bitmap_screen#31 (byte*) bitmap_screen#30 (byte*) bitmap_screen#29 (byte*) bitmap_screen#28 (byte*) bitmap_screen#27 (byte*) bitmap_screen#26 (byte*) bitmap_screen#25 (byte*) bitmap_screen#22 (byte*) bitmap_screen#20 (byte*) bitmap_screen#17 (byte*) bitmap_screen#9 (byte*) bitmap_screen#4 
Alias (byte*) main::vicSelectGfxBank1_gfx#0 = (byte*) main::vicSelectGfxBank1_gfx#1 (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 
Alias (byte) main::vicSelectGfxBank1_toDd001_return#0 = (byte~) main::vicSelectGfxBank1_toDd001_$3#0 (byte) main::vicSelectGfxBank1_toDd001_return#2 (byte) main::vicSelectGfxBank1_toDd001_return#1 (byte) main::vicSelectGfxBank1_toDd001_return#3 (byte~) main::vicSelectGfxBank1_$0#0 
Alias (byte*) main::toD0181_screen#0 = (byte*) main::toD0181_screen#1 
Alias (byte*) main::toD0181_gfx#0 = (byte*) main::toD0181_gfx#1 
Alias (byte) main::toD0181_return#0 = (byte~) main::toD0181_$8#0 (byte) main::toD0181_return#2 (byte) main::toD0181_return#1 (byte) main::toD0181_return#3 (byte~) main::$3 
Alias (dword) clock::return#2 = (dword) clock::return#4 
Alias (dword) main::cyclecount#0 = (dword~) main::$13 
Alias (signed word) splinePlot::a_x#0 = (signed word~) splinePlot::$2 
Alias (signed word) splinePlot::a_y#0 = (signed word~) splinePlot::$5 
Alias (signed word) splinePlot::b_x#0 = (signed word~) splinePlot::$8 
Alias (signed word) splinePlot::b_y#0 = (signed word~) splinePlot::$11 
Alias (signed dword) splinePlot::i_x#0 = (signed dword~) splinePlot::$17 
Alias (signed dword) splinePlot::i_y#0 = (signed dword~) splinePlot::$23 
Alias (signed dword) splinePlot::j_x#0 = (signed dword~) splinePlot::$26 
Alias (signed dword) splinePlot::j_y#0 = (signed dword~) splinePlot::$29 
Alias (signed dword) splinePlot::p_x#0 = (signed dword~) splinePlot::$31 
Alias (signed dword) splinePlot::p_y#0 = (signed dword~) splinePlot::$33 
Alias (word) bitmap_plot::x#0 = (word~) splinePlot::$34 
Alias (byte) bitmap_plot::y#0 = (byte~) splinePlot::$36 
Alias (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#3 
Alias (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#3 
Alias (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#3 
Alias (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#3 
Alias (signed dword) splinePlot::j_x#1 = (signed dword) splinePlot::j_x#2 
Alias (signed dword) splinePlot::j_y#1 = (signed dword) splinePlot::j_y#2 
Alias (byte) splinePlot::n#2 = (byte) splinePlot::n#3 
Alias (signed dword) splinePlot::p_x#1 = (signed dword~) splinePlot::$38 
Alias (signed dword) splinePlot::p_y#1 = (signed dword~) splinePlot::$39 
Alias (signed dword) splinePlot::i_x#1 = (signed dword~) splinePlot::$40 
Alias (signed dword) splinePlot::i_y#1 = (signed dword~) splinePlot::$41 
Alias (byte*) bitmap_gfx#10 = (byte*) bitmap_gfx#5 
Alias (byte*) bitmap_screen#10 = (byte*) bitmap_screen#5 
Successful SSA optimization Pass2AliasElimination
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#3 
Alias (byte*) bitmap_init::gfx#2 = (byte*) bitmap_init::gfx#4 
Alias (byte*) bitmap_gfx#20 = (byte*) bitmap_gfx#24 
Alias (byte*) bitmap_screen#19 = (byte*) bitmap_screen#23 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#3 
Alias (byte*) bitmap_gfx#11 = (byte*) bitmap_gfx#16 
Alias (byte*) bitmap_screen#11 = (byte*) bitmap_screen#15 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) memset::c#2
Self Phi Eliminated (byte*) memset::end#1
Self Phi Eliminated (void*) memset::str#5
Self Phi Eliminated (byte*) bitmap_init::gfx#2
Self Phi Eliminated (byte*) bitmap_gfx#20
Self Phi Eliminated (byte*) bitmap_screen#19
Self Phi Eliminated (byte*) bitmap_gfx#11
Self Phi Eliminated (byte*) bitmap_screen#11
Self Phi Eliminated (signed dword) splinePlot::j_x#1
Self Phi Eliminated (signed dword) splinePlot::j_y#1
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (dword) print_dword_at::dw#1 (dword) print_dword_at::dw#0
Identical Phi Values (byte*) print_dword_at::at#1 (byte*) print_dword_at::at#0
Identical Phi Values (byte) memset::c#2 (byte) memset::c#3
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte*) bitmap_init::gfx#1 (byte*) bitmap_init::gfx#0
Identical Phi Values (byte*) bitmap_init::screen#1 (byte*) bitmap_init::screen#0
Identical Phi Values (byte*) bitmap_init::gfx#2 (byte*) bitmap_init::gfx#1
Identical Phi Values (byte*) bitmap_gfx#20 (byte*) bitmap_gfx#1
Identical Phi Values (byte*) bitmap_screen#19 (byte*) bitmap_screen#1
Identical Phi Values (byte*) bitmap_gfx#11 (byte*) bitmap_gfx#20
Identical Phi Values (byte*) bitmap_screen#11 (byte*) bitmap_screen#19
Identical Phi Values (byte) bitmap_clear::fgcol#1 (byte) bitmap_clear::fgcol#0
Identical Phi Values (byte) bitmap_clear::bgcol#1 (byte) bitmap_clear::bgcol#0
Identical Phi Values (byte*) bitmap_screen#7 (byte*) bitmap_screen#13
Identical Phi Values (byte*) bitmap_gfx#12 (byte*) bitmap_gfx#14
Identical Phi Values (byte) bitmap_plot::y#1 (byte) bitmap_plot::y#0
Identical Phi Values (word) bitmap_plot::x#1 (word) bitmap_plot::x#0
Identical Phi Values (byte*) bitmap_gfx#13 (byte*) bitmap_gfx#0
Identical Phi Values (byte*) bitmap_screen#12 (byte*) bitmap_screen#0
Identical Phi Values (byte*) bitmap_gfx#14 (byte*) bitmap_gfx#11
Identical Phi Values (byte*) bitmap_screen#13 (byte*) bitmap_screen#11
Identical Phi Values (signed dword) splinePlot::j_x#1 (signed dword) splinePlot::j_x#0
Identical Phi Values (signed dword) splinePlot::j_y#1 (signed dword) splinePlot::j_y#0
Identical Phi Values (byte*) bitmap_gfx#10 (byte*) bitmap_gfx#14
Identical Phi Values (byte*) bitmap_screen#10 (byte*) bitmap_screen#13
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [26] (byte~) clock_start::$2 ← (byte) CIA_TIMER_CONTROL_STOP#0 | (byte) CIA_TIMER_CONTROL_CONTINUOUS#0
Identified duplicate assignment right side [33] (byte~) clock_start::$6 ← (byte) CIA_TIMER_CONTROL_START#0 | (byte) CIA_TIMER_CONTROL_CONTINUOUS#0
Identified duplicate assignment right side [128] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
Identified duplicate assignment right side [292] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 * (signed byte) 2
Identified duplicate assignment right side [295] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 * (signed byte) 2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) memset::$1 [80] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [92] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) bitmap_init::$1 [111] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$2 [115] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$9 [131] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@6
Simple Condition (bool~) bitmap_init::$11 [135] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition (bool~) splinePlot::$42 [347] if((byte) splinePlot::n#1!=rangelast(0,$10)) goto splinePlot::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [98] (byte[$100]) bitmap_plot_ylo#0 ← { fill( $100, 0) }
Constant right-side identified [99] (byte[$100]) bitmap_plot_yhi#0 ← { fill( $100, 0) }
Constant right-side identified [100] (byte[$100]) bitmap_plot_bit#0 ← { fill( $100, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) D011#0 = (byte*) 53265
Constant (const byte) VIC_BMM#0 = $20
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) D018#0 = (byte*) 53272
Constant (const byte*) CIA2_PORT_A#0 = (byte*) 56576
Constant (const byte*) CIA2_PORT_A_DDR#0 = (byte*) 56578
Constant (const dword*) CIA2_TIMER_AB#0 = (dword*) 56580
Constant (const byte*) CIA2_TIMER_A_CONTROL#0 = (byte*) 56590
Constant (const byte*) CIA2_TIMER_B_CONTROL#0 = (byte*) 56591
Constant (const byte) CIA_TIMER_CONTROL_STOP#0 = 0
Constant (const byte) CIA_TIMER_CONTROL_START#0 = 1
Constant (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 = 0
Constant (const byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0 = 0
Constant (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 = $40
Constant (const byte) BLACK#0 = 0
Constant (const byte) WHITE#0 = 1
Constant (const dword) CLOCKS_PER_INIT#0 = $12
Constant (const byte[]) print_hextab#0 = $0
Constant (const byte*) bitmap_screen#0 = (byte*) 0
Constant (const byte*) bitmap_gfx#0 = (byte*) 0
Constant (const byte[$100]) bitmap_plot_ylo#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_yhi#0 = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_bit#0 = { fill( $100, 0) }
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word) memset::num#0 = $3e8
Constant (const byte) memset::c#1 = 0
Constant (const word) memset::num#1 = $1f40
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte*) BITMAP_SCREEN#0 = (byte*) 23552
Constant (const byte*) BITMAP_GRAPHICS#0 = (byte*) 24576
Constant (const signed word) main::p0_x#0 = $32
Constant (const signed word) main::p0_y#0 = $32
Constant (const signed word) main::p1a_x#0 = $64
Constant (const signed word) main::p1a_y#0 = $32
Constant (const signed word) main::p1b_x#0 = $32
Constant (const signed word) main::p1b_y#0 = $64
Constant (const signed word) main::p2_x#0 = $64
Constant (const signed word) main::p2_y#0 = $64
Constant (const signed word) main::p3a_x#0 = $96
Constant (const signed word) main::p3a_y#0 = $64
Constant (const signed word) main::p3b_x#0 = $64
Constant (const signed word) main::p3b_y#0 = $96
Constant (const signed word) main::p4_x#0 = $96
Constant (const signed word) main::p4_y#0 = $96
Constant (const byte) splinePlot::n#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) bitmap_init::gfx#0 = BITMAP_GRAPHICS#0
Constant (const byte*) bitmap_init::screen#0 = BITMAP_SCREEN#0
Constant (const byte) bitmap_clear::bgcol#0 = BLACK#0
Constant (const byte) bitmap_clear::fgcol#0 = WHITE#0
Constant (const byte*) main::vicSelectGfxBank1_gfx#0 = BITMAP_SCREEN#0
Constant (const byte*) main::toD0181_screen#0 = BITMAP_SCREEN#0
Constant (const byte*) main::toD0181_gfx#0 = BITMAP_GRAPHICS#0
Constant (const signed word) splinePlot::p0_x#0 = main::p0_x#0
Constant (const signed word) splinePlot::p0_y#0 = main::p0_y#0
Constant (const signed word) splinePlot::p1_x#0 = main::p1a_x#0
Constant (const signed word) splinePlot::p1_y#0 = main::p1a_y#0
Constant (const signed word) splinePlot::p2_x#0 = main::p2_x#0
Constant (const signed word) splinePlot::p2_y#0 = main::p2_y#0
Constant (const signed word) splinePlot::p0_x#1 = main::p2_x#0
Constant (const signed word) splinePlot::p0_y#1 = main::p2_y#0
Constant (const signed word) splinePlot::p1_x#1 = main::p3a_x#0
Constant (const signed word) splinePlot::p1_y#1 = main::p3a_y#0
Constant (const signed word) splinePlot::p2_x#1 = main::p4_x#0
Constant (const signed word) splinePlot::p2_y#1 = main::p4_y#0
Constant (const signed word) splinePlot::p0_x#2 = main::p2_x#0
Constant (const signed word) splinePlot::p0_y#2 = main::p2_y#0
Constant (const signed word) splinePlot::p1_x#2 = main::p1b_x#0
Constant (const signed word) splinePlot::p1_y#2 = main::p1b_y#0
Constant (const signed word) splinePlot::p2_x#2 = main::p0_x#0
Constant (const signed word) splinePlot::p2_y#2 = main::p0_y#0
Constant (const signed word) splinePlot::p0_x#3 = main::p4_x#0
Constant (const signed word) splinePlot::p0_y#3 = main::p4_y#0
Constant (const signed word) splinePlot::p1_x#3 = main::p3b_x#0
Constant (const signed word) splinePlot::p1_y#3 = main::p3b_y#0
Constant (const signed word) splinePlot::p2_x#3 = main::p2_x#0
Constant (const signed word) splinePlot::p2_y#3 = main::p2_y#0
Constant (const byte*) print_dword_at::at#0 = SCREEN#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_word_at::at#0 = print_dword_at::at#0
Constant (const byte*) bitmap_gfx#1 = bitmap_init::gfx#0
Constant (const byte*) bitmap_screen#1 = bitmap_init::screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (void*)bitmap_screen#1 in [147] (void*) memset::str#0 ← (void*)(const byte*) bitmap_screen#1
Constant value identified (void*)bitmap_gfx#1 in [153] (void*) memset::str#1 ← (void*)(const byte*) bitmap_gfx#1
Constant value identified (word)main::vicSelectGfxBank1_gfx#0 in [188] (word~) main::vicSelectGfxBank1_toDd001_$0#0 ← (word)(const byte*) main::vicSelectGfxBank1_gfx#0
Constant value identified (word)main::toD0181_screen#0 in [202] (word~) main::toD0181_$0#0 ← (word)(const byte*) main::toD0181_screen#0
Constant value identified (word)main::toD0181_gfx#0 in [206] (word~) main::toD0181_$4#0 ← (word)(const byte*) main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [113] bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [115] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (number) 0
Resolved ranged next value [133] bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [135] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to (number) 0
Resolved ranged next value [345] splinePlot::n#1 ← ++ splinePlot::n#2 to ++
Resolved ranged comparison value [347] if(splinePlot::n#1!=rangelast(0,$10)) goto splinePlot::@1 to (number) $11
Simplifying expression containing zero CIA_TIMER_CONTROL_CONTINUOUS#0 in [23] (byte~) clock_start::$0 ← (const byte) CIA_TIMER_CONTROL_STOP#0 | (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0
Simplifying expression containing zero clock_start::$0 in [24] (byte~) clock_start::$1 ← (byte~) clock_start::$0 | (const byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0
Simplifying expression containing zero CIA_TIMER_CONTROL_START#0 in [30] (byte~) clock_start::$4 ← (const byte) CIA_TIMER_CONTROL_START#0 | (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0
Simplifying expression containing zero clock_start::$6 in [34] (byte~) clock_start::$7 ← (byte~) clock_start::$6 | (const byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0
Simplifying expression containing zero bitmap_clear::$0 in [145] (byte) bitmap_clear::col#0 ← (byte~) bitmap_clear::$0 + (const byte) bitmap_clear::bgcol#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [79] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [82] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const byte) bitmap_clear::bgcol#0
Eliminating unused constant (const byte) CIA_TIMER_CONTROL_STOP#0
Eliminating unused constant (const byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES#0
Eliminating unused constant (const byte*) bitmap_screen#0
Eliminating unused constant (const byte*) bitmap_gfx#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) BLACK#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in if((byte) bitmap_init::x#1!=(number) 0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in if((byte) bitmap_init::y#1!=(number) 0) goto bitmap_init::@5
Adding number conversion cast (unumber) $11 in if((byte) splinePlot::n#1!=(number) $11) goto splinePlot::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$3
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $11
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $11
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) clock_start::$1 = (byte~) clock_start::$0 (byte~) clock_start::$2 
Alias (byte~) clock_start::$6 = (byte~) clock_start::$4 (byte~) clock_start::$7 
Alias (byte~) bitmap_init::$7 = (byte~) bitmap_init::$3 
Alias (byte) bitmap_clear::col#0 = (byte~) bitmap_clear::$0 
Alias (signed word~) splinePlot::$6 = (signed word~) splinePlot::$0 
Alias (signed word~) splinePlot::$9 = (signed word~) splinePlot::$3 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [27] (byte*) print_word_at::at#1 ← (const byte*) print_dword_at::at#0 + (byte) 4
Constant right-side identified [74] (byte) bitmap_clear::col#0 ← (const byte) bitmap_clear::fgcol#0 * (byte) $10
Constant right-side identified [107] (byte~) main::$4 ← (const byte) VIC_BMM#0 | (const byte) VIC_DEN#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) clock_start::$1 = CIA_TIMER_CONTROL_CONTINUOUS#0
Constant (const byte) clock_start::$6 = CIA_TIMER_CONTROL_START#0
Constant (const byte*) print_word_at::at#1 = print_dword_at::at#0+4
Constant (const byte) bitmap_clear::col#0 = bitmap_clear::fgcol#0*$10
Constant (const void*) memset::str#0 = (void*)bitmap_screen#1
Constant (const void*) memset::str#1 = (void*)bitmap_gfx#1
Constant (const word) main::vicSelectGfxBank1_toDd001_$0#0 = (word)main::vicSelectGfxBank1_gfx#0
Constant (const word) main::toD0181_$0#0 = (word)main::toD0181_screen#0
Constant (const word) main::toD0181_$4#0 = (word)main::toD0181_gfx#0
Constant (const byte) main::$4 = VIC_BMM#0|VIC_DEN#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#0 = bitmap_clear::col#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 in [6] (byte~) clock_start::$3 ← (const byte) clock_start::$1 | (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant right-side identified [6] (byte~) clock_start::$5 ← (const byte) clock_start::$6 | (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
Constant right-side identified [79] (byte~) main::vicSelectGfxBank1_toDd001_$1#0 ← > (const word) main::vicSelectGfxBank1_toDd001_$0#0
Constant right-side identified [83] (word~) main::toD0181_$1#0 ← (const word) main::toD0181_$0#0 & (word) $3fff
Constant right-side identified [86] (byte~) main::toD0181_$5#0 ← > (const word) main::toD0181_$4#0
Constant right-side identified [91] (byte~) main::$5 ← (const byte) main::$4 | (const byte) VIC_RSEL#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) clock_start::$3 = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
Constant (const byte) clock_start::$5 = clock_start::$6|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
Constant (const byte) main::vicSelectGfxBank1_toDd001_$1#0 = >main::vicSelectGfxBank1_toDd001_$0#0
Constant (const word) main::toD0181_$1#0 = main::toD0181_$0#0&$3fff
Constant (const byte) main::toD0181_$5#0 = >main::toD0181_$4#0
Constant (const byte) main::$5 = main::$4|VIC_RSEL#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [77] (byte~) main::vicSelectGfxBank1_toDd001_$2#0 ← (const byte) main::vicSelectGfxBank1_toDd001_$1#0 / (byte) $40
Constant right-side identified [80] (word~) main::toD0181_$2#0 ← (const word) main::toD0181_$1#0 * (byte) 4
Constant right-side identified [82] (byte~) main::toD0181_$6#0 ← (const byte) main::toD0181_$5#0 / (byte) 4
Constant right-side identified [86] (byte~) main::$6 ← (const byte) main::$5 | (byte) 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::vicSelectGfxBank1_toDd001_$2#0 = main::vicSelectGfxBank1_toDd001_$1#0/$40
Constant (const word) main::toD0181_$2#0 = main::toD0181_$1#0*4
Constant (const byte) main::toD0181_$6#0 = main::toD0181_$5#0/4
Constant (const byte) main::$6 = main::$5|3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [77] (byte) main::vicSelectGfxBank1_toDd001_return#0 ← (byte) 3 ^ (const byte) main::vicSelectGfxBank1_toDd001_$2#0
Constant right-side identified [79] (byte~) main::toD0181_$3#0 ← > (const word) main::toD0181_$2#0
Constant right-side identified [80] (byte~) main::toD0181_$7#0 ← (const byte) main::toD0181_$6#0 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::vicSelectGfxBank1_toDd001_return#0 = 3^main::vicSelectGfxBank1_toDd001_$2#0
Constant (const byte) main::toD0181_$3#0 = >main::toD0181_$2#0
Constant (const byte) main::toD0181_$7#0 = main::toD0181_$6#0&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [78] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$3#0 | (const byte) main::toD0181_$7#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_return#0 = main::toD0181_$3#0|main::toD0181_$7#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [36] (byte*~) memset::$2 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [38] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [68] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$3 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [93] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 * (signed byte) 2
Rewriting multiplication to use shift [96] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 * (signed byte) 2
Rewriting multiplication to use shift [99] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 * (signed byte) 2
Rewriting multiplication to use shift [101] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 * (signed byte) 2
Rewriting multiplication to use shift [104] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 * (signed word) $100
Rewriting multiplication to use shift [106] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 * (signed word) $100
Rewriting multiplication to use shift [107] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 * (signed byte) $10
Rewriting multiplication to use shift [110] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 * (signed word) $100
Rewriting multiplication to use shift [112] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 * (signed word) $100
Rewriting multiplication to use shift [113] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 * (signed byte) $10
Rewriting multiplication to use shift [116] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 * (signed word) $100
Rewriting multiplication to use shift [117] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 * (signed byte) 2
Rewriting multiplication to use shift [119] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 * (signed word) $100
Rewriting multiplication to use shift [120] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 * (signed byte) 2
Rewriting multiplication to use shift [122] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 * (signed dword) $10000
Rewriting multiplication to use shift [124] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 * (signed dword) $10000
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) print_word_at::at#0
Inlining constant with var siblings (const byte*) print_word_at::at#1
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) splinePlot::n#0
Inlining constant with var siblings (const signed word) splinePlot::p0_x#0
Inlining constant with var siblings (const signed word) splinePlot::p0_y#0
Inlining constant with var siblings (const signed word) splinePlot::p1_x#0
Inlining constant with var siblings (const signed word) splinePlot::p1_y#0
Inlining constant with var siblings (const signed word) splinePlot::p2_x#0
Inlining constant with var siblings (const signed word) splinePlot::p2_y#0
Inlining constant with var siblings (const signed word) splinePlot::p0_x#1
Inlining constant with var siblings (const signed word) splinePlot::p0_y#1
Inlining constant with var siblings (const signed word) splinePlot::p1_x#1
Inlining constant with var siblings (const signed word) splinePlot::p1_y#1
Inlining constant with var siblings (const signed word) splinePlot::p2_x#1
Inlining constant with var siblings (const signed word) splinePlot::p2_y#1
Inlining constant with var siblings (const signed word) splinePlot::p0_x#2
Inlining constant with var siblings (const signed word) splinePlot::p0_y#2
Inlining constant with var siblings (const signed word) splinePlot::p1_x#2
Inlining constant with var siblings (const signed word) splinePlot::p1_y#2
Inlining constant with var siblings (const signed word) splinePlot::p2_x#2
Inlining constant with var siblings (const signed word) splinePlot::p2_y#2
Inlining constant with var siblings (const signed word) splinePlot::p0_x#3
Inlining constant with var siblings (const signed word) splinePlot::p0_y#3
Inlining constant with var siblings (const signed word) splinePlot::p1_x#3
Inlining constant with var siblings (const signed word) splinePlot::p1_y#3
Inlining constant with var siblings (const signed word) splinePlot::p2_x#3
Inlining constant with var siblings (const signed word) splinePlot::p2_y#3
Constant inlined bitmap_init::screen#0 = (const byte*) BITMAP_SCREEN#0
Constant inlined bitmap_init::gfx#0 = (const byte*) BITMAP_GRAPHICS#0
Constant inlined splinePlot::p2_x#1 = (const signed word) main::p4_x#0
Constant inlined splinePlot::p2_x#0 = (const signed word) main::p2_x#0
Constant inlined memset::num#1 = (word) $1f40
Constant inlined memset::num#0 = (word) $3e8
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined clock_start::$5 = (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
Constant inlined clock_start::$6 = (const byte) CIA_TIMER_CONTROL_START#0
Constant inlined clock_start::$3 = (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
Constant inlined splinePlot::p2_x#3 = (const signed word) main::p2_x#0
Constant inlined splinePlot::p2_x#2 = (const signed word) main::p0_x#0
Constant inlined print_dword_at::at#0 = (const byte*) SCREEN#0
Constant inlined splinePlot::p1_x#3 = (const signed word) main::p3b_x#0
Constant inlined splinePlot::p1_x#0 = (const signed word) main::p1a_x#0
Constant inlined splinePlot::p1_x#2 = (const signed word) main::p1b_x#0
Constant inlined splinePlot::p1_x#1 = (const signed word) main::p3a_x#0
Constant inlined main::vicSelectGfxBank1_toDd001_$1#0 = >(word)(const byte*) BITMAP_SCREEN#0
Constant inlined bitmap_gfx#1 = (const byte*) BITMAP_GRAPHICS#0
Constant inlined main::toD0181_$1#0 = (word)(const byte*) BITMAP_SCREEN#0&(word) $3fff
Constant inlined splinePlot::p0_x#3 = (const signed word) main::p4_x#0
Constant inlined splinePlot::p0_x#2 = (const signed word) main::p2_x#0
Constant inlined splinePlot::p0_x#1 = (const signed word) main::p2_x#0
Constant inlined splinePlot::p0_x#0 = (const signed word) main::p0_x#0
Constant inlined main::toD0181_$7#0 = >(word)(const byte*) BITMAP_GRAPHICS#0/(byte) 4&(byte) $f
Constant inlined main::toD0181_$3#0 = >(word)(const byte*) BITMAP_SCREEN#0&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$5#0 = >(word)(const byte*) BITMAP_GRAPHICS#0
Constant inlined memset::c#0 = (const byte) bitmap_clear::col#0
Constant inlined bitmap_init::x#0 = (byte) 0
Constant inlined memset::c#1 = (byte) 0
Constant inlined main::toD0181_screen#0 = (const byte*) BITMAP_SCREEN#0
Constant inlined main::toD0181_gfx#0 = (const byte*) BITMAP_GRAPHICS#0
Constant inlined splinePlot::p2_y#0 = (const signed word) main::p2_y#0
Constant inlined bitmap_init::bits#0 = (byte) $80
Constant inlined splinePlot::p2_y#3 = (const signed word) main::p2_y#0
Constant inlined bitmap_init::bits#2 = (byte) $80
Constant inlined splinePlot::p2_y#2 = (const signed word) main::p0_y#0
Constant inlined splinePlot::p2_y#1 = (const signed word) main::p4_y#0
Constant inlined splinePlot::p1_y#3 = (const signed word) main::p3b_y#0
Constant inlined splinePlot::p1_y#2 = (const signed word) main::p1b_y#0
Constant inlined splinePlot::p1_y#1 = (const signed word) main::p3a_y#0
Constant inlined splinePlot::p1_y#0 = (const signed word) main::p1a_y#0
Constant inlined main::vicSelectGfxBank1_toDd001_$2#0 = >(word)(const byte*) BITMAP_SCREEN#0/(byte) $40
Constant inlined memset::str#1 = (void*)(const byte*) BITMAP_GRAPHICS#0
Constant inlined memset::str#0 = (void*)(const byte*) BITMAP_SCREEN#0
Constant inlined splinePlot::n#0 = (byte) 0
Constant inlined main::vicSelectGfxBank1_toDd001_$0#0 = (word)(const byte*) BITMAP_SCREEN#0
Constant inlined main::toD0181_$0#0 = (word)(const byte*) BITMAP_SCREEN#0
Constant inlined bitmap_clear::fgcol#0 = (const byte) WHITE#0
Constant inlined splinePlot::p0_y#3 = (const signed word) main::p4_y#0
Constant inlined splinePlot::p0_y#2 = (const signed word) main::p2_y#0
Constant inlined splinePlot::p0_y#1 = (const signed word) main::p2_y#0
Constant inlined splinePlot::p0_y#0 = (const signed word) main::p0_y#0
Constant inlined clock_start::$1 = (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0
Constant inlined main::toD0181_$6#0 = >(word)(const byte*) BITMAP_GRAPHICS#0/(byte) 4
Constant inlined bitmap_screen#1 = (const byte*) BITMAP_SCREEN#0
Constant inlined main::toD0181_$2#0 = (word)(const byte*) BITMAP_SCREEN#0&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$4#0 = (word)(const byte*) BITMAP_GRAPHICS#0
Constant inlined main::vicSelectGfxBank1_gfx#0 = (const byte*) BITMAP_SCREEN#0
Constant inlined main::$5 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined bitmap_init::y#0 = (byte) 0
Constant inlined main::$6 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3
Constant inlined print_word_at::at#1 = (const byte*) SCREEN#0+(byte) 4
Constant inlined print_word_at::at#0 = (const byte*) SCREEN#0
Constant inlined main::$4 = (const byte) VIC_BMM#0|(const byte) VIC_DEN#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting memset::@6(between memset::@4 and memset::@4)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@12(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting splinePlot::@4(between splinePlot::@3 and splinePlot::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @20
Adding NOP phi() at start of @31
Adding NOP phi() at start of @37
Adding NOP phi() at start of @41
Adding NOP phi() at start of @42
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of print_dword_at::@2
Adding NOP phi() at start of print_word_at::@2
Adding NOP phi() at start of print_byte_at::@2
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_clear::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to bitmap_init:10 bitmap_clear:12 clock_start:23 splinePlot:25 splinePlot:27 splinePlot:29 splinePlot:31 clock:33 print_dword_at:38 
Calls in [print_dword_at] to print_word_at:43 print_word_at:46 
Calls in [print_word_at] to print_byte_at:54 print_byte_at:59 
Calls in [print_byte_at] to print_char_at:68 print_char_at:74 
Calls in [splinePlot] to bitmap_plot:123 
Calls in [bitmap_clear] to memset:149 memset:151 

Created 27 initial phi equivalence classes
Coalesced [42] print_word_at::w#4 ← print_word_at::w#0
Coalesced [45] print_word_at::w#5 ← print_word_at::w#1
Coalesced [52] print_byte_at::b#4 ← print_byte_at::b#0
Coalesced [53] print_byte_at::at#4 ← print_byte_at::at#0
Coalesced [57] print_byte_at::b#5 ← print_byte_at::b#1
Coalesced [58] print_byte_at::at#5 ← print_byte_at::at#1
Coalesced [66] print_char_at::ch#3 ← print_char_at::ch#0
Coalesced [67] print_char_at::at#3 ← print_char_at::at#0
Coalesced [72] print_char_at::ch#4 ← print_char_at::ch#1
Coalesced [73] print_char_at::at#4 ← print_char_at::at#1
Coalesced [115] splinePlot::p_x#4 ← splinePlot::p_x#0
Coalesced [116] splinePlot::p_y#4 ← splinePlot::p_y#0
Coalesced [117] splinePlot::i_x#4 ← splinePlot::i_x#0
Coalesced [118] splinePlot::i_y#4 ← splinePlot::i_y#0
Coalesced [131] splinePlot::p_x#5 ← splinePlot::p_x#1
Coalesced [132] splinePlot::p_y#5 ← splinePlot::p_y#1
Coalesced [133] splinePlot::i_x#5 ← splinePlot::i_x#1
Coalesced [134] splinePlot::i_y#5 ← splinePlot::i_y#1
Coalesced [135] splinePlot::n#4 ← splinePlot::n#1
Coalesced [164] memset::dst#4 ← memset::dst#1
Coalesced [184] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [189] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [190] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [191] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [192] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [193] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [194] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced down to 25 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @20
Culled Empty Block (label) @31
Culled Empty Block (label) @37
Culled Empty Block (label) @42
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@11
Culled Empty Block (label) print_dword_at::@2
Culled Empty Block (label) print_word_at::@2
Culled Empty Block (label) print_byte_at::@2
Culled Empty Block (label) splinePlot::@4
Culled Empty Block (label) bitmap_clear::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memset::@6
Culled Empty Block (label) bitmap_init::@3
Culled Empty Block (label) bitmap_init::@4
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@12
Culled Empty Block (label) bitmap_init::@9
Renumbering block @41 to @1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@10 to bitmap_init::@6
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@5 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Renumbering block main::@9 to main::@7
Renumbering block main::@10 to main::@8
Renumbering block splinePlot::@3 to splinePlot::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call bitmap_init 
  to:main::@2
main::@2: scope:[main]  from main
  [6] phi()
  [7] call bitmap_clear 
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@2
  [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [9] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [11] phi()
  to:main::@1
main::@1: scope:[main]  from main::toD0181
  [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [13] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3
  [14] call clock_start 
  to:main::@3
main::@3: scope:[main]  from main::@1
  [15] phi()
  [16] call splinePlot 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] phi()
  [18] call splinePlot 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [19] phi()
  [20] call splinePlot 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] phi()
  [22] call splinePlot 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] phi()
  [24] call clock 
  [25] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@8
main::@8: scope:[main]  from main::@7
  [26] (dword~) main::$12 ← (dword) clock::return#2
  [27] (dword) main::cyclecount#0 ← (dword~) main::$12 - (const dword) CLOCKS_PER_INIT#0
  [28] (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0
  [29] call print_dword_at 
  to:main::@return
main::@return: scope:[main]  from main::@8
  [30] return 
  to:@return
print_dword_at: scope:[print_dword_at]  from main::@8
  [31] (word) print_word_at::w#0 ← > (dword) print_dword_at::dw#0
  [32] call print_word_at 
  to:print_dword_at::@1
print_dword_at::@1: scope:[print_dword_at]  from print_dword_at
  [33] (word) print_word_at::w#1 ← < (dword) print_dword_at::dw#0
  [34] call print_word_at 
  to:print_dword_at::@return
print_dword_at::@return: scope:[print_dword_at]  from print_dword_at::@1
  [35] return 
  to:@return
print_word_at: scope:[print_word_at]  from print_dword_at print_dword_at::@1
  [36] (byte*) print_word_at::at#2 ← phi( print_dword_at/(const byte*) SCREEN#0 print_dword_at::@1/(const byte*) SCREEN#0+(byte) 4 )
  [36] (word) print_word_at::w#2 ← phi( print_dword_at/(word) print_word_at::w#0 print_dword_at::@1/(word) print_word_at::w#1 )
  [37] (byte) print_byte_at::b#0 ← > (word) print_word_at::w#2
  [38] (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2
  [39] call print_byte_at 
  to:print_word_at::@1
print_word_at::@1: scope:[print_word_at]  from print_word_at
  [40] (byte) print_byte_at::b#1 ← < (word) print_word_at::w#2
  [41] (byte*) print_byte_at::at#1 ← (byte*) print_word_at::at#2 + (byte) 2
  [42] call print_byte_at 
  to:print_word_at::@return
print_word_at::@return: scope:[print_word_at]  from print_word_at::@1
  [43] return 
  to:@return
print_byte_at: scope:[print_byte_at]  from print_word_at print_word_at::@1
  [44] (byte*) print_byte_at::at#2 ← phi( print_word_at/(byte*) print_byte_at::at#0 print_word_at::@1/(byte*) print_byte_at::at#1 )
  [44] (byte) print_byte_at::b#2 ← phi( print_word_at/(byte) print_byte_at::b#0 print_word_at::@1/(byte) print_byte_at::b#1 )
  [45] (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (byte) 4
  [46] (byte) print_char_at::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0)
  [47] (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2
  [48] call print_char_at 
  to:print_byte_at::@1
print_byte_at::@1: scope:[print_byte_at]  from print_byte_at
  [49] (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte) $f
  [50] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#2 + (byte) 1
  [51] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2)
  [52] call print_char_at 
  to:print_byte_at::@return
print_byte_at::@return: scope:[print_byte_at]  from print_byte_at::@1
  [53] return 
  to:@return
print_char_at: scope:[print_char_at]  from print_byte_at print_byte_at::@1
  [54] (byte*) print_char_at::at#2 ← phi( print_byte_at/(byte*) print_char_at::at#0 print_byte_at::@1/(byte*) print_char_at::at#1 )
  [54] (byte) print_char_at::ch#2 ← phi( print_byte_at/(byte) print_char_at::ch#0 print_byte_at::@1/(byte) print_char_at::ch#1 )
  [55] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [56] return 
  to:@return
clock: scope:[clock]  from main::@7
  [57] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [58] return 
  to:@return
splinePlot: scope:[splinePlot]  from main::@3 main::@4 main::@5 main::@6
  [59] (signed word) splinePlot::p0_y#4 ← phi( main::@3/(const signed word) main::p0_y#0 main::@4/(const signed word) main::p2_y#0 main::@5/(const signed word) main::p2_y#0 main::@6/(const signed word) main::p4_y#0 )
  [59] (signed word) splinePlot::p2_y#4 ← phi( main::@3/(const signed word) main::p2_y#0 main::@4/(const signed word) main::p4_y#0 main::@5/(const signed word) main::p0_y#0 main::@6/(const signed word) main::p2_y#0 )
  [59] (signed word) splinePlot::p1_y#4 ← phi( main::@3/(const signed word) main::p1a_y#0 main::@4/(const signed word) main::p3a_y#0 main::@5/(const signed word) main::p1b_y#0 main::@6/(const signed word) main::p3b_y#0 )
  [59] (signed word) splinePlot::p0_x#4 ← phi( main::@3/(const signed word) main::p0_x#0 main::@4/(const signed word) main::p2_x#0 main::@5/(const signed word) main::p2_x#0 main::@6/(const signed word) main::p4_x#0 )
  [59] (signed word) splinePlot::p2_x#4 ← phi( main::@3/(const signed word) main::p2_x#0 main::@4/(const signed word) main::p4_x#0 main::@5/(const signed word) main::p0_x#0 main::@6/(const signed word) main::p2_x#0 )
  [59] (signed word) splinePlot::p1_x#4 ← phi( main::@3/(const signed word) main::p1a_x#0 main::@4/(const signed word) main::p3a_x#0 main::@5/(const signed word) main::p1b_x#0 main::@6/(const signed word) main::p3b_x#0 )
  [60] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 << (byte) 1
  [61] (signed word~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$6
  [62] (signed word) splinePlot::a_x#0 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4
  [63] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 << (byte) 1
  [64] (signed word~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$9
  [65] (signed word) splinePlot::a_y#0 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4
  [66] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 << (byte) 1
  [67] (signed word) splinePlot::b_x#0 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7
  [68] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 << (byte) 1
  [69] (signed word) splinePlot::b_y#0 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10
  [70] (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0
  [71] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 << (byte) 8
  [72] (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0
  [73] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 << (byte) 8
  [74] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 << (byte) 4
  [75] (signed dword) splinePlot::i_x#0 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16
  [76] (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0
  [77] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 << (byte) 8
  [78] (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0
  [79] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 << (byte) 8
  [80] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 << (byte) 4
  [81] (signed dword) splinePlot::i_y#0 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22
  [82] (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0
  [83] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 << (byte) 8
  [84] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 << (byte) 1
  [85] (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0
  [86] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 << (byte) 8
  [87] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 << (byte) 1
  [88] (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4
  [89] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 << (byte) $10
  [90] (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4
  [91] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 << (byte) $10
  to:splinePlot::@1
splinePlot::@1: scope:[splinePlot]  from splinePlot splinePlot::@2
  [92] (byte) splinePlot::n#2 ← phi( splinePlot/(byte) 0 splinePlot::@2/(byte) splinePlot::n#1 )
  [92] (signed dword) splinePlot::i_y#2 ← phi( splinePlot/(signed dword) splinePlot::i_y#0 splinePlot::@2/(signed dword) splinePlot::i_y#1 )
  [92] (signed dword) splinePlot::i_x#2 ← phi( splinePlot/(signed dword) splinePlot::i_x#0 splinePlot::@2/(signed dword) splinePlot::i_x#1 )
  [92] (signed dword) splinePlot::p_y#2 ← phi( splinePlot/(signed dword) splinePlot::p_y#0 splinePlot::@2/(signed dword) splinePlot::p_y#1 )
  [92] (signed dword) splinePlot::p_x#2 ← phi( splinePlot/(signed dword) splinePlot::p_x#0 splinePlot::@2/(signed dword) splinePlot::p_x#1 )
  [93] (word) bitmap_plot::x#0 ← > (signed dword) splinePlot::p_x#2
  [94] (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2
  [95] (byte) bitmap_plot::y#0 ← < (word~) splinePlot::$35
  [96] call bitmap_plot 
  to:splinePlot::@2
splinePlot::@2: scope:[splinePlot]  from splinePlot::@1
  [97] (signed dword) splinePlot::p_x#1 ← (signed dword) splinePlot::p_x#2 + (signed dword) splinePlot::i_x#2
  [98] (signed dword) splinePlot::p_y#1 ← (signed dword) splinePlot::p_y#2 + (signed dword) splinePlot::i_y#2
  [99] (signed dword) splinePlot::i_x#1 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#0
  [100] (signed dword) splinePlot::i_y#1 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#0
  [101] (byte) splinePlot::n#1 ← ++ (byte) splinePlot::n#2
  [102] if((byte) splinePlot::n#1!=(byte) $11) goto splinePlot::@1
  to:splinePlot::@return
splinePlot::@return: scope:[splinePlot]  from splinePlot::@2
  [103] return 
  to:@return
bitmap_plot: scope:[bitmap_plot]  from splinePlot::@1
  [104] (word) bitmap_plot::plotter#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0)
  [105] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word) $fff8
  [106] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1
  [107] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0
  [108] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [109] return 
  to:@return
clock_start: scope:[clock_start]  from main::@1
  [110] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0
  [111] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
  [112] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff
  [113] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
  [114] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [115] return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@2
  [116] phi()
  [117] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [118] phi()
  [119] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [120] return 
  to:@return
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [121] (byte) memset::c#3 ← phi( bitmap_clear/(const byte) bitmap_clear::col#0 bitmap_clear::@1/(byte) 0 )
  [121] (void*) memset::str#3 ← phi( bitmap_clear/(void*)(const byte*) BITMAP_SCREEN#0 bitmap_clear::@1/(void*)(const byte*) BITMAP_GRAPHICS#0 )
  [121] (word) memset::num#2 ← phi( bitmap_clear/(word) $3e8 bitmap_clear::@1/(word) $1f40 )
  [122] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [123] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [124] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@2
  [125] (byte*) memset::dst#2 ← phi( memset::@1/(byte*~) memset::dst#3 memset::@2/(byte*) memset::dst#1 )
  [126] *((byte*) memset::dst#2) ← (byte) memset::c#3
  [127] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  [128] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [129] return 
  to:@return
bitmap_init: scope:[bitmap_init]  from main
  [130] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [131] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [131] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [132] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [133] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [134] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [135] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [136] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [137] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [138] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [139] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(const byte*) BITMAP_GRAPHICS#0 bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [139] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [140] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
  [141] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [142] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4
  [143] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [144] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [145] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [146] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [147] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [148] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [149] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [150] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [151] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BITMAP_GRAPHICS
(byte*) BITMAP_SCREEN
(byte) BLACK
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(dword*) CIA2_TIMER_AB
(byte*) CIA2_TIMER_A_CONTROL
(byte*) CIA2_TIMER_B_CONTROL
(byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
(byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
(byte) CIA_TIMER_CONTROL_CONTINUOUS
(byte) CIA_TIMER_CONTROL_START
(byte) CIA_TIMER_CONTROL_STOP
(dword) CLOCKS_PER_INIT
(byte*) D011
(byte*) D018
(byte*) SCREEN
(signed word) SplineVector16::x
(signed word) SplineVector16::y
(signed dword) SplineVector32::x
(signed dword) SplineVector32::y
(byte) VIC_BMM
(byte) VIC_DEN
(byte) VIC_RSEL
(byte) WHITE
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 22.0
(byte~) bitmap_init::$5 22.0
(byte~) bitmap_init::$6 22.0
(byte~) bitmap_init::$7 5.5
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 11.0
(byte) bitmap_init::bits#3 16.5
(byte) bitmap_init::bits#4 7.333333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 16.5
(byte) bitmap_init::x#2 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 16.5
(byte) bitmap_init::y#2 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 22.0
(byte*) bitmap_init::yoffs#2 6.875
(byte*) bitmap_init::yoffs#4 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 4.0
(byte~) bitmap_plot::$2 4.0
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 1.0
(byte*) bitmap_plot::plotter#1 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 2.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 15.0
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_ylo
(byte*) bitmap_screen
(dword()) clock()
(dword) clock::return
(dword) clock::return#0 1.3333333333333333
(dword) clock::return#2 4.0
(void()) clock_start()
(void()) main()
(dword~) main::$12 4.0
(dword) main::cyclecount
(dword) main::cyclecount#0 4.0
(signed word) main::p0_x
(signed word) main::p0_y
(signed word) main::p1a_x
(signed word) main::p1a_y
(signed word) main::p1b_x
(signed word) main::p1b_y
(signed word) main::p2_x
(signed word) main::p2_y
(signed word) main::p3a_x
(signed word) main::p3a_y
(signed word) main::p3b_x
(signed word) main::p3b_y
(signed word) main::p4_x
(signed word) main::p4_y
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte~) main::vicSelectGfxBank1_$0
(byte*) main::vicSelectGfxBank1_gfx
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(number~) main::vicSelectGfxBank1_toDd001_$2
(number~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#3 1.375
(byte*) memset::dst
(byte*) memset::dst#1 16.5
(byte*) memset::dst#2 17.5
(byte*~) memset::dst#3 4.0
(byte*) memset::end
(byte*) memset::end#0 2.1666666666666665
(word) memset::num
(word) memset::num#2 2.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0 4.0
(byte~) print_byte_at::$2 2.0
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0 4.0
(byte*) print_byte_at::at#1 4.0
(byte*) print_byte_at::at#2 1.3333333333333333
(byte) print_byte_at::b
(byte) print_byte_at::b#0 2.0
(byte) print_byte_at::b#1 2.0
(byte) print_byte_at::b#2 1.6
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(byte*) print_char_at::at
(byte*) print_char_at::at#0 4.0
(byte*) print_char_at::at#1 2.0
(byte*) print_char_at::at#2 6.0
(byte) print_char_at::ch
(byte) print_char_at::ch#0 2.0
(byte) print_char_at::ch#1 4.0
(byte) print_char_at::ch#2 6.0
(void()) print_dword_at((dword) print_dword_at::dw , (byte*) print_dword_at::at)
(byte*) print_dword_at::at
(dword) print_dword_at::dw
(dword) print_dword_at::dw#0 2.0
(byte[]) print_hextab
(void()) print_word_at((word) print_word_at::w , (byte*) print_word_at::at)
(byte*) print_word_at::at
(byte*) print_word_at::at#2 0.8
(word) print_word_at::w
(word) print_word_at::w#0 4.0
(word) print_word_at::w#1 4.0
(word) print_word_at::w#2 2.0
(void()) splinePlot((signed word) splinePlot::p0_x , (signed word) splinePlot::p0_y , (signed word) splinePlot::p1_x , (signed word) splinePlot::p1_y , (signed word) splinePlot::p2_x , (signed word) splinePlot::p2_y)
(signed word~) splinePlot::$1 4.0
(signed word~) splinePlot::$10 4.0
(signed dword~) splinePlot::$12 4.0
(signed dword~) splinePlot::$13 1.0
(signed dword~) splinePlot::$14 4.0
(signed dword~) splinePlot::$15 4.0
(signed dword~) splinePlot::$16 4.0
(signed dword~) splinePlot::$18 4.0
(signed dword~) splinePlot::$19 1.0
(signed dword~) splinePlot::$20 4.0
(signed dword~) splinePlot::$21 4.0
(signed dword~) splinePlot::$22 4.0
(signed dword~) splinePlot::$24 4.0
(signed dword~) splinePlot::$25 4.0
(signed dword~) splinePlot::$27 4.0
(signed dword~) splinePlot::$28 4.0
(signed dword~) splinePlot::$30 4.0
(signed dword~) splinePlot::$32 4.0
(word~) splinePlot::$35 22.0
(signed word~) splinePlot::$4 4.0
(signed word~) splinePlot::$6 0.8571428571428571
(signed word~) splinePlot::$7 4.0
(signed word~) splinePlot::$9 1.0
(signed word) splinePlot::a_x
(signed word) splinePlot::a_x#0 0.1
(signed word) splinePlot::a_y
(signed word) splinePlot::a_y#0 0.1
(signed word) splinePlot::b_x
(signed word) splinePlot::b_x#0 0.4
(signed word) splinePlot::b_y
(signed word) splinePlot::b_y#0 0.2222222222222222
(signed dword) splinePlot::i_x
(signed dword) splinePlot::i_x#0 0.23529411764705882
(signed dword) splinePlot::i_x#1 5.5
(signed dword) splinePlot::i_x#2 5.0
(signed dword) splinePlot::i_y
(signed dword) splinePlot::i_y#0 0.36363636363636365
(signed dword) splinePlot::i_y#1 7.333333333333333
(signed dword) splinePlot::i_y#2 4.375
(signed dword) splinePlot::j_x
(signed dword) splinePlot::j_x#0 0.6842105263157895
(signed dword) splinePlot::j_y
(signed dword) splinePlot::j_y#0 0.8125
(byte) splinePlot::n
(byte) splinePlot::n#1 16.5
(byte) splinePlot::n#2 2.4444444444444446
(struct SplineVector16) splinePlot::p0
(signed word) splinePlot::p0_x
(signed word) splinePlot::p0_x#4 0.13793103448275862
(signed word) splinePlot::p0_y
(signed word) splinePlot::p0_y#4 0.12903225806451613
(struct SplineVector16) splinePlot::p1
(signed word) splinePlot::p1_x
(signed word) splinePlot::p1_x#4 2.0
(signed word) splinePlot::p1_y
(signed word) splinePlot::p1_y#4 0.5
(struct SplineVector16) splinePlot::p2
(signed word) splinePlot::p2_x
(signed word) splinePlot::p2_x#4 1.0
(signed word) splinePlot::p2_y
(signed word) splinePlot::p2_y#4 0.4
(signed dword) splinePlot::p_x
(signed dword) splinePlot::p_x#0 1.3333333333333333
(signed dword) splinePlot::p_x#1 3.6666666666666665
(signed dword) splinePlot::p_x#2 7.000000000000001
(signed dword) splinePlot::p_y
(signed dword) splinePlot::p_y#0 4.0
(signed dword) splinePlot::p_y#1 4.4
(signed dword) splinePlot::p_y#2 5.833333333333333

Initial phi equivalence classes
[ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ]
[ print_word_at::at#2 ]
[ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
[ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ]
[ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
[ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
[ splinePlot::p1_x#4 ]
[ splinePlot::p2_x#4 ]
[ splinePlot::p0_x#4 ]
[ splinePlot::p1_y#4 ]
[ splinePlot::p2_y#4 ]
[ splinePlot::p0_y#4 ]
[ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ]
[ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ]
[ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ]
[ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ]
[ splinePlot::n#2 splinePlot::n#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#3 ]
[ memset::dst#2 memset::dst#3 memset::dst#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Added variable clock::return#2 to zero page equivalence class [ clock::return#2 ]
Added variable main::$12 to zero page equivalence class [ main::$12 ]
Added variable main::cyclecount#0 to zero page equivalence class [ main::cyclecount#0 ]
Added variable print_dword_at::dw#0 to zero page equivalence class [ print_dword_at::dw#0 ]
Added variable print_byte_at::$0 to zero page equivalence class [ print_byte_at::$0 ]
Added variable print_byte_at::$2 to zero page equivalence class [ print_byte_at::$2 ]
Added variable clock::return#0 to zero page equivalence class [ clock::return#0 ]
Added variable splinePlot::$6 to zero page equivalence class [ splinePlot::$6 ]
Added variable splinePlot::$1 to zero page equivalence class [ splinePlot::$1 ]
Added variable splinePlot::a_x#0 to zero page equivalence class [ splinePlot::a_x#0 ]
Added variable splinePlot::$9 to zero page equivalence class [ splinePlot::$9 ]
Added variable splinePlot::$4 to zero page equivalence class [ splinePlot::$4 ]
Added variable splinePlot::a_y#0 to zero page equivalence class [ splinePlot::a_y#0 ]
Added variable splinePlot::$7 to zero page equivalence class [ splinePlot::$7 ]
Added variable splinePlot::b_x#0 to zero page equivalence class [ splinePlot::b_x#0 ]
Added variable splinePlot::$10 to zero page equivalence class [ splinePlot::$10 ]
Added variable splinePlot::b_y#0 to zero page equivalence class [ splinePlot::b_y#0 ]
Added variable splinePlot::$12 to zero page equivalence class [ splinePlot::$12 ]
Added variable splinePlot::$13 to zero page equivalence class [ splinePlot::$13 ]
Added variable splinePlot::$14 to zero page equivalence class [ splinePlot::$14 ]
Added variable splinePlot::$15 to zero page equivalence class [ splinePlot::$15 ]
Added variable splinePlot::$16 to zero page equivalence class [ splinePlot::$16 ]
Added variable splinePlot::$18 to zero page equivalence class [ splinePlot::$18 ]
Added variable splinePlot::$19 to zero page equivalence class [ splinePlot::$19 ]
Added variable splinePlot::$20 to zero page equivalence class [ splinePlot::$20 ]
Added variable splinePlot::$21 to zero page equivalence class [ splinePlot::$21 ]
Added variable splinePlot::$22 to zero page equivalence class [ splinePlot::$22 ]
Added variable splinePlot::$24 to zero page equivalence class [ splinePlot::$24 ]
Added variable splinePlot::$25 to zero page equivalence class [ splinePlot::$25 ]
Added variable splinePlot::j_x#0 to zero page equivalence class [ splinePlot::j_x#0 ]
Added variable splinePlot::$27 to zero page equivalence class [ splinePlot::$27 ]
Added variable splinePlot::$28 to zero page equivalence class [ splinePlot::$28 ]
Added variable splinePlot::j_y#0 to zero page equivalence class [ splinePlot::j_y#0 ]
Added variable splinePlot::$30 to zero page equivalence class [ splinePlot::$30 ]
Added variable splinePlot::$32 to zero page equivalence class [ splinePlot::$32 ]
Added variable bitmap_plot::x#0 to zero page equivalence class [ bitmap_plot::x#0 ]
Added variable splinePlot::$35 to zero page equivalence class [ splinePlot::$35 ]
Added variable bitmap_plot::y#0 to zero page equivalence class [ bitmap_plot::y#0 ]
Added variable bitmap_plot::plotter#0 to zero page equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$1 to zero page equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_plot::plotter#1 to zero page equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$2 to zero page equivalence class [ bitmap_plot::$2 ]
Added variable memset::end#0 to zero page equivalence class [ memset::end#0 ]
Added variable bitmap_init::$7 to zero page equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$4 to zero page equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to zero page equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to zero page equivalence class [ bitmap_init::$6 ]
Complete equivalence classes
[ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ]
[ print_word_at::at#2 ]
[ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
[ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ]
[ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
[ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
[ splinePlot::p1_x#4 ]
[ splinePlot::p2_x#4 ]
[ splinePlot::p0_x#4 ]
[ splinePlot::p1_y#4 ]
[ splinePlot::p2_y#4 ]
[ splinePlot::p0_y#4 ]
[ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ]
[ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ]
[ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ]
[ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ]
[ splinePlot::n#2 splinePlot::n#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#3 ]
[ memset::dst#2 memset::dst#3 memset::dst#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ clock::return#2 ]
[ main::$12 ]
[ main::cyclecount#0 ]
[ print_dword_at::dw#0 ]
[ print_byte_at::$0 ]
[ print_byte_at::$2 ]
[ clock::return#0 ]
[ splinePlot::$6 ]
[ splinePlot::$1 ]
[ splinePlot::a_x#0 ]
[ splinePlot::$9 ]
[ splinePlot::$4 ]
[ splinePlot::a_y#0 ]
[ splinePlot::$7 ]
[ splinePlot::b_x#0 ]
[ splinePlot::$10 ]
[ splinePlot::b_y#0 ]
[ splinePlot::$12 ]
[ splinePlot::$13 ]
[ splinePlot::$14 ]
[ splinePlot::$15 ]
[ splinePlot::$16 ]
[ splinePlot::$18 ]
[ splinePlot::$19 ]
[ splinePlot::$20 ]
[ splinePlot::$21 ]
[ splinePlot::$22 ]
[ splinePlot::$24 ]
[ splinePlot::$25 ]
[ splinePlot::j_x#0 ]
[ splinePlot::$27 ]
[ splinePlot::$28 ]
[ splinePlot::j_y#0 ]
[ splinePlot::$30 ]
[ splinePlot::$32 ]
[ bitmap_plot::x#0 ]
[ splinePlot::$35 ]
[ bitmap_plot::y#0 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$1 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$2 ]
[ memset::end#0 ]
[ bitmap_init::$7 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
Allocated zp ZP_WORD:2 [ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ]
Allocated zp ZP_WORD:4 [ print_word_at::at#2 ]
Allocated zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
Allocated zp ZP_WORD:7 [ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ]
Allocated zp ZP_BYTE:9 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
Allocated zp ZP_WORD:10 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
Allocated zp ZP_WORD:12 [ splinePlot::p1_x#4 ]
Allocated zp ZP_WORD:14 [ splinePlot::p2_x#4 ]
Allocated zp ZP_WORD:16 [ splinePlot::p0_x#4 ]
Allocated zp ZP_WORD:18 [ splinePlot::p1_y#4 ]
Allocated zp ZP_WORD:20 [ splinePlot::p2_y#4 ]
Allocated zp ZP_WORD:22 [ splinePlot::p0_y#4 ]
Allocated zp ZP_DWORD:24 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ]
Allocated zp ZP_DWORD:28 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ]
Allocated zp ZP_DWORD:32 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ]
Allocated zp ZP_DWORD:36 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ]
Allocated zp ZP_BYTE:40 [ splinePlot::n#2 splinePlot::n#1 ]
Allocated zp ZP_WORD:41 [ memset::num#2 ]
Allocated zp ZP_WORD:43 [ memset::str#3 ]
Allocated zp ZP_BYTE:45 [ memset::c#3 ]
Allocated zp ZP_WORD:46 [ memset::dst#2 memset::dst#3 memset::dst#1 ]
Allocated zp ZP_BYTE:48 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp ZP_BYTE:49 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp ZP_BYTE:50 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp ZP_WORD:51 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp ZP_DWORD:53 [ clock::return#2 ]
Allocated zp ZP_DWORD:57 [ main::$12 ]
Allocated zp ZP_DWORD:61 [ main::cyclecount#0 ]
Allocated zp ZP_DWORD:65 [ print_dword_at::dw#0 ]
Allocated zp ZP_BYTE:69 [ print_byte_at::$0 ]
Allocated zp ZP_BYTE:70 [ print_byte_at::$2 ]
Allocated zp ZP_DWORD:71 [ clock::return#0 ]
Allocated zp ZP_WORD:75 [ splinePlot::$6 ]
Allocated zp ZP_WORD:77 [ splinePlot::$1 ]
Allocated zp ZP_WORD:79 [ splinePlot::a_x#0 ]
Allocated zp ZP_WORD:81 [ splinePlot::$9 ]
Allocated zp ZP_WORD:83 [ splinePlot::$4 ]
Allocated zp ZP_WORD:85 [ splinePlot::a_y#0 ]
Allocated zp ZP_WORD:87 [ splinePlot::$7 ]
Allocated zp ZP_WORD:89 [ splinePlot::b_x#0 ]
Allocated zp ZP_WORD:91 [ splinePlot::$10 ]
Allocated zp ZP_WORD:93 [ splinePlot::b_y#0 ]
Allocated zp ZP_DWORD:95 [ splinePlot::$12 ]
Allocated zp ZP_DWORD:99 [ splinePlot::$13 ]
Allocated zp ZP_DWORD:103 [ splinePlot::$14 ]
Allocated zp ZP_DWORD:107 [ splinePlot::$15 ]
Allocated zp ZP_DWORD:111 [ splinePlot::$16 ]
Allocated zp ZP_DWORD:115 [ splinePlot::$18 ]
Allocated zp ZP_DWORD:119 [ splinePlot::$19 ]
Allocated zp ZP_DWORD:123 [ splinePlot::$20 ]
Allocated zp ZP_DWORD:127 [ splinePlot::$21 ]
Allocated zp ZP_DWORD:131 [ splinePlot::$22 ]
Allocated zp ZP_DWORD:135 [ splinePlot::$24 ]
Allocated zp ZP_DWORD:139 [ splinePlot::$25 ]
Allocated zp ZP_DWORD:143 [ splinePlot::j_x#0 ]
Allocated zp ZP_DWORD:147 [ splinePlot::$27 ]
Allocated zp ZP_DWORD:151 [ splinePlot::$28 ]
Allocated zp ZP_DWORD:155 [ splinePlot::j_y#0 ]
Allocated zp ZP_DWORD:159 [ splinePlot::$30 ]
Allocated zp ZP_DWORD:163 [ splinePlot::$32 ]
Allocated zp ZP_WORD:167 [ bitmap_plot::x#0 ]
Allocated zp ZP_WORD:169 [ splinePlot::$35 ]
Allocated zp ZP_BYTE:171 [ bitmap_plot::y#0 ]
Allocated zp ZP_WORD:172 [ bitmap_plot::plotter#0 ]
Allocated zp ZP_WORD:174 [ bitmap_plot::$1 ]
Allocated zp ZP_WORD:176 [ bitmap_plot::plotter#1 ]
Allocated zp ZP_BYTE:178 [ bitmap_plot::$2 ]
Allocated zp ZP_WORD:179 [ memset::end#0 ]
Allocated zp ZP_BYTE:181 [ bitmap_init::$7 ]
Allocated zp ZP_BYTE:182 [ bitmap_init::$4 ]
Allocated zp ZP_BYTE:183 [ bitmap_init::$5 ]
Allocated zp ZP_BYTE:184 [ bitmap_init::$6 ]

INITIAL ASM
  // File Comments
// Quadratic Spline Library for the C64
// Implements an iterative algorithm using only addition for calculating quadratic splines
//
// A quadratic spline is a curve defined by 3 points: P0, P1 and P2.
// The curve connects P0 to P2 through a smooth curve that moves towards P1, but does usually not touch it.
//
// The general formula for the quadratic spline is as follows:
// A = P2 - 2*P1 + P0
// B = 2*P1 - 2*P0
// C = P0
// P(t) = A*t*t + B*t + C
// for 0 <= t <= 1
//
// This library implements a iterative algorithm using multiplications in the initialization and only additions for calculating each point on the spline.
// The iterative algorithm is based on the following:
// P(t+Dt) = P(t) + A*Dt*Dt + 2*A*t*Dt + B*Dt
//
// init:
//   N = 16 (number of plots)
//   Dt = 1/N
//   P = C
//   I = A*Dt*Dt + B*Dt
//   J = 2*A*Dt*Dt
// loop(N times):
//   plot(P)
//   P = P + I
//   I = I + J
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // CIA #2 Timer A+B Value (32-bit)
  .label CIA2_TIMER_AB = $dd04
  // CIA #2 Timer A Control Register
  .label CIA2_TIMER_A_CONTROL = $dd0e
  // CIA #2 Timer B Control Register
  .label CIA2_TIMER_B_CONTROL = $dd0f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer Control - Time CONTINUOUS/ONE-SHOT (0:CONTINUOUS, 1: ONE-SHOT)
  .const CIA_TIMER_CONTROL_CONTINUOUS = 0
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const WHITE = 1
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  .label SCREEN = $400
  .label BITMAP_SCREEN = $5c00
  .label BITMAP_GRAPHICS = $6000
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .const p0_x = $32
    .const p0_y = $32
    .const p1a_x = $64
    .const p1a_y = $32
    .const p1b_x = $32
    .const p1b_y = $64
    .const p2_x = $64
    .const p2_y = $64
    .const p3a_x = $96
    .const p3a_y = $64
    .const p3b_x = $64
    .const p3b_y = $96
    .const p4_x = $96
    .const p4_y = $96
    .const vicSelectGfxBank1_toDd001_return = 3^(>BITMAP_SCREEN)/$40
    .const toD0181_return = (>(BITMAP_SCREEN&$3fff)*4)|(>BITMAP_GRAPHICS)/4&$f
    .label _12 = $39
    .label cyclecount = $3d
    // [5] call bitmap_init 
    // [130] phi from main to bitmap_init [phi:main->bitmap_init]
  bitmap_init_from_main:
    jsr bitmap_init
    // [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    jmp b2
    // main::@2
  b2:
    // [7] call bitmap_clear 
    // [116] phi from main::@2 to bitmap_clear [phi:main::@2->bitmap_clear]
  bitmap_clear_from_b2:
    jsr bitmap_clear
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
    // [9] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
    // [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    // [11] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1_b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp b1
    // main::@1
  b1:
    // [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [13] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [14] call clock_start 
    jsr clock_start
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
    // main::@3
  b3:
    // [16] call splinePlot 
    // [59] phi from main::@3 to splinePlot [phi:main::@3->splinePlot]
  splinePlot_from_b3:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p0_y#0 [phi:main::@3->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p0_y
    sta splinePlot.p0_y
    lda #>p0_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p2_y#0 [phi:main::@3->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p2_y
    lda #>p2_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p1a_y#0 [phi:main::@3->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p1a_y
    sta splinePlot.p1_y
    lda #>p1a_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p0_x#0 [phi:main::@3->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p0_x
    sta splinePlot.p0_x
    lda #>p0_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p2_x#0 [phi:main::@3->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p2_x
    lda #>p2_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p1a_x#0 [phi:main::@3->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p1a_x
    sta splinePlot.p1_x
    lda #>p1a_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [17] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
    // main::@4
  b4:
    // [18] call splinePlot 
    // [59] phi from main::@4 to splinePlot [phi:main::@4->splinePlot]
  splinePlot_from_b4:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p2_y#0 [phi:main::@4->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p0_y
    lda #>p2_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p4_y#0 [phi:main::@4->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p4_y
    sta splinePlot.p2_y
    lda #>p4_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p3a_y#0 [phi:main::@4->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p3a_y
    sta splinePlot.p1_y
    lda #>p3a_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p2_x#0 [phi:main::@4->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p0_x
    lda #>p2_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p4_x#0 [phi:main::@4->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p4_x
    sta splinePlot.p2_x
    lda #>p4_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p3a_x#0 [phi:main::@4->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p3a_x
    sta splinePlot.p1_x
    lda #>p3a_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
    // main::@5
  b5:
    // [20] call splinePlot 
    // [59] phi from main::@5 to splinePlot [phi:main::@5->splinePlot]
  splinePlot_from_b5:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p2_y#0 [phi:main::@5->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p0_y
    lda #>p2_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p0_y#0 [phi:main::@5->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p0_y
    sta splinePlot.p2_y
    lda #>p0_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p1b_y#0 [phi:main::@5->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p1b_y
    sta splinePlot.p1_y
    lda #>p1b_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p2_x#0 [phi:main::@5->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p0_x
    lda #>p2_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p0_x#0 [phi:main::@5->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p0_x
    sta splinePlot.p2_x
    lda #>p0_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p1b_x#0 [phi:main::@5->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p1b_x
    sta splinePlot.p1_x
    lda #>p1b_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [21] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
    // main::@6
  b6:
    // [22] call splinePlot 
    // [59] phi from main::@6 to splinePlot [phi:main::@6->splinePlot]
  splinePlot_from_b6:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p4_y#0 [phi:main::@6->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p4_y
    sta splinePlot.p0_y
    lda #>p4_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p2_y#0 [phi:main::@6->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p2_y
    lda #>p2_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p3b_y#0 [phi:main::@6->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p3b_y
    sta splinePlot.p1_y
    lda #>p3b_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p4_x#0 [phi:main::@6->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p4_x
    sta splinePlot.p0_x
    lda #>p4_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p2_x#0 [phi:main::@6->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p2_x
    lda #>p2_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p3b_x#0 [phi:main::@6->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p3b_x
    sta splinePlot.p1_x
    lda #>p3b_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [23] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
    // main::@7
  b7:
    // [24] call clock 
    jsr clock
    // [25] (dword) clock::return#2 ← (dword) clock::return#0 -- vduz1=vduz2 
    lda clock.return
    sta clock.return_2
    lda clock.return+1
    sta clock.return_2+1
    lda clock.return+2
    sta clock.return_2+2
    lda clock.return+3
    sta clock.return_2+3
    jmp b8
    // main::@8
  b8:
    // [26] (dword~) main::$12 ← (dword) clock::return#2 -- vduz1=vduz2 
    lda clock.return_2
    sta _12
    lda clock.return_2+1
    sta _12+1
    lda clock.return_2+2
    sta _12+2
    lda clock.return_2+3
    sta _12+3
    // [27] (dword) main::cyclecount#0 ← (dword~) main::$12 - (const dword) CLOCKS_PER_INIT#0 -- vduz1=vduz2_minus_vduc1 
    lda _12
    sec
    sbc #<CLOCKS_PER_INIT
    sta cyclecount
    lda _12+1
    sbc #>CLOCKS_PER_INIT
    sta cyclecount+1
    lda _12+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta cyclecount+2
    lda _12+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta cyclecount+3
    // [28] (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0 -- vduz1=vduz2 
    lda cyclecount
    sta print_dword_at.dw
    lda cyclecount+1
    sta print_dword_at.dw+1
    lda cyclecount+2
    sta print_dword_at.dw+2
    lda cyclecount+3
    sta print_dword_at.dw+3
    // [29] call print_dword_at 
    jsr print_dword_at
    jmp breturn
    // main::@return
  breturn:
    // [30] return 
    rts
}
  // print_dword_at
// Print a dword as HEX at a specific position
// print_dword_at(dword zeropage($41) dw)
print_dword_at: {
    .label dw = $41
    // [31] (word) print_word_at::w#0 ← > (dword) print_dword_at::dw#0 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word_at.w
    lda dw+3
    sta print_word_at.w+1
    // [32] call print_word_at 
    // [36] phi from print_dword_at to print_word_at [phi:print_dword_at->print_word_at]
  print_word_at_from_print_dword_at:
    // [36] phi (byte*) print_word_at::at#2 = (const byte*) SCREEN#0 [phi:print_dword_at->print_word_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta print_word_at.at
    lda #>SCREEN
    sta print_word_at.at+1
    // [36] phi (word) print_word_at::w#2 = (word) print_word_at::w#0 [phi:print_dword_at->print_word_at#1] -- register_copy 
    jsr print_word_at
    jmp b1
    // print_dword_at::@1
  b1:
    // [33] (word) print_word_at::w#1 ← < (dword) print_dword_at::dw#0 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word_at.w
    lda dw+1
    sta print_word_at.w+1
    // [34] call print_word_at 
    // [36] phi from print_dword_at::@1 to print_word_at [phi:print_dword_at::@1->print_word_at]
  print_word_at_from_b1:
    // [36] phi (byte*) print_word_at::at#2 = (const byte*) SCREEN#0+(byte) 4 [phi:print_dword_at::@1->print_word_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+4
    sta print_word_at.at
    lda #>SCREEN+4
    sta print_word_at.at+1
    // [36] phi (word) print_word_at::w#2 = (word) print_word_at::w#1 [phi:print_dword_at::@1->print_word_at#1] -- register_copy 
    jsr print_word_at
    jmp breturn
    // print_dword_at::@return
  breturn:
    // [35] return 
    rts
}
  // print_word_at
// Print a word as HEX at a specific position
// print_word_at(word zeropage(2) w, byte* zeropage(4) at)
print_word_at: {
    .label w = 2
    .label at = 4
    // [37] (byte) print_byte_at::b#0 ← > (word) print_word_at::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte_at.b
    // [38] (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2 -- pbuz1=pbuz2 
    lda at
    sta print_byte_at.at
    lda at+1
    sta print_byte_at.at+1
    // [39] call print_byte_at 
    // [44] phi from print_word_at to print_byte_at [phi:print_word_at->print_byte_at]
  print_byte_at_from_print_word_at:
    // [44] phi (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#0 [phi:print_word_at->print_byte_at#0] -- register_copy 
    // [44] phi (byte) print_byte_at::b#2 = (byte) print_byte_at::b#0 [phi:print_word_at->print_byte_at#1] -- register_copy 
    jsr print_byte_at
    jmp b1
    // print_word_at::@1
  b1:
    // [40] (byte) print_byte_at::b#1 ← < (word) print_word_at::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte_at.b
    // [41] (byte*) print_byte_at::at#1 ← (byte*) print_word_at::at#2 + (byte) 2 -- pbuz1=pbuz2_plus_2 
    lda at
    clc
    adc #2
    sta print_byte_at.at
    lda at+1
    adc #0
    sta print_byte_at.at+1
    // [42] call print_byte_at 
    // [44] phi from print_word_at::@1 to print_byte_at [phi:print_word_at::@1->print_byte_at]
  print_byte_at_from_b1:
    // [44] phi (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#1 [phi:print_word_at::@1->print_byte_at#0] -- register_copy 
    // [44] phi (byte) print_byte_at::b#2 = (byte) print_byte_at::b#1 [phi:print_word_at::@1->print_byte_at#1] -- register_copy 
    jsr print_byte_at
    jmp breturn
    // print_word_at::@return
  breturn:
    // [43] return 
    rts
}
  // print_byte_at
// Print a byte as HEX at a specific position
// print_byte_at(byte zeropage(6) b, byte* zeropage(7) at)
print_byte_at: {
    .label _0 = $45
    .label _2 = $46
    .label b = 6
    .label at = 7
    // [45] (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
    // [46] (byte) print_char_at::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char_at.ch
    // [47] (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2 -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
    // [48] call print_char_at 
    // [54] phi from print_byte_at to print_char_at [phi:print_byte_at->print_char_at]
  print_char_at_from_print_byte_at:
    // [54] phi (byte*) print_char_at::at#2 = (byte*) print_char_at::at#0 [phi:print_byte_at->print_char_at#0] -- register_copy 
    // [54] phi (byte) print_char_at::ch#2 = (byte) print_char_at::ch#0 [phi:print_byte_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp b1
    // print_byte_at::@1
  b1:
    // [49] (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
    // [50] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#2 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_char_at.at
    lda at+1
    adc #0
    sta print_char_at.at+1
    // [51] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char_at.ch
    // [52] call print_char_at 
    // [54] phi from print_byte_at::@1 to print_char_at [phi:print_byte_at::@1->print_char_at]
  print_char_at_from_b1:
    // [54] phi (byte*) print_char_at::at#2 = (byte*) print_char_at::at#1 [phi:print_byte_at::@1->print_char_at#0] -- register_copy 
    // [54] phi (byte) print_char_at::ch#2 = (byte) print_char_at::ch#1 [phi:print_byte_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp breturn
    // print_byte_at::@return
  breturn:
    // [53] return 
    rts
}
  // print_char_at
// Print a single char
// print_char_at(byte zeropage(9) ch, byte* zeropage($a) at)
print_char_at: {
    .label ch = 9
    .label at = $a
    // [55] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (at),y
    jmp breturn
    // print_char_at::@return
  breturn:
    // [56] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $47
    .label return_2 = $35
    // [57] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0) -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta return+3
    jmp breturn
    // clock::@return
  breturn:
    // [58] return 
    rts
}
  // splinePlot
// splinePlot(signed word zeropage($10) p0_x, signed word zeropage($16) p0_y, signed word zeropage($c) p1_x, signed word zeropage($12) p1_y, signed word zeropage($e) p2_x, signed word zeropage($14) p2_y)
splinePlot: {
    .label _1 = $4d
    .label _4 = $53
    .label _6 = $4b
    .label _7 = $57
    .label _9 = $51
    .label _10 = $5b
    .label _12 = $5f
    .label _13 = $63
    .label _14 = $67
    .label _15 = $6b
    .label _16 = $6f
    .label _18 = $73
    .label _19 = $77
    .label _20 = $7b
    .label _21 = $7f
    .label _22 = $83
    .label _24 = $87
    .label _25 = $8b
    .label _27 = $93
    .label _28 = $97
    .label _30 = $9f
    .label _32 = $a3
    .label _35 = $a9
    .label a_x = $4f
    .label a_y = $55
    .label b_x = $59
    .label b_y = $5d
    .label i_x = $20
    .label i_y = $24
    .label j_x = $8f
    .label j_y = $9b
    .label p_x = $18
    .label p_y = $1c
    .label n = $28
    .label p1_x = $c
    .label p2_x = $e
    .label p0_x = $10
    .label p1_y = $12
    .label p2_y = $14
    .label p0_y = $16
    // [60] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p1_x
    asl
    sta _6
    lda p1_x+1
    rol
    sta _6+1
    // [61] (signed word~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$6 -- vwsz1=vwsz2_minus_vwsz3 
    lda p2_x
    sec
    sbc _6
    sta _1
    lda p2_x+1
    sbc _6+1
    sta _1+1
    // [62] (signed word) splinePlot::a_x#0 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4 -- vwsz1=vwsz2_plus_vwsz3 
    lda _1
    clc
    adc p0_x
    sta a_x
    lda _1+1
    adc p0_x+1
    sta a_x+1
    // [63] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p1_y
    asl
    sta _9
    lda p1_y+1
    rol
    sta _9+1
    // [64] (signed word~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$9 -- vwsz1=vwsz2_minus_vwsz3 
    lda p2_y
    sec
    sbc _9
    sta _4
    lda p2_y+1
    sbc _9+1
    sta _4+1
    // [65] (signed word) splinePlot::a_y#0 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4 -- vwsz1=vwsz2_plus_vwsz3 
    lda _4
    clc
    adc p0_y
    sta a_y
    lda _4+1
    adc p0_y+1
    sta a_y+1
    // [66] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p0_x
    asl
    sta _7
    lda p0_x+1
    rol
    sta _7+1
    // [67] (signed word) splinePlot::b_x#0 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7 -- vwsz1=vwsz2_minus_vwsz3 
    lda _6
    sec
    sbc _7
    sta b_x
    lda _6+1
    sbc _7+1
    sta b_x+1
    // [68] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p0_y
    asl
    sta _10
    lda p0_y+1
    rol
    sta _10+1
    // [69] (signed word) splinePlot::b_y#0 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10 -- vwsz1=vwsz2_minus_vwsz3 
    lda _9
    sec
    sbc _10
    sta b_y
    lda _9+1
    sbc _10+1
    sta b_y+1
    // [70] (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0 -- vdsz1=_sdword_vwsz2 
    lda a_x
    sta _12
    lda a_x+1
    sta _12+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _12+2
    sta _12+3
    // [71] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 << (byte) 8 -- vdsz1=vdsz2_rol_8 
    lda _12+2
    sta _13+3
    lda _12+1
    sta _13+2
    lda _12
    sta _13+1
    lda #0
    sta _13
    // [72] (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0 -- vdsz1=_sdword_vwsz2 
    lda b_x
    sta _14
    lda b_x+1
    sta _14+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _14+2
    sta _14+3
    // [73] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 << (byte) 8 -- vdsz1=vdsz2_rol_8 
    lda _14+2
    sta _15+3
    lda _14+1
    sta _15+2
    lda _14
    sta _15+1
    lda #0
    sta _15
    // [74] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 << (byte) 4 -- vdsz1=vdsz2_rol_4 
    lda _15
    sta _16
    lda _15+1
    sta _16+1
    lda _15+2
    sta _16+2
    lda _15+3
    sta _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    // [75] (signed dword) splinePlot::i_x#0 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16 -- vdsz1=vdsz2_plus_vdsz3 
    lda _13
    clc
    adc _16
    sta i_x
    lda _13+1
    adc _16+1
    sta i_x+1
    lda _13+2
    adc _16+2
    sta i_x+2
    lda _13+3
    adc _16+3
    sta i_x+3
    // [76] (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0 -- vdsz1=_sdword_vwsz2 
    lda a_y
    sta _18
    lda a_y+1
    sta _18+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _18+2
    sta _18+3
    // [77] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 << (byte) 8 -- vdsz1=vdsz2_rol_8 
    lda _18+2
    sta _19+3
    lda _18+1
    sta _19+2
    lda _18
    sta _19+1
    lda #0
    sta _19
    // [78] (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0 -- vdsz1=_sdword_vwsz2 
    lda b_y
    sta _20
    lda b_y+1
    sta _20+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _20+2
    sta _20+3
    // [79] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 << (byte) 8 -- vdsz1=vdsz2_rol_8 
    lda _20+2
    sta _21+3
    lda _20+1
    sta _21+2
    lda _20
    sta _21+1
    lda #0
    sta _21
    // [80] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 << (byte) 4 -- vdsz1=vdsz2_rol_4 
    lda _21
    sta _22
    lda _21+1
    sta _22+1
    lda _21+2
    sta _22+2
    lda _21+3
    sta _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    // [81] (signed dword) splinePlot::i_y#0 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22 -- vdsz1=vdsz2_plus_vdsz3 
    lda _19
    clc
    adc _22
    sta i_y
    lda _19+1
    adc _22+1
    sta i_y+1
    lda _19+2
    adc _22+2
    sta i_y+2
    lda _19+3
    adc _22+3
    sta i_y+3
    // [82] (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0 -- vdsz1=_sdword_vwsz2 
    lda a_x
    sta _24
    lda a_x+1
    sta _24+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _24+2
    sta _24+3
    // [83] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 << (byte) 8 -- vdsz1=vdsz2_rol_8 
    lda _24+2
    sta _25+3
    lda _24+1
    sta _25+2
    lda _24
    sta _25+1
    lda #0
    sta _25
    // [84] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 << (byte) 1 -- vdsz1=vdsz2_rol_1 
    lda _25
    asl
    sta j_x
    lda _25+1
    rol
    sta j_x+1
    lda _25+2
    rol
    sta j_x+2
    lda _25+3
    rol
    sta j_x+3
    // [85] (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0 -- vdsz1=_sdword_vwsz2 
    lda a_y
    sta _27
    lda a_y+1
    sta _27+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _27+2
    sta _27+3
    // [86] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 << (byte) 8 -- vdsz1=vdsz2_rol_8 
    lda _27+2
    sta _28+3
    lda _27+1
    sta _28+2
    lda _27
    sta _28+1
    lda #0
    sta _28
    // [87] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 << (byte) 1 -- vdsz1=vdsz2_rol_1 
    lda _28
    asl
    sta j_y
    lda _28+1
    rol
    sta j_y+1
    lda _28+2
    rol
    sta j_y+2
    lda _28+3
    rol
    sta j_y+3
    // [88] (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4 -- vdsz1=_sdword_vwsz2 
    lda p0_x
    sta _30
    lda p0_x+1
    sta _30+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _30+2
    sta _30+3
    // [89] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 << (byte) $10 -- vdsz1=vdsz2_rol_16 
    lda _30+1
    sta p_x+3
    lda _30
    sta p_x+2
    lda #0
    sta p_x
    sta p_x+1
    // [90] (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4 -- vdsz1=_sdword_vwsz2 
    lda p0_y
    sta _32
    lda p0_y+1
    sta _32+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _32+2
    sta _32+3
    // [91] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 << (byte) $10 -- vdsz1=vdsz2_rol_16 
    lda _32+1
    sta p_y+3
    lda _32
    sta p_y+2
    lda #0
    sta p_y
    sta p_y+1
    // [92] phi from splinePlot to splinePlot::@1 [phi:splinePlot->splinePlot::@1]
  b1_from_splinePlot:
    // [92] phi (byte) splinePlot::n#2 = (byte) 0 [phi:splinePlot->splinePlot::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta n
    // [92] phi (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#0 [phi:splinePlot->splinePlot::@1#1] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#0 [phi:splinePlot->splinePlot::@1#2] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#0 [phi:splinePlot->splinePlot::@1#3] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#0 [phi:splinePlot->splinePlot::@1#4] -- register_copy 
    jmp b1
    // [92] phi from splinePlot::@2 to splinePlot::@1 [phi:splinePlot::@2->splinePlot::@1]
  b1_from_b2:
    // [92] phi (byte) splinePlot::n#2 = (byte) splinePlot::n#1 [phi:splinePlot::@2->splinePlot::@1#0] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#1 [phi:splinePlot::@2->splinePlot::@1#1] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#1 [phi:splinePlot::@2->splinePlot::@1#2] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#1 [phi:splinePlot::@2->splinePlot::@1#3] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#1 [phi:splinePlot::@2->splinePlot::@1#4] -- register_copy 
    jmp b1
    // splinePlot::@1
  b1:
    // [93] (word) bitmap_plot::x#0 ← > (signed dword) splinePlot::p_x#2 -- vwuz1=_hi_vdsz2 
    lda p_x+2
    sta bitmap_plot.x
    lda p_x+3
    sta bitmap_plot.x+1
    // [94] (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2 -- vwuz1=_hi_vdsz2 
    lda p_y+2
    sta _35
    lda p_y+3
    sta _35+1
    // [95] (byte) bitmap_plot::y#0 ← < (word~) splinePlot::$35 -- vbuz1=_lo_vwuz2 
    lda _35
    sta bitmap_plot.y
    // [96] call bitmap_plot 
    jsr bitmap_plot
    jmp b2
    // splinePlot::@2
  b2:
    // [97] (signed dword) splinePlot::p_x#1 ← (signed dword) splinePlot::p_x#2 + (signed dword) splinePlot::i_x#2 -- vdsz1=vdsz1_plus_vdsz2 
    lda p_x
    clc
    adc i_x
    sta p_x
    lda p_x+1
    adc i_x+1
    sta p_x+1
    lda p_x+2
    adc i_x+2
    sta p_x+2
    lda p_x+3
    adc i_x+3
    sta p_x+3
    // [98] (signed dword) splinePlot::p_y#1 ← (signed dword) splinePlot::p_y#2 + (signed dword) splinePlot::i_y#2 -- vdsz1=vdsz1_plus_vdsz2 
    lda p_y
    clc
    adc i_y
    sta p_y
    lda p_y+1
    adc i_y+1
    sta p_y+1
    lda p_y+2
    adc i_y+2
    sta p_y+2
    lda p_y+3
    adc i_y+3
    sta p_y+3
    // [99] (signed dword) splinePlot::i_x#1 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#0 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_x
    clc
    adc j_x
    sta i_x
    lda i_x+1
    adc j_x+1
    sta i_x+1
    lda i_x+2
    adc j_x+2
    sta i_x+2
    lda i_x+3
    adc j_x+3
    sta i_x+3
    // [100] (signed dword) splinePlot::i_y#1 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#0 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_y
    clc
    adc j_y
    sta i_y
    lda i_y+1
    adc j_y+1
    sta i_y+1
    lda i_y+2
    adc j_y+2
    sta i_y+2
    lda i_y+3
    adc j_y+3
    sta i_y+3
    // [101] (byte) splinePlot::n#1 ← ++ (byte) splinePlot::n#2 -- vbuz1=_inc_vbuz1 
    inc n
    // [102] if((byte) splinePlot::n#1!=(byte) $11) goto splinePlot::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$11
    cmp n
    bne b1_from_b2
    jmp breturn
    // splinePlot::@return
  breturn:
    // [103] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zeropage($a7) x, byte zeropage($ab) y)
bitmap_plot: {
    .label _1 = $ae
    .label _2 = $b2
    .label plotter = $ac
    .label plotter_1 = $b0
    .label x = $a7
    .label y = $ab
    // [104] (word) bitmap_plot::plotter#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy y
    lda bitmap_plot_yhi,y
    sta plotter+1
    lda bitmap_plot_ylo,y
    sta plotter
    // [105] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
    // [106] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1 -- pbuz1=pbuz2_plus_vwuz3 
    lda plotter
    clc
    adc _1
    sta plotter_1
    lda plotter+1
    adc _1+1
    sta plotter_1+1
    // [107] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 -- vbuz1=_lo_vwuz2 
    lda x
    sta _2
    // [108] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter_1),y
    ldy _2
    ora bitmap_plot_bit,y
    ldy #0
    sta (plotter_1),y
    jmp breturn
    // bitmap_plot::@return
  breturn:
    // [109] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [110] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #CIA_TIMER_CONTROL_CONTINUOUS
    sta CIA2_TIMER_A_CONTROL
    // [111] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2_TIMER_B_CONTROL
    // [112] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [113] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2_TIMER_B_CONTROL
    // [114] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2_TIMER_A_CONTROL
    jmp breturn
    // clock_start::@return
  breturn:
    // [115] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // [117] call memset 
    // [121] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [121] phi (byte) memset::c#3 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuz1=vbuc1 
    lda #col
    sta memset.c
    // [121] phi (void*) memset::str#3 = (void*)(const byte*) BITMAP_SCREEN#0 [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_SCREEN
    sta memset.str
    lda #>BITMAP_SCREEN
    sta memset.str+1
    // [121] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta memset.num
    lda #>$3e8
    sta memset.num+1
    jsr memset
    // [118] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
    jmp b1
    // bitmap_clear::@1
  b1:
    // [119] call memset 
    // [121] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from_b1:
    // [121] phi (byte) memset::c#3 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuz1=vbuc1 
    lda #0
    sta memset.c
    // [121] phi (void*) memset::str#3 = (void*)(const byte*) BITMAP_GRAPHICS#0 [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_GRAPHICS
    sta memset.str
    lda #>BITMAP_GRAPHICS
    sta memset.str+1
    // [121] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta memset.num
    lda #>$1f40
    sta memset.num+1
    jsr memset
    jmp breturn
    // bitmap_clear::@return
  breturn:
    // [120] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($2b) str, byte zeropage($2d) c, word zeropage($29) num)
memset: {
    .label end = $b3
    .label dst = $2e
    .label num = $29
    .label str = $2b
    .label c = $2d
    // [122] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda num
    beq breturn
    lda num+1
    beq breturn
    jmp b1
    // memset::@1
  b1:
    // [123] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda str
    clc
    adc num
    sta end
    lda str+1
    adc num+1
    sta end+1
    // [124] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda str
    sta dst
    lda str+1
    sta dst+1
    // [125] phi from memset::@1 memset::@2 to memset::@2 [phi:memset::@1/memset::@2->memset::@2]
  b2_from_b1:
  b2_from_b2:
    // [125] phi (byte*) memset::dst#2 = (byte*~) memset::dst#3 [phi:memset::@1/memset::@2->memset::@2#0] -- register_copy 
    jmp b2
    // memset::@2
  b2:
    // [126] *((byte*) memset::dst#2) ← (byte) memset::c#3 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (dst),y
    // [127] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // [128] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda dst+1
    cmp end+1
    bne b2_from_b2
    lda dst
    cmp end
    bne b2_from_b2
    jmp breturn
    // memset::@return
  breturn:
    // [129] return 
    rts
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label _4 = $b6
    .label _5 = $b7
    .label _6 = $b8
    .label _7 = $b5
    .label bits = $30
    .label x = $31
    .label y = $32
    .label yoffs = $33
    // [131] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
    // [131] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    // [131] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b1
    // [131] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
    // [131] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [131] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
    // bitmap_init::@1
  b1:
    // [132] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda bits
    ldy x
    sta bitmap_plot_bit,y
    // [133] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr bits
    // [134] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuz1_neq_0_then_la1 
    lda bits
    cmp #0
    bne b6_from_b1
    // [136] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
    // [136] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta bits
    jmp b2
    // [135] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  b6_from_b1:
    jmp b6
    // bitmap_init::@6
  b6:
    // [136] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  b2_from_b6:
    // [136] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp b2
    // bitmap_init::@2
  b2:
    // [137] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc x
    // [138] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda x
    cmp #0
    bne b1_from_b2
    // [139] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
    // [139] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP_GRAPHICS#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP_GRAPHICS
    sta yoffs
    lda #>BITMAP_GRAPHICS
    sta yoffs+1
    // [139] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b3
    // [139] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
    // [139] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [139] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
    // bitmap_init::@3
  b3:
    // [140] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and y
    sta _7
    // [141] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda yoffs
    sta _4
    // [142] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuz1=vbuz2_bor_vbuz3 
    lda _7
    ora _4
    sta _5
    // [143] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _5
    ldy y
    sta bitmap_plot_ylo,y
    // [144] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda yoffs+1
    sta _6
    // [145] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _6
    ldy y
    sta bitmap_plot_yhi,y
    // [146] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp _7
    bne b4_from_b3
    jmp b5
    // bitmap_init::@5
  b5:
    // [147] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
    // [148] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  b4_from_b3:
  b4_from_b5:
    // [148] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp b4
    // bitmap_init::@4
  b4:
    // [149] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc y
    // [150] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda y
    cmp #0
    bne b3_from_b4
    jmp breturn
    // bitmap_init::@return
  breturn:
    // [151] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:182 [ bitmap_init::$4 ] has ALU potential.
Statement [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [25] (dword) clock::return#2 ← (dword) clock::return#0 [ clock::return#2 ] ( main:2 [ clock::return#2 ] ) always clobbers reg byte a 
Statement [26] (dword~) main::$12 ← (dword) clock::return#2 [ main::$12 ] ( main:2 [ main::$12 ] ) always clobbers reg byte a 
Statement [27] (dword) main::cyclecount#0 ← (dword~) main::$12 - (const dword) CLOCKS_PER_INIT#0 [ main::cyclecount#0 ] ( main:2 [ main::cyclecount#0 ] ) always clobbers reg byte a 
Statement [28] (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0 [ print_dword_at::dw#0 ] ( main:2 [ print_dword_at::dw#0 ] ) always clobbers reg byte a 
Statement [31] (word) print_word_at::w#0 ← > (dword) print_dword_at::dw#0 [ print_dword_at::dw#0 print_word_at::w#0 ] ( main:2::print_dword_at:29 [ print_dword_at::dw#0 print_word_at::w#0 ] ) always clobbers reg byte a 
Statement [33] (word) print_word_at::w#1 ← < (dword) print_dword_at::dw#0 [ print_word_at::w#1 ] ( main:2::print_dword_at:29 [ print_word_at::w#1 ] ) always clobbers reg byte a 
Statement [37] (byte) print_byte_at::b#0 ← > (word) print_word_at::w#2 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 ] main:2::print_dword_at:29::print_word_at:34 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 ] ) always clobbers reg byte a 
Statement [38] (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 print_byte_at::at#0 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 print_byte_at::at#0 ] main:2::print_dword_at:29::print_word_at:34 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 print_byte_at::at#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
Statement [40] (byte) print_byte_at::b#1 ← < (word) print_word_at::w#2 [ print_word_at::at#2 print_byte_at::b#1 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_word_at::at#2 print_byte_at::b#1 ] main:2::print_dword_at:29::print_word_at:34 [ print_word_at::at#2 print_byte_at::b#1 ] ) always clobbers reg byte a 
Statement [41] (byte*) print_byte_at::at#1 ← (byte*) print_word_at::at#2 + (byte) 2 [ print_byte_at::b#1 print_byte_at::at#1 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_byte_at::b#1 print_byte_at::at#1 ] main:2::print_dword_at:29::print_word_at:34 [ print_byte_at::b#1 print_byte_at::at#1 ] ) always clobbers reg byte a 
Statement [45] (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (byte) 4 [ print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2 [ print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
Statement [49] (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte) $f [ print_byte_at::at#2 print_byte_at::$2 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::at#2 print_byte_at::$2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::at#2 print_byte_at::$2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::at#2 print_byte_at::$2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::at#2 print_byte_at::$2 ] ) always clobbers reg byte a 
Statement [50] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#2 + (byte) 1 [ print_byte_at::$2 print_char_at::at#1 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::$2 print_char_at::at#1 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::$2 print_char_at::at#1 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::$2 print_char_at::at#1 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::$2 print_char_at::at#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:70 [ print_byte_at::$2 ]
Statement [55] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2 [ ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39::print_char_at:48 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39::print_char_at:48 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42::print_char_at:48 [ print_dword_at::dw#0 print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42::print_char_at:48 [ print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:39::print_char_at:52 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39::print_char_at:52 [ print_word_at::w#2 print_word_at::at#2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42::print_char_at:52 [ print_dword_at::dw#0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42::print_char_at:52 [ ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
Statement [57] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0) [ clock::return#0 ] ( main:2::clock:24 [ clock::return#0 ] ) always clobbers reg byte a 
Statement [60] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 << (byte) 1 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] ( main:2::splinePlot:16 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] main:2::splinePlot:18 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] main:2::splinePlot:20 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] main:2::splinePlot:22 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] ) always clobbers reg byte a 
Statement [61] (signed word~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$6 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] ) always clobbers reg byte a 
Statement [62] (signed word) splinePlot::a_x#0 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] ) always clobbers reg byte a 
Statement [63] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] ) always clobbers reg byte a 
Statement [64] (signed word~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$9 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] ) always clobbers reg byte a 
Statement [65] (signed word) splinePlot::a_y#0 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] ) always clobbers reg byte a 
Statement [66] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] ) always clobbers reg byte a 
Statement [67] (signed word) splinePlot::b_x#0 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] ) always clobbers reg byte a 
Statement [68] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] ) always clobbers reg byte a 
Statement [69] (signed word) splinePlot::b_y#0 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] ) always clobbers reg byte a 
Statement [70] (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] ) always clobbers reg byte a 
Statement [71] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] ) always clobbers reg byte a 
Statement [72] (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] ) always clobbers reg byte a 
Statement [73] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] ) always clobbers reg byte a 
Statement [74] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 << (byte) 4 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] ) always clobbers reg byte a 
Statement [75] (signed dword) splinePlot::i_x#0 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] ) always clobbers reg byte a 
Statement [76] (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] ) always clobbers reg byte a 
Statement [77] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] ) always clobbers reg byte a 
Statement [78] (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] ) always clobbers reg byte a 
Statement [79] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] ) always clobbers reg byte a 
Statement [80] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 << (byte) 4 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] ) always clobbers reg byte a 
Statement [81] (signed dword) splinePlot::i_y#0 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] ) always clobbers reg byte a 
Statement [82] (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] ) always clobbers reg byte a 
Statement [83] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] ) always clobbers reg byte a 
Statement [84] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] ) always clobbers reg byte a 
Statement [85] (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] ) always clobbers reg byte a 
Statement [86] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] ) always clobbers reg byte a 
Statement [87] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] ) always clobbers reg byte a 
Statement [88] (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] ( main:2::splinePlot:16 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] main:2::splinePlot:18 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] main:2::splinePlot:20 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] main:2::splinePlot:22 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] ) always clobbers reg byte a 
Statement [89] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 << (byte) $10 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] ) always clobbers reg byte a 
Statement [90] (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] ( main:2::splinePlot:16 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] main:2::splinePlot:18 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] main:2::splinePlot:20 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] main:2::splinePlot:22 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] ) always clobbers reg byte a 
Statement [91] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 << (byte) $10 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] ( main:2::splinePlot:16 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] main:2::splinePlot:18 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] main:2::splinePlot:20 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] main:2::splinePlot:22 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] ) always clobbers reg byte a 
Statement [93] (word) bitmap_plot::x#0 ← > (signed dword) splinePlot::p_x#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ splinePlot::n#2 splinePlot::n#1 ]
Statement [94] (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] ) always clobbers reg byte a 
Statement [95] (byte) bitmap_plot::y#0 ← < (word~) splinePlot::$35 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ) always clobbers reg byte a 
Statement [97] (signed dword) splinePlot::p_x#1 ← (signed dword) splinePlot::p_x#2 + (signed dword) splinePlot::i_x#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] ) always clobbers reg byte a 
Statement [98] (signed dword) splinePlot::p_y#1 ← (signed dword) splinePlot::p_y#2 + (signed dword) splinePlot::i_y#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] ) always clobbers reg byte a 
Statement [99] (signed dword) splinePlot::i_x#1 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#0 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] ) always clobbers reg byte a 
Statement [100] (signed dword) splinePlot::i_y#1 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#0 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] ) always clobbers reg byte a 
Statement [104] (word) bitmap_plot::plotter#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::plotter#0 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] ) always clobbers reg byte a 
Statement [105] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word) $fff8 [ bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] ) always clobbers reg byte a 
Statement [106] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) always clobbers reg byte a 
Statement [107] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) always clobbers reg byte a 
Statement [108] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ splinePlot::n#2 splinePlot::n#1 ]
Statement [110] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [111] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [112] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [113] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [114] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [122] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#3 ] ( main:2::bitmap_clear:7::memset:117 [ memset::num#2 memset::str#3 memset::c#3 ] main:2::bitmap_clear:7::memset:119 [ memset::num#2 memset::str#3 memset::c#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ memset::c#3 ]
Statement [123] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#3 memset::end#0 ] ( main:2::bitmap_clear:7::memset:117 [ memset::str#3 memset::c#3 memset::end#0 ] main:2::bitmap_clear:7::memset:119 [ memset::str#3 memset::c#3 memset::end#0 ] ) always clobbers reg byte a 
Statement [124] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3 [ memset::c#3 memset::end#0 memset::dst#3 ] ( main:2::bitmap_clear:7::memset:117 [ memset::c#3 memset::end#0 memset::dst#3 ] main:2::bitmap_clear:7::memset:119 [ memset::c#3 memset::end#0 memset::dst#3 ] ) always clobbers reg byte a 
Statement [126] *((byte*) memset::dst#2) ← (byte) memset::c#3 [ memset::c#3 memset::end#0 memset::dst#2 ] ( main:2::bitmap_clear:7::memset:117 [ memset::c#3 memset::end#0 memset::dst#2 ] main:2::bitmap_clear:7::memset:119 [ memset::c#3 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:45 [ memset::c#3 ]
Statement [128] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 [ memset::c#3 memset::end#0 memset::dst#1 ] ( main:2::bitmap_clear:7::memset:117 [ memset::c#3 memset::end#0 memset::dst#1 ] main:2::bitmap_clear:7::memset:119 [ memset::c#3 memset::end#0 memset::dst#1 ] ) always clobbers reg byte a 
Statement [147] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:5 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [25] (dword) clock::return#2 ← (dword) clock::return#0 [ clock::return#2 ] ( main:2 [ clock::return#2 ] ) always clobbers reg byte a 
Statement [26] (dword~) main::$12 ← (dword) clock::return#2 [ main::$12 ] ( main:2 [ main::$12 ] ) always clobbers reg byte a 
Statement [27] (dword) main::cyclecount#0 ← (dword~) main::$12 - (const dword) CLOCKS_PER_INIT#0 [ main::cyclecount#0 ] ( main:2 [ main::cyclecount#0 ] ) always clobbers reg byte a 
Statement [28] (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0 [ print_dword_at::dw#0 ] ( main:2 [ print_dword_at::dw#0 ] ) always clobbers reg byte a 
Statement [31] (word) print_word_at::w#0 ← > (dword) print_dword_at::dw#0 [ print_dword_at::dw#0 print_word_at::w#0 ] ( main:2::print_dword_at:29 [ print_dword_at::dw#0 print_word_at::w#0 ] ) always clobbers reg byte a 
Statement [33] (word) print_word_at::w#1 ← < (dword) print_dword_at::dw#0 [ print_word_at::w#1 ] ( main:2::print_dword_at:29 [ print_word_at::w#1 ] ) always clobbers reg byte a 
Statement [37] (byte) print_byte_at::b#0 ← > (word) print_word_at::w#2 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 ] main:2::print_dword_at:29::print_word_at:34 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 ] ) always clobbers reg byte a 
Statement [38] (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 print_byte_at::at#0 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 print_byte_at::at#0 ] main:2::print_dword_at:29::print_word_at:34 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#0 print_byte_at::at#0 ] ) always clobbers reg byte a 
Statement [40] (byte) print_byte_at::b#1 ← < (word) print_word_at::w#2 [ print_word_at::at#2 print_byte_at::b#1 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_word_at::at#2 print_byte_at::b#1 ] main:2::print_dword_at:29::print_word_at:34 [ print_word_at::at#2 print_byte_at::b#1 ] ) always clobbers reg byte a 
Statement [41] (byte*) print_byte_at::at#1 ← (byte*) print_word_at::at#2 + (byte) 2 [ print_byte_at::b#1 print_byte_at::at#1 ] ( main:2::print_dword_at:29::print_word_at:32 [ print_dword_at::dw#0 print_byte_at::b#1 print_byte_at::at#1 ] main:2::print_dword_at:29::print_word_at:34 [ print_byte_at::b#1 print_byte_at::at#1 ] ) always clobbers reg byte a 
Statement [45] (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (byte) 4 [ print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::b#2 print_byte_at::at#2 print_byte_at::$0 ] ) always clobbers reg byte a 
Statement [47] (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2 [ print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::b#2 print_byte_at::at#2 print_char_at::ch#0 print_char_at::at#0 ] ) always clobbers reg byte a 
Statement [49] (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte) $f [ print_byte_at::at#2 print_byte_at::$2 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::at#2 print_byte_at::$2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::at#2 print_byte_at::$2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::at#2 print_byte_at::$2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::at#2 print_byte_at::$2 ] ) always clobbers reg byte a 
Statement [50] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#2 + (byte) 1 [ print_byte_at::$2 print_char_at::at#1 ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::$2 print_char_at::at#1 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::$2 print_char_at::at#1 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42 [ print_dword_at::dw#0 print_byte_at::$2 print_char_at::at#1 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42 [ print_byte_at::$2 print_char_at::at#1 ] ) always clobbers reg byte a 
Statement [55] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2 [ ] ( main:2::print_dword_at:29::print_word_at:32::print_byte_at:39::print_char_at:48 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39::print_char_at:48 [ print_word_at::w#2 print_word_at::at#2 print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42::print_char_at:48 [ print_dword_at::dw#0 print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42::print_char_at:48 [ print_byte_at::b#2 print_byte_at::at#2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:39::print_char_at:52 [ print_dword_at::dw#0 print_word_at::w#2 print_word_at::at#2 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:39::print_char_at:52 [ print_word_at::w#2 print_word_at::at#2 ] main:2::print_dword_at:29::print_word_at:32::print_byte_at:42::print_char_at:52 [ print_dword_at::dw#0 ] main:2::print_dword_at:29::print_word_at:34::print_byte_at:42::print_char_at:52 [ ] ) always clobbers reg byte a reg byte y 
Statement [57] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0) [ clock::return#0 ] ( main:2::clock:24 [ clock::return#0 ] ) always clobbers reg byte a 
Statement [60] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 << (byte) 1 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] ( main:2::splinePlot:16 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] main:2::splinePlot:18 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] main:2::splinePlot:20 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] main:2::splinePlot:22 [ splinePlot::p2_x#4 splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 ] ) always clobbers reg byte a 
Statement [61] (signed word~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$6 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::$1 ] ) always clobbers reg byte a 
Statement [62] (signed word) splinePlot::a_x#0 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p1_y#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 ] ) always clobbers reg byte a 
Statement [63] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p2_y#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 ] ) always clobbers reg byte a 
Statement [64] (signed word~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$9 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::$4 ] ) always clobbers reg byte a 
Statement [65] (signed word) splinePlot::a_y#0 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 ] ) always clobbers reg byte a 
Statement [66] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::$6 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::$7 ] ) always clobbers reg byte a 
Statement [67] (signed word) splinePlot::b_x#0 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 ] ) always clobbers reg byte a 
Statement [68] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::$9 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::$10 ] ) always clobbers reg byte a 
Statement [69] (signed word) splinePlot::b_y#0 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 ] ) always clobbers reg byte a 
Statement [70] (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$12 ] ) always clobbers reg byte a 
Statement [71] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_x#0 splinePlot::b_y#0 splinePlot::$13 ] ) always clobbers reg byte a 
Statement [72] (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$14 ] ) always clobbers reg byte a 
Statement [73] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$15 ] ) always clobbers reg byte a 
Statement [74] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 << (byte) 4 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::$13 splinePlot::$16 ] ) always clobbers reg byte a 
Statement [75] (signed dword) splinePlot::i_x#0 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 ] ) always clobbers reg byte a 
Statement [76] (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$18 ] ) always clobbers reg byte a 
Statement [77] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::b_y#0 splinePlot::i_x#0 splinePlot::$19 ] ) always clobbers reg byte a 
Statement [78] (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$20 ] ) always clobbers reg byte a 
Statement [79] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$21 ] ) always clobbers reg byte a 
Statement [80] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 << (byte) 4 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::$19 splinePlot::$22 ] ) always clobbers reg byte a 
Statement [81] (signed dword) splinePlot::i_y#0 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_x#0 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 ] ) always clobbers reg byte a 
Statement [82] (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$24 ] ) always clobbers reg byte a 
Statement [83] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::$25 ] ) always clobbers reg byte a 
Statement [84] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::a_y#0 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 ] ) always clobbers reg byte a 
Statement [85] (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$27 ] ) always clobbers reg byte a 
Statement [86] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 << (byte) 8 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::$28 ] ) always clobbers reg byte a 
Statement [87] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 << (byte) 1 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] main:2::splinePlot:18 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] main:2::splinePlot:20 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] main:2::splinePlot:22 [ splinePlot::p0_x#4 splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 ] ) always clobbers reg byte a 
Statement [88] (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] ( main:2::splinePlot:16 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] main:2::splinePlot:18 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] main:2::splinePlot:20 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] main:2::splinePlot:22 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::$30 ] ) always clobbers reg byte a 
Statement [89] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 << (byte) $10 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] ( main:2::splinePlot:16 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] main:2::splinePlot:18 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] main:2::splinePlot:20 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] main:2::splinePlot:22 [ splinePlot::p0_y#4 splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 ] ) always clobbers reg byte a 
Statement [90] (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] ( main:2::splinePlot:16 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] main:2::splinePlot:18 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] main:2::splinePlot:20 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] main:2::splinePlot:22 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::$32 ] ) always clobbers reg byte a 
Statement [91] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 << (byte) $10 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] ( main:2::splinePlot:16 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] main:2::splinePlot:18 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] main:2::splinePlot:20 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] main:2::splinePlot:22 [ splinePlot::i_x#0 splinePlot::i_y#0 splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#0 splinePlot::p_y#0 ] ) always clobbers reg byte a 
Statement [93] (word) bitmap_plot::x#0 ← > (signed dword) splinePlot::p_x#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 ] ) always clobbers reg byte a 
Statement [94] (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 splinePlot::$35 ] ) always clobbers reg byte a 
Statement [95] (byte) bitmap_plot::y#0 ← < (word~) splinePlot::$35 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::y#0 ] ) always clobbers reg byte a 
Statement [97] (signed dword) splinePlot::p_x#1 ← (signed dword) splinePlot::p_x#2 + (signed dword) splinePlot::i_x#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 ] ) always clobbers reg byte a 
Statement [98] (signed dword) splinePlot::p_y#1 ← (signed dword) splinePlot::p_y#2 + (signed dword) splinePlot::i_y#2 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 ] ) always clobbers reg byte a 
Statement [99] (signed dword) splinePlot::i_x#1 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#0 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::i_y#2 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 ] ) always clobbers reg byte a 
Statement [100] (signed dword) splinePlot::i_y#1 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#0 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] ( main:2::splinePlot:16 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] main:2::splinePlot:18 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] main:2::splinePlot:20 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] main:2::splinePlot:22 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::n#2 splinePlot::p_x#1 splinePlot::p_y#1 splinePlot::i_x#1 splinePlot::i_y#1 ] ) always clobbers reg byte a 
Statement [104] (word) bitmap_plot::plotter#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) [ bitmap_plot::x#0 bitmap_plot::plotter#0 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 ] ) always clobbers reg byte a 
Statement [105] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word) $fff8 [ bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#0 bitmap_plot::$1 ] ) always clobbers reg byte a 
Statement [106] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1 [ bitmap_plot::x#0 bitmap_plot::plotter#1 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::x#0 bitmap_plot::plotter#1 ] ) always clobbers reg byte a 
Statement [107] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 [ bitmap_plot::plotter#1 bitmap_plot::$2 ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 bitmap_plot::plotter#1 bitmap_plot::$2 ] ) always clobbers reg byte a 
Statement [108] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) [ ] ( main:2::splinePlot:16::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] main:2::splinePlot:18::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] main:2::splinePlot:20::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] main:2::splinePlot:22::bitmap_plot:96 [ splinePlot::j_x#0 splinePlot::j_y#0 splinePlot::p_x#2 splinePlot::p_y#2 splinePlot::i_x#2 splinePlot::i_y#2 splinePlot::n#2 ] ) always clobbers reg byte a reg byte y 
Statement [110] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [111] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [112] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [113] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [114] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0 [ ] ( main:2::clock_start:14 [ ] ) always clobbers reg byte a 
Statement [122] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#3 ] ( main:2::bitmap_clear:7::memset:117 [ memset::num#2 memset::str#3 memset::c#3 ] main:2::bitmap_clear:7::memset:119 [ memset::num#2 memset::str#3 memset::c#3 ] ) always clobbers reg byte a 
Statement [123] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#3 memset::end#0 ] ( main:2::bitmap_clear:7::memset:117 [ memset::str#3 memset::c#3 memset::end#0 ] main:2::bitmap_clear:7::memset:119 [ memset::str#3 memset::c#3 memset::end#0 ] ) always clobbers reg byte a 
Statement [124] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3 [ memset::c#3 memset::end#0 memset::dst#3 ] ( main:2::bitmap_clear:7::memset:117 [ memset::c#3 memset::end#0 memset::dst#3 ] main:2::bitmap_clear:7::memset:119 [ memset::c#3 memset::end#0 memset::dst#3 ] ) always clobbers reg byte a 
Statement [126] *((byte*) memset::dst#2) ← (byte) memset::c#3 [ memset::c#3 memset::end#0 memset::dst#2 ] ( main:2::bitmap_clear:7::memset:117 [ memset::c#3 memset::end#0 memset::dst#2 ] main:2::bitmap_clear:7::memset:119 [ memset::c#3 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [128] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 [ memset::c#3 memset::end#0 memset::dst#1 ] ( main:2::bitmap_clear:7::memset:117 [ memset::c#3 memset::end#0 memset::dst#1 ] main:2::bitmap_clear:7::memset:119 [ memset::c#3 memset::end#0 memset::dst#1 ] ) always clobbers reg byte a 
Statement [140] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( main:2::bitmap_init:5 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ) always clobbers reg byte a 
Statement [147] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::bitmap_init:5 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ print_word_at::at#2 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_WORD:7 [ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_BYTE:9 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:10 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_WORD:12 [ splinePlot::p1_x#4 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ splinePlot::p2_x#4 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ splinePlot::p0_x#4 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ splinePlot::p1_y#4 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_WORD:20 [ splinePlot::p2_y#4 ] : zp ZP_WORD:20 , 
Potential registers zp ZP_WORD:22 [ splinePlot::p0_y#4 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_DWORD:24 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ] : zp ZP_DWORD:24 , 
Potential registers zp ZP_DWORD:28 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ] : zp ZP_DWORD:28 , 
Potential registers zp ZP_DWORD:32 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ] : zp ZP_DWORD:32 , 
Potential registers zp ZP_DWORD:36 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ] : zp ZP_DWORD:36 , 
Potential registers zp ZP_BYTE:40 [ splinePlot::n#2 splinePlot::n#1 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_WORD:41 [ memset::num#2 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_WORD:43 [ memset::str#3 ] : zp ZP_WORD:43 , 
Potential registers zp ZP_BYTE:45 [ memset::c#3 ] : zp ZP_BYTE:45 , reg byte x , 
Potential registers zp ZP_WORD:46 [ memset::dst#2 memset::dst#3 memset::dst#1 ] : zp ZP_WORD:46 , 
Potential registers zp ZP_BYTE:48 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp ZP_BYTE:48 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp ZP_BYTE:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp ZP_BYTE:50 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:51 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_DWORD:53 [ clock::return#2 ] : zp ZP_DWORD:53 , 
Potential registers zp ZP_DWORD:57 [ main::$12 ] : zp ZP_DWORD:57 , 
Potential registers zp ZP_DWORD:61 [ main::cyclecount#0 ] : zp ZP_DWORD:61 , 
Potential registers zp ZP_DWORD:65 [ print_dword_at::dw#0 ] : zp ZP_DWORD:65 , 
Potential registers zp ZP_BYTE:69 [ print_byte_at::$0 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ print_byte_at::$2 ] : zp ZP_BYTE:70 , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:71 [ clock::return#0 ] : zp ZP_DWORD:71 , 
Potential registers zp ZP_WORD:75 [ splinePlot::$6 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_WORD:77 [ splinePlot::$1 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_WORD:79 [ splinePlot::a_x#0 ] : zp ZP_WORD:79 , 
Potential registers zp ZP_WORD:81 [ splinePlot::$9 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_WORD:83 [ splinePlot::$4 ] : zp ZP_WORD:83 , 
Potential registers zp ZP_WORD:85 [ splinePlot::a_y#0 ] : zp ZP_WORD:85 , 
Potential registers zp ZP_WORD:87 [ splinePlot::$7 ] : zp ZP_WORD:87 , 
Potential registers zp ZP_WORD:89 [ splinePlot::b_x#0 ] : zp ZP_WORD:89 , 
Potential registers zp ZP_WORD:91 [ splinePlot::$10 ] : zp ZP_WORD:91 , 
Potential registers zp ZP_WORD:93 [ splinePlot::b_y#0 ] : zp ZP_WORD:93 , 
Potential registers zp ZP_DWORD:95 [ splinePlot::$12 ] : zp ZP_DWORD:95 , 
Potential registers zp ZP_DWORD:99 [ splinePlot::$13 ] : zp ZP_DWORD:99 , 
Potential registers zp ZP_DWORD:103 [ splinePlot::$14 ] : zp ZP_DWORD:103 , 
Potential registers zp ZP_DWORD:107 [ splinePlot::$15 ] : zp ZP_DWORD:107 , 
Potential registers zp ZP_DWORD:111 [ splinePlot::$16 ] : zp ZP_DWORD:111 , 
Potential registers zp ZP_DWORD:115 [ splinePlot::$18 ] : zp ZP_DWORD:115 , 
Potential registers zp ZP_DWORD:119 [ splinePlot::$19 ] : zp ZP_DWORD:119 , 
Potential registers zp ZP_DWORD:123 [ splinePlot::$20 ] : zp ZP_DWORD:123 , 
Potential registers zp ZP_DWORD:127 [ splinePlot::$21 ] : zp ZP_DWORD:127 , 
Potential registers zp ZP_DWORD:131 [ splinePlot::$22 ] : zp ZP_DWORD:131 , 
Potential registers zp ZP_DWORD:135 [ splinePlot::$24 ] : zp ZP_DWORD:135 , 
Potential registers zp ZP_DWORD:139 [ splinePlot::$25 ] : zp ZP_DWORD:139 , 
Potential registers zp ZP_DWORD:143 [ splinePlot::j_x#0 ] : zp ZP_DWORD:143 , 
Potential registers zp ZP_DWORD:147 [ splinePlot::$27 ] : zp ZP_DWORD:147 , 
Potential registers zp ZP_DWORD:151 [ splinePlot::$28 ] : zp ZP_DWORD:151 , 
Potential registers zp ZP_DWORD:155 [ splinePlot::j_y#0 ] : zp ZP_DWORD:155 , 
Potential registers zp ZP_DWORD:159 [ splinePlot::$30 ] : zp ZP_DWORD:159 , 
Potential registers zp ZP_DWORD:163 [ splinePlot::$32 ] : zp ZP_DWORD:163 , 
Potential registers zp ZP_WORD:167 [ bitmap_plot::x#0 ] : zp ZP_WORD:167 , 
Potential registers zp ZP_WORD:169 [ splinePlot::$35 ] : zp ZP_WORD:169 , 
Potential registers zp ZP_BYTE:171 [ bitmap_plot::y#0 ] : zp ZP_BYTE:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:172 [ bitmap_plot::plotter#0 ] : zp ZP_WORD:172 , 
Potential registers zp ZP_WORD:174 [ bitmap_plot::$1 ] : zp ZP_WORD:174 , 
Potential registers zp ZP_WORD:176 [ bitmap_plot::plotter#1 ] : zp ZP_WORD:176 , 
Potential registers zp ZP_BYTE:178 [ bitmap_plot::$2 ] : zp ZP_BYTE:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:179 [ memset::end#0 ] : zp ZP_WORD:179 , 
Potential registers zp ZP_BYTE:181 [ bitmap_init::$7 ] : zp ZP_BYTE:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:182 [ bitmap_init::$4 ] : zp ZP_BYTE:182 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:183 [ bitmap_init::$5 ] : zp ZP_BYTE:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:184 [ bitmap_init::$6 ] : zp ZP_BYTE:184 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bitmap_init] 39.88: zp ZP_WORD:51 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 34.83: zp ZP_BYTE:48 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 22: zp ZP_BYTE:49 [ bitmap_init::x#2 bitmap_init::x#1 ] 22: zp ZP_BYTE:50 [ bitmap_init::y#2 bitmap_init::y#1 ] 22: zp ZP_BYTE:182 [ bitmap_init::$4 ] 22: zp ZP_BYTE:183 [ bitmap_init::$5 ] 22: zp ZP_BYTE:184 [ bitmap_init::$6 ] 5.5: zp ZP_BYTE:181 [ bitmap_init::$7 ] 
Uplift Scope [splinePlot] 22: zp ZP_WORD:169 [ splinePlot::$35 ] 18.94: zp ZP_BYTE:40 [ splinePlot::n#2 splinePlot::n#1 ] 14.23: zp ZP_DWORD:28 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ] 12.07: zp ZP_DWORD:36 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ] 12: zp ZP_DWORD:24 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ] 10.74: zp ZP_DWORD:32 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ] 4: zp ZP_WORD:77 [ splinePlot::$1 ] 4: zp ZP_WORD:83 [ splinePlot::$4 ] 4: zp ZP_WORD:87 [ splinePlot::$7 ] 4: zp ZP_WORD:91 [ splinePlot::$10 ] 4: zp ZP_DWORD:95 [ splinePlot::$12 ] 4: zp ZP_DWORD:103 [ splinePlot::$14 ] 4: zp ZP_DWORD:107 [ splinePlot::$15 ] 4: zp ZP_DWORD:111 [ splinePlot::$16 ] 4: zp ZP_DWORD:115 [ splinePlot::$18 ] 4: zp ZP_DWORD:123 [ splinePlot::$20 ] 4: zp ZP_DWORD:127 [ splinePlot::$21 ] 4: zp ZP_DWORD:131 [ splinePlot::$22 ] 4: zp ZP_DWORD:135 [ splinePlot::$24 ] 4: zp ZP_DWORD:139 [ splinePlot::$25 ] 4: zp ZP_DWORD:147 [ splinePlot::$27 ] 4: zp ZP_DWORD:151 [ splinePlot::$28 ] 4: zp ZP_DWORD:159 [ splinePlot::$30 ] 4: zp ZP_DWORD:163 [ splinePlot::$32 ] 2: zp ZP_WORD:12 [ splinePlot::p1_x#4 ] 1: zp ZP_WORD:14 [ splinePlot::p2_x#4 ] 1: zp ZP_WORD:81 [ splinePlot::$9 ] 1: zp ZP_DWORD:99 [ splinePlot::$13 ] 1: zp ZP_DWORD:119 [ splinePlot::$19 ] 0.86: zp ZP_WORD:75 [ splinePlot::$6 ] 0.81: zp ZP_DWORD:155 [ splinePlot::j_y#0 ] 0.68: zp ZP_DWORD:143 [ splinePlot::j_x#0 ] 0.5: zp ZP_WORD:18 [ splinePlot::p1_y#4 ] 0.4: zp ZP_WORD:20 [ splinePlot::p2_y#4 ] 0.4: zp ZP_WORD:89 [ splinePlot::b_x#0 ] 0.22: zp ZP_WORD:93 [ splinePlot::b_y#0 ] 0.14: zp ZP_WORD:16 [ splinePlot::p0_x#4 ] 0.13: zp ZP_WORD:22 [ splinePlot::p0_y#4 ] 0.1: zp ZP_WORD:79 [ splinePlot::a_x#0 ] 0.1: zp ZP_WORD:85 [ splinePlot::a_y#0 ] 
Uplift Scope [memset] 38: zp ZP_WORD:46 [ memset::dst#2 memset::dst#3 memset::dst#1 ] 2.17: zp ZP_WORD:179 [ memset::end#0 ] 2: zp ZP_WORD:41 [ memset::num#2 ] 1.38: zp ZP_BYTE:45 [ memset::c#3 ] 0: zp ZP_WORD:43 [ memset::str#3 ] 
Uplift Scope [bitmap_plot] 15: zp ZP_BYTE:171 [ bitmap_plot::y#0 ] 4: zp ZP_WORD:174 [ bitmap_plot::$1 ] 4: zp ZP_BYTE:178 [ bitmap_plot::$2 ] 3: zp ZP_WORD:176 [ bitmap_plot::plotter#1 ] 2.5: zp ZP_WORD:167 [ bitmap_plot::x#0 ] 1: zp ZP_WORD:172 [ bitmap_plot::plotter#0 ] 
Uplift Scope [print_char_at] 12: zp ZP_BYTE:9 [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ] 12: zp ZP_WORD:10 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] 
Uplift Scope [print_byte_at] 9.33: zp ZP_WORD:7 [ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ] 5.6: zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ] 4: zp ZP_BYTE:69 [ print_byte_at::$0 ] 2: zp ZP_BYTE:70 [ print_byte_at::$2 ] 
Uplift Scope [print_word_at] 10: zp ZP_WORD:2 [ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ] 0.8: zp ZP_WORD:4 [ print_word_at::at#2 ] 
Uplift Scope [main] 4: zp ZP_DWORD:57 [ main::$12 ] 4: zp ZP_DWORD:61 [ main::cyclecount#0 ] 
Uplift Scope [clock] 4: zp ZP_DWORD:53 [ clock::return#2 ] 1.33: zp ZP_DWORD:71 [ clock::return#0 ] 
Uplift Scope [print_dword_at] 2: zp ZP_DWORD:65 [ print_dword_at::dw#0 ] 
Uplift Scope [clock_start] 
Uplift Scope [bitmap_clear] 
Uplift Scope [SplineVector16] 
Uplift Scope [SplineVector32] 
Uplift Scope [] 

Uplifting [bitmap_init] best 6001 combination zp ZP_WORD:51 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte a [ bitmap_init::$4 ] zp ZP_BYTE:183 [ bitmap_init::$5 ] zp ZP_BYTE:184 [ bitmap_init::$6 ] zp ZP_BYTE:181 [ bitmap_init::$7 ] 
Limited combination testing to 100 combinations of 15360 possible.
Uplifting [splinePlot] best 5911 combination zp ZP_WORD:169 [ splinePlot::$35 ] reg byte x [ splinePlot::n#2 splinePlot::n#1 ] zp ZP_DWORD:28 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ] zp ZP_DWORD:36 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ] zp ZP_DWORD:24 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ] zp ZP_DWORD:32 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ] zp ZP_WORD:77 [ splinePlot::$1 ] zp ZP_WORD:83 [ splinePlot::$4 ] zp ZP_WORD:87 [ splinePlot::$7 ] zp ZP_WORD:91 [ splinePlot::$10 ] zp ZP_DWORD:95 [ splinePlot::$12 ] zp ZP_DWORD:103 [ splinePlot::$14 ] zp ZP_DWORD:107 [ splinePlot::$15 ] zp ZP_DWORD:111 [ splinePlot::$16 ] zp ZP_DWORD:115 [ splinePlot::$18 ] zp ZP_DWORD:123 [ splinePlot::$20 ] zp ZP_DWORD:127 [ splinePlot::$21 ] zp ZP_DWORD:131 [ splinePlot::$22 ] zp ZP_DWORD:135 [ splinePlot::$24 ] zp ZP_DWORD:139 [ splinePlot::$25 ] zp ZP_DWORD:147 [ splinePlot::$27 ] zp ZP_DWORD:151 [ splinePlot::$28 ] zp ZP_DWORD:159 [ splinePlot::$30 ] zp ZP_DWORD:163 [ splinePlot::$32 ] zp ZP_WORD:12 [ splinePlot::p1_x#4 ] zp ZP_WORD:14 [ splinePlot::p2_x#4 ] zp ZP_WORD:81 [ splinePlot::$9 ] zp ZP_DWORD:99 [ splinePlot::$13 ] zp ZP_DWORD:119 [ splinePlot::$19 ] zp ZP_WORD:75 [ splinePlot::$6 ] zp ZP_DWORD:155 [ splinePlot::j_y#0 ] zp ZP_DWORD:143 [ splinePlot::j_x#0 ] zp ZP_WORD:18 [ splinePlot::p1_y#4 ] zp ZP_WORD:20 [ splinePlot::p2_y#4 ] zp ZP_WORD:89 [ splinePlot::b_x#0 ] zp ZP_WORD:93 [ splinePlot::b_y#0 ] zp ZP_WORD:16 [ splinePlot::p0_x#4 ] zp ZP_WORD:22 [ splinePlot::p0_y#4 ] zp ZP_WORD:79 [ splinePlot::a_x#0 ] zp ZP_WORD:85 [ splinePlot::a_y#0 ] 
Uplifting [memset] best 5895 combination zp ZP_WORD:46 [ memset::dst#2 memset::dst#3 memset::dst#1 ] zp ZP_WORD:179 [ memset::end#0 ] zp ZP_WORD:41 [ memset::num#2 ] reg byte x [ memset::c#3 ] zp ZP_WORD:43 [ memset::str#3 ] 
Uplifting [bitmap_plot] best 5860 combination reg byte a [ bitmap_plot::y#0 ] zp ZP_WORD:174 [ bitmap_plot::$1 ] reg byte a [ bitmap_plot::$2 ] zp ZP_WORD:176 [ bitmap_plot::plotter#1 ] zp ZP_WORD:167 [ bitmap_plot::x#0 ] zp ZP_WORD:172 [ bitmap_plot::plotter#0 ] 
Uplifting [print_char_at] best 5853 combination reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ] zp ZP_WORD:10 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ] 
Uplifting [print_byte_at] best 5845 combination zp ZP_WORD:7 [ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ] zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ] reg byte a [ print_byte_at::$0 ] reg byte y [ print_byte_at::$2 ] 
Uplifting [print_word_at] best 5845 combination zp ZP_WORD:2 [ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ] zp ZP_WORD:4 [ print_word_at::at#2 ] 
Uplifting [main] best 5845 combination zp ZP_DWORD:57 [ main::$12 ] zp ZP_DWORD:61 [ main::cyclecount#0 ] 
Uplifting [clock] best 5845 combination zp ZP_DWORD:53 [ clock::return#2 ] zp ZP_DWORD:71 [ clock::return#0 ] 
Uplifting [print_dword_at] best 5845 combination zp ZP_DWORD:65 [ print_dword_at::dw#0 ] 
Uplifting [clock_start] best 5845 combination 
Uplifting [bitmap_clear] best 5845 combination 
Uplifting [SplineVector16] best 5845 combination 
Uplifting [SplineVector32] best 5845 combination 
Uplifting [] best 5845 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:183 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 5785 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:184 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 5725 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
Uplifting [print_byte_at] best 5725 combination zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:181 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 5725 combination zp ZP_BYTE:181 [ bitmap_init::$7 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:4 [ print_word_at::at#2 ] ] with [ zp ZP_WORD:7 [ print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:12 [ splinePlot::p1_x#4 ] ] with [ zp ZP_WORD:75 [ splinePlot::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:14 [ splinePlot::p2_x#4 ] ] with [ zp ZP_WORD:77 [ splinePlot::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:18 [ splinePlot::p1_y#4 ] ] with [ zp ZP_WORD:81 [ splinePlot::$9 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ splinePlot::p2_y#4 ] ] with [ zp ZP_WORD:83 [ splinePlot::$4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:24 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 ] ] with [ zp ZP_DWORD:159 [ splinePlot::$30 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:28 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 ] ] with [ zp ZP_DWORD:163 [ splinePlot::$32 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:32 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 ] ] with [ zp ZP_DWORD:99 [ splinePlot::$13 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:36 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 ] ] with [ zp ZP_DWORD:119 [ splinePlot::$19 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:41 [ memset::num#2 ] ] with [ zp ZP_WORD:179 [ memset::end#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:43 [ memset::str#3 ] ] with [ zp ZP_WORD:46 [ memset::dst#2 memset::dst#3 memset::dst#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:53 [ clock::return#2 ] ] with [ zp ZP_DWORD:57 [ main::$12 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:53 [ clock::return#2 main::$12 ] ] with [ zp ZP_DWORD:71 [ clock::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:61 [ main::cyclecount#0 ] ] with [ zp ZP_DWORD:65 [ print_dword_at::dw#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:87 [ splinePlot::$7 ] ] with [ zp ZP_WORD:89 [ splinePlot::b_x#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:91 [ splinePlot::$10 ] ] with [ zp ZP_WORD:93 [ splinePlot::b_y#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:103 [ splinePlot::$14 ] ] with [ zp ZP_DWORD:107 [ splinePlot::$15 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:123 [ splinePlot::$20 ] ] with [ zp ZP_DWORD:127 [ splinePlot::$21 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:135 [ splinePlot::$24 ] ] with [ zp ZP_DWORD:139 [ splinePlot::$25 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:147 [ splinePlot::$27 ] ] with [ zp ZP_DWORD:151 [ splinePlot::$28 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:172 [ bitmap_plot::plotter#0 ] ] with [ zp ZP_WORD:176 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:14 [ splinePlot::p2_x#4 splinePlot::$1 ] ] with [ zp ZP_WORD:79 [ splinePlot::a_x#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ splinePlot::p2_y#4 splinePlot::$4 ] ] with [ zp ZP_WORD:85 [ splinePlot::a_y#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:32 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 splinePlot::$13 ] ] with [ zp ZP_DWORD:95 [ splinePlot::$12 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:36 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 splinePlot::$19 ] ] with [ zp ZP_DWORD:115 [ splinePlot::$18 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:53 [ clock::return#2 main::$12 clock::return#0 ] ] with [ zp ZP_DWORD:61 [ main::cyclecount#0 print_dword_at::dw#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:103 [ splinePlot::$14 splinePlot::$15 ] ] with [ zp ZP_DWORD:111 [ splinePlot::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:123 [ splinePlot::$20 splinePlot::$21 ] ] with [ zp ZP_DWORD:131 [ splinePlot::$22 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:135 [ splinePlot::$24 splinePlot::$25 ] ] with [ zp ZP_DWORD:143 [ splinePlot::j_x#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_DWORD:147 [ splinePlot::$27 splinePlot::$28 ] ] with [ zp ZP_DWORD:155 [ splinePlot::j_y#0 ] ] - score: 1
Allocated (was zp ZP_WORD:10) zp ZP_WORD:7 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:9 [ splinePlot::p1_x#4 splinePlot::$6 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:11 [ splinePlot::p2_x#4 splinePlot::$1 splinePlot::a_x#0 ]
Allocated (was zp ZP_WORD:16) zp ZP_WORD:13 [ splinePlot::p0_x#4 ]
Allocated (was zp ZP_WORD:18) zp ZP_WORD:15 [ splinePlot::p1_y#4 splinePlot::$9 ]
Allocated (was zp ZP_WORD:20) zp ZP_WORD:17 [ splinePlot::p2_y#4 splinePlot::$4 splinePlot::a_y#0 ]
Allocated (was zp ZP_WORD:22) zp ZP_WORD:19 [ splinePlot::p0_y#4 ]
Allocated (was zp ZP_DWORD:24) zp ZP_DWORD:21 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 splinePlot::$30 ]
Allocated (was zp ZP_DWORD:28) zp ZP_DWORD:25 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 splinePlot::$32 ]
Allocated (was zp ZP_DWORD:32) zp ZP_DWORD:29 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 splinePlot::$13 splinePlot::$12 ]
Allocated (was zp ZP_DWORD:36) zp ZP_DWORD:33 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 splinePlot::$19 splinePlot::$18 ]
Allocated (was zp ZP_WORD:41) zp ZP_WORD:37 [ memset::num#2 memset::end#0 ]
Allocated (was zp ZP_WORD:43) zp ZP_WORD:39 [ memset::str#3 memset::dst#2 memset::dst#3 memset::dst#1 ]
Allocated (was zp ZP_WORD:51) zp ZP_WORD:41 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated (was zp ZP_DWORD:53) zp ZP_DWORD:43 [ clock::return#2 main::$12 clock::return#0 main::cyclecount#0 print_dword_at::dw#0 ]
Allocated (was zp ZP_WORD:87) zp ZP_WORD:47 [ splinePlot::$7 splinePlot::b_x#0 ]
Allocated (was zp ZP_WORD:91) zp ZP_WORD:49 [ splinePlot::$10 splinePlot::b_y#0 ]
Allocated (was zp ZP_DWORD:103) zp ZP_DWORD:51 [ splinePlot::$14 splinePlot::$15 splinePlot::$16 ]
Allocated (was zp ZP_DWORD:123) zp ZP_DWORD:55 [ splinePlot::$20 splinePlot::$21 splinePlot::$22 ]
Allocated (was zp ZP_DWORD:135) zp ZP_DWORD:59 [ splinePlot::$24 splinePlot::$25 splinePlot::j_x#0 ]
Allocated (was zp ZP_DWORD:147) zp ZP_DWORD:63 [ splinePlot::$27 splinePlot::$28 splinePlot::j_y#0 ]
Allocated (was zp ZP_WORD:167) zp ZP_WORD:67 [ bitmap_plot::x#0 ]
Allocated (was zp ZP_WORD:169) zp ZP_WORD:69 [ splinePlot::$35 ]
Allocated (was zp ZP_WORD:172) zp ZP_WORD:71 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ]
Allocated (was zp ZP_WORD:174) zp ZP_WORD:73 [ bitmap_plot::$1 ]
Allocated (was zp ZP_BYTE:181) zp ZP_BYTE:75 [ bitmap_init::$7 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Quadratic Spline Library for the C64
// Implements an iterative algorithm using only addition for calculating quadratic splines
//
// A quadratic spline is a curve defined by 3 points: P0, P1 and P2.
// The curve connects P0 to P2 through a smooth curve that moves towards P1, but does usually not touch it.
//
// The general formula for the quadratic spline is as follows:
// A = P2 - 2*P1 + P0
// B = 2*P1 - 2*P0
// C = P0
// P(t) = A*t*t + B*t + C
// for 0 <= t <= 1
//
// This library implements a iterative algorithm using multiplications in the initialization and only additions for calculating each point on the spline.
// The iterative algorithm is based on the following:
// P(t+Dt) = P(t) + A*Dt*Dt + 2*A*t*Dt + B*Dt
//
// init:
//   N = 16 (number of plots)
//   Dt = 1/N
//   P = C
//   I = A*Dt*Dt + B*Dt
//   J = 2*A*Dt*Dt
// loop(N times):
//   plot(P)
//   P = P + I
//   I = I + J
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // CIA #2 Timer A+B Value (32-bit)
  .label CIA2_TIMER_AB = $dd04
  // CIA #2 Timer A Control Register
  .label CIA2_TIMER_A_CONTROL = $dd0e
  // CIA #2 Timer B Control Register
  .label CIA2_TIMER_B_CONTROL = $dd0f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer Control - Time CONTINUOUS/ONE-SHOT (0:CONTINUOUS, 1: ONE-SHOT)
  .const CIA_TIMER_CONTROL_CONTINUOUS = 0
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const WHITE = 1
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  .label SCREEN = $400
  .label BITMAP_SCREEN = $5c00
  .label BITMAP_GRAPHICS = $6000
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .const p0_x = $32
    .const p0_y = $32
    .const p1a_x = $64
    .const p1a_y = $32
    .const p1b_x = $32
    .const p1b_y = $64
    .const p2_x = $64
    .const p2_y = $64
    .const p3a_x = $96
    .const p3a_y = $64
    .const p3b_x = $64
    .const p3b_y = $96
    .const p4_x = $96
    .const p4_y = $96
    .const vicSelectGfxBank1_toDd001_return = 3^(>BITMAP_SCREEN)/$40
    .const toD0181_return = (>(BITMAP_SCREEN&$3fff)*4)|(>BITMAP_GRAPHICS)/4&$f
    .label _12 = $2b
    .label cyclecount = $2b
    // [5] call bitmap_init 
    // [130] phi from main to bitmap_init [phi:main->bitmap_init]
  bitmap_init_from_main:
    jsr bitmap_init
    // [6] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    jmp b2
    // main::@2
  b2:
    // [7] call bitmap_clear 
    // [116] phi from main::@2 to bitmap_clear [phi:main::@2->bitmap_clear]
  bitmap_clear_from_b2:
    jsr bitmap_clear
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
    // [9] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
    // [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    // [11] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1_b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp b1
    // main::@1
  b1:
    // [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [13] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [14] call clock_start 
    jsr clock_start
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
    // main::@3
  b3:
    // [16] call splinePlot 
    // [59] phi from main::@3 to splinePlot [phi:main::@3->splinePlot]
  splinePlot_from_b3:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p0_y#0 [phi:main::@3->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p0_y
    sta splinePlot.p0_y
    lda #>p0_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p2_y#0 [phi:main::@3->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p2_y
    lda #>p2_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p1a_y#0 [phi:main::@3->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p1a_y
    sta splinePlot.p1_y
    lda #>p1a_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p0_x#0 [phi:main::@3->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p0_x
    sta splinePlot.p0_x
    lda #>p0_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p2_x#0 [phi:main::@3->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p2_x
    lda #>p2_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p1a_x#0 [phi:main::@3->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p1a_x
    sta splinePlot.p1_x
    lda #>p1a_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [17] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
    // main::@4
  b4:
    // [18] call splinePlot 
    // [59] phi from main::@4 to splinePlot [phi:main::@4->splinePlot]
  splinePlot_from_b4:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p2_y#0 [phi:main::@4->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p0_y
    lda #>p2_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p4_y#0 [phi:main::@4->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p4_y
    sta splinePlot.p2_y
    lda #>p4_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p3a_y#0 [phi:main::@4->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p3a_y
    sta splinePlot.p1_y
    lda #>p3a_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p2_x#0 [phi:main::@4->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p0_x
    lda #>p2_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p4_x#0 [phi:main::@4->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p4_x
    sta splinePlot.p2_x
    lda #>p4_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p3a_x#0 [phi:main::@4->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p3a_x
    sta splinePlot.p1_x
    lda #>p3a_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  b5_from_b4:
    jmp b5
    // main::@5
  b5:
    // [20] call splinePlot 
    // [59] phi from main::@5 to splinePlot [phi:main::@5->splinePlot]
  splinePlot_from_b5:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p2_y#0 [phi:main::@5->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p0_y
    lda #>p2_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p0_y#0 [phi:main::@5->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p0_y
    sta splinePlot.p2_y
    lda #>p0_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p1b_y#0 [phi:main::@5->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p1b_y
    sta splinePlot.p1_y
    lda #>p1b_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p2_x#0 [phi:main::@5->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p0_x
    lda #>p2_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p0_x#0 [phi:main::@5->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p0_x
    sta splinePlot.p2_x
    lda #>p0_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p1b_x#0 [phi:main::@5->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p1b_x
    sta splinePlot.p1_x
    lda #>p1b_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [21] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    jmp b6
    // main::@6
  b6:
    // [22] call splinePlot 
    // [59] phi from main::@6 to splinePlot [phi:main::@6->splinePlot]
  splinePlot_from_b6:
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p4_y#0 [phi:main::@6->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p4_y
    sta splinePlot.p0_y
    lda #>p4_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p2_y#0 [phi:main::@6->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p2_y
    lda #>p2_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p3b_y#0 [phi:main::@6->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p3b_y
    sta splinePlot.p1_y
    lda #>p3b_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p4_x#0 [phi:main::@6->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p4_x
    sta splinePlot.p0_x
    lda #>p4_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p2_x#0 [phi:main::@6->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p2_x
    lda #>p2_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p3b_x#0 [phi:main::@6->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p3b_x
    sta splinePlot.p1_x
    lda #>p3b_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [23] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
    // main::@7
  b7:
    // [24] call clock 
    jsr clock
    // [25] (dword) clock::return#2 ← (dword) clock::return#0
    jmp b8
    // main::@8
  b8:
    // [26] (dword~) main::$12 ← (dword) clock::return#2
    // [27] (dword) main::cyclecount#0 ← (dword~) main::$12 - (const dword) CLOCKS_PER_INIT#0 -- vduz1=vduz1_minus_vduc1 
    lda cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta cyclecount
    lda cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta cyclecount+1
    lda cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta cyclecount+2
    lda cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta cyclecount+3
    // [28] (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0
    // [29] call print_dword_at 
    jsr print_dword_at
    jmp breturn
    // main::@return
  breturn:
    // [30] return 
    rts
}
  // print_dword_at
// Print a dword as HEX at a specific position
// print_dword_at(dword zeropage($2b) dw)
print_dword_at: {
    .label dw = $2b
    // [31] (word) print_word_at::w#0 ← > (dword) print_dword_at::dw#0 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word_at.w
    lda dw+3
    sta print_word_at.w+1
    // [32] call print_word_at 
    // [36] phi from print_dword_at to print_word_at [phi:print_dword_at->print_word_at]
  print_word_at_from_print_dword_at:
    // [36] phi (byte*) print_word_at::at#2 = (const byte*) SCREEN#0 [phi:print_dword_at->print_word_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta print_word_at.at
    lda #>SCREEN
    sta print_word_at.at+1
    // [36] phi (word) print_word_at::w#2 = (word) print_word_at::w#0 [phi:print_dword_at->print_word_at#1] -- register_copy 
    jsr print_word_at
    jmp b1
    // print_dword_at::@1
  b1:
    // [33] (word) print_word_at::w#1 ← < (dword) print_dword_at::dw#0 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word_at.w
    lda dw+1
    sta print_word_at.w+1
    // [34] call print_word_at 
    // [36] phi from print_dword_at::@1 to print_word_at [phi:print_dword_at::@1->print_word_at]
  print_word_at_from_b1:
    // [36] phi (byte*) print_word_at::at#2 = (const byte*) SCREEN#0+(byte) 4 [phi:print_dword_at::@1->print_word_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+4
    sta print_word_at.at
    lda #>SCREEN+4
    sta print_word_at.at+1
    // [36] phi (word) print_word_at::w#2 = (word) print_word_at::w#1 [phi:print_dword_at::@1->print_word_at#1] -- register_copy 
    jsr print_word_at
    jmp breturn
    // print_dword_at::@return
  breturn:
    // [35] return 
    rts
}
  // print_word_at
// Print a word as HEX at a specific position
// print_word_at(word zeropage(2) w, byte* zeropage(4) at)
print_word_at: {
    .label w = 2
    .label at = 4
    // [37] (byte) print_byte_at::b#0 ← > (word) print_word_at::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte_at.b
    // [38] (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2
    // [39] call print_byte_at 
    // [44] phi from print_word_at to print_byte_at [phi:print_word_at->print_byte_at]
  print_byte_at_from_print_word_at:
    // [44] phi (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#0 [phi:print_word_at->print_byte_at#0] -- register_copy 
    // [44] phi (byte) print_byte_at::b#2 = (byte) print_byte_at::b#0 [phi:print_word_at->print_byte_at#1] -- register_copy 
    jsr print_byte_at
    jmp b1
    // print_word_at::@1
  b1:
    // [40] (byte) print_byte_at::b#1 ← < (word) print_word_at::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte_at.b
    // [41] (byte*) print_byte_at::at#1 ← (byte*) print_word_at::at#2 + (byte) 2 -- pbuz1=pbuz1_plus_2 
    lda print_byte_at.at
    clc
    adc #2
    sta print_byte_at.at
    bcc !+
    inc print_byte_at.at+1
  !:
    // [42] call print_byte_at 
    // [44] phi from print_word_at::@1 to print_byte_at [phi:print_word_at::@1->print_byte_at]
  print_byte_at_from_b1:
    // [44] phi (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#1 [phi:print_word_at::@1->print_byte_at#0] -- register_copy 
    // [44] phi (byte) print_byte_at::b#2 = (byte) print_byte_at::b#1 [phi:print_word_at::@1->print_byte_at#1] -- register_copy 
    jsr print_byte_at
    jmp breturn
    // print_word_at::@return
  breturn:
    // [43] return 
    rts
}
  // print_byte_at
// Print a byte as HEX at a specific position
// print_byte_at(byte zeropage(6) b, byte* zeropage(4) at)
print_byte_at: {
    .label b = 6
    .label at = 4
    // [45] (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    // [46] (byte) print_char_at::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) -- vbuxx=pbuc1_derefidx_vbuaa 
    tay
    ldx print_hextab,y
    // [47] (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2 -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
    // [48] call print_char_at 
    // [54] phi from print_byte_at to print_char_at [phi:print_byte_at->print_char_at]
  print_char_at_from_print_byte_at:
    // [54] phi (byte*) print_char_at::at#2 = (byte*) print_char_at::at#0 [phi:print_byte_at->print_char_at#0] -- register_copy 
    // [54] phi (byte) print_char_at::ch#2 = (byte) print_char_at::ch#0 [phi:print_byte_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp b1
    // print_byte_at::@1
  b1:
    // [49] (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte) $f -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and b
    tay
    // [50] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#2 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_char_at.at
    lda at+1
    adc #0
    sta print_char_at.at+1
    // [51] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx print_hextab,y
    // [52] call print_char_at 
    // [54] phi from print_byte_at::@1 to print_char_at [phi:print_byte_at::@1->print_char_at]
  print_char_at_from_b1:
    // [54] phi (byte*) print_char_at::at#2 = (byte*) print_char_at::at#1 [phi:print_byte_at::@1->print_char_at#0] -- register_copy 
    // [54] phi (byte) print_char_at::ch#2 = (byte) print_char_at::ch#1 [phi:print_byte_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    jmp breturn
    // print_byte_at::@return
  breturn:
    // [53] return 
    rts
}
  // print_char_at
// Print a single char
// print_char_at(byte register(X) ch, byte* zeropage(7) at)
print_char_at: {
    .label at = 7
    // [55] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (at),y
    jmp breturn
    // print_char_at::@return
  breturn:
    // [56] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $2b
    // [57] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0) -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta return+3
    jmp breturn
    // clock::@return
  breturn:
    // [58] return 
    rts
}
  // splinePlot
// splinePlot(signed word zeropage($d) p0_x, signed word zeropage($13) p0_y, signed word zeropage(9) p1_x, signed word zeropage($f) p1_y, signed word zeropage($b) p2_x, signed word zeropage($11) p2_y)
splinePlot: {
    .label _1 = $b
    .label _4 = $11
    .label _6 = 9
    .label _7 = $2f
    .label _9 = $f
    .label _10 = $31
    .label _12 = $1d
    .label _13 = $1d
    .label _14 = $33
    .label _15 = $33
    .label _16 = $33
    .label _18 = $21
    .label _19 = $21
    .label _20 = $37
    .label _21 = $37
    .label _22 = $37
    .label _24 = $3b
    .label _25 = $3b
    .label _27 = $3f
    .label _28 = $3f
    .label _30 = $15
    .label _32 = $19
    .label _35 = $45
    .label a_x = $b
    .label a_y = $11
    .label b_x = $2f
    .label b_y = $31
    .label i_x = $1d
    .label i_y = $21
    .label j_x = $3b
    .label j_y = $3f
    .label p_x = $15
    .label p_y = $19
    .label p1_x = 9
    .label p2_x = $b
    .label p0_x = $d
    .label p1_y = $f
    .label p2_y = $11
    .label p0_y = $13
    // [60] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _6
    rol _6+1
    // [61] (signed word~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$6 -- vwsz1=vwsz1_minus_vwsz2 
    lda _1
    sec
    sbc _6
    sta _1
    lda _1+1
    sbc _6+1
    sta _1+1
    // [62] (signed word) splinePlot::a_x#0 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4 -- vwsz1=vwsz1_plus_vwsz2 
    lda a_x
    clc
    adc p0_x
    sta a_x
    lda a_x+1
    adc p0_x+1
    sta a_x+1
    // [63] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _9
    rol _9+1
    // [64] (signed word~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$9 -- vwsz1=vwsz1_minus_vwsz2 
    lda _4
    sec
    sbc _9
    sta _4
    lda _4+1
    sbc _9+1
    sta _4+1
    // [65] (signed word) splinePlot::a_y#0 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4 -- vwsz1=vwsz1_plus_vwsz2 
    lda a_y
    clc
    adc p0_y
    sta a_y
    lda a_y+1
    adc p0_y+1
    sta a_y+1
    // [66] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p0_x
    asl
    sta _7
    lda p0_x+1
    rol
    sta _7+1
    // [67] (signed word) splinePlot::b_x#0 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7 -- vwsz1=vwsz2_minus_vwsz1 
    lda _6
    sec
    sbc b_x
    sta b_x
    lda _6+1
    sbc b_x+1
    sta b_x+1
    // [68] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p0_y
    asl
    sta _10
    lda p0_y+1
    rol
    sta _10+1
    // [69] (signed word) splinePlot::b_y#0 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10 -- vwsz1=vwsz2_minus_vwsz1 
    lda _9
    sec
    sbc b_y
    sta b_y
    lda _9+1
    sbc b_y+1
    sta b_y+1
    // [70] (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0 -- vdsz1=_sdword_vwsz2 
    lda a_x
    sta _12
    lda a_x+1
    sta _12+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _12+2
    sta _12+3
    // [71] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _13+2
    sta _13+3
    lda _13+1
    sta _13+2
    lda _13
    sta _13+1
    lda #0
    sta _13
    // [72] (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0 -- vdsz1=_sdword_vwsz2 
    lda b_x
    sta _14
    lda b_x+1
    sta _14+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _14+2
    sta _14+3
    // [73] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _15+2
    sta _15+3
    lda _15+1
    sta _15+2
    lda _15
    sta _15+1
    lda #0
    sta _15
    // [74] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 << (byte) 4 -- vdsz1=vdsz1_rol_4 
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    // [75] (signed dword) splinePlot::i_x#0 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_x
    clc
    adc _16
    sta i_x
    lda i_x+1
    adc _16+1
    sta i_x+1
    lda i_x+2
    adc _16+2
    sta i_x+2
    lda i_x+3
    adc _16+3
    sta i_x+3
    // [76] (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0 -- vdsz1=_sdword_vwsz2 
    lda a_y
    sta _18
    lda a_y+1
    sta _18+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _18+2
    sta _18+3
    // [77] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _19+2
    sta _19+3
    lda _19+1
    sta _19+2
    lda _19
    sta _19+1
    lda #0
    sta _19
    // [78] (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0 -- vdsz1=_sdword_vwsz2 
    lda b_y
    sta _20
    lda b_y+1
    sta _20+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _20+2
    sta _20+3
    // [79] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _21+2
    sta _21+3
    lda _21+1
    sta _21+2
    lda _21
    sta _21+1
    lda #0
    sta _21
    // [80] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 << (byte) 4 -- vdsz1=vdsz1_rol_4 
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    // [81] (signed dword) splinePlot::i_y#0 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_y
    clc
    adc _22
    sta i_y
    lda i_y+1
    adc _22+1
    sta i_y+1
    lda i_y+2
    adc _22+2
    sta i_y+2
    lda i_y+3
    adc _22+3
    sta i_y+3
    // [82] (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0 -- vdsz1=_sdword_vwsz2 
    lda a_x
    sta _24
    lda a_x+1
    sta _24+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _24+2
    sta _24+3
    // [83] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _25+2
    sta _25+3
    lda _25+1
    sta _25+2
    lda _25
    sta _25+1
    lda #0
    sta _25
    // [84] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 << (byte) 1 -- vdsz1=vdsz1_rol_1 
    asl j_x
    rol j_x+1
    rol j_x+2
    rol j_x+3
    // [85] (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0 -- vdsz1=_sdword_vwsz2 
    lda a_y
    sta _27
    lda a_y+1
    sta _27+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _27+2
    sta _27+3
    // [86] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _28+2
    sta _28+3
    lda _28+1
    sta _28+2
    lda _28
    sta _28+1
    lda #0
    sta _28
    // [87] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 << (byte) 1 -- vdsz1=vdsz1_rol_1 
    asl j_y
    rol j_y+1
    rol j_y+2
    rol j_y+3
    // [88] (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4 -- vdsz1=_sdword_vwsz2 
    lda p0_x
    sta _30
    lda p0_x+1
    sta _30+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _30+2
    sta _30+3
    // [89] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 << (byte) $10 -- vdsz1=vdsz1_rol_16 
    lda p_x+1
    sta p_x+3
    lda p_x
    sta p_x+2
    lda #0
    sta p_x
    sta p_x+1
    // [90] (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4 -- vdsz1=_sdword_vwsz2 
    lda p0_y
    sta _32
    lda p0_y+1
    sta _32+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _32+2
    sta _32+3
    // [91] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 << (byte) $10 -- vdsz1=vdsz1_rol_16 
    lda p_y+1
    sta p_y+3
    lda p_y
    sta p_y+2
    lda #0
    sta p_y
    sta p_y+1
    // [92] phi from splinePlot to splinePlot::@1 [phi:splinePlot->splinePlot::@1]
  b1_from_splinePlot:
    // [92] phi (byte) splinePlot::n#2 = (byte) 0 [phi:splinePlot->splinePlot::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#0 [phi:splinePlot->splinePlot::@1#1] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#0 [phi:splinePlot->splinePlot::@1#2] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#0 [phi:splinePlot->splinePlot::@1#3] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#0 [phi:splinePlot->splinePlot::@1#4] -- register_copy 
    jmp b1
    // [92] phi from splinePlot::@2 to splinePlot::@1 [phi:splinePlot::@2->splinePlot::@1]
  b1_from_b2:
    // [92] phi (byte) splinePlot::n#2 = (byte) splinePlot::n#1 [phi:splinePlot::@2->splinePlot::@1#0] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#1 [phi:splinePlot::@2->splinePlot::@1#1] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#1 [phi:splinePlot::@2->splinePlot::@1#2] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#1 [phi:splinePlot::@2->splinePlot::@1#3] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#1 [phi:splinePlot::@2->splinePlot::@1#4] -- register_copy 
    jmp b1
    // splinePlot::@1
  b1:
    // [93] (word) bitmap_plot::x#0 ← > (signed dword) splinePlot::p_x#2 -- vwuz1=_hi_vdsz2 
    lda p_x+2
    sta bitmap_plot.x
    lda p_x+3
    sta bitmap_plot.x+1
    // [94] (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2 -- vwuz1=_hi_vdsz2 
    lda p_y+2
    sta _35
    lda p_y+3
    sta _35+1
    // [95] (byte) bitmap_plot::y#0 ← < (word~) splinePlot::$35 -- vbuaa=_lo_vwuz1 
    lda _35
    // [96] call bitmap_plot 
    jsr bitmap_plot
    jmp b2
    // splinePlot::@2
  b2:
    // [97] (signed dword) splinePlot::p_x#1 ← (signed dword) splinePlot::p_x#2 + (signed dword) splinePlot::i_x#2 -- vdsz1=vdsz1_plus_vdsz2 
    lda p_x
    clc
    adc i_x
    sta p_x
    lda p_x+1
    adc i_x+1
    sta p_x+1
    lda p_x+2
    adc i_x+2
    sta p_x+2
    lda p_x+3
    adc i_x+3
    sta p_x+3
    // [98] (signed dword) splinePlot::p_y#1 ← (signed dword) splinePlot::p_y#2 + (signed dword) splinePlot::i_y#2 -- vdsz1=vdsz1_plus_vdsz2 
    lda p_y
    clc
    adc i_y
    sta p_y
    lda p_y+1
    adc i_y+1
    sta p_y+1
    lda p_y+2
    adc i_y+2
    sta p_y+2
    lda p_y+3
    adc i_y+3
    sta p_y+3
    // [99] (signed dword) splinePlot::i_x#1 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#0 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_x
    clc
    adc j_x
    sta i_x
    lda i_x+1
    adc j_x+1
    sta i_x+1
    lda i_x+2
    adc j_x+2
    sta i_x+2
    lda i_x+3
    adc j_x+3
    sta i_x+3
    // [100] (signed dword) splinePlot::i_y#1 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#0 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_y
    clc
    adc j_y
    sta i_y
    lda i_y+1
    adc j_y+1
    sta i_y+1
    lda i_y+2
    adc j_y+2
    sta i_y+2
    lda i_y+3
    adc j_y+3
    sta i_y+3
    // [101] (byte) splinePlot::n#1 ← ++ (byte) splinePlot::n#2 -- vbuxx=_inc_vbuxx 
    inx
    // [102] if((byte) splinePlot::n#1!=(byte) $11) goto splinePlot::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$11
    bne b1_from_b2
    jmp breturn
    // splinePlot::@return
  breturn:
    // [103] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zeropage($43) x, byte register(A) y)
bitmap_plot: {
    .label _1 = $49
    .label plotter = $47
    .label x = $43
    // [104] (word) bitmap_plot::plotter#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta plotter+1
    lda bitmap_plot_ylo,y
    sta plotter
    // [105] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
    // [106] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1 -- pbuz1=pbuz1_plus_vwuz2 
    lda plotter
    clc
    adc _1
    sta plotter
    lda plotter+1
    adc _1+1
    sta plotter+1
    // [107] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 -- vbuaa=_lo_vwuz1 
    lda x
    // [108] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuaa 
    tay
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp breturn
    // bitmap_plot::@return
  breturn:
    // [109] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [110] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #CIA_TIMER_CONTROL_CONTINUOUS
    sta CIA2_TIMER_A_CONTROL
    // [111] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2_TIMER_B_CONTROL
    // [112] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [113] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2_TIMER_B_CONTROL
    // [114] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2_TIMER_A_CONTROL
    jmp breturn
    // clock_start::@return
  breturn:
    // [115] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // [117] call memset 
    // [121] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [121] phi (byte) memset::c#3 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [121] phi (void*) memset::str#3 = (void*)(const byte*) BITMAP_SCREEN#0 [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_SCREEN
    sta memset.str
    lda #>BITMAP_SCREEN
    sta memset.str+1
    // [121] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta memset.num
    lda #>$3e8
    sta memset.num+1
    jsr memset
    // [118] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  b1_from_bitmap_clear:
    jmp b1
    // bitmap_clear::@1
  b1:
    // [119] call memset 
    // [121] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from_b1:
    // [121] phi (byte) memset::c#3 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [121] phi (void*) memset::str#3 = (void*)(const byte*) BITMAP_GRAPHICS#0 [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_GRAPHICS
    sta memset.str
    lda #>BITMAP_GRAPHICS
    sta memset.str+1
    // [121] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta memset.num
    lda #>$1f40
    sta memset.num+1
    jsr memset
    jmp breturn
    // bitmap_clear::@return
  breturn:
    // [120] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($27) str, byte register(X) c, word zeropage($25) num)
memset: {
    .label end = $25
    .label dst = $27
    .label num = $25
    .label str = $27
    // [122] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda num
    beq breturn
    lda num+1
    beq breturn
    jmp b1
    // memset::@1
  b1:
    // [123] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda end
    clc
    adc str
    sta end
    lda end+1
    adc str+1
    sta end+1
    // [124] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
    // [125] phi from memset::@1 memset::@2 to memset::@2 [phi:memset::@1/memset::@2->memset::@2]
  b2_from_b1:
  b2_from_b2:
    // [125] phi (byte*) memset::dst#2 = (byte*~) memset::dst#3 [phi:memset::@1/memset::@2->memset::@2#0] -- register_copy 
    jmp b2
    // memset::@2
  b2:
    // [126] *((byte*) memset::dst#2) ← (byte) memset::c#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [127] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // [128] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda dst+1
    cmp end+1
    bne b2_from_b2
    lda dst
    cmp end
    bne b2_from_b2
    jmp breturn
    // memset::@return
  breturn:
    // [129] return 
    rts
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label _7 = $4b
    .label yoffs = $29
    // [131] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  b1_from_bitmap_init:
    // [131] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [131] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp b1
    // [131] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  b1_from_b2:
    // [131] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [131] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp b1
    // bitmap_init::@1
  b1:
    // [132] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // [133] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // [134] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b6_from_b1
    // [136] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  b2_from_b1:
    // [136] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp b2
    // [135] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  b6_from_b1:
    jmp b6
    // bitmap_init::@6
  b6:
    // [136] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  b2_from_b6:
    // [136] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp b2
    // bitmap_init::@2
  b2:
    // [137] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [138] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b2
    // [139] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  b3_from_b2:
    // [139] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP_GRAPHICS#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP_GRAPHICS
    sta yoffs
    lda #>BITMAP_GRAPHICS
    sta yoffs+1
    // [139] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
    // [139] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  b3_from_b4:
    // [139] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [139] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp b3
    // bitmap_init::@3
  b3:
    // [140] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax _7
    // [141] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
    // [142] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora _7
    // [143] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [144] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
    // [145] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [146] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp _7
    bne b4_from_b3
    jmp b5
    // bitmap_init::@5
  b5:
    // [147] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
    // [148] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  b4_from_b3:
  b4_from_b5:
    // [148] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp b4
    // bitmap_init::@4
  b4:
    // [149] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [150] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3_from_b4
    jmp breturn
    // bitmap_init::@return
  breturn:
    // [151] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1_b1
Removing instruction jmp toD0181
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b2 with b1
Replacing label b2_from_b2 with b2
Replacing label b2_from_b2 with b2
Replacing label b6_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b3_from_b4 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_main:
Removing instruction bitmap_clear_from_b2:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_vicSelectGfxBank1_b1:
Removing instruction toD0181:
Removing instruction b3_from_b1:
Removing instruction splinePlot_from_b3:
Removing instruction b4_from_b3:
Removing instruction splinePlot_from_b4:
Removing instruction b5_from_b4:
Removing instruction splinePlot_from_b5:
Removing instruction b6_from_b5:
Removing instruction splinePlot_from_b6:
Removing instruction b7_from_b6:
Removing instruction b1_from_b2:
Removing instruction b1_from_bitmap_clear:
Removing instruction memset_from_b1:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b2:
Removing instruction b6_from_b1:
Removing instruction b6:
Removing instruction b2_from_b6:
Removing instruction b3_from_b4:
Removing instruction b4_from_b3:
Removing instruction b4_from_b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction bitmap_init_from_main:
Removing instruction b2:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_b1:
Removing instruction b1:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction print_word_at_from_print_dword_at:
Removing instruction b1:
Removing instruction print_word_at_from_b1:
Removing instruction breturn:
Removing instruction print_byte_at_from_print_word_at:
Removing instruction b1:
Removing instruction print_byte_at_from_b1:
Removing instruction breturn:
Removing instruction print_char_at_from_print_byte_at:
Removing instruction b1:
Removing instruction print_char_at_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_splinePlot:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction memset_from_bitmap_clear:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1:
Removing instruction b1_from_bitmap_init:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b5:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BITMAP_GRAPHICS
(const byte*) BITMAP_GRAPHICS#0 BITMAP_GRAPHICS = (byte*) 24576
(byte*) BITMAP_SCREEN
(const byte*) BITMAP_SCREEN#0 BITMAP_SCREEN = (byte*) 23552
(byte) BLACK
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = (byte*) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = (byte*) 56578
(dword*) CIA2_TIMER_AB
(const dword*) CIA2_TIMER_AB#0 CIA2_TIMER_AB = (dword*) 56580
(byte*) CIA2_TIMER_A_CONTROL
(const byte*) CIA2_TIMER_A_CONTROL#0 CIA2_TIMER_A_CONTROL = (byte*) 56590
(byte*) CIA2_TIMER_B_CONTROL
(const byte*) CIA2_TIMER_B_CONTROL#0 CIA2_TIMER_B_CONTROL = (byte*) 56591
(byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
(byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = (byte) $40
(byte) CIA_TIMER_CONTROL_CONTINUOUS
(const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 CIA_TIMER_CONTROL_CONTINUOUS = (byte) 0
(byte) CIA_TIMER_CONTROL_START
(const byte) CIA_TIMER_CONTROL_START#0 CIA_TIMER_CONTROL_START = (byte) 1
(byte) CIA_TIMER_CONTROL_STOP
(dword) CLOCKS_PER_INIT
(const dword) CLOCKS_PER_INIT#0 CLOCKS_PER_INIT = (byte) $12
(byte*) D011
(const byte*) D011#0 D011 = (byte*) 53265
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(signed word) SplineVector16::x
(signed word) SplineVector16::y
(signed dword) SplineVector32::x
(signed dword) SplineVector32::y
(byte) VIC_BMM
(const byte) VIC_BMM#0 VIC_BMM = (byte) $20
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte) $10
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte) 8
(byte) WHITE
(const byte) WHITE#0 WHITE = (byte) 1
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(label) bitmap_clear::@1
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(const byte) bitmap_clear::col#0 col = (const byte) WHITE#0*(byte) $10
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 reg byte a 22.0
(byte~) bitmap_init::$5 reg byte a 22.0
(byte~) bitmap_init::$6 reg byte a 22.0
(byte~) bitmap_init::$7 $7 zp ZP_BYTE:75 5.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 11.0
(byte) bitmap_init::bits#3 reg byte a 16.5
(byte) bitmap_init::bits#4 reg byte a 7.333333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 5.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp ZP_WORD:41 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp ZP_WORD:41 6.875
(byte*) bitmap_init::yoffs#4 yoffs zp ZP_WORD:41 11.0
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$1 $1 zp ZP_WORD:73 4.0
(byte~) bitmap_plot::$2 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp ZP_WORD:71 1.0
(byte*) bitmap_plot::plotter#1 plotter zp ZP_WORD:71 3.0
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp ZP_WORD:67 2.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte a 15.0
(byte[$100]) bitmap_plot_bit
(const byte[$100]) bitmap_plot_bit#0 bitmap_plot_bit = { fill( $100, 0) }
(byte[$100]) bitmap_plot_yhi
(const byte[$100]) bitmap_plot_yhi#0 bitmap_plot_yhi = { fill( $100, 0) }
(byte[$100]) bitmap_plot_ylo
(const byte[$100]) bitmap_plot_ylo#0 bitmap_plot_ylo = { fill( $100, 0) }
(byte*) bitmap_screen
(dword()) clock()
(label) clock::@return
(dword) clock::return
(dword) clock::return#0 return zp ZP_DWORD:43 1.3333333333333333
(dword) clock::return#2 return zp ZP_DWORD:43 4.0
(void()) clock_start()
(label) clock_start::@return
(void()) main()
(dword~) main::$12 $12 zp ZP_DWORD:43 4.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(dword) main::cyclecount
(dword) main::cyclecount#0 cyclecount zp ZP_DWORD:43 4.0
(signed word) main::p0_x
(const signed word) main::p0_x#0 p0_x = (signed byte) $32
(signed word) main::p0_y
(const signed word) main::p0_y#0 p0_y = (signed byte) $32
(signed word) main::p1a_x
(const signed word) main::p1a_x#0 p1a_x = (signed byte) $64
(signed word) main::p1a_y
(const signed word) main::p1a_y#0 p1a_y = (signed byte) $32
(signed word) main::p1b_x
(const signed word) main::p1b_x#0 p1b_x = (signed byte) $32
(signed word) main::p1b_y
(const signed word) main::p1b_y#0 p1b_y = (signed byte) $64
(signed word) main::p2_x
(const signed word) main::p2_x#0 p2_x = (signed byte) $64
(signed word) main::p2_y
(const signed word) main::p2_y#0 p2_y = (signed byte) $64
(signed word) main::p3a_x
(const signed word) main::p3a_x#0 p3a_x = (signed word) $96
(signed word) main::p3a_y
(const signed word) main::p3a_y#0 p3a_y = (signed byte) $64
(signed word) main::p3b_x
(const signed word) main::p3b_x#0 p3b_x = (signed byte) $64
(signed word) main::p3b_y
(const signed word) main::p3b_y#0 p3b_y = (signed word) $96
(signed word) main::p4_x
(const signed word) main::p4_x#0 p4_x = (signed word) $96
(signed word) main::p4_y
(const signed word) main::p4_y#0 p4_y = (signed word) $96
(label) main::toD0181
(word~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(number~) main::toD0181_$3
(word~) main::toD0181_$4
(byte~) main::toD0181_$5
(number~) main::toD0181_$6
(number~) main::toD0181_$7
(number~) main::toD0181_$8
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) BITMAP_SCREEN#0&(word) $3fff*(byte) 4|>(word)(const byte*) BITMAP_GRAPHICS#0/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(word~) main::vicSelectGfxBank1_toDd001_$0
(byte~) main::vicSelectGfxBank1_toDd001_$1
(number~) main::vicSelectGfxBank1_toDd001_$2
(number~) main::vicSelectGfxBank1_toDd001_$3
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3^>(word)(const byte*) BITMAP_SCREEN#0/(byte) $40
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(byte) memset::c#3 reg byte x 1.375
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:39 16.5
(byte*) memset::dst#2 dst zp ZP_WORD:39 17.5
(byte*~) memset::dst#3 dst zp ZP_WORD:39 4.0
(byte*) memset::end
(byte*) memset::end#0 end zp ZP_WORD:37 2.1666666666666665
(word) memset::num
(word) memset::num#2 num zp ZP_WORD:37 2.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp ZP_WORD:39
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0 reg byte a 4.0
(byte~) print_byte_at::$2 reg byte y 2.0
(label) print_byte_at::@1
(label) print_byte_at::@return
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0 at zp ZP_WORD:4 4.0
(byte*) print_byte_at::at#1 at zp ZP_WORD:4 4.0
(byte*) print_byte_at::at#2 at zp ZP_WORD:4 1.3333333333333333
(byte) print_byte_at::b
(byte) print_byte_at::b#0 b zp ZP_BYTE:6 2.0
(byte) print_byte_at::b#1 b zp ZP_BYTE:6 2.0
(byte) print_byte_at::b#2 b zp ZP_BYTE:6 1.6
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0 at zp ZP_WORD:7 4.0
(byte*) print_char_at::at#1 at zp ZP_WORD:7 2.0
(byte*) print_char_at::at#2 at zp ZP_WORD:7 6.0
(byte) print_char_at::ch
(byte) print_char_at::ch#0 reg byte x 2.0
(byte) print_char_at::ch#1 reg byte x 4.0
(byte) print_char_at::ch#2 reg byte x 6.0
(void()) print_dword_at((dword) print_dword_at::dw , (byte*) print_dword_at::at)
(label) print_dword_at::@1
(label) print_dword_at::@return
(byte*) print_dword_at::at
(dword) print_dword_at::dw
(dword) print_dword_at::dw#0 dw zp ZP_DWORD:43 2.0
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(void()) print_word_at((word) print_word_at::w , (byte*) print_word_at::at)
(label) print_word_at::@1
(label) print_word_at::@return
(byte*) print_word_at::at
(byte*) print_word_at::at#2 at zp ZP_WORD:4 0.8
(word) print_word_at::w
(word) print_word_at::w#0 w zp ZP_WORD:2 4.0
(word) print_word_at::w#1 w zp ZP_WORD:2 4.0
(word) print_word_at::w#2 w zp ZP_WORD:2 2.0
(void()) splinePlot((signed word) splinePlot::p0_x , (signed word) splinePlot::p0_y , (signed word) splinePlot::p1_x , (signed word) splinePlot::p1_y , (signed word) splinePlot::p2_x , (signed word) splinePlot::p2_y)
(signed word~) splinePlot::$1 $1 zp ZP_WORD:11 4.0
(signed word~) splinePlot::$10 $10 zp ZP_WORD:49 4.0
(signed dword~) splinePlot::$12 $12 zp ZP_DWORD:29 4.0
(signed dword~) splinePlot::$13 $13 zp ZP_DWORD:29 1.0
(signed dword~) splinePlot::$14 $14 zp ZP_DWORD:51 4.0
(signed dword~) splinePlot::$15 $15 zp ZP_DWORD:51 4.0
(signed dword~) splinePlot::$16 $16 zp ZP_DWORD:51 4.0
(signed dword~) splinePlot::$18 $18 zp ZP_DWORD:33 4.0
(signed dword~) splinePlot::$19 $19 zp ZP_DWORD:33 1.0
(signed dword~) splinePlot::$20 $20 zp ZP_DWORD:55 4.0
(signed dword~) splinePlot::$21 $21 zp ZP_DWORD:55 4.0
(signed dword~) splinePlot::$22 $22 zp ZP_DWORD:55 4.0
(signed dword~) splinePlot::$24 $24 zp ZP_DWORD:59 4.0
(signed dword~) splinePlot::$25 $25 zp ZP_DWORD:59 4.0
(signed dword~) splinePlot::$27 $27 zp ZP_DWORD:63 4.0
(signed dword~) splinePlot::$28 $28 zp ZP_DWORD:63 4.0
(signed dword~) splinePlot::$30 $30 zp ZP_DWORD:21 4.0
(signed dword~) splinePlot::$32 $32 zp ZP_DWORD:25 4.0
(word~) splinePlot::$35 $35 zp ZP_WORD:69 22.0
(signed word~) splinePlot::$4 $4 zp ZP_WORD:17 4.0
(signed word~) splinePlot::$6 $6 zp ZP_WORD:9 0.8571428571428571
(signed word~) splinePlot::$7 $7 zp ZP_WORD:47 4.0
(signed word~) splinePlot::$9 $9 zp ZP_WORD:15 1.0
(label) splinePlot::@1
(label) splinePlot::@2
(label) splinePlot::@return
(signed word) splinePlot::a_x
(signed word) splinePlot::a_x#0 a_x zp ZP_WORD:11 0.1
(signed word) splinePlot::a_y
(signed word) splinePlot::a_y#0 a_y zp ZP_WORD:17 0.1
(signed word) splinePlot::b_x
(signed word) splinePlot::b_x#0 b_x zp ZP_WORD:47 0.4
(signed word) splinePlot::b_y
(signed word) splinePlot::b_y#0 b_y zp ZP_WORD:49 0.2222222222222222
(signed dword) splinePlot::i_x
(signed dword) splinePlot::i_x#0 i_x zp ZP_DWORD:29 0.23529411764705882
(signed dword) splinePlot::i_x#1 i_x zp ZP_DWORD:29 5.5
(signed dword) splinePlot::i_x#2 i_x zp ZP_DWORD:29 5.0
(signed dword) splinePlot::i_y
(signed dword) splinePlot::i_y#0 i_y zp ZP_DWORD:33 0.36363636363636365
(signed dword) splinePlot::i_y#1 i_y zp ZP_DWORD:33 7.333333333333333
(signed dword) splinePlot::i_y#2 i_y zp ZP_DWORD:33 4.375
(signed dword) splinePlot::j_x
(signed dword) splinePlot::j_x#0 j_x zp ZP_DWORD:59 0.6842105263157895
(signed dword) splinePlot::j_y
(signed dword) splinePlot::j_y#0 j_y zp ZP_DWORD:63 0.8125
(byte) splinePlot::n
(byte) splinePlot::n#1 reg byte x 16.5
(byte) splinePlot::n#2 reg byte x 2.4444444444444446
(struct SplineVector16) splinePlot::p0
(signed word) splinePlot::p0_x
(signed word) splinePlot::p0_x#4 p0_x zp ZP_WORD:13 0.13793103448275862
(signed word) splinePlot::p0_y
(signed word) splinePlot::p0_y#4 p0_y zp ZP_WORD:19 0.12903225806451613
(struct SplineVector16) splinePlot::p1
(signed word) splinePlot::p1_x
(signed word) splinePlot::p1_x#4 p1_x zp ZP_WORD:9 2.0
(signed word) splinePlot::p1_y
(signed word) splinePlot::p1_y#4 p1_y zp ZP_WORD:15 0.5
(struct SplineVector16) splinePlot::p2
(signed word) splinePlot::p2_x
(signed word) splinePlot::p2_x#4 p2_x zp ZP_WORD:11 1.0
(signed word) splinePlot::p2_y
(signed word) splinePlot::p2_y#4 p2_y zp ZP_WORD:17 0.4
(signed dword) splinePlot::p_x
(signed dword) splinePlot::p_x#0 p_x zp ZP_DWORD:21 1.3333333333333333
(signed dword) splinePlot::p_x#1 p_x zp ZP_DWORD:21 3.6666666666666665
(signed dword) splinePlot::p_x#2 p_x zp ZP_DWORD:21 7.000000000000001
(signed dword) splinePlot::p_y
(signed dword) splinePlot::p_y#0 p_y zp ZP_DWORD:25 4.0
(signed dword) splinePlot::p_y#1 p_y zp ZP_DWORD:25 4.4
(signed dword) splinePlot::p_y#2 p_y zp ZP_DWORD:25 5.833333333333333

zp ZP_WORD:2 [ print_word_at::w#2 print_word_at::w#0 print_word_at::w#1 ]
zp ZP_WORD:4 [ print_word_at::at#2 print_byte_at::at#2 print_byte_at::at#0 print_byte_at::at#1 ]
zp ZP_BYTE:6 [ print_byte_at::b#2 print_byte_at::b#0 print_byte_at::b#1 ]
reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
zp ZP_WORD:7 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 ]
zp ZP_WORD:9 [ splinePlot::p1_x#4 splinePlot::$6 ]
zp ZP_WORD:11 [ splinePlot::p2_x#4 splinePlot::$1 splinePlot::a_x#0 ]
zp ZP_WORD:13 [ splinePlot::p0_x#4 ]
zp ZP_WORD:15 [ splinePlot::p1_y#4 splinePlot::$9 ]
zp ZP_WORD:17 [ splinePlot::p2_y#4 splinePlot::$4 splinePlot::a_y#0 ]
zp ZP_WORD:19 [ splinePlot::p0_y#4 ]
zp ZP_DWORD:21 [ splinePlot::p_x#2 splinePlot::p_x#0 splinePlot::p_x#1 splinePlot::$30 ]
zp ZP_DWORD:25 [ splinePlot::p_y#2 splinePlot::p_y#0 splinePlot::p_y#1 splinePlot::$32 ]
zp ZP_DWORD:29 [ splinePlot::i_x#2 splinePlot::i_x#0 splinePlot::i_x#1 splinePlot::$13 splinePlot::$12 ]
zp ZP_DWORD:33 [ splinePlot::i_y#2 splinePlot::i_y#0 splinePlot::i_y#1 splinePlot::$19 splinePlot::$18 ]
reg byte x [ splinePlot::n#2 splinePlot::n#1 ]
zp ZP_WORD:37 [ memset::num#2 memset::end#0 ]
zp ZP_WORD:39 [ memset::str#3 memset::dst#2 memset::dst#3 memset::dst#1 ]
reg byte x [ memset::c#3 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp ZP_WORD:41 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
zp ZP_DWORD:43 [ clock::return#2 main::$12 clock::return#0 main::cyclecount#0 print_dword_at::dw#0 ]
reg byte a [ print_byte_at::$0 ]
reg byte y [ print_byte_at::$2 ]
zp ZP_WORD:47 [ splinePlot::$7 splinePlot::b_x#0 ]
zp ZP_WORD:49 [ splinePlot::$10 splinePlot::b_y#0 ]
zp ZP_DWORD:51 [ splinePlot::$14 splinePlot::$15 splinePlot::$16 ]
zp ZP_DWORD:55 [ splinePlot::$20 splinePlot::$21 splinePlot::$22 ]
zp ZP_DWORD:59 [ splinePlot::$24 splinePlot::$25 splinePlot::j_x#0 ]
zp ZP_DWORD:63 [ splinePlot::$27 splinePlot::$28 splinePlot::j_y#0 ]
zp ZP_WORD:67 [ bitmap_plot::x#0 ]
zp ZP_WORD:69 [ splinePlot::$35 ]
reg byte a [ bitmap_plot::y#0 ]
zp ZP_WORD:71 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ]
zp ZP_WORD:73 [ bitmap_plot::$1 ]
reg byte a [ bitmap_plot::$2 ]
zp ZP_BYTE:75 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]


FINAL ASSEMBLER
Score: 4918

  // File Comments
// Quadratic Spline Library for the C64
// Implements an iterative algorithm using only addition for calculating quadratic splines
//
// A quadratic spline is a curve defined by 3 points: P0, P1 and P2.
// The curve connects P0 to P2 through a smooth curve that moves towards P1, but does usually not touch it.
//
// The general formula for the quadratic spline is as follows:
// A = P2 - 2*P1 + P0
// B = 2*P1 - 2*P0
// C = P0
// P(t) = A*t*t + B*t + C
// for 0 <= t <= 1
//
// This library implements a iterative algorithm using multiplications in the initialization and only additions for calculating each point on the spline.
// The iterative algorithm is based on the following:
// P(t+Dt) = P(t) + A*Dt*Dt + 2*A*t*Dt + B*Dt
//
// init:
//   N = 16 (number of plots)
//   Dt = 1/N
//   P = C
//   I = A*Dt*Dt + B*Dt
//   J = 2*A*Dt*Dt
// loop(N times):
//   plot(P)
//   P = P + I
//   I = I + J
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label D011 = $d011
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // CIA #2 Timer A+B Value (32-bit)
  .label CIA2_TIMER_AB = $dd04
  // CIA #2 Timer A Control Register
  .label CIA2_TIMER_A_CONTROL = $dd0e
  // CIA #2 Timer B Control Register
  .label CIA2_TIMER_B_CONTROL = $dd0f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer Control - Time CONTINUOUS/ONE-SHOT (0:CONTINUOUS, 1: ONE-SHOT)
  .const CIA_TIMER_CONTROL_CONTINUOUS = 0
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const WHITE = 1
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  .label SCREEN = $400
  .label BITMAP_SCREEN = $5c00
  .label BITMAP_GRAPHICS = $6000
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const p0_x = $32
    .const p0_y = $32
    .const p1a_x = $64
    .const p1a_y = $32
    .const p1b_x = $32
    .const p1b_y = $64
    .const p2_x = $64
    .const p2_y = $64
    .const p3a_x = $96
    .const p3a_y = $64
    .const p3b_x = $64
    .const p3b_y = $96
    .const p4_x = $96
    .const p4_y = $96
    .const vicSelectGfxBank1_toDd001_return = 3^(>BITMAP_SCREEN)/$40
    .const toD0181_return = (>(BITMAP_SCREEN&$3fff)*4)|(>BITMAP_GRAPHICS)/4&$f
    .label _12 = $2b
    .label cyclecount = $2b
    // bitmap_init(BITMAP_GRAPHICS, BITMAP_SCREEN)
    // [5] call bitmap_init 
    // [130] phi from main to bitmap_init [phi:main->bitmap_init]
    jsr bitmap_init
    // [6] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // bitmap_clear(BLACK, WHITE)
    // [7] call bitmap_clear 
    // [116] phi from main::@2 to bitmap_clear [phi:main::@2->bitmap_clear]
    jsr bitmap_clear
    // main::vicSelectGfxBank1
    // *CIA2_PORT_A_DDR = %00000011
    // [8] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
    // [9] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
    // main::vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_@1
    // *CIA2_PORT_A = toDd00(gfx)
    // [10] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    // [11] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
    // main::toD0181
    // main::@1
    // *D018 = toD018(BITMAP_SCREEN, BITMAP_GRAPHICS)
    // [12] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [13] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // clock_start()
    // [14] call clock_start 
    jsr clock_start
    // [15] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // splinePlot(p0, p1a, p2)
    // [16] call splinePlot 
    // [59] phi from main::@3 to splinePlot [phi:main::@3->splinePlot]
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p0_y#0 [phi:main::@3->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p0_y
    sta splinePlot.p0_y
    lda #>p0_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p2_y#0 [phi:main::@3->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p2_y
    lda #>p2_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p1a_y#0 [phi:main::@3->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p1a_y
    sta splinePlot.p1_y
    lda #>p1a_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p0_x#0 [phi:main::@3->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p0_x
    sta splinePlot.p0_x
    lda #>p0_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p2_x#0 [phi:main::@3->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p2_x
    lda #>p2_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p1a_x#0 [phi:main::@3->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p1a_x
    sta splinePlot.p1_x
    lda #>p1a_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [17] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // splinePlot(p2, p3a, p4)
    // [18] call splinePlot 
    // [59] phi from main::@4 to splinePlot [phi:main::@4->splinePlot]
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p2_y#0 [phi:main::@4->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p0_y
    lda #>p2_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p4_y#0 [phi:main::@4->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p4_y
    sta splinePlot.p2_y
    lda #>p4_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p3a_y#0 [phi:main::@4->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p3a_y
    sta splinePlot.p1_y
    lda #>p3a_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p2_x#0 [phi:main::@4->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p0_x
    lda #>p2_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p4_x#0 [phi:main::@4->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p4_x
    sta splinePlot.p2_x
    lda #>p4_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p3a_x#0 [phi:main::@4->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p3a_x
    sta splinePlot.p1_x
    lda #>p3a_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // splinePlot(p2, p1b, p0)
    // [20] call splinePlot 
    // [59] phi from main::@5 to splinePlot [phi:main::@5->splinePlot]
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p2_y#0 [phi:main::@5->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p0_y
    lda #>p2_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p0_y#0 [phi:main::@5->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p0_y
    sta splinePlot.p2_y
    lda #>p0_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p1b_y#0 [phi:main::@5->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p1b_y
    sta splinePlot.p1_y
    lda #>p1b_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p2_x#0 [phi:main::@5->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p0_x
    lda #>p2_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p0_x#0 [phi:main::@5->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p0_x
    sta splinePlot.p2_x
    lda #>p0_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p1b_x#0 [phi:main::@5->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p1b_x
    sta splinePlot.p1_x
    lda #>p1b_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [21] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // splinePlot(p4, p3b, p2)
    // [22] call splinePlot 
    // [59] phi from main::@6 to splinePlot [phi:main::@6->splinePlot]
    // [59] phi (signed word) splinePlot::p0_y#4 = (const signed word) main::p4_y#0 [phi:main::@6->splinePlot#0] -- vwsz1=vwsc1 
    lda #<p4_y
    sta splinePlot.p0_y
    lda #>p4_y
    sta splinePlot.p0_y+1
    // [59] phi (signed word) splinePlot::p2_y#4 = (const signed word) main::p2_y#0 [phi:main::@6->splinePlot#1] -- vwsz1=vwsc1 
    lda #<p2_y
    sta splinePlot.p2_y
    lda #>p2_y
    sta splinePlot.p2_y+1
    // [59] phi (signed word) splinePlot::p1_y#4 = (const signed word) main::p3b_y#0 [phi:main::@6->splinePlot#2] -- vwsz1=vwsc1 
    lda #<p3b_y
    sta splinePlot.p1_y
    lda #>p3b_y
    sta splinePlot.p1_y+1
    // [59] phi (signed word) splinePlot::p0_x#4 = (const signed word) main::p4_x#0 [phi:main::@6->splinePlot#3] -- vwsz1=vwsc1 
    lda #<p4_x
    sta splinePlot.p0_x
    lda #>p4_x
    sta splinePlot.p0_x+1
    // [59] phi (signed word) splinePlot::p2_x#4 = (const signed word) main::p2_x#0 [phi:main::@6->splinePlot#4] -- vwsz1=vwsc1 
    lda #<p2_x
    sta splinePlot.p2_x
    lda #>p2_x
    sta splinePlot.p2_x+1
    // [59] phi (signed word) splinePlot::p1_x#4 = (const signed word) main::p3b_x#0 [phi:main::@6->splinePlot#5] -- vwsz1=vwsc1 
    lda #<p3b_x
    sta splinePlot.p1_x
    lda #>p3b_x
    sta splinePlot.p1_x+1
    jsr splinePlot
    // [23] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // clock()
    // [24] call clock 
    jsr clock
    // [25] (dword) clock::return#2 ← (dword) clock::return#0
    // main::@8
    // [26] (dword~) main::$12 ← (dword) clock::return#2
    // cyclecount = clock()-CLOCKS_PER_INIT
    // [27] (dword) main::cyclecount#0 ← (dword~) main::$12 - (const dword) CLOCKS_PER_INIT#0 -- vduz1=vduz1_minus_vduc1 
    lda cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta cyclecount
    lda cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta cyclecount+1
    lda cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta cyclecount+2
    lda cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta cyclecount+3
    // print_dword_at(cyclecount, SCREEN)
    // [28] (dword) print_dword_at::dw#0 ← (dword) main::cyclecount#0
    // [29] call print_dword_at 
    jsr print_dword_at
    // main::@return
    // }
    // [30] return 
    rts
}
  // print_dword_at
// Print a dword as HEX at a specific position
// print_dword_at(dword zeropage($2b) dw)
print_dword_at: {
    .label dw = $2b
    // print_word_at(>dw, at)
    // [31] (word) print_word_at::w#0 ← > (dword) print_dword_at::dw#0 -- vwuz1=_hi_vduz2 
    lda dw+2
    sta print_word_at.w
    lda dw+3
    sta print_word_at.w+1
    // [32] call print_word_at 
    // [36] phi from print_dword_at to print_word_at [phi:print_dword_at->print_word_at]
    // [36] phi (byte*) print_word_at::at#2 = (const byte*) SCREEN#0 [phi:print_dword_at->print_word_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta print_word_at.at
    lda #>SCREEN
    sta print_word_at.at+1
    // [36] phi (word) print_word_at::w#2 = (word) print_word_at::w#0 [phi:print_dword_at->print_word_at#1] -- register_copy 
    jsr print_word_at
    // print_dword_at::@1
    // print_word_at(<dw, at+4)
    // [33] (word) print_word_at::w#1 ← < (dword) print_dword_at::dw#0 -- vwuz1=_lo_vduz2 
    lda dw
    sta print_word_at.w
    lda dw+1
    sta print_word_at.w+1
    // [34] call print_word_at 
    // [36] phi from print_dword_at::@1 to print_word_at [phi:print_dword_at::@1->print_word_at]
    // [36] phi (byte*) print_word_at::at#2 = (const byte*) SCREEN#0+(byte) 4 [phi:print_dword_at::@1->print_word_at#0] -- pbuz1=pbuc1 
    lda #<SCREEN+4
    sta print_word_at.at
    lda #>SCREEN+4
    sta print_word_at.at+1
    // [36] phi (word) print_word_at::w#2 = (word) print_word_at::w#1 [phi:print_dword_at::@1->print_word_at#1] -- register_copy 
    jsr print_word_at
    // print_dword_at::@return
    // }
    // [35] return 
    rts
}
  // print_word_at
// Print a word as HEX at a specific position
// print_word_at(word zeropage(2) w, byte* zeropage(4) at)
print_word_at: {
    .label w = 2
    .label at = 4
    // print_byte_at(>w, at)
    // [37] (byte) print_byte_at::b#0 ← > (word) print_word_at::w#2 -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte_at.b
    // [38] (byte*) print_byte_at::at#0 ← (byte*) print_word_at::at#2
    // [39] call print_byte_at 
    // [44] phi from print_word_at to print_byte_at [phi:print_word_at->print_byte_at]
    // [44] phi (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#0 [phi:print_word_at->print_byte_at#0] -- register_copy 
    // [44] phi (byte) print_byte_at::b#2 = (byte) print_byte_at::b#0 [phi:print_word_at->print_byte_at#1] -- register_copy 
    jsr print_byte_at
    // print_word_at::@1
    // print_byte_at(<w, at+2)
    // [40] (byte) print_byte_at::b#1 ← < (word) print_word_at::w#2 -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte_at.b
    // [41] (byte*) print_byte_at::at#1 ← (byte*) print_word_at::at#2 + (byte) 2 -- pbuz1=pbuz1_plus_2 
    lda print_byte_at.at
    clc
    adc #2
    sta print_byte_at.at
    bcc !+
    inc print_byte_at.at+1
  !:
    // [42] call print_byte_at 
    // [44] phi from print_word_at::@1 to print_byte_at [phi:print_word_at::@1->print_byte_at]
    // [44] phi (byte*) print_byte_at::at#2 = (byte*) print_byte_at::at#1 [phi:print_word_at::@1->print_byte_at#0] -- register_copy 
    // [44] phi (byte) print_byte_at::b#2 = (byte) print_byte_at::b#1 [phi:print_word_at::@1->print_byte_at#1] -- register_copy 
    jsr print_byte_at
    // print_word_at::@return
    // }
    // [43] return 
    rts
}
  // print_byte_at
// Print a byte as HEX at a specific position
// print_byte_at(byte zeropage(6) b, byte* zeropage(4) at)
print_byte_at: {
    .label b = 6
    .label at = 4
    // b>>4
    // [45] (byte~) print_byte_at::$0 ← (byte) print_byte_at::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    // print_char_at(print_hextab[b>>4], at)
    // [46] (byte) print_char_at::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$0) -- vbuxx=pbuc1_derefidx_vbuaa 
    tay
    ldx print_hextab,y
    // [47] (byte*) print_char_at::at#0 ← (byte*) print_byte_at::at#2 -- pbuz1=pbuz2 
    lda at
    sta print_char_at.at
    lda at+1
    sta print_char_at.at+1
    // [48] call print_char_at 
    // [54] phi from print_byte_at to print_char_at [phi:print_byte_at->print_char_at]
    // [54] phi (byte*) print_char_at::at#2 = (byte*) print_char_at::at#0 [phi:print_byte_at->print_char_at#0] -- register_copy 
    // [54] phi (byte) print_char_at::ch#2 = (byte) print_char_at::ch#0 [phi:print_byte_at->print_char_at#1] -- register_copy 
    jsr print_char_at
    // print_byte_at::@1
    // b&$f
    // [49] (byte~) print_byte_at::$2 ← (byte) print_byte_at::b#2 & (byte) $f -- vbuyy=vbuz1_band_vbuc1 
    lda #$f
    and b
    tay
    // print_char_at(print_hextab[b&$f], at+1)
    // [50] (byte*) print_char_at::at#1 ← (byte*) print_byte_at::at#2 + (byte) 1 -- pbuz1=pbuz2_plus_1 
    lda at
    clc
    adc #1
    sta print_char_at.at
    lda at+1
    adc #0
    sta print_char_at.at+1
    // [51] (byte) print_char_at::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte_at::$2) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx print_hextab,y
    // [52] call print_char_at 
    // [54] phi from print_byte_at::@1 to print_char_at [phi:print_byte_at::@1->print_char_at]
    // [54] phi (byte*) print_char_at::at#2 = (byte*) print_char_at::at#1 [phi:print_byte_at::@1->print_char_at#0] -- register_copy 
    // [54] phi (byte) print_char_at::ch#2 = (byte) print_char_at::ch#1 [phi:print_byte_at::@1->print_char_at#1] -- register_copy 
    jsr print_char_at
    // print_byte_at::@return
    // }
    // [53] return 
    rts
}
  // print_char_at
// Print a single char
// print_char_at(byte register(X) ch, byte* zeropage(7) at)
print_char_at: {
    .label at = 7
    // *(at) = ch
    // [55] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (at),y
    // print_char_at::@return
    // }
    // [56] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $2b
    // 0xffffffff - *CIA2_TIMER_AB
    // [57] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0) -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta return+3
    // clock::@return
    // }
    // [58] return 
    rts
}
  // splinePlot
// splinePlot(signed word zeropage($d) p0_x, signed word zeropage($13) p0_y, signed word zeropage(9) p1_x, signed word zeropage($f) p1_y, signed word zeropage($b) p2_x, signed word zeropage($11) p2_y)
splinePlot: {
    .label _1 = $b
    .label _4 = $11
    .label _6 = 9
    .label _7 = $2f
    .label _9 = $f
    .label _10 = $31
    .label _12 = $1d
    .label _13 = $1d
    .label _14 = $33
    .label _15 = $33
    .label _16 = $33
    .label _18 = $21
    .label _19 = $21
    .label _20 = $37
    .label _21 = $37
    .label _22 = $37
    .label _24 = $3b
    .label _25 = $3b
    .label _27 = $3f
    .label _28 = $3f
    .label _30 = $15
    .label _32 = $19
    .label _35 = $45
    .label a_x = $b
    .label a_y = $11
    .label b_x = $2f
    .label b_y = $31
    .label i_x = $1d
    .label i_y = $21
    .label j_x = $3b
    .label j_y = $3f
    .label p_x = $15
    .label p_y = $19
    .label p1_x = 9
    .label p2_x = $b
    .label p0_x = $d
    .label p1_y = $f
    .label p2_y = $11
    .label p0_y = $13
    // p1.x*2
    // [60] (signed word~) splinePlot::$6 ← (signed word) splinePlot::p1_x#4 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _6
    rol _6+1
    // p2.x - p1.x*2
    // [61] (signed word~) splinePlot::$1 ← (signed word) splinePlot::p2_x#4 - (signed word~) splinePlot::$6 -- vwsz1=vwsz1_minus_vwsz2 
    lda _1
    sec
    sbc _6
    sta _1
    lda _1+1
    sbc _6+1
    sta _1+1
    // a = { p2.x - p1.x*2 + p0.x, p2.y - p1.y*2 + p0.y}
    // [62] (signed word) splinePlot::a_x#0 ← (signed word~) splinePlot::$1 + (signed word) splinePlot::p0_x#4 -- vwsz1=vwsz1_plus_vwsz2 
    lda a_x
    clc
    adc p0_x
    sta a_x
    lda a_x+1
    adc p0_x+1
    sta a_x+1
    // p1.y*2
    // [63] (signed word~) splinePlot::$9 ← (signed word) splinePlot::p1_y#4 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl _9
    rol _9+1
    // p2.y - p1.y*2
    // [64] (signed word~) splinePlot::$4 ← (signed word) splinePlot::p2_y#4 - (signed word~) splinePlot::$9 -- vwsz1=vwsz1_minus_vwsz2 
    lda _4
    sec
    sbc _9
    sta _4
    lda _4+1
    sbc _9+1
    sta _4+1
    // a = { p2.x - p1.x*2 + p0.x, p2.y - p1.y*2 + p0.y}
    // [65] (signed word) splinePlot::a_y#0 ← (signed word~) splinePlot::$4 + (signed word) splinePlot::p0_y#4 -- vwsz1=vwsz1_plus_vwsz2 
    lda a_y
    clc
    adc p0_y
    sta a_y
    lda a_y+1
    adc p0_y+1
    sta a_y+1
    // p0.x*2
    // [66] (signed word~) splinePlot::$7 ← (signed word) splinePlot::p0_x#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p0_x
    asl
    sta _7
    lda p0_x+1
    rol
    sta _7+1
    // b = { p1.x*2 - p0.x*2, p1.y*2 - p0.y*2 }
    // [67] (signed word) splinePlot::b_x#0 ← (signed word~) splinePlot::$6 - (signed word~) splinePlot::$7 -- vwsz1=vwsz2_minus_vwsz1 
    lda _6
    sec
    sbc b_x
    sta b_x
    lda _6+1
    sbc b_x+1
    sta b_x+1
    // p0.y*2
    // [68] (signed word~) splinePlot::$10 ← (signed word) splinePlot::p0_y#4 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda p0_y
    asl
    sta _10
    lda p0_y+1
    rol
    sta _10+1
    // b = { p1.x*2 - p0.x*2, p1.y*2 - p0.y*2 }
    // [69] (signed word) splinePlot::b_y#0 ← (signed word~) splinePlot::$9 - (signed word~) splinePlot::$10 -- vwsz1=vwsz2_minus_vwsz1 
    lda _9
    sec
    sbc b_y
    sta b_y
    lda _9+1
    sbc b_y+1
    sta b_y+1
    // (signed long)a.x
    // [70] (signed dword~) splinePlot::$12 ← (signed dword)(signed word) splinePlot::a_x#0 -- vdsz1=_sdword_vwsz2 
    lda a_x
    sta _12
    lda a_x+1
    sta _12+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _12+2
    sta _12+3
    // (signed long)a.x*0x100
    // [71] (signed dword~) splinePlot::$13 ← (signed dword~) splinePlot::$12 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _13+2
    sta _13+3
    lda _13+1
    sta _13+2
    lda _13
    sta _13+1
    lda #0
    sta _13
    // (signed long)b.x
    // [72] (signed dword~) splinePlot::$14 ← (signed dword)(signed word) splinePlot::b_x#0 -- vdsz1=_sdword_vwsz2 
    lda b_x
    sta _14
    lda b_x+1
    sta _14+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _14+2
    sta _14+3
    // (signed long)b.x*0x100
    // [73] (signed dword~) splinePlot::$15 ← (signed dword~) splinePlot::$14 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _15+2
    sta _15+3
    lda _15+1
    sta _15+2
    lda _15
    sta _15+1
    lda #0
    sta _15
    // (signed long)b.x*0x100*0x10
    // [74] (signed dword~) splinePlot::$16 ← (signed dword~) splinePlot::$15 << (byte) 4 -- vdsz1=vdsz1_rol_4 
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    asl _16
    rol _16+1
    rol _16+2
    rol _16+3
    // i = { (signed long)a.x*0x100 + (signed long)b.x*0x100*0x10, (signed long)a.y*0x100 + (signed long)b.y*0x100*0x10 }
    // [75] (signed dword) splinePlot::i_x#0 ← (signed dword~) splinePlot::$13 + (signed dword~) splinePlot::$16 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_x
    clc
    adc _16
    sta i_x
    lda i_x+1
    adc _16+1
    sta i_x+1
    lda i_x+2
    adc _16+2
    sta i_x+2
    lda i_x+3
    adc _16+3
    sta i_x+3
    // (signed long)a.y
    // [76] (signed dword~) splinePlot::$18 ← (signed dword)(signed word) splinePlot::a_y#0 -- vdsz1=_sdword_vwsz2 
    lda a_y
    sta _18
    lda a_y+1
    sta _18+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _18+2
    sta _18+3
    // (signed long)a.y*0x100
    // [77] (signed dword~) splinePlot::$19 ← (signed dword~) splinePlot::$18 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _19+2
    sta _19+3
    lda _19+1
    sta _19+2
    lda _19
    sta _19+1
    lda #0
    sta _19
    // (signed long)b.y
    // [78] (signed dword~) splinePlot::$20 ← (signed dword)(signed word) splinePlot::b_y#0 -- vdsz1=_sdword_vwsz2 
    lda b_y
    sta _20
    lda b_y+1
    sta _20+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _20+2
    sta _20+3
    // (signed long)b.y*0x100
    // [79] (signed dword~) splinePlot::$21 ← (signed dword~) splinePlot::$20 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _21+2
    sta _21+3
    lda _21+1
    sta _21+2
    lda _21
    sta _21+1
    lda #0
    sta _21
    // (signed long)b.y*0x100*0x10
    // [80] (signed dword~) splinePlot::$22 ← (signed dword~) splinePlot::$21 << (byte) 4 -- vdsz1=vdsz1_rol_4 
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    asl _22
    rol _22+1
    rol _22+2
    rol _22+3
    // i = { (signed long)a.x*0x100 + (signed long)b.x*0x100*0x10, (signed long)a.y*0x100 + (signed long)b.y*0x100*0x10 }
    // [81] (signed dword) splinePlot::i_y#0 ← (signed dword~) splinePlot::$19 + (signed dword~) splinePlot::$22 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_y
    clc
    adc _22
    sta i_y
    lda i_y+1
    adc _22+1
    sta i_y+1
    lda i_y+2
    adc _22+2
    sta i_y+2
    lda i_y+3
    adc _22+3
    sta i_y+3
    // (signed long)a.x
    // [82] (signed dword~) splinePlot::$24 ← (signed dword)(signed word) splinePlot::a_x#0 -- vdsz1=_sdword_vwsz2 
    lda a_x
    sta _24
    lda a_x+1
    sta _24+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _24+2
    sta _24+3
    // (signed long)a.x*0x100
    // [83] (signed dword~) splinePlot::$25 ← (signed dword~) splinePlot::$24 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _25+2
    sta _25+3
    lda _25+1
    sta _25+2
    lda _25
    sta _25+1
    lda #0
    sta _25
    // j = { (signed long)a.x*0x100*2, (signed long)a.y*0x100*2 }
    // [84] (signed dword) splinePlot::j_x#0 ← (signed dword~) splinePlot::$25 << (byte) 1 -- vdsz1=vdsz1_rol_1 
    asl j_x
    rol j_x+1
    rol j_x+2
    rol j_x+3
    // (signed long)a.y
    // [85] (signed dword~) splinePlot::$27 ← (signed dword)(signed word) splinePlot::a_y#0 -- vdsz1=_sdword_vwsz2 
    lda a_y
    sta _27
    lda a_y+1
    sta _27+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _27+2
    sta _27+3
    // (signed long)a.y*0x100
    // [86] (signed dword~) splinePlot::$28 ← (signed dword~) splinePlot::$27 << (byte) 8 -- vdsz1=vdsz1_rol_8 
    lda _28+2
    sta _28+3
    lda _28+1
    sta _28+2
    lda _28
    sta _28+1
    lda #0
    sta _28
    // j = { (signed long)a.x*0x100*2, (signed long)a.y*0x100*2 }
    // [87] (signed dword) splinePlot::j_y#0 ← (signed dword~) splinePlot::$28 << (byte) 1 -- vdsz1=vdsz1_rol_1 
    asl j_y
    rol j_y+1
    rol j_y+2
    rol j_y+3
    // (signed long)p0.x
    // [88] (signed dword~) splinePlot::$30 ← (signed dword)(signed word) splinePlot::p0_x#4 -- vdsz1=_sdword_vwsz2 
    lda p0_x
    sta _30
    lda p0_x+1
    sta _30+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _30+2
    sta _30+3
    // p = { (signed long)p0.x*0x10000, (signed long)p0.y*0x10000 }
    // [89] (signed dword) splinePlot::p_x#0 ← (signed dword~) splinePlot::$30 << (byte) $10 -- vdsz1=vdsz1_rol_16 
    lda p_x+1
    sta p_x+3
    lda p_x
    sta p_x+2
    lda #0
    sta p_x
    sta p_x+1
    // (signed long)p0.y
    // [90] (signed dword~) splinePlot::$32 ← (signed dword)(signed word) splinePlot::p0_y#4 -- vdsz1=_sdword_vwsz2 
    lda p0_y
    sta _32
    lda p0_y+1
    sta _32+1
    ora #$7f
    bmi !+
    lda #0
  !:
    sta _32+2
    sta _32+3
    // p = { (signed long)p0.x*0x10000, (signed long)p0.y*0x10000 }
    // [91] (signed dword) splinePlot::p_y#0 ← (signed dword~) splinePlot::$32 << (byte) $10 -- vdsz1=vdsz1_rol_16 
    lda p_y+1
    sta p_y+3
    lda p_y
    sta p_y+2
    lda #0
    sta p_y
    sta p_y+1
    // [92] phi from splinePlot to splinePlot::@1 [phi:splinePlot->splinePlot::@1]
    // [92] phi (byte) splinePlot::n#2 = (byte) 0 [phi:splinePlot->splinePlot::@1#0] -- vbuxx=vbuc1 
    tax
    // [92] phi (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#0 [phi:splinePlot->splinePlot::@1#1] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#0 [phi:splinePlot->splinePlot::@1#2] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#0 [phi:splinePlot->splinePlot::@1#3] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#0 [phi:splinePlot->splinePlot::@1#4] -- register_copy 
    // [92] phi from splinePlot::@2 to splinePlot::@1 [phi:splinePlot::@2->splinePlot::@1]
    // [92] phi (byte) splinePlot::n#2 = (byte) splinePlot::n#1 [phi:splinePlot::@2->splinePlot::@1#0] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_y#2 = (signed dword) splinePlot::i_y#1 [phi:splinePlot::@2->splinePlot::@1#1] -- register_copy 
    // [92] phi (signed dword) splinePlot::i_x#2 = (signed dword) splinePlot::i_x#1 [phi:splinePlot::@2->splinePlot::@1#2] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_y#2 = (signed dword) splinePlot::p_y#1 [phi:splinePlot::@2->splinePlot::@1#3] -- register_copy 
    // [92] phi (signed dword) splinePlot::p_x#2 = (signed dword) splinePlot::p_x#1 [phi:splinePlot::@2->splinePlot::@1#4] -- register_copy 
    // splinePlot::@1
  b1:
    // bitmap_plot( > p.x, < > p.y)
    // [93] (word) bitmap_plot::x#0 ← > (signed dword) splinePlot::p_x#2 -- vwuz1=_hi_vdsz2 
    lda p_x+2
    sta bitmap_plot.x
    lda p_x+3
    sta bitmap_plot.x+1
    // > p.y
    // [94] (word~) splinePlot::$35 ← > (signed dword) splinePlot::p_y#2 -- vwuz1=_hi_vdsz2 
    lda p_y+2
    sta _35
    lda p_y+3
    sta _35+1
    // bitmap_plot( > p.x, < > p.y)
    // [95] (byte) bitmap_plot::y#0 ← < (word~) splinePlot::$35 -- vbuaa=_lo_vwuz1 
    lda _35
    // [96] call bitmap_plot 
    jsr bitmap_plot
    // splinePlot::@2
    // p = { p.x+i.x, p.y+i.y }
    // [97] (signed dword) splinePlot::p_x#1 ← (signed dword) splinePlot::p_x#2 + (signed dword) splinePlot::i_x#2 -- vdsz1=vdsz1_plus_vdsz2 
    lda p_x
    clc
    adc i_x
    sta p_x
    lda p_x+1
    adc i_x+1
    sta p_x+1
    lda p_x+2
    adc i_x+2
    sta p_x+2
    lda p_x+3
    adc i_x+3
    sta p_x+3
    // [98] (signed dword) splinePlot::p_y#1 ← (signed dword) splinePlot::p_y#2 + (signed dword) splinePlot::i_y#2 -- vdsz1=vdsz1_plus_vdsz2 
    lda p_y
    clc
    adc i_y
    sta p_y
    lda p_y+1
    adc i_y+1
    sta p_y+1
    lda p_y+2
    adc i_y+2
    sta p_y+2
    lda p_y+3
    adc i_y+3
    sta p_y+3
    // i = { i.x+j.x, i.y+j.y }
    // [99] (signed dword) splinePlot::i_x#1 ← (signed dword) splinePlot::i_x#2 + (signed dword) splinePlot::j_x#0 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_x
    clc
    adc j_x
    sta i_x
    lda i_x+1
    adc j_x+1
    sta i_x+1
    lda i_x+2
    adc j_x+2
    sta i_x+2
    lda i_x+3
    adc j_x+3
    sta i_x+3
    // [100] (signed dword) splinePlot::i_y#1 ← (signed dword) splinePlot::i_y#2 + (signed dword) splinePlot::j_y#0 -- vdsz1=vdsz1_plus_vdsz2 
    lda i_y
    clc
    adc j_y
    sta i_y
    lda i_y+1
    adc j_y+1
    sta i_y+1
    lda i_y+2
    adc j_y+2
    sta i_y+2
    lda i_y+3
    adc j_y+3
    sta i_y+3
    // for( char n: 0..16)
    // [101] (byte) splinePlot::n#1 ← ++ (byte) splinePlot::n#2 -- vbuxx=_inc_vbuxx 
    inx
    // [102] if((byte) splinePlot::n#1!=(byte) $11) goto splinePlot::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$11
    bne b1
    // splinePlot::@return
    // }
    // [103] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zeropage($43) x, byte register(A) y)
bitmap_plot: {
    .label _1 = $49
    .label plotter = $47
    .label x = $43
    // (byte*) { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [104] (word) bitmap_plot::plotter#0 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#0) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#0) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta plotter+1
    lda bitmap_plot_ylo,y
    sta plotter
    // x & $fff8
    // [105] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#0 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda x
    and #<$fff8
    sta _1
    lda x+1
    and #>$fff8
    sta _1+1
    // plotter += ( x & $fff8 )
    // [106] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$1 -- pbuz1=pbuz1_plus_vwuz2 
    lda plotter
    clc
    adc _1
    sta plotter
    lda plotter+1
    adc _1+1
    sta plotter+1
    // <x
    // [107] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#0 -- vbuaa=_lo_vwuz1 
    lda x
    // *plotter |= bitmap_plot_bit[<x]
    // [108] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuaa 
    tay
    lda bitmap_plot_bit,y
    ldy #0
    ora (plotter),y
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [109] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // *CIA2_TIMER_A_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [110] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #CIA_TIMER_CONTROL_CONTINUOUS
    sta CIA2_TIMER_A_CONTROL
    // *CIA2_TIMER_B_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [111] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2_TIMER_B_CONTROL
    // *CIA2_TIMER_AB = 0xffffffff
    // [112] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // *CIA2_TIMER_B_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [113] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2_TIMER_B_CONTROL
    // *CIA2_TIMER_A_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [114] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0 -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2_TIMER_A_CONTROL
    // clock_start::@return
    // }
    // [115] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE*$10
    // memset(bitmap_screen, col, 1000uw)
    // [117] call memset 
    // [121] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
    // [121] phi (byte) memset::c#3 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [121] phi (void*) memset::str#3 = (void*)(const byte*) BITMAP_SCREEN#0 [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_SCREEN
    sta memset.str
    lda #>BITMAP_SCREEN
    sta memset.str+1
    // [121] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta memset.num
    lda #>$3e8
    sta memset.num+1
    jsr memset
    // [118] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // bitmap_clear::@1
    // memset(bitmap_gfx, 0, 8000uw)
    // [119] call memset 
    // [121] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
    // [121] phi (byte) memset::c#3 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [121] phi (void*) memset::str#3 = (void*)(const byte*) BITMAP_GRAPHICS#0 [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_GRAPHICS
    sta memset.str
    lda #>BITMAP_GRAPHICS
    sta memset.str+1
    // [121] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta memset.num
    lda #>$1f40
    sta memset.num+1
    jsr memset
    // bitmap_clear::@return
    // }
    // [120] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($27) str, byte register(X) c, word zeropage($25) num)
memset: {
    .label end = $25
    .label dst = $27
    .label num = $25
    .label str = $27
    // if(num>0)
    // [122] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda num
    beq breturn
    lda num+1
    beq breturn
    // memset::@1
    // end = (char*)str + num
    // [123] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda end
    clc
    adc str
    sta end
    lda end+1
    adc str+1
    sta end+1
    // [124] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
    // [125] phi from memset::@1 memset::@2 to memset::@2 [phi:memset::@1/memset::@2->memset::@2]
    // [125] phi (byte*) memset::dst#2 = (byte*~) memset::dst#3 [phi:memset::@1/memset::@2->memset::@2#0] -- register_copy 
    // memset::@2
  b2:
    // *dst = c
    // [126] *((byte*) memset::dst#2) ← (byte) memset::c#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [127] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
    // [128] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda dst+1
    cmp end+1
    bne b2
    lda dst
    cmp end
    bne b2
    // memset::@return
  breturn:
    // }
    // [129] return 
    rts
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label _7 = $4b
    .label yoffs = $29
    // [131] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [131] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [131] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    // [131] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [131] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [131] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  b1:
    // bitmap_plot_bit[x] = bits
    // [132] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // bits >>= 1
    // [133] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // if(bits==0)
    // [134] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
    // [136] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [136] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    // [135] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [136] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [136] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  b2:
    // for(byte x : 0..255)
    // [137] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [138] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
    // [139] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [139] phi (byte*) bitmap_init::yoffs#2 = (const byte*) BITMAP_GRAPHICS#0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP_GRAPHICS
    sta yoffs
    lda #>BITMAP_GRAPHICS
    sta yoffs+1
    // [139] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [139] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [139] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [139] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  b3:
    // y&$7
    // [140] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax _7
    // <yoffs
    // [141] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda yoffs
    // y&$7 | <yoffs
    // [142] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora _7
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [143] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [144] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [145] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [146] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp _7
    bne b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [147] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda yoffs
    adc #<$28*8
    sta yoffs
    lda yoffs+1
    adc #>$28*8
    sta yoffs+1
    // [148] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [148] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  b4:
    // for(byte y : 0..255)
    // [149] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [150] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b3
    // bitmap_init::@return
    // }
    // [151] return 
    rts
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0

