const byte[] plots = $1000;
const byte* SCREEN = $0400;

void main() {
    for(byte i : 0..39) {
       plots[i] = i;
       SCREEN[i] = 0;
    }
    do {
        line(0, 10);
    } while (true)
}

void line(byte x0, byte x1) {
    if(x0<x1) {
        for(byte x = x0; x<=x1; x++) {
            plot(x);
        }
    } else {
        plot(x0);
    }
}

void plot(byte x) {
    byte idx = plots[x];
    SCREEN[idx] = SCREEN[idx]+1;
}

Adding pre/post-modifier (byte) line::x ← ++ (byte) line::x
PROGRAM
  (byte[]) plots ← (word) 4096
  (byte*) SCREEN ← (word) 1024
proc (void()) main()
  (byte) main::i ← (byte) 0
main::@1:
  *((byte[]) plots + (byte) main::i) ← (byte) main::i
  *((byte*) SCREEN + (byte) main::i) ← (byte) 0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$0 ← (byte) main::i != (byte) 40
  if((boolean~) main::$0) goto main::@1
main::@2:
  (void~) main::$1 ← call line (byte) 0 (byte) 10 
  if(true) goto main::@2
main::@return:
  return 
endproc // main()
proc (void()) line((byte) line::x0 , (byte) line::x1)
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  (byte) line::x ← (byte) line::x0
line::@2:
  (void~) line::$2 ← call plot (byte) line::x 
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$3 ← (byte) line::x <= (byte) line::x1
  if((boolean~) line::$3) goto line::@2
  goto line::@3
line::@1:
  (void~) line::$4 ← call plot (byte) line::x0 
line::@3:
line::@return:
  return 
endproc // line()
proc (void()) plot((byte) plot::x)
  (byte~) plot::$0 ← (byte[]) plots *idx (byte) plot::x
  (byte) plot::idx ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN *idx (byte) plot::idx
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN + (byte) plot::idx) ← (byte~) plot::$2
plot::@return:
  return 
endproc // plot()
  call main 

SYMBOLS
(byte*) SCREEN
(void()) line((byte) line::x0 , (byte) line::x1)
(boolean~) line::$0
(boolean~) line::$1
(void~) line::$2
(boolean~) line::$3
(void~) line::$4
(label) line::@1
(label) line::@2
(label) line::@3
(label) line::@return
(byte) line::x
(byte) line::x0
(byte) line::x1
(void()) main()
(boolean~) main::$0
(void~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(void()) plot((byte) plot::x)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(label) plot::@return
(byte) plot::idx
(byte) plot::x
(byte[]) plots

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots ← (word) 4096
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  *((byte[]) plots + (byte) main::i) ← (byte) main::i
  *((byte*) SCREEN + (byte) main::i) ← (byte) 0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$0 ← (byte) main::i != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@3
  (void~) main::$1 ← call line (byte) 0 (byte) 10 
  if(true) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
line: scope:[line]  from
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line line::@6
  (void~) line::$4 ← call plot (byte) line::x0 
  to:line::@3
line::@4: scope:[line]  from line
  (byte) line::x ← (byte) line::x0
  to:line::@2
line::@2: scope:[line]  from line::@2 line::@4
  (void~) line::$2 ← call plot (byte) line::x 
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$3 ← (byte) line::x <= (byte) line::x1
  if((boolean~) line::$3) goto line::@2
  to:line::@5
line::@5: scope:[line]  from line::@2
  to:line::@3
line::@3: scope:[line]  from line::@1 line::@5
  to:line::@return
line::@6: scope:[line]  from
  to:line::@1
line::@return: scope:[line]  from line::@3
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
plot: scope:[plot]  from
  (byte~) plot::$0 ← (byte[]) plots *idx (byte) plot::x
  (byte) plot::idx ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN *idx (byte) plot::idx
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN + (byte) plot::idx) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @2
  call main 
  to:@end
@end: scope:[]  from @3

Removing empty block main::@3
Removing empty block main::@4
Removing empty block @1
Removing empty block line::@5
Removing empty block line::@3
Removing empty block line::@6
Removing empty block @2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots ← (word) 4096
  (byte*) SCREEN ← (word) 1024
  to:@3
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  *((byte[]) plots + (byte) main::i) ← (byte) main::i
  *((byte*) SCREEN + (byte) main::i) ← (byte) 0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$0 ← (byte) main::i != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (void~) main::$1 ← call line (byte) 0 (byte) 10 
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
line: scope:[line]  from
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (void~) line::$4 ← call plot (byte) line::x0 
  to:line::@return
line::@4: scope:[line]  from line
  (byte) line::x ← (byte) line::x0
  to:line::@2
line::@2: scope:[line]  from line::@2 line::@4
  (void~) line::$2 ← call plot (byte) line::x 
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$3 ← (byte) line::x <= (byte) line::x1
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@2
  return 
  to:@return
plot: scope:[plot]  from
  (byte~) plot::$0 ← (byte[]) plots *idx (byte) plot::x
  (byte) plot::idx ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN *idx (byte) plot::idx
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN + (byte) plot::idx) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @3

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte[]) plots ← (word) 4096
  (byte*) SCREEN ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  *((byte[]) plots + (byte) main::i) ← (byte) main::i
  *((byte*) SCREEN + (byte) main::i) ← (byte) 0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$0 ← (byte) main::i != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) line::x0 ← (byte) 0
  (byte) line::x1 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (boolean~) line::$0 ← (byte) line::x0 < (byte) line::x1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x ← (byte) line::x0
  call plot param-assignment
  to:line::@7
line::@7: scope:[line]  from line::@1
  to:line::@return
line::@4: scope:[line]  from line
  (byte) line::x ← (byte) line::x0
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte) plot::x ← (byte) line::x
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x ← ++ (byte) line::x
  (boolean~) line::$3 ← (byte) line::x <= (byte) line::x1
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@7 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte~) plot::$0 ← (byte[]) plots *idx (byte) plot::x
  (byte) plot::idx ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN *idx (byte) plot::idx
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN + (byte) plot::idx) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte*) SCREEN#3 ← phi( @3/(byte*) SCREEN#6 )
  (byte[]) plots#3 ← phi( @3/(byte[]) plots#6 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@1/(byte*) SCREEN#1 )
  (byte[]) plots#1 ← phi( main/(byte[]) plots#3 main::@1/(byte[]) plots#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#1 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#1 main::@5/(byte*) SCREEN#11 )
  (byte[]) plots#10 ← phi( main::@1/(byte[]) plots#1 main::@5/(byte[]) plots#11 )
  (byte) line::x0#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#11 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#11 ← phi( main::@2/(byte[]) plots#10 )
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (byte*) SCREEN#7 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#7 ← phi( main::@2/(byte[]) plots#10 )
  (byte) line::x1#1 ← phi( main::@2/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( main::@2/(byte) line::x0#0 )
  (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte*) SCREEN#4 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#4 ← phi( line/(byte[]) plots#7 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) plot::x#0 ← (byte) line::x0#2
  call plot param-assignment
  to:line::@7
line::@7: scope:[line]  from line::@1
  to:line::@return
line::@4: scope:[line]  from line
  (byte*) SCREEN#8 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#8 ← phi( line/(byte[]) plots#7 )
  (byte) line::x1#4 ← phi( line/(byte) line::x1#1 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#3
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte*) SCREEN#5 ← phi( line::@4/(byte*) SCREEN#8 line::@8/(byte*) SCREEN#9 )
  (byte[]) plots#5 ← phi( line::@4/(byte[]) plots#8 line::@8/(byte[]) plots#9 )
  (byte) line::x1#3 ← phi( line::@4/(byte) line::x1#4 line::@8/(byte) line::x1#2 )
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte*) SCREEN#9 ← phi( line::@2/(byte*) SCREEN#5 )
  (byte[]) plots#9 ← phi( line::@2/(byte[]) plots#5 )
  (byte) line::x1#2 ← phi( line::@2/(byte) line::x1#3 )
  (byte) line::x#3 ← phi( line::@2/(byte) line::x#2 )
  (byte) line::x#1 ← ++ (byte) line::x#3
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#2
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@7 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#4 line::@2/(byte*) SCREEN#5 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#4 line::@2/(byte[]) plots#5 )
  (byte~) plot::$0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte) plot::idx#0 ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plots#6 ← phi( @begin/(byte[]) plots#0 )
  call main param-assignment
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte*) SCREEN#3 ← phi( @3/(byte*) SCREEN#6 )
  (byte[]) plots#3 ← phi( @3/(byte[]) plots#6 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@1/(byte*) SCREEN#1 )
  (byte[]) plots#1 ← phi( main/(byte[]) plots#3 main::@1/(byte[]) plots#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#1 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#1 main::@5/(byte*) SCREEN#11 )
  (byte[]) plots#10 ← phi( main::@1/(byte[]) plots#1 main::@5/(byte[]) plots#11 )
  (byte) line::x0#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#11 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#11 ← phi( main::@2/(byte[]) plots#10 )
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (byte*) SCREEN#7 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#7 ← phi( main::@2/(byte[]) plots#10 )
  (byte) line::x1#1 ← phi( main::@2/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( main::@2/(byte) line::x0#0 )
  (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte*) SCREEN#4 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#4 ← phi( line/(byte[]) plots#7 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) plot::x#0 ← (byte) line::x0#2
  call plot param-assignment
  to:line::@7
line::@7: scope:[line]  from line::@1
  to:line::@return
line::@4: scope:[line]  from line
  (byte*) SCREEN#8 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#8 ← phi( line/(byte[]) plots#7 )
  (byte) line::x1#4 ← phi( line/(byte) line::x1#1 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#3
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte*) SCREEN#5 ← phi( line::@4/(byte*) SCREEN#8 line::@8/(byte*) SCREEN#9 )
  (byte[]) plots#5 ← phi( line::@4/(byte[]) plots#8 line::@8/(byte[]) plots#9 )
  (byte) line::x1#3 ← phi( line::@4/(byte) line::x1#4 line::@8/(byte) line::x1#2 )
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte*) SCREEN#9 ← phi( line::@2/(byte*) SCREEN#5 )
  (byte[]) plots#9 ← phi( line::@2/(byte[]) plots#5 )
  (byte) line::x1#2 ← phi( line::@2/(byte) line::x1#3 )
  (byte) line::x#3 ← phi( line::@2/(byte) line::x#2 )
  (byte) line::x#1 ← ++ (byte) line::x#3
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#2
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@7 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#4 line::@2/(byte*) SCREEN#5 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#4 line::@2/(byte[]) plots#5 )
  (byte~) plot::$0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte) plot::idx#0 ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plots#6 ← phi( @begin/(byte[]) plots#0 )
  call main param-assignment
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

INITIAL SSA SYMBOL TABLE
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#10
(byte*) SCREEN#11
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(void()) line((byte) line::x0 , (byte) line::x1)
(boolean~) line::$0
(boolean~) line::$1
(boolean~) line::$3
(label) line::@1
(label) line::@2
(label) line::@4
(label) line::@7
(label) line::@8
(label) line::@return
(byte) line::x
(byte) line::x#0
(byte) line::x#1
(byte) line::x#2
(byte) line::x#3
(byte) line::x0
(byte) line::x0#0
(byte) line::x0#1
(byte) line::x0#2
(byte) line::x0#3
(byte) line::x1
(byte) line::x1#0
(byte) line::x1#1
(byte) line::x1#2
(byte) line::x1#3
(byte) line::x1#4
(void()) main()
(boolean~) main::$0
(label) main::@1
(label) main::@2
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(void()) plot((byte) plot::x)
(byte~) plot::$0
(byte~) plot::$1
(byte~) plot::$2
(label) plot::@return
(byte) plot::idx
(byte) plot::idx#0
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte[]) plots
(byte[]) plots#0
(byte[]) plots#1
(byte[]) plots#10
(byte[]) plots#11
(byte[]) plots#2
(byte[]) plots#3
(byte[]) plots#4
(byte[]) plots#5
(byte[]) plots#6
(byte[]) plots#7
(byte[]) plots#8
(byte[]) plots#9

Culled Empty Block (label) line::@7
Culled Empty Block (label) @4
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte*) SCREEN#3 ← phi( @3/(byte*) SCREEN#6 )
  (byte[]) plots#3 ← phi( @3/(byte[]) plots#6 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@1/(byte*) SCREEN#1 )
  (byte[]) plots#1 ← phi( main/(byte[]) plots#3 main::@1/(byte[]) plots#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#1 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#1 main::@5/(byte*) SCREEN#11 )
  (byte[]) plots#10 ← phi( main::@1/(byte[]) plots#1 main::@5/(byte[]) plots#11 )
  (byte) line::x0#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#11 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#11 ← phi( main::@2/(byte[]) plots#10 )
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (byte*) SCREEN#7 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#7 ← phi( main::@2/(byte[]) plots#10 )
  (byte) line::x1#1 ← phi( main::@2/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( main::@2/(byte) line::x0#0 )
  (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
  (boolean~) line::$1 ← ! (boolean~) line::$0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte*) SCREEN#4 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#4 ← phi( line/(byte[]) plots#7 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) plot::x#0 ← (byte) line::x0#2
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  (byte*) SCREEN#8 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#8 ← phi( line/(byte[]) plots#7 )
  (byte) line::x1#4 ← phi( line/(byte) line::x1#1 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#3
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte*) SCREEN#5 ← phi( line::@4/(byte*) SCREEN#8 line::@8/(byte*) SCREEN#9 )
  (byte[]) plots#5 ← phi( line::@4/(byte[]) plots#8 line::@8/(byte[]) plots#9 )
  (byte) line::x1#3 ← phi( line::@4/(byte) line::x1#4 line::@8/(byte) line::x1#2 )
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte*) SCREEN#9 ← phi( line::@2/(byte*) SCREEN#5 )
  (byte[]) plots#9 ← phi( line::@2/(byte[]) plots#5 )
  (byte) line::x1#2 ← phi( line::@2/(byte) line::x1#3 )
  (byte) line::x#3 ← phi( line::@2/(byte) line::x#2 )
  (byte) line::x#1 ← ++ (byte) line::x#3
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#2
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#4 line::@2/(byte*) SCREEN#5 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#4 line::@2/(byte[]) plots#5 )
  (byte~) plot::$0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte) plot::idx#0 ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plots#6 ← phi( @begin/(byte[]) plots#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Inversing boolean not (boolean~) line::$1 ← (byte) line::x0#1 >= (byte) line::x1#1 from (boolean~) line::$0 ← (byte) line::x0#1 < (byte) line::x1#1
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte*) SCREEN#3 ← phi( @3/(byte*) SCREEN#6 )
  (byte[]) plots#3 ← phi( @3/(byte[]) plots#6 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@1/(byte*) SCREEN#1 )
  (byte[]) plots#1 ← phi( main/(byte[]) plots#3 main::@1/(byte[]) plots#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#1 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#1 main::@5/(byte*) SCREEN#11 )
  (byte[]) plots#10 ← phi( main::@1/(byte[]) plots#1 main::@5/(byte[]) plots#11 )
  (byte) line::x0#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#11 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#11 ← phi( main::@2/(byte[]) plots#10 )
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (byte*) SCREEN#7 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte[]) plots#7 ← phi( main::@2/(byte[]) plots#10 )
  (byte) line::x1#1 ← phi( main::@2/(byte) line::x1#0 )
  (byte) line::x0#1 ← phi( main::@2/(byte) line::x0#0 )
  (boolean~) line::$1 ← (byte) line::x0#1 >= (byte) line::x1#1
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte*) SCREEN#4 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#4 ← phi( line/(byte[]) plots#7 )
  (byte) line::x0#2 ← phi( line/(byte) line::x0#1 )
  (byte) plot::x#0 ← (byte) line::x0#2
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  (byte*) SCREEN#8 ← phi( line/(byte*) SCREEN#7 )
  (byte[]) plots#8 ← phi( line/(byte[]) plots#7 )
  (byte) line::x1#4 ← phi( line/(byte) line::x1#1 )
  (byte) line::x0#3 ← phi( line/(byte) line::x0#1 )
  (byte) line::x#0 ← (byte) line::x0#3
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte*) SCREEN#5 ← phi( line::@4/(byte*) SCREEN#8 line::@8/(byte*) SCREEN#9 )
  (byte[]) plots#5 ← phi( line::@4/(byte[]) plots#8 line::@8/(byte[]) plots#9 )
  (byte) line::x1#3 ← phi( line::@4/(byte) line::x1#4 line::@8/(byte) line::x1#2 )
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte*) SCREEN#9 ← phi( line::@2/(byte*) SCREEN#5 )
  (byte[]) plots#9 ← phi( line::@2/(byte[]) plots#5 )
  (byte) line::x1#2 ← phi( line::@2/(byte) line::x1#3 )
  (byte) line::x#3 ← phi( line::@2/(byte) line::x#2 )
  (byte) line::x#1 ← ++ (byte) line::x#3
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#2
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#4 line::@2/(byte*) SCREEN#5 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#4 line::@2/(byte[]) plots#5 )
  (byte~) plot::$0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte) plot::idx#0 ← (byte~) plot::$0
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  (byte*) SCREEN#6 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) plots#6 ← phi( @begin/(byte[]) plots#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Not aliassing across scopes: plot::x#0 line::x0#2
Not aliassing across scopes: plot::x#1 line::x#2
Alias (byte[]) plots#0 = (byte[]) plots#3 (byte[]) plots#6 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#3 (byte*) SCREEN#6 
Alias (byte[]) plots#10 = (byte[]) plots#11 (byte[]) plots#7 (byte[]) plots#4 (byte[]) plots#8 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#11 (byte*) SCREEN#7 (byte*) SCREEN#4 (byte*) SCREEN#8 
Alias (byte) line::x#0 = (byte) line::x0#1 (byte) line::x0#0 (byte) line::x0#2 (byte) line::x0#3 
Alias (byte) line::x1#0 = (byte) line::x1#1 (byte) line::x1#4 
Alias (byte) line::x#2 = (byte) line::x#3 
Alias (byte) line::x1#2 = (byte) line::x1#3 
Alias (byte[]) plots#5 = (byte[]) plots#9 
Alias (byte*) SCREEN#5 = (byte*) SCREEN#9 
Alias (byte) plot::idx#0 = (byte~) plot::$0 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#0 main::@1/(byte*) SCREEN#1 )
  (byte[]) plots#1 ← phi( main/(byte[]) plots#0 main::@1/(byte[]) plots#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#1 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#1 main::@5/(byte*) SCREEN#10 )
  (byte[]) plots#10 ← phi( main::@1/(byte[]) plots#1 main::@5/(byte[]) plots#10 )
  (byte) line::x#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (boolean~) line::$1 ← (byte) line::x#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x#0 ← (byte) line::x#0
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte*) SCREEN#5 ← phi( line::@4/(byte*) SCREEN#10 line::@8/(byte*) SCREEN#5 )
  (byte[]) plots#5 ← phi( line::@4/(byte[]) plots#10 line::@8/(byte[]) plots#5 )
  (byte) line::x1#2 ← phi( line::@4/(byte) line::x1#0 line::@8/(byte) line::x1#2 )
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#2
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#10 line::@2/(byte*) SCREEN#5 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#10 line::@2/(byte[]) plots#5 )
  (byte) plot::idx#0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Not aliassing across scopes: plot::x#0 line::x#0
Not aliassing across scopes: plot::x#1 line::x#2
Self Phi Eliminated (byte[]) plots#1
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte[]) plots#10
Self Phi Eliminated (byte*) SCREEN#10
Self Phi Eliminated (byte) line::x1#2
Self Phi Eliminated (byte[]) plots#5
Self Phi Eliminated (byte*) SCREEN#5
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#0 )
  (byte[]) plots#1 ← phi( main/(byte[]) plots#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#1 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#1 )
  (byte[]) plots#10 ← phi( main::@1/(byte[]) plots#1 )
  (byte) line::x#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (boolean~) line::$1 ← (byte) line::x#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x#0 ← (byte) line::x#0
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte*) SCREEN#5 ← phi( line::@4/(byte*) SCREEN#10 )
  (byte[]) plots#5 ← phi( line::@4/(byte[]) plots#10 )
  (byte) line::x1#2 ← phi( line::@4/(byte) line::x1#0 )
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#2
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#10 line::@2/(byte*) SCREEN#5 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#10 line::@2/(byte[]) plots#5 )
  (byte) plot::idx#0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Redundant Phi (byte[]) plots#1 (byte[]) plots#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Redundant Phi (byte[]) plots#10 (byte[]) plots#1
Redundant Phi (byte*) SCREEN#10 (byte*) SCREEN#1
Redundant Phi (byte) line::x1#2 (byte) line::x1#0
Redundant Phi (byte[]) plots#5 (byte[]) plots#10
Redundant Phi (byte*) SCREEN#5 (byte*) SCREEN#10
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) line::x#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (boolean~) line::$1 ← (byte) line::x#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x#0 ← (byte) line::x#0
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#0
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte*) SCREEN#2 ← phi( line::@1/(byte*) SCREEN#0 line::@2/(byte*) SCREEN#0 )
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte[]) plots#2 ← phi( line::@1/(byte[]) plots#0 line::@2/(byte[]) plots#0 )
  (byte) plot::idx#0 ← (byte[]) plots#2 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (byte*) SCREEN#2 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#2 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Redundant Phi (byte[]) plots#2 (byte[]) plots#0
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$0 ← (byte) main::i#1 != (byte) 40
  if((boolean~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) line::x#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  (boolean~) line::$1 ← (byte) line::x#0 >= (byte) line::x1#0
  if((boolean~) line::$1) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x#0 ← (byte) line::x#0
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  (boolean~) line::$3 ← (byte) line::x#1 <= (byte) line::x1#0
  if((boolean~) line::$3) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte) plot::idx#0 ← (byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Simple Condition (boolean~) main::$0 if((byte) main::i#1!=(byte) 40) goto main::@1
Simple Condition (boolean~) line::$1 if((byte) line::x#0>=(byte) line::x1#0) goto line::@1
Simple Condition (boolean~) line::$3 if((byte) line::x#1<=(byte) line::x1#0) goto line::@2
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[]) plots#0 ← (word) 4096
  (byte*) SCREEN#0 ← (word) 1024
  to:@3
main: scope:[main]  from @3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 40) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) line::x#0 ← (byte) 0
  (byte) line::x1#0 ← (byte) 10
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  if((byte) line::x#0>=(byte) line::x1#0) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x#0 ← (byte) line::x#0
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte) line::x#2 ← phi( line::@4/(byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<=(byte) line::x1#0) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte) plot::idx#0 ← (byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Constant (const byte[]) plots#0 = 4096
Constant (const byte*) SCREEN#0 = 1024
Constant (const byte) main::i#0 = 0
Constant (const byte) line::x#0 = 0
Constant (const byte) line::x1#0 = 10
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@3
main: scope:[main]  from @3
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 40) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  if((const byte) line::x#0>=(const byte) line::x1#0) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  (byte) plot::x#0 ← (const byte) line::x#0
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte) line::x#2 ← phi( line::@4/(const byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Constant (const byte) plot::x#0 = line::x#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@3
main: scope:[main]  from @3
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 40) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  if((const byte) line::x#0>=(const byte) line::x1#0) goto line::@1
  to:line::@4
line::@1: scope:[line]  from line
  call plot param-assignment
  to:line::@return
line::@4: scope:[line]  from line
  to:line::@2
line::@2: scope:[line]  from line::@4 line::@8
  (byte) line::x#2 ← phi( line::@4/(const byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(const byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Culled Empty Block (label) line::@4
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@3
main: scope:[main]  from @3
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 40) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  if((const byte) line::x#0>=(const byte) line::x1#0) goto line::@1
  to:line::@2
line::@1: scope:[line]  from line
  call plot param-assignment
  to:line::@return
line::@2: scope:[line]  from line line::@8
  (byte) line::x#2 ← phi( line/(const byte) line::x#0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(const byte) plot::x#0 line::@2/(byte) plot::x#1 )
  (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

Not aliassing across scopes: plot::x#1 line::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Not aliassing across scopes: plot::x#1 line::x#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) line::x#0
Inlining constant with var siblings (const byte) line::x#0
Inlining constant with var siblings (const byte) plot::x#0
Inlining constant with var siblings (const byte) plot::x#0
Constant inlined line::x#0 = (byte) 0
Constant inlined plot::x#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@3
main: scope:[main]  from @3
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 40) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
line: scope:[line]  from main::@2
  if((byte) 0>=(const byte) line::x1#0) goto line::@1
  to:line::@2
line::@1: scope:[line]  from line
  call plot param-assignment
  to:line::@return
line::@2: scope:[line]  from line line::@8
  (byte) line::x#2 ← phi( line/(byte) 0 line::@8/(byte) line::x#1 )
  (byte) plot::x#1 ← (byte) line::x#2
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(byte) 0 line::@2/(byte) plot::x#1 )
  (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3

FINAL SYMBOL TABLE
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(void()) line((byte) line::x0 , (byte) line::x1)
(label) line::@1
(label) line::@2
(label) line::@8
(label) line::@return
(byte) line::x
(byte) line::x#1
(byte) line::x#2
(byte) line::x0
(byte) line::x1
(const byte) line::x1#0 = (byte) 10
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(void()) plot((byte) plot::x)
(byte~) plot::$1
(byte~) plot::$2
(label) plot::@return
(byte) plot::idx
(byte) plot::idx#0
(byte) plot::x
(byte) plot::x#1
(byte) plot::x#2
(byte[]) plots
(const byte[]) plots#0 = (word) 4096

Block Sequence Planned @begin @3 @end main main::@1 main::@2 main::@5 main::@return line line::@2 line::@8 line::@return line::@1 plot plot::@return 
Added new block during phi lifting main::@6(between main::@1 and main::@1)
Added new block during phi lifting line::@9(between line::@8 and line::@2)
Block Sequence Planned @begin @3 @end main main::@1 main::@2 main::@5 main::@return main::@6 line line::@2 line::@8 line::@return line::@9 line::@1 plot plot::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@3
@3: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @3
main: scope:[main]  from @3
  to:main::@1
main::@1: scope:[main]  from main main::@6
  (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte~) main::i#3 )
  *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 40) goto main::@6
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  call line param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
main::@6: scope:[main]  from main::@1
  (byte~) main::i#3 ← (byte) main::i#1
  to:main::@1
line: scope:[line]  from main::@2
  if((byte) 0>=(const byte) line::x1#0) goto line::@1
  to:line::@2
line::@2: scope:[line]  from line line::@9
  (byte) line::x#2 ← phi( line/(byte) 0 line::@9/(byte~) line::x#4 )
  (byte) plot::x#1 ← (byte) line::x#2
  (byte~) plot::x#3 ← (byte) plot::x#1
  call plot param-assignment
  to:line::@8
line::@8: scope:[line]  from line::@2
  (byte) line::x#1 ← ++ (byte) line::x#2
  if((byte) line::x#1<=(const byte) line::x1#0) goto line::@9
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  return 
  to:@return
line::@9: scope:[line]  from line::@8
  (byte~) line::x#4 ← (byte) line::x#1
  to:line::@2
line::@1: scope:[line]  from line
  call plot param-assignment
  to:line::@return
plot: scope:[plot]  from line::@1 line::@2
  (byte) plot::x#2 ← phi( line::@1/(byte) 0 line::@2/(byte~) plot::x#3 )
  (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2
  (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0
  (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1
  *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 7:line 
Calls in [line] to 15:plot 20:plot 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@3
@3: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @3
main: scope:[main]  from @3
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte~) main::i#3 ) [ main::i#2 ]
  [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ]
  [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ]
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [6] if((byte) main::i#1!=(byte) 40) goto main::@6 [ main::i#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  [7] call line param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@2
  [8] if(true) goto main::@2 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return  [ ]
  to:@return
main::@6: scope:[main]  from main::@1
  [10] (byte~) main::i#3 ← (byte) main::i#1 [ main::i#3 ]
  to:main::@1
line: scope:[line]  from main::@2
  [11] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ]
  to:line::@2
line::@2: scope:[line]  from line line::@9
  [12] (byte) line::x#2 ← phi( line/(byte) 0 line::@9/(byte~) line::x#4 ) [ line::x#2 ]
  [13] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ]
  [14] (byte~) plot::x#3 ← (byte) plot::x#1 [ line::x#2 plot::x#3 ]
  [15] call plot param-assignment [ line::x#2 ]
  to:line::@8
line::@8: scope:[line]  from line::@2
  [16] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ]
  [17] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@9 [ line::x#1 ]
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  [18] return  [ ]
  to:@return
line::@9: scope:[line]  from line::@8
  [19] (byte~) line::x#4 ← (byte) line::x#1 [ line::x#4 ]
  to:line::@2
line::@1: scope:[line]  from line
  [20] call plot param-assignment [ ]
  to:line::@return
plot: scope:[plot]  from line::@1 line::@2
  [21] (byte) plot::x#2 ← phi( line::@1/(byte) 0 line::@2/(byte~) plot::x#3 ) [ plot::x#2 ]
  [22] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ]
  [23] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ]
  [24] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ]
  [25] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [26] return  [ ]
  to:@return

Created 3 initial phi equivalence classes
Coalesced [10] main::i#3 ← main::i#1
Coalesced [14] plot::x#3 ← plot::x#1
Coalesced [19] line::x#4 ← line::x#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) main::@6
Culled Empty Block (label) line::@9
Block Sequence Planned @begin @3 @end main main::@1 main::@2 main::@5 main::@return line line::@2 line::@8 line::@return line::@1 plot plot::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@3
@3: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @3
main: scope:[main]  from @3
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 ) [ main::i#2 ]
  [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ]
  [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ]
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  [7] call line param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@2
  [8] if(true) goto main::@2 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return  [ ]
  to:@return
line: scope:[line]  from main::@2
  [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ]
  to:line::@2
line::@2: scope:[line]  from line line::@8
  [11] (byte) line::x#2 ← phi( line/(byte) 0 line::@8/(byte) line::x#1 ) [ line::x#2 ]
  [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ]
  [13] call plot param-assignment [ line::x#2 ]
  to:line::@8
line::@8: scope:[line]  from line::@2
  [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ]
  [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ]
  to:line::@return
line::@return: scope:[line]  from line::@1 line::@8
  [16] return  [ ]
  to:@return
line::@1: scope:[line]  from line
  [17] call plot param-assignment [ ]
  to:line::@return
plot: scope:[plot]  from line::@1 line::@2
  [18] (byte) plot::x#2 ← phi( line::@1/(byte) 0 line::@2/(byte) plot::x#1 ) [ plot::x#2 ]
  [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ]
  [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ]
  [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ]
  [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [23] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@3 dominated by  @3 @begin 
@end dominated by  @3 @end @begin 
main dominated by  @3 @begin main 
main::@1 dominated by  @3 @begin main::@1 main 
main::@2 dominated by  @3 @begin main::@2 main::@1 main 
main::@5 dominated by  @3 @begin main::@2 main::@1 main::@5 main 
main::@return dominated by  @3 @begin main::@2 main::@1 main main::@5 main::@return 
line dominated by  @3 @begin line main::@2 main::@1 main 
line::@2 dominated by  @3 line::@2 @begin line main::@2 main::@1 main 
line::@8 dominated by  @3 line::@2 @begin line main::@2 main::@1 line::@8 main 
line::@return dominated by  @3 @begin line main::@2 main::@1 line::@return main 
line::@1 dominated by  @3 @begin line::@1 line main::@2 main::@1 main 
plot dominated by  @3 @begin line main::@2 main::@1 plot main 
plot::@return dominated by  @3 @begin line main::@2 main::@1 plot::@return plot main 

Found back edge: Loop head: main::@1 tails: main::@1 blocks: null
Found back edge: Loop head: main::@2 tails: main::@5 blocks: null
Found back edge: Loop head: line::@2 tails: line::@8 blocks: null
Populated: Loop head: main::@1 tails: main::@1 blocks: main::@1 
Populated: Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2 
Populated: Loop head: line::@2 tails: line::@8 blocks: line::@8 line::@2 
NATURAL LOOPS
Loop head: main::@1 tails: main::@1 blocks: main::@1 
Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2 
Loop head: line::@2 tails: line::@8 blocks: line::@8 line::@2 

Found 0 loops in scope []
Found 2 loops in scope [main]
  Loop head: main::@1 tails: main::@1 blocks: main::@1 
  Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2 
Found 1 loops in scope [line]
  Loop head: line::@2 tails: line::@8 blocks: line::@8 line::@2 
Found 0 loops in scope [plot]
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@1 blocks: main::@1  depth: 1
Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2  depth: 1
Loop head: line::@2 tails: line::@8 blocks: line::@8 line::@2  depth: 2


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) line((byte) line::x0 , (byte) line::x1)
(byte) line::x
(byte) line::x#1 151.5
(byte) line::x#2 101.0
(byte) line::x0
(byte) line::x1
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 18.333333333333332
(void()) plot((byte) plot::x)
(byte~) plot::$1 4.0
(byte~) plot::$2 4.0
(byte) plot::idx
(byte) plot::idx#0 2.0
(byte) plot::x
(byte) plot::x#1 202.0
(byte) plot::x#2 103.0
(byte[]) plots

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ line::x#2 line::x#1 ]
[ plot::x#2 plot::x#1 ]
Added variable plot::idx#0 to zero page equivalence class [ plot::idx#0 ]
Added variable plot::$1 to zero page equivalence class [ plot::$1 ]
Added variable plot::$2 to zero page equivalence class [ plot::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ line::x#2 line::x#1 ]
[ plot::x#2 plot::x#1 ]
[ plot::idx#0 ]
[ plot::$1 ]
[ plot::$2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ line::x#2 line::x#1 ]
Allocated zp ZP_BYTE:4 [ plot::x#2 plot::x#1 ]
Allocated zp ZP_BYTE:5 [ plot::idx#0 ]
Allocated zp ZP_BYTE:6 [ plot::$1 ]
Allocated zp ZP_BYTE:7 [ plot::$2 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
bbegin:
  jmp b3
//SEG3 @3
b3:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
main_from_b3:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .label i = 2
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_zpby1=zpby1 
    ldx i
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_zpby1=coby2 
    lda #0
    ldx i
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- zpby1_neq_coby1_then_la1 
    lda i
    cmp #$28
    bne b1_from_b1
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
    jmp b5
  //SEG19 main::@5
  b5:
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 3
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  b2_from_line:
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  b2_from_b8:
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
    jmp b2
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- zpby1=zpby2 
    lda x
    sta plot.x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
    jmp b8
  //SEG34 line::@8
  b8:
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2_from_b8
    beq b2_from_b8
    jmp breturn
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  plot_from_b1:
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- zpby1=coby1 
    lda #0
    sta plot.x
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
    .label _1 = 6
    .label _2 = 7
    .label x = 4
    .label idx = 5
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- zpby1=cowo1_staridx_zpby2 
    ldx x
    lda plots,x
    sta idx
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx idx
    lda SCREEN,x
    sta _1
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- zpby1=zpby2_plus_1 
    lda _1
    clc
    adc #1
    sta _2
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_zpby1=zpby2 
    lda _2
    ldx idx
    sta SCREEN,x
    jmp breturn
  //SEG48 plot::@return
  breturn:
  //SEG49 [23] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:6 [ plot::$1 ] has ALU potential.
Statement [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] always clobbers reg byte a 
Statement [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] always clobbers reg byte a 
Statement [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] always clobbers reg byte a 
Statement [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ line::x#2 line::x#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ plot::x#2 plot::x#1 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ plot::idx#0 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ plot::$1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:7 [ plot::$2 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plot] 305: zp ZP_BYTE:4 [ plot::x#2 plot::x#1 ] 4: zp ZP_BYTE:6 [ plot::$1 ] 4: zp ZP_BYTE:7 [ plot::$2 ] 2: zp ZP_BYTE:5 [ plot::idx#0 ] 
Uplift Scope [line] 252.5: zp ZP_BYTE:3 [ line::x#2 line::x#1 ] 
Uplift Scope [main] 34.83: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [plot] best 3918 combination reg byte y [ plot::x#2 plot::x#1 ] reg byte a [ plot::$1 ] reg byte a [ plot::$2 ] reg byte x [ plot::idx#0 ] 
Uplifting [line] best 3918 combination zp ZP_BYTE:3 [ line::x#2 line::x#1 ] 
Uplifting [main] best 3768 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 3768 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ line::x#2 line::x#1 ]
Uplifting [line] best 3768 combination zp ZP_BYTE:3 [ line::x#2 line::x#1 ] 
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ line::x#2 line::x#1 ]
Removing instruction jmp b3
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 @3
b3:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
main_from_b3:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_xby=coby2 
    lda #0
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$28
    bne b1_from_b1
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
  //SEG19 main::@5
  b5:
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG21 main::@return
  breturn:
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 2
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  b2_from_line:
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  b2_from_b8:
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- yby=zpby1 
    ldy x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
  //SEG34 line::@8
  b8:
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2_from_b8
    beq b2_from_b8
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  plot_from_b1:
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- yby=coby1 
    ldy #0
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- xby=cowo1_staridx_yby 
    ldx plots,y
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda SCREEN,x
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_xby=aby 
    sta SCREEN,x
  //SEG48 plot::@return
  breturn:
  //SEG49 [23] return  [ ]
    rts
}

Replacing label b1_from_b1 with b1
Replacing label b2_from_b8 with b2
Replacing label b2_from_b8 with b2
Removing instruction bbegin:
Removing instruction main_from_b3:
Removing instruction b1_from_b1:
Removing instruction b2_from_b8:
Removing instruction plot_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @3
b3:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_xby=coby2 
    lda #0
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$28
    bne b1
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
  //SEG19 main::@5
  b5:
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG21 main::@return
  breturn:
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 2
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  b2_from_line:
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- yby=zpby1 
    ldy x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  plot_from_b2:
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
  //SEG34 line::@8
  b8:
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2
    beq b2
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- yby=coby1 
    ldy #0
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- xby=cowo1_staridx_yby 
    ldx plots,y
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda SCREEN,x
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_xby=aby 
    sta SCREEN,x
  //SEG48 plot::@return
  breturn:
  //SEG49 [23] return  [ ]
    rts
}

Removing instruction b3:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b2_from_line:
Removing instruction plot_from_b2:
Removing instruction b8:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @3
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_xby=coby2 
    lda #0
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$28
    bne b1
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
  //SEG19 main::@5
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG21 main::@return
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 2
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    lda #0
    sta x
    jmp b2
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- yby=zpby1 
    ldy x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
  //SEG34 line::@8
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2
    beq b2
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- yby=coby1 
    ldy #0
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- xby=cowo1_staridx_yby 
    ldx plots,y
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda SCREEN,x
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_xby=aby 
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [23] return  [ ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @3
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_xby=coby2 
    lda #0
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$28
    bne b1
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
  //SEG19 main::@5
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG21 main::@return
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 2
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    lda #0
    sta x
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- yby=zpby1 
    ldy x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
  //SEG34 line::@8
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2
    beq b2
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- yby=coby1 
    ldy #0
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- xby=cowo1_staridx_yby 
    ldx plots,y
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda SCREEN,x
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_xby=aby 
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [23] return  [ ]
    rts
}

Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @3
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_xby=coby2 
    lda #0
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$28
    bne b1
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
  //SEG19 main::@5
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG21 main::@return
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 2
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    sta x
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- yby=zpby1 
    ldy x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
  //SEG34 line::@8
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2
    beq b2
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- yby=coby1 
    ldy #0
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- xby=cowo1_staridx_yby 
    ldx plots,y
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda SCREEN,x
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_xby=aby 
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [23] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(void()) line((byte) line::x0 , (byte) line::x1)
(label) line::@1
(label) line::@2
(label) line::@8
(label) line::@return
(byte) line::x
(byte) line::x#1 x zp ZP_BYTE:2 151.5
(byte) line::x#2 x zp ZP_BYTE:2 101.0
(byte) line::x0
(byte) line::x1
(const byte) line::x1#0 x1 = (byte) 10
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 18.333333333333332
(void()) plot((byte) plot::x)
(byte~) plot::$1 reg byte a 4.0
(byte~) plot::$2 reg byte a 4.0
(label) plot::@return
(byte) plot::idx
(byte) plot::idx#0 reg byte x 2.0
(byte) plot::x
(byte) plot::x#1 reg byte y 202.0
(byte) plot::x#2 reg byte y 103.0
(byte[]) plots
(const byte[]) plots#0 plots = (word) 4096

reg byte x [ main::i#2 main::i#1 ]
zp ZP_BYTE:2 [ line::x#2 line::x#1 ]
reg byte y [ plot::x#2 plot::x#1 ]
reg byte x [ plot::idx#0 ]
reg byte a [ plot::$1 ]
reg byte a [ plot::$2 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const plots = $1000
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @3
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @3 to main [phi:@3->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] *((const byte[]) plots#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta plots,x
  //SEG14 [4] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] -- cowo1_staridx_xby=coby2 
    lda #0
    sta SCREEN,x
  //SEG15 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] -- xby=_inc_xby 
    inx
  //SEG16 [6] if((byte) main::i#1!=(byte) 40) goto main::@1 [ main::i#1 ] -- xby_neq_coby1_then_la1 
    cpx #$28
    bne b1
  //SEG17 main::@2
  b2:
  //SEG18 [7] call line param-assignment [ ]
    jsr line
  //SEG19 main::@5
  //SEG20 [8] if(true) goto main::@2 [ ] -- true_then_la1 
    jmp b2
  //SEG21 main::@return
  //SEG22 [9] return  [ ]
    rts
}
//SEG23 line
line: {
    .const x1 = $a
    .label x = 2
  //SEG24 [10] if((byte) 0>=(const byte) line::x1#0) goto line::@1 [ ] -- coby1_ge_coby2_then_la1 
    lda #0
    cmp #x1
    bcs b1
  //SEG25 [11] phi from line to line::@2 [phi:line->line::@2]
  //SEG26 [11] phi (byte) line::x#2 = (byte) 0 [phi:line->line::@2#0] -- zpby1=coby1 
    sta x
  //SEG27 [11] phi from line::@8 to line::@2 [phi:line::@8->line::@2]
  //SEG28 [11] phi (byte) line::x#2 = (byte) line::x#1 [phi:line::@8->line::@2#0] -- register_copy 
  //SEG29 line::@2
  b2:
  //SEG30 [12] (byte) plot::x#1 ← (byte) line::x#2 [ line::x#2 plot::x#1 ] -- yby=zpby1 
    ldy x
  //SEG31 [13] call plot param-assignment [ line::x#2 ]
  //SEG32 [18] phi from line::@2 to plot [phi:line::@2->plot]
  //SEG33 [18] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:line::@2->plot#0] -- register_copy 
    jsr plot
  //SEG34 line::@8
  //SEG35 [14] (byte) line::x#1 ← ++ (byte) line::x#2 [ line::x#1 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG36 [15] if((byte) line::x#1<=(const byte) line::x1#0) goto line::@2 [ line::x#1 ] -- zpby1_le_coby1_then_la1 
    lda x
    cmp #x1
    bcc b2
    beq b2
  //SEG37 line::@return
  breturn:
  //SEG38 [16] return  [ ]
    rts
  //SEG39 line::@1
  b1:
  //SEG40 [17] call plot param-assignment [ ]
  //SEG41 [18] phi from line::@1 to plot [phi:line::@1->plot]
  //SEG42 [18] phi (byte) plot::x#2 = (byte) 0 [phi:line::@1->plot#0] -- yby=coby1 
    ldy #0
    jsr plot
    jmp breturn
}
//SEG43 plot
plot: {
  //SEG44 [19] (byte) plot::idx#0 ← (const byte[]) plots#0 *idx (byte) plot::x#2 [ plot::idx#0 ] -- xby=cowo1_staridx_yby 
    ldx plots,y
  //SEG45 [20] (byte~) plot::$1 ← (const byte*) SCREEN#0 *idx (byte) plot::idx#0 [ plot::idx#0 plot::$1 ] -- aby=cowo1_staridx_xby 
    lda SCREEN,x
  //SEG46 [21] (byte~) plot::$2 ← (byte~) plot::$1 + (byte) 1 [ plot::idx#0 plot::$2 ] -- aby=aby_plus_1 
    clc
    adc #1
  //SEG47 [22] *((const byte*) SCREEN#0 + (byte) plot::idx#0) ← (byte~) plot::$2 [ ] -- cowo1_staridx_xby=aby 
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [23] return  [ ]
    rts
}

