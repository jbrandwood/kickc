@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$18 ← (byte) main::i#2 << (byte) 2
  [7] *((byte*)(const struct ProcessingChar[8]) PROCESSING#0 + (byte~) main::$18) ← (byte) 0
  [8] *((byte*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) main::$18) ← (byte) 0
  [9] *((word*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) main::$18) ← (const word) NOT_FOUND#0
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(byte) 8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call setupRasterIrq 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [14] (byte*) main::sc#2 ← phi( main::@2/(const byte*) SCREEN#0 main::@3/(byte*) main::sc#1 )
  [15] (byte~) main::$5 ← < (byte*) main::sc#2
  [16] (byte~) main::$6 ← (byte~) main::$5 & (byte) $1f
  [17] (byte~) main::$7 ← (byte) 'a' + (byte~) main::$6
  [18] *((byte*) main::sc#2) ← (byte~) main::$7
  [19] (byte*) main::sc#1 ← ++ (byte*) main::sc#2
  [20] if((byte*) main::sc#1!=(const byte*) SCREEN#0+(word) $3e7+(byte) 1) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [21] (byte*) main::dst#2 ← phi( main::@3/(const byte[$3e8]) SCREEN_COPY#0 main::@4/(byte*) main::dst#1 )
  [21] (byte*) main::src#2 ← phi( main::@3/(const byte*) SCREEN#0 main::@4/(byte*) main::src#1 )
  [22] *((byte*) main::dst#2) ← *((byte*) main::src#2)
  [23] (byte*) main::src#1 ← ++ (byte*) main::src#2
  [24] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  [25] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e7) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@4
  [26] phi()
  [27] call initSquareTables 
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@7
  [28] phi()
  [29] call getCenterChar 
  [30] (byte) getCenterChar::return_x#0 ← (byte) getCenterChar::return_x#1
  [31] (byte) getCenterChar::return_y#0 ← (byte) getCenterChar::return_y#1
  [32] (word) getCenterChar::return_dist#0 ← (word) getCenterChar::return_dist#1
  to:main::@9
main::@9: scope:[main]  from main::@6
  [33] (byte) main::center_x#0 ← (byte) getCenterChar::return_x#0
  [34] (byte) main::center_y#0 ← (byte) getCenterChar::return_y#0
  [35] (word) main::center_dist#0 ← (word) getCenterChar::return_dist#0
  [36] if((word) main::center_dist#0!=(const word) NOT_FOUND#0) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@8 main::@9
  [37] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7)
  to:main::@8
main::@7: scope:[main]  from main::@9
  [38] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0
  [39] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  [40] (word) startProcessing::center_dist#0 ← (word) main::center_dist#0
  [41] call startProcessing 
  to:main::@6
startProcessing: scope:[startProcessing]  from main::@7
  [42] phi()
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@6
  [43] (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) $ff startProcessing::@6/(byte~) startProcessing::freeIdx#7 )
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  [44] (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) 0 startProcessing::@3/(byte) startProcessing::i#1 )
  [45] (byte~) startProcessing::$4 ← (byte) startProcessing::i#2 << (byte) 2
  [46] if(*((word*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$4)!=(const word) NOT_FOUND#0) goto startProcessing::@3
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@2 startProcessing::@7
  [47] (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@7/(byte~) startProcessing::freeIdx#8 startProcessing::@2/(byte) startProcessing::i#2 )
  [48] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@6
  to:startProcessing::@5
startProcessing::@5: scope:[startProcessing]  from startProcessing::@4
  [49] (byte~) startProcessing::$5 ← (byte) startProcessing::freeIdx#2 << (byte) 2
  [50] *((byte*)(const struct ProcessingChar[8]) PROCESSING#0 + (byte~) startProcessing::$5) ← (byte) startProcessing::center_x#0
  [51] *((byte*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) startProcessing::$5) ← (byte) startProcessing::center_y#0
  [52] *((word*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) startProcessing::$5) ← (word) startProcessing::center_dist#0
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@5
  [53] return 
  to:@return
startProcessing::@6: scope:[startProcessing]  from startProcessing::@4
  [54] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2
  to:startProcessing::@1
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  [55] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2
  [56] if((byte) startProcessing::i#1!=(byte) 8) goto startProcessing::@2
  to:startProcessing::@7
startProcessing::@7: scope:[startProcessing]  from startProcessing::@3
  [57] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6
  to:startProcessing::@4
getCenterChar: scope:[getCenterChar]  from main::@6
  [58] phi()
  to:getCenterChar::@1
getCenterChar::@1: scope:[getCenterChar]  from getCenterChar getCenterChar::@9
  [59] (byte) getCenterChar::closest_y#9 ← phi( getCenterChar/(byte) 0 getCenterChar::@9/(byte) getCenterChar::return_y#1 )
  [59] (byte) getCenterChar::closest_x#9 ← phi( getCenterChar/(byte) 0 getCenterChar::@9/(byte) getCenterChar::return_x#1 )
  [59] (word) getCenterChar::closest_dist#8 ← phi( getCenterChar/(const word) NOT_FOUND#0 getCenterChar::@9/(word~) getCenterChar::closest_dist#10 )
  [59] (byte) getCenterChar::y#7 ← phi( getCenterChar/(byte) 0 getCenterChar::@9/(byte) getCenterChar::y#1 )
  [59] (byte*) getCenterChar::screen_line#4 ← phi( getCenterChar/(const byte[$3e8]) SCREEN_COPY#0 getCenterChar::@9/(byte*) getCenterChar::screen_line#1 )
  to:getCenterChar::@2
getCenterChar::@2: scope:[getCenterChar]  from getCenterChar::@1 getCenterChar::@10
  [60] (byte) getCenterChar::closest_y#7 ← phi( getCenterChar::@1/(byte) getCenterChar::closest_y#9 getCenterChar::@10/(byte) getCenterChar::return_y#1 )
  [60] (byte) getCenterChar::closest_x#7 ← phi( getCenterChar::@1/(byte) getCenterChar::closest_x#9 getCenterChar::@10/(byte) getCenterChar::return_x#1 )
  [60] (word) getCenterChar::closest_dist#2 ← phi( getCenterChar::@1/(word) getCenterChar::closest_dist#8 getCenterChar::@10/(word~) getCenterChar::closest_dist#12 )
  [60] (byte) getCenterChar::x#2 ← phi( getCenterChar::@1/(byte) 0 getCenterChar::@10/(byte) getCenterChar::x#1 )
  [61] if(*((byte*) getCenterChar::screen_line#4 + (byte) getCenterChar::x#2)==(byte) ' ') goto getCenterChar::@11
  to:getCenterChar::@4
getCenterChar::@4: scope:[getCenterChar]  from getCenterChar::@2
  [62] (byte~) getCenterChar::$13 ← (byte) getCenterChar::x#2 << (byte) 1
  [63] (byte~) getCenterChar::$14 ← (byte) getCenterChar::y#7 << (byte) 1
  [64] (word) getCenterChar::dist#0 ← *((const word[$28]) SQUARES_X#0 + (byte~) getCenterChar::$13) + *((const word[$19]) SQUARES_Y#0 + (byte~) getCenterChar::$14)
  [65] if((word) getCenterChar::dist#0>=(word) getCenterChar::closest_dist#2) goto getCenterChar::@12
  to:getCenterChar::@5
getCenterChar::@5: scope:[getCenterChar]  from getCenterChar::@4
  [66] (byte~) getCenterChar::return_x#7 ← (byte) getCenterChar::x#2
  [67] (byte~) getCenterChar::return_y#7 ← (byte) getCenterChar::y#7
  to:getCenterChar::@3
getCenterChar::@3: scope:[getCenterChar]  from getCenterChar::@11 getCenterChar::@12 getCenterChar::@5
  [68] (byte) getCenterChar::return_y#1 ← phi( getCenterChar::@11/(byte) getCenterChar::closest_y#7 getCenterChar::@12/(byte) getCenterChar::closest_y#7 getCenterChar::@5/(byte~) getCenterChar::return_y#7 )
  [68] (byte) getCenterChar::return_x#1 ← phi( getCenterChar::@11/(byte) getCenterChar::closest_x#7 getCenterChar::@12/(byte) getCenterChar::closest_x#7 getCenterChar::@5/(byte~) getCenterChar::return_x#7 )
  [68] (word) getCenterChar::return_dist#1 ← phi( getCenterChar::@11/(word~) getCenterChar::return_dist#5 getCenterChar::@12/(word~) getCenterChar::return_dist#6 getCenterChar::@5/(word) getCenterChar::dist#0 )
  [69] (byte) getCenterChar::x#1 ← ++ (byte) getCenterChar::x#2
  [70] if((byte) getCenterChar::x#1!=(byte) $28) goto getCenterChar::@10
  to:getCenterChar::@6
getCenterChar::@6: scope:[getCenterChar]  from getCenterChar::@3
  [71] (byte*) getCenterChar::screen_line#1 ← (byte*) getCenterChar::screen_line#4 + (byte) $28
  [72] (byte) getCenterChar::y#1 ← ++ (byte) getCenterChar::y#7
  [73] if((byte) getCenterChar::y#1!=(byte) $19) goto getCenterChar::@9
  to:getCenterChar::@7
getCenterChar::@7: scope:[getCenterChar]  from getCenterChar::@6
  [74] if((word) getCenterChar::return_dist#1==(const word) NOT_FOUND#0) goto getCenterChar::@return
  to:getCenterChar::@8
getCenterChar::@8: scope:[getCenterChar]  from getCenterChar::@7
  [75] (word~) getCenterChar::$9 ← (word)(byte) getCenterChar::return_y#1
  [76] (word) getCenterChar::$15 ← (word~) getCenterChar::$9 << (byte) 2
  [77] (word) getCenterChar::$16 ← (word) getCenterChar::$15 + (word~) getCenterChar::$9
  [78] (word~) getCenterChar::$10 ← (word) getCenterChar::$16 << (byte) 3
  [79] (byte*~) getCenterChar::$11 ← (const byte[$3e8]) SCREEN_COPY#0 + (word~) getCenterChar::$10
  [80] *((byte*~) getCenterChar::$11 + (byte) getCenterChar::return_x#1) ← (byte) ' '
  to:getCenterChar::@return
getCenterChar::@return: scope:[getCenterChar]  from getCenterChar::@7 getCenterChar::@8
  [81] return 
  to:@return
getCenterChar::@9: scope:[getCenterChar]  from getCenterChar::@6
  [82] (word~) getCenterChar::closest_dist#10 ← (word) getCenterChar::return_dist#1
  to:getCenterChar::@1
getCenterChar::@10: scope:[getCenterChar]  from getCenterChar::@3
  [83] (word~) getCenterChar::closest_dist#12 ← (word) getCenterChar::return_dist#1
  to:getCenterChar::@2
getCenterChar::@12: scope:[getCenterChar]  from getCenterChar::@4
  [84] (word~) getCenterChar::return_dist#6 ← (word) getCenterChar::closest_dist#2
  to:getCenterChar::@3
getCenterChar::@11: scope:[getCenterChar]  from getCenterChar::@2
  [85] (word~) getCenterChar::return_dist#5 ← (word) getCenterChar::closest_dist#2
  to:getCenterChar::@3
initSquareTables: scope:[initSquareTables]  from main::@5
  [86] phi()
  to:initSquareTables::@1
initSquareTables::@1: scope:[initSquareTables]  from initSquareTables initSquareTables::@9
  [87] (byte) initSquareTables::x#2 ← phi( initSquareTables/(byte) 0 initSquareTables::@9/(byte) initSquareTables::x#1 )
  [88] if((byte) initSquareTables::x#2<(byte) $14) goto initSquareTables::@2
  to:initSquareTables::@3
initSquareTables::@3: scope:[initSquareTables]  from initSquareTables::@1
  [89] (byte~) initSquareTables::$2 ← (byte) initSquareTables::x#2 - (byte) $14
  to:initSquareTables::@4
initSquareTables::@4: scope:[initSquareTables]  from initSquareTables::@2 initSquareTables::@3
  [90] (byte) initSquareTables::x_dist#0 ← phi( initSquareTables::@2/(byte~) initSquareTables::$4 initSquareTables::@3/(byte~) initSquareTables::$2 )
  [91] (byte) mul8u::a#1 ← (byte) initSquareTables::x_dist#0
  [92] (byte) mul8u::b#0 ← (byte) initSquareTables::x_dist#0
  [93] call mul8u 
  [94] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:initSquareTables::@9
initSquareTables::@9: scope:[initSquareTables]  from initSquareTables::@4
  [95] (word~) initSquareTables::$6 ← (word) mul8u::return#2
  [96] (byte~) initSquareTables::$16 ← (byte) initSquareTables::x#2 << (byte) 1
  [97] *((const word[$28]) SQUARES_X#0 + (byte~) initSquareTables::$16) ← (word~) initSquareTables::$6
  [98] (byte) initSquareTables::x#1 ← ++ (byte) initSquareTables::x#2
  [99] if((byte) initSquareTables::x#1!=(byte) $28) goto initSquareTables::@1
  to:initSquareTables::@5
initSquareTables::@5: scope:[initSquareTables]  from initSquareTables::@10 initSquareTables::@9
  [100] (byte) initSquareTables::y#2 ← phi( initSquareTables::@10/(byte) initSquareTables::y#1 initSquareTables::@9/(byte) 0 )
  [101] if((byte) initSquareTables::y#2<(byte) $c) goto initSquareTables::@6
  to:initSquareTables::@7
initSquareTables::@7: scope:[initSquareTables]  from initSquareTables::@5
  [102] (byte~) initSquareTables::$10 ← (byte) initSquareTables::y#2 - (byte) $c
  to:initSquareTables::@8
initSquareTables::@8: scope:[initSquareTables]  from initSquareTables::@6 initSquareTables::@7
  [103] (byte) initSquareTables::y_dist#0 ← phi( initSquareTables::@6/(byte~) initSquareTables::$12 initSquareTables::@7/(byte~) initSquareTables::$10 )
  [104] (byte) mul8u::a#2 ← (byte) initSquareTables::y_dist#0
  [105] (byte) mul8u::b#1 ← (byte) initSquareTables::y_dist#0
  [106] call mul8u 
  [107] (word) mul8u::return#3 ← (word) mul8u::res#2
  to:initSquareTables::@10
initSquareTables::@10: scope:[initSquareTables]  from initSquareTables::@8
  [108] (word~) initSquareTables::$14 ← (word) mul8u::return#3
  [109] (byte~) initSquareTables::$17 ← (byte) initSquareTables::y#2 << (byte) 1
  [110] *((const word[$19]) SQUARES_Y#0 + (byte~) initSquareTables::$17) ← (word~) initSquareTables::$14
  [111] (byte) initSquareTables::y#1 ← ++ (byte) initSquareTables::y#2
  [112] if((byte) initSquareTables::y#1!=(byte) $19) goto initSquareTables::@5
  to:initSquareTables::@return
initSquareTables::@return: scope:[initSquareTables]  from initSquareTables::@10
  [113] return 
  to:@return
initSquareTables::@6: scope:[initSquareTables]  from initSquareTables::@5
  [114] (byte~) initSquareTables::$12 ← (byte) $c - (byte) initSquareTables::y#2
  to:initSquareTables::@8
initSquareTables::@2: scope:[initSquareTables]  from initSquareTables::@1
  [115] (byte~) initSquareTables::$4 ← (byte) $14 - (byte) initSquareTables::x#2
  to:initSquareTables::@4
mul8u: scope:[mul8u]  from initSquareTables::@4 initSquareTables::@8
  [116] (byte) mul8u::a#6 ← phi( initSquareTables::@8/(byte) mul8u::a#2 initSquareTables::@4/(byte) mul8u::a#1 )
  [116] (word) mul8u::mb#0 ← phi( initSquareTables::@8/(byte) mul8u::b#1 initSquareTables::@4/(byte) mul8u::b#0 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [117] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [117] (word) mul8u::res#2 ← phi( mul8u/(byte) 0 mul8u::@3/(word) mul8u::res#6 )
  [117] (byte) mul8u::a#3 ← phi( mul8u/(byte) mul8u::a#6 mul8u::@3/(byte) mul8u::a#0 )
  [118] if((byte) mul8u::a#3!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [119] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [120] (byte~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
  [121] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [122] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [123] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [124] (byte) mul8u::a#0 ← (byte) mul8u::a#3 >> (byte) 1
  [125] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1
setupRasterIrq: scope:[setupRasterIrq]  from main::@2
  asm { sei  }
  [127] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [128] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [129] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  to:setupRasterIrq::@1
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  [130] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1
  [131] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0
  [132] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [133] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  [135] return 
  to:@return
irqBottom: scope:[irqBottom]  from
  [136] phi()
  to:irqBottom::@1
irqBottom::@1: scope:[irqBottom]  from irqBottom irqBottom::@1
  [137] (byte) irqBottom::i#2 ← phi( irqBottom/(byte) 0 irqBottom::@1/(byte) irqBottom::i#1 )
  [138] (byte) irqBottom::i#1 ← ++ (byte) irqBottom::i#2
  [139] if((byte) irqBottom::i#1!=(byte) 5) goto irqBottom::@1
  to:irqBottom::@2
irqBottom::@2: scope:[irqBottom]  from irqBottom::@1
  [140] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [141] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  [142] call processChars 
  to:irqBottom::@3
irqBottom::@3: scope:[irqBottom]  from irqBottom::@2
  [143] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [144] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  [145] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0
  [146] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop()
  [147] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@return: scope:[irqBottom]  from irqBottom::@3
  [148] return 
  to:@return
processChars: scope:[processChars]  from irqBottom::@2
  [149] phi()
  to:processChars::@1
processChars::@1: scope:[processChars]  from processChars processChars::@2
  [150] (byte) processChars::i#2 ← phi( processChars/(byte) 0 processChars::@2/(byte) processChars::i#1 )
  [151] (byte~) processChars::$13 ← (byte) processChars::i#2 << (byte) 2
  [152] if(*((word*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$13)==(const word) NOT_FOUND#0) goto processChars::@2
  to:processChars::@5
processChars::@5: scope:[processChars]  from processChars::@1
  [153] (byte~) processChars::$14 ← (byte) processChars::i#2 << (byte) 2
  [154] (byte) processChars::processing_x#0 ← *((byte*)(const struct ProcessingChar[8]) PROCESSING#0 + (byte~) processChars::$14)
  [155] (byte) processChars::processing_y#0 ← *((byte*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_Y + (byte~) processChars::$14)
  [156] (word~) processChars::$2 ← (word)(byte) processChars::processing_y#0
  [157] (word) processChars::$21 ← (word~) processChars::$2 << (byte) 2
  [158] (word) processChars::$22 ← (word) processChars::$21 + (word~) processChars::$2
  [159] (word~) processChars::$3 ← (word) processChars::$22 << (byte) 3
  [160] (byte*~) processChars::$4 ← (const byte*) COLS#0 + (word~) processChars::$3
  [161] *((byte*~) processChars::$4 + (byte) processChars::processing_x#0) ← (const byte) WHITE#0
  [162] (word~) processChars::$6 ← (word)(byte) processChars::processing_y#0
  [163] (word) processChars::$24 ← (word~) processChars::$6 << (byte) 2
  [164] (word) processChars::$25 ← (word) processChars::$24 + (word~) processChars::$6
  [165] (word~) processChars::$7 ← (word) processChars::$25 << (byte) 3
  [166] (byte*~) processChars::$8 ← (const byte*) SCREEN#0 + (word~) processChars::$7
  [167] if(*((byte*~) processChars::$8 + (byte) processChars::processing_x#0)==(byte) ' ') goto processChars::@3
  to:processChars::@6
processChars::@6: scope:[processChars]  from processChars::@5
  [168] if(*((byte*~) processChars::$8 + (byte) processChars::processing_x#0)>(byte) ' ') goto processChars::@4
  to:processChars::@7
processChars::@7: scope:[processChars]  from processChars::@6
  [169] *((byte*~) processChars::$8 + (byte) processChars::processing_x#0) ← ++ *((byte*~) processChars::$8 + (byte) processChars::processing_x#0)
  to:processChars::@2
processChars::@2: scope:[processChars]  from processChars::@1 processChars::@3 processChars::@4 processChars::@7
  [170] (byte) processChars::i#1 ← ++ (byte) processChars::i#2
  [171] if((byte) processChars::i#1!=(byte) 8) goto processChars::@1
  to:processChars::@return
processChars::@return: scope:[processChars]  from processChars::@2
  [172] return 
  to:@return
processChars::@4: scope:[processChars]  from processChars::@6
  [173] *((byte*~) processChars::$8 + (byte) processChars::processing_x#0) ← -- *((byte*~) processChars::$8 + (byte) processChars::processing_x#0)
  to:processChars::@2
processChars::@3: scope:[processChars]  from processChars::@5
  [174] (byte~) processChars::$15 ← (byte) processChars::i#2 << (byte) 2
  [175] *((word*)(const struct ProcessingChar[8]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGCHAR_DIST + (byte~) processChars::$15) ← (const word) NOT_FOUND#0
  to:processChars::@2
irqTop: scope:[irqTop]  from
  [176] phi()
  to:irqTop::@1
irqTop::@1: scope:[irqTop]  from irqTop irqTop::@1
  [177] (byte) irqTop::i#2 ← phi( irqTop/(byte) 0 irqTop::@1/(byte) irqTop::i#1 )
  [178] (byte) irqTop::i#1 ← ++ (byte) irqTop::i#2
  [179] if((byte) irqTop::i#1!=(byte) 5) goto irqTop::@1
  to:irqTop::@2
irqTop::@2: scope:[irqTop]  from irqTop::@1
  [180] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [181] *((const byte*) BGCOL#0) ← (const byte) WHITE#0
  to:irqTop::@3
irqTop::@3: scope:[irqTop]  from irqTop::@2 irqTop::@3
  [182] (byte) irqTop::i1#2 ← phi( irqTop::@2/(byte) 0 irqTop::@3/(byte) irqTop::i1#1 )
  [183] (byte) irqTop::i1#1 ← ++ (byte) irqTop::i1#2
  [184] if((byte) irqTop::i1#1!=(byte) 8) goto irqTop::@3
  to:irqTop::@4
irqTop::@4: scope:[irqTop]  from irqTop::@3
  [185] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [186] *((const byte*) BGCOL#0) ← (const byte) BLUE#0
  [187] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0
  [188] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom()
  [189] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@return: scope:[irqTop]  from irqTop::@4
  [190] return 
  to:@return
