@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] phi()
  [5] call main 
  to:@end
@end: scope:[]  from @2
  [6] phi()

(void()) main()
main: scope:[main]  from @2
  [7] phi()
  [8] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [9] phi()
  [10] call printf_schar 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] phi()
  [12] call printf_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] phi()
  [14] call printf_schar 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call printf_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] phi()
  [18] call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [19] phi()
  [20] call printf_ln 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [21] return 
  to:@return

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from main::@2 main::@4 main::@6 printf_str::@4
  [22] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [23] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [24] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [25] (byte) printf_cursor_x ← (byte) 0
  [26] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [27] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [28] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [29] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [30] phi()
  [31] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [32] phi()
  [33] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [34] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [35] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [36] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [37] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [38] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [38] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [38] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [39] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [40] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [41] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [42] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [43] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [44] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [45] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [46] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [47] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [48] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [48] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [49] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [50] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [51] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [52] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [53] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@5
  [54] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [55] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [56] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [57] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [58] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [59] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@5 printf_uint::@2
  [60] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_schar::@5/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_upper_case#0 )
  [60] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_schar::@5/(byte) printf_number_buffer::buffer_sign#1 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [60] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_schar::@5/(byte) printf_number_buffer::format_zero_padding#1 printf_uint::@2/(const byte) printf_uint::format_zero_padding#0 )
  [60] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_schar::@5/(byte) 0 printf_uint::@2/(const byte) printf_uint::format_justify_left#0 )
  [60] (byte) printf_number_buffer::format_min_length#2 ← phi( printf_schar::@5/(byte) 6 printf_uint::@2/(const byte) printf_uint::format_min_length#0 )
  [61] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [62] phi()
  [63] call strlen 
  [64] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [65] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [66] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [67] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [68] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [69] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [70] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2
  [71] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [72] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [73] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [74] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [75] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [76] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [77] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [78] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [79] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [80] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10
  [81] call printf_char 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [82] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [83] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [84] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [85] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [86] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [87] phi()
  [88] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [89] phi()
  [90] call printf_str 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [91] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [92] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [93] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [94] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [95] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [96] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [97] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [97] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [98] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [99] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [100] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [101] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5
  [102] call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [103] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  [104] (byte) printf_char::ch#3 ← phi( printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  [105] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  [106] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [107] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [108] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [109] (byte) printf_cursor_x ← (byte) 0
  [110] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [111] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [112] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from printf_number_buffer::@5
  [113] phi()
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [114] (byte*) printf_str::str#2 ← phi( printf_str/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [115] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#2)
  [116] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2
  [117] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [118] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [119] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [120] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [121] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [122] phi()
  [123] call printf_ln 
  to:printf_str::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [124] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [125] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [126] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [127] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [128] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [129] call toupper 
  [130] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [131] (byte~) strupr::$0 ← (byte) toupper::return#3
  [132] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [133] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [134] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [135] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [136] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [137] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [138] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [139] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [140] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [140] (byte*) strlen::str#2 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [141] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [142] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [143] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [144] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [145] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [146] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [146] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [146] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(const word) printf_uint::uvalue#0 )
  [146] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [147] if((byte) utoa::digit#2<(const byte) utoa::max_digits#2-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [148] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [149] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [150] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [151] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [152] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [153] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [154] (word) utoa::digit_value#0 ← *((const word*) RADIX_HEXADECIMAL_VALUES + (byte~) utoa::$10)
  [155] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [156] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [157] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [157] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [157] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [158] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [159] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [160] (word) utoa_append::value#0 ← (word) utoa::value#2
  [161] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [162] call utoa_append 
  [163] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [164] (word) utoa::value#0 ← (word) utoa_append::return#0
  [165] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [166] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [167] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [167] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [168] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [169] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [170] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [171] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [172] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@1 main::@3
  [173] (byte) printf_schar::format_zero_padding#2 ← phi( main::@1/(byte) 0 main::@3/(byte) 1 )
  [173] (byte) printf_schar::format_radix#2 ← phi( main::@1/(const byte) DECIMAL main::@3/(const byte) OCTAL )
  [173] (byte) printf_schar::format_sign_always#2 ← phi( main::@1/(byte) 0 main::@3/(byte) 1 )
  [173] (signed byte) printf_schar::value#3 ← phi( main::@1/(signed byte) -$4d main::@3/(signed byte) $63 )
  [174] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [175] if((signed byte) printf_schar::value#3<(signed byte) 0) goto printf_schar::@1
  to:printf_schar::@3
printf_schar::@3: scope:[printf_schar]  from printf_schar
  [176] if((byte) 0==(byte) printf_schar::format_sign_always#2) goto printf_schar::@2
  to:printf_schar::@4
printf_schar::@4: scope:[printf_schar]  from printf_schar::@3
  [177] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '+'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1 printf_schar::@3 printf_schar::@4
  [178] (signed byte) printf_schar::value#5 ← phi( printf_schar::@1/(signed byte) printf_schar::value#0 printf_schar::@3/(signed byte) printf_schar::value#3 printf_schar::@4/(signed byte) printf_schar::value#3 )
  [179] (byte) uctoa::value#1 ← (byte)(signed byte) printf_schar::value#5
  [180] (byte) uctoa::radix#0 ← (byte) printf_schar::format_radix#2
  [181] call uctoa 
  to:printf_schar::@5
printf_schar::@5: scope:[printf_schar]  from printf_schar::@2
  [182] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [183] (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_schar::format_zero_padding#2
  [184] call printf_number_buffer 
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@5
  [185] return 
  to:@return
printf_schar::@1: scope:[printf_schar]  from printf_schar
  [186] (signed byte) printf_schar::value#0 ← - (signed byte) printf_schar::value#3
  [187] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_schar::@2

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2
  [188] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
  to:uctoa::@2
uctoa::@2: scope:[uctoa]  from uctoa
  [189] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@1
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@2
  [190] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@1
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@3
  [191] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@1
  to:uctoa::@5
uctoa::@5: scope:[uctoa]  from uctoa::@4
  [192] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e'
  [193] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r'
  [194] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r'
  [195] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@5 uctoa::@8
  [196] return 
  to:@return
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@2 uctoa::@3 uctoa::@4
  [197] (byte*) uctoa::digit_values#8 ← phi( uctoa/(const byte*) RADIX_DECIMAL_VALUES_CHAR uctoa::@2/(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR uctoa::@3/(const byte*) RADIX_OCTAL_VALUES_CHAR uctoa::@4/(const byte*) RADIX_BINARY_VALUES_CHAR )
  [197] (byte) uctoa::max_digits#7 ← phi( uctoa/(byte) 3 uctoa::@2/(byte) 2 uctoa::@3/(byte) 3 uctoa::@4/(byte) 8 )
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@1 uctoa::@9
  [198] (byte*) uctoa::buffer#11 ← phi( uctoa::@9/(byte*) uctoa::buffer#14 uctoa::@1/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [198] (byte) uctoa::started#2 ← phi( uctoa::@9/(byte) uctoa::started#4 uctoa::@1/(byte) 0 )
  [198] (byte) uctoa::value#2 ← phi( uctoa::@9/(byte) uctoa::value#6 uctoa::@1/(byte) uctoa::value#1 )
  [198] (byte) uctoa::digit#2 ← phi( uctoa::@9/(byte) uctoa::digit#1 uctoa::@1/(byte) 0 )
  [199] (byte~) uctoa::$4 ← (byte) uctoa::max_digits#7 - (byte) 1
  [200] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@7
  to:uctoa::@8
uctoa::@8: scope:[uctoa]  from uctoa::@6
  [201] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [202] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [203] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@7: scope:[uctoa]  from uctoa::@6
  [204] (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#8 + (byte) uctoa::digit#2)
  [205] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@10
  to:uctoa::@12
uctoa::@12: scope:[uctoa]  from uctoa::@7
  [206] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@10
  to:uctoa::@9
uctoa::@9: scope:[uctoa]  from uctoa::@11 uctoa::@12
  [207] (byte*) uctoa::buffer#14 ← phi( uctoa::@12/(byte*) uctoa::buffer#11 uctoa::@11/(byte*) uctoa::buffer#4 )
  [207] (byte) uctoa::started#4 ← phi( uctoa::@12/(byte) uctoa::started#2 uctoa::@11/(byte) 1 )
  [207] (byte) uctoa::value#6 ← phi( uctoa::@12/(byte) uctoa::value#2 uctoa::@11/(byte) uctoa::value#0 )
  [208] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@6
uctoa::@10: scope:[uctoa]  from uctoa::@12 uctoa::@7
  [209] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [210] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [211] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [212] call uctoa_append 
  [213] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@11
uctoa::@11: scope:[uctoa]  from uctoa::@10
  [214] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [215] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@9

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@10
  [216] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [217] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [217] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [218] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [219] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [220] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [221] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [222] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [223] phi()
  [224] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [225] (byte*) printf_cursor_ptr ← (byte*) 1024
  [226] (byte) printf_cursor_x ← (byte) 0
  [227] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [228] return 
  to:@return
