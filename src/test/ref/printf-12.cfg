@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] phi()
  [5] call main 
  to:@end
@end: scope:[]  from @2
  [6] phi()

(void()) main()
main: scope:[main]  from @2
  [7] phi()
  [8] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [9] (volatile byte) main::c ← (byte) 'x'
  [10] call printf_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] (byte) printf_char::ch#3 ← (volatile byte) main::c
  [12] call printf_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [13] phi()
  [14] call printf_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] phi()
  [16] call printf_str 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [17] phi()
  [18] call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [19] phi()
  [20] call printf_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [21] phi()
  [22] call printf_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [23] phi()
  [24] call printf_char 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [25] phi()
  [26] call printf_str 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [27] phi()
  [28] call printf_str 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [29] phi()
  [30] call printf_schar 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [31] phi()
  [32] call printf_str 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [33] phi()
  [34] call printf_str 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [35] phi()
  [36] call printf_uchar 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [37] phi()
  [38] call printf_str 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [39] phi()
  [40] call printf_str 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [41] phi()
  [42] call printf_sint 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [43] phi()
  [44] call printf_str 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [45] phi()
  [46] call printf_str 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [47] phi()
  [48] call printf_uint 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [49] phi()
  [50] call printf_str 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [51] phi()
  [52] call printf_str 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [53] phi()
  [54] call printf_slong 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [55] phi()
  [56] call printf_str 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [57] phi()
  [58] call printf_str 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [59] phi()
  [60] call printf_ulong 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [61] phi()
  [62] call printf_str 
  to:main::@return
main::@return: scope:[main]  from main::@27
  [63] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@1 main::@10 main::@12 main::@13 main::@15 main::@16 main::@18 main::@19 main::@21 main::@22 main::@24 main::@25 main::@27 main::@3 main::@4 main::@6 main::@7 main::@9 printf_number_buffer::@5
  [64] (byte*) printf_str::str#22 ← phi( main::@1/(const byte*) main::str main::@10/(const byte*) main::str6 main::@12/(const byte*) main::str1 main::@13/(const byte*) main::str8 main::@15/(const byte*) main::str1 main::@16/(const byte*) main::str10 main::@18/(const byte*) main::str1 main::@19/(const byte*) main::str12 main::@21/(const byte*) main::str1 main::@22/(const byte*) main::str14 main::@24/(const byte*) main::str1 main::@25/(const byte*) main::str16 main::@27/(const byte*) main::str1 main::@3/(const byte*) main::str1 main::@4/(const byte*) main::str2 main::@6/(const byte*) main::str1 main::@7/(const byte*) main::str4 main::@9/(const byte*) main::str1 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [65] (byte*) printf_str::str#20 ← phi( printf_str/(byte*) printf_str::str#22 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [66] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#20)
  [67] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#20
  [68] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [69] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [70] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [71] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [72] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [73] phi()
  [74] call printf_ln 
  to:printf_str::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  [75] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [76] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [77] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [78] (byte) printf_cursor_x ← (byte) 0
  [79] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [80] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [81] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [82] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [83] phi()
  [84] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [85] phi()
  [86] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [87] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [88] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [89] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [90] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [91] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [91] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [91] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [92] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [93] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [94] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [95] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [96] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [97] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [98] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [99] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [100] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [101] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [101] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [102] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [103] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [104] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [105] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [106] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from main::@2 main::@8 printf_number_buffer::@9 printf_padding::@2 printf_str::@5
  [107] (byte) printf_char::ch#5 ← phi( main::@2/(byte) printf_char::ch#3 main::@8/(byte) '%' printf_number_buffer::@9/(byte) printf_char::ch#2 printf_padding::@2/(byte) printf_char::ch#0 printf_str::@5/(byte) printf_char::ch#1 )
  [108] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#5
  [109] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [110] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [111] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [112] (byte) printf_cursor_x ← (byte) 0
  [113] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [114] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [115] return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@26
  [116] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [117] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [118] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [119] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [120] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [121] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@3 printf_sint::@3 printf_slong::@3 printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [122] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_upper_case#0 printf_sint::@3/(const byte) printf_sint::format_upper_case#0 printf_slong::@3/(const byte) printf_slong::format_upper_case#0 printf_uchar::@2/(const byte) printf_uchar::format_upper_case#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_upper_case#0 )
  [122] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_schar::@3/(byte) printf_number_buffer::buffer_sign#4 printf_sint::@3/(byte) printf_number_buffer::buffer_sign#2 printf_slong::@3/(byte) printf_number_buffer::buffer_sign#0 printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#5 printf_uint::@2/(byte) printf_number_buffer::buffer_sign#3 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#1 )
  [122] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_zero_padding#0 printf_sint::@3/(const byte) printf_sint::format_zero_padding#0 printf_slong::@3/(const byte) printf_slong::format_zero_padding#0 printf_uchar::@2/(const byte) printf_uchar::format_zero_padding#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_zero_padding#0 )
  [122] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_justify_left#0 printf_sint::@3/(const byte) printf_sint::format_justify_left#0 printf_slong::@3/(const byte) printf_slong::format_justify_left#0 printf_uchar::@2/(const byte) printf_uchar::format_justify_left#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_justify_left#0 )
  [122] (byte) printf_number_buffer::format_min_length#10 ← phi( printf_schar::@3/(const byte) printf_schar::format_min_length#0 printf_sint::@3/(const byte) printf_sint::format_min_length#0 printf_slong::@3/(const byte) printf_slong::format_min_length#0 printf_uchar::@2/(const byte) printf_uchar::format_min_length#0 printf_uint::@2/(byte) 0 printf_ulong::@2/(const byte) printf_ulong::format_min_length#0 )
  [123] if((byte) 0==(byte) printf_number_buffer::format_min_length#10) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [124] phi()
  [125] call strlen 
  [126] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [127] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [128] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [129] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [130] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [131] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [132] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#10 - (signed byte) printf_number_buffer::len#2
  [133] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [134] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [135] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [136] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [137] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [138] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [139] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [140] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [141] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [142] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#10
  [143] call printf_char 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [144] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [145] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [146] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [147] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [148] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [149] phi()
  [150] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [151] phi()
  [152] call printf_str 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [153] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [154] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [155] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [156] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [157] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [158] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [159] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [159] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [160] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [161] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [162] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [163] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#5
  [164] call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [165] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [166] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [167] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [168] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [169] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [170] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [171] call toupper 
  [172] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [173] (byte~) strupr::$0 ← (byte) toupper::return#3
  [174] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [175] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [176] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [177] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [178] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [179] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [180] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [181] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [182] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [182] (byte*) strlen::str#2 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [183] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [184] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [185] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [186] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_slong::@2 printf_ulong::@1
  [187] (dword) ultoa::value#10 ← phi( printf_slong::@2/(const dword) printf_slong::uvalue#0 printf_ulong::@1/(const dword) main::ul )
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [188] (byte*) ultoa::buffer#10 ← phi( ultoa::@4/(byte*) ultoa::buffer#15 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [188] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [188] (dword) ultoa::value#3 ← phi( ultoa::@4/(dword) ultoa::value#7 ultoa/(dword) ultoa::value#10 )
  [188] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [189] if((byte) ultoa::digit#2<(byte) $a-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [190] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#3
  [191] *((byte*) ultoa::buffer#10) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [192] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#10
  [193] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [194] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [195] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [196] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [197] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [198] if((dword) ultoa::value#3>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [199] (byte*) ultoa::buffer#15 ← phi( ultoa::@7/(byte*) ultoa::buffer#10 ultoa::@6/(byte*) ultoa::buffer#4 )
  [199] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [199] (dword) ultoa::value#7 ← phi( ultoa::@7/(dword) ultoa::value#3 ultoa::@6/(dword) ultoa::value#0 )
  [200] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [201] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#10
  [202] (dword) ultoa_append::value#0 ← (dword) ultoa::value#3
  [203] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [204] call ultoa_append 
  [205] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [206] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [207] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#10
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [208] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [209] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [209] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [210] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [211] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [212] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [213] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [214] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(void()) printf_slong((signed dword) printf_slong::value , (byte) printf_slong::format_min_length , (byte) printf_slong::format_justify_left , (byte) printf_slong::format_sign_always , (byte) printf_slong::format_zero_padding , (byte) printf_slong::format_upper_case , (byte) printf_slong::format_radix)
printf_slong: scope:[printf_slong]  from main::@23
  [215] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  to:printf_slong::@1
printf_slong::@1: scope:[printf_slong]  from printf_slong
  [216] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_slong::@2
printf_slong::@2: scope:[printf_slong]  from printf_slong::@1
  [217] phi()
  [218] call ultoa 
  to:printf_slong::@3
printf_slong::@3: scope:[printf_slong]  from printf_slong::@2
  [219] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [220] call printf_number_buffer 
  to:printf_slong::@return
printf_slong::@return: scope:[printf_slong]  from printf_slong::@3
  [221] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@20 main::@5
  [222] (byte) printf_uint::format_radix#2 ← phi( main::@20/(const byte) DECIMAL main::@5/(const byte) HEXADECIMAL )
  [222] (word) printf_uint::uvalue#2 ← phi( main::@20/(const word) main::ui main::@5/(word)&(volatile byte) main::c )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [223] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [224] (word) utoa::value#2 ← (word) printf_uint::uvalue#2
  [225] (byte) utoa::radix#1 ← (byte) printf_uint::format_radix#2
  [226] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [227] (byte) printf_number_buffer::buffer_sign#3 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [228] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [229] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2 printf_uint::@1
  [230] (word) utoa::value#10 ← phi( printf_sint::@2/(const word) printf_sint::uvalue#0 printf_uint::@1/(word) utoa::value#2 )
  [230] (byte) utoa::radix#2 ← phi( printf_sint::@2/(const byte) DECIMAL printf_uint::@1/(byte) utoa::radix#1 )
  [231] if((byte) utoa::radix#2==(const byte) DECIMAL) goto utoa::@1
  to:utoa::@2
utoa::@2: scope:[utoa]  from utoa
  [232] if((byte) utoa::radix#2==(const byte) HEXADECIMAL) goto utoa::@1
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@2
  [233] if((byte) utoa::radix#2==(const byte) OCTAL) goto utoa::@1
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@3
  [234] if((byte) utoa::radix#2==(const byte) BINARY) goto utoa::@1
  to:utoa::@5
utoa::@5: scope:[utoa]  from utoa::@4
  [235] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) ← (byte) 'e'
  [236] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 1) ← (byte) 'r'
  [237] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 2) ← (byte) 'r'
  [238] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(byte) 3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@5 utoa::@8
  [239] return 
  to:@return
utoa::@1: scope:[utoa]  from utoa utoa::@2 utoa::@3 utoa::@4
  [240] (word*) utoa::digit_values#8 ← phi( utoa/(const word*) RADIX_DECIMAL_VALUES utoa::@2/(const word*) RADIX_HEXADECIMAL_VALUES utoa::@3/(const word*) RADIX_OCTAL_VALUES utoa::@4/(const word*) RADIX_BINARY_VALUES )
  [240] (byte) utoa::max_digits#7 ← phi( utoa/(byte) 5 utoa::@2/(byte) 4 utoa::@3/(byte) 6 utoa::@4/(byte) $10 )
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@1 utoa::@9
  [241] (byte*) utoa::buffer#10 ← phi( utoa::@9/(byte*) utoa::buffer#15 utoa::@1/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [241] (byte) utoa::started#2 ← phi( utoa::@9/(byte) utoa::started#4 utoa::@1/(byte) 0 )
  [241] (word) utoa::value#3 ← phi( utoa::@9/(word) utoa::value#7 utoa::@1/(word) utoa::value#10 )
  [241] (byte) utoa::digit#2 ← phi( utoa::@9/(byte) utoa::digit#1 utoa::@1/(byte) 0 )
  [242] (byte~) utoa::$4 ← (byte) utoa::max_digits#7 - (byte) 1
  [243] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@7
  to:utoa::@8
utoa::@8: scope:[utoa]  from utoa::@6
  [244] (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  [245] *((byte*) utoa::buffer#10) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [246] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#10
  [247] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@7: scope:[utoa]  from utoa::@6
  [248] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [249] (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#8 + (byte~) utoa::$10)
  [250] if((byte) 0!=(byte) utoa::started#2) goto utoa::@10
  to:utoa::@12
utoa::@12: scope:[utoa]  from utoa::@7
  [251] if((word) utoa::value#3>=(word) utoa::digit_value#0) goto utoa::@10
  to:utoa::@9
utoa::@9: scope:[utoa]  from utoa::@11 utoa::@12
  [252] (byte*) utoa::buffer#15 ← phi( utoa::@12/(byte*) utoa::buffer#10 utoa::@11/(byte*) utoa::buffer#4 )
  [252] (byte) utoa::started#4 ← phi( utoa::@12/(byte) utoa::started#2 utoa::@11/(byte) 1 )
  [252] (word) utoa::value#7 ← phi( utoa::@12/(word) utoa::value#3 utoa::@11/(word) utoa::value#0 )
  [253] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@6
utoa::@10: scope:[utoa]  from utoa::@12 utoa::@7
  [254] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#10
  [255] (word) utoa_append::value#0 ← (word) utoa::value#3
  [256] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [257] call utoa_append 
  [258] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@11
utoa::@11: scope:[utoa]  from utoa::@10
  [259] (word) utoa::value#0 ← (word) utoa_append::return#0
  [260] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#10
  to:utoa::@9

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@10
  [261] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [262] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [262] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [263] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [264] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [265] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [266] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [267] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@17
  [268] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  to:printf_sint::@1
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [269] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint::@1
  [270] phi()
  [271] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [272] (byte) printf_number_buffer::buffer_sign#2 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [273] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [274] return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@14
  [275] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [276] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [277] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [278] (byte) printf_number_buffer::buffer_sign#5 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [279] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [280] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2 printf_uchar::@1
  [281] (byte) uctoa::value#10 ← phi( printf_schar::@2/(const byte) printf_schar::uvalue#0 printf_uchar::@1/(const byte) main::uc )
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [282] (byte*) uctoa::buffer#10 ← phi( uctoa::@4/(byte*) uctoa::buffer#15 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [282] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [282] (byte) uctoa::value#3 ← phi( uctoa::@4/(byte) uctoa::value#7 uctoa/(byte) uctoa::value#10 )
  [282] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [283] if((byte) uctoa::digit#2<(byte) 3-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [284] *((byte*) uctoa::buffer#10) ← *((const byte*) DIGITS + (byte) uctoa::value#3)
  [285] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#10
  [286] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [287] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [288] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_DECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [289] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [290] if((byte) uctoa::value#3>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [291] (byte*) uctoa::buffer#15 ← phi( uctoa::@7/(byte*) uctoa::buffer#10 uctoa::@6/(byte*) uctoa::buffer#4 )
  [291] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [291] (byte) uctoa::value#7 ← phi( uctoa::@7/(byte) uctoa::value#3 uctoa::@6/(byte) uctoa::value#0 )
  [292] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [293] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#10
  [294] (byte) uctoa_append::value#0 ← (byte) uctoa::value#3
  [295] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [296] call uctoa_append 
  [297] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [298] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [299] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#10
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [300] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [301] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [301] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [302] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [303] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [304] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [305] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [306] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_upper_case , (byte) printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@11
  [307] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  to:printf_schar::@1
printf_schar::@1: scope:[printf_schar]  from printf_schar
  [308] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1
  [309] phi()
  [310] call uctoa 
  to:printf_schar::@3
printf_schar::@3: scope:[printf_schar]  from printf_schar::@2
  [311] (byte) printf_number_buffer::buffer_sign#4 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [312] call printf_number_buffer 
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@3
  [313] return 
  to:@return

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [314] phi()
  [315] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [316] (byte*) printf_cursor_ptr ← (byte*) 1024
  [317] (byte) printf_cursor_x ← (byte) 0
  [318] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [319] return 
  to:@return
