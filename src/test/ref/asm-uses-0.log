Resolved forward reference init to (void()) init()

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  asm { jsrinit  }
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) init()
init: scope:[init]  from
  *((const nomodify byte*) BG_COLOR) ← (number) 0
  to:init::@return
init::@return: scope:[init]  from init
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) BG_COLOR = (byte*)(number) $d020
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) init()
(label) init::@return
(void()) main()
(label) main::@return

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) BG_COLOR) ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const nomodify byte*) BG_COLOR) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53280
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) init()
init: scope:[init]  from
  [0] *((const nomodify byte*) BG_COLOR) ← (byte) 0
  to:init::@return
init::@return: scope:[init]  from init
  [1] return 
  to:@return

(void()) main()
main: scope:[main]  from
  asm { jsrinit  }
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) init()
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that inline asm uses clause makes the compiler not cull a procedure referenced
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BG_COLOR = $d020
  // init
// Function only used inside the inline asm
init: {
    // [0] *((const nomodify byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    jmp __breturn
    // init::@return
  __breturn:
    // [1] return 
    rts
}
  // main
main: {
    // asm { jsrinit  }
    jsr init
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) BG_COLOR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement asm { jsrinit  } always clobbers reg byte a reg byte x reg byte y 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [init] 
Uplift Scope [] 

Uplifting [main] best 30 combination 
Uplifting [init] best 30 combination 
Uplifting [] best 30 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that inline asm uses clause makes the compiler not cull a procedure referenced
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BG_COLOR = $d020
  // init
// Function only used inside the inline asm
init: {
    // [0] *((const nomodify byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    jmp __breturn
    // init::@return
  __breturn:
    // [1] return 
    rts
}
  // main
main: {
    // asm { jsrinit  }
    jsr init
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) BG_COLOR = (byte*) 53280
(void()) init()
(label) init::@return
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 24

  // File Comments
// Tests that inline asm uses clause makes the compiler not cull a procedure referenced
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label BG_COLOR = $d020
  // init
// Function only used inside the inline asm
init: {
    // *BG_COLOR = 0
    // [0] *((const nomodify byte*) BG_COLOR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BG_COLOR
    // init::@return
    // }
    // [1] return 
    rts
}
  // main
main: {
    // asm
    // asm { jsrinit  }
    jsr init
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data

